{
  "text": "Integrity Checks Bypassing the application-source integrity checks 1. Patchtheanti-debuggingfunctionality. Disabletheunwantedbehaviorbysimplyoverwritingtheassociatedbyte- codeornativecodewithNOPinstructions. 2. Use Frida or Xposed to hook file system APIs on the Java and native layers. Return a handle to the original file insteadofthemodifiedfile. 3. Usethekernelmoduletointerceptfile-relatedsystemcalls. Whentheprocessattemptstoopenthemodifiedfile, returnafiledescriptorfortheunmodifiedversionofthefile. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Bypassing the storage integrity checks 1. Retrievethedatafromthedevice. 2. Altertheretrieveddataandthenputitbackintostorage. Effectiveness Assessment Application-sourceintegritychecks: Runtheappinanunmodifiedstateandmakesurethateverythingworks. Applysimplepatchestoclasses.dexandany .so libraries in the app package. Re-package and re-sign the app as described in the “Basic Security Testing” chapter, thenruntheapp. Theappshoulddetectthemodificationandrespondinsomeway. Attheveryleast, theappshould alerttheuserand/orterminate. Workonbypassingthedefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingtheanti-debuggingcodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Storageintegritychecks: Anapproachsimilartothatforapplication-sourceintegritychecksapplies. Answerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,bychangingthecontentsofafileorakey-value)? 320\\n• HowdifficultisgettingtheHMACkeyortheasymmetricprivatekey? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Testing for Debugging Symbols Platform: android MASVSV1: MSTG-CODE-3 MASVSV2: MASVS-RESILIENCE-3 Overview Static Analysis Symbolsareusuallystrippedduringthebuildprocess,soyouneedthecompiledbytecodeandlibrariestomakesurethat unnecessarymetadatahasbeendiscarded. First,findthenmbinaryinyourAndroidNDKandexportit(orcreateanalias). export NM=$ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm Todisplaydebugsymbols: $NM-alibfoo.so /tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm:libfoo.so:nosymbols Todisplaydynamicsymbols: $NM-Dlibfoo.so Alternatively,openthefileinyourfavoritedisassemblerandcheckthesymboltablesmanually. Dynamicsymbolscanbestrippedviathevisibilitycompilerflag. Addingthisflagcausesgcctodiscardthefunction nameswhilepreservingthenamesoffunctionsdeclaredasJNIEXPORT. Makesurethatthefollowinghasbeenaddedtobuild.gradle: externalNativeBuild{ cmake{ cppFlags\"-fvisibility=hidden\" } } Dynamic Analysis Staticanalysisshouldbeusedtoverifydebuggingsymbols. Testing for Debugging Code and Verbose Error Logging Platform: android MASVSV1: MSTG-CODE-4 MASVSV2: MASVS-RESILIENCE-3 321\\nOverview Static Analysis To determine whether StrictMode is enabled, you can look for the StrictMode.setThreadPolicy or StrictMode. setVmPolicymethods. Mostlikely,theywillbeintheonCreatemethod. Thedetectionmethodsforthethreadpolicyare detectDiskWrites() detectDiskReads() detectNetwork() Thepenaltiesforthreadpolicyviolationare penaltyLog()//LogsamessagetoLogCat penaltyDeath()//Crashesapplication,runsattheendofallenabledpenalties penaltyDialog()//Showsadialog HavealookatthebestpracticesforusingStrictMode. Dynamic Analysis There are several ways of detecting StrictMode; the best choice depends on how the policies’ roles are implemented. Theyinclude • Logcat, • awarningdialog, • applicationcrash. Testing Anti-Debugging Detection Platform: android MASVSV1: MSTG-RESILIENCE-2 MASVSV2: MASVS-RESILIENCE-4 Bypassing Debugger Detection There’s no generic way to bypass anti-debugging: the best method depends on the particular mechanism(s) used to prevent or detect debugging and the other defenses in the overall protection scheme. For example, if there are no integrity checks or you’ve already deactivated them, patching the app might be the easiest method. In other cases, a hooking framework or kernel modules might be preferable. The following methods describe different approaches to bypassdebuggerdetection: • Patchingtheanti-debuggingfunctionality: DisabletheunwantedbehaviorbysimplyoverwritingitwithNOPinstruc- tions. Notethatmorecomplexpatchesmayberequirediftheanti-debuggingmechanismiswelldesigned. • UsingFridaorXposedtohookAPIsontheJavaandnativelayers: manipulatethereturnvaluesoffunctionssuch asisDebuggableandisDebuggerConnectedtohidethedebugger. • Changingtheenvironment: Androidisanopenenvironment. Ifnothingelseworks,youcanmodifytheoperating systemtosubverttheassumptionsthedevelopersmadewhendesigningtheanti-debuggingtricks. 322\\nBypassing Example: UnCrackable App for Android Level 2 When dealing with obfuscated apps, you’ll often find that developers purposely “hide away” data and functionality in nativelibraries. You’llfindanexampleofthisinlevel2ofthe“UnCrackableAppforAndroid”. At first glance, the code looks like the prior challenge. A class called CodeCheck is responsible for verifying the code enteredbytheuser. Theactualcheckappearstooccurinthebarmethod,whichisdeclaredasanativemethod. package sg.vantagepoint.uncrackable2; public class CodeCheck { public CodeCheck(){ super(); } public boolean a(Stringarg2){ return this.bar(arg2.getBytes()); } private native boolean bar(byte[]arg1){ } } static { System.loadLibrary(\"foo\"); } PleaseseedifferentproposedsolutionsfortheAndroidCrackmeLevel2inGitHub. Effectiveness Assessment Checkforanti-debuggingmechanisms,includingthefollowingcriteria: • Attachingjdbandptrace-baseddebuggersfailsorcausestheapptoterminateormalfunction. • Multipledetectionmethodsarescatteredthroughouttheapp’ssourcecode(asopposedtotheirallbeinginasingle methodorfunction). • Theanti-debuggingdefensesoperateonmultipleAPIlayers(Java,nativelibraryfunctions,assembler/systemcalls). • The mechanisms are somehow original (as opposed to being copied and pasted from StackOverflow or other sources). Workonbypassingtheanti-debuggingdefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingtheanti-debuggingcodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyoursubjectiveassessmentofthedifficultyofbypassingthemechanisms? Ifanti-debuggingmechanismsaremissingortooeasilybypassed,makesuggestionsinlinewiththeeffectivenesscriteria above. Thesesuggestionsmayincludeaddingmoredetectionmechanismsandbetterintegrationofexistingmechanisms withotherdefenses. Testing Runtime Integrity Checks Platform: android MASVSV1: MSTG-RESILIENCE-6 MASVSV2: MASVS-RESILIENCE-2 Effectiveness Assessment Makesurethatallfile-baseddetectionofreverseengineeringtoolsisdisabled. Then,injectcodebyusingXposed,Frida, andSubstrate,andattempttoinstallnativehooksandJavamethodhooks. Theappshoulddetectthe“hostile”codein itsmemoryandrespondaccordingly. Workonbypassingthecheckswiththefollowingtechniques: 323\\n1. Patchtheintegritychecks. Disabletheunwantedbehaviorbyoverwritingtherespectivebytecodeornativecode withNOPinstructions. 2. UseFridaorXposedtohooktheAPIsusedfordetectionandreturnfakevalues. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Testing Obfuscation Platform: android MASVSV1: MSTG-RESILIENCE-9 MASVSV2: MASVS-RESILIENCE-3 Overview Static Analysis DecompiletheAPKandreviewittodeterminewhetherthecodebasehasbeenobfuscated. Belowyoucanfindasampleforanobfuscatedcodeblock: package com.a.a.a; import com.a.a.b.a; import java.util.List; class a$b extends a { public a$b(ListparamList) { super(paramList); } public boolean areAllItemsEnabled() { return true; } public boolean isEnabled(intparamInt) { return true; } } Herearesomeconsiderations: • Meaningfulidentifiers,suchasclassnames,methodnames,andvariablenames,mighthavebeendiscarded. • Stringresourcesandstringsinbinariesmighthavebeenencrypted. • Codeanddatarelatedtotheprotectedfunctionalitymightbeencrypted,packed,orotherwiseconcealed. Fornativecode: •",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 118
  },
  "embedding": [
    -0.07478180527687073,
    0.005839591380208731,
    -0.016957100480794907,
    -0.04877759888768196,
    0.05449594929814339,
    -0.08481879532337189,
    -0.031102236360311508,
    0.06894730031490326,
    -0.036730360239744186,
    0.04750050976872444,
    0.016904111951589584,
    -0.008764894679188728,
    -0.0028194079641252756,
    -0.09571309387683868,
    -0.036289941519498825,
    -0.038939882069826126,
    0.005174224730581045,
    0.09455077350139618,
    -0.017669091001152992,
    0.0704445168375969,
    0.014429764822125435,
    -0.03064711205661297,
    0.04269293695688248,
    -0.041608814150094986,
    0.04411502927541733,
    0.014869089238345623,
    -0.04723076522350311,
    -0.05755821242928505,
    -0.051768846809864044,
    -0.05165272578597069,
    -0.0279836468398571,
    0.010051167570054531,
    -0.07472625374794006,
    0.011839418672025204,
    0.03450995683670044,
    0.07383947819471359,
    0.04137354716658592,
    -0.06590301543474197,
    -0.06886482983827591,
    -0.04897206649184227,
    -0.07910612970590591,
    0.07323089241981506,
    -0.09217769652605057,
    0.011992346495389938,
    -0.09146212786436081,
    -0.10183434933423996,
    0.0487130805850029,
    -0.07742872834205627,
    -0.04556684568524361,
    0.0020255406852811575,
    -0.03166714310646057,
    0.03864253684878349,
    0.017833475023508072,
    -0.009969091974198818,
    0.04037390276789665,
    -0.039852872490882874,
    0.011143808253109455,
    0.06769906729459763,
    -0.0483967661857605,
    0.08976563066244125,
    0.04703706502914429,
    0.04595367610454559,
    -0.05131153762340546,
    -0.02543404884636402,
    0.017832746729254723,
    0.039186373353004456,
    0.024796821177005768,
    -0.026258785277605057,
    0.05528431013226509,
    -0.11092029511928558,
    -0.07728587836027145,
    0.0383172482252121,
    -0.03418007493019104,
    0.03146693855524063,
    -0.054747626185417175,
    0.04953344166278839,
    -0.0663018748164177,
    0.08319058269262314,
    0.0013249041512608528,
    -0.14280042052268982,
    0.03829367831349373,
    -0.001611796673387289,
    0.046221066266298294,
    0.05724426358938217,
    -0.009876263327896595,
    0.0451321043074131,
    -0.026935730129480362,
    0.03583246469497681,
    0.05637235566973686,
    0.11432758718729019,
    0.03358916938304901,
    0.018946988508105278,
    0.042059365659952164,
    -0.0008579326095059514,
    0.04610544815659523,
    -0.00173073576297611,
    -0.013776453211903572,
    0.04864783585071564,
    -0.0022745998576283455,
    0.058813486248254776,
    -0.016567254438996315,
    0.0101279616355896,
    -0.03598877415060997,
    -0.054580770432949066,
    0.09306151419878006,
    0.02148359827697277,
    0.028416045010089874,
    0.023266524076461792,
    -0.02739367075264454,
    -0.0497349351644516,
    0.007636174093931913,
    -0.06611194461584091,
    -0.008022751659154892,
    -0.08492659777402878,
    0.05531187355518341,
    0.04197552427649498,
    -0.02727401629090309,
    0.051900770515203476,
    -0.032942190766334534,
    -0.003123627044260502,
    0.07219404727220535,
    -0.0012100654421374202,
    0.0003843740851152688,
    -0.08393188565969467,
    -0.013875610195100307,
    0.045702092349529266,
    -0.01582389511168003,
    2.0558035561170732e-32,
    0.02141999453306198,
    -0.022544778883457184,
    0.026420438662171364,
    0.08825382590293884,
    -0.018954623490571976,
    -0.11157189309597015,
    0.06609692424535751,
    0.02842807210981846,
    -0.0635528638958931,
    -0.0541352815926075,
    -0.02155821956694126,
    -0.005384837277233601,
    -0.06587869673967361,
    -0.027875041589140892,
    0.007641495205461979,
    -0.05637998878955841,
    -0.09329341351985931,
    -0.0182768814265728,
    -0.0054572708904743195,
    0.013825947418808937,
    0.04833245649933815,
    -0.09857542812824249,
    0.002547656651586294,
    -0.019482923671603203,
    -0.030724355950951576,
    0.037205588072538376,
    4.163649919064483e-06,
    -0.022020630538463593,
    0.03409184142947197,
    0.03811480104923248,
    -0.0018383031710982323,
    -0.05706648901104927,
    0.020090829581022263,
    -0.010025957599282265,
    -0.0481569766998291,
    -0.04968028515577316,
    -0.01896829903125763,
    -0.03781735897064209,
    -0.031208312138915062,
    -0.03893750533461571,
    -0.014135652221739292,
    -0.044750701636075974,
    -0.049488458782434464,
    0.03763221949338913,
    0.0663289949297905,
    -0.07840121537446976,
    -0.062095582485198975,
    -0.021419748663902283,
    -0.0017469606827944517,
    0.03388364985585213,
    0.07918010652065277,
    0.04631222411990166,
    0.09213526546955109,
    -0.03886936977505684,
    -0.09018850326538086,
    0.00031461790786124766,
    0.011372906155884266,
    -0.03472547233104706,
    -0.03296073526144028,
    0.08465047925710678,
    0.017118241637945175,
    0.021683823317289352,
    -0.032638996839523315,
    -0.012300660833716393,
    -0.0044562928378582,
    0.0011643188772723079,
    0.04018164798617363,
    -0.07041788846254349,
    -0.01796402968466282,
    -0.004990046378225088,
    -0.06109601631760597,
    -0.037831470370292664,
    0.054816339164972305,
    0.01154543086886406,
    -0.02216521091759205,
    -0.02480819635093212,
    -0.006595654413104057,
    0.021634768694639206,
    -0.007790481671690941,
    -0.07487672567367554,
    0.0251909289509058,
    -0.02044018916785717,
    0.02419853024184704,
    -0.04615751653909683,
    4.7162673581624404e-05,
    -0.025692880153656006,
    -0.025133876129984856,
    -0.0491526797413826,
    0.03066069819033146,
    0.05997169762849808,
    0.06672296673059464,
    0.008665306493639946,
    0.049383796751499176,
    -0.014066089875996113,
    -0.0058520883321762085,
    -1.8735289041530738e-32,
    0.0557636134326458,
    -0.043237946927547455,
    -0.047185707837343216,
    -0.010633450001478195,
    -0.0054053873755037785,
    0.022002030164003372,
    -0.10722582787275314,
    -0.017026828601956367,
    0.01976102404296398,
    -0.03162671625614166,
    -0.05456262081861496,
    0.0006221717922016978,
    0.019071033224463463,
    -0.04567495733499527,
    0.0034088774118572474,
    -0.048630453646183014,
    -0.004062622785568237,
    -0.025884823873639107,
    -0.0003439290157984942,
    0.059909846633672714,
    0.04662467539310455,
    0.022774042561650276,
    0.10040578246116638,
    0.07390306144952774,
    0.0723198875784874,
    -0.03841203823685646,
    -0.09148818999528885,
    0.019849484786391258,
    0.044240426272153854,
    0.009794977493584156,
    0.10755475610494614,
    0.021664917469024658,
    -0.05761156603693962,
    -0.12436118721961975,
    0.029467863962054253,
    -0.07510814815759659,
    0.011887721717357635,
    0.0024631035048514605,
    -0.03687095269560814,
    0.0564257837831974,
    0.03978388011455536,
    -0.03199780359864235,
    -0.02009265497326851,
    0.004489649087190628,
    0.057779621332883835,
    -0.0007840630132704973,
    -0.059697553515434265,
    0.013452552258968353,
    -0.030269818380475044,
    -0.07509315013885498,
    0.0718483030796051,
    -0.01907597854733467,
    0.06632198393344879,
    0.033349744975566864,
    0.09536683559417725,
    0.10450353473424911,
    0.10049010068178177,
    0.003303333418443799,
    -0.03497599437832832,
    0.0773429423570633,
    0.06253621727228165,
    -0.1404152661561966,
    0.0065737320110201836,
    -0.03560248017311096,
    0.04333936795592308,
    0.03893008455634117,
    0.05278730392456055,
    0.04190227761864662,
    -0.0868370458483696,
    0.026020193472504616,
    -0.00700391037389636,
    -0.029642030596733093,
    -0.0404343344271183,
    -0.0027767526917159557,
    0.0902039110660553,
    0.035108067095279694,
    -0.01594056934118271,
    -0.10811883211135864,
    -0.05703335255384445,
    0.03927300125360489,
    -0.018530644476413727,
    0.032300252467393875,
    -0.03635326772928238,
    -0.002814305480569601,
    0.10928121954202652,
    -0.034959957003593445,
    -0.07614744454622269,
    0.014174873940646648,
    0.0018692784942686558,
    -0.0207055676728487,
    -0.12270767986774445,
    0.03860586881637573,
    -0.01768207550048828,
    -0.021950285881757736,
    -0.006688330322504044,
    -7.379743749424961e-08,
    -0.031083548441529274,
    -0.005379279609769583,
    -0.07663223892450333,
    0.010281139053404331,
    0.08651533722877502,
    0.030374931171536446,
    -0.03437104821205139,
    0.02792944386601448,
    0.03996969386935234,
    -0.07752180099487305,
    0.046826645731925964,
    0.007495121099054813,
    -0.05969419702887535,
    -0.003552590496838093,
    0.007452980149537325,
    -0.061343204230070114,
    0.02136816456913948,
    0.08281663805246353,
    -0.04979248344898224,
    0.01337174791842699,
    0.009414237923920155,
    -0.02413102425634861,
    -0.06422794610261917,
    0.05309772863984108,
    0.07915603369474411,
    -0.0332573838531971,
    0.15311738848686218,
    0.02924792654812336,
    0.022159578278660774,
    0.03592030331492424,
    -0.017535634338855743,
    -0.03356882557272911,
    0.07596296817064285,
    -0.005170729476958513,
    -0.0923037976026535,
    0.13308089971542358,
    0.07644451409578323,
    0.05375800281763077,
    0.02129586599767208,
    0.0038010645657777786,
    0.0016609589802101254,
    0.1105257049202919,
    -0.028877532109618187,
    -0.02381032519042492,
    0.010473794303834438,
    -0.03315596655011177,
    -0.018510546535253525,
    0.07244990766048431,
    -0.0791982039809227,
    -0.0460934117436409,
    -0.08509744703769684,
    -0.005819243844598532,
    -0.06529081612825394,
    0.06758992373943329,
    -0.04492700845003128,
    0.0026424045208841562,
    -0.011315803043544292,
    0.020242273807525635,
    0.05484684929251671,
    0.044202614575624466,
    0.0736699253320694,
    0.008960481733083725,
    0.09010981768369675,
    -0.0075971633195877075
  ]
}