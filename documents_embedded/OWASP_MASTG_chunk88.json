{
  "text": "provides several tools for analyzing the memory dump. For example, the Histogram provides an estimate of the numberofobjectsthathavebeencapturedfromagiventype,andtheThreadOverviewshowsprocesses’threadsand stack frames. The Dominator Tree provides information about keep-alive dependencies between objects. You can use regularexpressionstofiltertheresultsthesetoolsprovide. ObjectQueryLanguagestudioisaMATfeaturethatallowsyoutoqueryobjectsfromthememorydumpwithanSQL-like language. ThetoolallowsyoutotransformsimpleobjectsbyinvokingJavamethodsonthem,anditprovidesanAPIfor buildingsophisticatedtoolsontopoftheMAT. SELECT *FROM java.lang.String Intheexampleabove,allStringobjectspresentinthememorydumpwillbeselected. Theresultswillincludetheobject’s class,memoryaddress,value,andretaincount. Tofilterthisinformationandseeonlythevalueofeachstring,usethe followingcode: SELECT toString(object)FROM java.lang.String object Or SELECT object.toString() FROM java.lang.String object SQLsupportsprimitivedatatypesaswell, soyoucandosomethinglikethefollowingtoaccessthecontentofallchar arrays: SELECT toString(arr) FROM char[]arr Don’tbesurprisedifyougetresultsthataresimilartothepreviousresults; afterall,StringandotherJavadatatypes arejustwrappersaroundprimitivedatatypes. Nowlet’sfiltertheresults. Thefollowingsamplecodewillselectallbyte arraysthatcontaintheASN.1OIDofanRSAkey. Thisdoesn’timplythatagivenbytearrayactuallycontainsanRSA(the samebytesequencemaybepartofsomethingelse),butthisisprobable. SELECT *FROM byte[]b WHERE toString(b).matches(\".*1\\.2\\.840\\.113549\\.1\\.1\\.1.*\") Finally,youdon’thavetoselectwholeobjects. ConsideranSQLanalogy: classesaretables,objectsarerows,andfields arecolumns. Ifyouwanttofindallobjectsthathavea“password”field,youcandosomethinglikethefollowing: SELECT password FROM \".*\" WHERE (null !=password) Duringyouranalysis,searchfor: • Indicativefieldnames: “password”,“pass”,“pin”,“secret”,“private”,etc. • Indicativepatterns(e.g.,RSAfootprints)instrings,chararrays,bytearrays,etc. • Knownsecrets(e.g.,acreditcardnumberthatyou’veenteredoranauthenticationtokenprovidedbythebackend) • etc. Repeatingtestsandmemorydumpswillhelpyouobtainstatisticsaboutthelengthofdataexposure. Furthermore,observ- ingthewayaparticularmemorysegment(e.g.,abytearray)changesmayleadyoutosomeotherwiseunrecognizable sensitivedata(moreonthisinthe“Remediation”sectionbelow). Determining Whether the Keyboard Cache Is Disabled for Text Input Fields 214\\nPlatform: android MASVSV1: MSTG-STORAGE-5 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis In the layout definition of an activity, you can define TextViews that have XML attributes. If the XML attribute an- droid:inputTypeisgiventhevaluetextNoSuggestions,thekeyboardcachewillnotbeshownwhentheinputfieldis selected. Theuserwillhavetotypeeverythingmanually. <EditText android:id=\"@+id/KeyBoardCache\" android:inputType=\"textNoSuggestions\" /> The code for all input fields that take sensitive information should include this XML attribute to disable the keyboard suggestions. Alternatively,thedevelopercanusethefollowingconstants: XMLandroid:inputType CodeInputType APIlevel textPassword TYPE_TEXT_VARIATION_PASSWORD 3 textVisiblePassword TYPE_TEXT_VARIATION_VISIBLE_PASSWORD 3 numberPassword TYPE_NUMBER_VARIATION_PASSWORD 11 textWebPassword TYPE_TEXT_VARIATION_WEB_PASSWORD 11 Check the application code to verify that none of the input types are being overwritten. For example, by doing findViewById(R.id.KeyBoardCache).setInputType(InputType.TYPE_CLASS_TEXT) the input type of the input field KeyBoardCacheissettotextreenablingthekeyboardcache. Finally,checktheminimumrequiredSDKversionintheAndroidManifest(android:minSdkVersion)sinceitmustsupport theusedconstants(forexample,AndroidSDKversion11isrequiredfortextWebPassword). Otherwise,thecompiledapp wouldnothonortheusedinputtypeconstantsallowingkeyboardcaching. Dynamic Analysis Starttheappandclickintheinputfieldsthattakesensitivedata. Ifstringsaresuggested,thekeyboardcachehasnot beendisabledforthesefields. Testing Logs for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-3 MASVSV2: MASVS-STORAGE-2 Overview Thistestcasefocusesonidentifyinganysensitiveapplicationdatawithinbothsystemandapplicationlogs. Thefollowing checksshouldbeperformed: 215\\n• Analyzesourcecodeforloggingrelatedcode. • Checkapplicationdatadirectoryforlogfiles. • Gathersystemmessagesandlogsandanalyzeforanysensitivedata. Asageneralrecommendationtoavoidpotentialsensitiveapplicationdataleakage,loggingstatementsshouldberemoved fromproductionreleasesunlessdeemednecessarytotheapplicationorexplicitlyidentifiedassafe,e.g.asaresultofa securityaudit. Static Analysis ApplicationswilloftenusetheLogClassandLoggerClasstocreatelogs. Todiscoverthis,youshouldaudittheapplication’s sourcecodeforanysuchloggingclasses. Thesecanoftenbefoundbysearchingforthefollowingkeywords: • Functionsandclasses,suchas: – android.util.Log – Log.d|Log.e|Log.i|Log.v|Log.w|Log.wtf – Logger • Keywordsandsystemoutput: – System.out.print|System.err.print – logfile – logging – logs While preparing the production release, you can use tools like ProGuard (included in Android Studio). To determine whetherallloggingfunctionsfromtheandroid.util.Log classhavebeenremoved, checktheProGuardconfiguration file (proguard-rules.pro) for the following options (according to this example of removing logging code and this article aboutenablingProGuardinanAndroidStudioproject): -assumenosideeffectsclassandroid.util.Log { publicstaticbooleanisLoggable(java.lang.String,int); publicstaticintv(...); publicstaticinti(...); publicstaticintw(...); publicstaticintd(...); publicstaticinte(...); publicstaticintwtf(...); } Note that the example above only ensures that calls to the Log class’ methods will be removed. If the string that will beloggedisdynamicallyconstructed,thecodethatconstructsthestringmayremaininthebytecode. Forexample,the followingcodeissuesanimplicitStringBuildertoconstructthelogstatement: ExampleinJava: Log.v(\"Privatekeytag\",\"Privatekey[byteformat]:\" +key); ExampleinKotlin: Log.v(\"Privatekeytag\",\"Privatekey[byteformat]: $key\") Thecompiledbytecode,however,isequivalenttothebytecodeofthefollowinglogstatement,whichconstructsthestring explicitly: ExampleinJava: Log.v(\"Privatekeytag\",newStringBuilder(\"Privatekey[byteformat]:\").append(key.toString()).toString()); ExampleinKotlin: 216\\nLog.v(\"Privatekeytag\",StringBuilder(\"Privatekey[byteformat]:\").append(key).toString()) ProGuardguaranteesremovaloftheLog.vmethodcall. Whethertherestofthecode(new StringBuilder ...) willbe removeddependsonthecomplexityofthecodeandtheProGuardversion. Thisisasecurityriskbecausethe(unused)stringleaksplaintextdataintomemory,whichcanbeaccessedviaadebugger ormemorydumping. Unfortunately,nosilverbulletexistsforthisissue,butoneoptionwouldbetoimplementacustomloggingfacilitythat takessimpleargumentsandconstructsthelogstatementsinternally. SecureLog.v(\"Privatekey[byteformat]:\",key); ThenconfigureProGuardtostripitscalls. Dynamic Analysis Useallthemobileappfunctionsatleastonce,thenidentifytheapplication’sdatadirectoryandlookforlogfiles(/data/ data/<package-name>). Check the application logs to determine whether log data has been generated; some mobile applicationscreateandstoretheirownlogsinthedatadirectory. ManyapplicationdevelopersstilluseSystem.out.printlnorprintStackTraceinsteadofaproperloggingclass. There- fore, your testing strategy must include all output generated while the application is starting, running and closing. To determinewhatdataisdirectlyprintedbySystem.out.printlnorprintStackTrace,youcanuseLogcatasexplained inthechapter“BasicSecurityTesting”,section“MonitoringSystemLogs”. RememberthatyoucantargetaspecificappbyfilteringtheLogcatoutputasfollows: adblogcat |grep \"$(adbshellps |grep <package-name>|awk'{print$2}')\" IfyoualreadyknowtheappPIDyoumaygiveitdirectlyusing--pidflag. Youmayalsowanttoapplyfurtherfiltersorregularexpressions(usinglogcat’sregexflags-e<expr>,--regex=<expr> forexample)ifyouexpectcertainstringsorpatternstocomeupinthelogs. Testing the Device-Access-Security Policy Platform: android MASVSV1: MSTG-STORAGE-11 MASVSV2: MASVS-STORAGE-1 Overview Appsthatprocessorquerysensitiveinformationshouldruninatrustedandsecureenvironment. Tocreatethisenviron- ment,theappcancheckthedeviceforthefollowing: • PIN-orpassword-protecteddevicelocking • RecentAndroidOSversion • USBDebuggingactivation • Deviceencryption • Devicerooting(seealso“TestingRootDetection”) 217\\nStatic Analysis Totestthedevice-access-securitypolicythattheappenforces,awrittencopyofthepolicymustbeprovided. Thepolicy should define available checks and their enforcement. For example, one check could require that the app run only on Android6.0(APIlevel23)oramorerecentversion,closingtheappordisplayingawarningiftheAndroidversionisless than6.0. Checkthesourcecodeforfunctionsthatimplementthepolicyanddeterminewhetheritcanbebypassed. YoucanimplementchecksontheAndroiddevicebyqueryingSettings.Secureforsystempreferences. DeviceAdminis- trationAPIofferstechniquesforcreatingapplicationsthatcanenforcepasswordpoliciesanddeviceencryption. Dynamic Analysis The dynamic analysis depends on the checks enforced by the app and their expected behavior. If the checks can be bypassed,theymustbevalidated. 218\\nAndroid Cryptographic APIs Overview Inthechapter“MobileAppCryptography”,weintroducedgeneralcryptographybestpracticesanddescribedtypicalissues thatcanoccurwhencryptographyisusedincorrectly. Inthischapter,we’llgointomoredetailonAndroid’scryptography",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 88
  },
  "embedding": [
    0.016671407967805862,
    0.018555156886577606,
    -0.06699994206428528,
    0.0050271484069526196,
    0.02034856379032135,
    0.012654837220907211,
    0.01999504677951336,
    0.008276251144707203,
    -0.03363882005214691,
    0.015705371275544167,
    -0.030679328367114067,
    -0.028945317491889,
    -0.02569478377699852,
    -0.0818360298871994,
    -0.05406038463115692,
    0.005676814820617437,
    0.03167662024497986,
    0.011936062946915627,
    -0.06274574995040894,
    -0.04763077199459076,
    0.10145989805459976,
    -0.00752867478877306,
    -0.0017797548789530993,
    -0.021323485299944878,
    0.024991648271679878,
    0.10936520248651505,
    -0.011183153837919235,
    -0.050562482327222824,
    0.02896680310368538,
    -0.0054181297309696674,
    -0.020728647708892822,
    -0.007243016269057989,
    0.011046004481613636,
    0.02980172261595726,
    0.08005675673484802,
    0.058324359357357025,
    -0.01895211637020111,
    -0.02891085110604763,
    0.02495727501809597,
    -0.05315246433019638,
    -0.06544774770736694,
    0.1078958660364151,
    -0.03062918223440647,
    0.047432392835617065,
    -0.04459083452820778,
    0.0340154767036438,
    -0.07820165157318115,
    -0.047754377126693726,
    -0.01028211135417223,
    0.01979527249932289,
    -0.014924127608537674,
    0.058143358677625656,
    0.03890922665596008,
    0.047372326254844666,
    0.04467463865876198,
    0.038028910756111145,
    0.08037833124399185,
    -0.04564592242240906,
    -0.05732334032654762,
    0.10029152035713196,
    -0.07121535390615463,
    0.011215326376259327,
    -0.006739011500030756,
    -0.033346567302942276,
    -0.013273762539029121,
    0.05430247262120247,
    0.05338402837514877,
    0.03549566864967346,
    0.03048686683177948,
    -0.06366021186113358,
    -0.13079389929771423,
    0.009854471310973167,
    -0.03979828581213951,
    -0.025550685822963715,
    -0.058694664388895035,
    0.10886861383914948,
    0.030858179554343224,
    -0.027671566233038902,
    -0.015840305015444756,
    -0.1481451690196991,
    0.023326633498072624,
    0.03151948004961014,
    -0.00187043531332165,
    0.05804482102394104,
    0.042019400745630264,
    0.038905516266822815,
    0.020021550357341766,
    0.015643969178199768,
    0.060890939086675644,
    0.06896089762449265,
    -0.02248355560004711,
    -0.010039993561804295,
    -0.015218691900372505,
    -0.01744680479168892,
    0.08007767796516418,
    -0.001803918625228107,
    -0.007941900752484798,
    -0.002120655495673418,
    -0.014168181456625462,
    0.013490866869688034,
    0.024646233767271042,
    0.042182233184576035,
    0.07258590310811996,
    -0.05077570304274559,
    -0.00994906947016716,
    -0.045150499790906906,
    -0.027353964745998383,
    0.019446492195129395,
    0.004423277918249369,
    0.022302305325865746,
    0.03348273038864136,
    0.015608441084623337,
    0.03347892686724663,
    -0.014988292939960957,
    0.13666532933712006,
    -0.06599374115467072,
    -0.02594304271042347,
    -0.026036100462079048,
    -0.016766609624028206,
    0.0317084975540638,
    0.025809159502387047,
    0.01582719385623932,
    0.0582004152238369,
    -0.05671481043100357,
    -0.07365505397319794,
    0.010048081167042255,
    -0.025311455130577087,
    1.9215594563908786e-32,
    -0.002599604893475771,
    -0.06529141962528229,
    0.028100445866584778,
    0.05688009783625603,
    -0.08349265158176422,
    -0.05167052894830704,
    0.012341979891061783,
    0.14025552570819855,
    0.08094759285449982,
    0.00989808514714241,
    -0.022195549681782722,
    0.023126451298594475,
    -0.04825875535607338,
    0.008939126506447792,
    0.037479057908058167,
    -0.04454287514090538,
    -0.050002433359622955,
    0.025588378310203552,
    -0.06124899536371231,
    0.03444109112024307,
    0.0010424702195450664,
    -0.017533913254737854,
    -0.01969354785978794,
    -0.013267566449940205,
    0.08203643560409546,
    -0.01181328110396862,
    -0.010893933475017548,
    0.06470239162445068,
    -0.06857571005821228,
    0.04985564574599266,
    -0.02970828488469124,
    -0.013278907164931297,
    -0.12402700632810593,
    -0.07321076095104218,
    0.049858611077070236,
    -0.08721072226762772,
    -0.029441799968481064,
    -0.015175305306911469,
    -0.010699036531150341,
    -0.11229696124792099,
    -0.0444660559296608,
    -0.001957531087100506,
    0.00441057188436389,
    -0.030827121809124947,
    -0.06603115051984787,
    -0.16085733473300934,
    0.0027533068787306547,
    -0.027492357417941093,
    0.04684898257255554,
    0.004016939550638199,
    0.0410749651491642,
    -0.024767940863966942,
    -0.022155817598104477,
    0.022053172811865807,
    -0.07261587679386139,
    0.010463405400514603,
    0.07503783702850342,
    0.014908814802765846,
    0.11054056882858276,
    0.14026519656181335,
    -0.03638782352209091,
    0.0482666902244091,
    -0.015903349965810776,
    0.0021136326249688864,
    0.05504794418811798,
    0.08464033901691437,
    -0.034424494951963425,
    -0.003699280321598053,
    -0.053170621395111084,
    -0.03307409584522247,
    0.04633723571896553,
    -0.040150366723537445,
    0.010936305858194828,
    -0.017821678891777992,
    -0.001746221911162138,
    -0.02716287039220333,
    -0.00360326049849391,
    -0.030023742467164993,
    -0.12485789507627487,
    -0.00899298395961523,
    0.09634300321340561,
    -0.022093916311860085,
    0.0736614465713501,
    -0.10407151281833649,
    -0.020676663145422935,
    0.0038989034947007895,
    0.0732332244515419,
    -0.0785805732011795,
    -0.025056203827261925,
    0.05579870939254761,
    0.020850492641329765,
    -0.03501419723033905,
    -0.05571342259645462,
    -0.06844744086265564,
    -0.04824512079358101,
    -1.876106910201221e-32,
    -0.03328773006796837,
    -0.012518415227532387,
    -0.014128496870398521,
    0.0023974920623004436,
    0.025016456842422485,
    -0.0721316859126091,
    -0.12865743041038513,
    0.036277178674936295,
    -0.06124011427164078,
    -0.05279068648815155,
    -0.05852706357836723,
    0.037812188267707825,
    0.024815142154693604,
    0.024586856365203857,
    0.021918650716543198,
    0.034480392932891846,
    -0.004808727186173201,
    -0.09236680716276169,
    -0.03522111847996712,
    0.0408407561480999,
    0.04199740290641785,
    0.010923368856310844,
    0.044817935675382614,
    -0.06376542896032333,
    -0.043014973402023315,
    0.03366291895508766,
    -0.055170729756355286,
    0.03172235190868378,
    0.06572631746530533,
    -0.03243040293455124,
    0.0461711585521698,
    -0.03113103099167347,
    -0.026087569072842598,
    0.053555719554424286,
    -0.022769661620259285,
    -0.13361871242523193,
    -0.022395022213459015,
    -0.010694907046854496,
    -0.036316804587841034,
    0.027710968628525734,
    0.0706978589296341,
    0.035864777863025665,
    -0.04025889188051224,
    -0.00262230122461915,
    0.010117287747561932,
    0.02631598711013794,
    -0.09755580872297287,
    0.0002786353579722345,
    0.09472423046827316,
    -0.043178290128707886,
    0.030322911217808723,
    0.035456836223602295,
    -0.07657745480537415,
    0.06461860984563828,
    0.0019905006047338247,
    -0.008360263891518116,
    0.020661741495132446,
    -0.01942186988890171,
    0.046562548726797104,
    -0.03298993408679962,
    0.022772204130887985,
    -0.031977374106645584,
    0.008199172094464302,
    -0.038558151572942734,
    0.06257800757884979,
    0.03271083906292915,
    0.05567421764135361,
    -0.043594300746917725,
    -0.10747745633125305,
    0.01652262546122074,
    0.05784432590007782,
    -0.0066875494085252285,
    -0.04662271961569786,
    -0.0479162260890007,
    -0.0508815199136734,
    0.06471781432628632,
    0.0006306701106950641,
    -0.029649026691913605,
    0.004739527124911547,
    -0.021737607195973396,
    -0.012079779990017414,
    0.016626404598355293,
    -0.010046081617474556,
    0.03266102075576782,
    0.04935739189386368,
    -0.028494399040937424,
    -0.10474555194377899,
    -0.06380823254585266,
    -0.0369180291891098,
    -0.018968656659126282,
    -0.058233842253685,
    0.017829805612564087,
    -0.10231531411409378,
    -0.0023157685063779354,
    0.010182889178395271,
    -6.979023936537487e-08,
    0.013132019899785519,
    -0.04901532828807831,
    0.0627431720495224,
    0.019275788217782974,
    0.10118759423494339,
    -0.03444141149520874,
    -0.006495817564427853,
    0.09959758818149567,
    0.04086253046989441,
    0.022952092811465263,
    0.08163422346115112,
    0.00759581383317709,
    -0.06979677826166153,
    -0.00536054652184248,
    0.007885796017944813,
    -0.048877082765102386,
    0.017729241400957108,
    -0.02878781408071518,
    -0.008554110303521156,
    -0.01610661670565605,
    0.006511707324534655,
    -0.07027062773704529,
    0.04638383537530899,
    0.05227283760905266,
    0.026340901851654053,
    -0.04613807052373886,
    0.13764460384845734,
    0.03968460485339165,
    0.05807875096797943,
    0.0022815244738012552,
    0.004688235465437174,
    0.013993240892887115,
    -0.012096029706299305,
    -0.1079627275466919,
    0.0051663098856806755,
    0.11253125965595245,
    -0.02528725191950798,
    0.014124131761491299,
    0.06790441274642944,
    0.044296734035015106,
    -0.009899711236357689,
    0.023924387991428375,
    -0.04587501659989357,
    0.06986424326896667,
    0.07852726429700851,
    0.03544541448354721,
    -0.09412167221307755,
    -0.006707448977977037,
    -0.03544566407799721,
    -0.061839692294597626,
    -0.12569360435009003,
    -0.016440747305750847,
    -0.029292503371834755,
    0.07023478299379349,
    -0.08782114833593369,
    -0.04170621559023857,
    -0.02725410833954811,
    -0.020407784730196,
    0.06795839965343475,
    0.05107315257191658,
    0.03228849545121193,
    0.02341780997812748,
    -0.01525978185236454,
    -0.001451598247513175
  ]
}