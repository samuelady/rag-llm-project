{
  "text": "){ gDvm.methDalvikDdmcServer_dispatch =NULL; } YoucandisabledebuggingbyusingsimilartechniquesinARTeventhoughthegDvmvariableisnotavailable. TheART runtime exports some of the vtables of JDWP-related classes as global symbols (in C++, vtables are tables that hold pointerstoclassmethods). ThisincludesthevtablesoftheclassesJdwpSocketStateandJdwpAdbState,whichhandle JDWPconnectionsvianetworksocketsandADB,respectively. Youcanmanipulatethebehaviorofthedebuggingruntime byoverwritingthemethodpointersintheassociatedvtables(archived). OnewaytooverwritethemethodpointersistooverwritetheaddressofthefunctionjdwpAdbState::ProcessIncoming withtheaddressofJdwpAdbState::Shutdown. Thiswillcausethedebuggertodisconnectimmediately. #include <jni.h> #include <string> #include <android/log.h> #include <dlfcn.h> #include <sys/mman.h> #include <jdwp/jdwp.h> #definelog(FMT,...) __android_log_print(ANDROID_LOG_VERBOSE,\"JDWPFun\",FMT,##__VA_ARGS__) //Vtablestructure.Justtomakemessingaroundwithitmoreintuitive struct VT_JdwpAdbState { unsigned long x; unsigned long y; void *JdwpSocketState_destructor; void *_JdwpSocketState_destructor; void *Accept; void *showmanyc; void *ShutDown; void *ProcessIncoming; }; extern \"C\" JNIEXPORT void JNICALLJava_sg_vantagepoint_jdwptest_MainActivity_JDWPfun( JNIEnv *env, jobject /*this*/){ void*lib=dlopen(\"libart.so\",RTLD_NOW); if(lib==NULL){ log(\"Errorloadinglibart.so\"); dlerror(); }else{ struct VT_JdwpAdbState *vtable =(struct VT_JdwpAdbState *)dlsym(lib,\"_ZTVN3art4JDWP12JdwpAdbStateE\"); if(vtable ==0){ log(\"Couldn'tresolvesymbol'_ZTVN3art4JDWP12JdwpAdbStateE'.\\n\"); }else { log(\"VtableforJdwpAdbStateat: %08x\\n\",vtable); //Letthefunbegin! unsigned long pagesize =sysconf(_SC_PAGE_SIZE); 306\\nunsigned long page =(unsigned long)vtable & ~(pagesize-1); mprotect((void *)page,pagesize,PROT_READ |PROT_WRITE); vtable->ProcessIncoming =vtable->ShutDown; //Resetpermissions&flushcache mprotect((void *)page,pagesize,PROT_READ); } } } Traditional Anti-Debugging OnLinux,theptracesystemcallisusedtoobserveandcontroltheexecutionofaprocess(thetracee)andtoexamineand changethatprocess’memoryandregisters. ptraceistheprimarywaytoimplementsystemcalltracingandbreakpoint debugging in native code. Most JDWP anti-debugging tricks (which may be safe for timer-based checks) won’t catch classicaldebuggersbasedonptraceandtherefore,manyAndroidanti-debuggingtricksincludeptrace,oftenexploiting thefactthatonlyonedebuggeratatimecanattachtoaprocess. Checking TracerPid When you debug an app and set a breakpoint on native code, Android Studio will copy the needed files to the target deviceandstartthelldb-serverwhichwilluseptracetoattachtotheprocess. Fromthismomenton,ifyouinspectthe statusfileofthedebuggedprocess(/proc/<pid>/statusor/proc/self/status),youwillseethatthe“TracerPid”field hasavaluedifferentfrom0,whichisasignofdebugging. Remember that this only applies to native code. If you’re debugging a Java/Kotlin-only app the value of the “TracerPid”fieldshouldbe0. ThistechniqueisusuallyappliedwithintheJNInativelibrariesinC,asshowninGoogle’sgperftools(GooglePerformance Tools))HeapCheckerimplementationoftheIsDebuggerAttachedmethod. However,ifyouprefertoincludethischeckas partofyourJava/KotlincodeyoucanrefertothisJavaimplementationofthehasTracerPidmethodfromTimStrazzere’s Anti-Emulatorproject. Whentryingtoimplementsuchamethodyourself,youcanmanuallycheckthevalueofTracerPidwithADB.Thefollow- inglistingusesGoogle’sNDKsampleapphello-jni(com.example.hellojni)toperformthecheckafterattachingAndroid Studio’sdebugger: $adbshellps -A|grep com.example.hellojni u0_a271 11657 5734302108 50600ptrace_stop 0tcom.example.hellojni $adbshellcat/proc/11657/status |grep -e\"^TracerPid:\" |sed\"s/^TracerPid:\\t//\" TracerPid: 11839 $adbshellps -A|grep 11839 u0_a271 1183911837 14024 4548poll_schedule_timeout0Slldb-server Youcanseehowthestatusfileofcom.example.hellojni(PID=11657)containsaTracerPIDof11839,whichwecanidentify asthelldb-serverprocess. Using Fork and ptrace Youcanpreventdebuggingofaprocessbyforkingachildprocessandattachingittotheparentasadebuggerviacode similartothefollowingsimpleexamplecode: void fork_and_attach() { intpid=fork(); if(pid==0) { intppid =getppid(); if(ptrace(PTRACE_ATTACH,ppid,NULL,NULL)==0) { waitpid(ppid,NULL,0); 307\\n/*Continuetheparentprocess*/ ptrace(PTRACE_CONT,NULL,NULL); } } } Withthechildattached,furtherattemptstoattachtotheparentwillfail. Wecanverifythisbycompilingthecodeintoa JNIfunctionandpackingitintoanappwerunonthedevice. root@android:/ #ps|grep-ianti u0_a151 18190201 153584454908ffffffffb6e0f124Ssg.vantagepoint.antidebug u0_a151 1822418190149518035824c019a3acb6e0ee5cSsg.vantagepoint.antidebug Attemptingtoattachtotheparentprocesswithgdbserverfailswithanerror: root@android:/ #./gdbserver--attachlocalhost:1234518190 warning:process18190isalreadytracedbyprocess18224 Cannotattachtolwp18190:Operationnotpermitted (1) Exiting Youcaneasilybypassthisfailure,however,bykillingthechildand“freeing”theparentfrombeingtraced. You’lltherefore usually find more elaborate schemes, involving multiple processes and threads as well as some form of monitoring to impedetampering. Commonmethodsinclude • forkingmultipleprocessesthattraceoneanother, • keepingtrackofrunningprocessestomakesurethechildrenstayalive, • monitoringvaluesinthe/procfilesystem,suchasTracerPIDin/proc/pid/status. Let’slookatasimpleimprovementforthemethodabove. Aftertheinitialfork,welaunchintheparentanextrathread that continually monitors the child’s status. Depending on whether the app has been built in debug or release mode (which is indicated by the android:debuggable flag in the manifest), the child process should do one of the following things: • In release mode: The call to ptrace fails and the child crashes immediately with a segmentation fault (exit code 11). • In debug mode: The call to ptrace works and the child should run indefinitely. Consequently, a call to wait- pid(child_pid)shouldneverreturn. Ifitdoes,somethingisfishyandwewouldkillthewholeprocessgroup. ThefollowingisthecompletecodeforimplementingthisimprovementwithaJNIfunction: #include <jni.h> #include <unistd.h> #include <sys/ptrace.h> #include <sys/wait.h> #include <pthread.h> static intchild_pid; void *monitor_pid(){ intstatus; waitpid(child_pid,&status,0); /*Childstatusshouldneverchange.*/ _exit(0);//Commitseppuku } void anti_debug(){ child_pid =fork(); if(child_pid ==0) { intppid =getppid(); intstatus; if(ptrace(PTRACE_ATTACH,ppid,NULL,NULL)==0) { waitpid(ppid,&status,0); ptrace(PTRACE_CONT,ppid,NULL,NULL); 308\\nwhile (waitpid(ppid,&status,0)){ if(WIFSTOPPED(status)){ ptrace(PTRACE_CONT,ppid,NULL,NULL); }else { //Processhasexited _exit(0); } } } }else { pthread_tt; /*Startthemonitoringthread*/ pthread_create(&t,NULL,monitor_pid,(void *)NULL); } } JNIEXPORT void JNICALL Java_sg_vantagepoint_antidebug_MainActivity_antidebug(JNIEnv *env,jobjectinstance){ anti_debug(); } Again,wepackthisintoanAndroidapptoseeifitworks. Justasbefore,twoprocessesshowupwhenweruntheapp’s debugbuild. root@android:/ #ps|grep-Ianti-debug u0_a152 20267201 155250856796ffffffffb6e0f124Ssg.vantagepoint.anti-debug u0_a152 2030120267149519233980c019a3acb6e0ee5cSsg.vantagepoint.anti-debug However,ifweterminatethechildprocessatthispoint,theparentexitsaswell: root@android:/ #kill-920301 130|root@hammerhead:/ #cd/data/local/tmp root@android:/ #./gdbserver--attachlocalhost:1234520267 gdbserver:unabletoopen/procfile '/proc/20267/status' Cannotattachtolwp20267:Nosuchfileordirectory (2) Exiting Tobypassthis,wemustmodifytheapp’sbehaviorslightly(theeasiestwaystodosoarepatchingthecallto_exitwith NOPsandhookingthefunction_exitinlibc.so). Atthispoint,wehaveenteredtheproverbial“armsrace”: implement- ingmoreintricateformsofthisdefenseaswellasbypassingitarealwayspossible. File Integrity Checks Therearetwotopicsrelatedtofileintegrity: 1. Codeintegritychecks: Inthe“TamperingandReverseEngineeringonAndroid”chapter,wediscussedAndroid’sAPK codesignaturecheck. Wealsosawthatdeterminedreverseengineerscaneasilybypassthischeckbyre-packaging andre-signinganapp. Tomakethisbypassingprocessmoreinvolved,aprotectionschemecanbeaugmentedwith CRCchecksontheappbytecode,nativelibraries,andimportantdatafiles. Thesecheckscanbeimplementedon boththeJavaandthenativelayer. Theideaistohaveadditionalcontrolsinplacesothattheapponlyrunscorrectly initsunmodifiedstate,evenifthecodesignatureisvalid. 2. Thefilestorageintegritychecks: TheintegrityoffilesthattheapplicationstoresontheSDcardorpublicstorage andtheintegrityofkey-valuepairsthatarestoredinSharedPreferencesshouldbeprotected. Sample Implementation - Application Source Code Integritychecksoftencalculateachecksumorhashoverselectedfiles. Commonlyprotectedfilesinclude • AndroidManifest.xml, • classfiles*.dex, • nativelibraries(*.so). 309\\nThefollowingsampleimplementationfromtheAndroidCrackingblogcalculatesaCRCoverclasses.dexandcompares ittotheexpectedvalue. private void crcTest()throws IOException",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 114
  },
  "embedding": [
    -0.04315183684229851,
    -0.016348592936992645,
    0.0050875963643193245,
    -0.04556594789028168,
    0.013983363285660744,
    0.032302211970090866,
    -0.013995948247611523,
    0.019655907526612282,
    -0.11358144879341125,
    -0.008919882588088512,
    -0.026093285530805588,
    0.030984969809651375,
    -0.02028251439332962,
    -0.05720548704266548,
    0.011700671166181564,
    -0.0033282216172665358,
    0.041024141013622284,
    0.006652370095252991,
    -0.019681287929415703,
    0.06043536216020584,
    0.07114805281162262,
    0.01626567915081978,
    0.015337462536990643,
    -0.03691921383142471,
    0.000691922556143254,
    0.08262523263692856,
    -0.0012956553837284446,
    -0.005966063588857651,
    -0.004199303686618805,
    0.013058721087872982,
    -0.085361547768116,
    -0.020684266462922096,
    -0.06144160032272339,
    0.021912194788455963,
    0.030072487890720367,
    0.10838343948125839,
    0.07872064411640167,
    -0.023311253637075424,
    -0.03555399179458618,
    -0.05049023777246475,
    -0.013343154452741146,
    0.00591289671137929,
    -0.0734606385231018,
    0.03680479899048805,
    -0.06385327875614166,
    -0.04819705709815025,
    -0.042500756680965424,
    -0.09009692817926407,
    -0.06855770945549011,
    -0.009608747437596321,
    0.0334094762802124,
    0.03959483280777931,
    0.09124854952096939,
    -0.02999415621161461,
    0.07978442311286926,
    0.02551388554275036,
    0.05001377686858177,
    0.04856372997164726,
    0.022403987124562263,
    0.05184166505932808,
    -0.08611871302127838,
    -0.0053497315384447575,
    0.01578606478869915,
    -0.029350852593779564,
    -0.0545804463326931,
    -0.033996954560279846,
    0.0397411584854126,
    -0.0039930702187120914,
    0.044799551367759705,
    -0.06929060071706772,
    -0.11915124207735062,
    0.06441091001033783,
    -0.06016084924340248,
    -0.0057485392317175865,
    -0.07506392896175385,
    0.032646384090185165,
    0.007347557228058577,
    0.0113512659445405,
    0.0812566950917244,
    -0.1515577733516693,
    0.02579963020980358,
    0.034069228917360306,
    -0.05304425582289696,
    0.04799950122833252,
    0.043031252920627594,
    0.07415156811475754,
    -0.04589636251330376,
    -0.024501148611307144,
    0.06536445766687393,
    0.11478977650403976,
    -0.05549692362546921,
    -0.039490848779678345,
    -0.06920035928487778,
    -0.01942204311490059,
    -0.008237138390541077,
    -0.019247539341449738,
    0.03349446505308151,
    -0.057508256286382675,
    -0.02607954666018486,
    0.07452194392681122,
    -0.012150810100138187,
    0.044683508574962616,
    0.09292856603860855,
    0.03781769797205925,
    -0.004488442558795214,
    -0.043194133788347244,
    -0.06604035943746567,
    0.042041901499032974,
    -0.03587361052632332,
    -0.09264311194419861,
    0.007515972945839167,
    0.012658904306590557,
    0.007743110880255699,
    -0.0878361240029335,
    -0.02311612479388714,
    0.032753389328718185,
    -0.03998783230781555,
    -0.024881409481167793,
    0.048989713191986084,
    -0.01332081202417612,
    0.023380016908049583,
    -0.03555937111377716,
    0.03655889630317688,
    -0.010372358374297619,
    -0.07386980950832367,
    0.0017518341774120927,
    -0.07921940833330154,
    1.7006091301065058e-32,
    0.037828899919986725,
    -0.0928344652056694,
    -0.022483371198177338,
    0.015358918346464634,
    0.034561268985271454,
    -0.0009920905577018857,
    -0.00781493540853262,
    0.08527173101902008,
    0.020127903670072556,
    -0.016443435102701187,
    -0.021308371797204018,
    -0.025652429088950157,
    0.004719718359410763,
    0.08204083144664764,
    0.05013267695903778,
    -0.021878812462091446,
    -0.05662590265274048,
    0.024382473900914192,
    -0.06936857849359512,
    -0.03368702903389931,
    0.043048195540905,
    0.013371853157877922,
    -0.02243361622095108,
    0.01769111305475235,
    0.0070759910158813,
    0.05298888683319092,
    -0.055158503353595734,
    0.0338619127869606,
    0.03496996685862541,
    0.06592994183301926,
    0.02388034202158451,
    -0.06925627589225769,
    -0.14418259263038635,
    -0.006137923803180456,
    0.027325499802827835,
    -0.010691149160265923,
    -0.04370835795998573,
    -0.06293471902608871,
    -0.003158639883622527,
    -0.1340632140636444,
    -0.022872790694236755,
    -0.04473530501127243,
    -0.08481135964393616,
    -0.023398734629154205,
    0.008226500824093819,
    -0.046520818024873734,
    0.041691239923238754,
    -0.0394379086792469,
    -2.9245520636322908e-05,
    -0.002121303230524063,
    0.010108321905136108,
    0.03246578201651573,
    0.031018704175949097,
    -0.09424080699682236,
    -0.02123992331326008,
    -0.0270740557461977,
    0.032752033323049545,
    0.0822194293141365,
    0.028502129018306732,
    0.12112985551357269,
    -0.06992156058549881,
    0.08428829908370972,
    -0.03127638250589371,
    -0.030062925070524216,
    -0.01185660995543003,
    0.05099530890583992,
    -0.12335205078125,
    -0.095224529504776,
    0.007160830777138472,
    -0.001863624551333487,
    0.046323467046022415,
    0.037081677466630936,
    0.06845539063215256,
    0.04395095258951187,
    0.026362033560872078,
    -0.018424009904265404,
    0.06195199489593506,
    -0.01961171068251133,
    -0.05349937826395035,
    -0.027682699263095856,
    0.04986181482672691,
    -0.017615078017115593,
    -0.028824150562286377,
    -0.06855606287717819,
    0.031435009092092514,
    -0.024462390691041946,
    0.03800560161471367,
    -0.123924121260643,
    0.0032473623286932707,
    0.022629426792263985,
    0.014130108058452606,
    0.0030425090808421373,
    0.032038625329732895,
    -0.032290901988744736,
    -0.0949597954750061,
    -1.8374206564316902e-32,
    -0.03234013915061951,
    0.03445877134799957,
    -0.03171928972005844,
    -0.028929518535733223,
    -0.06609838455915451,
    -0.008539227768778801,
    -0.10271037369966507,
    -0.020094456151127815,
    -0.06386202573776245,
    -0.03127659857273102,
    -0.023325597867369652,
    -0.00193265441339463,
    -0.03535985201597214,
    0.016107194125652313,
    0.026895616203546524,
    -0.006380708888173103,
    0.015501033514738083,
    -0.011024556122720242,
    -0.02081933058798313,
    0.07299120724201202,
    0.05643589049577713,
    0.058129217475652695,
    0.040328290313482285,
    0.040242601186037064,
    0.05757758766412735,
    -0.07397053390741348,
    0.024984003975987434,
    0.06623618304729462,
    0.009440751746296883,
    0.011986589059233665,
    0.08926785737276077,
    0.020027508959174156,
    -0.09001579880714417,
    -0.0020135066006332636,
    0.006203146651387215,
    -0.08130321651697159,
    -0.02207477204501629,
    -0.01396020594984293,
    -0.06002239137887955,
    0.004325728863477707,
    0.14022816717624664,
    -0.0552072636783123,
    -0.037536971271038055,
    0.07494761794805527,
    -0.0028045049402862787,
    0.08323293179273605,
    -0.048913635313510895,
    0.000561182969249785,
    -0.027336914092302322,
    -0.01078092958778143,
    0.020283158868551254,
    -0.10112112760543823,
    0.029641615226864815,
    0.04381856694817543,
    -0.0020967749878764153,
    0.0802721381187439,
    0.11125796288251877,
    -0.009457975625991821,
    -0.00473560206592083,
    0.007749540731310844,
    0.039771538227796555,
    -0.061852775514125824,
    0.04165859892964363,
    0.005632997956126928,
    0.07037044316530228,
    -0.010768025182187557,
    0.08351507782936096,
    0.050724487751722336,
    -0.0665106251835823,
    -0.035216882824897766,
    -0.08725129812955856,
    -0.021358586847782135,
    -0.039237797260284424,
    -0.05841576308012009,
    0.05484927445650101,
    0.021763626486063004,
    -0.021495124325156212,
    -0.04687638580799103,
    -0.06554728746414185,
    0.0018739604856818914,
    5.7362965890206397e-05,
    0.04641887918114662,
    -0.007070275489240885,
    -0.05102244392037392,
    0.06225161254405975,
    -0.043448418378829956,
    -0.06960498541593552,
    0.08995088189840317,
    -0.03485184535384178,
    0.011137224733829498,
    -0.04037352651357651,
    0.0979066714644432,
    -0.05526578798890114,
    0.09498872607946396,
    -0.038237277418375015,
    -6.561478471667215e-08,
    0.0032280515879392624,
    -0.033294837921857834,
    -0.011091677471995354,
    -0.0751810297369957,
    0.10262542963027954,
    0.026948221027851105,
    -0.006668101530522108,
    -0.018849732354283333,
    -0.03130410984158516,
    -0.0013176141073927283,
    0.0026138729881495237,
    0.056843966245651245,
    -0.0372963547706604,
    -0.031450338661670685,
    0.04415508359670639,
    -0.03461452201008797,
    -0.06370974332094193,
    0.021333718672394753,
    -0.04203789308667183,
    0.004072629846632481,
    -0.012767292559146881,
    -0.009813348762691021,
    -0.007101985160261393,
    0.07614406943321228,
    -0.03239830210804939,
    -0.0229402594268322,
    0.10199663043022156,
    0.03864416107535362,
    0.08196079730987549,
    -0.003814026480540633,
    0.003912606276571751,
    0.11332115530967712,
    -0.00827293936163187,
    -0.022948015481233597,
    -0.09269388020038605,
    0.05451735481619835,
    -0.024751443415880203,
    0.0462479330599308,
    0.010495205409824848,
    0.03630395978689194,
    -0.021182354539632797,
    -0.008522959426045418,
    -0.03521993011236191,
    0.05236097052693367,
    0.05576515570282936,
    0.0787709429860115,
    -0.09533961117267609,
    0.0807931199669838,
    -0.026001768186688423,
    -0.0095262061804533,
    -0.11843762546777725,
    0.035971857607364655,
    -0.010224522091448307,
    0.04512607678771019,
    -0.08087404817342758,
    -0.009025126695632935,
    -0.020447593182325363,
    -0.07072664052248001,
    -0.012254467234015465,
    -0.005230427719652653,
    -0.031330276280641556,
    -0.03313302621245384,
    0.06373648345470428,
    0.024449557065963745
  ]
}