{
  "text": "cases. This overview providesabriefoutlineofthesedatastoragemethodsandpointstesterstofurtherrelevantdocumentation. Shared Preferences The SharedPreferences API is commonly used to permanently save small collections of key-value pairs. Data stored in a SharedPreferences object is written to a plain-text XML file. The SharedPreferences object can be declared world- readable(accessibletoallapps)orprivate. MisuseoftheSharedPreferencesAPIcanoftenleadtoexposureofsensitive data. Considerthefollowingexample: ExampleforJava: SharedPreferencessharedPref =getSharedPreferences(\"key\",MODE_WORLD_READABLE); SharedPreferences.Editor editor =sharedPref.edit(); editor.putString(\"username\",\"administrator\"); editor.putString(\"password\",\"supersecret\"); editor.commit(); 190\\nExampleforKotlin: varsharedPref =getSharedPreferences(\"key\",Context.MODE_WORLD_READABLE) vareditor =sharedPref.edit() editor.putString(\"username\",\"administrator\") editor.putString(\"password\",\"supersecret\") editor.commit() Oncetheactivityhasbeencalled,thefilekey.xmlwillbecreatedwiththeprovideddata. Thiscodeviolatesseveralbest practices. • Theusernameandpasswordarestoredincleartextin/data/data/<package-name>/shared_prefs/key.xml. <?xml version='1.0' encoding='utf-8' standalone='yes' ?> <map> <string name=\"username\">administrator</string> <string name=\"password\">supersecret</string> </map> • MODE_WORLD_READABLEallowsallapplicationstoaccessandreadthecontentsofkey.xml. root@hermes:/data/data/sg.vp.owasp_mobile.myfirstapp/shared_prefs #ls-la -rw-rw-r--u0_a118 1702016-04-2316:51key.xml PleasenotethatMODE_WORLD_READABLEandMODE_WORLD_WRITEABLEweredeprecatedstartingonAPIlevel17. Al- thoughnewerdevicesmaynotbeaffectedbythis,applicationscompiledwithanandroid:targetSdkVersionvalue lessthan17maybeaffectediftheyrunonanOSversionthatwasreleasedbeforeAndroid4.2(APIlevel17). Databases TheAndroidplatformprovidesanumberofdatabaseoptionsasaforementionedinthepreviouslist. Eachdatabaseoption hasitsownquirksandmethodsthatneedtobeunderstood. SQLite Database (Unencrypted) SQLiteisanSQLdatabaseenginethatstoresdatain.dbfiles. TheAndroidSDKhasbuilt-insupportforSQLitedatabases. Themainpackageusedtomanagethedatabasesisandroid.database.sqlite. Forexample,youmayusethefollowing codetostoresensitiveinformationwithinanactivity: ExampleinJava: SQLiteDatabasenotSoSecure =openOrCreateDatabase(\"privateNotSoSecure\",MODE_PRIVATE,null); notSoSecure.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\"); notSoSecure.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPass');\"); notSoSecure.close(); ExampleinKotlin: varnotSoSecure =openOrCreateDatabase(\"privateNotSoSecure\",Context.MODE_PRIVATE,null) notSoSecure.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\") notSoSecure.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPass');\") notSoSecure.close() Once the activity has been called, the database file privateNotSoSecure will be created with the provided data and storedinthecleartextfile/data/data/<package-name>/databases/privateNotSoSecure. Thedatabase’sdirectorymaycontainseveralfilesbesidestheSQLitedatabase: • Journalfiles: Thesearetemporaryfilesusedtoimplementatomiccommitandrollback. • Lock files: The lock files are part of the locking and journaling feature, which was designed to improve SQLite concurrencyandreducethewriterstarvationproblem. SensitiveinformationshouldnotbestoredinunencryptedSQLitedatabases. 191\\nSQLite Databases (Encrypted) WiththelibrarySQLCipher,youcanpassword-encryptSQLitedatabases. ExampleinJava: SQLiteDatabasesecureDB =SQLiteDatabase.openOrCreateDatabase(database,\"password123\",null); secureDB.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\"); secureDB.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPassEnc');\"); secureDB.close(); ExampleinKotlin: varsecureDB =SQLiteDatabase.openOrCreateDatabase(database,\"password123\",null) secureDB.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\") secureDB.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPassEnc');\") secureDB.close() Securewaystoretrievethedatabasekeyinclude: • AskingtheusertodecryptthedatabasewithaPINorpasswordoncetheappisopened(weakpasswordsandPINs arevulnerabletobruteforceattacks) • Storingthekeyontheserverandallowingittobeaccessedfromawebserviceonly(sothattheappcanbeused onlywhenthedeviceisonline) Firebase Real-time Databases Firebaseisadevelopmentplatformwithmorethan15products,andoneofthemisFirebaseReal-timeDatabase. Itcan beleveragedbyapplicationdeveloperstostoreandsyncdatawithaNoSQLcloud-hosteddatabase. Thedataisstored asJSONandissynchronizedinreal-timetoeveryconnectedclientandalsoremainsavailableevenwhentheapplication goesoffline. AmisconfiguredFirebaseinstancecanbeidentifiedbymakingthefollowingnetworkcall: https://_firebaseProjectName_.firebaseio.com/.json ThefirebaseProjectNamecanberetrievedfromthemobileapplicationbyreverseengineeringtheapplication. Alterna- tively,theanalystscanuseFirebaseScanner,apythonscriptthatautomatesthetaskaboveasshownbelow: pythonFirebaseScanner.py -p<pathOfAPKFile> pythonFirebaseScanner.py -f<commaSeparatedFirebaseProjectNames> Realm Databases TheRealmDatabaseforJavaisbecomingmoreandmorepopularamongdevelopers. Thedatabaseanditscontentscan beencryptedwithakeystoredintheconfigurationfile. //thegetKey()methodeithergetsthekeyfromtheserverorfromaKeyStore,orisderivedfromapassword. RealmConfigurationconfig =newRealmConfiguration.Builder() .encryptionKey(getKey()) .build(); Realmrealm =Realm.getInstance(config); Ifthedatabaseisnotencrypted,youshouldbeabletoobtainthedata. Ifthedatabaseisencrypted,determinewhether thekeyishard-codedinthesourceorresourcesandwhetheritisstoredunprotectedinsharedpreferencesorsomeother location. 192\\nInternal Storage Youcansavefilestothedevice’sinternalstorage. Filessavedtointernalstoragearecontainerizedbydefaultandcannot beaccessedbyotherappsonthedevice. Whentheuseruninstallsyourapp,thesefilesareremoved. Thefollowingcode snippetswouldpersistentlystoresensitivedatatointernalstorage. ExampleforJava: FileOutputStreamfos =null; try{ fos=openFileOutput(FILENAME,Context.MODE_PRIVATE); fos.write(test.getBytes()); fos.close(); }catch (FileNotFoundExceptione){ e.printStackTrace(); }catch (IOExceptione){ e.printStackTrace(); } ExampleforKotlin: varfos:FileOutputStream?=null fos=openFileOutput(\"FILENAME\",Context.MODE_PRIVATE) fos.write(test.toByteArray(Charsets.UTF_8)) fos.close() Youshouldcheckthefilemodetomakesurethatonlytheappcanaccessthefile. YoucansetthisaccesswithMODE_PRI- VATE.ModessuchasMODE_WORLD_READABLE(deprecated)andMODE_WORLD_WRITEABLE(deprecated)mayposeasecurity risk. SearchfortheclassFileInputStreamtofindoutwhichfilesareopenedandreadwithintheapp. External Storage EveryAndroid-compatibledevicesupportssharedexternalstorage. Thisstoragemayberemovable(suchasanSDcard) or internal (non-removable). Files saved to external storage are world-readable. The user can modify them when USB massstorageisenabled. Youcanusethefollowingcodesnippetstopersistentlystoresensitiveinformationtoexternal storageasthecontentsofthefilepassword.txt. ExampleforJava: Filefile =newFile (Environment.getExternalFilesDir(),\"password.txt\"); Stringpassword =\"SecretPassword\"; FileOutputStreamfos; fos=newFileOutputStream(file); fos.write(password.getBytes()); fos.close(); ExampleforKotlin: valpassword =\"SecretPassword\" valpath =context.getExternalFilesDir(null) valfile =File(path,\"password.txt\") file.appendText(password) Thefilewillbecreatedandthedatawillbestoredinacleartextfileinexternalstorageoncetheactivityhasbeencalled. It’salsoworthknowingthatfilesstoredoutsidetheapplicationfolder(data/data/<package-name>/)willnotbedeleted whentheuseruninstallstheapplication. Finally,it’sworthnotingthattheexternalstoragecanbeusedbyanattackerto allowforarbitrarycontroloftheapplicationinsomecases. Formoreinformation: seetheblogpostfromCheckpoint. 193\\nKeyStore TheAndroidKeyStoresupportsrelativelysecurecredentialstorage. AsofAndroid4.3(APIlevel18),itprovidespublicAPIs forstoringandusingapp-privatekeys. Anappcanuseapublickeytocreateanewprivate/publickeypairforencrypting applicationsecrets,anditcandecryptthesecretswiththeprivatekey. YoucanprotectkeysstoredintheAndroidKeyStorewithuserauthenticationinaconfirmcredentialflow. Theuser’slock screencredentials(pattern,PIN,password,orfingerprint)areusedforauthentication. Youcanusestoredkeysinoneoftwomodes: 1. Usersareauthorizedtousekeysforalimitedperiodoftimeafterauthentication. Inthismode,allkeyscanbeused assoonastheuserunlocksthedevice. Youcancustomizetheperiodofauthorizationforeachkey. Youcanuse thisoptiononlyifthesecurelockscreenisenabled. Iftheuserdisablesthesecurelockscreen,allstoredkeyswill becomepermanentlyinvalid. 2. Usersareauthorizedtouseaspecificcryptographicoperationthatisassociatedwithonekey. Inthismode,users mustrequestaseparateauthorizationforeachoperationthatinvolvesthekey. Currently,fingerprintauthentication istheonlywaytorequestsuchauthorization. ThelevelofsecurityaffordedbytheAndroidKeyStoredependsonitsimplementation,whichdependsonthedevice. Most moderndevicesofferahardware-backedKeyStoreimplementation: keysaregeneratedandusedinaTrustedExecution Environment(TEE)oraSecureElement(SE),andtheoperatingsystemcan’taccessthemdirectly. Thismeansthatthe encryptionkeysthemselvescan’tbeeasilyretrieved,evenfromarooteddevice. Youcanverifyhardware-backedkeys withKeyAttestation. Youcandeterminewhetherthekeysareinsidethesecurehardwarebycheckingthereturnvalueof theisInsideSecureHardwaremethod,whichispartoftheKeyInfoclass. NotethattherelevantKeyInfoindicatesthatsecretkeysandHMACkeysareinsecurelystoredonseveraldevices despiteprivatekeysbeingcorrectlystoredonthesecurehardware. Thekeysofasoftware-onlyimplementationareencryptedwithaper-userencryptionmasterkey. Anattackercanaccess allkeysstoredonrooteddevicesthathavethisimplementationinthefolder/data/misc/keystore/. Becausetheuser’s lock screen pin/password is used to generate the master key, the Android KeyStore is unavailable when the device is locked. FormoresecurityAndroid9(APIlevel28)introducestheunlockedDeviceRequiredflag. Bypassingtruetothe setUnlockedDeviceRequiredmethod,theapppreventsitskeysstoredinAndroidKeystorefrombeingdecryptedwhen thedeviceislocked,anditrequiresthescreentobeunlockedbeforeallowingdecryption. Hardware-backed Android KeyStore Thehardware-backedAndroidKeyStoregivesanotherlayertodefense-in-depthsecurityconceptforAndroid. Keymaster HardwareAbstractionLayer(HAL)wasintroducedwithAndroid6(APIlevel23). Applicationscanverifyifthekeyisstored insidethesecurityhardware(bycheckingifKeyInfo.isinsideSecureHardwarereturnstrue). DevicesrunningAndroid 9 (API level 28) and higher can have a StrongBox Keymaster module, an implementation of the Keymaster HAL that resides in a hardware security module which has its own CPU, secure storage, a true random number generator and a mechanismtoresistpackagetampering. Tousethisfeature,truemustbepassedtothesetIsStrongBoxBackedmethod ineithertheKeyGenParameterSpec.BuilderclassortheKeyProtection.Builderclasswhengeneratingorimporting keysusingAndroidKeystore. TomakesurethatStrongBoxisusedduringruntime,checkthatisInsideSecureHardware returnstrueandthatthesystemdoesnotthrowStrongBoxUnavailableException,whichgetsthrowniftheStrongBox Keymasterisn’tavailableforthegivenalgorithmandkeysizeassociatedwithakey. Descriptionoffeaturesonhardware- basedkeystorecanbefoundonAOSPpages. KeymasterHALisaninterfacetohardware-backedcomponents-TrustedExecutionEnvironment(TEE)oraSecureElement (SE),whichisusedbyAndroidKeystore. Anexampleofsuchahardware-backedcomponentisTitanM. Key Attestation FortheapplicationswhichheavilyrelyonAndroidKeystoreforbusiness-criticaloperations,suchasmulti-factorauthen- tication through cryptographic primitives, secure storage of sensitive data at the client-side, etc. Android provides the 194\\nfeatureofKeyAttestation,whichhelpstoanalyzethesecurityofcryptographicmaterialmanagedthroughAndroidKey- store. FromAndroid8.0(APIlevel26),thekeyattestationwasmademandatoryforallnew(Android7.0orhigher)devices thatneedtohavedevicecertificationforGoogleapps. SuchdevicesuseattestationkeyssignedbytheGooglehardware AttestationRootcertificateandthesamecanbeverifiedthroughthekeyattestationprocess. Duringkeyattestation,wecanspecifythealiasofakeypairandinreturn,getacertificatechain,whichwecanuseto verifythepropertiesofthatkeypair. IftherootcertificateofthechainistheGoogleHardwareAttestationRootcertificate, andthechecksrelatedtokeypairstorageinhardwarearemade,itgivesanassurancethatthedevicesupportshardware- levelkeyattestation,andthatthekeyisinthehardware-backedkeystorethatGooglebelievestobesecure. Alternatively, if the attestation chain has any other root certificate, then Google does not make any claims about the security of the hardware. Althoughthekeyattestationprocesscanbeimplementedwithintheapplicationdirectly,itisrecommendedthatitshould beimplementedattheserver-sideforsecurityreasons. Thefollowingarethehigh-levelguidelinesforthesecureimple- mentationofKeyAttestation: • TheservershouldinitiatethekeyattestationprocessbycreatingarandomnumbersecurelyusingCSPRNG(Cryp- tographicallySecureRandomNumberGenerator)andthesameshouldbesenttotheuserasachallenge. • TheclientshouldcallthesetAttestationChallengeAPIwiththechallengereceivedfromtheserverandshould thenretrievetheattestationcertificatechainusingtheKeyStore.getCertificateChainmethod. • Theattestationresponseshouldbesenttotheserverfortheverificationandfollowingchecksshouldbeperformed fortheverificationofthekeyattestationresponse: – Verifythecertificatechain,uptotherootandperformcertificatesanitycheckssuchasvalidity,integrityand trustworthiness. ChecktheCertificateRevocationStatusListmaintainedbyGoogle,ifnoneofthecertificates inthechainwasrevoked. – CheckiftherootcertificateissignedwiththeGoogleattestationrootkeywhichmakestheattestationprocess trustworthy. – Extract the attestation certificate extension",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 81
  },
  "embedding": [
    -0.003818128490820527,
    0.00968343485146761,
    -0.10163604468107224,
    0.03348570317029953,
    -0.05247104540467262,
    0.11399076133966446,
    -0.007737345993518829,
    0.030734989792108536,
    -0.010022143833339214,
    0.021488046273589134,
    0.028788382187485695,
    -0.0006618499173782766,
    0.12046436220407486,
    -0.012049480341374874,
    0.07335325330495834,
    0.007246749009937048,
    0.006422553211450577,
    -0.04348857328295708,
    -0.052102189511060715,
    0.06191910058259964,
    0.04141039401292801,
    -0.024953173473477364,
    -0.010859131813049316,
    0.02561071887612343,
    0.06112312152981758,
    0.03032000921666622,
    0.021861139684915543,
    -0.04368392378091812,
    -0.03593861311674118,
    0.07217232882976532,
    -0.0036038411781191826,
    -0.014703384600579739,
    -0.017308423295617104,
    0.009107977151870728,
    -0.0036686628591269255,
    0.05731271579861641,
    -0.032010599970817566,
    0.03422387316823006,
    -0.0005183715256862342,
    -0.04660189151763916,
    -0.05261342227458954,
    -0.027109798043966293,
    -0.06470361351966858,
    0.041322555392980576,
    -0.058525748550891876,
    0.011095987632870674,
    -0.029688917100429535,
    -0.0381196066737175,
    -0.03220270574092865,
    0.07436367124319077,
    -0.007839282043278217,
    -0.003974094986915588,
    0.016714613884687424,
    0.0405828021466732,
    0.0565030612051487,
    0.07975423336029053,
    -0.027806513011455536,
    0.05404094234108925,
    0.02303943783044815,
    0.021667679771780968,
    -0.0463654063642025,
    -0.04688328132033348,
    0.010490333661437035,
    0.0018322989344596863,
    -0.02319381572306156,
    0.06668677926063538,
    0.07637648284435272,
    0.022070981562137604,
    0.02826058678328991,
    -0.09733874350786209,
    -0.05489463359117508,
    0.0777880996465683,
    0.04555445909500122,
    -0.025400832295417786,
    0.017757533118128777,
    0.08814625442028046,
    -0.06292393058538437,
    -0.04972647875547409,
    -0.03380461409687996,
    -0.11497192084789276,
    -0.009194931015372276,
    0.010675545781850815,
    -0.020869649946689606,
    0.08539669960737228,
    0.05007044970989227,
    0.07284826785326004,
    0.10578746348619461,
    -0.03662429004907608,
    0.05147990956902504,
    0.08611610531806946,
    -0.05213601887226105,
    0.00641310028731823,
    0.00023515975044574589,
    -0.07904020696878433,
    -0.01798466220498085,
    0.05578631907701492,
    -0.07838146388530731,
    -0.0018586396472528577,
    -0.06291981786489487,
    0.03214745968580246,
    0.06323621422052383,
    0.006666853092610836,
    0.021973391994833946,
    0.006263965740799904,
    0.10442348569631577,
    -0.032846711575984955,
    0.059061311185359955,
    -0.03881888464093208,
    -0.024471888318657875,
    0.08815819025039673,
    -0.02719067595899105,
    0.036468714475631714,
    -0.027744030579924583,
    -0.05709525942802429,
    0.029974231496453285,
    0.051085349172353745,
    0.04400632902979851,
    0.02001691423356533,
    0.047362230718135834,
    0.010030632838606834,
    0.018267037346959114,
    -0.0706389918923378,
    0.03222506120800972,
    0.029388656839728355,
    -0.02754872478544712,
    0.020770978182554245,
    -0.032142169773578644,
    1.2488290352662744e-32,
    0.011425190605223179,
    -0.06326174736022949,
    0.04914560914039612,
    0.04240814596414566,
    -0.023878376930952072,
    -0.05375565588474274,
    -0.012141046114265919,
    0.03291720896959305,
    -0.05158247426152229,
    -0.16385775804519653,
    0.031062806025147438,
    0.05112940073013306,
    0.03670351952314377,
    0.013135087676346302,
    0.05119245499372482,
    0.009829445742070675,
    -0.02375011146068573,
    0.04972069710493088,
    0.06774646043777466,
    -0.01426959689706564,
    0.021573279052972794,
    -0.018105801194906235,
    0.0011256407015025616,
    -0.02073793113231659,
    -0.05055920407176018,
    -0.01294434443116188,
    0.041305478662252426,
    0.02223794534802437,
    -0.01464339904487133,
    0.022604236379265785,
    0.02268749475479126,
    -0.036079004406929016,
    -0.0136715704575181,
    0.023721693083643913,
    -0.015608151443302631,
    -0.009924598038196564,
    0.02924289181828499,
    -0.03213264420628548,
    -0.025217972695827484,
    -0.08578065782785416,
    0.00778263108804822,
    -0.05462329834699631,
    0.021944450214505196,
    -0.0704415962100029,
    -0.055656611919403076,
    -0.10476832836866379,
    -0.05594348534941673,
    0.10915948450565338,
    0.04174764081835747,
    0.010850904509425163,
    -0.007709462195634842,
    0.06415142863988876,
    -0.0437694787979126,
    -0.09449029713869095,
    -0.07958221435546875,
    -0.009193528443574905,
    -0.003874153597280383,
    -0.05148185044527054,
    0.038832779973745346,
    -0.0042090765200555325,
    -0.05211019888520241,
    0.0940176248550415,
    0.029013199731707573,
    -0.0029175435192883015,
    0.0038023637607693672,
    0.049602970480918884,
    -0.04160909354686737,
    -0.15612167119979858,
    -0.006415191106498241,
    -0.10337886959314346,
    -0.06690256297588348,
    -0.010772373527288437,
    -0.02481417916715145,
    0.00119618175085634,
    -0.04092550650238991,
    -0.05783665552735329,
    -0.042851150035858154,
    0.04847239702939987,
    0.03533392772078514,
    -0.030495133250951767,
    0.024347495287656784,
    -0.01709309220314026,
    -0.0338595025241375,
    0.03827860578894615,
    -0.03828854858875275,
    -0.028869327157735825,
    -0.015212751924991608,
    -0.12897710502147675,
    -0.04529621824622154,
    0.01435591746121645,
    0.08706367760896683,
    0.006044402252882719,
    -0.022042743861675262,
    -0.0323868952691555,
    -0.009123151190578938,
    -1.107203786106076e-32,
    0.008138002827763557,
    -0.06923815608024597,
    -0.018737252801656723,
    0.07531958818435669,
    0.06417034566402435,
    0.021336929872632027,
    -0.06642896682024002,
    0.017772916704416275,
    -0.05017516762018204,
    -0.025734085589647293,
    -0.02656414732336998,
    0.02180074155330658,
    -0.005412958096712828,
    -0.06405726075172424,
    0.039924804121255875,
    -0.004049807786941528,
    0.043803006410598755,
    -0.06944210827350616,
    0.008948887698352337,
    -0.07328189164400101,
    0.055581510066986084,
    -0.015639670193195343,
    0.06779647618532181,
    0.08857438713312149,
    0.03770719841122627,
    -0.02263033576309681,
    -0.0024415417574346066,
    0.043209295719861984,
    -0.04476220905780792,
    -0.07425230741500854,
    -0.01233111321926117,
    0.043050531297922134,
    -0.11249640583992004,
    -0.023376639932394028,
    -0.04078567028045654,
    -0.1319136619567871,
    -0.06735152006149292,
    0.03129618614912033,
    -0.08007676154375076,
    0.09468008577823639,
    0.056846778839826584,
    -0.052011888474226,
    -0.030955757945775986,
    -0.001764199580065906,
    0.02459459938108921,
    -0.006607752293348312,
    0.019763344898819923,
    0.012459040619432926,
    0.042876627296209335,
    0.0207563117146492,
    0.08106814324855804,
    -0.07867960631847382,
    -0.0319334976375103,
    -0.014754580333828926,
    -0.010273253545165062,
    0.033212658017873764,
    0.07992015779018402,
    -0.005858119111508131,
    0.05812590569257736,
    -0.0859673023223877,
    0.06685963273048401,
    -0.0507408007979393,
    -0.018202148377895355,
    0.12474580109119415,
    0.011218552477657795,
    -0.028389614075422287,
    0.04763269051909447,
    0.0026016978081315756,
    -0.03022068925201893,
    0.0597895123064518,
    -0.03487521409988403,
    -0.12449143826961517,
    -0.006823833100497723,
    -0.11594187468290329,
    0.08518736809492111,
    0.020270736888051033,
    -0.005131148733198643,
    -0.05118761584162712,
    -0.05202680081129074,
    0.013819941319525242,
    0.027229955419898033,
    0.021119872108101845,
    0.027025219053030014,
    -0.00907544232904911,
    0.050633352249860764,
    0.01769232749938965,
    0.0023074960336089134,
    0.07615460455417633,
    -0.04431382566690445,
    0.05059570074081421,
    -0.09421852976083755,
    0.10899611562490463,
    -0.07636547088623047,
    -0.025274446234107018,
    0.011275023221969604,
    -6.33511234582329e-08,
    -0.09240756928920746,
    0.02555958926677704,
    -0.015460079535841942,
    0.07625497877597809,
    -0.01617698185145855,
    -0.04016894847154617,
    -0.0010016290470957756,
    -0.004002705216407776,
    0.03292223811149597,
    0.029272597283124924,
    -0.018132483586668968,
    0.01803816482424736,
    -0.0682695060968399,
    -0.024181144312024117,
    -0.07182104885578156,
    -0.07044433802366257,
    0.06953051686286926,
    -0.03271963819861412,
    -0.041941020637750626,
    0.007758004125207663,
    -0.015816161409020424,
    -0.02030474878847599,
    -0.026143573224544525,
    -0.03655775636434555,
    0.0668681263923645,
    0.03761056065559387,
    0.10396460443735123,
    0.09883757680654526,
    0.05070896074175835,
    0.047389302402734756,
    0.008532260544598103,
    -0.019264549016952515,
    0.02072921022772789,
    -0.05060337856411934,
    -0.12390833348035812,
    0.06806821376085281,
    0.038854409009218216,
    0.0311112217605114,
    0.04960322752594948,
    0.08939266949892044,
    0.04840317368507385,
    -0.002078950870782137,
    -0.06477246433496475,
    0.04957081750035286,
    0.00506068067625165,
    0.025768332183361053,
    0.062002841383218765,
    0.05990040302276611,
    0.0036899838596582413,
    -0.02122814953327179,
    -0.09979080408811569,
    -0.015450247563421726,
    -0.0004320529114920646,
    0.016791045665740967,
    -0.014850162900984287,
    -0.023018965497612953,
    0.04369248077273369,
    -0.03488028794527054,
    0.09002763032913208,
    0.003186631016433239,
    0.05972675606608391,
    -0.001611045328900218,
    -0.07695037871599197,
    0.06485449522733688
  ]
}