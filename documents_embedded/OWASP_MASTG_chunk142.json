{
  "text": "libraries ThemostcommonlyusedClassforcryptographicoperationsistheCommonCrypto,whichispackedwiththeiOSruntime. ThefunctionalityofferedbytheCommonCryptoobjectcanbestbedissectedbyhavingalookatthesourcecodeofthe headerfile: • TheCommoncryptor.hgivestheparametersforthesymmetriccryptographicoperations. • TheCommonDigest.hgivestheparametersforthehashingAlgorithms. • TheCommonHMAC.hgivestheparametersforthesupportedHMACoperations. • TheCommonKeyDerivation.hgivestheparametersforsupportedKDFfunctions. • TheCommonSymmetricKeywrap.hgivesthefunctionusedforwrappingasymmetrickeywithaKeyEncryptionKey. Unfortunately,CommonCryptorlacksafewtypesofoperationsinitspublicAPIs,suchas: GCMmodeisonlyavailablein itsprivateAPIsSeeitssourcecode. Forthis,anadditionalbindingheaderisnecessaryorotherwrapperlibrariescanbe used. Next,forasymmetricoperations,AppleprovidesSecKey. AppleprovidesaniceguideinitsDeveloperDocumentationon howtousethis. Asnotedbefore: somewrapper-librariesexistforbothinordertoprovideconvenience. Typicallibrariesthatareusedare, forinstance: • IDZSwiftCommonCrypto • Heimdall • SwiftyRSA • RNCryptor • Arcane Third party libraries Therearevariousthirdpartylibrariesavailable,suchas: • CJOSE:WiththeriseofJWE,andthelackofpublicsupportforAESGCM,otherlibrarieshavefoundtheirway,such asCJOSE.CJOSEstillrequiresahigherlevelwrappingastheyonlyprovideaC/C++implementation. • CryptoSwift: AlibraryinSwift,whichcanbefoundatGitHub. Thelibrarysupportsvarioushash-functions,MAC- functions,CRC-functions,symmetricciphers,andpassword-basedkeyderivationfunctions. Itisnotawrapper,but afullyself-implementedversionofeachoftheciphers. Itisimportanttoverifytheeffectiveimplementationofa function. • OpenSSL:OpenSSListhetoolkitlibraryusedforTLS,writteninC.Mostofitscryptographicfunctionscanbeused todothevariouscryptographicactionsnecessary,suchascreating(H)MACs,signatures,symmetric-&asymmetric ciphers,hashing,etc.. Therearevariouswrappers,suchasOpenSSLandMIHCrypto. • LibSodium: Sodium is a modern, easy-to-use software library for encryption, decryption, signatures, password hashingandmore. Itisaportable,cross-compilable,installable,packageableforkofNaCl,withacompatibleAPI, andanextendedAPItoimproveusabilityevenfurther. SeeLibSodiumsdocumentationformoredetails. Thereare somewrapperlibraries,suchasSwift-sodium,NAChloride,andlibsodium-ios. • Tink: AnewcryptographylibrarybyGoogle. Googleexplainsitsreasoningbehindthelibraryonitssecurityblog. ThesourcescanbefoundatTinksGitHubrepository. • Themis: a Crypto library for storage and messaging for Swift, Obj-C, Android/Java, С++, JS, Python, Ruby, PHP, Go. Themis uses LibreSSL/OpenSSL engine libcrypto as a dependency. It supports Objective-C and Swift for key generation,securemessaging(e.g.payloadencryptionandsigning),securestorageandsettingupasecuresession. Seetheirwikiformoredetails. • Others: Therearemanyotherlibraries,suchasCocoaSecurity,Objective-C-RSA,andaerogear-ios-crypto. Some ofthesearenolongermaintainedandmightneverhavebeensecurityreviewed. Likealways,itisrecommended tolookforsupportedandmaintainedlibraries. 417\\n• DIY: An increasing amount of developers have created their own implementation of a cipher or a cryptographic function. This practice is highly discouraged and should be vetted very thoroughly by a cryptography expert if used. Key Management Therearevariousmethodsonhowtostorethekeyonthedevice. Notstoringakeyatallwillensurethatnokeymaterial canbedumped. ThiscanbeachievedbyusingaPasswordKeyDerivationfunction,suchasPKBDF-2. Seetheexample below: funcpbkdf2SHA1(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA1),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2SHA256(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA256),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2SHA512(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA512),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2(hash:CCPBKDFAlgorithm,password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ letpasswordData=password.data(using:String.Encoding.utf8)! varderivedKeyData=Data(repeating:0,count:keyByteCount) letderivedKeyDataLength=derivedKeyData.count letderivationStatus=derivedKeyData.withUnsafeMutableBytes{derivedKeyBytesin salt.withUnsafeBytes{saltBytesin CCKeyDerivationPBKDF( CCPBKDFAlgorithm(kCCPBKDF2), password,passwordData.count, saltBytes,salt.count, hash, UInt32(rounds), derivedKeyBytes,derivedKeyDataLength ) } } ifderivationStatus!=0{ //Error returnnil } returnderivedKeyData } functestKeyDerivation(){ letpassword=\"password\" letsalt=Data([0x73,0x61,0x6C,0x74,0x44,0x61,0x74,0x61]) letkeyByteCount=16 letrounds=100_000 letderivedKey=pbkdf2SHA1(password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } • Source: https://stackoverflow.com/questions/8569555/pbkdf2-using-commoncrypto-on-ios,testedinthetestsuite oftheArcanelibrary When you need to store the key, it is recommended to use the Keychain as long as the protection class chosen is not kSecAttrAccessibleAlways. Storingkeysinanyotherlocation,suchastheNSUserDefaults,propertylistfilesorbyany othersinkfromCoreDataorRealm,isusuallylesssecurethanusingtheKeyChain. EvenwhenthesyncofCoreDataor RealmisprotectedbyusingNSFileProtectionCompletedataprotectionclass,westillrecommendusingtheKeyChain. Seethechapter“DataStorageoniOS”formoredetails. TheKeyChainsupportstwotypeofstoragemechanisms: akeyiseithersecuredbyanencryptionkeystoredinthesecure enclaveorthekeyitselfiswithinthesecureenclave. ThelatteronlyholdswhenyouuseanECDHsigningkey. Seethe AppleDocumentationformoredetailsonitsimplementation. Thelastthreeoptionsconsistofusinghardcodedencryptionkeysinthesourcecode,havingapredictablekeyderivation functionbasedonstableattributes,andstoringgeneratedkeysinplacesthataresharedwithotherapplications. Using hardcoded encryption keys is obviously not the way to go, as this would mean that every instance of the application usesthesameencryptionkey. Anattackerneedsonlytodotheworkonceinordertoextractthekeyfromthesource code(whetherstorednativelyorinObjective-C/Swift). Consequently,theattackercandecryptanyotherdatathatwas encryptedbytheapplication. Next,whenyouhaveapredictablekeyderivationfunctionbasedonidentifierswhichare 418\\naccessibletootherapplications,theattackeronlyneedstofindtheKDFandapplyittothedeviceinordertofindthekey. Lastly,storingsymmetricencryptionkeyspubliclyalsoishighlydiscouraged. Twomorenotionsyoushouldneverforgetwhenitcomestocryptography: 1. Alwaysencrypt/verifywiththepublickeyandalwaysdecrypt/signwiththeprivatekey. 2. Neverreusethekey(pair)foranotherpurpose: thismightallowleakinginformationaboutthekey: haveaseparate keypairforsigningandaseparatekey(pair)forencryption. Random Number Generator AppleprovidesaRandomizationServicesAPI,whichgeneratescryptographicallysecurerandomnumbers. TheRandomizationServicesAPIusestheSecRandomCopyBytesfunctiontogeneratenumbers. Thisisawrapperfunction forthe/dev/randomdevicefile,whichprovidescryptographicallysecurepseudorandomvaluesfrom0to255. Makesure thatallrandomnumbersaregeneratedwiththisAPI.Thereisnoreasonfordeveloperstouseadifferentone. Verifying the Configuration of Cryptographic Standard Algorithms Platform: ios MASVSV1: MSTG-CRYPTO-2,MSTG-CRYPTO-3 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Foreachofthelibrariesthatareusedbytheapplication,theusedalgorithmsandcryptographicconfigurationsneedto beverifiedtomakesuretheyarenotdeprecatedandusedcorrectly. Payattentiontohow-to-be-removedkey-holdingdatastructuresandplain-textdatastructuresaredefined. Ifthekeyword letisused,thenyoucreateanimmutablestructurewhichishardertowipefrommemory. Makesurethatitispartofa parentstructurewhichcanbeeasilyremovedfrommemory(e.g.astructthatlivestemporally). Ensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. Lookatinsecureand deprecatedalgorithmsandcommonconfigurationissues. CommonCryptor IftheappusesstandardcryptographicimplementationsprovidedbyApple, theeasiestwaytodeterminethestatusof therelatedalgorithmistocheckforcallstofunctionsfromCommonCryptor,suchasCCCryptandCCCryptorCreate. The sourcecodecontainsthesignaturesofallfunctionsofCommonCryptor.h. Forinstance,CCCryptorCreatehasfollowing signature: CCCryptorStatusCCCryptorCreate( CCOperationop, /*kCCEncrypt,etc.*/ CCAlgorithmalg, /*kCCAlgorithmDES,etc.*/ CCOptionsoptions, /*kCCOptionPKCS7Padding,etc.*/ const void *key, /*rawkeymaterial*/ size_t keyLength, const void *iv, /*optionalinitializationvector*/ CCCryptorRef *cryptorRef); /*RETURNED*/ Youcanthencomparealltheenumtypestodeterminewhichalgorithm,padding,andkeymaterialisused. Payattention tothekeyingmaterial: thekeyshouldbegeneratedsecurely-eitherusingakeyderivationfunctionorarandom-number generationfunction. Notethatfunctionswhicharenotedinchapter“CryptographyforMobileApps”asdeprecated,are stillprogrammaticallysupported. Theyshouldnotbeused. 419\\nThird party libraries Giventhecontinuousevolutionofallthirdpartylibraries,thisshouldnotbetheplacetoevaluateeachlibraryintermsof staticanalysis. Stilltherearesomepointsofattention: • Findthelibrarybeingused: Thiscanbedoneusingthefollowingmethods: – CheckthecartfileifCarthageisused. – CheckthepodfileifCocoapodsisused. – Checkthelinkedlibraries: Openthexcodeprojfileandchecktheprojectproperties. GototheBuildPhases tabandchecktheentriesinLinkBinaryWithLibrariesforanyofthelibraries. Seeearliersectionsonhow toobtainsimilarinformationusingMobSF. – Inthecaseofcopy-pastedsources: searchtheheaderfiles(incaseofusingObjective-C)andotherwisethe Swiftfilesforknownmethodnamesforknownlibraries. • Determinetheversionbeingused: Alwayschecktheversionofthelibrarybeingusedandcheckwhetherthere is a new version available in which possible vulnerabilities or shortcomings are patched. Even without a newer version of a library, it can be the case that cryptographic functions have not been reviewed yet. Therefore we always recommend using a library that has been validated or ensure that you have the ability, knowledge and experiencetodovalidationyourself. • Byhand?: Werecommendnottorollyourowncrypto,nortoimplementknowncryptographicfunctionsyourself. Testing Key Management Platform: ios MASVSV1: MSTG-CRYPTO-1,MSTG-CRYPTO-5 MASVSV2: MASVS-CRYPTO-2 Overview Static Analysis Therearevariouskeywordstolookfor: checkthelibrariesmentionedintheoverviewandstaticanalysisofthesection “VerifyingtheConfigurationofCryptographicStandardAlgorithms”forwhichkeywordsyoucanbestcheckonhowkeys arestored. Alwaysmakesurethat: • keysarenotsynchronizedoverdevicesifitisusedtoprotecthigh-riskdata. • keysarenotstoredwithoutadditionalprotection. • keysarenothardcoded. • keysarenotderivedfromstablefeaturesofthedevice. • keysarenothiddenbyuseoflowerlevellanguages(e.g.C/C++). • keysarenotimportedfromunsafelocations. Checkalsothelistofcommoncryptographicconfigurationissues. Mostoftherecommendationsforstaticanalysiscanalreadybefoundinchapter“TestingDataStorageforiOS”.Next,you canreaduponitatthefollowingpages: • AppleDeveloperDocumentation: Certificatesandkeys • AppleDeveloperDocumentation: Generatingnewkeys • AppleDeveloperDocumentation: Keygenerationattributes Dynamic Analysis Hookcryptographicmethodsandanalyzethekeysthatarebeingused. Monitorfilesystemaccesswhilecryptographic operationsarebeingperformedtoassesswherekeymaterialiswrittentoorreadfrom. 420\\nTesting Random Number Generation Platform: ios MASVSV1: MSTG-CRYPTO-6 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 142
  },
  "embedding": [
    -0.0651744157075882,
    -0.05284124240279198,
    -0.02672533318400383,
    -0.04907938465476036,
    0.019316816702485085,
    0.0066795251332223415,
    0.005858147982507944,
    -0.016253292560577393,
    -0.04322820156812668,
    -0.004920621402561665,
    0.05495805665850639,
    -0.02952469140291214,
    0.004662754945456982,
    -0.017968500033020973,
    0.022912519052624702,
    -0.03218384087085724,
    0.014938946813344955,
    0.04793652519583702,
    -0.05191821604967117,
    0.054203156381845474,
    0.03932405263185501,
    -0.038217246532440186,
    0.05508490651845932,
    -0.0037212527822703123,
    0.005133225116878748,
    -0.04675167426466942,
    -0.03387732058763504,
    -0.013718286529183388,
    -0.07629457116127014,
    0.01708916574716568,
    -0.058206457644701004,
    -0.011619732715189457,
    0.059014175087213516,
    0.028284994885325432,
    0.027524778619408607,
    0.04340239614248276,
    0.02382315695285797,
    -0.001163770561106503,
    0.012563141994178295,
    -0.06983791291713715,
    -0.046701133251190186,
    -0.05962985381484032,
    -0.08441149443387985,
    0.08239789307117462,
    -0.10459131747484207,
    -0.012221693061292171,
    -0.00404692254960537,
    -0.07524043321609497,
    -0.07167506217956543,
    0.00016778949066065252,
    -0.014591047540307045,
    -0.009989913552999496,
    -0.02424509823322296,
    0.04776572436094284,
    -0.093204565346241,
    0.03855906426906586,
    -0.037970297038555145,
    0.06238711625337601,
    0.10127173364162445,
    0.03995375707745552,
    0.011424870230257511,
    0.04058019816875458,
    -0.038125548511743546,
    0.022813262417912483,
    -0.021226869896054268,
    0.0993947684764862,
    0.03807026520371437,
    -0.07899051904678345,
    0.060663338750600815,
    0.0132676362991333,
    -0.05164062976837158,
    -0.009523074142634869,
    -0.04807831719517708,
    0.0334782637655735,
    -0.003934178035706282,
    0.042044855654239655,
    -0.06122459098696709,
    -0.019794488325715065,
    0.059690311551094055,
    -0.10172140598297119,
    0.02910993993282318,
    0.02362987771630287,
    0.059660762548446655,
    0.08260490745306015,
    0.044335972517728806,
    0.028916696086525917,
    -0.04866207018494606,
    -0.032109584659338,
    0.05075325071811676,
    -0.022417232394218445,
    0.010517467744648457,
    -0.024893242865800858,
    -0.011516423895955086,
    -0.01627272553741932,
    0.008383584208786488,
    -0.07209986448287964,
    0.005164860747754574,
    -0.04563305154442787,
    -0.06683323532342911,
    0.00038704488542862236,
    -0.04686878249049187,
    -0.08365458250045776,
    0.027544483542442322,
    -0.05651644617319107,
    0.029999984428286552,
    0.013328158296644688,
    -0.01597384549677372,
    -0.01653655432164669,
    0.02129189483821392,
    0.017047006636857986,
    0.014073324389755726,
    0.008718425408005714,
    0.013220936059951782,
    -0.07863131910562515,
    -0.009249585680663586,
    0.08908740431070328,
    -0.11559683084487915,
    0.037140313535928726,
    0.11905324459075928,
    0.02867480181157589,
    -0.013892587274312973,
    0.044822439551353455,
    0.07983437180519104,
    -0.048766981810331345,
    -0.023916514590382576,
    -0.041546329855918884,
    -0.029061108827590942,
    1.7143452224062458e-32,
    0.017364567145705223,
    -0.05533389002084732,
    -0.01666160859167576,
    0.04733389988541603,
    -0.01857188157737255,
    0.039435140788555145,
    0.05076295882463455,
    0.012626470997929573,
    0.006445370148867369,
    -0.034081146121025085,
    -0.013336422853171825,
    0.031758617609739304,
    -0.028629949316382408,
    -0.01865115389227867,
    -0.039371147751808167,
    -0.05407042056322098,
    -0.01446592342108488,
    0.02829078584909439,
    -0.04197948798537254,
    0.04162983223795891,
    -0.00810452550649643,
    0.04797463119029999,
    0.05080346390604973,
    0.01977246254682541,
    -0.052312955260276794,
    0.06035022437572479,
    0.04306464642286301,
    0.054024092853069305,
    0.06561005115509033,
    0.07583996653556824,
    -0.055807262659072876,
    -0.025987939909100533,
    -0.03882145881652832,
    -0.042772822082042694,
    0.016423935070633888,
    -0.022012945264577866,
    0.03336775675415993,
    -0.07094358652830124,
    0.005238119047135115,
    -0.09168341010808945,
    0.04168922081589699,
    -0.03733570873737335,
    -0.04985910281538963,
    -0.07298454642295837,
    0.01851540245115757,
    -0.046220555901527405,
    0.03890451043844223,
    0.002166640479117632,
    0.05061158910393715,
    0.09685911238193512,
    -0.05395612493157387,
    0.007027811370790005,
    -0.052084360271692276,
    -0.11194638162851334,
    -0.1490117907524109,
    -0.059800680726766586,
    -0.006468439009040594,
    0.09161440283060074,
    0.0896618589758873,
    0.004518605303019285,
    -0.06945531815290451,
    0.03894103318452835,
    0.020826032385230064,
    -0.04133576527237892,
    0.03430980443954468,
    -0.01164417713880539,
    -0.06909570097923279,
    -0.10920299589633942,
    -0.07221890240907669,
    -0.013927427120506763,
    -0.03776097670197487,
    -0.029384734109044075,
    0.044491320848464966,
    0.020990803837776184,
    0.04108034074306488,
    -0.011776468716561794,
    -0.018111590296030045,
    0.011111825704574585,
    -0.02649422362446785,
    -0.0749707892537117,
    0.06658471375703812,
    0.05550232529640198,
    0.06541964411735535,
    -0.005565391853451729,
    -0.03268086910247803,
    -0.025989659130573273,
    0.006562010385096073,
    -0.08245114982128143,
    -0.06856603175401688,
    0.013473615050315857,
    0.02198965847492218,
    -0.009161731228232384,
    -0.029091157019138336,
    -0.028464198112487793,
    -0.062110692262649536,
    -1.717543889471627e-32,
    0.007748379837721586,
    -0.027458760887384415,
    -0.044469110667705536,
    0.05820851773023605,
    0.049468863755464554,
    0.06589198112487793,
    -0.05241461098194122,
    0.027515364810824394,
    0.004372726660221815,
    -0.0222457367926836,
    0.04736938327550888,
    -0.0002622370084282011,
    0.02511976659297943,
    -0.04794398695230484,
    0.03982968628406525,
    0.014704753644764423,
    -0.04582575708627701,
    0.018656548112630844,
    -0.03601478040218353,
    0.06417342275381088,
    0.02359176054596901,
    0.011767642572522163,
    -0.040057018399238586,
    0.08602076768875122,
    0.06271462887525558,
    0.02583128772675991,
    -0.0060213832184672356,
    0.1070481538772583,
    0.09646228700876236,
    -0.009146480821073055,
    -0.007208968512713909,
    0.04945855960249901,
    -0.08451838046312332,
    -0.04266851395368576,
    -0.030111152678728104,
    -0.11240747570991516,
    -0.0035490235313773155,
    -0.0020481813699007034,
    -0.0973263755440712,
    -0.0025160866789519787,
    0.06269457191228867,
    -0.08342517167329788,
    0.03680805116891861,
    -0.019065916538238525,
    0.021092476323246956,
    -0.054493024945259094,
    0.05398961901664734,
    -0.06716424226760864,
    0.016443025320768356,
    0.05083845928311348,
    0.027716025710105896,
    -0.033087242394685745,
    -0.04183473438024521,
    0.0016307532787322998,
    0.011886226944625378,
    0.10755545645952225,
    0.05188818275928497,
    0.04232864826917648,
    -0.02250448800623417,
    -0.010882487520575523,
    0.05131656304001808,
    0.04841804504394531,
    0.09886828064918518,
    -0.018201269209384918,
    0.11762820184230804,
    0.0791168138384819,
    -0.03767886757850647,
    0.02048039622604847,
    -0.01448336336761713,
    0.08326869457960129,
    -0.01676371321082115,
    -0.07721991091966629,
    0.05368231609463692,
    -0.10757341980934143,
    0.06783700734376907,
    -0.027962535619735718,
    0.06980789452791214,
    -0.11752916127443314,
    -0.0765785351395607,
    -0.02788776159286499,
    0.07760603725910187,
    -0.028751790523529053,
    0.036112070083618164,
    0.0638512596487999,
    0.08493378013372421,
    -0.05308420956134796,
    -0.020682791247963905,
    0.009602599777281284,
    -0.044056735932826996,
    0.05158175528049469,
    -0.06752977520227432,
    0.01339815929532051,
    -0.009495946578681469,
    0.09000170975923538,
    0.07573974132537842,
    -6.173422661959194e-08,
    -0.013727542012929916,
    0.026562191545963287,
    -0.04900512471795082,
    -0.04458212852478027,
    0.09104792773723602,
    0.02829793654382229,
    -0.016893211752176285,
    -0.010461724363267422,
    -0.0893857479095459,
    -0.10505986213684082,
    0.03537999093532562,
    -0.06151210144162178,
    -0.05503243952989578,
    0.0038816139567643404,
    0.018209345638751984,
    -0.018866609781980515,
    -0.05031387135386467,
    0.01369470078498125,
    -0.05044965073466301,
    -0.05237685143947601,
    -0.08515328168869019,
    -0.023840710520744324,
    -0.014825551770627499,
    -0.016046809032559395,
    0.014804990030825138,
    0.044406574219465256,
    0.04100119322538376,
    0.07296440005302429,
    0.07215845584869385,
    0.042763158679008484,
    -0.04490714147686958,
    -0.024224506691098213,
    0.07547146826982498,
    -0.05610167235136032,
    -0.09627336263656616,
    0.05921056121587753,
    -0.08677461743354797,
    0.0025318250991404057,
    0.04549857974052429,
    -0.013205457478761673,
    0.001214144635014236,
    0.03832085430622101,
    -0.012666883878409863,
    0.06764587759971619,
    0.04483035206794739,
    0.02155110239982605,
    0.009550492279231548,
    0.020471902564167976,
    -0.029429081827402115,
    0.0736737996339798,
    -0.1433689296245575,
    0.005488679278641939,
    -0.08880793303251266,
    0.06205792725086212,
    -0.08538341522216797,
    0.05343695357441902,
    0.04538736119866371,
    -0.07963783293962479,
    0.0029958700761198997,
    -0.014546280726790428,
    0.06558895856142044,
    -0.02508699707686901,
    0.05031687766313553,
    -0.026630470529198647
  ]
}