{
  "text": "• Digitalsignaturealgorithms: RSA(3072bitsandhigher),ECDSAwithNISTP-384 • Keyestablishmentalgorithms: RSA(3072bitsandhigher),DH(3072bitsorhigher),ECDHwithNISTP-384 Additionally,youshouldalwaysrelyonsecurehardware(ifavailable)forstoringencryptionkeys,performingcryptographic operations,etc. Formoreinformationonalgorithmchoiceandbestpractices,seethefollowingresources: • “CommercialNationalSecurityAlgorithmSuiteandQuantumComputingFAQ” • NISTrecommendations(2019) • BSIrecommendations(2019) Common Configuration Issues Insufficient Key Length Eventhemostsecureencryptionalgorithmbecomesvulnerabletobrute-forceattackswhenthatalgorithmusesaninsuf- ficientkeysize. Ensurethatthekeylengthfulfillsacceptedindustrystandards. 72\\nSymmetric Encryption with Hard-Coded Cryptographic Keys Thesecurityofsymmetricencryptionandkeyedhashes(MACs)dependsonthesecrecyofthekey. Ifthekeyisdisclosed, the security gained by encryption is lost. To prevent this, never store secret keys in the same place as the encrypted datatheyhelpedcreate. Acommonmistakeisencryptinglocallystoreddatawithastatic,hardcodedencryptionkeyand compilingthatkeyintotheapp. Thismakesthekeyaccessibletoanyonewhocanuseadisassembler. Hardcodedencryptionkeymeansthatakeyis: • partofapplicationresources • valuewhichcanbederivedfromknownvalues • hardcodedincode First, ensure that no keys or passwords are stored within the source code. This means you should check native code, JavaScript/Dartcode,Java/KotlincodeonAndroidandObjective-C/SwiftiniOS.Notethathard-codedkeysareproblematic evenifthesourcecodeisobfuscatedsinceobfuscationiseasilybypassedbydynamicinstrumentation. Iftheappisusingtwo-wayTLS(bothserverandclientcertificatesarevalidated),makesurethat: • Thepasswordtotheclientcertificateisn’tstoredlocallyorislockedinthedeviceKeychain. • Theclientcertificateisn’tsharedamongallinstallations. Iftheappreliesonanadditionalencryptedcontainerstoredinappdata,checkhowtheencryptionkeyisused. Ifakey- wrappingschemeisused,ensurethatthemastersecretisinitializedforeachuserorthecontainerisre-encryptedwith newkey. Ifyoucanusethemastersecretorpreviouspasswordtodecryptthecontainer,checkhowpasswordchanges arehandled. Secretkeysmustbestoredinsecuredevicestoragewheneversymmetriccryptographyisusedinmobileapps. Formore informationontheplatform-specificAPIs,seethe“DataStorageonAndroid”and“DataStorageoniOS”chapters. Weak Key Generation Functions Cryptographicalgorithms(suchassymmetricencryptionorsomeMACs)expectasecretinputofagivensize. Forexample, AESusesakeyofexactly16bytes. Anativeimplementationmightusetheuser-suppliedpassworddirectlyasaninput key. Usingauser-suppliedpasswordasaninputkeyhasthefollowingproblems: • Ifthepasswordissmallerthanthekey,thefullkeyspaceisn’tused. Theremainingspaceispadded(spacesare sometimesusedforpadding). • Auser-suppliedpasswordwillrealisticallyconsistmostlyofdisplayableandpronounceablecharacters. Therefore, onlysomeofthepossible256ASCIIcharactersareusedandentropyisdecreasedbyapproximatelyafactoroffour. Ensurethatpasswordsaren’tdirectlypassedintoanencryptionfunction. Instead,theuser-suppliedpasswordshouldbe passedintoaKDFtocreateacryptographickey. Chooseanappropriateiterationcountwhenusingpasswordderivation functions. Forexample,NISTrecommendsaniterationcountofatleast10,000forPBKDF2andforcriticalkeyswhereuser- perceivedperformanceisnotcriticalatleast10,000,000. Forcriticalkeys,itisrecommendedtoconsiderimplementation ofalgorithmsrecognizedbyPasswordHashingCompetition(PHC)likeArgon2. Weak Random Number Generators It is fundamentally impossible to produce truly random numbers on any deterministic device. Pseudo-random number generators (RNG) compensate for this by producing a stream of pseudo-random numbers - a stream of numbers that appear as if they were randomly generated. The quality of the generated numbers varies with the type of algorithm used. CryptographicallysecureRNGsgeneraterandomnumbersthatpassstatisticalrandomnesstests,andareresilient againstpredictionattacks(e.g.itisstatisticallyinfeasibletopredictthenextnumberproduced). MobileSDKsofferstandardimplementationsofRNGalgorithmsthatproducenumberswithsufficientartificialrandomness. We’llintroducetheavailableAPIsintheAndroidandiOSspecificsections. 73\\nCustom Implementations of Cryptography Inventing proprietary cryptographic functions is time consuming, difficult, and likely to fail. Instead, we can use well- knownalgorithmsthatarewidelyregardedassecure. MobileoperatingsystemsofferstandardcryptographicAPIsthat implementthosealgorithms. Carefullyinspectallthecryptographicmethodsusedwithinthesourcecode,especiallythosethataredirectlyappliedto sensitivedata. AllcryptographicoperationsshouldusestandardcryptographicAPIsforAndroidandiOS(we’llwriteabout thoseinmoredetailintheplatform-specificchapters). Anycryptographicoperationsthatdon’tinvokestandardroutines from known providers should be closely inspected. Pay close attention to standard algorithms that have been modi- fied. Rememberthatencodingisn’tthesameasencryption! Alwaysinvestigatefurtherwhenyoufindbitmanipulation operatorslikeXOR(exclusiveOR). Atallimplementationsofcryptography,youneedtoensurethatthefollowingalwaystakesplace: • Worker keys (like intermediary/derived keys in AES/DES/Rijndael) are properly removed from memory after con- sumptionorincaseoferror. • Theinnerstateofaciphershouldberemovedfrommemoryassoonaspossible. Inadequate AES Configuration Advanced Encryption Standard (AES) is the widely accepted standard for symmetric encryption in mobile apps. It’s an iterative block cipher that is based on a series of linked mathematical operations. AES performs a variable number of roundsontheinput,eachofwhichinvolvesubstitutionandpermutationofthebytesintheinputblock. Eachrounduses a128-bitroundkeywhichisderivedfromtheoriginalAESkey. Asofthiswriting,noefficientcryptanalyticattacksagainstAEShavebeendiscovered. However,implementationdetails andconfigurableparameterssuchastheblockciphermodeleavesomemarginforerror. Weak Block Cipher Mode Block-basedencryptionisperformedupondiscreteinputblocks(forexample,AEShas128-bitblocks). Iftheplaintextis largerthantheblocksize,theplaintextisinternallysplitupintoblocksofthegiveninputsizeandencryptionisperformed oneachblock. Ablockciphermodeofoperation(orblockmode)determinesiftheresultofencryptingthepreviousblock impactssubsequentblocks. ECB(ElectronicCodebook)dividestheinputintofixed-sizeblocksthatareencryptedseparatelyusingthesamekey. If multipledividedblockscontainthesameplaintext, theywillbeencryptedintoidenticalciphertextblockswhichmakes patternsindataeasiertoidentify. Insomesituations,anattackermightalsobeabletoreplaytheencrypteddata. VerifythatCipherBlockChaining(CBC)modeisusedinsteadofECB.InCBCmode,plaintextblocksareXORedwiththe previousciphertextblock. Thisensuresthateachencryptedblockisuniqueandrandomizedevenifblockscontainthe sameinformation. PleasenotethatitisbesttocombineCBCwithanHMACand/orensurethatnoerrorsaregivensuch as“Paddingerror”,“MACerror”,“decryptionfailed”inordertobemoreresistanttoapaddingoracleattack. 74\\nWhenstoringencrypteddata,werecommendusingablockmodethatalsoprotectstheintegrityofthestoreddata,such as Galois/Counter Mode (GCM). The latter has the additional benefit that the algorithm is mandatory for each TLSv1.2 implementation,andthusisavailableonallmodernplatforms. Formoreinformationoneffectiveblockmodes,seetheNISTguidelinesonblockmodeselection. Predictable Initialization Vector CBC,OFB,CFB,PCBC,GCMmoderequireaninitializationvector(IV)asaninitialinputtothecipher. TheIVdoesn’thave tobekeptsecret,butitshouldn’tbepredictable: itshouldberandomandunique/non-repeatableforeachencryptedmes- sage. MakesurethatIVsaregeneratedusingacryptographicallysecurerandomnumbergenerator. Formoreinformation onIVs,seeCryptoFail’sinitializationvectorsarticle. Pay attention to cryptographic libraries used in the code: many open source libraries provide examples in their docu- mentationsthatmightfollowbadpractices(e.g.usingahardcodedIV).Apopularmistakeiscopy-pastingexamplecode withoutchangingtheIVvalue. Initialization Vectors in stateful operation modes Please note that the usage of IVs is different when using CTR and GCM mode in which the initialization vector is often acounter(inCTRcombinedwithanonce). SohereusingapredictableIVwithitsownstatefulmodelisexactlywhatis needed. InCTRyouhaveanewnoncepluscounterasaninputtoeverynewblockoperation. Forexample: fora5120 bitlongplaintext: youhave20blocks,soyouneed20inputvectorsconsistingofanonceandcounter. WhereasinGCM youhaveasingleIVpercryptographicoperation,whichshouldnotberepeatedwiththesamekey. Seesection8ofthe documentationfromNISTonGCMformoredetailsandrecommendationsoftheIV. Padding Oracle Attacks due to Weaker Padding or Block Operation Implementations In the old days, PKCS1.5 padding (in code: PKCS1Padding) was used as a padding mechanism when doing asymmet- ric encryption. This mechanism is vulnerable to the padding oracle attack. Therefore, it is best to use OAEP (Optimal Asymmetric Encryption Padding) captured in PKCS#1 v2.0 (in code: OAEPPadding, OAEPwithSHA-256andMGF1Padding, OAEPwithSHA-224andMGF1Padding, OAEPwithSHA-384andMGF1Padding, OAEPwithSHA-512andMGF1Padding). Note that, even when using OAEP, you can still run into an issue known best as the Manger’s attack as described in",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 50
  },
  "embedding": [
    -0.02097303979098797,
    -0.04137755557894707,
    -0.04819211736321449,
    -0.06211026757955551,
    -0.05060522258281708,
    0.0011688708327710629,
    -0.10307111591100693,
    -0.03680429235100746,
    -0.006698977202177048,
    0.019092079252004623,
    0.027512552216649055,
    -0.03450698405504227,
    0.025897076353430748,
    -0.02608279325067997,
    0.05970720201730728,
    -0.01351877674460411,
    -0.027321403846144676,
    -0.034915633499622345,
    -0.024213705211877823,
    -0.01271746028214693,
    0.007035036571323872,
    0.03245723992586136,
    -0.0109639260917902,
    -0.01833069883286953,
    -0.01972336694598198,
    -0.016276881098747253,
    -0.02046031504869461,
    -0.018837224692106247,
    -0.06713343411684036,
    -0.0427803173661232,
    0.02445717714726925,
    -0.007228486239910126,
    0.0525408573448658,
    0.047112759202718735,
    0.04401050880551338,
    0.02625906467437744,
    0.03669082000851631,
    0.011336575262248516,
    0.040332406759262085,
    -0.018260309472680092,
    0.011304201558232307,
    -0.0870618149638176,
    -0.05803540349006653,
    0.014690710231661797,
    -0.00963458139449358,
    0.01824427954852581,
    -0.033452894538640976,
    -0.005236364901065826,
    -0.026509739458560944,
    -0.01190135907381773,
    0.0033756259363144636,
    -0.0014991438947618008,
    0.022542297840118408,
    0.10850638151168823,
    -0.07201991975307465,
    -0.056263267993927,
    -0.0020050513558089733,
    0.011499766260385513,
    0.05994855985045433,
    -0.018025223165750504,
    0.07169449329376221,
    0.056224241852760315,
    -0.011917087249457836,
    -0.021232696250081062,
    -0.050847429782152176,
    0.0870596170425415,
    0.01668606512248516,
    -0.07830505073070526,
    0.027536191046237946,
    -0.025482041761279106,
    -0.02668341062963009,
    -0.05183946341276169,
    -0.03919970616698265,
    0.10590572655200958,
    -0.0025024176575243473,
    -0.006113866344094276,
    -0.04790850728750229,
    -0.04525430127978325,
    0.03346838057041168,
    -0.09236770868301392,
    -0.022453753277659416,
    -0.024782055988907814,
    -0.0360197089612484,
    0.0608179047703743,
    0.0115310437977314,
    0.0972859337925911,
    -0.06642363220453262,
    -0.025167306885123253,
    -0.0369940921664238,
    0.0028868187218904495,
    0.0605023168027401,
    0.004373620729893446,
    -0.01552647165954113,
    -0.014015961438417435,
    0.026199523359537125,
    -0.040454208850860596,
    0.050840917974710464,
    -0.0032758479937911034,
    -0.056624799966812134,
    0.0035317721776664257,
    -0.010003662668168545,
    0.02525809034705162,
    -0.05412280187010765,
    -0.09033147990703583,
    -0.022714843973517418,
    -0.001007926999591291,
    0.03929585590958595,
    0.052669212222099304,
    0.05598508194088936,
    -0.007948673330247402,
    -0.020795434713363647,
    -0.027812732383608818,
    -0.0042184810154139996,
    -0.05400353670120239,
    -0.026512911543250084,
    0.06292470544576645,
    -0.12402021139860153,
    0.02737543173134327,
    0.06409671157598495,
    0.022226935252547264,
    0.022057991474866867,
    0.03213909640908241,
    0.004678432829678059,
    -0.04890594258904457,
    -0.03770480304956436,
    -0.012414765544235706,
    -0.02906635031104088,
    2.236498784483949e-32,
    -0.00676492415368557,
    0.11160043627023697,
    -0.016781538724899292,
    -0.03124808520078659,
    0.028873123228549957,
    0.04222651571035385,
    -0.004255780950188637,
    -0.006148832850158215,
    -0.019218912348151207,
    -0.017552686855196953,
    -0.035757310688495636,
    0.018458636477589607,
    -0.002220294438302517,
    -0.061880141496658325,
    0.035368844866752625,
    -0.04190182685852051,
    -0.015247469767928123,
    0.12918494641780853,
    0.026981141418218613,
    0.03044922463595867,
    0.005466308444738388,
    -0.034062378108501434,
    0.06023949757218361,
    0.01757488213479519,
    0.016173960641026497,
    0.017502611503005028,
    0.01237085834145546,
    0.04114189371466637,
    0.10373663157224655,
    0.042204465717077255,
    -0.015818659216165543,
    0.02921966277062893,
    -0.06593534350395203,
    -0.11565440893173218,
    0.014775168150663376,
    -0.028758397325873375,
    0.06785155087709427,
    -0.0879134014248848,
    -0.07823389768600464,
    -0.09594251960515976,
    -0.027079351246356964,
    0.04943615943193436,
    -0.031504128128290176,
    0.021143337711691856,
    -0.010571477003395557,
    0.018410146236419678,
    0.004890113603323698,
    0.07036874443292618,
    0.08988451212644577,
    0.1137440875172615,
    -0.11149434000253677,
    -0.026551974937319756,
    -0.0048067872412502766,
    -0.09174326807260513,
    -0.0713699534535408,
    -0.06818529218435287,
    -0.014641827903687954,
    -0.03005451336503029,
    0.04164634272456169,
    -0.004774380475282669,
    0.015524419024586678,
    0.014430277049541473,
    -0.0069740451872348785,
    -0.06451281905174255,
    -0.03401752933859825,
    -0.11185765266418457,
    0.018622007220983505,
    -0.04395262524485588,
    -0.058973848819732666,
    -0.00271282228641212,
    -0.004682634025812149,
    0.022572550922632217,
    0.04801775887608528,
    0.06890097260475159,
    -0.009338431060314178,
    -0.09080961346626282,
    0.014287152327597141,
    0.04378149285912514,
    0.028118878602981567,
    -0.017465787008404732,
    -0.031304601579904556,
    0.08623328059911728,
    0.0711376890540123,
    -0.003492806339636445,
    0.046832554042339325,
    0.04754086583852768,
    -0.011046563275158405,
    -0.01939624920487404,
    -0.06282366812229156,
    0.01175736729055643,
    -0.02487625554203987,
    -0.023431817069649696,
    -0.032668862491846085,
    0.04842853918671608,
    -0.05090112239122391,
    -2.1432759111183998e-32,
    -0.056006066501140594,
    -0.045726168900728226,
    -0.03186662867665291,
    0.022298965603113174,
    0.06416228413581848,
    -0.010230310261249542,
    -0.03388373181223869,
    0.07275352627038956,
    0.1126100942492485,
    -0.01927165873348713,
    0.09904992580413818,
    -0.009368501603603363,
    0.07443150877952576,
    -0.08700898289680481,
    0.060925230383872986,
    -0.061274491250514984,
    -0.06371814757585526,
    -0.02141222171485424,
    0.001515558804385364,
    0.051099736243486404,
    0.04371609538793564,
    0.03082145005464554,
    -0.0892629399895668,
    0.10301773995161057,
    0.045118678361177444,
    0.0708954855799675,
    -0.06029822304844856,
    0.06945543736219406,
    0.050236720591783524,
    -0.04866557568311691,
    0.03661901876330376,
    0.02580082230269909,
    -0.1368301659822464,
    0.08050990849733353,
    -0.12737484276294708,
    -0.05397031828761101,
    0.03827302157878876,
    0.022899819537997246,
    -0.015379470773041248,
    -0.0037966384552419186,
    0.06942196190357208,
    0.03494376316666603,
    -0.0018892964581027627,
    0.040972691029310226,
    0.008486771956086159,
    -0.019274676218628883,
    0.0598640963435173,
    0.023475321009755135,
    -0.005522916559129953,
    0.007929216139018536,
    0.03812545910477638,
    -0.03719655051827431,
    -0.011234932579100132,
    0.008711745031177998,
    0.05231301113963127,
    0.10279274731874466,
    -0.054236747324466705,
    0.06039194017648697,
    -0.008024710230529308,
    -0.09231574833393097,
    0.0339822880923748,
    0.03925355151295662,
    0.0593605563044548,
    0.09249159693717957,
    0.01836962252855301,
    -0.026700695976614952,
    0.0076430062763392925,
    0.02452363446354866,
    0.0024580114986747503,
    0.01861088164150715,
    0.009317458607256413,
    -0.08863361179828644,
    -0.023364229127764702,
    -0.06730718165636063,
    0.04017056152224541,
    -0.06729187071323395,
    -0.03503149002790451,
    -0.036890994757413864,
    -0.0864870548248291,
    0.022906869649887085,
    0.05341358855366707,
    0.07007252424955368,
    -0.043871380388736725,
    -0.007856696844100952,
    0.0819334164261818,
    -0.007493946701288223,
    0.07776780426502228,
    0.030434196814894676,
    -0.05018063262104988,
    0.013901686295866966,
    -0.13148124516010284,
    -0.0760829970240593,
    -0.010051030665636063,
    0.1392393559217453,
    0.041965801268815994,
    -7.292914716572341e-08,
    0.05467021092772484,
    0.04261036962270737,
    -0.04814690351486206,
    -0.06909302622079849,
    0.06641912460327148,
    -0.03941088169813156,
    0.015602274797856808,
    0.02236991375684738,
    -0.053082093596458435,
    -0.07944142073392868,
    0.044055406004190445,
    -0.02182607725262642,
    -0.08876663446426392,
    -0.04682231321930885,
    0.0033296244218945503,
    -0.07132110744714737,
    -0.09050419181585312,
    0.01731627807021141,
    -0.028245268389582634,
    -0.0525820255279541,
    0.014148288406431675,
    -0.0634712427854538,
    -0.03690112754702568,
    -0.010879977606236935,
    0.03646581619977951,
    0.051473651081323624,
    0.061030544340610504,
    0.06246889382600784,
    -0.0017278549494221807,
    0.016670655459165573,
    -0.0338870994746685,
    -0.03959888592362404,
    0.0103212371468544,
    -0.0789514034986496,
    -0.08011437207460403,
    0.011557178571820259,
    -0.08177294582128525,
    0.03571207821369171,
    0.05601057782769203,
    -0.03755325451493263,
    -0.012269712053239346,
    -0.05705098435282707,
    -0.00633538793772459,
    0.047706082463264465,
    0.0133792944252491,
    -0.014254000037908554,
    -0.05796029046177864,
    0.08108755201101303,
    0.06669094413518906,
    -0.03895825520157814,
    -0.10787075012922287,
    -0.11584846675395966,
    0.029374727979302406,
    0.011117558926343918,
    -0.026942117139697075,
    0.056229159235954285,
    -0.014109824784100056,
    -0.006270636338740587,
    0.044197194278240204,
    0.014534628950059414,
    0.17217355966567993,
    -0.05371946096420288,
    0.013815062120556831,
    0.026508495211601257
  ]
}