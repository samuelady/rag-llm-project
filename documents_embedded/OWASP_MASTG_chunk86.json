{
  "text": "thegetExternal*functions(useexternalstorage) ∗ thegetWritableDatabasefunction(returnsaSQLiteDatabaseforwriting) ∗ thegetReadableDatabasefunction(returnsaSQLiteDatabaseforreading) ∗ thegetCacheDirandgetExternalCacheDirsfunction(usecachedfiles) EncryptionshouldbeimplementedusingprovenSDKfunctions. Thefollowingdescribesbadpracticestolookforinthe sourcecode: • Locallystoredsensitiveinformation“encrypted”viasimplebitoperationslikeXORorbitflipping. Theseoperations shouldbeavoidedbecausetheencrypteddatacanberecoveredeasily. • KeysusedorcreatedwithoutAndroidonboardfeatures,suchastheAndroidKeyStore • Keysdisclosedbyhard-coding 206\\nA typical misuse are hard-coded cryptographic keys. Hard-coded and world-readable cryptographic keys significantly increasethepossibilitythatencrypteddatawillberecovered. Onceanattackerobtainsthedata,decryptingitistrivial. Symmetric cryptography keys must be stored on the device, so identifying them is just a matter of time and effort. Considerthefollowingcode: this.db=localUserSecretStore.getWritableDatabase(\"SuperPassword123\"); Obtainingthekeyistrivialbecauseitiscontainedinthesourcecodeandidenticalforallinstallationsoftheapp. Encrypting datathis way is notbeneficial. Lookfor hard-codedAPI keys/privatekeysand other valuable data; they pose asimilar risk. Encoded/encryptedkeysrepresentanotherattempttomakeitharderbutnotimpossibletogetthecrownjewels. Considerthefollowingcode: ExampleinJava: //AmorecomplicatedefforttostoretheXOR'edhalvesofakey(insteadofthekeyitself) private static final String[]myCompositeKey =newString[]{ \"oNQavjbaNNSgEqoCkT9Em4imeQQ=\",\"3o8eFOX4ri/F8fgHgiy/BS47\" }; ExampleinKotlin: private valmyCompositeKey =arrayOf<String>(\"oNQavjbaNNSgEqoCkT9Em4imeQQ=\", \"3o8eFOX4ri/F8fgHgiy/BS47\") Thealgorithmfordecodingtheoriginalkeymightbesomethinglikethis: ExampleinJava: public void useXorStringHiding(StringmyHiddenMessage){ byte[]xorParts0 =Base64.decode(myCompositeKey[0],0); byte[]xorParts1 =Base64.decode(myCompositeKey[1],0); byte[]xorKey =newbyte[xorParts0.length]; for(inti=0;i<xorParts1.length;i++){ xorKey[i]=(byte)(xorParts0[i]^xorParts1[i]); } HidingUtil.doHiding(myHiddenMessage.getBytes(),xorKey,false); } ExampleinKotlin: funuseXorStringHiding(myHiddenMessage:String){ valxorParts0 =Base64.decode(myCompositeKey[0],0) valxorParts1 =Base64.decode(myCompositeKey[1],0) valxorKey =ByteArray(xorParts0.size) for(iinxorParts1.indices) { xorKey[i]=(xorParts0[i]xorxorParts1[i]).toByte() } HidingUtil.doHiding(myHiddenMessage.toByteArray(),xorKey,false) } Verifycommonlocationsofsecrets: • resources(typicallyatres/values/strings.xml)Example: <resources> <string name=\"app_name\">SuperApp</string> <string name=\"hello_world\">Helloworld!</string> <string name=\"action_settings\">Settings</string> <string name=\"secret_key\">My_Secret_Key</string> </resources> • buildconfigs,suchasinlocal.propertiesorgradle.propertiesExample: buildTypes { debug { minifyEnabled true buildConfigField \"String\",\"hiddenPassword\",\"\\\"${hiddenPassword}\\\"\" } } 207\\nDynamic Analysis Installandusetheapp,executingallfunctionsatleastonce. Datacanbegeneratedwhenenteredbytheuser,sentby theendpoint,orshippedwiththeapp. Thencompletethefollowing: • Checkbothinternalandexternallocalstorageforanyfilescreatedbytheapplicationthatcontainsensitivedata. • Identifydevelopmentfiles,backupfiles,andoldfilesthatshouldn’tbeincludedwithaproductionrelease. • Determine whether SQLite databases are available and whether they contain sensitive information. SQLite databasesarestoredin/data/data/<package-name>/databases. • IdentifyifSQLitedatabasesareencrypted. Ifso, determinehowthedatabasepasswordisgeneratedandstored andifthisissufficientlyprotectedasdescribedinthe“StoringaKey”sectionoftheKeystoreoverview. • Check Shared Preferences that are stored as XML files (in /data/data/<package-name>/shared_prefs) for sen- sitive information. Shared Preferences are insecure and unencrypted by default. Some apps might opt to use secure-preferencestoencryptthevaluesstoredinSharedPreferences. • Check the permissions of the files in /data/data/<package-name>. Only the user and group created when you installedtheapp(e.g.,u0_a82)shouldhaveuserread,write,andexecutepermissions(rwx). Otherusersshould nothavepermissiontoaccessfiles,buttheymayhaveexecutepermissionsfordirectories. • CheckfortheusageofanyFirebaseReal-timedatabasesandattempttoidentifyiftheyaremisconfiguredbymaking thefollowingnetworkcall: – https://_firebaseProjectName_.firebaseio.com/.json • Determine whether a Realm database is available in /data/data/<package-name>/files/, whether it is unen- crypted,andwhetheritcontainssensitiveinformation. Bydefault,thefileextensionisrealmandthefilenameis default. InspecttheRealmdatabasewiththeRealmBrowser. Testing Memory for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-10 MASVSV2: MASVS-STORAGE-2 Overview Analyzingmemorycanhelpdevelopersidentifytherootcausesofseveralproblems,suchasapplicationcrashes. However, itcanalsobeusedtoaccesssensitivedata. Thissectiondescribeshowtocheckfordatadisclosureviaprocessmemory. First identify sensitive information that is stored in memory. Sensitive assets have likely been loaded into memory at somepoint. Theobjectiveistoverifythatthisinformationisexposedasbrieflyaspossible. To investigate an application’s memory, you must first create a memory dump. You can also analyze the memory in real-time,e.g.,viaadebugger. Regardlessofyourapproach,memorydumpingisaveryerror-proneprocessintermsof verificationbecauseeachdumpcontainstheoutputofexecutedfunctions. Youmaymissexecutingcriticalscenarios. In addition,overlookingdataduringanalysisisprobableunlessyouknowthedata’sfootprint(eithertheexactvalueorthe dataformat). Forexample,iftheappencryptswitharandomlygeneratedsymmetrickey,youlikelywon’tbeabletospot itinmemoryunlessyoucanrecognizethekey’svalueinanothercontext. Therefore,youarebetteroffstartingwithstaticanalysis. Static Analysis Whenperformingstaticanalysistoidentifysensitivedatathatisexposedinmemory,youshould: • Trytoidentifyapplicationcomponentsandmapwheredataisused. • Makesurethatsensitivedataishandledbyasfewcomponentsaspossible. • Makesurethatobjectreferencesareproperlyremovedoncetheobjectcontainingthesensitivedataisnolonger needed. • Makesurethatgarbagecollectionisrequestedafterreferenceshavebeenremoved. 208\\n• Makesurethatsensitivedatagetsoverwrittenassoonasitisnolongerneeded. – Don’trepresentsuchdatawithimmutabledatatypes(suchasStringandBigInteger). – Avoidnon-primitivedatatypes(suchasStringBuilder). – Overwritereferencesbeforeremovingthem,outsidethefinalizemethod. – Payattentiontothird-partycomponents(librariesandframeworks). PublicAPIsaregoodindicators. Determine whetherthepublicAPIhandlesthesensitivedataasdescribedinthischapter. Thefollowingsectiondescribespitfallsofdataleakageinmemoryandbestpracticesforavoidingthem. Don’tuseimmutablestructures(e.g., StringandBigInteger)torepresentsecrets. Nullifyingthesestructureswillbe ineffective: thegarbagecollectormaycollectthem, buttheymayremainontheheapaftergarbagecollection. Never- theless, you should ask for garbage collection after every critical operation (e.g., encryption, parsing server responses thatcontainsensitiveinformation). Whencopiesoftheinformationhavenotbeenproperlycleaned(asexplainedbelow), yourrequestwillhelpreducethelengthoftimeforwhichthesecopiesareavailableinmemory. Toproperlycleansensitiveinformationfrommemory,storeitinprimitivedatatypes,suchasbyte-arrays(byte[])and char-arrays(char[]). Youshouldavoidstoringtheinformationinmutablenon-primitivedatatypes. Makesuretooverwritethecontentofthecriticalobjectoncetheobjectisnolongerneeded. Overwritingthecontentwith zeroesisonesimpleandverypopularmethod: ExampleinJava: byte[]secret =null; try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { if(null !=secret){ Arrays.fill(secret,(byte)0); } } ExampleinKotlin: valsecret:ByteArray?=null try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { if(null !=secret){ Arrays.fill(secret,0.toByte()) } } Thisdoesn’t,however,guaranteethatthecontentwillbeoverwrittenatruntime. Tooptimizethebytecode,thecompiler willanalyzeanddecidenottooverwritedatabecauseitwillnotbeusedafterwards(i.e.,itisanunnecessaryoperation). EvenifthecodeisinthecompiledDEX,theoptimizationmayoccurduringthejust-in-timeorahead-of-timecompilation intheVM. Thereisnosilverbulletforthisproblembecausedifferentsolutionshavedifferentconsequences. Forexample,youmay performadditionalcalculations(e.g., XORthedataintoadummybuffer), butyou’llhavenowaytoknowtheextentof thecompiler’soptimizationanalysis. Ontheotherhand, usingtheoverwrittendataoutsidethecompiler’sscope(e.g., serializingitinatempfile)guaranteesthatitwillbeoverwrittenbutobviouslyimpactsperformanceandmaintenance. Then,usingArrays.filltooverwritethedataisabadideabecausethemethodisanobvioushookingtarget(seethe chapter“TamperingandReverseEngineeringonAndroid”formoredetails). Thefinalissuewiththeaboveexampleisthatthecontentwasoverwrittenwithzeroesonly. Youshouldtrytooverwrite criticalobjectswithrandomdataorcontentfromnon-criticalobjects. Thiswillmakeitreallydifficulttoconstructscanners thatcanidentifysensitivedataonthebasisofitsmanagement. Belowisanimprovedversionofthepreviousexample: ExampleinJava: byte[]nonSecret =somePublicString.getBytes(\"ISO-8859-1\"); byte[]secret =null; try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { 209\\nif(null !=secret){ for(inti=0;i<secret.length;i++){ secret[i]=nonSecret[i%nonSecret.length]; } FileOutputStreamout =newFileOutputStream(\"/dev/null\"); out.write(secret); out.flush(); out.close(); } } ExampleinKotlin: valnonSecret:ByteArray =somePublicString.getBytes(\"ISO-8859-1\") valsecret:ByteArray?=null try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { if(null !=secret){ for(iinsecret.indices){ secret[i]=nonSecret[i%nonSecret.size] } valout=FileOutputStream(\"/dev/null\") out.write(secret) out.flush() out.close() } } Formoreinformation,takealookatSecurelyStoringSensitiveDatainRAM. Inthe“StaticAnalysis”section,wementionedtheproperwaytohandlecryptographickeyswhenyouareusingAndroid- KeyStoreorSecretKey. For a better implementation of SecretKey, look at the SecureSecretKey class below. Although the implementation is probably missing some boilerplate code that would make the class compatible with SecretKey, it addresses the main securityconcerns: • Nocross-contexthandlingofsensitivedata. Eachcopyofthekeycanbeclearedfromwithinthescopeinwhichit wascreated. • Thelocalcopyisclearedaccordingtotherecommendationsgivenabove. ExampleinJava: public class",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 86
  },
  "embedding": [
    -0.07048995792865753,
    -0.055220142006874084,
    -0.018573272973299026,
    0.018528535962104797,
    0.01756085641682148,
    0.018588563427329063,
    0.03936094418168068,
    -0.009750046767294407,
    0.01174236461520195,
    0.03721063956618309,
    0.04383425414562225,
    0.014773106202483177,
    0.07267933338880539,
    -0.028277818113565445,
    -0.017770450562238693,
    -0.056022416800260544,
    -0.03387594223022461,
    0.011052200570702553,
    -0.09238260239362717,
    0.08749940991401672,
    0.05331010743975639,
    -0.08591306954622269,
    0.01880950853228569,
    0.030130626633763313,
    0.03998721018433571,
    -0.025779912248253822,
    -0.04085803031921387,
    -0.008060942403972149,
    -0.07353372871875763,
    -0.0014556023525074124,
    -0.02435731515288353,
    0.03414307162165642,
    0.0040855612605810165,
    0.06454489380121231,
    0.013836541213095188,
    0.014329054392874241,
    0.014450312592089176,
    0.008320118300616741,
    -0.000642252154648304,
    -0.060630980879068375,
    -0.030981961637735367,
    -0.05202282965183258,
    -0.09128133207559586,
    0.10400613397359848,
    -0.07318002730607986,
    -0.011046304367482662,
    0.019022637978196144,
    -0.030276212841272354,
    -0.15441487729549408,
    0.03552309796214104,
    -0.004062720574438572,
    0.06541142612695694,
    0.005246029235422611,
    0.08538499474525452,
    -0.011636943556368351,
    -0.019941238686442375,
    -0.01733592338860035,
    0.07062971591949463,
    0.07843736559152603,
    0.028685346245765686,
    0.07372242212295532,
    0.03927203267812729,
    0.01895456574857235,
    0.013092677108943462,
    -0.026258030906319618,
    0.09346382319927216,
    -0.008645044639706612,
    -0.11063873767852783,
    0.06957072764635086,
    -0.03590313717722893,
    -0.015847481787204742,
    -0.009981565177440643,
    -0.0685553178191185,
    0.06346794962882996,
    0.015344065614044666,
    -0.007863478735089302,
    -0.006936310790479183,
    -0.03284461051225662,
    -0.016492897644639015,
    -0.11499600857496262,
    -0.0036596946883946657,
    -0.023929139599204063,
    0.06674213707447052,
    0.00117198983207345,
    0.03472425788640976,
    0.05372735112905502,
    -0.00673745758831501,
    -0.031002013012766838,
    0.048355650156736374,
    0.01014208234846592,
    0.0586235485970974,
    -0.019276924431324005,
    0.046225257217884064,
    -0.02706076018512249,
    0.030322162434458733,
    -0.06151784583926201,
    0.015242603607475758,
    -0.023905422538518906,
    -0.02624090574681759,
    -0.003454353427514434,
    -0.0196183193475008,
    0.043815333396196365,
    -0.0057196104899048805,
    -0.06811673939228058,
    0.027123253792524338,
    -0.0033160171005874872,
    0.01792638562619686,
    -0.04322316125035286,
    -0.038586776703596115,
    0.014519737102091312,
    -0.04468588903546333,
    0.037279050797224045,
    0.013951219618320465,
    -0.02740936353802681,
    0.001705617643892765,
    0.07199086248874664,
    -0.06333499401807785,
    0.03512093052268028,
    0.0685114860534668,
    0.05947981774806976,
    0.012377016246318817,
    0.025305690243840218,
    0.04554066061973572,
    -0.043706994503736496,
    -0.10791187733411789,
    -0.05613049864768982,
    -0.019891705363988876,
    2.0665652068988512e-32,
    -0.00827572587877512,
    -0.03728501871228218,
    -0.08294692635536194,
    -0.006145319901406765,
    0.013731752522289753,
    -0.02999035082757473,
    0.039424531161785126,
    0.05831076204776764,
    -0.05068989843130112,
    -0.03442858159542084,
    0.006902182940393686,
    0.05851937457919121,
    -0.010618926025927067,
    0.006191616412252188,
    0.01642565429210663,
    0.030474795028567314,
    0.0009759562672115862,
    0.03804226964712143,
    -0.008632304146885872,
    0.04454396292567253,
    0.016242740675807,
    0.023895524442195892,
    0.09052850306034088,
    0.017659148201346397,
    -0.014476862736046314,
    -0.005662734620273113,
    -0.03203300014138222,
    0.013088599778711796,
    0.10399685800075531,
    0.04719902202486992,
    -0.06630029529333115,
    -0.03514515608549118,
    -0.06064390018582344,
    -0.05778719484806061,
    0.04885829612612724,
    0.033892400562763214,
    0.06977958977222443,
    -0.0560171864926815,
    -0.025768687948584557,
    -0.047986432909965515,
    0.035979077219963074,
    -0.028368566185235977,
    -0.014815781265497208,
    -0.055225104093551636,
    0.023355402052402496,
    -0.05251441150903702,
    0.01097448356449604,
    0.004878216423094273,
    0.011522301472723484,
    0.11307161301374435,
    -0.03243686258792877,
    0.01666344329714775,
    -0.0006419512210413814,
    -0.11099868267774582,
    -0.08863211423158646,
    -0.0469445176422596,
    0.022608082741498947,
    -0.030843274667859077,
    0.07538443803787231,
    0.11435631662607193,
    -0.07341785728931427,
    -0.011049367487430573,
    0.04508787766098976,
    -0.04656093195080757,
    -0.03799514099955559,
    -0.028711754828691483,
    0.0032707294449210167,
    -0.10231354087591171,
    -0.0741405189037323,
    -0.023889487609267235,
    -0.03831887245178223,
    -0.02674809843301773,
    0.043950218707323074,
    0.034822192043066025,
    0.018181975930929184,
    -0.032423727214336395,
    -0.06632468849420547,
    -0.02664434351027012,
    0.005921694915741682,
    -0.06182009354233742,
    0.05420054867863655,
    0.044420961290597916,
    0.012640059925615788,
    0.02841566503047943,
    -0.09763820469379425,
    0.0122396694496274,
    -0.02044796757400036,
    -0.13566169142723083,
    -0.05489712953567505,
    0.03559814766049385,
    0.021100567653775215,
    0.004874685779213905,
    0.008240037597715855,
    -0.07790205627679825,
    -0.04794906824827194,
    -1.8804431619246105e-32,
    -0.004145458806306124,
    -0.06124711036682129,
    -0.048260461539030075,
    0.06815939396619797,
    -0.0019550537690520287,
    0.014759371057152748,
    -0.11722725629806519,
    0.006868722848594189,
    0.022454489022493362,
    -0.06208832934498787,
    -0.025936517864465714,
    -0.05775376409292221,
    0.037135373800992966,
    -0.08324118703603745,
    0.011364278383553028,
    -0.014715082943439484,
    0.03966174274682999,
    -0.018166564404964447,
    -0.02860654704272747,
    0.05510145425796509,
    0.04385761171579361,
    0.014171062037348747,
    -0.08319532126188278,
    0.09378930181264877,
    0.0912395566701889,
    0.06539718061685562,
    -0.052720796316862106,
    0.08901538699865341,
    0.051551807671785355,
    -0.06944340467453003,
    -0.030252831056714058,
    0.03629184886813164,
    -0.06469918042421341,
    -0.07529108226299286,
    -0.06914900243282318,
    -0.03577786684036255,
    -0.009450046345591545,
    0.021049993112683296,
    -0.10255282372236252,
    -0.012674441561102867,
    0.062318481504917145,
    0.02036893367767334,
    -0.011213339865207672,
    0.013156355358660221,
    0.006172520108520985,
    -0.010713436640799046,
    -0.01969500631093979,
    -0.02130231447517872,
    0.03367350995540619,
    0.06648893654346466,
    0.11302091181278229,
    -0.08508715033531189,
    -0.029587380588054657,
    0.013045967556536198,
    -0.006069924216717482,
    0.10021710395812988,
    -0.00019282007997389883,
    0.045237038284540176,
    2.8198010113555938e-05,
    -0.014579485170543194,
    0.03673194721341133,
    -0.0117571409791708,
    0.0837349146604538,
    0.05836031958460808,
    0.06961691379547119,
    -0.007778298109769821,
    0.006568259559571743,
    0.01773698627948761,
    -0.050045546144247055,
    0.05934392288327217,
    0.039946299046278,
    -0.08996126800775528,
    -0.029942745342850685,
    -0.07300101220607758,
    0.06400217115879059,
    -0.03459601476788521,
    0.006014959886670113,
    -0.05990511178970337,
    -0.0743819996714592,
    0.04038315266370773,
    0.03203028440475464,
    -0.004959052428603172,
    0.018121052533388138,
    0.037333980202674866,
    0.06607009470462799,
    -0.04770568385720253,
    -0.015367426909506321,
    -0.015674429014325142,
    -0.08712594211101532,
    -0.00661742128431797,
    -0.05681205913424492,
    -0.0592169389128685,
    -0.11580840498209,
    0.10157635807991028,
    0.09752728790044785,
    -6.762969206874914e-08,
    0.002519903937354684,
    0.0685001015663147,
    -0.07491499185562134,
    -0.022950967773795128,
    0.0761878713965416,
    -0.043077729642391205,
    0.028871633112430573,
    0.04497001692652702,
    -0.046521350741386414,
    -0.11482872813940048,
    0.05629982426762581,
    -0.041917476803064346,
    -0.019821425899863243,
    -0.043228890746831894,
    0.04267223924398422,
    0.024663815274834633,
    0.0013695473317056894,
    -0.007288490422070026,
    -0.06602805107831955,
    0.019624201580882072,
    0.01767144910991192,
    0.02160845696926117,
    -0.07756004482507706,
    -0.0635761246085167,
    0.018107084557414055,
    0.060539111495018005,
    0.07008525729179382,
    0.1136760264635086,
    0.04942860081791878,
    0.057762280106544495,
    -0.047600407153367996,
    -0.07239075750112534,
    0.13480088114738464,
    -0.03683929517865181,
    -0.05660512298345566,
    0.03890744969248772,
    -0.023598991334438324,
    -0.029060373082756996,
    0.024604221805930138,
    0.08601296693086624,
    0.06536095589399338,
    -0.01491721160709858,
    -0.02904753014445305,
    0.07182099670171738,
    -0.025691231712698936,
    -0.012207104824483395,
    -0.019150052219629288,
    0.10090623795986176,
    -0.014962630346417427,
    0.014182680286467075,
    -0.10839290171861649,
    -0.03121347911655903,
    -0.0732111856341362,
    0.07860312610864639,
    -0.04396703839302063,
    0.07401132583618164,
    0.027728872373700142,
    -0.008246888406574726,
    -0.007908054627478123,
    0.0042236424051225185,
    0.06592895090579987,
    -0.008218733593821526,
    0.018426228314638138,
    -0.024754444137215614
  ]
}