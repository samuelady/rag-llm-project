{
  "text": "Alternatively, if the attestation chain has any other root certificate, then Google does not make any claims about the security of the hardware. Althoughthekeyattestationprocesscanbeimplementedwithintheapplicationdirectly,itisrecommendedthatitshould beimplementedattheserver-sideforsecurityreasons. Thefollowingarethehigh-levelguidelinesforthesecureimple- mentationofKeyAttestation: • TheservershouldinitiatethekeyattestationprocessbycreatingarandomnumbersecurelyusingCSPRNG(Cryp- tographicallySecureRandomNumberGenerator)andthesameshouldbesenttotheuserasachallenge. • TheclientshouldcallthesetAttestationChallengeAPIwiththechallengereceivedfromtheserverandshould thenretrievetheattestationcertificatechainusingtheKeyStore.getCertificateChainmethod. • Theattestationresponseshouldbesenttotheserverfortheverificationandfollowingchecksshouldbeperformed fortheverificationofthekeyattestationresponse: – Verifythecertificatechain,uptotherootandperformcertificatesanitycheckssuchasvalidity,integrityand trustworthiness. ChecktheCertificateRevocationStatusListmaintainedbyGoogle,ifnoneofthecertificates inthechainwasrevoked. – CheckiftherootcertificateissignedwiththeGoogleattestationrootkeywhichmakestheattestationprocess trustworthy. – Extract the attestation certificate extension data, which appears within the first element of the certificate chain,andperformthefollowingchecks: ∗ Verifythattheattestationchallengeishavingthesamevaluewhichwasgeneratedattheserverwhile initiatingtheattestationprocess. ∗ Verifythesignatureinthekeyattestationresponse. ∗ VerifythesecurityleveloftheKeymaster,todetermineifthedevicehassecurekeystoragemechanism. Keymaster is a piece of software that runs in the security context and provides all the secure keystore operations. ThesecuritylevelwillbeoneofSoftware, TrustedEnvironmentorStrongBox. Theclient supports hardware-level key attestation if the security level is TrustedEnvironment or StrongBox and theattestationcertificatechaincontainsarootcertificatesignedwiththeGoogleattestationrootkey. ∗ Verifytheclient’sstatustoensureafullchainoftrust-verifiedbootkey,lockedbootloaderandverified bootstate. ∗ Additionally,youcanverifythekeypair’sattributessuchaspurpose,accesstime,authenticationrequire- ment,etc. Note,ifforanyreasonthatprocessfails,itmeansthatthekeyisnotinsecurityhardware. Thatdoesnotmeanthat thekeyiscompromised. ThetypicalexampleofAndroidKeystoreattestationresponselookslikethis: { \"fmt\":\"android-key\", \"authData\":\"9569088f1ecee3232954035dbd10d7cae391305a2751b559bb8fd7cbb229bd...\", \"attStmt\":{ \"alg\":-7, \"sig\":\"304402202ca7a8cfb6299c4a073e7e022c57082a46c657e9e53...\", \"x5c\":[ \"308202ca30820270a003020102020101300a06082a8648ce3d040302308188310b30090603550406130...\", \"308202783082021ea00302010202021001300a06082a8648ce3d040302308198310b300906035504061...\", \"3082028b30820232a003020102020900a2059ed10e435b57300a06082a8648ce3d040302308198310b3...\" ] } } IntheaboveJSONsnippet,thekeyshavethefollowingmeaning: • fmt: Attestationstatementformatidentifier 195\\n• authData: Itdenotestheauthenticatordatafortheattestation • alg: ThealgorithmthatisusedfortheSignature • sig: Signature • x5c: Attestationcertificatechain Note: The sig is generated by concatenating authData and clientDataHash (challenge sent by the server) and signingthroughthecredentialprivatekeyusingthealgsigningalgorithm. Thesameisverifiedattheserver-side byusingthepublickeyinthefirstcertificate. Formoreunderstandingontheimplementationguidelines,youcanrefertoGoogleSampleCode. For the security analysis perspective, the analysts may perform the following checks for the secure implementation of KeyAttestation: • Checkifthekeyattestationistotallyimplementedontheclient-side. Inwhichcase,itcanbemoreeasilybypassed bytamperingtheapplication,methodhooking,etc. • Checkiftheserverusesrandomchallengewhileinitiatingthekeyattestation. Asfailingtodothatwouldleadto insecureimplementationthusmakingitvulnerabletoreplayattacks. Also,checkspertainingtotherandomnessof thechallengeshouldbeperformed. • Checkiftheserververifiestheintegrityofthekeyattestationresponse. • Check if the server performs basic checks such as integrity verification, trust verification, validity, etc. on the certificatesinthechain. Secure Key Import into Keystore Android 9 (API level 28) adds the ability to import keys securely into the AndroidKeystore. First, AndroidKeystore generatesakeypairusingPURPOSE_WRAP_KEY,whichshouldalsobeprotectedwithanattestationcertificate. Thispair aims to protect the Keys being imported to AndroidKeystore. The encrypted keys are generated as ASN.1-encoded message in the SecureKeyWrapper format, which also contains a description of the ways the imported key is allowed to be used. The keys are then decrypted inside the AndroidKeystore hardware belonging to the specific device that generatedthewrappingkey,sothattheyneverappearasplaintextinthedevice’shostmemory. 196\\nFigure 2: Secure key import into Keystore ExampleinJava: KeyDescription ::=SEQUENCE { keyFormatINTEGER, authorizationListAuthorizationList } SecureKeyWrapper ::=SEQUENCE { wrapperFormatVersionINTEGER, encryptedTransportKeyOCTET_STRING, initializationVectorOCTET_STRING, keyDescriptionKeyDescription, secureKeyOCTET_STRING, tagOCTET_STRING } ThecodeabovepresentsthedifferentparameterstobesetwhengeneratingtheencryptedkeysintheSecureKeyWrapper format. ChecktheAndroiddocumentationonWrappedKeyEntryformoredetails. WhendefiningtheKeyDescriptionAuthorizationList,thefollowingparameterswillaffecttheencryptedkeyssecurity: • Thealgorithmparameterspecifiesthecryptographicalgorithmwithwhichthekeyisused • ThekeySizeparameterspecifiesthesize,inbits,ofthekey,measuringinthenormalwayforthekey’salgorithm • Thedigestparameterspecifiesthedigestalgorithmsthatmaybeusedwiththekeytoperformsigningandverifi- cationoperations 197\\nOlder KeyStore Implementations OlderAndroidversions don’t includeKeyStore, but theydoincludethe KeyStoreinterface fromJCA(Java Cryptography Architecture). YoucanuseKeyStoresthatimplementthisinterfacetoensurethesecrecyandintegrityofkeysstoredwith KeyStore;BouncyCastleKeyStore(BKS)isrecommended. Allimplementationsarebasedonthefactthatfilesarestored onthefilesystem;allfilesarepassword-protected. Tocreateone,usetheKeyStore.getInstance(\"BKS\",\"BC\")method, where “BKS” is the KeyStore name (BouncyCastle Keystore) and “BC” is the provider (BouncyCastle). You can also use SpongyCastleasawrapperandinitializetheKeyStoreasfollows: KeyStore.getInstance(\"BKS\", \"SC\"). BeawarethatnotallKeyStoresproperlyprotectthekeysstoredintheKeyStorefiles. Storing a Cryptographic Key: Techniques TomitigateunauthorizeduseofkeysontheAndroiddevice,AndroidKeyStoreletsappsspecifyauthorizedusesoftheir keyswhengeneratingorimportingthekeys. Oncemade,authorizationscannotbechanged. StoringaKey-frommostsecuretoleastsecure: • thekeyisstoredinhardware-backedAndroidKeyStore • allkeysarestoredonserverandareavailableafterstrongauthentication • themasterkeyisstoredontheserverandusedtoencryptotherkeys,whicharestoredinAndroidSharedPreferences • thekeyisderivedeachtimefromastronguserprovidedpassphrasewithsufficientlengthandsalt • thekeyisstoredinthesoftwareimplementationofAndroidKeyStore • themasterkeyisstoredinthesoftwareimplementationofAndroidKeystoreandusedtoencryptotherkeys,which arestoredinSharedPreferences • [notrecommended]allkeysarestoredinSharedPreferences • [notrecommended]hardcodedencryptionkeysinthesourcecode • [notrecommended]predictableobfuscationfunctionorkeyderivationfunctionbasedonstableattributes • [notrecommended]storedgeneratedkeysinpublicplaces(like/sdcard/) Storing Keys Using Hardware-backed Android KeyStore You can use the hardware-backed Android KeyStore if the device is running Android 7.0 (API level 24) and above with availablehardwarecomponent(TrustedExecutionEnvironment(TEE)oraSecureElement(SE)).Youcanevenverifythat the keys are hardware-backed by using the guidelines provided for the secure implementation of Key Attestation. If a hardwarecomponentisnotavailableand/orsupportforAndroid6.0(APIlevel23)andbelowisrequired,thenyoumight wanttostoreyourkeysonaremoteserverandmakethemavailableafterauthentication. Storing Keys on the Server Itispossibletosecurelystorekeysonakeymanagementserver,howevertheappneedstobeonlinetodecryptthedata. Thismightbealimitationforcertainmobileappusecasesandshouldbecarefullythoughtthrough,asthisbecomespart ofthearchitectureoftheappandmighthighlyimpactusability. Deriving Keys from User Input Derivingakeyfromauserprovidedpassphraseisacommonsolution(dependingonwhichAndroidAPIlevelyouuse), butitalsoimpactsusability,mightaffecttheattacksurfaceandcouldintroduceadditionalweaknesses. Eachtimetheapplicationneedstoperformacryptographicoperation,theuser’spassphraseisneeded. Eithertheuser ispromptedforiteverytime, whichisn’tanidealuserexperience,orthepassphraseiskeptinmemoryaslongasthe userisauthenticated. Keepingthepassphraseinmemoryisnotabest-practice,asanycryptographicmaterialmustonly bekeptinmemorywhileitisbeingused. Zeroingoutakeyisoftenaverychallengingtaskasexplainedin“Cleaningout KeyMaterial”. Additionally,considerthatkeysderivedfromapassphrasehavetheirownweaknesses. Forinstance,thepasswordsor passphrases might be reused by the user or easy to guess. Please refer to the Testing Cryptography chapter for more information. 198\\nCleaning out Key Material The key material should be cleared out from memory",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 82
  },
  "embedding": [
    -0.12500154972076416,
    -0.035528600215911865,
    0.029468847438693047,
    -0.06364790350198746,
    0.00909913145005703,
    -0.055346205830574036,
    0.03065280243754387,
    -0.04419549182057381,
    -0.06338606774806976,
    -0.023020312190055847,
    0.041861679404973984,
    -0.010660882107913494,
    0.07808082550764084,
    0.005087593104690313,
    0.004040188156068325,
    -0.0025791102088987827,
    -0.006347289774566889,
    0.026677042245864868,
    -0.009330298751592636,
    0.00034072992275469005,
    -0.008425832726061344,
    -0.028901901096105576,
    0.014322142116725445,
    0.021431002765893936,
    -0.032500166445970535,
    -0.0854126438498497,
    0.036157090216875076,
    -0.021876342594623566,
    -0.027258938178420067,
    -0.020434698089957237,
    0.030516421422362328,
    -0.020290546119213104,
    0.02357407473027706,
    0.08608748763799667,
    0.012729622423648834,
    0.0061342353001236916,
    0.08389370143413544,
    0.02125433087348938,
    -0.01865854673087597,
    -0.0650663822889328,
    0.00375870568677783,
    -0.09372556209564209,
    -0.05443998798727989,
    0.003163190558552742,
    0.0023006347473710775,
    0.03740302845835686,
    -0.04371068999171257,
    -0.07256738096475601,
    -0.049530018121004105,
    0.020061660557985306,
    0.007282863836735487,
    -0.03730689361691475,
    0.03578868880867958,
    0.022770659998059273,
    -0.16096162796020508,
    -0.02714456059038639,
    -0.0022884015925228596,
    -0.02954980731010437,
    0.10304192453622818,
    0.08402013778686523,
    0.06454049795866013,
    -0.0025179788935929537,
    -0.033182960003614426,
    -0.0010954616591334343,
    -0.04099138826131821,
    0.0916714295744896,
    0.09477510303258896,
    -0.08560915291309357,
    0.0127938287332654,
    0.0036768903955817223,
    0.07760366052389145,
    -0.0590100921690464,
    0.022108208388090134,
    -0.003215436590835452,
    0.039354100823402405,
    0.02226882427930832,
    -0.09933020919561386,
    -0.05200911685824394,
    0.03426208719611168,
    -0.11690488457679749,
    0.012018063105642796,
    -0.02519981935620308,
    0.05673326179385185,
    0.04025536775588989,
    -0.06841936707496643,
    0.05861562862992287,
    0.009674916975200176,
    0.008717229589819908,
    0.038468893617391586,
    -0.01551902387291193,
    0.03774481266736984,
    -0.05944494903087616,
    -0.02989257127046585,
    -0.034560225903987885,
    0.07100342214107513,
    0.02340356633067131,
    -0.009150518104434013,
    -0.09422817826271057,
    -0.0005231698742136359,
    -0.015477853827178478,
    0.0025364418979734182,
    -0.017658421769738197,
    -0.021320341154932976,
    -0.11272159218788147,
    0.03103663958609104,
    0.08781316876411438,
    -0.055899478495121,
    -0.05791130289435387,
    0.08401519060134888,
    0.040563393384218216,
    0.03608172386884689,
    0.058974433690309525,
    -0.003981545101851225,
    -0.046179208904504776,
    -0.00039328396087512374,
    0.024362239986658096,
    -0.09221993386745453,
    0.050142399966716766,
    0.10579472780227661,
    -0.016261329874396324,
    0.0030386236030608416,
    0.022826340049505234,
    0.018123527988791466,
    -0.00013950918219052255,
    -0.039969827979803085,
    -0.053918782621622086,
    -0.07928459346294403,
    2.5221541973093345e-32,
    0.042491063475608826,
    0.03182840719819069,
    0.04157291352748871,
    -0.040890052914619446,
    0.027659742161631584,
    0.06185288354754448,
    0.06538952887058258,
    0.04911309480667114,
    -0.02143394947052002,
    0.004046543501317501,
    -0.022518744692206383,
    0.08177328109741211,
    -0.03856724873185158,
    -0.10474289953708649,
    0.05966292321681976,
    0.07499989867210388,
    -0.06486469507217407,
    0.0021144605707377195,
    -0.02882177196443081,
    0.03782254084944725,
    -0.012044280767440796,
    -0.04611530900001526,
    0.03775202855467796,
    -0.010806502774357796,
    -0.00468174135312438,
    -0.06385626643896103,
    -0.07388055324554443,
    0.03847230225801468,
    -0.010205975733697414,
    0.00871244166046381,
    -0.06108208745718002,
    -0.08239038288593292,
    -0.06284525990486145,
    0.03213853761553764,
    0.035181086510419846,
    0.0477992445230484,
    0.0060719083994627,
    -0.03672162443399429,
    -0.006578688509762287,
    -0.026674523949623108,
    0.002778818132355809,
    -0.041956014931201935,
    0.006346588954329491,
    -0.06542105227708817,
    -0.0014807855477556586,
    -0.022497843950986862,
    -0.07368238270282745,
    -0.06789570301771164,
    0.08070650696754456,
    0.07719240337610245,
    -0.031825438141822815,
    -0.01156756840646267,
    0.020560821518301964,
    -0.09932374209165573,
    -0.06335494667291641,
    -0.02793274074792862,
    -0.04002169147133827,
    0.02571231685578823,
    0.04696016386151314,
    0.07632922381162643,
    -0.06391522288322449,
    -0.02997910976409912,
    -0.012145633809268475,
    -0.005399253219366074,
    -0.12257515639066696,
    -0.036769770085811615,
    0.0034388909116387367,
    -0.07736360281705856,
    -0.10407830774784088,
    0.006880192086100578,
    -0.06990844756364822,
    -0.013145440258085728,
    -0.029724860563874245,
    0.013418401591479778,
    -0.05305716395378113,
    -0.05126427859067917,
    -0.017007406800985336,
    0.10393622517585754,
    -0.00039800736703909934,
    -0.028469623997807503,
    0.009516584686934948,
    0.016498945653438568,
    0.06721181422472,
    0.09916038066148758,
    -0.016939230263233185,
    0.04161417856812477,
    0.004836807027459145,
    -0.05193973332643509,
    -0.07055404037237167,
    0.014414454810321331,
    -0.0632261261343956,
    0.029607314616441727,
    -0.0632520392537117,
    0.0668591558933258,
    -0.008349066600203514,
    -2.5811607811111486e-32,
    -0.12153203785419464,
    -0.055799700319767,
    0.008470953442156315,
    0.06079202517867088,
    -0.020286642014980316,
    -0.038740500807762146,
    0.0350937619805336,
    0.02686091884970665,
    -0.025843676179647446,
    0.048648275434970856,
    0.1192719042301178,
    0.026759576052427292,
    0.019447708502411842,
    -0.0559023842215538,
    0.041697707027196884,
    -0.04527564346790314,
    -0.041384194046258926,
    0.00923706404864788,
    0.007475601509213448,
    0.011586977168917656,
    0.06413132697343826,
    0.06618647277355194,
    0.018329957500100136,
    0.054089516401290894,
    0.01056588999927044,
    0.030148141086101532,
    -0.030216995626688004,
    0.0207680631428957,
    0.09157420694828033,
    0.04116488993167877,
    0.11676419526338577,
    0.06163426861166954,
    -0.046300217509269714,
    0.05348582565784454,
    0.0017226580530405045,
    -0.12574903666973114,
    0.006364266853779554,
    -0.006934979930520058,
    0.0066200061701238155,
    -0.01120752189308405,
    0.057579122483730316,
    0.009635277092456818,
    0.03185848519206047,
    -0.0077978456392884254,
    0.03843282163143158,
    0.019162999466061592,
    0.08256818354129791,
    -0.048412442207336426,
    -0.005110470578074455,
    0.0008415028569288552,
    0.09157641232013702,
    -0.03887118771672249,
    0.029594166204333305,
    0.015343444421887398,
    -0.014839325100183487,
    0.05385150760412216,
    0.020105116069316864,
    0.028885073959827423,
    -0.026440296322107315,
    -0.07448206096887589,
    0.04424059018492699,
    0.0049452949315309525,
    -0.007404484320431948,
    0.04768449813127518,
    0.004043397027999163,
    0.039387576282024384,
    -0.018330229446291924,
    0.020907241851091385,
    -0.009469639509916306,
    0.029360976070165634,
    -0.0365082323551178,
    -0.06156621500849724,
    -0.01219506561756134,
    -0.1039353460073471,
    0.018694493919610977,
    0.010386524721980095,
    0.020675696432590485,
    -0.08603490144014359,
    -0.03538791835308075,
    -0.05735108628869057,
    0.032947104424238205,
    -0.0032118745148181915,
    -0.06315474957227707,
    -0.006180656608194113,
    0.05903845280408859,
    -0.09557855874300003,
    0.04134238138794899,
    -0.005946553777903318,
    0.05068213492631912,
    0.023093853145837784,
    -0.05054318159818649,
    0.0694173276424408,
    -0.07908686995506287,
    -0.020913735032081604,
    0.01640811376273632,
    -8.114140115367263e-08,
    0.02397761680185795,
    0.07303456962108612,
    -0.03044159524142742,
    -0.012407495640218258,
    0.04505833238363266,
    -0.025228211656212807,
    0.06280002743005753,
    -0.06109408661723137,
    -0.06142507493495941,
    -0.043581344187259674,
    0.012595041655004025,
    -0.02153308130800724,
    -0.038978010416030884,
    -0.03607926517724991,
    -0.018312446773052216,
    -0.02832881174981594,
    -0.05996347591280937,
    0.007953118532896042,
    -0.01980055868625641,
    -0.0020507636945694685,
    -0.04474388062953949,
    -0.05355731025338173,
    -0.012810906395316124,
    0.03420986607670784,
    -0.04684505611658096,
    0.04012225568294525,
    0.1625567525625229,
    0.0037962361238896847,
    0.06126601621508598,
    0.04153292253613472,
    -0.09285906702280045,
    -0.07329967617988586,
    -0.04248148202896118,
    -0.048107847571372986,
    -0.020138558000326157,
    0.06670457869768143,
    -0.04215705394744873,
    -0.021868914365768433,
    0.060929231345653534,
    0.030425695702433586,
    -0.09865046292543411,
    0.052942123264074326,
    0.0520346537232399,
    0.0629744753241539,
    -0.004087474662810564,
    -0.01551985926926136,
    -0.08161067217588425,
    0.03066500648856163,
    0.07196225970983505,
    0.06974522024393082,
    -0.09329292923212051,
    -0.08928627520799637,
    -0.031188128516077995,
    0.03060680255293846,
    -0.10174867510795593,
    -0.029007280245423317,
    0.001456789905205369,
    0.003164386609569192,
    -0.01735185645520687,
    -0.03219165280461311,
    0.106380894780159,
    -0.07200755178928375,
    0.07503706216812134,
    -0.002020440297201276
  ]
}