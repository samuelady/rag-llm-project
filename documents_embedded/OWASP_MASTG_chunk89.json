{
  "text": "their enforcement. For example, one check could require that the app run only on Android6.0(APIlevel23)oramorerecentversion,closingtheappordisplayingawarningiftheAndroidversionisless than6.0. Checkthesourcecodeforfunctionsthatimplementthepolicyanddeterminewhetheritcanbebypassed. YoucanimplementchecksontheAndroiddevicebyqueryingSettings.Secureforsystempreferences. DeviceAdminis- trationAPIofferstechniquesforcreatingapplicationsthatcanenforcepasswordpoliciesanddeviceencryption. Dynamic Analysis The dynamic analysis depends on the checks enforced by the app and their expected behavior. If the checks can be bypassed,theymustbevalidated. 218\\nAndroid Cryptographic APIs Overview Inthechapter“MobileAppCryptography”,weintroducedgeneralcryptographybestpracticesanddescribedtypicalissues thatcanoccurwhencryptographyisusedincorrectly. Inthischapter,we’llgointomoredetailonAndroid’scryptography APIs. We’llshowhowtoidentifyusageofthoseAPIsinthesourcecodeandhowtointerpretcryptographicconfigurations. Whenreviewingcode,makesuretocomparethecryptographicparametersusedwiththecurrentbestpractices,aslinked inthisguide. WecanidentifykeycomponentsofcryptographysystemonAndroid: • SecurityProvider • KeyStore-seethesectionKeyStoreinthe“TestingDataStorage”chapter • KeyChain-seethesectionKeyChaininthe“TestingDataStorage”chapter AndroidcryptographyAPIsarebasedontheJavaCryptographyArchitecture(JCA).JCAseparatestheinterfacesandimple- mentation,makingitpossibletoincludeseveralsecurityprovidersthatcanimplementsetsofcryptographicalgorithms. MostoftheJCAinterfacesandclassesaredefinedinthejava.security.*andjavax.crypto.*packages. Inaddition, thereareAndroidspecificpackagesandroid.security.*andandroid.security.keystore.*. KeyStoreandKeyChainprovideAPIsforstoringandusingkeys(behindthescene,KeyChainAPIusesKeyStoresystem). These systems allow to administer the full lifecycle of the cryptographic keys. Requirements and guidance for imple- mentationofcryptographickeymanagementcanbefoundinKeyManagementCheatSheet. Wecanidentifyfollowing phases: • generatingakey • usingakey • storingakey • archivingakey • deletingakey Pleasenotethatstoringofakeyisanalyzedinthechapter“TestingDataStorage”. These phases are managed by the Keystore/KeyChain system. However how the system works depends on how the application developer implemented it. For the analysis process you should focus on functions which are used by the applicationdeveloper. Youshouldidentifyandverifythefollowingfunctions: • Keygeneration • Randomnumbergeneration • Keyrotation AppsthattargetmodernAPIlevels,wentthroughthefollowingchanges: • ForAndroid7.0(APIlevel24)andabovetheAndroidDeveloperblogshowsthat: – Itisrecommendedtostopspecifyingasecurityprovider. Instead,alwaysuseapatchedsecurityprovider. – The support for the Crypto provider has dropped and the provider is deprecated. The same applies to its SHA1PRNGforsecurerandom. • ForAndroid8.1(APIlevel27)andabovetheDeveloperDocumentationshowsthat: – Conscrypt,knownasAndroidOpenSSL,ispreferredaboveusingBouncyCastleandithasnewimplementations: AlgorithmParameters:GCM , KeyGenerator:AES, KeyGenerator:DESEDE, KeyGenerator:HMACMD5, KeyGen- erator:HMACSHA1, KeyGenerator:HMACSHA224, KeyGenerator:HMACSHA256, KeyGenerator:HMACSHA384, KeyGenerator:HMACSHA512,SecretKeyFactory:DESEDE,andSignature:NONEWITHECDSA. – You should not use the IvParameterSpec.class anymore for GCM, but use the GCMParameterSpec.class instead. – SocketshavechangedfromOpenSSLSocketImpltoConscryptFileDescriptorSocket,andConscryptEngi- neSocket. – SSLSessionwithnullparametersgiveaNullPointerException. 219\\n– Youneedtohavelargeenougharraysasinputbytesforgeneratingakeyotherwise,anInvalidKeySpecEx- ceptionisthrown. – IfaSocketreadisinterrupted,yougetaSocketException. • ForAndroid9(APIlevel28)andabovetheAndroidDeveloperBlogshowsevenmorechanges: – YougetawarningifyoustillspecifyasecurityproviderusingthegetInstancemethodandyoutargetany APIbelow28. IfyoutargetAndroid9(APIlevel28)orabove,yougetanerror. – TheCryptosecurityproviderisnowremoved. CallingitwillresultinaNoSuchProviderException. • ForAndroid10(APIlevel29)theDeveloperDocumentationlistsallnetworksecuritychanges. General Recommendations Thefollowinglistofrecommendationsshouldbeconsideredduringappexamination: • Youshouldensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. • Youshouldensurethatsecurityproviderhasthelatestupdates-Updatingsecurityprovider. • Youshouldstopspecifyingasecurityproviderandusethedefaultimplementation(AndroidOpenSSL,Conscrypt). • YoushouldstopusingCryptosecurityprovideranditsSHA1PRNGastheyaredeprecated. • YoushouldspecifyasecurityprovideronlyfortheAndroidKeystoresystem. • YoushouldstopusingPassword-basedencryptioncipherswithoutIV. • YoushoulduseKeyGenParameterSpecinsteadofKeyPairGeneratorSpec. Security Provider Androidreliesonthejava.security.ProviderclasstoimplementJavaSecurityservices. Theseprovidersarecrucialto ensuresecurenetworkcommunicationsandsecureotherfunctionalitieswhichdependoncryptography. ThelistofsecurityprovidersincludedinAndroidvariesbetweenversionsofAndroidandtheOEM-specificbuilds. Some securityproviderimplementationsinolderversionsarenowknowntobelesssecureorvulnerable. Thus,Androidappli- cationsshouldnotonlychoosethecorrectalgorithmsandprovideagoodconfiguration,insomecasestheyshouldalso payattentiontothestrengthoftheimplementationsinthelegacysecurityproviders. Youcanlistthesetofexistingsecurityprovidersusingfollowingcode: StringBuilderbuilder =newStringBuilder(); for(Providerprovider :Security.getProviders()){ builder.append(\"provider:\") .append(provider.getName()) .append(\"\") .append(provider.getVersion()) .append(\"(\") .append(provider.getInfo()) .append(\")\\n\"); } Stringproviders =builder.toString(); //nowdisplaythestringonthescreenorinthelogsfordebugging. ThisistheoutputforAndroid9(APIlevel28)runninginanemulatorwithGooglePlayAPIs: provider:AndroidNSSP1.0(AndroidNetworkSecurityPolicyProvider) provider:AndroidOpenSSL1.0(Android'sOpenSSL-backedsecurityprovider) provider:CertPathProvider1.0(ProviderofCertPathBuilderandCertPathVerifier) provider:AndroidKeyStoreBCWorkaround1.0(AndroidKeyStoresecurityprovidertoworkaroundBouncyCastle) provider:BC1.57(BouncyCastleSecurityProviderv1.57) provider:HarmonyJSSE1.0(HarmonyJSSEProvider) provider:AndroidKeyStore1.0(AndroidKeyStoresecurityprovider) Updating security provider Keeping up-to-date and patched component is one of security principles. The same applies to provider. Application shouldcheckifusedsecurityproviderisup-to-dateandifnot,updateit. 220\\nOlder Android versions ForsomeapplicationsthatsupportolderversionsofAndroid(e.g.: onlyusedversionslowerthanAndroid7.0(APIlevel 24)),bundlinganup-to-datelibrarymaybetheonlyoption. Conscryptlibraryisagoodchoiceinthissituationtokeep thecryptographyconsistentacrossthedifferentAPIlevelsandavoidhavingtoimportBouncyCastlewhichisaheavier library. ConscryptforAndroidcanbeimportedthisway: dependencies { implementation 'org.conscrypt:conscrypt-android:last_version' } Next,theprovidermustberegisteredbycalling: Security.addProvider(Conscrypt.newProvider()) Key Generation The Android SDK allows you to specify how a key should be generated, and under which circumstances it can be used. Android6.0(APIlevel23)introducedtheKeyGenParameterSpecclassthatcanbeusedtoensurethecorrectkeyusage intheapplication. Forexample: StringkeyAlias =\"MySecretKey\"; KeyGenParameterSpeckeyGenParameterSpec =newKeyGenParameterSpec.Builder(keyAlias, KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_CBC) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7) .setRandomizedEncryptionRequired(true) .build(); KeyGeneratorkeyGenerator =KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, \"AndroidKeyStore\"); keyGenerator.init(keyGenParameterSpec); SecretKeysecretKey =keyGenerator.generateKey(); TheKeyGenParameterSpecindicatesthatthekeycanbeusedforencryptionanddecryption,butnotforotherpurposes, suchassigningorverifying. Itfurtherspecifiestheblockmode(CBC),padding(PKCS#7), andexplicitlyspecifiesthat randomizedencryptionisrequired(thisisthedefault). Next,weenterAndroidKeyStoreasthenameoftheproviderin theKeyGenerator.getInstancecalltoensurethatthekeysarestoredintheAndroidKeyStore. GCMisanotherAESblockmodethatprovidesadditionalsecuritybenefitsoverother,oldermodes. Inadditiontobeing cryptographicallymoresecure,italsoprovidesauthentication. WhenusingCBC(andothermodes),authenticationwould needtobeperformedseparately,usingHMACs(seethe“TamperingandReverseEngineeringonAndroid”chapter). Note thatGCMistheonlymodeofAESthatdoesnotsupportpadding. Attemptingtousethegeneratedkeyinviolationoftheabovespecwouldresultinasecurityexception. Here’sanexampleofusingthatkeytoencrypt: StringAES_MODE =KeyProperties.KEY_ALGORITHM_AES +\"/\"+KeyProperties.BLOCK_MODE_CBC +\"/\"+KeyProperties.ENCRYPTION_PADDING_PKCS7; KeyStoreAndroidKeyStore =AndroidKeyStore.getInstance(\"AndroidKeyStore\"); //byte[]input Keykey =AndroidKeyStore.getKey(keyAlias,null); Ciphercipher =Cipher.getInstance(AES_MODE); cipher.init(Cipher.ENCRYPT_MODE,key); byte[]encryptedBytes =cipher.doFinal(input); byte[]iv=cipher.getIV(); //saveboththeIVandtheencryptedBytes BoththeIV(initializationvector)andtheencryptedbytesneedtobestored;otherwisedecryptionisnotpossible. Here’showthatciphertextwouldbedecrypted. Theinputistheencryptedbytearrayandivistheinitializationvector fromtheencryptionstep: 221\\n//byte[]input //byte[]iv Keykey =AndroidKeyStore.getKey(AES_KEY_ALIAS,null); Ciphercipher =Cipher.getInstance(AES_MODE); IvParameterSpecparams =newIvParameterSpec(iv); cipher.init(Cipher.DECRYPT_MODE,key,params); byte[]result =cipher.doFinal(input); SincetheIVisrandomlygeneratedeachtime,itshouldbesavedalongwiththeciphertext(encryptedBytes)inorderto decryptitlater. Prior to Android 6.0 (API level 23), AES key generation was not supported. As a result, many implementations chose to use RSA and generated a public-private key pair for asymmetric encryption using KeyPairGeneratorSpec or used SecureRandomtogenerateAESkeys. Here’sanexampleofKeyPairGeneratorandKeyPairGeneratorSpecusedtocreatetheRSAkeypair: DatestartDate =Calendar.getInstance().getTime(); CalendarendCalendar =Calendar.getInstance(); endCalendar.add(Calendar.YEAR,1); DateendDate =endCalendar.getTime(); KeyPairGeneratorSpeckeyPairGeneratorSpec =newKeyPairGeneratorSpec.Builder(context) .setAlias(RSA_KEY_ALIAS) .setKeySize(4096) .setSubject(newX500Principal(\"CN=\" +RSA_KEY_ALIAS)) .setSerialNumber(BigInteger.ONE) .setStartDate(startDate) .setEndDate(endDate) .build(); KeyPairGeneratorkeyPairGenerator =KeyPairGenerator.getInstance(\"RSA\", \"AndroidKeyStore\"); keyPairGenerator.initialize(keyPairGeneratorSpec); KeyPairkeyPair =keyPairGenerator.generateKeyPair(); This sample creates the RSA key pair with a key size of 4096-bit (i.e. modulus size). Elliptic Curve (EC) keys can also begeneratedinasimilarway. HoweverasofAndroid11(APIlevel30),AndroidKeyStoredoesnotsupportencryptionor decryptionwithECkeys. Theycanonlybeusedforsignatures. AsymmetricencryptionkeycanbegeneratedfromthepassphrasebyusingthePasswordBasedKeyDerivationFunction version 2 (PBKDF2). This cryptographic protocol is designed to generate cryptographic keys, which can be",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 89
  },
  "embedding": [
    -0.02032487839460373,
    0.022119449451565742,
    -0.010006222873926163,
    -0.08068880438804626,
    0.04872428998351097,
    -0.06198744475841522,
    -0.04351729527115822,
    -0.025922734290361404,
    0.03327254205942154,
    0.005142250098288059,
    -0.004603130742907524,
    -0.012258430011570454,
    0.05769426003098488,
    -0.040912386029958725,
    -0.015224541537463665,
    -0.045364368706941605,
    0.035391829907894135,
    0.01824255846440792,
    -0.07693193107843399,
    0.02584146149456501,
    0.02210848405957222,
    -0.01757385954260826,
    0.07316973060369492,
    0.010050269775092602,
    0.013175238855183125,
    -0.05813964083790779,
    0.004642445128411055,
    -0.03831559792160988,
    0.03264334052801132,
    0.048086535185575485,
    -0.00392898777499795,
    0.035165973007678986,
    -0.000714245019480586,
    0.09153594076633453,
    -0.050271641463041306,
    -0.038736242800951004,
    -0.0010525055695325136,
    -0.015922898426651955,
    -0.02259673923254013,
    0.016503777354955673,
    -0.08120997250080109,
    -0.01178561057895422,
    -0.07185082137584686,
    0.04514081031084061,
    -0.04393571615219116,
    -0.04910474643111229,
    -0.006807961035519838,
    0.011779014952480793,
    -0.08270538598299026,
    0.04139584302902222,
    0.05303302779793739,
    0.03405877202749252,
    0.00923050008714199,
    0.01619231328368187,
    -0.08992385119199753,
    -0.06291072070598602,
    -0.05130595341324806,
    0.05748510733246803,
    0.06767164915800095,
    0.12018173933029175,
    0.03765388950705528,
    0.023930564522743225,
    0.002494917018339038,
    0.048779238015413284,
    0.0023554957006126642,
    0.09333939105272293,
    0.04371793195605278,
    -0.04142571613192558,
    0.1192028820514679,
    -0.010327612981200218,
    -0.08521100878715515,
    -0.013534351252019405,
    0.03713417798280716,
    -0.03853669762611389,
    -0.03581596538424492,
    0.03627254441380501,
    -0.042434968054294586,
    -0.028561696410179138,
    -0.03647656366229057,
    -0.18308025598526,
    0.023520823568105698,
    -0.054744020104408264,
    -0.031358152627944946,
    0.09768325835466385,
    0.011596007272601128,
    0.021633584052324295,
    -0.008453206159174442,
    -0.009662316180765629,
    0.06278242915868759,
    0.06961657106876373,
    0.07721437513828278,
    0.061167389154434204,
    -0.052164796739816666,
    -0.07445291429758072,
    0.0640832856297493,
    -0.015506490133702755,
    -0.0750935971736908,
    -0.04815053567290306,
    -0.011149384081363678,
    0.020180752500891685,
    -0.028104187920689583,
    -0.01189080998301506,
    -0.0423632450401783,
    -0.017564984038472176,
    0.10413425415754318,
    -0.004656830802559853,
    0.061540476977825165,
    -0.024279868230223656,
    0.017058497294783592,
    0.09548066556453705,
    0.04300999268889427,
    -0.01167560275644064,
    0.09241367131471634,
    0.0020693601109087467,
    0.03391750156879425,
    0.041842903941869736,
    -0.042043861001729965,
    0.05342938005924225,
    -0.001492744660936296,
    0.06622357666492462,
    0.03791871294379234,
    -0.01908387616276741,
    0.05230605602264404,
    -0.09201665222644806,
    -0.030469723045825958,
    0.011619433760643005,
    -0.022070804610848427,
    1.7014318292152876e-32,
    0.0012945497874170542,
    0.0021856350358575583,
    0.022181592881679535,
    -0.001653329934924841,
    -0.11556371301412582,
    -0.05392826348543167,
    0.036810502409935,
    0.07069417834281921,
    -0.0157316941767931,
    0.003883776254951954,
    -0.0009481071610935032,
    0.06789927929639816,
    -0.02715519815683365,
    -0.039573851972818375,
    0.11080702394247055,
    0.012610401026904583,
    0.002630572533234954,
    -0.02386200986802578,
    0.0024595302529633045,
    0.0721781775355339,
    0.031941916793584824,
    -0.08602464944124222,
    0.024438058957457542,
    -0.034245021641254425,
    -0.023339111357927322,
    0.03966856375336647,
    0.047783225774765015,
    0.035640597343444824,
    -0.025954438373446465,
    0.019341181963682175,
    -0.09552142024040222,
    -0.06405104696750641,
    -0.01908332295715809,
    -0.0015549642266705632,
    0.025759432464838028,
    0.004238157998770475,
    -0.04831918701529503,
    -0.009389643557369709,
    0.02950059249997139,
    -0.08577653020620346,
    -0.018882473930716515,
    -0.03998367860913277,
    -0.07649416476488113,
    0.009475486353039742,
    0.008290120400488377,
    -0.05710797384381294,
    -0.05916158854961395,
    -0.036937166005373,
    -0.017023013904690742,
    0.03401738032698631,
    0.017340313643217087,
    0.04259322211146355,
    -0.02535974606871605,
    -0.08991950750350952,
    -0.08851931244134903,
    -0.06742626428604126,
    -0.04371994733810425,
    -0.04867374524474144,
    -0.027055837213993073,
    0.03867519646883011,
    -0.03990576043725014,
    -0.0435015931725502,
    -0.05135833099484444,
    -0.009796537458896637,
    -0.041233405470848083,
    0.01644918881356716,
    -0.007225228473544121,
    -0.11439594626426697,
    -0.05894242599606514,
    0.06028904393315315,
    -0.05193966254591942,
    -0.04149753600358963,
    0.03810387849807739,
    0.012437660247087479,
    -0.01135602779686451,
    0.03519488498568535,
    0.025941554456949234,
    0.04691467806696892,
    -0.037985846400260925,
    -0.0610601045191288,
    0.030980205163359642,
    0.02499130181968212,
    0.08396122604608536,
    0.019234616309404373,
    -0.06651972979307175,
    -0.019773080945014954,
    -0.01202069129794836,
    -0.11159881949424744,
    -0.06333347409963608,
    0.06466612219810486,
    -0.0005705327494069934,
    -0.0018123353365808725,
    -0.017057670280337334,
    -0.0127898920327425,
    -0.006615209858864546,
    -1.6972741056964292e-32,
    -0.052454203367233276,
    -0.03464460000395775,
    -0.024117156863212585,
    0.0023355609737336636,
    -0.0013807270443066955,
    -0.056508101522922516,
    -0.08314327150583267,
    0.02895064651966095,
    0.028336407616734505,
    -0.06902209669351578,
    -0.011354449205100536,
    -0.0505971685051918,
    0.01724494807422161,
    -0.0378141812980175,
    0.02866133488714695,
    -0.00878580566495657,
    -0.040451377630233765,
    -0.045772697776556015,
    0.07638335973024368,
    0.10777569562196732,
    0.007905029691755772,
    0.08457009494304657,
    -0.020381666719913483,
    0.052162960171699524,
    0.025893574580550194,
    0.002889409428462386,
    -0.02083343267440796,
    0.006683858577162027,
    0.039246998727321625,
    -0.06535729020833969,
    0.0395955853164196,
    -0.009813874028623104,
    -0.027044543996453285,
    -0.012237351387739182,
    -0.03225281462073326,
    -0.06473173201084137,
    -0.004158076364547014,
    0.013021405786275864,
    0.021217385306954384,
    0.041903331875801086,
    0.06209342181682587,
    -0.004184148274362087,
    0.004853288177400827,
    0.0037012812681496143,
    0.00328022800385952,
    -0.08063404262065887,
    -0.027783440425992012,
    0.07027215510606766,
    -0.014681372791528702,
    -0.01906747743487358,
    0.13457661867141724,
    0.021811749786138535,
    -0.003541705897077918,
    0.057871270924806595,
    0.03435211256146431,
    0.11155454814434052,
    0.08379442244768143,
    0.004181171301752329,
    -0.009915085509419441,
    0.027926316484808922,
    0.06709674000740051,
    -0.04507524147629738,
    0.020634673535823822,
    0.038232769817113876,
    0.0012466643238440156,
    0.06336051970720291,
    0.05628803372383118,
    -0.014196322299540043,
    0.01086975634098053,
    0.1225595474243164,
    0.048403654247522354,
    -0.10733825713396072,
    -0.07574695348739624,
    -0.012881900183856487,
    0.019927769899368286,
    0.02468687668442726,
    -0.010426247492432594,
    -0.10021927207708359,
    -0.09846103191375732,
    -0.0537688285112381,
    -0.016116904094815254,
    0.030524177476763725,
    -0.006085003726184368,
    0.04600123316049576,
    0.02574104629456997,
    -0.07320660352706909,
    -0.03600389510393143,
    -0.03148822858929634,
    -0.0007903581135906279,
    0.06030881032347679,
    -0.021690379828214645,
    -0.06755845248699188,
    -0.10971561074256897,
    -0.017692361027002335,
    -0.06281791627407074,
    -6.187390511058766e-08,
    0.03731246292591095,
    -0.03305559977889061,
    0.026606090366840363,
    -0.006670961156487465,
    0.08767727017402649,
    0.016008807346224785,
    0.013991577550768852,
    -0.05343620851635933,
    0.04614916816353798,
    -0.08291023224592209,
    0.040092915296554565,
    -0.06210800260305405,
    -0.0909569039940834,
    -0.04920585826039314,
    0.03643370419740677,
    0.017953980714082718,
    -0.0315968357026577,
    0.031939104199409485,
    -0.08524106442928314,
    0.027300065383315086,
    -0.08156081289052963,
    -0.0004874297301284969,
    -0.12180846184492111,
    0.022798782214522362,
    0.06086810305714607,
    -0.018847085535526276,
    0.010028203018009663,
    0.033573050051927567,
    0.02368631586432457,
    0.07279446721076965,
    -0.0036439087707549334,
    0.005383338313549757,
    0.06535003334283829,
    -0.0997752696275711,
    -0.03313861042261124,
    0.17928044497966766,
    0.006916713435202837,
    -0.07770886272192001,
    0.056537024676799774,
    0.04251677915453911,
    -0.03786860406398773,
    0.057823918759822845,
    -0.0032125653233379126,
    0.016232619062066078,
    0.0023750532418489456,
    -0.039430730044841766,
    0.013025759719312191,
    -0.02799989841878414,
    0.0477437898516655,
    0.07561686635017395,
    -0.05701316148042679,
    -0.016949716955423355,
    -0.06592381000518799,
    0.012451971881091595,
    -0.020481189712882042,
    -0.0009149874676950276,
    0.016972756013274193,
    -0.06106115132570267,
    0.045804813504219055,
    0.010846994817256927,
    0.10037709027528763,
    0.04277946799993515,
    0.11246851831674576,
    -0.09010360389947891
  ]
}