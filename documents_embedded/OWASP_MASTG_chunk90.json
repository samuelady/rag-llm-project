{
  "text": ".setEndDate(endDate) .build(); KeyPairGeneratorkeyPairGenerator =KeyPairGenerator.getInstance(\"RSA\", \"AndroidKeyStore\"); keyPairGenerator.initialize(keyPairGeneratorSpec); KeyPairkeyPair =keyPairGenerator.generateKeyPair(); This sample creates the RSA key pair with a key size of 4096-bit (i.e. modulus size). Elliptic Curve (EC) keys can also begeneratedinasimilarway. HoweverasofAndroid11(APIlevel30),AndroidKeyStoredoesnotsupportencryptionor decryptionwithECkeys. Theycanonlybeusedforsignatures. AsymmetricencryptionkeycanbegeneratedfromthepassphrasebyusingthePasswordBasedKeyDerivationFunction version 2 (PBKDF2). This cryptographic protocol is designed to generate cryptographic keys, which can be used for cryptographypurpose. Inputparametersforthealgorithmareadjustedaccordingtoweakkeygenerationfunctionsection. Thecodelistingbelowillustrateshowtogenerateastrongencryptionkeybasedonapassword. public static SecretKey generateStrongAESKey(char[]password,intkeyLength) { //Initializeobjectsandvariablesforlateruse intiterationCount =10000; intsaltLength =keyLength /8; SecureRandomrandom =newSecureRandom(); //Generatethesalt byte[]salt =newbyte[saltLength]; random.nextBytes(salt); KeySpeckeySpec =newPBEKeySpec(password.toCharArray(),salt,iterationCount,keyLength); SecretKeyFactorykeyFactory =SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\"); byte[]keyBytes =keyFactory.generateSecret(keySpec).getEncoded(); return newSecretKeySpec(keyBytes,\"AES\"); } Theabovemethodrequiresacharacterarraycontainingthepasswordandtheneededkeylengthinbits,forinstancea128 or256-bitAESkey. Wedefineaniterationcountof10,000roundswhichwillbeusedbythePBKDF2algorithm. Increasing the number of iterations significantly increases the workload for a brute-force attack on the password, however it can affectperformanceasmorecomputationalpowerisrequiredforkeyderivation. Wedefinethesaltsizeequaltothekey lengthdividedby8inordertoconvertfrombitstobytesandweusetheSecureRandomclasstorandomlygenerateasalt. Thesaltneedstobekeptconstanttoensurethesameencryptionkeyisgeneratedtimeaftertimeforthesamesupplied password. NotethatyoucanstorethesaltprivatelyinSharedPreferences. Itisrecommendedtoexcludethesaltfrom theAndroidbackupmechanismtopreventsynchronizationincaseofhigherriskdata. 222\\nNote that if you take a rooted device or a patched (e.g. repackaged) application into account as a threat to the data,itmightbebettertoencryptthesaltwithakeythatisplacedintheAndroidKeystore. ThePassword-Based Encryption(PBE)keyisgeneratedusingtherecommendedPBKDF2WithHmacSHA1algorithm,untilAndroid8.0(API level26). ForhigherAPIlevels,itisbesttousePBKDF2withHmacSHA256,whichwillendupwithalongerhashvalue. Note: thereisawidespreadfalsebelievethattheNDKshouldbeusedtohidecryptographicoperationsandhardcoded keys. However,usingthismechanismisnoteffective. Attackerscanstillusetoolstofindthemechanismusedandmake dumpsofthekeyinmemory. Next,thecontrolflowcanbeanalyzedwithe.g.radare2andthekeysextractedwiththe help of Frida or the combination of both: r2frida (see sections “Disassembling Native Code”, “Memory Dump” and “In- MemorySearch”inthechapter“TamperingandReverseEngineeringonAndroid”formoredetails). FromAndroid7.0(API level24)onward,itisnotallowedtouseprivateAPIs,instead: publicAPIsneedtobecalled,whichfurtherimpactsthe effectivenessofhidingitawayasdescribedintheAndroidDevelopersBlog Random number generation Cryptographyrequiressecurepseudorandomnumbergeneration(PRNG).StandardJavaclassesasjava.util.Random donotprovidesufficientrandomnessandinfactmaymakeitpossibleforanattackertoguessthenextvaluethatwillbe generated,andusethisguesstoimpersonateanotheruseroraccesssensitiveinformation. Ingeneral,SecureRandomshouldbeused. However,iftheAndroidversionsbelowAndroid4.4(APIlevel19)aresupported, additionalcareneedstobetakeninordertoworkaroundthebuginAndroid4.1-4.3(APIlevel16-18)versionsthatfailed toproperlyinitializethePRNG. MostdevelopersshouldinstantiateSecureRandomviathedefaultconstructorwithoutanyarguments. Otherconstructors areformoreadvancedusesand,ifusedincorrectly,canleadtodecreasedrandomnessandsecurity. ThePRNGprovider backingSecureRandomusestheSHA1PRNGfromAndroidOpenSSL(Conscrypt)provider. Testing Symmetric Cryptography Platform: android MASVSV1: MSTG-CRYPTO-1 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Identify all the instances of symmetric key encryption in code and look for any mechanism which loads or provides a symmetrickey. Youcanlookfor: • symmetricalgorithms(suchasDES,AES,etc.) • specifications for a key generator (such as KeyGenParameterSpec, KeyPairGeneratorSpec, KeyPairGenerator, KeyGenerator,KeyProperties,etc.) • classesimportingjava.security.*,javax.crypto.*,android.security.*,android.security.keystore.* Checkalsothelistofcommoncryptographicconfigurationissues. Foreachidentifiedinstanceverifyiftheusedsymmetrickeys: • arenotpartoftheapplicationresources • cannotbederivedfromknownvalues • arenothardcodedincode Foreachhardcodedsymmetrickey, verifythatisnotusedinsecurity-sensitivecontextsastheonlymethodofencryp- tion. 223\\nAsanexampleweillustratehowtolocatetheuseofahardcodedencryptionkey. Firstdisassembleanddecompilethe apptoobtainJavacode,e.g.byusingjadx. NowsearchthefilesfortheusageoftheSecretKeySpecclass,e.g.bysimplyrecursivelygreppingonthemorusingjadx searchfunction: grep -r\"SecretKeySpec\" ThiswillreturnallclassesusingtheSecretKeySpecclass. Nowexaminethosefilesandtracewhichvariablesareusedto passthekeymaterial. Thefigurebelowshowstheresultofperformingthisassessmentonaproductionreadyapplication. WecanclearlylocatetheuseofastaticencryptionkeythatishardcodedandinitializedinthestaticbytearrayEncrypt. keyBytes. Dynamic Analysis Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. Testing the Configuration of Cryptographic Standard Algorithms Platform: android MASVSV1: MSTG-CRYPTO-2,MSTG-CRYPTO-3,MSTG-CRYPTO-4 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Identifyalltheinstancesofthecryptographicprimitivesincode. Identifyallcustomcryptographyimplementations. You canlookfor: • classesCipher,Mac,MessageDigest,Signature 224\\n• interfacesKey,PrivateKey,PublicKey,SecretKey • functionsgetInstance,generateKey • exceptionsKeyStoreException,CertificateException,NoSuchAlgorithmException • classeswhichusesjava.security.*,javax.crypto.*,android.security.*andandroid.security.keystore. *packages. IdentifythatallcallstogetInstanceusedefaultproviderofsecurityservicesbynotspecifyingit(itmeansAndroidOpenSSL akaConscrypt). ProvidercanonlybespecifiedinKeyStorerelatedcode(inthatsituationKeyStoreshouldbeprovided asprovider). Ifotherproviderisspecifieditshouldbeverifiedaccordingtosituationandbusinesscase(i.e.Android APIversion),andprovidershouldbeexaminedagainstpotentialvulnerabilities. Ensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. Lookatinsecureand deprecatedalgorithmsandcommonconfigurationissues. Dynamic Analysis Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. Testing Random Number Generation Platform: android MASVSV1: MSTG-CRYPTO-6 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Identifyalltheinstancesofrandomnumbergeneratorsandlookforeithercustomorwell-knowninsecureclasses. For instance, java.util.Randomproducesanidenticalsequenceofnumbersforeachgivenseedvalue; consequently, the sequenceofnumbersispredictable. Insteadawell-vettedalgorithmshouldbechosenthatiscurrentlyconsideredtobe strongbyexpertsinthefield,andawell-testedimplementationswithadequatelengthseedsshouldbeused. IdentifyallinstancesofSecureRandomthatarenotcreatedusingthedefaultconstructor. Specifyingtheseedvaluemay reducerandomness. Prefertheno-argumentconstructorofSecureRandomthatusesthesystem-specifiedseedvalueto generatea128-byte-longrandomnumber. Ingeneral,ifaPRNGisnotadvertisedasbeingcryptographicallysecure(e.g.java.util.Random),thenitisprobablya statisticalPRNGandshouldnotbeusedinsecurity-sensitivecontexts. Pseudo-randomnumbergeneratorscanproduce predictablenumbersifthegeneratorisknownandtheseedcanbeguessed. A128-bitseedisagoodstartingpointfor producinga“randomenough”number. Onceanattackerknowswhattypeofweakpseudo-randomnumbergenerator(PRNG)isused,itcanbetrivialtowritea proof-of-concepttogeneratethenextrandomvaluebasedonpreviouslyobservedones,asitwasdoneforJavaRandom. In case of very weak custom random generators it may be possible to observe the pattern statistically. Although the recommendedapproachwouldanywaybetodecompiletheAPKandinspectthealgorithm(seeStaticAnalysis). Ifyouwanttotestforrandomness,youcantrytocapturealargesetofnumbersandcheckwiththeBurp’ssequencerto seehowgoodthequalityoftherandomnessis. Dynamic Analysis Youcanusemethodtracingonthementionedclassesandmethodstodetermineinput/outputvaluesbeingused. 225\\nTesting the Purposes of Keys Platform: android MASVSV1: MSTG-CRYPTO-5 MASVSV2: MASVS-CRYPTO-2 Overview Static Analysis Identifyallinstanceswherecryptographyisused. Youcanlookfor: • classesCipher,Mac,MessageDigest,Signature • interfacesKey,PrivateKey,PublicKey,SecretKey • functionsgetInstance,generateKey • exceptionsKeyStoreException,CertificateException,NoSuchAlgorithmException • classesimportingjava.security.*,javax.crypto.*,android.security.*,android.security.keystore.* Foreachidentifiedinstance,identifyitspurposeanditstype. Itcanbeused: • forencryption/decryption-toensuredataconfidentiality • forsigning/verifying-toensureintegrityofdata(aswellasaccountabilityinsomecases) • formaintenance-toprotectkeysduringcertainsensitiveoperations(suchasbeingimportedtotheKeyStore) Additionally,youshouldidentifythebusinesslogicwhichusesidentifiedinstancesofcryptography. Duringverificationthefollowingchecksshouldbeperformed: • areallkeysusedaccordingtothepurposedefinedduringitscreation? (itisrelevanttoKeyStorekeys,whichcan haveKeyPropertiesdefined) • forasymmetrickeys,istheprivatekeybeingexclusivelyusedforsigningandthepublickeyencryption? • aresymmetrickeysusedformultiplepurposes? Anewsymmetrickeyshouldbegeneratedifit’susedinadifferent context. • iscryptographyusedaccordingtoitsbusinesspurpose? Dynamic Analysis Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. 226\\nAndroid Local Authentication Overview During local authentication, an app authenticates the user against credentials stored locally on the device. In other words, the user “unlocks” the app or some inner",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 90
  },
  "embedding": [
    0.012473107315599918,
    -0.006444938480854034,
    -0.02074160799384117,
    -0.051607128232717514,
    -0.057370640337467194,
    0.015648379921913147,
    -0.12812882661819458,
    0.06733542680740356,
    0.01321655698120594,
    -0.005814307369291782,
    0.029420852661132812,
    -0.00960412435233593,
    0.05847793444991112,
    -0.05834772065281868,
    0.06321512162685394,
    -0.004415765404701233,
    -0.06424283981323242,
    0.03899334743618965,
    -0.06781458854675293,
    0.02846001647412777,
    0.10447023808956146,
    -0.06741068512201309,
    0.023403596132993698,
    -0.020273784175515175,
    0.01559247262775898,
    -0.0032926350831985474,
    0.03492485731840134,
    -0.010189712047576904,
    0.016532052308321,
    0.013248136267066002,
    0.08381105214357376,
    -0.01842544600367546,
    0.02158757857978344,
    0.05961913987994194,
    -0.04816411808133125,
    0.041832588613033295,
    -0.01196293905377388,
    0.010028150863945484,
    0.04479094594717026,
    0.022459452971816063,
    -0.05938338115811348,
    -0.015431941486895084,
    -0.05496705695986748,
    0.03646163269877434,
    -0.008349413052201271,
    -0.005743434652686119,
    0.007860999554395676,
    0.005795040167868137,
    -0.10278143733739853,
    0.022016532719135284,
    0.02003496326506138,
    0.0895480066537857,
    -0.01009119488298893,
    0.012838950380682945,
    -0.11170495301485062,
    -0.016620852053165436,
    -0.05677814036607742,
    0.07782898843288422,
    0.06300262361764908,
    0.022586874663829803,
    0.047815557569265366,
    0.002570769051089883,
    -0.02018648199737072,
    -0.03561174497008324,
    -0.10829553008079529,
    0.024188704788684845,
    0.08449522405862808,
    -0.15032248198986053,
    0.07608352601528168,
    -0.01492196973413229,
    -0.01273390930145979,
    -0.0499432198703289,
    0.00041990316822193563,
    0.026236286386847496,
    -0.03882816806435585,
    0.06948871165513992,
    -0.06808031350374222,
    0.03163490816950798,
    -0.052086472511291504,
    -0.03079494647681713,
    -0.015552843920886517,
    -0.08758123219013214,
    -0.02596523053944111,
    0.045109719038009644,
    0.038103241473436356,
    0.022313326597213745,
    0.042225468903779984,
    0.011174660176038742,
    -0.01564243622124195,
    0.0831272080540657,
    0.009104963392019272,
    0.04649319127202034,
    -0.006184081081300974,
    -0.026334786787629128,
    0.08468525111675262,
    0.022046001628041267,
    -0.05276837944984436,
    -0.030593181028962135,
    -0.015568569302558899,
    0.021962227299809456,
    0.0007530908915214241,
    0.05023778975009918,
    -0.10228854417800903,
    -0.057995837181806564,
    0.10763069987297058,
    0.0019939783960580826,
    -0.030122719705104828,
    -0.012485678307712078,
    -0.04620056226849556,
    0.056992705911397934,
    0.027087394148111343,
    -0.027214201167225838,
    0.028121452778577805,
    0.0012196417665109038,
    0.0294729545712471,
    0.1299963891506195,
    -0.07184020429849625,
    0.03342156484723091,
    0.02975059114396572,
    0.081400565803051,
    0.028612060472369194,
    -0.039292968809604645,
    -0.03601039946079254,
    -0.02018861286342144,
    -0.10304810106754303,
    0.05139196664094925,
    -0.04743598401546478,
    1.5229944316227537e-32,
    0.01029755175113678,
    0.038581859320402145,
    0.021887751296162605,
    -0.02784021571278572,
    -0.06145475059747696,
    0.0913807824254036,
    -0.010277869179844856,
    0.021839862689375877,
    0.003709083190187812,
    -0.12338878959417343,
    -0.04996063560247421,
    -0.07705843448638916,
    -0.002736717462539673,
    -0.051395826041698456,
    0.05927284061908722,
    -0.03546566143631935,
    -0.013718876987695694,
    0.030266353860497475,
    0.03601889684796333,
    -0.01793731562793255,
    0.03171836584806442,
    -0.0741061270236969,
    0.01996447890996933,
    -0.010104420594871044,
    -0.0319613516330719,
    0.029368240386247635,
    0.06822147220373154,
    0.050840381532907486,
    0.005147418472915888,
    -0.005221993662416935,
    -0.027764003723859787,
    -0.027805333957076073,
    -0.07123178243637085,
    -0.0440240204334259,
    0.018425194546580315,
    -0.016302259638905525,
    0.03730062022805214,
    -0.0338486023247242,
    -0.030407195910811424,
    -0.07199965417385101,
    -0.011342190206050873,
    -0.002422669902443886,
    -0.0079718716442585,
    0.013767226599156857,
    -0.0004897687467746437,
    -0.0554971769452095,
    -0.017356250435113907,
    0.058070842176675797,
    0.06851942092180252,
    0.04670234024524689,
    -0.04848267883062363,
    -0.0009422998991794884,
    0.01642737165093422,
    -0.12453014403581619,
    -0.03254638612270355,
    -0.1003991886973381,
    -0.03140229359269142,
    0.019669683650135994,
    -0.011569947004318237,
    0.019224608317017555,
    0.021637270227074623,
    -0.0065981000661849976,
    0.06725135445594788,
    0.006744493264704943,
    0.0005161989247426391,
    -0.0022148266434669495,
    0.036144040524959564,
    -0.039977751672267914,
    -0.03346084803342819,
    -0.00010329159704269841,
    -1.3190261597628705e-05,
    -0.03655814379453659,
    0.021868981420993805,
    0.07160106301307678,
    -0.06827565282583237,
    -0.03048926591873169,
    0.06298819184303284,
    0.01248646154999733,
    0.07689700275659561,
    -0.08506543934345245,
    -0.026250043883919716,
    0.08836627751588821,
    0.049041714519262314,
    -0.027982592582702637,
    -0.017271365970373154,
    0.007500627543777227,
    -0.04585603252053261,
    -0.025206103920936584,
    0.03664904832839966,
    -0.019005106762051582,
    0.0035537169314920902,
    -0.015720024704933167,
    -0.005441543646156788,
    0.03140817955136299,
    -0.015391691587865353,
    -1.4427334405901341e-32,
    0.0023473300971090794,
    -0.028812270611524582,
    -0.060627542436122894,
    0.04747585579752922,
    0.05550108104944229,
    0.04595817252993584,
    -0.07089146226644516,
    0.048991672694683075,
    -0.015491597354412079,
    -0.026976723223924637,
    0.021274087950587273,
    -0.03766878321766853,
    0.18290482461452484,
    -0.10191712528467178,
    0.06021999195218086,
    -0.08321156352758408,
    0.038770515471696854,
    0.027617963030934334,
    0.0493437796831131,
    0.003697943640872836,
    -0.0205538272857666,
    -0.027610810473561287,
    -0.0032451925799250603,
    0.05899365246295929,
    0.0893569365143776,
    -0.0017302511259913445,
    -0.0064373076893389225,
    0.10102157294750214,
    -0.04752836003899574,
    -0.018804680556058884,
    0.028755472972989082,
    0.037017885595560074,
    -0.08437749743461609,
    -0.01625770889222622,
    -0.1161070391535759,
    -0.0418228954076767,
    -0.02747528627514839,
    -0.05655659735202789,
    0.057777289301157,
    0.02894623577594757,
    -0.028951849788427353,
    -0.026321738958358765,
    0.06244783475995064,
    0.009454158134758472,
    0.02818196825683117,
    -0.056041914969682693,
    0.1057930514216423,
    0.03661798685789108,
    0.009991652332246304,
    -0.06816349923610687,
    0.08635027706623077,
    -0.011971300467848778,
    -0.056765951216220856,
    -0.00014237876166589558,
    0.017939886078238487,
    0.07485632598400116,
    -0.011353340931236744,
    0.07401469349861145,
    0.005478003993630409,
    -0.08147522062063217,
    0.013311504386365414,
    -0.023001203313469887,
    0.07828047126531601,
    0.06054575741291046,
    0.008208726532757282,
    -0.024643385782837868,
    0.05430561304092407,
    -0.009618019685149193,
    -0.06469471007585526,
    0.06903241574764252,
    0.07446553558111191,
    -0.0009422179427929223,
    -0.02875763736665249,
    0.041569601744413376,
    0.05857409909367561,
    -0.028232909739017487,
    -0.04481815919280052,
    0.02576795406639576,
    -0.017266232520341873,
    -0.11325841397047043,
    -0.011864808388054371,
    0.10274025797843933,
    0.020937856286764145,
    -0.007333450950682163,
    0.045582808554172516,
    -0.01583615317940712,
    0.012958921492099762,
    0.019240837544202805,
    -0.08543341606855392,
    0.036703579127788544,
    -0.06176092103123665,
    -0.051798392087221146,
    -0.09522344917058945,
    0.09641057997941971,
    0.08138817548751831,
    -6.115575956755492e-08,
    0.08137600868940353,
    0.0675155520439148,
    -0.056144487112760544,
    -0.006782487500458956,
    0.058907266706228256,
    -0.04115312919020653,
    -0.016236303374171257,
    -0.009510006755590439,
    0.06206701323390007,
    -0.1098659411072731,
    -0.0014937185915187001,
    -0.02396365813910961,
    -0.026448950171470642,
    0.025790836662054062,
    0.02226382866501808,
    -0.0022307855542749166,
    -0.02660459838807583,
    0.04297833517193794,
    -0.03056325390934944,
    -0.01827135495841503,
    -0.015176654793322086,
    -0.10233649611473083,
    0.0025276101659983397,
    -0.024995649233460426,
    0.07175219058990479,
    0.04217718914151192,
    0.023694360628724098,
    0.11987050622701645,
    0.07063475996255875,
    -0.03340371325612068,
    -0.01616440899670124,
    -0.058862216770648956,
    0.06595524400472641,
    -0.10603320598602295,
    -0.05205274745821953,
    0.06733210384845734,
    -0.0050970446318387985,
    -0.009893406182527542,
    -0.0032590434420853853,
    0.06360938400030136,
    -0.024126295000314713,
    -0.061664510518312454,
    -0.045959074050188065,
    0.004624504595994949,
    -0.061594974249601364,
    -0.023150073364377022,
    0.017558367922902107,
    0.07641832530498505,
    -0.08512359857559204,
    0.09711691737174988,
    -0.04381776973605156,
    -0.07215604186058044,
    -0.008795217610895634,
    -0.08922822028398514,
    -0.06622348725795746,
    0.027861349284648895,
    -0.05599820986390114,
    -0.007781461346894503,
    0.04583822935819626,
    -0.02374059520661831,
    0.047191914170980453,
    0.028709566220641136,
    -0.018576832488179207,
    -0.024434439837932587
  ]
}