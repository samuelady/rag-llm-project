{
  "text": "prototype and test debug builds of your applications during the development process,butactuallyitisnotanemulator. Differencebetweenasimulatorandanemulatorispreviouslydiscussedin “Emulation-basedDynamicAnalysis”section. Whiledevelopinganddebugginganapplication,theXcodetoolchaingeneratesx86code,whichcanbeexecutedinthe iOS simulator. However, for a release build, only ARM code is generated (incompatible with the iOS simulator). That’s why applications downloaded from the Apple App Store cannot be used for any kind of application analysis on the iOS simulator. 341\\nCorellium CorelliumisacommercialtoolwhichoffersvirtualiOSdevicesrunningactualiOSfirmware,beingtheonlypubliclyavail- able iOS emulator ever. Since it is a proprietary product, not much information is available about the implementation. Corelliumhasnocommunitylicensesavailable,thereforewewon’tgointomuchdetailregardingitsuse. Corellium allows you to launch multiple instances of a device (jailbroken or not) which are accessible as local devices (withasimpleVPNconfiguration). Ithastheabilitytotakeandrestoresnapshotsofthedevicestate,andalsooffersa convenientweb-basedshelltothedevice. Finallyandmostimportantly,duetoits“emulator”nature,youcanexecute applicationsdownloadedfromtheAppleAppStore,enablinganykindofapplicationanalysisasyouknowitfromrealiOS (jailbroken)devices. NotethatinordertoinstallanIPAonCorelliumdevicesithastobeunencryptedandsignedwithavalidAppledeveloper certificate. Seemoreinformationhere. Unicorn Unicornisalightweight,multi-architectureCPUemulatorframeworkbasedonQEMUandgoesbeyonditbyaddinguseful features especially made for CPU emulation. Unicorn provides the basic infrastructure needed to execute processor instructions. InthissectionwewilluseUnicorn’sPythonbindingstosolvetheUnCrackableAppforiOSLevel1challenge. TouseUnicorn’sfullpower,wewouldneedtoimplementallthenecessaryinfrastructurewhichgenerallyisreadilyavail- ablefromtheoperatingsystem,e.g.binaryloader,linkerandotherdependenciesoruseanotherhigherlevelframeworks such as Qiling which leverages Unicorn to emulate CPU instructions, but understands the OS context. However, this is superfluousforthisverylocalizedchallengewhereonlyexecutingasmallpartofthebinarywillsuffice. Whileperformingmanualanalysisin“ReviewingDisassembledNativeCode”section,wedeterminedthatthefunctionat address0x1000080d4isresponsiblefordynamicallygeneratingthesecretstring. Aswe’reabouttosee,allthenecessary codeisprettymuchself-containedinthebinary,makingthisaperfectscenariotouseaCPUemulatorlikeUnicorn. 342\\nIfweanalyzethatfunctionandthesubsequentfunctioncalls,wewillobservethatthereisnoharddependencyonany externallibraryandneitherit’sperforminganysystemcalls. Theonlyaccessexternaltothefunctionsoccursforinstance ataddress0x1000080f4,whereavalueisbeingstoredtoaddress0x10000dbf0,whichmapstothe__datasection. Therefore, in order to correctly emulate this section of the code, apart from the __text section (which contains the instructions)wealsoneedtoloadthe__datasection. TosolvethechallengeusingUnicornwewillperformthefollowingsteps: • Get the ARM64 version of the binary by running lipo -thin arm64 <app_binary> -output uncrackable.arm64 (ARMv7canbeusedaswell). • Extractthe__textand__datasectionfromthebinary. • Createandmapthememorytobeusedasstackmemory. • Creatememoryandloadthe__textand__datasection. • Executethebinarybyprovidingthestartandendaddress. • Finally,dumpthereturnvaluefromthefunction,whichinthiscaseisoursecretstring. To extract the content of __text and __data section from the Mach-O binary we will useLIEF, which provides a conve- nientabstractiontomanipulatemultipleexecutablefileformats. Beforeloadingthesesectionstomemory,weneedto determinetheirbaseaddresses,e.g.byusingGhidra,Radare2orIDAPro. 343\\nFromtheabovetable,wewillusethebaseaddress0x10000432cfor__textand0x10000d3e8for__datasectiontoload thematinthememory. WhileallocatingmemoryforUnicorn,thememoryaddressesshouldbe4kpagealignedandalsotheallocatedsize shouldbeamultipleof1024. Thefollowingscriptemulatesthefunctionat0x1000080d4anddumpsthesecretstring: importlief fromunicornimport * fromunicorn.arm64_constimport * ##---Extract__textand__datasectioncontentfromthebinary--- binary =lief.parse(\"uncrackable.arm64\") text_section =binary.get_section(\"__text\") text_content =text_section.content data_section =binary.get_section(\"__data\") data_content =data_section.content ##---SetupUnicornforARM64execution--- arch =\"arm64le\" emu=Uc(UC_ARCH_ARM64,UC_MODE_ARM) ##---CreateStackmemory--- addr =0x40000000 size =1024*1024 emu.mem_map(addr,size) emu.reg_write(UC_ARM64_REG_SP,addr +size -1) ##---Loadtextsection-- base_addr =0x100000000 tmp_len =1024*1024 text_section_load_addr =0x10000432c emu.mem_map(base_addr,tmp_len) emu.mem_write(text_section_load_addr,bytes(text_content)) ##---Loaddatasection--- data_section_load_addr =0x10000d3e8 emu.mem_write(data_section_load_addr,bytes(data_content)) ##---Hackforstack_chk_guard--- ##withoutthiswillthrowinvalidmemoryreadat0x0 emu.mem_map(0x0,1024) emu.mem_write(0x0,b\"00\") ##---Executefrom0x1000080d4to0x100008154--- 344\\nemu.emu_start(0x1000080d4,0x100008154) ret_value =emu.reg_read(UC_ARM64_REG_X0) ##---Dumpreturnvalue--- print(emu.mem_read(ret_value, 11)) Youmaynoticethatthereisanadditionalmemoryallocationataddress0x0,thisisasimplehackaroundstack_- chk_guardcheck. Withoutthis,therewillbeainvalidmemoryreaderrorandbinarycannotbeexecuted. Withthis hack,theprogramwillaccessthevalueat0x0anduseitforthestack_chk_guardcheck. Tosummarize,usingUnicorndorequiresomeadditionalsetupbeforeexecutingthebinary,butoncedone,thistoolcan help to provide deep insights into the binary. It provides the flexibility to execute the full binary or a limited part of it. UnicornalsoexposesAPIstoattachhookstotheexecution. Usingthesehooksyoucanobservethestateoftheprogram atanypointduringtheexecutionorevenmanipulatetheregisterorvariablevaluesandforcefullyexploreotherexecution branchesinaprogram. AnotheradvantagewhenrunningabinaryinUnicornisthatyoudon’tneedtoworryaboutvarious checkslikeroot/jailbreakdetectionordebuggerdetectionetc. Monitoring System Logs Platform: ios Manyappsloginformative(andpotentiallysensitive)messagestotheconsolelog. Thelogalsocontainscrashreports andotherusefulinformation. YoucancollectconsolelogsthroughtheXcodeDeviceswindowasfollows: 1. LaunchXcode. 2. Connectyourdevicetoyourhostcomputer. 3. ChooseWindow->DevicesandSimulators. 4. ClickonyourconnectediOSdeviceintheleftsectionoftheDeviceswindow. 5. Reproducetheproblem. 6. ClickontheOpenConsolebuttonlocatedintheupperright-handareaoftheDeviceswindowtoviewtheconsole logsonaseparatewindow. Tosavetheconsoleoutputtoatextfile,gotothetoprightsideoftheConsolewindowandclickontheSavebutton. 345\\nYoucanalsoconnecttothedeviceshellasexplainedinAccessingtheDeviceShell,installsocatviaapt-getandrunthe followingcommand: iPhone:~root#socat -UNIX-CONNECT:/var/run/lockdown/syslog.sock ======================== ASLisheretoserveyou >watch OK Jun 713:42:14iPhonechmod[9705]<Notice>:MS:Notice:Injecting: (null)[chmod] (1556.00) Jun 713:42:14iPhonereadlink[9706]<Notice>:MS:Notice:Injecting: (null) [readlink] (1556.00) Jun 713:42:14iPhonerm[9707]<Notice>:MS:Notice:Injecting: (null)[rm] (1556.00) Jun 713:42:14iPhonetouch[9708]<Notice>:MS:Notice:Injecting: (null)[touch] (1556.00) ... Repackaging Apps Platform: ios Ifyouneedtotestonanon-jailbrokendeviceyoushouldlearnhowtorepackageanapptoenabledynamictestingon it. UseacomputerwithmacOStoperformallthestepsindicatedinthearticle“PatchingiOSApplications”fromtheobjection Wiki. Onceyou’redoneyou’llbeabletopatchanIPAbycallingtheobjectioncommand: objectionpatchipa --source my-app.ipa --codesign-signature 0C2E8200Dxxxx Finally, the app needs to be installed (sideloaded) and run with debugging communication enabled. Perform the steps fromthearticle“RunningPatchediOSApplications”fromtheobjectionWiki(usingios-deploy). ios-deploy --bundle Payload/my-app.app -W-d Referto“InstallingApps”tolearnaboutotherinstallationmethods. Someofthemdoesn’trequireyoutohaveamacOS. Thisrepackagingmethodisenoughformostusecases. Formoreadvancedrepackaging,referto“iOSTampering andReverseEngineering-Patching,RepackagingandRe-Signing”. 346\\nLibrary Injection Platform: ios IfyouwanttouseFridaonnon-jailbrokendevicesyou’llneedtoincludeFridaGadget.dylib. Downloaditfirst: curl -Ohttps://build.frida.re/frida/ios/lib/FridaGadget.dylib Copy FridaGadget.dylib into the app directory and use optool to add a load command to the “UnCrackable Level 1” binary. $unzipUnCrackable-Level1.ipa $cpFridaGadget.dylibPayload/UnCrackable\\Level\\1.app/ $optoolinstall -cload -p\"@executable_path/FridaGadget.dylib\" -tPayload/UnCrackable\\Level\\1.app/UnCrackable\\Level\\1 FoundFATHeader Foundthinheader... Foundthinheader... InsertingaLC_LOAD_DYLIBcommandforarchitecture:arm SuccessfullyinsertedaLC_LOAD_DYLIBcommandforarm InsertingaLC_LOAD_DYLIBcommandforarchitecture:arm64 SuccessfullyinsertedaLC_LOAD_DYLIBcommandforarm64 WritingexecutabletoPayload/UnCrackableLevel1.app/UnCrackableLevel1... Patching Example: Making an App Debuggable Bydefault,anappavailableontheAppleAppStoreisnotdebuggable. InordertodebuganiOSapplication,itmusthave theget-task-allowentitlementenabled. Thisentitlementallowsotherprocesses(likeadebugger)toattachtotheapp. Xcodeisnotaddingtheget-task-allowentitlementinadistributionprovisioningprofile;itisonlywhitelistedandadded inadevelopmentprovisioningprofile. Thus,todebuganiOSapplicationobtainedfromtheAppStore,itneedstobere-signedwithadevelopmentprovisioning profilewiththeget-task-allowentitlement. Howtore-signanapplicationisdiscussedinthenextsection. Process Exploration Platform: ios Whentestinganapp,processexplorationcanprovidethetesterwithdeepinsightsintotheappprocessmemory. Itcan beachievedviaruntimeinstrumentationandallowstoperformtaskssuchas: • Retrievingthememorymapandloadedlibraries. • Searchingforoccurrencesofcertaindata. • Afterdoingasearch,obtainingthelocationofacertainoffsetinthememorymap. • Performingamemorydumpandinspectorreverseengineerthebinarydataoffline. • ReverseengineeringabinaryorFrameworkwhileit’srunning. As you can see, these tasks are rather supportive and/or passive, they’ll help us collect data and information that will supportothertechniques.",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 124
  },
  "embedding": [
    0.00678021227940917,
    -0.060064028948545456,
    0.004331644624471664,
    -0.07819321751594543,
    -0.03174714371562004,
    -0.07302627712488174,
    -0.02244381606578827,
    -0.004844347480684519,
    -0.04958174377679825,
    0.04063611105084419,
    0.071137934923172,
    -0.13585351407527924,
    0.026975344866514206,
    -0.018695347011089325,
    0.021030345931649208,
    0.0043353368528187275,
    0.05255916714668274,
    -0.02575206197798252,
    -0.02069300413131714,
    0.029350807890295982,
    0.09582075476646423,
    -0.021141331642866135,
    -0.044844236224889755,
    0.04623568430542946,
    0.043564554303884506,
    0.023930266499519348,
    -0.06030241400003433,
    -0.009373806416988373,
    0.0438053272664547,
    0.023121127858757973,
    0.017410237342119217,
    0.021658917888998985,
    0.02225090004503727,
    0.06071995943784714,
    0.0603804811835289,
    -0.05044800043106079,
    0.004084237851202488,
    -0.03422808647155762,
    0.004186057485640049,
    -0.06741965562105179,
    -0.05404307320713997,
    0.0326211117208004,
    -0.03053683042526245,
    0.10462404787540436,
    -0.007299560122191906,
    -0.0130236204713583,
    -0.004563083406537771,
    0.0343279205262661,
    -0.062092795968055725,
    0.022548817098140717,
    0.03835131973028183,
    -0.012154015712440014,
    0.05576310679316521,
    -0.004812588449567556,
    0.07344729453325272,
    -0.028187835589051247,
    0.003941550850868225,
    0.04285246133804321,
    0.07432149350643158,
    0.14392319321632385,
    0.04824448004364967,
    0.03486519306898117,
    -0.0019604419358074665,
    0.0033624835778027773,
    -0.00010134655167348683,
    -0.007847822271287441,
    0.048305053263902664,
    0.001668234122917056,
    0.05178339406847954,
    -0.12732179462909698,
    -0.004573337268084288,
    -0.042923662811517715,
    0.03255285322666168,
    -0.051475752145051956,
    -0.027628730982542038,
    0.08022267371416092,
    0.010546437464654446,
    -0.029132474213838577,
    -0.028248954564332962,
    -0.15997019410133362,
    0.034903887659311295,
    -0.03567617014050484,
    0.021515199914574623,
    0.04674198478460312,
    0.009019050747156143,
    0.05517861247062683,
    0.01321135088801384,
    0.013831380754709244,
    -0.006199391093105078,
    0.08231446146965027,
    0.015501972287893295,
    -0.004872480407357216,
    -0.053836923092603683,
    -0.04764512926340103,
    0.08700698614120483,
    -0.029580168426036835,
    0.004230522084981203,
    -0.00803015474230051,
    -0.047897808253765106,
    0.02161032147705555,
    0.012989797629415989,
    -0.05603567883372307,
    0.05040716752409935,
    -0.0049245962873101234,
    0.010784875601530075,
    -0.032936833798885345,
    0.028635527938604355,
    -0.13779911398887634,
    -0.014898693189024925,
    0.05350461229681969,
    -0.047510866075754166,
    -0.002158165443688631,
    0.019956206902861595,
    0.014694787561893463,
    0.07780998945236206,
    0.045780833810567856,
    -0.04814909026026726,
    0.06493616104125977,
    0.030404750257730484,
    0.01575273647904396,
    -0.008011043071746826,
    -0.0009215373429469764,
    0.016868436709046364,
    -0.04269814491271973,
    0.015363347716629505,
    0.00791998952627182,
    0.020999347791075706,
    1.1718218860651279e-32,
    -0.03260426968336105,
    -0.052750516682863235,
    -0.08257143944501877,
    0.059930525720119476,
    -0.001239878125488758,
    -0.12240216881036758,
    0.06972566992044449,
    0.10451008379459381,
    -0.03456215560436249,
    -0.014108306728303432,
    -0.011651602573692799,
    0.07667757570743561,
    -0.03562082350254059,
    0.05238492041826248,
    0.02255660481750965,
    0.046847473829984665,
    -0.0705891102552414,
    -0.03177197650074959,
    -0.044509660452604294,
    0.07259832322597504,
    -0.004854101687669754,
    -0.07787062972784042,
    -0.05164081230759621,
    -0.02704266458749771,
    -0.03731179237365723,
    0.06537078320980072,
    0.0024669987615197897,
    0.013592315837740898,
    0.08940815925598145,
    0.053915999829769135,
    -0.03694195672869682,
    0.03821621090173721,
    -0.04792696610093117,
    -0.05522436648607254,
    0.010776533745229244,
    -0.04979993402957916,
    0.04247444495558739,
    -0.000744858174584806,
    -0.09392118453979492,
    -0.011750232428312302,
    -0.0268582571297884,
    -0.0160498209297657,
    -0.09156344830989838,
    -0.0214451402425766,
    0.029425568878650665,
    -0.05760892108082771,
    -0.10777343809604645,
    -0.09438762068748474,
    0.022349916398525238,
    0.0056122369132936,
    0.01303025335073471,
    -0.012734559364616871,
    0.06131424382328987,
    -0.08781995624303818,
    -0.04995239898562431,
    -0.026141002774238586,
    0.005222921725362539,
    -0.05140932276844978,
    0.014660168439149857,
    0.08123980462551117,
    -0.10162022709846497,
    0.013437660411000252,
    -0.09226763993501663,
    -0.007823016494512558,
    0.004007244482636452,
    0.03190900385379791,
    -0.04686779901385307,
    -0.08679173141717911,
    -0.0221184603869915,
    0.06926754117012024,
    -0.048638418316841125,
    -0.018034810200333595,
    -0.007135152351111174,
    0.027440130710601807,
    0.01079484447836876,
    0.015748390927910805,
    0.012337197549641132,
    0.05014095455408096,
    -0.0764269158244133,
    -0.0670483186841011,
    0.030605871230363846,
    0.027045996859669685,
    0.028415579348802567,
    0.0004078526690136641,
    0.009403925389051437,
    -0.05653342232108116,
    -0.08239798992872238,
    -0.0650378167629242,
    -0.0703461691737175,
    0.11013055592775345,
    -0.008940845727920532,
    0.030963536351919174,
    -0.007622339762747288,
    0.06974568963050842,
    -0.020889148116111755,
    -1.2609710102895056e-32,
    -0.05624225735664368,
    0.045081786811351776,
    -0.09877856820821762,
    -0.017059754580259323,
    -0.046929795295000076,
    -0.00044207097380422056,
    -0.004430993925780058,
    0.06025669723749161,
    -0.055829402059316635,
    -0.10409858822822571,
    -0.0331435352563858,
    0.0004812545084860176,
    0.01862443797290325,
    0.043764494359493256,
    -0.014398313127458096,
    -0.04635593295097351,
    -0.01574946939945221,
    -0.07544070482254028,
    0.027211174368858337,
    0.0822247713804245,
    0.004670962691307068,
    0.050710711628198624,
    0.03901592269539833,
    -0.05959755554795265,
    -0.02101464383304119,
    -0.03033537045121193,
    0.02779487520456314,
    0.0035508060827851295,
    0.12296701222658157,
    -0.11090335994958878,
    0.10931303352117538,
    0.035780735313892365,
    -0.05676471069455147,
    -0.03301715478301048,
    -0.013227562420070171,
    0.013188809156417847,
    0.01932021789252758,
    -0.022571986541152,
    -0.013042000122368336,
    -0.08088772743940353,
    0.06562212854623795,
    0.0300665982067585,
    -0.0052247908897697926,
    -0.023909593001008034,
    0.08287949115037918,
    0.07350129634141922,
    -0.009961296804249287,
    -0.02517891675233841,
    0.03757952153682709,
    -0.07059360295534134,
    0.12129315733909607,
    -0.0012141265906393528,
    0.010931317694485188,
    0.029730433598160744,
    -0.04727968946099281,
    0.014232494868338108,
    0.09221968799829483,
    -0.02442186139523983,
    -0.02617432363331318,
    0.029505182057619095,
    0.06349769979715347,
    -0.03403833881020546,
    0.0067481608130037785,
    -0.06985124200582504,
    0.015757471323013306,
    -0.006239757873117924,
    -0.013068336062133312,
    0.049662087112665176,
    -0.030481010675430298,
    0.02183724381029606,
    -0.04326704517006874,
    -0.04425545036792755,
    -0.053150590509176254,
    -0.053561434149742126,
    -0.047100283205509186,
    0.04897618293762207,
    -0.08232446014881134,
    -0.09652242809534073,
    -0.004698384553194046,
    -0.056032128632068634,
    -0.014576560817658901,
    0.11244317889213562,
    0.02789311297237873,
    0.03308728709816933,
    0.047994062304496765,
    0.032226111739873886,
    0.009778705425560474,
    0.0461118221282959,
    0.024364344775676727,
    0.003139079548418522,
    -0.025117335841059685,
    0.04771936684846878,
    -0.04992412403225899,
    0.07966534793376923,
    -0.04493075981736183,
    -6.164834331912061e-08,
    0.04915524274110794,
    -0.02657579444348812,
    0.024057893082499504,
    -0.07652594894170761,
    0.006655310280621052,
    0.04165990650653839,
    -0.010032606311142445,
    -0.020656542852520943,
    0.0889417827129364,
    -0.053471606224775314,
    -0.0556822344660759,
    -0.003794579766690731,
    -0.12245623767375946,
    0.08966948091983795,
    0.028073027729988098,
    0.0060433875769376755,
    0.01308414526283741,
    -0.021370740607380867,
    0.006418110337108374,
    -0.015665989369153976,
    -0.04762936010956764,
    0.016137508675456047,
    -0.018436728045344353,
    -0.039028726518154144,
    -0.051805153489112854,
    -0.04190768301486969,
    0.08463581651449203,
    0.018770577386021614,
    -0.0029391793068498373,
    -0.02195301093161106,
    0.00640496052801609,
    0.06622450798749924,
    0.0156186418607831,
    -0.07776539027690887,
    -0.014777912758290768,
    0.09198058396577835,
    0.05428628250956535,
    0.022056609392166138,
    0.11839088052511215,
    -0.045632254332304,
    -0.028567926958203316,
    0.004649034235626459,
    -0.0030857750680297613,
    -0.05304474011063576,
    0.03552696853876114,
    -0.05025552213191986,
    -0.0404563844203949,
    -0.06661075353622437,
    0.037688951939344406,
    0.05784767121076584,
    -0.04020535573363304,
    -0.018434491008520126,
    -0.08889906108379364,
    0.013540361076593399,
    -0.010326627641916275,
    0.011042178608477116,
    -0.019766518846154213,
    -0.1260705590248108,
    0.03207758069038391,
    0.022519147023558617,
    0.11951083689928055,
    -0.03737723082304001,
    0.0682658851146698,
    0.04795893281698227
  ]
}