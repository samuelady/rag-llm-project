{
  "text": ";likely │ │││ 0x00001818 ldrbr4,[fp,-0x19] │ │││ 0x0000181c blfcn.00001728 │ │││ 0x00001820 movr3,r0 │ │││ 0x00001824 cmpr4,r3 │ ╭────<0x00001828 bne0x1854 ;likely │ ││││ 0x0000182c ldrbr4,[fp,-0x18] │ ││││ 0x00001830 blfcn.00001744 │ ││││ 0x00001834 movr3,r0 │ ││││ 0x00001838 cmpr4,r3 │ ╭─────<0x0000183c bne0x1854 ;likely │ │││││ 0x00001840 ldrr3,[0x0000186c] ;[0x186c:4]=0x270section..hash;section..hash │ │││││ 0x00001844 addr3,pc,r3 ;0x1abc;\"Productactivationpassed.Congratulations!\" │ │││││ 0x00001848 movr0,r3 ;0x1abc;\"Productactivationpassed.Congratulations!\"; │ │││││ 0x0000184c blsym.imp.puts ;intputs(constchar*s) │ │││││ ;intputs(\"Productactivationpassed.Congratulations!\") │ ╭──────<0x00001850 b0x1864 │ ││││││ ;CODEXREFSfromfcn.00001760(0x17ec,0x1800,0x1814,0x1828,0x183c) │ │╰╰╰╰╰─>0x00001854 ldrr3,aav.0x00000288 ;[0x1870:4]=0x288aav.0x00000288 │ │ 0x00001858 addr3,pc,r3 ;0x1ae8;\"Incorrectserial.\"; │ │ 0x0000185c movr0,r3 ;0x1ae8;\"Incorrectserial.\"; │ │ 0x00001860 blsym.imp.puts ;intputs(constchar*s) │ │ ;intputs(\"Incorrectserial.\") │ │ ;CODEXREFfromfcn.00001760(0x1850) │ ╰──────>0x00001864 subsp,fp,8 ╰ 0x00001868 pop{r4,fp,pc} ;entry.preinit0;entry.preinit0; Discussingalltheinstructionsinthefunctionisbeyondthescopeofthischapter,insteadwewilldiscussonlytheimportant pointsneededfortheanalysis. Inthevalidationfunction, thereisalooppresentat0x00001784whichperformsaXOR operationatoffset0x00001798. Theloopismoreclearlyvisibleinthegraphviewbelow. 119\\nXORisaverycommonlyusedtechniquetoencryptinformationwhereobfuscationisthegoalratherthansecurity. XOR shouldnotbeusedforanyseriousencryption,asitcanbecrackedusingfrequencyanalysis. Therefore,themere presenceofXORencryptioninsuchavalidationlogicalwaysrequiresspecialattentionandanalysis. Movingforward,atoffset0x000017dc,theXORdecodedvalueobtainedfromaboveisbeingcomparedagainstthereturn valuefromasub-functioncallat0x000017e8. Clearlythisfunctionisnotcomplex,andcanbeanalyzedmanually,butstillremainsacumbersometask. Especiallywhile 120\\nworking on a big code base, time can be a major constraint, and it is desirable to automate such analysis. Dynamic symbolic execution is helpful in exactly those situations. In the above crackme, the symbolic execution engine can determinetheconstraintsoneachbyteoftheinputstringbymappingapathbetweenthefirstinstructionofthelicense check(at0x00001760)andthecodethatprintsthe“Productactivationpassed”message(at0x00001840). Theconstraintsobtainedfromtheabovestepsarepassedtoasolverengine,whichfindsaninputthatsatisfiesthem-a validlicensekey. YouneedtoperformseveralstepstoinitializeAngr’ssymbolicexecutionengine: • LoadthebinaryintoaProject,whichisthestartingpointforanykindofanalysisinAngr. • Passtheaddressfromwhichtheanalysisshouldstart. Inthiscase,wewillinitializethestatewiththefirstinstruction oftheserialvalidationfunction. Thismakestheproblemsignificantlyeasiertosolvebecauseyouavoidsymbolically executingtheBase32implementation. • Passtheaddressofthecodeblockthattheanalysisshouldreach. Inthiscase,that’stheoffset0x00001840,where thecoderesponsibleforprintingthe“Productactivationpassed”messageislocated. • Also,specifytheaddressesthattheanalysisshouldnotreach. Inthiscase,thecodeblockthatprintsthe“Incorrect serial”messageat0x00001854isnotinteresting. NotethattheAngrloaderwillloadthePIEexecutablewithabaseaddressof0x400000,whichneedstobeadded totheoffsetsfromiaitobeforepassingittoAngr. Thefinalsolutionscriptispresentedbelow: importangr #Version:9.2.2 importbase64 load_options ={} b=angr.Project(\"./validate\",load_options =load_options) ##Thekeyvalidationfunctionstartsat0x401760,sothat'swherewecreatetheinitialstate. ##Thisspeedsthingsupalotbecausewe'rebypassingtheBase32-encoder. options ={ angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.ZERO_FILL_UNCONSTRAINED_REGISTERS, } state =b.factory.blank_state(addr=0x401760,add_options=options) simgr =b.factory.simulation_manager(state) simgr.explore(find=0x401840,avoid=0x401854) ##0x401840=Productactivationpassed ##0x401854=Incorrectserial found =simgr.found[0] ##Getthesolutionstringfrom*(R11-0x20). addr =found.memory.load(found.regs.r11 -0x20,1,endness=\"Iend_LE\") concrete_addr =found.solver.eval(addr) solution =found.solver.eval(found.memory.load(concrete_addr,10),cast_to=bytes) print(base64.b32encode(solution)) 121\\nAs discussed previously in the section “Dynamic Binary Instrumentation”, the symbolic execution engine constructs a binary tree of the operations for the program input given and generates a mathematical equation for each possible paththatmightbetaken. Internally,Angrexploresallthepathsbetweenthetwopointsspecifiedbyus,andpassesthe correspondingmathematicalequationstothesolvertoreturnmeaningfulconcreteresults. Wecanaccessthesesolutions viasimulation_manager.foundlist,whichcontainsallthepossiblepathsexploredbyAngrwhichsatisfiesourspecified searchcriteria. Take a closer look at the latter part of the script where the final solution string is being retrieved. The address of the string is obtained from address r11 - 0x20. This may appear magical at first, but a careful analysis of the function at 0x00001760holdstheclue,asitdeterminesifthegiveninputstringisavalidlicensekeyornot. Inthedisassemblyabove, youcanseehowtheinputstringtothefunction(inregisterR0)isstoredintoalocalstackvariable0x0000176c str r0,[var_20h]. Hence,wedecidedtousethisvaluetoretrievethefinalsolutioninthescript. Usingfound.solver.eval youcanaskthesolverquestionslike“giventheoutputofthissequenceofoperations(thecurrentstateinfound),what musttheinput(ataddr)havebeen?”. InARMv7,R11iscalledfp(functionpointer),thereforeR11 - 0x20isequivalenttofp-0x20: var int32_t var_20h @ fp-0x20 Next,theendnessparameterinthescriptspecifiesthatthedataisstoredin“little-endian”fashion,whichisthecasefor almostalloftheAndroiddevices. Also, it may appear as if the script is simply reading the solution string from the memory of the script. However, it’s readingitfromthesymbolicmemory. Neitherthestringnorthepointertothestringactuallyexist. Thesolverensures thatthesolutionitprovidesisthesameasiftheprogramwouldbeexecutedtothatpoint. Runningthisscriptshouldreturnthefollowingoutput: $python3solve.py WARNING |...|cle.loader |Themainbinaryisaposition-independentexecutable.Itisbeingloadedwithabaseaddressof0x400000. b'JACE6ACIARNAAIIA' NowyoucanrunthevalidatebinaryinyourAndroiddevicetoverifythesolutionasindicatedhere. Youmayobtaindifferentsolutionsusingthescript,astherearemultiplevalidlicensekeyspossible. To conclude, learning symbolic execution might look a bit intimidating at first, as it requires deep understanding and extensive practice. However, the effort is justified considering the valuable time it can save in contrast to analyzing complexdisassembledinstructionsmanually. Typicallyyou’dusehybridtechniques,asintheaboveexample,wherewe performed manual analysis of the disassembled code to provide the correct criteria to the symbolic execution engine. PleaserefertotheiOSchapterformoreexamplesonAngrusage. Patching Platform: android MakingsmallchangestotheAndroidManifestorbytecodeisoftenthequickestwaytofixsmallannoyancesthatprevent youfromtestingorreverseengineeringanapp. OnAndroid,twoissuesinparticularhappenregularly: 1. Youcan’tinterceptHTTPStrafficwithaproxybecausetheappemploysSSLpinning. 2. Youcan’tattachadebuggertotheappbecausetheandroid:debuggableflagisnotsetto\"true\"intheAndroid Manifest. In most cases, both issues can be fixed by making minor changes to the app (aka. patching) and then re-signing and repackagingit. AppsthatrunadditionalintegritychecksbeyonddefaultAndroidcode-signingareanexception. Inthose cases,youhavetopatchtheadditionalchecksaswell. ThefirststepisunpackinganddisassemblingtheAPKwithapktool: 122\\napktooldtarget_apk.apk Note: To save time, you may use the flag --no-src if you only want to unpack the APK but not disassemble the code. Forexample,whenyouonlywanttomodifytheAndroidManifestandrepackimmediately. Patching Example: Disabling Certificate Pinning Certificate pinning is an issue for security testers who want to intercept HTTPS communication for legitimate reasons. PatchingbytecodetodeactivateSSLpinningcanhelpwiththis. Todemonstratebypassingcertificatepinning,we’llwalk throughanimplementationinanexampleapplication. Onceyou’veunpackedanddisassembledtheAPK,it’stimetofindthecertificatepinningchecksintheSmalisourcecode. Searchingthecodeforkeywordssuchas“X509TrustManager”shouldpointyouintherightdirection. Inourexample,asearchfor“X509TrustManager”returnsoneclassthatimplementsacustomTrustManager. Thederived classimplementsthemethodscheckClientTrusted,checkServerTrusted,andgetAcceptedIssuers. To bypass the pinning",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 64
  },
  "embedding": [
    0.008216633461415768,
    -0.022947192192077637,
    0.005468193907290697,
    -0.10904417932033539,
    0.07415390014648438,
    -0.029758334159851074,
    -0.02060212381184101,
    -0.02036750316619873,
    -0.05296732485294342,
    0.052679963409900665,
    0.061158567667007446,
    0.0004012675490230322,
    0.07140664756298065,
    -0.05176514759659767,
    -0.05282922461628914,
    0.06797296553850174,
    -0.05098899081349373,
    -0.01620769500732422,
    -0.06774549931287766,
    -0.046561215072870255,
    0.003952157683670521,
    -0.008634387515485287,
    0.016804909333586693,
    -0.03458496928215027,
    -0.01708821766078472,
    0.06495989859104156,
    0.02903391607105732,
    0.06460463255643845,
    -0.0033023247960954905,
    -0.08939695358276367,
    0.09048920124769211,
    0.08898010849952698,
    0.01558534987270832,
    -0.01937968283891678,
    0.07734532654285431,
    0.08047685027122498,
    -0.06471505016088486,
    0.03661932423710823,
    0.06310945749282837,
    -0.020047536119818687,
    -0.006297069136053324,
    0.03878995403647423,
    -0.04818866029381752,
    0.005913602653890848,
    -0.008343270048499107,
    0.01947193779051304,
    -0.04902531951665878,
    -0.016720863059163094,
    0.01163447368890047,
    -0.07773081958293915,
    0.018032800406217575,
    0.005228836555033922,
    0.01795770972967148,
    0.06264277547597885,
    -0.022847475484013557,
    -0.06796283274888992,
    -0.06711156666278839,
    -0.1505526900291443,
    0.02306349016726017,
    0.032834358513355255,
    -0.0036974914837628603,
    0.01223086379468441,
    -0.00011386699043214321,
    -0.08550868928432465,
    0.08346211910247803,
    0.04102485254406929,
    -0.006731275003403425,
    0.054166458547115326,
    0.013825060799717903,
    0.018333962187170982,
    0.004335185047239065,
    0.054825060069561005,
    -0.04891124367713928,
    0.06543382257223129,
    -0.0018522932659834623,
    0.04588722810149193,
    0.019894680008292198,
    -0.04937542974948883,
    -0.03245730698108673,
    -0.035080913454294205,
    -0.1498316079378128,
    0.009951296262443066,
    0.06440483778715134,
    -0.05651536583900452,
    -0.03224730119109154,
    -0.08246371150016785,
    -0.00459330715239048,
    -0.017904866486787796,
    0.04003438726067543,
    0.0312085822224617,
    -0.025969255715608597,
    0.03005099855363369,
    0.010283606126904488,
    0.005419363733381033,
    0.07908804714679718,
    -0.009007396176457405,
    0.0627574697136879,
    -0.0050255777314305305,
    0.059943944215774536,
    0.06647999584674835,
    -0.00023190912907011807,
    0.004329755902290344,
    -0.028859786689281464,
    -0.09111719578504562,
    -0.028704097494482994,
    -0.007978408597409725,
    -0.0440811850130558,
    0.06228458136320114,
    -0.03981426730751991,
    -0.043035198003053665,
    0.027227604761719704,
    -0.0007436388987116516,
    0.015536011196672916,
    -0.05424220487475395,
    -0.024924013763666153,
    0.02206946723163128,
    -0.0029322938062250614,
    0.024303646758198738,
    -0.029121119529008865,
    -0.07460679858922958,
    0.06108535826206207,
    0.014167094603180885,
    0.11195718497037888,
    0.013852417469024658,
    -0.05580722168087959,
    -0.03748325631022453,
    -0.06577933579683304,
    1.2789668002430378e-32,
    0.043348539620637894,
    0.01983952522277832,
    -0.011834373697638512,
    0.02648608200252056,
    -0.04010259732604027,
    0.0496983528137207,
    0.02748247981071472,
    0.02633647248148918,
    0.025834908708930016,
    -0.010312126018106937,
    -0.053261902183294296,
    -0.03797277435660362,
    0.075301893055439,
    -0.06279773265123367,
    -0.032525453716516495,
    -0.06291438639163971,
    0.0031133999582380056,
    0.046054430305957794,
    -0.09819535911083221,
    0.015297983773052692,
    0.00875766109675169,
    -0.0021922849118709564,
    0.008084657602012157,
    -0.05281931534409523,
    0.022749584168195724,
    0.01054429728537798,
    0.00424773758277297,
    -0.1091127023100853,
    0.01602853462100029,
    0.007792174816131592,
    0.04678458347916603,
    0.05422588810324669,
    -0.10484810173511505,
    -0.00522436061874032,
    0.06088373810052872,
    -0.028859494253993034,
    -0.02689482644200325,
    -0.0903855636715889,
    -0.009130517952144146,
    -0.036908894777297974,
    0.020410502329468727,
    -0.009745960123836994,
    0.007386353332549334,
    -0.023951338604092598,
    0.0012454622192308307,
    -0.02182777412235737,
    -0.012871980667114258,
    0.011007474735379219,
    -0.08058023452758789,
    0.029080580919981003,
    0.032186225056648254,
    0.03303957358002663,
    0.022627243772149086,
    0.029660280793905258,
    -0.052861977368593216,
    -0.055852897465229034,
    -0.010346035473048687,
    0.0036886953748762608,
    0.12021493911743164,
    0.08995514363050461,
    0.01794091984629631,
    0.04004118591547012,
    -0.05933159217238426,
    -6.24246895313263e-05,
    0.05807250365614891,
    -0.004022350534796715,
    0.03656689450144768,
    0.023690590634942055,
    0.039264362305402756,
    0.09732889384031296,
    -0.04351169615983963,
    0.01179677527397871,
    0.07827602326869965,
    -0.07404669374227524,
    -0.03890809789299965,
    -0.036873623728752136,
    0.008770978078246117,
    -0.006442681886255741,
    -0.013552182354032993,
    -0.07756106555461884,
    -0.04612628370523453,
    0.07275476306676865,
    0.00925231259316206,
    -0.00871980283409357,
    0.009050862863659859,
    -0.05541900172829628,
    0.005836866330355406,
    -0.1025182455778122,
    -0.10649722069501877,
    -0.0640900731086731,
    0.010978706181049347,
    -0.07451438903808594,
    -0.01735682599246502,
    -0.06803394854068756,
    -0.026747044175863266,
    -1.2078317596030271e-32,
    0.06716255843639374,
    0.025835087522864342,
    0.09992916136980057,
    0.019255883991718292,
    0.023623429238796234,
    -0.0661800354719162,
    0.03744369000196457,
    -0.0808841809630394,
    -0.011370702646672726,
    -0.028030114248394966,
    -0.010200254619121552,
    0.003356441156938672,
    0.03159383684396744,
    -0.010222803801298141,
    0.00880752969533205,
    0.08552957326173782,
    -0.0467119924724102,
    0.027715489268302917,
    -0.024504583328962326,
    0.026414895430207253,
    0.009723610244691372,
    0.11461367458105087,
    0.008069989271461964,
    0.021985668689012527,
    -0.02409111149609089,
    0.05430620163679123,
    0.07228794693946838,
    0.022308839485049248,
    0.058231133967638016,
    -0.005823560990393162,
    -0.06716342270374298,
    0.04328183829784393,
    -0.08253984153270721,
    0.002007110510021448,
    -0.01893126405775547,
    -0.0239546075463295,
    0.03323037549853325,
    0.0763489231467247,
    0.01650397479534149,
    0.04038457199931145,
    0.02592759020626545,
    0.0641360878944397,
    -0.07056930661201477,
    -0.029752163216471672,
    -0.05649309977889061,
    -0.0244370736181736,
    0.054927580058574677,
    0.10018061101436615,
    0.0374593548476696,
    0.048760417848825455,
    0.019897395744919777,
    0.009845538064837456,
    -0.06361035257577896,
    0.026832500472664833,
    0.0256414283066988,
    -0.002527817152440548,
    -0.05339091271162033,
    -0.03138770908117294,
    -0.008716405369341373,
    -0.015049772337079048,
    -0.08893279731273651,
    0.01678459346294403,
    0.1388903260231018,
    0.0202178955078125,
    0.05868891254067421,
    -0.02179691568017006,
    -0.07531309872865677,
    -0.032414618879556656,
    -0.011882660910487175,
    0.027392040938138962,
    -0.027042625471949577,
    -0.02525871992111206,
    -0.016767187044024467,
    -0.08316316455602646,
    0.12321184575557709,
    0.014724367298185825,
    0.05002937465906143,
    0.04406736046075821,
    0.018655110150575638,
    0.01598990149796009,
    -0.059208400547504425,
    0.00439341738820076,
    0.049203645437955856,
    0.08021765202283859,
    0.06680406630039215,
    -0.011361505836248398,
    0.035586871206760406,
    0.031058618798851967,
    0.019062018021941185,
    -0.03932924196124077,
    0.010773228481411934,
    0.04726824536919594,
    0.11600067466497421,
    0.04434068500995636,
    -0.009808909147977829,
    -4.6289557076306664e-08,
    -0.01257011666893959,
    -0.050453487783670425,
    0.004815688356757164,
    0.025502005591988564,
    0.11653607338666916,
    0.06522615998983383,
    -0.09212769567966461,
    0.01481559220701456,
    -0.07717012614011765,
    -0.05732813850045204,
    0.10985452681779861,
    0.018087316304445267,
    -0.09923280775547028,
    -0.06815629452466965,
    0.0072473082691431046,
    6.760339601896703e-05,
    -0.12048327177762985,
    -0.05487578734755516,
    -0.10287413746118546,
    -0.059583213180303574,
    -0.06524635851383209,
    0.049948059022426605,
    0.047132205218076706,
    0.03766811639070511,
    -0.004699835553765297,
    0.019446643069386482,
    0.011973791755735874,
    0.003910553175956011,
    0.02775711566209793,
    0.0072446465492248535,
    0.03510386496782303,
    -0.03254245966672897,
    0.047424979507923126,
    -0.10481445491313934,
    0.10795176774263382,
    0.03428665176033974,
    -0.006466681603342295,
    0.07861228287220001,
    -0.02909945510327816,
    -0.0034276344813406467,
    -0.05019548907876015,
    -0.08117955923080444,
    -0.04275072365999222,
    0.04478643834590912,
    0.06545919924974442,
    -0.08524835109710693,
    -0.082127645611763,
    0.07260943204164505,
    0.027952877804636955,
    -0.04948649927973747,
    -0.07388484477996826,
    -0.00854420755058527,
    0.0033543449826538563,
    0.0021285677794367075,
    -0.04585907235741615,
    0.058529917150735855,
    -0.03328472375869751,
    -0.07991626113653183,
    0.07857699692249298,
    0.010316137224435806,
    0.0308278389275074,
    -0.08445163816213608,
    -0.04916124790906906,
    -0.02338056080043316
  ]
}