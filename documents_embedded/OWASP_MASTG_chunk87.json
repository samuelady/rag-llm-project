{
  "text": "out.flush() out.close() } } Formoreinformation,takealookatSecurelyStoringSensitiveDatainRAM. Inthe“StaticAnalysis”section,wementionedtheproperwaytohandlecryptographickeyswhenyouareusingAndroid- KeyStoreorSecretKey. For a better implementation of SecretKey, look at the SecureSecretKey class below. Although the implementation is probably missing some boilerplate code that would make the class compatible with SecretKey, it addresses the main securityconcerns: • Nocross-contexthandlingofsensitivedata. Eachcopyofthekeycanbeclearedfromwithinthescopeinwhichit wascreated. • Thelocalcopyisclearedaccordingtotherecommendationsgivenabove. ExampleinJava: public class SecureSecretKey implements javax.crypto.SecretKey,Destroyable { private byte[]key; private final Stringalgorithm; /**ConstructsSecureSecretKeyinstanceoutofacopyoftheprovidedkeybytes. *Thecallerisresponsibleofclearingthekeyarrayprovidedasinput. *Theinternalcopyofthekeycanbeclearedbycallingthedestroy() method. */ public SecureSecretKey(final byte[]key,final Stringalgorithm){ this.key=key.clone(); this.algorithm =algorithm; } public String getAlgorithm(){ return this.algorithm; } public String getFormat(){ return \"RAW\"; } /**Returnsacopyofthekey. *Makesuretoclearthereturnedbytearraywhennolongerneeded. */ public byte[]getEncoded(){ if(null ==key){ throw newNullPointerException(); } return key.clone(); } /**Overwritesthekeywithdummydatatoensurethiscopyisnolongerpresentinmemory.*/ public void destroy(){ if(isDestroyed()){ 210\\nreturn; } byte[]nonSecret =newString(\"RuntimeException\").getBytes(\"ISO-8859-1\"); for(inti=0;i<key.length;i++){ key[i]=nonSecret[i%nonSecret.length]; } FileOutputStreamout =newFileOutputStream(\"/dev/null\"); out.write(key); out.flush(); out.close(); this.key=null; System.gc(); } public boolean isDestroyed(){ return key==null; } } ExampleinKotlin: class SecureSecretKey(key:ByteArray,algorithm:String):SecretKey,Destroyable { private varkey:ByteArray? private valalgorithm:String override fungetAlgorithm():String { return algorithm } override fungetFormat():String { return \"RAW\" } /**Returnsacopyofthekey. *Makesuretoclearthereturnedbytearraywhennolongerneeded. */ override fungetEncoded():ByteArray { if(null ==key){ throw NullPointerException() } return key!!.clone() } /**Overwritesthekeywithdummydatatoensurethiscopyisnolongerpresentinmemory.*/ override fundestroy(){ if(isDestroyed){ return } valnonSecret:ByteArray =String(\"RuntimeException\").toByteArray(charset(\"ISO-8859-1\")) for(iinkey!!.indices){ key!![i]=nonSecret[i%nonSecret.size] } valout=FileOutputStream(\"/dev/null\") out.write(key) out.flush() out.close() key=null System.gc() } override funisDestroyed():Boolean { return key==null } /**ConstructsSecureSecretKeyinstanceoutofacopyoftheprovidedkeybytes. *Thecallerisresponsibleofclearingthekeyarrayprovidedasinput. *Theinternalcopyofthekeycanbeclearedbycallingthedestroy()method. */ init { this.key=key.clone() this.algorithm =algorithm } } Secureuser-provideddataisthefinalsecureinformationtypeusuallyfoundinmemory. Thisisoftenmanagedbyimple- mentingacustominputmethod,forwhichyoushouldfollowtherecommendationsgivenhere. However,Androidallows informationtobepartiallyerasedfromEditTextbuffersviaacustomEditable.Factory. EditTexteditText =...;// pointyourvariabletoyourEditTextinstance EditText.setEditableFactory(newEditable.Factory(){ public Editable newEditable(CharSequencesource){ ...//returnanewinstanceofasecureimplementationofEditable. } }); 211\\nRefer to the SecureSecretKey example above for an example Editable implementation. Note that you will be able tosecurelyhandleallcopiesmadebyeditText.getTextifyouprovideyourfactory. Youcanalsotrytooverwritethe internalEditTextbufferbycallingeditText.setText,butthereisnoguaranteethatthebufferwillnothavebeencopied already. IfyouchoosetorelyonthedefaultinputmethodandEditText,youwillhavenocontroloverthekeyboardor othercomponentsthatareused. Therefore,youshouldusethisapproachforsemi-confidentialinformationonly. Inallcases,makesurethatsensitivedatainmemoryisclearedwhenausersignsoutoftheapplication. Finally,make surethathighlysensitiveinformationisclearedoutthemomentanActivityorFragment’sonPauseeventistriggered. Notethatthismightmeanthatauserhastore-authenticateeverytimetheapplicationresumes. Dynamic Analysis Static analysis will help you identify potential problems, but it can’t provide statistics about how long data has been exposedinmemory,norcanithelpyouidentifyproblemsinclosed-sourcedependencies. Thisiswheredynamicanalysis comesintoplay. Therearevariouswaystoanalyzethememoryofaprocess,e.g.liveanalysisviaadebugger/dynamicinstrumentation andanalyzingoneormorememorydumps. Retrieving and Analyzing a Memory Dump Whether you are using a rooted or a non-rooted device, you can dump the app’s process memory with objection and Fridump. Youcanfindadetailedexplanationofthisprocessinthesection“MemoryDump”,inthechapter“Tampering andReverseEngineeringonAndroid”. Afterthememoryhasbeendumped(e.g.toafilecalled“memory”),dependingonthenatureofthedatayou’relooking for, you’ll need a set of different tools to process and analyze that memory dump. For instance, if you’re focusing on strings,itmightbesufficientforyoutoexecutethecommandstringsorrabin2 -zztoextractthosestrings. ##usingstrings $stringsmemory >strings.txt ##usingrabin2 $rabin2 -ZZmemory >strings.txt Openstrings.txtinyourfavoriteeditoranddigthroughittoidentifysensitiveinformation. However if you’d like to inspect other kind of data, you’d rather want to use radare2 and its search capabilities. See radare2’shelponthesearchcommand(/?) formoreinformationandalistofoptions. Thefollowingshowsonlyasubset ofthem: $r2 <name_of_your_dump_file> [0x00000000]>/? Usage:/[!bf][arg] Searchstuff (see'e??search' foroptions) |Useio.vaforsearchinginnonvirtualaddressingspaces |/foo\\x00 searchforstring 'foo\\0' |/c[ar] searchforcryptomaterials |/e/E.F/i matchregularexpression |/ifoo searchforstring 'foo' ignoringcase |/m[?][ebm]magicfile searchformagic,filesystemsorbinaryheaders |/v[1248]value lookforan `cfg.bigendian`32bitvalue |/wfoo searchforwidestring 'f\\0o\\0o\\0' |/xff0033 searchforhexstring |/zminmax searchforstringsofgivensize ... Runtime Memory Analysis Insteadofdumpingthememorytoyourhostcomputer,youcanalternativelyuser2frida. Withit,youcananalyzeand inspecttheapp’smemorywhileit’srunning. Forexample,youmayruntheprevioussearchcommandsfromr2fridaand search the memory for a string, hexadecimal values, etc. When doing so, remember to prepend the search command (andanyotherr2fridaspecificcommands)withabackslash: afterstartingthesessionwithr2 frida://usb//<name_- of_your_app>. Formoreinformation,optionsandapproaches,pleaserefertosection“In-MemorySearch”inthechapter“Tamperingand ReverseEngineeringonAndroid”. 212\\nExplicitly Dumping and Analyzing the Java Heap For rudimentary analysis, you can use Android Studio’s built-in tools. They are on the Android Monitor tab. To dump memory, selectthedeviceandappyouwanttoanalyzeandclickDumpJavaHeap. Thiswillcreatea.hprof fileinthe capturesdirectory,whichisontheapp’sprojectpath. Tonavigatethroughclassinstancesthatweresavedinthememorydump,selectthePackageTreeViewinthetabshowing the.hprof file. Formoreadvancedanalysisofthememorydump,usetheEclipseMemoryAnalyzerTool(MAT).ItisavailableasanEclipse pluginandasastandaloneapplication. ToanalyzethedumpinMAT,usethehprof-convplatformtool,whichcomeswiththeAndroidSDK. 213\\n./hprof-convmemory.hprofmemory-mat.hprof MAT provides several tools for analyzing the memory dump. For example, the Histogram provides an estimate of the numberofobjectsthathavebeencapturedfromagiventype,andtheThreadOverviewshowsprocesses’threadsand stack frames. The Dominator Tree provides information about keep-alive dependencies between objects. You can use regularexpressionstofiltertheresultsthesetoolsprovide. ObjectQueryLanguagestudioisaMATfeaturethatallowsyoutoqueryobjectsfromthememorydumpwithanSQL-like language. ThetoolallowsyoutotransformsimpleobjectsbyinvokingJavamethodsonthem,anditprovidesanAPIfor buildingsophisticatedtoolsontopoftheMAT. SELECT *FROM java.lang.String Intheexampleabove,allStringobjectspresentinthememorydumpwillbeselected. Theresultswillincludetheobject’s class,memoryaddress,value,andretaincount. Tofilterthisinformationandseeonlythevalueofeachstring,usethe followingcode: SELECT toString(object)FROM java.lang.String object",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 87
  },
  "embedding": [
    -0.05957327410578728,
    0.03731921687722206,
    -0.022475801408290863,
    -0.014040748588740826,
    -0.06890108436346054,
    0.013382833451032639,
    0.03636221960186958,
    -0.006123548373579979,
    -0.010955698788166046,
    0.07225169986486435,
    0.032194819301366806,
    -0.008763882331550121,
    0.07032041996717453,
    -0.065827876329422,
    -0.021817849949002266,
    -0.06707678735256195,
    -0.03215239942073822,
    0.06575240194797516,
    -0.04091661050915718,
    0.05572906881570816,
    0.0698663592338562,
    -0.059843387454748154,
    0.07566096633672714,
    -0.03914210572838783,
    -0.014921619556844234,
    0.03054274618625641,
    0.02522335760295391,
    -0.06094912812113762,
    -0.020187223330140114,
    0.04399814456701279,
    -0.017195580527186394,
    -0.05050074681639671,
    -0.022598132491111755,
    -0.016215108335018158,
    -0.028185883536934853,
    0.045720189809799194,
    0.019990447908639908,
    0.06448179483413696,
    0.04919663071632385,
    -0.012913295067846775,
    -0.06604914367198944,
    -0.004532973747700453,
    -0.07333947718143463,
    0.10875430703163147,
    -0.08056442439556122,
    0.019888535141944885,
    -0.03219965845346451,
    -0.023394502699375153,
    -0.02179889753460884,
    0.038808517158031464,
    -0.07345626503229141,
    -0.007967188954353333,
    0.00581189664080739,
    0.029704878106713295,
    -0.07823599874973297,
    0.005180075764656067,
    -0.0008115724194794893,
    0.01570013165473938,
    -0.032343752682209015,
    0.043585214763879776,
    0.04253328591585159,
    0.021085884422063828,
    -0.025354068726301193,
    -0.02734467200934887,
    -0.03893640637397766,
    0.08845187723636627,
    0.057449545711278915,
    -0.07615473121404648,
    0.07327745109796524,
    -0.07889319211244583,
    -0.004186301026493311,
    -0.019725393503904343,
    -0.02963940054178238,
    -0.029659440740942955,
    -0.032115157693624496,
    0.0015192817663773894,
    -0.06158125400543213,
    0.0009913312969729304,
    -0.04230980947613716,
    -0.03553269803524017,
    0.08845420926809311,
    -0.07256989181041718,
    0.05626393109560013,
    0.02651343122124672,
    0.01369632687419653,
    0.07288013398647308,
    -0.003865505801513791,
    -0.07917198538780212,
    0.005056642461568117,
    0.1051412895321846,
    0.0174265056848526,
    -0.002995324321091175,
    0.037481240928173065,
    -0.07416678965091705,
    0.0685134008526802,
    -0.045115623623132706,
    -0.01383057702332735,
    -0.004858448635786772,
    -0.052991751581430435,
    0.03233190253376961,
    0.0014630885561928153,
    0.026422450318932533,
    -0.015770724043250084,
    -0.09530583769083023,
    0.0858764499425888,
    0.062207989394664764,
    -0.007215844467282295,
    -0.09615319222211838,
    0.0025514408480376005,
    0.04224708676338196,
    0.02595270425081253,
    0.007754641585052013,
    -0.05157161504030228,
    0.023151081055402756,
    0.0014691640390083194,
    0.10924580693244934,
    -0.011621245183050632,
    0.0832856297492981,
    0.035216495394706726,
    0.04022660851478577,
    -0.01729266718029976,
    0.03411642089486122,
    -0.052113667130470276,
    -0.01848798617720604,
    -0.10751478374004364,
    0.010520263575017452,
    -0.040311772376298904,
    1.258665865867543e-32,
    -0.04387378320097923,
    -0.03308841958642006,
    0.007369109895080328,
    0.04725854843854904,
    -0.07772446423768997,
    0.012823067605495453,
    0.023963013663887978,
    0.019725371152162552,
    -0.0007080294308252633,
    -0.03313114121556282,
    -0.0098256915807724,
    -0.08296989649534225,
    -0.0326869860291481,
    -0.021433787420392036,
    -0.016841882839798927,
    -0.029610835015773773,
    0.01900191232562065,
    0.04353191331028938,
    0.007589862681925297,
    -0.002083810744807124,
    0.06999211758375168,
    0.012380288913846016,
    0.09079314023256302,
    -0.056148409843444824,
    -0.031864020973443985,
    0.030909769237041473,
    -0.0135495625436306,
    0.0177010390907526,
    0.02852206490933895,
    0.042464833706617355,
    -0.016991132870316505,
    -0.019793236628174782,
    -0.06707265228033066,
    0.015835987403988838,
    -0.010838485322892666,
    -0.03822591155767441,
    0.07709832489490509,
    -0.05964209511876106,
    0.04524495452642441,
    -0.1202462688088417,
    -0.05661014840006828,
    -0.08132291585206985,
    -0.034765828400850296,
    0.0008983308798633516,
    0.01286018081009388,
    -0.07875624299049377,
    -0.05578825995326042,
    0.07346924394369125,
    0.08953934162855148,
    0.109476737678051,
    -0.03340029716491699,
    -0.004830611869692802,
    -0.07731830328702927,
    -0.12997101247310638,
    -0.10450664907693863,
    -0.056993212550878525,
    0.012343766167759895,
    0.022725330665707588,
    0.011455051600933075,
    0.05912282317876816,
    -0.04915190488100052,
    0.048246584832668304,
    0.00945134088397026,
    -0.03351312130689621,
    -0.06582564860582352,
    -0.009964359924197197,
    -0.057317137718200684,
    -0.10157786309719086,
    -0.05712062865495682,
    -0.075080506503582,
    -0.03454842045903206,
    0.024210281670093536,
    -0.05543769523501396,
    0.019050199538469315,
    -0.006177665200084448,
    -0.0002656547585502267,
    0.021576201543211937,
    0.012080593034625053,
    0.055964790284633636,
    -0.06897350400686264,
    0.10534471273422241,
    0.07424090802669525,
    0.029462920501828194,
    -0.012716314755380154,
    -0.054169658571481705,
    0.0694086104631424,
    -0.02124696411192417,
    -0.03477461636066437,
    -0.0006264353287406266,
    0.052140042185783386,
    0.008308988995850086,
    0.0012018735287711024,
    -0.053987517952919006,
    0.018144704401493073,
    -0.04534630477428436,
    -1.386556565564337e-32,
    0.06837335228919983,
    -0.05167998746037483,
    -0.09089161455631256,
    0.0654827430844307,
    0.004240871407091618,
    0.05213036760687828,
    -0.029276765882968903,
    0.012544854544103146,
    -0.046418845653533936,
    -0.011675246991217136,
    -0.0032931428868323565,
    0.03712012246251106,
    0.045652925968170166,
    -0.05370815098285675,
    0.05124635621905327,
    -0.015480120666325092,
    0.08947133272886276,
    0.06842288374900818,
    -0.03194727748632431,
    0.014736105687916279,
    0.007894194684922695,
    -0.054815661162137985,
    -0.005082278978079557,
    0.1121579110622406,
    0.010532104410231113,
    -0.041961997747421265,
    -0.06388213485479355,
    0.06625007838010788,
    0.009315862320363522,
    0.05625619739294052,
    -0.004304646514356136,
    0.02902858331799507,
    -0.010323741473257542,
    -0.062031764537096024,
    -0.05318131297826767,
    -0.12651556730270386,
    -0.06749262660741806,
    0.03474293276667595,
    -0.033091720193624496,
    0.05300304293632507,
    0.00272184400819242,
    -0.06555288285017014,
    0.02359710820019245,
    0.015310587361454964,
    0.040605366230010986,
    -0.03351708501577377,
    0.007574073970317841,
    0.006876641884446144,
    0.04113040491938591,
    0.08939468115568161,
    0.04996421933174133,
    -0.0626840740442276,
    -0.03797931596636772,
    -0.033667512238025665,
    -0.015506556257605553,
    0.12718363106250763,
    0.0023041018284857273,
    0.06123734265565872,
    0.008011644706130028,
    -0.017995817586779594,
    0.07471570372581482,
    -0.015204407274723053,
    0.054980870336294174,
    0.06359215080738068,
    0.10155646502971649,
    0.01048099622130394,
    0.02018837258219719,
    0.022988440468907356,
    -0.03829491510987282,
    0.022023743018507957,
    0.00899400282651186,
    -0.04417157545685768,
    -0.012300764210522175,
    -0.058218106627464294,
    0.11117828637361526,
    -0.015042279846966267,
    0.014335858635604382,
    -0.06358636170625687,
    -0.012247730977833271,
    0.0067175040021538734,
    0.0661846175789833,
    0.02193530462682247,
    -0.032541222870349884,
    -0.012695305980741978,
    0.1071435958147049,
    -0.024697577580809593,
    0.010189898312091827,
    -0.04360613971948624,
    -0.06989344954490662,
    0.0542646199464798,
    -0.04886702075600624,
    0.0021116945426911116,
    -0.05973093584179878,
    -0.0029721148312091827,
    0.12245135009288788,
    -5.8608939923487924e-08,
    0.09287367016077042,
    0.06650388985872269,
    0.04258368909358978,
    -0.0128089664503932,
    0.02825108729302883,
    -0.06735403835773468,
    -0.023472033441066742,
    0.00011444596748333424,
    -0.016392137855291367,
    -0.08808586746454239,
    -0.0023091973271220922,
    0.011616534553468227,
    0.009174909442663193,
    -0.029381833970546722,
    -0.052743133157491684,
    -0.051897644996643066,
    -0.03240981325507164,
    -0.012263063341379166,
    -0.03084777109324932,
    -0.03978348523378372,
    0.02053428255021572,
    -0.10801924020051956,
    -0.022779038175940514,
    0.040964525192976,
    0.006263705436140299,
    0.04357180371880531,
    0.07044986635446548,
    0.08503977954387665,
    0.08377689123153687,
    -0.013806818053126335,
    -0.025185147300362587,
    -0.07973527163267136,
    0.042546529322862625,
    -0.019868997856974602,
    -0.12370725721120834,
    0.1247410774230957,
    0.020457088947296143,
    0.02568034827709198,
    0.04253870248794556,
    0.06628316640853882,
    -0.03783465549349785,
    0.006063712760806084,
    -0.03660110384225845,
    0.046176400035619736,
    -0.04726846516132355,
    0.042731739580631256,
    0.08440784364938736,
    0.0667857825756073,
    -0.061043888330459595,
    0.05056265741586685,
    -0.11133331805467606,
    -0.017296375706791878,
    -0.07645828276872635,
    0.06591765582561493,
    -0.09863688051700592,
    0.02041592262685299,
    0.011613867245614529,
    -0.02493046410381794,
    0.019650360569357872,
    0.0259891115128994,
    0.026718448847532272,
    -0.006500011309981346,
    -0.044758789241313934,
    -0.0331515334546566
  ]
}