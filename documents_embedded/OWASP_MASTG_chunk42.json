{
  "text": "+ bcanberepresentedasx = -(-a) - (-b). However,usingthesamereplacementrepre- sentation could be easily reversed, so it is recommended to add multiple substitution techniques for a single case and introducearandomfactor. Thistechniquecanbereversedduringdecompilation,butdependingonthecomplexityand depthofthesubstitutions,reversingitcanstillbetimeconsuming. Control Flow Flattening Controlflowflatteningreplacesoriginalcodewithamorecomplexrepresentation. Thetransformationbreaksthebodyof afunctionintobasicblocksandputsthemallinsideasingleinfiniteloopwithaswitchstatementthatcontrolstheprogram flow. This makes the program flow significantly harder to follow because it removes the natural conditional constructs thatusuallymakethecodeeasiertoread. 45\\nTheimageshowshowcontrolflowflatteningalterscode. See“ObfuscatingC++programsviacontrolflowflattening”for moreinformation. Dead Code Injection Thistechniquemakestheprogram’scontrolflowmorecomplexbyinjectingdeadcodeintotheprogram. Deadcodeis astubofcodethatdoesn’taffecttheoriginalprogram’sbehaviorbutincreasestheoverheadofthereverseengineering process. String Encryption Applications are often compiled with hardcoded keys, licences, tokens and endpoint URLs. By default, all of them are storedinplaintextinthedatasectionofanapplication’sbinary. Thistechniqueencryptsthesevaluesandinjectsstubs ofcodeintotheprogramthatwilldecryptthatdatabeforeitisusedbytheprogram. Packing Packing is a dynamic rewriting obfuscation technique which compresses or encrypts the original executable into data anddynamicallyrecoversitduringexecution. Packinganexecutablechangesthefilesignatureinanattempttoavoid signature-baseddetection. Debugging and Tracing Inthetraditionalsense,debuggingistheprocessofidentifyingandisolatingproblemsinaprogramaspartofthesoftware developmentlifecycle. Thesametoolsusedfordebuggingarevaluabletoreverseengineersevenwhenidentifyingbugs 46\\nisnottheprimarygoal. Debuggersenableprogramsuspensionatanypointduringruntime, inspectionoftheprocess’ internalstate,andevenregisterandmemorymodification. Theseabilitiessimplifyprograminspection. Debugging usually means interactive debugging sessions in which a debugger is attached to the running process. In contrast, tracing refers to passive logging of information about the app’s execution (such as API calls). Tracing can be doneinseveralways,includingdebuggingAPIs,functionhooks,andKerneltracingfacilities. Again,we’llcovermanyof thesetechniquesintheOS-specific“ReverseEngineeringandTampering”chapters. Advanced Techniques Formorecomplicatedtasks, suchasde-obfuscatingheavilyobfuscatedbinaries, youwon’tgetfarwithoutautomating certainpartsoftheanalysis. Forexample,understandingandsimplifyingacomplexcontrolflowgraphbasedonmanual analysisinthedisassemblerwouldtakeyouyears(andmostlikelydriveyoumadlongbeforeyou’redone). Instead,you canaugmentyourworkflowwithcustommadetools. Fortunately,moderndisassemblerscomewithscriptingandexten- sionAPIs,andmanyusefulextensionsareavailableforpopulardisassemblers. Therearealsoopensourcedisassembling enginesandbinaryanalysisframeworks. Asalwaysinhacking,theanything-goesruleapplies: simplyusewhateverismostefficient. Everybinaryisdifferent,and allreverseengineershavetheirownstyle. Often,thebestwaytoachieveyourgoalistocombineapproaches(suchas emulator-based tracing and symbolic execution). To get started, pick a good disassembler and/or reverse engineering framework,thengetcomfortablewiththeirparticularfeaturesandextensionAPIs. Ultimately,thebestwaytogetbetter istogethands-onexperience. Dynamic Binary Instrumentation Anotherusefulapproachfornativebinariesisdynamicbinaryinstrumentations(DBI).Instrumentationframeworkssuch as Valgrind and PIN support fine-grained instruction-level tracing of single processes. This is accomplished by insert- ing dynamically generated code at runtime. Valgrind compiles fine on Android, and pre-built binaries are available for download. TheValgrindREADMEincludesspecificcompilationinstructionsforAndroid. Emulation-based Dynamic Analysis Emulationisanimitationofacertaincomputerplatformorprogrambeingexecutedindifferentplatformorwithinanother program. Thesoftwareorhardwareperformingthisimitationiscalledanemulator. Emulatorsprovideamuchcheaper alternativetoanactualdevice,whereausercanmanipulateitwithoutworryingaboutdamagingthedevice. Thereare multipleemulatorsavailableforAndroid,butforiOStherearepracticallynoviableemulatorsavailable. iOSonlyhasa simulator,shippedwithinXcode. The difference between a simulator and an emulator often causes confusion and leads to use of the two terms inter- changeably, butinrealitytheyaredifferent, speciallyfortheiOSusecase. Anemulatormimicsboththesoftwareand hardwareenvironmentofatargetedplatform. Ontheotherhand,asimulatoronlymimicsthesoftwareenvironment. QEMUbasedemulatorsforAndroidtakeintoconsiderationtheRAM,CPU,batteryperformanceetc(hardwarecomponents) whilerunninganapplication,butinaniOSsimulatorthishardwarecomponentbehaviourisnottakenintoconsideration atall. TheiOSsimulatorevenlackstheimplementationoftheiOSkernel,asaresultifanapplicationisusingsyscallsit cannotbeexecutedinthissimulator. Insimplewords,anemulatorisamuchcloserimitationofthetargetedplatform,whileasimulatormimicsonlyapartof it. Runninganappintheemulatorgivesyoupowerfulwaystomonitorandmanipulateitsenvironment. Forsomereverse engineeringtasks,especiallythosethatrequirelow-levelinstructiontracing,emulationisthebest(oronly)choice. Un- fortunately,thistypeofanalysisisonlyviableforAndroid,becausenofreeoropensourceemulatorexistsforiOS(the iOSsimulatorisnotanemulator,andappscompiledforaniOSdevicedon’trunonit). TheonlyiOSemulatoravailable isacommercialSaaSsolution-Corellium. We’llprovideanoverviewofpopularemulation-basedanalysisframeworksfor Androidinthe“TamperingandReverseEngineeringonAndroid”chapter. 47\\nCustom Tooling with Reverse Engineering Frameworks EventhoughmostprofessionalGUI-baseddisassemblersfeaturescriptingfacilitiesandextensibility,theyaresimplynot well-suitedtosolvingparticularproblems. Reverseengineeringframeworksallowyoutoperformandautomateanykind ofreversingtaskwithoutdependingonaheavy-weightGUI.Notably,mostreversingframeworksareopensourceand/or availableforfree. Popularframeworkswithsupportformobilearchitecturesincluderadare2andAngr. Example: Program Analysis with Symbolic/Concolic Execution In the late 2000s, testing based on symbolic execution has become a popular way to identify security vulnerabilities. Symbolic “execution” actually refers to the process of representing possible paths through a program as formulas in first-order logic. Satisfiability Modulo Theories (SMT) solvers are used to check the satisfiability of these formulas and provide solutions, including concrete values of the variables needed to reach a certain point of execution on the path correspondingtothesolvedformula. Insimplewords,symbolicexecutionismathematicallyanalyzingaprogramwithoutexecutingit. Duringanalysis,each unknowninputisrepresentedasamathematicalvariable(asymbolicvalue),andhencealltheoperationsperformedon thesevariablesarerecordedasatreeofoperations(aka. AST(abstractsyntaxtree),fromcompilertheory). TheseASTs can be translated into so-called constraints that will be interpreted by a SMT solver. In the end of this analysis, a final mathematicalequationisobtained,inwhichthevariablesaretheinputswhosevaluesarenotknown. SMTsolversare specialprogramswhichsolvetheseequationstogivepossiblevaluesfortheinputvariablesgivenafinalstate. Toillustratethis,imagineafunctionwhichtakesoneinput(x)andmultipliesitbythevalueofasecondinput(y). Finally, thereisanifconditionwhichchecksifthevaluecalculatedisgreaterthanthevalueofanexternalvariable(z),andreturns “success”iftrue,elsereturns“fail”. Theequationforthisoperationwillbe(x * y) > z. Ifwewantthefunctiontoalwaysreturn“success”(finalstate),wecantelltheSMTsolvertocalculatethevaluesforx andy(inputvariables)whichsatisfythecorrespondingequation. Asisthecaseforglobalvariables,theirvaluecanbe changedfromoutsidethisfunction,whichmayleadtodifferentoutputswheneverthisfunctionisexecuted. Thisaddsto additionalcomplexityindeterminingcorrectsolution. Internally SMT solvers use various equation solving techniques to generate solution for such equations. Some of the techniquesareveryadvancedandtheirdiscussionisbeyondthescopeofthisbook. In a real world situation, the functions are much more complex than the above example. The increased complexity of thefunctionscanposesignificantchallengesforclassicalsymbolicexecution. Someofthechallengesaresummarised below: • Loopsandrecursionsinaprogrammayleadtoinfiniteexecutiontree. • Multipleconditionalbranchesornestedconditionsmayleadtopathexplosion. • ComplexequationsgeneratedbysymbolicexecutionmaynotbesolvablebySMTsolversbecauseoftheirlimita- tions. • Programisusingsystemcalls,librarycallsornetworkeventswhichcannotbehandledbysymbolicexecution. Toovercomethesechallenges,typically,symbolicexecutioniscombinedwithothertechniquessuchasdynamicexecution (also called concrete execution) to mitigate the path explosion problem specific to classical symbolic execution. This combinationofconcrete(actual)andsymbolicexecutionisreferredtoasconcolicexecution(thenameconcolicstems fromconcreteandsymbolic),sometimesalsocalledasdynamicsymbolicexecution. To visualize this, in the above example, we can",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 42
  },
  "embedding": [
    -0.09230522066354752,
    0.0036576332058757544,
    0.02926255762577057,
    -0.06236669421195984,
    -0.06878490000963211,
    0.04596320539712906,
    0.02241327427327633,
    0.01527233887463808,
    -0.06620685756206512,
    0.02006857469677925,
    0.0073569524101912975,
    -0.08910302072763443,
    0.04444116726517677,
    -0.07798705995082855,
    0.00955467950552702,
    -0.005549336317926645,
    0.008090962655842304,
    0.032174088060855865,
    -0.07666724175214767,
    0.021652773022651672,
    0.08608181774616241,
    0.0035667559131979942,
    -0.04620806872844696,
    0.024308377876877785,
    0.007880269549787045,
    0.05961088836193085,
    -0.05900827422738075,
    -0.08234052360057831,
    0.0522640198469162,
    -0.03333619609475136,
    0.004662959836423397,
    0.063881516456604,
    0.008450621739029884,
    0.006722820922732353,
    0.07283421605825424,
    0.028213368728756905,
    -0.011819779872894287,
    -0.02442285604774952,
    -0.05783631652593613,
    -0.05767325684428215,
    -0.1084190309047699,
    0.05434529110789299,
    -0.03176792338490486,
    0.05273854732513428,
    -0.0038899914361536503,
    -0.00026599710690788925,
    -0.021179789677262306,
    -0.0383761003613472,
    -0.023080475628376007,
    -0.005384232848882675,
    -0.027281861752271652,
    0.020536556839942932,
    0.02719266526401043,
    0.0941862165927887,
    0.02531345933675766,
    -0.004976172465831041,
    -0.0180166307836771,
    0.04921341314911842,
    0.028779013082385063,
    0.035193074494600296,
    -0.05984398350119591,
    0.03921615704894066,
    -0.008697821758687496,
    -0.024098658934235573,
    0.016582801938056946,
    0.07459545880556107,
    -0.059029560536146164,
    -0.05201103538274765,
    0.030285682529211044,
    -0.0027483669109642506,
    -0.10399675369262695,
    0.00018084760813508183,
    -0.06772966682910919,
    0.05498725548386574,
    0.01183412317186594,
    0.03065423108637333,
    0.001475704018957913,
    -0.0017082864651456475,
    -0.06849908083677292,
    -0.11071576923131943,
    0.09774337708950043,
    -0.00902116484940052,
    0.016583556309342384,
    0.04790236055850983,
    0.037687625735998154,
    0.004262126516550779,
    -0.028608061373233795,
    -0.07838015258312225,
    0.07501284778118134,
    0.1178872138261795,
    0.01605275273323059,
    -0.0757918655872345,
    0.04059114307165146,
    -0.045742232352495193,
    0.10401175171136856,
    -0.046716805547475815,
    -0.04536779969930649,
    -0.013344278559088707,
    -0.005396378226578236,
    0.019730402156710625,
    -0.023753460496664047,
    -0.012964300811290741,
    -0.0005027230945415795,
    -0.04845213517546654,
    0.03889798745512962,
    -0.05715586245059967,
    0.02409709431231022,
    0.015105441212654114,
    0.04255763813853264,
    -0.035866983234882355,
    0.04354632645845413,
    0.0073106796480715275,
    0.045023586601018906,
    -0.09847651422023773,
    0.013719982467591763,
    0.05932566523551941,
    -0.030754217877984047,
    0.017034249380230904,
    0.04027347266674042,
    -0.007509427610784769,
    0.024030452594161034,
    0.0034093649592250586,
    -0.004325995687395334,
    -0.04211089760065079,
    0.013636494055390358,
    -0.05788739398121834,
    -0.029950790107250214,
    1.730671369571229e-32,
    -0.031678974628448486,
    -0.03412435203790665,
    -0.08057466894388199,
    0.08531158417463303,
    0.0013123928802087903,
    0.013276075012981892,
    0.05183073878288269,
    0.06783637404441833,
    -0.009887736290693283,
    -0.032577674835920334,
    -0.032544493675231934,
    -0.019999653100967407,
    -0.040095098316669464,
    0.0076865339651703835,
    -0.01710382103919983,
    -0.04733223095536232,
    -0.033713385462760925,
    0.0621536448597908,
    -0.08842340856790543,
    0.025186967104673386,
    0.06084985285997391,
    0.027641301974654198,
    -0.02706168219447136,
    -0.05498744919896126,
    0.012861109338700771,
    -0.04494862258434296,
    -0.010407946072518826,
    0.04774823784828186,
    0.06398452073335648,
    0.024966830387711525,
    -0.06308051943778992,
    -0.004166786093264818,
    -0.04047413542866707,
    0.011304537765681744,
    -0.012136523611843586,
    -0.01684374362230301,
    0.015773490071296692,
    -0.03216857090592384,
    0.05837617814540863,
    -0.01975121721625328,
    -0.06475834548473358,
    0.0046076783910393715,
    -0.08775682747364044,
    -0.055931463837623596,
    0.06164304539561272,
    -0.10097292810678482,
    -0.04569714888930321,
    0.023212138563394547,
    0.010466184467077255,
    0.023431776091456413,
    0.1241125613451004,
    0.10020777583122253,
    0.03003930300474167,
    -0.058221228420734406,
    -0.11923427134752274,
    -0.03690721467137337,
    -0.016924051567912102,
    0.0224843081086874,
    0.017493588849902153,
    0.1114162802696228,
    -0.014647134579718113,
    0.09829017519950867,
    -0.0071566663682460785,
    -0.0098985331133008,
    0.018105769529938698,
    0.010117828845977783,
    -0.008119693957269192,
    -0.06903821229934692,
    -0.018565384671092033,
    -0.08411042392253876,
    -0.09331869333982468,
    -0.021983761340379715,
    -0.021331582218408585,
    0.041231025010347366,
    0.013695857487618923,
    -0.052513524889945984,
    -0.016100965440273285,
    0.020964110270142555,
    -0.025622975081205368,
    -0.10982488840818405,
    -0.033290136605501175,
    0.053312916308641434,
    0.056933119893074036,
    0.04739531874656677,
    0.010410796850919724,
    -0.032347552478313446,
    0.012274032458662987,
    -0.09692862629890442,
    -0.08706753700971603,
    0.015202872455120087,
    0.040355391800403595,
    -0.07245992124080658,
    0.007165289018303156,
    0.056132469326257706,
    0.06750211864709854,
    -1.6189788350919722e-32,
    0.06392468512058258,
    -0.0007734023383818567,
    -0.06674279272556305,
    -0.023477967828512192,
    -0.10018221288919449,
    -0.03238853067159653,
    0.05021917074918747,
    -0.015682650730013847,
    0.015030214563012123,
    -0.055143289268016815,
    0.010770861059427261,
    0.056927863508462906,
    -0.05625297874212265,
    0.0159748587757349,
    0.03555116429924965,
    -0.015324054285883904,
    0.012114674784243107,
    -0.022110572084784508,
    -0.058018773794174194,
    0.09835773706436157,
    0.07508224248886108,
    0.08095890283584595,
    -0.0977538600564003,
    0.019635897129774094,
    -0.020983219146728516,
    0.03359958529472351,
    -0.012807332910597324,
    0.1487015187740326,
    0.12554892897605896,
    -0.00544729083776474,
    -0.01689305156469345,
    0.04336177557706833,
    -0.0946011170744896,
    0.0018150507239624858,
    -0.07064766436815262,
    -0.08946723490953445,
    -0.012465346604585648,
    -0.013092894107103348,
    -0.06313157826662064,
    0.01429062895476818,
    0.06839177012443542,
    0.02087605558335781,
    -0.053762175142765045,
    0.10607070475816727,
    0.052751392126083374,
    0.040936630219221115,
    -0.0302739217877388,
    -0.055866584181785583,
    0.040331125259399414,
    0.020033331587910652,
    0.0014363433001562953,
    -0.06915142387151718,
    -0.002022410975769162,
    0.04321100935339928,
    -0.01583842746913433,
    0.01825925149023533,
    0.09828082472085953,
    -0.08638007193803787,
    -0.03662581741809845,
    -0.024048874154686928,
    0.04113725945353508,
    -0.02112570032477379,
    0.09882210195064545,
    -0.07700200378894806,
    0.09723512828350067,
    0.06719421595335007,
    0.018383875489234924,
    0.0036873191129416227,
    0.011256440542638302,
    -0.0625874400138855,
    0.08064496517181396,
    -0.03555579483509064,
    -0.05086516961455345,
    -0.04918528348207474,
    0.018475567921996117,
    0.06855829805135727,
    0.07070055603981018,
    -0.041428692638874054,
    -0.021534819155931473,
    0.05119388923048973,
    -0.09312877804040909,
    -0.007021292578428984,
    0.016629941761493683,
    0.06147146597504616,
    -0.01770162768661976,
    0.05863942578434944,
    -0.018268685787916183,
    -0.02982521243393421,
    -0.005509735085070133,
    0.030863409861922264,
    -0.14372745156288147,
    0.013272359035909176,
    0.07568659633398056,
    -0.0051459758542478085,
    -0.05306432023644447,
    -6.753342773890836e-08,
    -0.07888784259557724,
    -0.04387614503502846,
    -0.03877411037683487,
    0.02610989473760128,
    0.041430260986089706,
    -0.0037358272820711136,
    -0.040319547057151794,
    0.0028671491891145706,
    -0.015897778794169426,
    -0.10769136250019073,
    -0.01768222451210022,
    0.007184277754276991,
    -0.012442681938409805,
    -0.06670456379652023,
    0.03040410205721855,
    -0.050251301378011703,
    -0.04497561976313591,
    -0.0282826479524374,
    -0.05589349567890167,
    0.01369240041822195,
    -0.046655599027872086,
    -0.04612835869193077,
    0.011025111190974712,
    0.02302977442741394,
    0.03434213623404503,
    -0.02001974545419216,
    0.09877263754606247,
    0.060535673052072525,
    0.05477834865450859,
    0.06340382993221283,
    0.012584920972585678,
    0.02600962668657303,
    0.04731627553701401,
    0.047367483377456665,
    -0.08769822120666504,
    0.009852470830082893,
    0.045667342841625214,
    0.0393575094640255,
    0.028971882537007332,
    -0.0471392497420311,
    0.04657113179564476,
    0.029400404542684555,
    -0.06639004498720169,
    0.019498106092214584,
    0.03322325646877289,
    -0.04523773863911629,
    0.08119694143533707,
    0.005933462176471949,
    -0.021609405055642128,
    -0.01587498188018799,
    -0.05485405772924423,
    0.04719449579715729,
    -0.044646456837654114,
    0.09171754121780396,
    0.03611728176474571,
    -0.005530814174562693,
    0.007283455226570368,
    -0.01949354261159897,
    0.03633159399032593,
    0.13616108894348145,
    -0.03504890948534012,
    0.015672774985432625,
    0.02531319484114647,
    -0.022535134106874466
  ]
}