{
  "text": "• Dangling pointers: These occur when an object with an incoming reference to a memory location is deleted ordeallocated, buttheobjectpointerisnotreset. Iftheprogramlaterusesthedanglingpointertocallavirtual functionofthealreadydeallocatedobject,itispossibletohijackexecutionbyoverwritingtheoriginalvtablepointer. Alternatively,itispossibletoreadorwriteobjectvariablesorothermemorystructuresreferencedbyadangling pointer. • Use-after-free: Thisreferstoaspecialcaseofdanglingpointersreferencingreleased(deallocated)memory. After amemoryaddressiscleared,allpointersreferencingthelocationbecomeinvalid,causingthememorymanagerto returntheaddresstoapoolofavailablememory. Whenthismemorylocationiseventuallyre-allocated,accessing theoriginalpointerwillreadorwritethedatacontainedinthenewlyallocatedmemory. Thisusuallyleadstodata corruptionandundefinedbehavior,butcraftyattackerscansetuptheappropriatememorylocationstoleverage controloftheinstructionpointer. • Integeroverflows: Whentheresultofanarithmeticoperationexceedsthemaximumvaluefortheintegertype defined by the programmer, this results in the value “wrapping around” the maximum integer value, inevitably resultinginasmallvaluebeingstored. Conversely,whentheresultofanarithmeticoperationissmallerthanthe minimumvalueoftheintegertype,anintegerunderflowoccurswheretheresultislargerthanexpected. Whether aparticularintegeroverflow/underflowbugisexploitabledependsonhowtheintegerisused. Forexample,ifthe integertypeweretorepresentthelengthofabuffer,thiscouldcreateabufferoverflowvulnerability. • Formatstringvulnerabilities: Whenuncheckeduserinputispassedtotheformatstringparameteroftheprintf familyofCfunctions,attackersmayinjectformattokenssuchas‘%c’and‘%n’toaccessmemory. Formatstring bugsareconvenienttoexploitduetotheirflexibility. Shouldaprogramoutputtheresultofthestringformatting operation,theattackercanreadandwritetomemoryarbitrarily,thusbypassingprotectionfeaturessuchasASLR. Theprimarygoalinexploitingmemorycorruptionisusuallytoredirectprogramflowintoalocationwheretheattackerhas placedassembledmachineinstructionsreferredtoasshellcode. OniOS,thedataexecutionpreventionfeature(asthe nameimplies)preventsexecutionfrommemorydefinedasdatasegments. Tobypassthisprotection,attackersleverage return-orientedprogramming(ROP).Thisprocessinvolveschainingtogethersmall,pre-existingcodechunks(“gadgets”) in the text segment where these gadgets may execute a function useful to the attacker or, call mprotect to change memoryprotectionsettingsforthelocationwheretheattackerstoredtheshellcode. Android apps are, for the most part, implemented in Java which is inherently safe from memory corruption issues by design. However,nativeappsutilizingJNIlibrariesaresusceptibletothiskindofbug. Inrarecases,Androidappsthatuse XML/JSONparserstounwrapJavaobjectsarealsosubjecttomemorycorruptionbugs. Anexampleofsuchvulnerability wasfoundinthePayPalapp. Similarly,iOSappscanwrapC/C++callsinObj-CorSwift,makingthemsusceptibletothesekindofattacks. Example: Thefollowingcodesnippetshowsasimpleexampleforaconditionresultinginabufferoverflowvulnerability. void copyData(char *userId){ char smallBuffer[10];//sizeof10 strcpy(smallBuffer,userId); } Toidentifypotentialbufferoverflows,lookforusesofunsafestringfunctions(strcpy,strcat,otherfunctionsbeginning withthe“str”prefix,etc.) andpotentiallyvulnerableprogrammingconstructs,suchascopyinguserinputintoalimited- sizebuffer. Thefollowingshouldbeconsideredredflagsforunsafestringfunctions: • strcat 81\\n• strcpy • strncat • strlcat • strncpy • strlcpy • sprintf • snprintf • gets Also,lookforinstancesofcopyoperationsimplementedas“for”or“while”loopsandverifylengthchecksareperformed correctly. Verifythatthefollowingbestpracticeshavebeenfollowed: • Whenusingintegervariablesforarrayindexing,bufferlengthcalculations,oranyothersecurity-criticaloperation, verifythatunsignedintegertypesareusedandperformpreconditiontestsareperformedtopreventthepossibility ofintegerwrapping. • Theappdoesnotuseunsafestringfunctionssuchasstrcpy,mostotherfunctionsbeginningwiththe“str”prefix, sprint,vsprintf,gets,etc.; • IftheappcontainsC++code,ANSIC++stringclassesareused; • Incaseofmemcpy,makesureyoucheckthatthetargetbufferisatleastofequalsizeasthesourceandthatboth buffersarenotoverlapping. • iOSappswritteninObjective-CuseNSStringclass. CappsoniOSshoulduseCFString,theCoreFoundationrepre- sentationofastring. • Nountrusteddataisconcatenatedintoformatstrings. Static Analysis Security Testing Considerations Staticcodeanalysisoflow-levelcodeisacomplextopicthatcouldeasilyfillitsownbook. AutomatedtoolssuchasRATS combinedwithlimitedmanualinspectioneffortsareusuallysufficienttoidentifylow-hangingfruits. However, memory corruption conditions often stem from complex causes. For example, a use-after-free bug may actually be the result of an intricate, counter-intuitive race condition not immediately apparent. Bugs manifesting from deep instances of overlookedcodedeficienciesaregenerallydiscoveredthroughdynamicanalysisorbytesterswhoinvesttimetogaina deepunderstandingoftheprogram. Dynamic Analysis Security Testing Considerations Memory corruption bugs are best discovered via input fuzzing: an automated black-box software testing technique in whichmalformeddataiscontinuallysenttoanapptosurveyforpotentialvulnerabilityconditions. Duringthisprocess, theapplicationismonitoredformalfunctionsandcrashes. Shouldacrashoccur,thehope(atleastforsecuritytesters) isthattheconditionscreatingthecrashrevealanexploitablesecurityflaw. Fuzztestingtechniquesorscripts(oftencalled“fuzzers”)willtypicallygeneratemultipleinstancesofstructuredinputina semi-correctfashion. Essentially,thevaluesorargumentsgeneratedareatleastpartiallyacceptedbythetargetapplica- tion,yetalsocontaininvalidelements,potentiallytriggeringinputprocessingflawsandunexpectedprogrambehaviors. A good fuzzer exposes a substantial amount of possible program execution paths (i.e. high coverage output). Inputs are either generated from scratch (“generation-based”) or derived from mutating known, valid input data (“mutation- based”). Formoreinformationonfuzzing,refertotheOWASPFuzzingGuide. Binary Protection Mechanisms Position Independent Code PIC(PositionIndependentCode)iscodethat,beingplacedsomewhereintheprimarymemory,executesproperlyregard- lessofitsabsoluteaddress. PICiscommonlyusedforsharedlibraries,sothatthesamelibrarycodecanbeloadedina 82\\nlocationineachprogramaddressspacewhereitdoesnotoverlapwithothermemoryinuse(forexample,othershared libraries). PIE (Position Independent Executable) are executable binaries made entirely from PIC. PIE binaries are used to enable ASLR(AddressSpaceLayoutRandomization)whichrandomlyarrangestheaddressspacepositionsofkeydataareasof aprocess,includingthebaseoftheexecutableandthepositionsofthestack,heapandlibraries. Memory Management Automatic Reference Counting ARC(AutomaticReferenceCounting)isamemorymanagementfeatureoftheClangcompilerexclusivetoObjective-Cand Swift. ARCautomaticallyfreesupthememoryusedbyclassinstanceswhenthoseinstancesarenolongerneeded. ARC differsfromtracinggarbagecollectioninthatthereisnobackgroundprocessthatdeallocatestheobjectsasynchronously atruntime. Unliketracinggarbagecollection,ARCdoesnothandlereferencecyclesautomatically. Thismeansthataslongasthere are“strong”referencestoanobject,itwillnotbedeallocated. Strongcross-referencescanaccordinglycreatedeadlocks andmemoryleaks. Itisuptothedevelopertobreakcyclesbyusingweakreferences. Youcanlearnmoreabouthowit differsfromGarbageCollectionhere. Garbage Collection GarbageCollection(GC)isanautomaticmemorymanagementfeatureofsomelanguagessuchasJava/Kotlin/Dart. The garbage collector attempts to reclaim memory which was allocated by the program, but is no longer referenced—also called garbage. The Android runtime (ART) makes use of an improved version of GC. You can learn more about how it differsfromARChere. Manual Memory Management Manualmemory managementistypically requiredin native librarieswritten inC/C++ whereARCand GC donot apply. Thedeveloperisresponsiblefordoingpropermemorymanagement. Manualmemorymanagementisknowntoenable several major classes of bugs into a program when used incorrectly, notably violations of memory safety or memory leaks. Moreinformationcanbefoundin“MemoryCorruptionBugs”. Stack Smashing Protection Stackcanarieshelppreventstackbufferoverflowattacksbystoringahiddenintegervalueonthestackrightbeforethe return pointer. This value is then validated before the return statement of the function is executed. A buffer overflow attack often overwrites a region of memory in order to overwrite the return pointer and take over the program flow. If stackcanariesareenabled,theywillbeoverwrittenaswellandtheCPUwillknowthatthememoryhasbeentampered with. Stackbufferoverflowisatypeofthemoregeneralprogrammingvulnerabilityknownasbufferoverflow(orbufferoverrun). Overfillingabufferonthestackismorelikelytoderailprogramexecutionthanoverfillingabufferontheheapbecause thestackcontainsthereturnaddressesforallactivefunctioncalls. 83\\nMobile App User Privacy Protection Overview IMPORTANTDISCLAIMER:TheMASTGisnotalegalhandbook. Therefore,wewillnotdeepdiveintotheGDPRorother possibly relevant legislation here. This chapter is meant to introduce you to the topics and provide you with essential referencesthatyoucanusetocontinueresearchingbyyourself. We’llalsodoourbestefforttoprovideyouwithtestsor guidelinesfortestingtheprivacy-relatedrequirementslistedintheOWASPMASVS. The Main Problem Mobileappshandleallkindsofsensitiveuserdata,fromidentificationandbankinginformationtohealthdata. Thereisan understandableconcernabouthowthisdataishandledandwhereitendsup. Wecanalsotalkabout“benefitsusersget fromusingtheapps”vs“therealpricethattheyarepayingforit”(usuallyandunfortunatelywithoutevenbeingaware ofit). The Solution",
  "metadata": {
    "doc_id": "OWASP_MASTG",
    "chunk_id": 53
  },
  "embedding": [
    0.010456908494234085,
    -0.0310931745916605,
    -0.039238668978214264,
    0.04446279630064964,
    0.004164997022598982,
    0.07296749949455261,
    0.05857088044285774,
    -0.0004714213719125837,
    0.015291907824575901,
    0.028977621346712112,
    0.04308934509754181,
    0.006224790122359991,
    0.02319394424557686,
    -0.020681465044617653,
    0.02450014464557171,
    0.03082778863608837,
    0.020707564428448677,
    -0.011905129067599773,
    -0.019049134105443954,
    0.09013242274522781,
    0.04754520580172539,
    0.02812970243394375,
    -0.030739281326532364,
    0.08001695573329926,
    0.02297598123550415,
    0.019044717773795128,
    -0.01938740909099579,
    -0.07980430126190186,
    -0.006912051700055599,
    -0.04568598046898842,
    -0.049845121800899506,
    0.010769068263471127,
    -0.11906635761260986,
    0.015045933425426483,
    0.11190283298492432,
    0.05243232473731041,
    -0.03187441825866699,
    -0.0403955839574337,
    -0.004029938485473394,
    -0.057809799909591675,
    0.06134428083896637,
    0.029858101159334183,
    -0.06264570355415344,
    0.024108681827783585,
    0.010798699222505093,
    0.034268736839294434,
    -0.007686200086027384,
    -0.0141755985096097,
    -0.05619582533836365,
    0.0010858150199055672,
    0.01525336503982544,
    0.07555665075778961,
    -0.0039005486760288477,
    0.04943667724728584,
    0.029699673876166344,
    0.049326229840517044,
    0.02827349863946438,
    0.025133881717920303,
    0.02886626310646534,
    0.0730244517326355,
    0.009744812734425068,
    -0.00014250492677092552,
    0.015276347286999226,
    -0.0479750856757164,
    -0.013567443937063217,
    -0.04201313480734825,
    0.0522579699754715,
    -0.0383150540292263,
    0.019393451511859894,
    0.030485419556498528,
    -0.037917956709861755,
    0.07690871506929398,
    -0.031099550426006317,
    0.056986209005117416,
    0.061243921518325806,
    0.11334235966205597,
    -0.04485135152935982,
    -0.011174356564879417,
    -0.012192307971417904,
    -0.1218985840678215,
    0.03883926570415497,
    -0.006835710722953081,
    0.015607498586177826,
    0.008344205096364021,
    0.01982056349515915,
    0.025679128244519234,
    -0.026282144710421562,
    -0.06543367356061935,
    0.06977782398462296,
    0.061890389770269394,
    0.037712112069129944,
    -0.052635449916124344,
    -0.0682731345295906,
    -0.03876538947224617,
    0.04697916656732559,
    -0.0508628711104393,
    0.030747706070542336,
    -0.06873700022697449,
    -0.052832603454589844,
    -0.0010635312646627426,
    0.049068842083215714,
    0.03297073766589165,
    0.01041049137711525,
    -0.003841240657493472,
    -0.002048760885372758,
    -0.011449052952229977,
    -0.051989294588565826,
    -0.06261669099330902,
    -0.07353365421295166,
    -0.02240002155303955,
    -0.031989067792892456,
    0.004340131301432848,
    0.05221373960375786,
    -0.04538361728191376,
    -0.030716896057128906,
    0.01076334249228239,
    -0.056966666132211685,
    -0.04681859537959099,
    0.04794176667928696,
    -0.01470872201025486,
    -0.052144650369882584,
    -0.039656855165958405,
    0.06434782594442368,
    -0.00526457978412509,
    -0.13540300726890564,
    -0.06613072007894516,
    -0.08105471730232239,
    2.074161986077834e-32,
    -0.025749899446964264,
    -0.0709332749247551,
    -0.05676344409584999,
    -0.011016345582902431,
    -0.007739008869975805,
    -0.047789350152015686,
    -0.043940745294094086,
    0.04838187247514725,
    -0.02094011753797531,
    -0.06926319003105164,
    -0.0031469000969082117,
    -0.05498269572854042,
    0.030128024518489838,
    0.010808974504470825,
    0.05723060294985771,
    -0.031440578401088715,
    0.020578688010573387,
    0.10359591990709305,
    -0.0869772657752037,
    0.017988357692956924,
    -0.008418204262852669,
    0.029386373236775398,
    -0.03182568773627281,
    -0.033386632800102234,
    -0.026648417115211487,
    0.03255954384803772,
    -0.04397864267230034,
    -0.002355617471039295,
    -0.001502145896665752,
    0.056518323719501495,
    -0.07492198795080185,
    0.06195220351219177,
    -0.08300679922103882,
    -0.03002428449690342,
    0.01971479505300522,
    -0.05009065568447113,
    0.020390942692756653,
    -0.059762194752693176,
    -0.02664010412991047,
    -0.11712273210287094,
    -0.013060993514955044,
    -9.2977614258416e-05,
    -0.09751991182565689,
    -0.009991700761020184,
    0.015169152058660984,
    -0.12401919811964035,
    0.012016285210847855,
    0.004899849649518728,
    -0.018050065264105797,
    0.04487493261694908,
    -0.0009034133981913328,
    0.036828283220529556,
    0.0020236640702933073,
    -0.06321776658296585,
    -0.09221029281616211,
    -0.01955433189868927,
    -0.02043568156659603,
    -0.009808370843529701,
    0.08036995679140091,
    0.10299663245677948,
    0.04757382720708847,
    0.05706971883773804,
    -0.0477302148938179,
    -0.08898370712995529,
    0.02037416584789753,
    -0.023353157564997673,
    -0.008315805345773697,
    -0.02835475467145443,
    0.0035154700744897127,
    -0.05693788453936577,
    0.018845558166503906,
    -0.0007307374035008252,
    0.042243845760822296,
    0.08632686734199524,
    -0.08428167551755905,
    -0.05352740362286568,
    -0.03149942308664322,
    0.016867781057953835,
    -0.026697127148509026,
    -0.08717941492795944,
    0.10552820563316345,
    -0.013528349809348583,
    0.04408343881368637,
    -0.027626492083072662,
    -0.05785949528217316,
    -0.08365838974714279,
    0.047887008637189865,
    -0.16690686345100403,
    -0.09444421529769897,
    0.07808998972177505,
    0.07215235382318497,
    -0.022313658148050308,
    -0.03968929126858711,
    0.0424889512360096,
    -0.036051563918590546,
    -2.0493743367020445e-32,
    0.01709464192390442,
    -0.013851303607225418,
    -0.06676779687404633,
    -0.003476277459412813,
    -0.040273722261190414,
    -0.04906979575753212,
    -0.08379950374364853,
    0.0280056893825531,
    -0.04865449666976929,
    -0.10013940185308456,
    -0.07852085679769516,
    0.015551219694316387,
    0.0012374288635328412,
    0.031501758843660355,
    0.057067904621362686,
    -0.008232427760958672,
    0.029302414506673813,
    -0.07542041689157486,
    -0.06264087557792664,
    0.0731082633137703,
    0.07382210344076157,
    0.005180682521313429,
    0.05476374924182892,
    -0.03574640676379204,
    -0.0012855157256126404,
    0.0382370688021183,
    -0.027187233790755272,
    0.020577868446707726,
    0.03968878090381622,
    0.023812049999833107,
    0.0335562638938427,
    0.02680780552327633,
    -0.05278956890106201,
    -0.011459514498710632,
    0.04177447035908699,
    -0.06223249062895775,
    -0.01342103537172079,
    -0.04991018772125244,
    -0.010291744954884052,
    -0.05569377914071083,
    0.17189469933509827,
    0.046109624207019806,
    0.022498393431305885,
    0.012845389544963837,
    0.08187302947044373,
    0.0331076979637146,
    -0.025063589215278625,
    0.06284747272729874,
    0.05312468856573105,
    0.03021719492971897,
    -0.03306906297802925,
    -0.07048484683036804,
    -0.008317770436406136,
    0.043338801711797714,
    -0.04622804373502731,
    0.0721130222082138,
    0.13162559270858765,
    -0.06401468813419342,
    0.06514443457126617,
    -0.053862858563661575,
    0.032903850078582764,
    -0.052819352596998215,
    -0.005102185532450676,
    -0.020227519795298576,
    0.08138380199670792,
    0.065083809196949,
    0.05487833544611931,
    -0.042429499328136444,
    -0.014570208266377449,
    0.020812947303056717,
    -0.0018009846098721027,
    0.013445309363305569,
    -0.050695788115262985,
    -0.10407205671072006,
    0.052412837743759155,
    0.09362161159515381,
    -0.023050930351018906,
    -0.040942925959825516,
    -0.03362942114472389,
    -0.04613848403096199,
    -0.061492227017879486,
    0.033952683210372925,
    -0.00967344455420971,
    0.008267287164926529,
    0.03612303361296654,
    -0.006195486057549715,
    -0.05032508447766304,
    0.0195718165487051,
    -0.066960908472538,
    -0.011526443995535374,
    -0.05022023990750313,
    -0.045331425964832306,
    -0.07799682021141052,
    0.0858471542596817,
    -0.04950523376464844,
    -6.827485066196459e-08,
    -0.09635576605796814,
    -0.016411447897553444,
    0.006799887865781784,
    0.07215914875268936,
    0.08936619013547897,
    -0.07257235050201416,
    0.0021503109019249678,
    0.06056790426373482,
    0.03904648497700691,
    -0.013647924177348614,
    -0.05977785587310791,
    -0.03200521320104599,
    -0.0629393607378006,
    0.011134866625070572,
    0.051820866763591766,
    -0.03616141155362129,
    0.005815965589135885,
    0.02075211890041828,
    -0.05299883708357811,
    0.003898728173226118,
    -0.035764068365097046,
    -0.007838108576834202,
    0.03197895362973213,
    -0.03318386897444725,
    0.03467726334929466,
    0.007530957460403442,
    0.09463131427764893,
    0.10186561197042465,
    0.0701625719666481,
    0.010672472417354584,
    0.02116258256137371,
    0.006983049679547548,
    0.019857170060276985,
    0.00796784833073616,
    -0.07544364780187607,
    0.09782497584819794,
    -0.04055033251643181,
    0.030294373631477356,
    -0.001942437025718391,
    -0.0363759845495224,
    0.012130732648074627,
    0.039570946246385574,
    0.02039797231554985,
    0.0821736603975296,
    0.0857132226228714,
    0.026820216327905655,
    -0.0031854650005698204,
    0.06696408241987228,
    0.0013710649218410254,
    -0.06268368661403656,
    -0.15874092280864716,
    -0.011496197432279587,
    -0.04138672351837158,
    0.058753084391355515,
    -0.048482075333595276,
    -0.01823367550969124,
    -0.0016333351377397776,
    -0.012996857985854149,
    0.03193427249789238,
    0.04205184057354927,
    0.017987437546253204,
    -0.006794467102736235,
    -0.0483049638569355,
    0.04766711965203285
  ]
}