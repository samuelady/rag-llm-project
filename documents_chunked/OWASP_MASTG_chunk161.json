{"text": "Opened IfyouwanttoknowmoreaboutwhichfunctionactuallyopenstheURLandhowthedataisactuallybeinghandledyou shouldkeepinvestigating. ExtendthepreviouscommandinordertofindoutifthereareanyotherfunctionsinvolvedintoopeningtheURL. frida-trace -UTelegram -m\"*[**restorationHandler*]\" -i\"*open*Url*\" -iincludesanymethod. Youcanalsouseaglobpatternhere(e.g.-i \"*open*Url*\"means“includeanyfunction containing‘open’,then‘Url’andsomethingelse”) Again,wefirstletfrida-tracegeneratethestubsin__handlers__/: $frida-trace -UTelegram -m\"*[**restorationHandler*]\" -i\"*open*Url*\" Instrumentingfunctions... -[AppDelegateapplication:continueUserActivity:restorationHandler:] $S10TelegramUI0A19ApplicationBindingsC16openUniversalUrlyySS_AA0ac4OpenG10Completion... $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData18application... $S10TelegramUI31AuthorizationSequenceControllerC7account7strings7openUrl5apiId0J4HashAC0A4Core19... ... Nowyoucanseealonglistoffunctionsbutwestilldon’tknowwhichoneswillbecalled. Triggertheuniversallinkagain andobservethetraces. /*TID0x303 */ 298382ms -[AppDelegate application:0x10556b3c0continueUserActivity:0x1c4237780 restorationHandler:0x16f27a898] 298619ms |$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA 14OpenURLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display0 10NavigationO0CSgyyctF() ApartfromtheObjective-Cmethod,nowthereisoneSwiftfunctionthatisalsoofyourinterest. ThereisprobablynodocumentationforthatSwiftfunctionbutyoucanjustdemangleitssymbolusingswift-demangle viaxcrun: 496\\nxcruncanbeusedinvokeXcodedevelopertoolsfromthecommand-line,withouthavingtheminthepath. Inthis caseitwilllocateandrunswift-demangle,anXcodetoolthatdemanglesSwiftsymbols. $xcrunswift-demangleS10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0 12PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF Resultingin: --- masvs_category:MASVS-CODE platform:ios --- #iOSCodeQualityandBuildSettings ##Overview ###AppSigning [Codesigning](0x06a-Platform-Overview.md#code-signing)yourappassuresusersthattheapphasaknownsourceandhasn'tbeenmodifiedsinceitwaslastsigned. ↪ Beforeyourappcanintegrateappservices,beinstalledonanon-jailbrokendevice,orbesubmittedtotheAppStore, itmustbesignedwithacertificate ↪ issuedbyApple.Formoreinformationonhowtorequestcertificatesandcodesignyourapps,reviewthe[AppDistribution ↪ Guide](https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html\"AppDistribution ↪ Guide\"). ###Third-PartyLibraries iOSapplicationsoftenmakeuseofthirdpartylibrarieswhichacceleratedevelopmentasthedeveloperhastowritelesscode inordertosolveaproblem. ↪ However,thirdpartylibrariesmaycontainvulnerabilities,incompatiblelicensing,ormaliciouscontent.Additionally,itisdifficultfororganizationsand ↪ developerstomanageapplicationdependencies,includingmonitoringlibraryreleasesandapplyingavailablesecuritypatches. Therearethreewidelyusedpackagemanagementtools[SwiftPackageManager](https://swift.org/package-manager\"SwiftPackageManageronSwift.org\"), ↪ [Carthage](https://github.com/Carthage/Carthage\"CarthageonGitHub\"),and[CocoaPods](https://cocoapods.org\"CocoaPods.org\"): -TheSwiftPackageManagerisopensource,includedwiththeSwiftlanguage,integratedintoXcode(sinceXcode11)and supports[Swift,Objective-C, ↪ Objective-C++,C,andC++](https://developer.apple.com/documentation/xcode/swift-packages\"SwiftPackagesDocumentation\")packages.ItiswritteninSwift, ↪ decentralizedandusesthePackage.swiftfiletodocumentandmanageprojectdependencies. -CarthageisopensourceandcanbeusedforSwiftandObjective-Cpackages.ItiswritteninSwift,decentralized andusestheCartfilefiletodocumentand ↪ manageprojectdependencies. -CocoaPodsisopensourceandcanbeusedforSwiftandObjective-Cpackages.ItiswritteninRuby,utilizes acentralizedpackageregistryforpublicand ↪ privatepackagesandusesthePodfilefiletodocumentandmanageprojectdependencies. Therearetwocategoriesoflibraries: -Librariesthatarenot(orshouldnot)bepackedwithintheactualproductionapplication,suchas`OHHTTPStubs`usedfor testing. -Librariesthatarepackedwithintheactualproductionapplication,suchas`Alamofire`. Theselibrariescanleadtounwantedside-effects: -Alibrarycancontainavulnerability,whichwillmaketheapplicationvulnerable.Agoodexampleis`AFNetworking`version2.5.1, whichcontainedabugthat ↪ disabledcertificatevalidation.Thisvulnerabilitywouldallowattackerstoexecuteman-in-the-middleattacksagainstappsthatareusingthelibraryto ↪ connecttotheirAPIs. -Alibrarycannolongerbemaintainedorhardlybeused,whichiswhynovulnerabilitiesarereportedand/or fixed.Thiscanleadtohavingbadand/or ↪ vulnerablecodeinyourapplicationthroughthelibrary. -Alibrarycanusealicense,suchasLGPL2.1,whichrequirestheapplicationauthortoprovideaccesstothe sourcecodeforthosewhousetheapplicationand ↪ requestinsightinitssources.Infacttheapplicationshouldthenbeallowedtoberedistributedwithmodificationstoits sourcecode.Thiscanendanger ↪ theintellectualproperty(IP)oftheapplication. Pleasenotethatthisissuecanholdonmultiplelevels:WhenyouusewebviewswithJavaScriptrunninginthewebview, theJavaScriptlibrariescanhavethese ↪ issuesaswell.Thesameholdsforplugins/librariesforCordova,React-nativeandXamarinapps. ###MemoryCorruptionBugs iOSapplicationshavevariouswaystoruninto[memorycorruptionbugs](0x04h-Testing-Code-Quality.md#memory-corruption-bugs):firsttherearethenativecode ↪ issueswhichhavebeenmentionedinthegeneralMemoryCorruptionBugssection.Next,therearevariousunsafeoperationswithboth Objective-CandSwiftto ↪ actuallywraparoundnativecodewhichcancreateissues.Last,bothSwiftandObjective-Cimplementationscanresultinmemoryleaks duetoretaining ↪ objectswhicharenolongerinuse. Learnmore: -<https://developer.ibm.com/tutorials/mo-ios-memory/> -<https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html> -<https://medium.com/zendesk-engineering/ios-identifying-memory-leaks-using-the-xcode-memory-graph-debugger-e84f097b9d15> ###BinaryProtectionMechanisms Detectingthepresenceof[binaryprotectionmechanisms](0x04h-Testing-Code-Quality.md#binary-protection-mechanisms)heavilydependonthelanguageusedfor ↪ developingtheapplication. AlthoughXcodeenablesallbinarysecurityfeaturesbydefault,itmayberelevanttoverifythisforoldapplicationsor tocheckforcompilerflag ↪ misconfigurations.Thefollowingfeaturesareapplicable: -[**PIE(PositionIndependentExecutable)**](0x04h-Testing-Code-Quality.md#position-independent-code): -PIEappliestoexecutablebinaries(Mach-Otype`MH_EXECUTE`). -Howeverit'snotapplicableforlibraries(Mach-Otype`MH_DYLIB`). 497\\n-[**Memorymanagement**](0x04h-Testing-Code-Quality.md#memory-management): -BothpureObjective-C,SwiftandhybridbinariesshouldhaveARC(AutomaticReferenceCounting)enabled. -ForC/C++libraries,thedeveloperisresponsiblefordoingproper[manualmemorymanagement](0x04h-Testing-Code-Quality.md#manual-memory-management).See ↪ [\"MemoryCorruptionBugs\"](0x04h-Testing-Code-Quality.md#memory-corruption-bugs). -[**StackSmashingProtection**](0x04h-Testing-Code-Quality.md#stack-smashing-protection):ForpureObjective-Cbinaries,thisshouldalwaysbeenabled.Since ↪ Swiftisdesignedtobememorysafe,ifalibraryispurelywritteninSwift,andstackcanariesweren’tenabled, theriskwillbeminimal. Learnmore: -[OSXABIMach-OFileFormatReference](https://github.com/aidansteele/osx-abi-macho-file-format-reference) -[OniOSBinaryProtections](https://sensepost.com/blog/2021/on-ios-binary-protections/) -[SecurityofruntimeprocessiniOSandiPadOS](https://support.apple.com/en-gb/guide/security/sec15bfe098e/web) -[Mach-OProgrammingTopics-Position-Independent ↪ Code](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/dynamic_code.html) Teststodetectthepresenceoftheseprotectionmechanismsheavilydependonthelanguageusedfordevelopingtheapplication.For example,existingtechniques ↪ fordetectingthepresenceofstackcanariesdonotworkforpureSwiftapps. ####XcodeProjectSettings #####StackCanaryprotection StepsforenablingstackcanaryprotectioninaniOSapplication: 1.InXcode,selectyourtargetinthe\"Targets\"section,thenclickthe\"BuildSettings\"tabtoviewthetarget's settings. 2.Makesurethatthe\"-fstack-protector-all\"optionisselectedinthe\"OtherCFlags\"section. 3.MakesurethatPositionIndependentExecutables(PIE)supportisenabled. #####PIEprotection StepsforbuildinganiOSapplicationasPIE: 1.InXcode,selectyourtargetinthe\"Targets\"section,thenclickthe\"BuildSettings\"tabtoviewthetarget's settings. 2.SettheiOSDeploymentTargettoiOS4.3orlater. 3.Makesurethat\"GeneratePosition-DependentCode\"(section\"AppleClang-CodeGeneration\")issettoitsdefaultvalue(\"NO\"). 4.Makesurethat\"GeneratePosition-DependentExecutable\"(section\"Linking\")issettoitsdefaultvalue(\"NO\"). #####ARCprotection ARCisautomaticallyenabledforSwiftappsbythe`swiftc`compiler.However,forObjective-Cappsyou'llhaveensurethatit'senabledbyfollowingthesesteps: 1.InXcode,selectyourtargetinthe\"Targets\"section,thenclickthe\"BuildSettings\"tabtoviewthetarget's settings. 2.Makesurethat\"Objective-CAutomaticReferenceCounting\"issettoitsdefaultvalue(\"YES\"). Seethe[TechnicalQ&AQA1788BuildingaPositionIndependentExecutable](https://developer.apple.com/library/mac/qa/qa1788/_index.html\"TechnicalQ&AQA1788 ↪ BuildingaPositionIndependentExecutable\"). ###DebuggableApps Appscanbemade[debuggable](0x06c-Reverse-Engineering-and-Tampering.md#debugging)byaddingthe ↪ [`get-task-allow`](https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues ↪ \"Resolvingcommonnotarizationissues\")keytotheappentitlementsfileandsettingitto`true`. Whiledebuggingisausefulfeaturewhendevelopinganapp,ithastobeturnedoffbeforereleasingappstotheAppStoreorwithinanenterpriseprogram.Todo ↪ thatyouneedtodeterminethemodeinwhichyourappistobegeneratedtochecktheflagsin theenvironment: -Selectthebuildsettingsoftheproject -Under'AppleLVM-Preprocessing'and'PreprocessorMacros',makesure'DEBUG'or'DEBUG_MODE'isnotselected(Objective-C) -Makesurethatthe\"Debugexecutable\"optionisnotselected. -Orinthe'SwiftCompiler-CustomFlags'section/'OtherSwiftFlags',makesurethe'-DDEBUG'entry doesnotexist. ###DebuggingSymbols Asagoodpractice,aslittleexplanatoryinformationaspossibleshouldbeprovidedwithacompiledbinary.Thepresenceof additionalmetadatasuchasdebug ↪ symbolsmightprovidevaluableinformationaboutthecode,e.g.functionnamesleakinginformationaboutwhatafunctiondoes.Thismetadata isnotrequired ↪ toexecutethebinaryandthusitissafetodiscarditforthereleasebuild,whichcanbedone byusingpropercompilerconfigurations.Asatesteryou ↪ shouldinspectallbinariesdeliveredwiththeappandensurethatnodebuggingsymbolsarepresent(atleastthoserevealing anyvaluableinformationabout ↪ thecode). WhenaniOSapplicationiscompiled,thecompilergeneratesalistofdebugsymbolsforeachbinaryfileinan app(themainappexecutable,frameworks,andapp ↪ extensions).Thesesymbolsincludeclassnames,globalvariables,andmethodandfunctionnameswhicharemappedtospecificfilesand linenumberswhere ↪ they'redefined.[Debugbuilds](https://developer.apple.com/documentation/xcode/building-your-app-to-include-debugging-information\"BuildingYourAppto ↪ IncludeDebuggingInformation\")ofanappplacethedebugsymbolsinacompiledbinarybydefault,whilereleasebuildsof anappplacetheminacompanion ↪ _DebugSymbolfile_(dSYM)toreducethesizeofthedistributedapp. ###DebuggingCodeandErrorLogging Tospeedupverificationandgetabetterunderstandingoferrors,developersoftenincludedebuggingcode,suchasverboselogging statements(using`NSLog`, ↪ `println`,`print`,`dump`,and`debugPrint`)aboutresponsesfromtheirAPIsandabouttheirapplication'sprogressand/orstate.Furthermore,theremay be ↪ debuggingcodefor\"management-functionality\",whichisusedbydeveloperstosettheapplication'sstateormockresponsesfromanAPI. Reverseengineers ↪ caneasilyusethisinformationtotrackwhat'shappeningwiththeapplication.Therefore,debuggingcodeshouldberemovedfromthe application'srelease ↪ version. ###ExceptionHandling Exceptionsoftenoccurafteranapplicationentersanabnormalorerroneousstate. Testingexceptionhandlingisaboutmakingsurethattheapplicationwillhandletheexceptionandgetintoasafestate withoutexposinganysensitive ↪ informationviaitsloggingmechanismsortheUI. BearinmindthatexceptionhandlinginObjective-CisquitedifferentfromexceptionhandlinginSwift.Bridgingthetwoapproaches inanapplicationthatis ↪ writteninbothlegacyObjective-CcodeandSwiftcodecanbeproblematic. 498\\n####ExceptionHandlinginObjective-C Objective-Chastwotypesoferrors: **NSException:** `NSException`isusedtohandleprogrammingandlow-levelerrors(e.g.,divisionby0andout-of-boundsarrayaccess). An`NSException`caneitherberaisedby`raise`orthrownwith`@throw`.Unlesscaught,thisexceptionwillinvoketheunhandled exceptionhandler,withwhich ↪ youcanlogthestatement(loggingwillhalttheprogram).`@catch`allowsyoutorecoverfromtheexceptionifyou're usinga`@try`-`@catch`-block: ```objectivec @try{ //doworkhere } @catch(NSException*e){ //recoverfromexception } @finally{ //cleanup BearinmindthatusingNSExceptioncomeswithmemorymanagementpitfalls: youneedtocleanupallocationsfrom thetryblockthatareinthefinallyblock. NotethatyoucanpromoteNSExceptionobjectstoNSErrorbyinstantiatingan NSErrorinthe@catchblock. NSError: NSErrorisusedforallothertypesoferrors. SomeCocoaframeworkAPIsprovideerrorsasobjectsintheirfailurecallback incasesomethinggoeswrong; thosethatdon’tprovidethempassapointertoanNSErrorobjectbyreference. Itisa goodpracticetoprovideaBOOLreturntypetothemethodthattakesapointertoanNSErrorobjecttoindicatesuccess orfailure. Ifthere’sareturntype,makesuretoreturnnilforerrors. IfNOornilisreturned,itallowsyoutoinspectthe error/reasonforfailure. Exception Handling in Swift ExceptionhandinginSwift(2-5)isquitedifferent. Thetry-catchblockisnottheretohandleNSException. Theblockis usedtohandleerrorsthatconformtotheError(Swift3)orErrorType(Swift2)protocol. Thiscanbechallengingwhen Objective-CandSwiftcodearecombinedinanapplication. Therefore,NSErrorispreferabletoNSExceptionforprograms writteninbothlanguages. Furthermore,error-handlingisopt-ininObjective-C,butthrowsmustbeexplicitlyhandledin Swift. Toconverterror-throwing,lookattheAppledocumentation. Methodsthatcanthrowerrorsusethethrowskeyword. TheResulttyperepresentsasuccessorfailure,seeResult,HowtouseResultinSwift5andThepowerofResulttypes inSwift. TherearefourwaystohandleerrorsinSwift: • Propagate the error from a function to the code that calls that function. In this situation, there’s no do-catch; there’sonlyathrowthrowingtheactualerrororatrytoexecutethemethodthatthrows. Themethodcontaining thetryalsorequiresthethrowskeyword: funcdosomething(argumentx:TypeX)throws{ tryfunctionThatThrows(argumentx:argumentx) } • Handletheerrorwithado-catchstatement. Youcanusethefollowingpattern: funcdoTryExample() { do{ tryfunctionThatThrows(number: 203) }catch NumberError.lessThanZero{ //Handle numberislessthanzero }catch letNumberError.tooLarge(delta){ //Handle numberistoolarge(withdeltavalue) }catch { //Handle anyothererrors } } enumNumberError: Error{ caselessThanZero casetooLarge(Int) casetooSmall(Int) } funcfunctionThatThrows(number: Int)throws->Bool{ ifnumber <0{ throwNumberError.lessThanZero 499\\n}else ifnumber<10{ throwNumberError.tooSmall(10 -number) }else ifnumber>100{ throwNumberError.tooLarge(100 -number) }else { returntrue } } • Handletheerrorasanoptionalvalue: letx =try?functionThatThrows() //In thiscasethevalueofxisnilincaseofanerror. • Usethetry! expressiontoassertthattheerrorwon’toccur. • HandlethegenericerrorasaResultreturn: enumErrorType:Error{ casetypeOne casetypeTwo } funcfunctionWithResult(param:String?)->Result<String,ErrorType>{ guardletvalue=paramelse{ return.failure(.typeOne) } return.success(value) } funccallResultFunction(){ letresult=functionWithResult(param:\"OWASP\") switchresult{ caselet.success(value): //Handlesuccess caselet.failure(error): //Handlefailure(witherror) } } • HandlenetworkandJSONdecodingerrorswithaResulttype: structMSTG:Codable{ varroot:String varplugins:[String] varstructure:MSTGStructure vartitle:String varlanguage:String vardescription:String } structMSTGStructure:Codable{ varreadme:String } enumRequestError:Error{ caserequestError(Error) casenoData casejsonError } funcgetMSTGInfo(){ guardleturl=URL(string:\"https://raw.githubusercontent.com/OWASP/owasp-mastg/master/book.json\")else{ return } request(url:url){resultin switchresult{ caselet.success(data): //HandlesuccesswithMSTGdata letmstgTitle=data.title letmstgDescription=data.description caselet.failure(error): //Handlefailure switcherror{ caselet.requestError(error): //Handlerequesterror(witherror) case.noData: //Handlenodatareceivedinresponse case.jsonError: //HandleerrorparsingJSON } } } } 500\\nfuncrequest(url:URL,completion:@escaping(Result<MSTG,RequestError>)->Void){ lettask=URLSession.shared.dataTask(with:url){data,_,errorin ifleterror=error{ returncompletion(.failure(.requestError(error))) }else{ ifletdata=data{ letdecoder=JSONDecoder() guardletresponse=try?decoder.decode(MSTG.self,from:data)else{ returncompletion(.failure(.jsonError)) } returncompletion(.success(response)) } } } task.resume() } Testing Object Persistence Platform: ios MASVSV1: MSTG-PLATFORM-8 MASVSV2: MASVS-CODE-4 Overview Static Analysis Alldifferentflavorsofobjectpersistencesharethefollowingconcerns: • Ifyouuseobjectpersistencetostoresensitiveinformationonthedevice,thenmakesurethatthedataisencrypted: eitheratthedatabaselevel,orspecificallyatthevaluelevel. • Needtoguaranteetheintegrityoftheinformation? UseanHMACmechanismorsigntheinformationstored. Always verifytheHMAC/signaturebeforeprocessingtheactualinformationstoredintheobjects. • MakesurethatkeysusedinthetwonotionsabovearesafelystoredintheKeyChainandwellprotected. Seethe chapter“DataStorageoniOS”formoredetails. • Ensurethatthedatawithinthedeserializedobjectiscarefullyvalidatedbeforeitisactivelyused(e.g.,noexploit ofbusiness/applicationlogicispossible). • DonotusepersistencemechanismsthatuseRuntimeReferencetoserialize/deserializeobjectsinhigh-riskappli- cations,astheattackermightbeabletomanipulatethestepstoexecutebusinesslogicviathismechanism(see thechapter“iOSAnti-ReversingDefenses”formoredetails). • NotethatinSwift2andbeyond,aMirrorcanbeusedtoreadpartsofanobject,butcannotbeusedtowriteagainst theobject. Dynamic Analysis Thereareseveralwaystoperformdynamicanalysis: • Fortheactualpersistence: Usethetechniquesdescribedinthe“DataStorageoniOS”chapter. •", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 161}}