{"text": ":{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey =\"com.apple.mobilesafari\"; } 8269 ms | |TelegramUI.openExternalUrl(account,url,presentationData, applicationContext,navigationController,dismissInput) 8269 ms | | account:nil 8269 ms | | url:tg://resolve?domain=fridadotre 8269 ms | | presentationData:0x1c4c51741 8269 ms | | applicationContext:nil 8269 ms | | navigationController:TelegramUI.PresentationData 8274 ms |-[UIApplicationapplicationOpenURL:0x1c46ebb80] Thereyoucanobservethefollowing: • Itcallsapplication:openURL:options: fromtheappdelegateasexpected. • ThesourceapplicationisSafari(“com.apple.mobilesafari”). • application:openURL:options: handlestheURLbutdoesnotopenit,itcallsTelegramUI.openExternalUrlfor that. • TheURLbeingopenedistg://resolve?domain=fridadotre. • Itusesthetg://customURLschemefromTelegram. Itisinterestingtoseethatifyounavigateagainto“https://telegram.me/fridadotre”,clickoncancelandthenclickon thelinkofferedbythepageitself(“OpenintheTelegramapp”),insteadofopeningviacustomURLschemeitwillopen viauniversallinks. 465\\nYoucantrythiswhiletracingbothmethods: $frida-trace -UTelegram -m\"*[**restorationHandler*]\" -m\"*[**application*openURL*options*]\" //Afterclicking\"Open\"onthepop-up 16374 ms -[AppDelegateapplication :0x10556b3c0 openURL :0x1c4ae0080 options :0x1c7a28400] 16374 ms application :<Application:0x10556b3c0> 16374 ms openURL :tg://resolve?domain=fridadotre 16374 ms options :{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey =\"com.apple.mobilesafari\"; } //Afterclicking\"Cancel\"onthepop-upand\"OPEN\"inthepage 406575 ms -[AppDelegateapplication:0x10556b3c0 continueUserActivity:0x1c063d0c0 restorationHandler:0x16f27a898] 406575 ms application:<Application:0x10556b3c0> 406575 ms continueUserActivity:<NSUserActivity:0x1c063d0c0> 406575 ms webpageURL:https://telegram.me/fridadotre 406575 ms activityType:NSUserActivityTypeBrowsingWeb 406575 ms userInfo:{ } 406575 ms restorationHandler:<__NSStackBlock__:0x16f27a898> 466\\nTesting for Deprecated Methods Searchfordeprecatedmethodslike: • application:handleOpenURL: • openURL: • application:openURL:sourceApplication:annotation: Youmaysimplyusefrida-traceforthis,toseeifanyofthosemethodsarebeingused. Testing URL Schemes Source Validation A way to discard or confirm validation could be by hooking typical methods that might be used for that. For example isEqualToString:: //-(BOOL)isEqualToString:(NSString*)aString; varisEqualToString =ObjC.classes.NSString[\"-isEqualToString:\"]; Interceptor.attach(isEqualToString.implementation,{ onEnter:function(args){ varmessage =ObjC.Object(args[2]); console.log(message) } }); IfweapplythishookandcalltheURLschemeagain: $frida -UiGoat-Swift [iPhone::iGoat-Swift]->varisEqualToString =ObjC.classes.NSString[\"-isEqualToString:\"]; Interceptor.attach(isEqualToString.implementation,{ onEnter:function(args){ varmessage =ObjC.Object(args[2]); console.log(message) } }); {} [iPhone::iGoat-Swift]->openURL(\"iGoat://?contactNumber=123456789&message=hola\") true nil Nothinghappens. Thistellsusalreadythatthismethodis notbeingusedfor thataswecannot findanyapp-package- lookingstringlikeOWASP.iGoat-Swiftorcom.apple.mobilesafaribetweenthehookandthetextofthetweet. However, considerthatwearejustprobingonemethod,theappmightbeusingotherapproachforthecomparison. Fuzzing URL Schemes IftheappparsespartsoftheURL,youcanalsoperforminputfuzzingtodetectmemorycorruptionbugs. Whatwehavelearnedabovecanbenowusedtobuildyourownfuzzeronthelanguageofyourchoice, e.g.inPython andcalltheopenURLusingFrida’sRPC.Thatfuzzershoulddothefollowing: • Generatepayloads. • ForeachofthemcallopenURL. • Checkiftheappgeneratesacrashreport(.ips)in/private/var/mobile/Library/Logs/CrashReporter. TheFuzzDBprojectoffersfuzzingdictionariesthatyoucanuseaspayloads. 467\\nUsing Frida Doing this with Frida is pretty easy, as explained in this blog post to see an example that fuzzes the iGoat-Swift app (workingoniOS11.1.2). BeforerunningthefuzzerweneedtheURLschemesasinputs. FromthestaticanalysisweknowthattheiGoat-Swiftapp supportsthefollowingURLschemeandparameters: iGoat://?contactNumber={0}&message={0}. $frida -USpringBoard -lios-url-scheme-fuzzing.js [iPhone::SpringBoard]->fuzz(\"iGoat\",\"iGoat://?contactNumber={0}&message={0}\") WatchingforcrashesfromiGoat... Nologsweremoved. OpenedURL:iGoat://?contactNumber=0&message=0 OK! OpenedURL:iGoat://?contactNumber=1&message=1 OK! OpenedURL:iGoat://?contactNumber=-1&message=-1 OK! OpenedURL:iGoat://?contactNumber=null&message=null OK! OpenedURL:iGoat://?contactNumber=nil&message=nil OK! OpenedURL:iGoat://?contactNumber=99999999999999999999999999999999999 &message=99999999999999999999999999999999999 OK! OpenedURL:iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... &message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... OK! OpenedURL:iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... &message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... OK! OpenedURL:iGoat://?contactNumber='&message=' OK! OpenedURL:iGoat://?contactNumber=%20d&message=%20d OK! OpenedURL:iGoat://?contactNumber=%20n&message=%20n OK! OpenedURL:iGoat://?contactNumber=%20x&message=%20x OK! OpenedURL:iGoat://?contactNumber=%20s&message=%20s OK! Thescriptwilldetectifacrashoccurred. Onthisrunitdidnotdetectanycrashedbutforotherappsthiscouldbethe case. Wewouldbeabletoinspectthecrashreportsin/private/var/mobile/Library/Logs/CrashReporterorin/tmp ifitwasmovedbythescript. Checking for Sensitive Data Disclosed Through the User Interface Platform: ios MASVSV1: MSTG-STORAGE-7 MASVSV2: MASVS-PLATFORM-3 Overview Static Analysis Atextfieldthatmasksitsinputcanbeconfiguredintwoways: 468\\nStoryboardIntheiOSproject’sstoryboard,navigatetotheconfigurationoptionsforthetextfieldthattakessensitive data. Makesurethattheoption“SecureTextEntry”isselected. Ifthisoptionisactivated,dotsareshowninthetextfield inplaceofthetextinput. SourceCodeIfthetextfieldisdefinedinthesourcecode,makesurethattheoptionisSecureTextEntryissetto“true”. Thisoptionobscuresthetextinputbyshowingdots. sensitiveTextField.isSecureTextEntry =true Dynamic Analysis Todeterminewhethertheapplicationleaksanysensitiveinformationtotheuserinterface,runtheapplicationandidentify componentsthateithershowsuchinformationortakeitasinput. Iftheinformationismaskedby,forexample,asterisksordots,theappisn’tleakingdatatotheuserinterface. Testing App Permissions Platform: ios MASVSV1: MSTG-PLATFORM-1 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis SinceiOS10,thesearethemainareaswhichyouneedtoinspectforpermissions: • PurposeStringsintheInfo.plistFile • CodeSigningEntitlementsFile • EmbeddedProvisioningProfileFile • EntitlementsEmbeddedintheCompiledAppBinary • SourceCodeInspection Review application source code Ifhavingtheoriginalsourcecode,youcanverifythepermissionsincludedintheInfo.plistfile: • OpentheprojectwithXcode. • FindandopentheInfo.plistfileinthedefaulteditorandsearchforthekeysstartingwith\"Privacy -\". Youmayswitchtheviewtodisplaytherawvaluesbyright-clickingandselecting“ShowRawKeys/Values”(thiswayfor example \"Privacy - Location When In Use Usage Description\" will turn into NSLocationWhenInUseUsageDescrip- tion). 469\\nReview Info.plist IfonlyhavingtheIPA: • UnziptheIPA. • TheInfo.plistislocatedinPayload/<appname>.app/Info.plist. • Convert it if needed (e.g. plutil -convert xml1 Info.plist) as explained in the chapter “iOS Basic Security Testing”,section“TheInfo.plistFile”. • InspectallpurposestringsInfo.plistkeys,usuallyendingwithUsageDescription: <plist version=\"1.0\"> <dict> <key>NSLocationWhenInUseUsageDescription</key> <string>Yourlocation isusedtoprovideturn-by-turndirectionstoyourdestination.</string> ForeachpurposestringintheInfo.plistfile,checkifthepermissionmakessense. Forexample,imaginethefollowinglineswereextractedfromaInfo.plistfileusedbyaSolitairegame: <key>NSHealthClinicalHealthRecordsShareUsageDescription</key> <string>Shareyourhealthdatawithus!</string> <key>NSCameraUsageDescription</key> <string>Wewanttoaccessyourcamera</string> Itshouldbesuspiciousthataregularsolitairegamerequeststhiskindofresourceaccessasitprobablydoesnothave anyneedforaccessingthecameranorauser’shealth-records. Apartfromsimplycheckingif thepermissionsmakesense, furtheranalysissteps mightbederivedfromanalyzingpur- posestringse.g.iftheyarerelatedtostoragesensitivedata. Forexample,NSPhotoLibraryUsageDescriptioncanbe consideredasastoragepermissiongivingaccesstofilesthatareoutsideoftheapp’ssandboxandmightalsobeacces- sible by other apps. In this case, it should be tested that no sensitive data is being stored there (photos in this case). ForotherpurposestringslikeNSLocationAlwaysUsageDescription,itmustbealsoconsiderediftheappisstoringthis datasecurely. Refertothe“TestingDataStorage”chapterformoreinformationandbestpracticesonsecurelystoring sensitivedata. Review Embedded Provisioning Profile File Whenyoudonothavetheoriginalsourcecode,youshouldanalyzetheIPAandsearchinsidefortheembeddedprovision- ingprofilethatisusually locatedin therootappbundle folder(Payload/<appname>.app/)underthe name embedded. mobileprovision. Thisfileisnot a.plist, it isencodedusingCryptographicMessageSyntax. On macOSyoucaninspectanembedded provisioningprofile’sentitlementsusingthefollowingcommand: securitycms -D-iembedded.mobileprovision andthensearchfortheEntitlementskeyregion(<key>Entitlements</key>). Review Entitlements Embedded in the Compiled App Binary If you only have the app’s IPA or simply the installed app on a jailbroken device, you normally won’t be able to find .entitlements files. This could be", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 155}}