{"text": "app is using some specific resources. Unlike the entitlements related to app capabilities, device capabilities do not confer any right or accesstoprotectedresources. Additionalconfigurationstepsmightberequiredforthat,whichareveryspecifictoeach capability. Forexample,ifBLEisacorefeatureoftheapp,Apple’sCoreBluetoothProgrammingGuideexplainsthedifferentthings tobeconsidered: • Thebluetooth-ledevicecapabilitycanbesetinordertorestrictnon-BLEcapabledevicesfromdownloadingtheir app. • Appcapabilitieslikebluetooth-peripheralorbluetooth-central(bothUIBackgroundModes)shouldbeaddedif BLEbackgroundprocessingisrequired. However, this is not yet enough for the app to get access to the Bluetooth peripheral, the NSBluetoothPeripher- alUsageDescriptionkeyhastobeincludedintheInfo.plistfile,meaningthattheuserhastoactivelygivepermission. See“PurposeStringsintheInfo.plistFile”belowformoreinformation. Entitlements AccordingtoApple’siOSSecurityGuide: Entitlementsarekeyvaluepairsthataresignedintoanappandallowauthenticationbeyondruntimefactors,like UNIXuserID.Sinceentitlementsaredigitallysigned,theycan’tbechanged. Entitlementsareusedextensivelyby systemappsanddaemonstoperformspecificprivilegedoperationsthatwouldotherwiserequiretheprocesstorun asroot. Thisgreatlyreducesthepotentialforprivilegeescalationbyacompromisedsystemappordaemon. Manyentitlementscanbesetusingthe“Summary”taboftheXcodetargeteditor. Otherentitlementsrequireeditinga target’sentitlementspropertylistfileorareinheritedfromtheiOSprovisioningprofileusedtoruntheapp. EntitlementSources: 1. Entitlementsembeddedinaprovisioningprofilethatisusedtocodesigntheapp,whicharecomposedof: • CapabilitiesdefinedontheXcodeproject’stargetCapabilitiestab,and/or: • EnabledServicesontheapp’sAppIDwhichareconfiguredontheIdentifierssectionoftheCertificates,ID’s andProfileswebsite. • Otherentitlementsthatareinjectedbytheprofilegenerationservice. 2. Entitlementsfromacodesigningentitlementsfile. EntitlementDestinations: 1. Theapp’ssignature. 2. Theapp’sembeddedprovisioningprofile. TheAppleDeveloperDocumentationalsoexplains: • Duringcodesigning,theentitlementscorrespondingtotheapp’senabledCapabilities/Servicesaretransferredto theapp’ssignaturefromtheprovisioningprofileXcodechosetosigntheapp. • Theprovisioningprofileisembeddedintotheappbundleduringthebuild(embedded.mobileprovision). • Entitlements from the “Code Signing Entitlements” section in Xcode’s “Build Settings” tab are transferred to the app’ssignature. Forexample, ifyouwanttosetthe“DefaultDataProtection”capability, youwouldneedtogototheCapabilitiestab in Xcode and enable Data Protection. This is directly written by Xcode to the <appname>.entitlements file as the com.apple.developer.default-data-protection entitlement with default value NSFileProtectionComplete. In the IPAwemightfindthisintheembedded.mobileprovisionas: 444\\n<key>Entitlements</key> <dict> ... <key>com.apple.developer.default-data-protection</key> <string>NSFileProtectionComplete</string> </dict> For other capabilities such as HealthKit, the user has to be asked for permission, therefore it is not enough to add the entitlements,specialkeysandstringshavetobeaddedtotheInfo.plistfileoftheapp. Purpose Strings in the Info.plist File Purposestringsor_usagedescriptionstrings_arecustomtextsthatareofferedtousersinthesystem’spermissionrequest alertwhenrequestingpermissiontoaccessprotecteddataorresources. IflinkingonorafteriOS10,developersarerequiredtoincludepurposestringsintheirapp’sInfo.plistfile. Otherwise, iftheappattemptstoaccessprotecteddataorresourceswithouthavingprovidedthecorrespondingpurposestring,the accesswillfailandtheappmightevencrash. For an overview of the different purpose strings Info.plist keys available see Table 1-2 at the Apple App Programming GuideforiOS.ClickontheprovidedlinkstoseethefulldescriptionofeachkeyintheCocoaKeysreference. Code Signing Entitlements File Certaincapabilitiesrequireacodesigningentitlementsfile(<appname>.entitlements). Itisautomaticallygeneratedby Xcodebutmaybemanuallyeditedand/orextendedbythedeveloperaswell. Here is an example of entitlements file of the open source app Telegram including the App Groups entitlement (application-groups): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> ... <key>com.apple.security.application-groups</key> <array> <string>group.ph.telegra.Telegraph</string> </array> </dict> ... </plist> Theentitlementoutlinedabovedoesnotrequireanyadditionalpermissionsfromtheuser. However,itisalwaysagood practicetocheckallentitlements,astheappmightoverasktheuserintermsofpermissionsandtherebyleakinforma- tion. 445\\nAsdocumentedatAppleDeveloperDocumentation,theAppGroupsentitlementisrequiredtoshareinformationbetween differentappsthroughIPCorasharedfilecontainer,whichmeansthatdatacanbesharedonthedevicedirectlybetween theapps. Thisentitlementisalsorequiredifanappextensionrequirestoshareinformationwithitscontainingapp. Depending on the data to-be-shared it might be more appropriate to share it using another method such as through a backendwherethisdatacouldbepotentiallyverified,avoidingtamperingbye.g.theuserthemselves. Inter-Process Communication (IPC) Duringimplementationofamobileapplication,developersmayapplytraditionaltechniquesforIPC(suchasusingshared filesornetworksockets). TheIPCsystemfunctionalityofferedbymobileapplicationplatformsshouldbeusedbecauseitis muchmorematurethantraditionaltechniques. UsingIPCmechanismswithnosecurityinmindmaycausetheapplication toleakorexposesensitivedata. In contrast to Android’s rich Inter-Process Communication (IPC) capability, iOS offers some rather limited options for communicationbetweenapps. Infact, there’snowayforappstocommunicatedirectly. Inthissectionwewillpresent thedifferenttypesofindirectcommunicationofferedbyiOSandhowtotestthem. Here’sanoverview: • CustomURLSchemes • UniversalLinks • UIActivitySharing • AppExtensions • UIPasteboard Custom URL Schemes CustomURLschemesallowappstocommunicateviaacustomprotocol. Anappmustdeclaresupportfortheschemes andhandleincomingURLsthatusethoseschemes. ApplewarnsabouttheimproperuseofcustomURLschemesintheAppleDeveloperDocumentation: URLschemesofferapotentialattackvectorintoyourapp,somakesuretovalidateallURLparametersanddiscard anymalformedURLs. Inaddition,limittheavailableactionstothosethatdonotrisktheuser’sdata. Forexample, donotallowotherappstodirectlydeletecontentoraccesssensitiveinformationabouttheuser. Whentestingyour URL-handlingcode,makesureyourtestcasesincludeimproperlyformattedURLs. Theyalsosuggestusinguniversallinksinstead,ifthepurposeistoimplementdeeplinking: WhilecustomURLschemesareanacceptableformofdeeplinking,universallinksarestronglyrecommendedasa bestpractice. SupportingacustomURLschemeisdoneby: • definingtheformatfortheapp’sURLs, • registeringtheschemesothatthesystemdirectsappropriateURLstotheapp, • handlingtheURLsthattheappreceives. SecurityissuesarisewhenanappprocessescallstoitsURLschemewithoutproperlyvalidatingtheURLanditsparameters andwhenusersaren’tpromptedforconfirmationbeforetriggeringanimportantaction. OneexampleisthefollowingbugintheSkypeMobileapp, discoveredin2010: TheSkypeappregisteredtheskype:/ / protocol handler, which allowed other apps to trigger calls to other Skype users and phone numbers. Unfortunately, Skypedidn’taskusersforpermissionbeforeplacingthecalls,soanyappcouldcallarbitrarynumberswithouttheuser’s knowledge. Attackersexploitedthisvulnerabilitybyputtinganinvisible<iframe src=\"skype://xxx?call\"></iframe> (wherexxxwasreplacedbyapremiumnumber),soanySkypeuserwhoinadvertentlyvisitedamaliciouswebsitecalled thepremiumnumber. As a developer, you should carefully validate any URL before calling it. You can allow only certain applications which maybeopenedviatheregisteredprotocolhandler. PromptinguserstoconfirmtheURL-invokedactionisanotherhelpful control. AllURLsarepassedtotheappdelegate,eitheratlaunchtimeorwhiletheappisrunningorinthebackground. Tohandle incomingURLs,thedelegateshouldimplementmethodsto: 446\\n• retrieveinformationabouttheURLanddecidewhetheryouwanttoopenit, • opentheresourcespecifiedbytheURL. MoreinformationcanbefoundinthearchivedAppProgrammingGuideforiOSandintheAppleSecureCodingGuide. Inaddition,anappmayalsowanttosendURLrequests(aka. queries)tootherapps. Thisisdoneby: • registeringtheapplicationqueryschemesthattheappwantstoquery, • optionallyqueryingotherappstoknowiftheycanopenacertainURL, • sendingtheURLrequests. Universal Links UniversallinksaretheiOSequivalenttoAndroidAppLinks(aka. DigitalAssetLinks)andareusedfordeeplinking. When tappingauniversallink(totheapp’swebsite),theuserwillseamlesslyberedirectedtothecorrespondinginstalledapp withoutgoingthroughSafari. Iftheappisn’tinstalled,thelinkwillopeninSafari. Universallinksarestandardweblinks(HTTP/HTTPS)andarenottobeconfusedwithcustomURLschemes,whichoriginally werealsousedfordeeplinking. Forexample,theTelegramappsupportsbothcustomURLschemesanduniversallinks: • tg://resolve?domain=fridadotreisacustomURLschemeandusesthetg://scheme. • https://telegram.me/fridadotreisauniversallinkandusesthehttps://scheme. Both result in the same action, the user will be redirected to the specified chat in Telegram (“fridadotre” in this case). However,universallinksgiveseveralkeybenefitsthatarenotapplicablewhenusingcustomURLschemesandarethe recommendedwaytoimplementdeeplinking,accordingtotheAppleDeveloperDocumentation. Specifically,universal linksare: • Unique: UnlikecustomURLschemes,universallinkscan’tbeclaimedbyotherapps,becausetheyusestandard HTTPorHTTPSlinkstotheapp’swebsite. TheywereintroducedasawaytopreventURLschemehijackingattacks (anappinstalledaftertheoriginalappmaydeclarethesameschemeandthesystemmighttargetallnewrequests tothelastinstalledapp). • Secure: Whenusersinstalltheapp,iOSdownloadsandchecksafile(theAppleAppSiteAssociationorAASA)that wasuploadedtothewebservertomakesurethatthewebsiteallowstheapptoopenURLsonitsbehalf. Onlythe legitimateownersoftheURLcanuploadthisfile,sotheassociationoftheirwebsitewiththeappissecure. • Flexible: Universal links work even when the app is not installed. Tapping a link to the website would open the contentinSafari,asusersexpect. • Simple: OneURLworksforboththewebsiteandtheapp. • Private: Otherappscancommunicatewiththeappwithoutneedingtoknowwhetheritisinstalled. YoucanlearnmoreaboutUniversalLinksinthepost“LearningaboutUniversalLinksandFuzzingURLSchemesoniOS withFrida”byCarlosHolguera. UIActivity Sharing StartingoniOS6itispossibleforthird-partyappstosharedata(items)viaspecificmechanismslikeAirDrop,forexample. Fromauserperspective,thisfeatureisthewell-knownsystem-wide“ShareActivitySheet”thatappearsafterclickingon the“Share”button. 447\\nTheavailablebuilt-insharingmechanisms(aka. ActivityTypes)include: • airDrop • assignToContact • copyToPasteboard • mail • message", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 150}}