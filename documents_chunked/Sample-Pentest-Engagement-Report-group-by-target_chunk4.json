{"text": "to reading arbitrary files, code execution, Cross-Site Scripting, denial of service, sensitive information disclosure. Recommendation The most effective solution to eliminating file inclusion vulnerabilities is to avoid passing raw user-submitted input to any filesystem API. If this is not possible, the application can maintain a white list of files that may be included by the page, and then check to see if the user input matches against any of the entries in the white list. Any request containing an invalid identifier has to be rejected. In this way, there is no attack surface for malicious users to manipulate the path. References https://owasp.org/www-project-web-security-testing-guide/stable/4- Web_Application_Security_Testing/07-Input_Validation_Testing/11.1- Testing_for_Local_File_Inclusion Classification Category ID / Value CWE CWE-22 OWASP Top 10 - 2017 A1 - Injection OWASP Top 10 - 2021 A1 - Broken Access Control 20\\nScreenshots Figure 1. Local File Inclusion Verification âœ” This finding was validated so it is not a False Positive. 21\\n4.1.5 DOM-based Cross-Site Scripting Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/xss_d/ Method GET Vulnerable default Parameter (Query Parameter) Evidence Injected the payload </option></select><sVg/onLOad=document.body.append (`6f798b51`.repeat(2))> in the default query parameter and the expected result 6f798b516f798b51 was found in the response. The payload reached the JavaScript sink document.write. The stack trace to this call was: anonymous @ https://pentest- ground.com:4280/vulnerabilities/xss_d/?default=def aultpttf291ab78`: line 70, column 15 The script inside the payload tries to repeat a random string. If the string 6f798b51 is doubled on the response page, we confirm that our script has been executed. This request was done using a Chrome browser. If available, the replay attack button uses a simpler alert() payload that may not work as expected. To validate the vulnerability, we attempted to extract some data exposed by the application in the browser. The application uses the following (non-HttpOnly) cookies: _ga:GA1.1.1244663522.1739354417_ga_Z3XCDXSJ3P:GS1.1.17 22\\n39354416.1.1.1739354516.20.0.0_gcl_au:1.1.613626497.1739354 416PHPSESSID:19d5a469db64624265da3f93925f7be3security:l ow Request / Response Vulnerability description We found that the target web application is vulnerable to DOM-based Cross-Site Scripting (DOM XSS) attacks. This vulnerability is caused by inadequate input validation, allowing a malicious actor to inject and execute JavaScript code in the context of another user's session. DOM-based XSS is purely client-side, meaning the malicious script runs as a result of modifying the Document Object Model (DOM) environment in the victim's browser, without sending the payload to the server. Risk description The risk is that the code injected by an attacker could potentially lead to effects such as stealing session cookies, calling application features on behalf of another user, or exploiting browser vulnerabilities. Recommendation There are several ways to mitigate DOM-based XSS attacks. We recommend to: - never trust user input - encode and escape user input on the client side as well - implement Content Security Policy (CSP) - use the HTTPOnly cookie flag to protect from cookie theft - try to avoid using innerHTML or document.write() to insert untrusted content directly into your HTML, as these methods don't filter malicious scripts. Use methods that provide finer control, such as creating elements via document.createElement() and safely inserting values with Element.textContent. If you must use unsafe methods, pass", "metadata": {"doc_id": "Sample-Pentest-Engagement-Report-group-by-target", "chunk_id": 4}}