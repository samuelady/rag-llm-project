{"text": "also useful when dealingwithweborhybridapps(ultimately,nomattertheframework,everyappisbasedonnativecomponents). 29\\nMobile Application Security Testing In the following sections we’ll provide a brief overview of general security testing principles and key terminology. The conceptsintroducedarelargelyidenticaltothosefoundinothertypesofpenetrationtesting,soifyouareanexperienced testeryoumaybefamiliarwithsomeofthecontent. Throughout the guide, we use “mobile app security testing” as a catchall phrase to refer to the evaluation of mobile appsecurityviastaticanddynamicanalysis. Termssuchas“mobileapppenetrationtesting”and“mobileappsecurity review” are used somewhat inconsistently in the security industry, but these terms refer to roughly the same thing. A mobileappsecuritytestisusuallypartofalargersecurityassessmentorpenetrationtestthatencompassestheclient- serverarchitectureandserver-sideAPIsusedbythemobileapp. Inthisguide,wecovermobileappsecuritytestingintwocontexts. Thefirstisthe“classical”securitytestcompletednear theendofthedevelopmentlifecycle. Inthiscontext,thetesteraccessesanearlyfinishedorproduction-readyversion oftheapp,identifiessecurityissues,andwritesa(usuallydevastating)report. Theothercontextischaracterizedbythe implementation of requirements and the automation of security tests from the beginning of the software development lifecycleonwards. Thesamebasicrequirementsandtestcasesapplytobothcontexts,butthehigh-levelmethodand thelevelofclientinteractiondiffer. Principles of Testing White-box Testing versus Black-box Testing Let’sstartbydefiningtheconcepts: • Black-box testing is conducted without the tester’s having any information about the app being tested. This processissometimescalled“zero-knowledgetesting”. Themainpurposeofthistestisallowingthetestertobehave likearealattackerinthesenseofexploringpossibleusesforpubliclyavailableanddiscoverableinformation. • White-box testing (sometimes called “full knowledge testing”) is the total opposite of black-box testing in the sensethatthetesterhasfullknowledgeoftheapp. Theknowledgemayencompasssourcecode,documentation, anddiagrams. Thisapproachallowsmuchfastertestingthanblack-boxtestingduetoitstransparencyandwith theadditionalknowledgegainedatestercanbuildmuchmoresophisticatedandgranulartestcases. • Gray-box testing is all testing that falls in between the two aforementioned testing types: some informationis providedtothetester(usuallycredentialsonly),andotherinformationisintendedtobediscovered. Thistypeof testing is an interesting compromise in the number of test cases, the cost, the speed, and the scope of testing. Gray-boxtestingisthemostcommonkindoftestinginthesecurityindustry. Westronglyadvisethatyourequestthesourcecodesothatyoucanusethetestingtimeasefficientlyaspossible. The tester’scodeaccessobviouslydoesn’tsimulateanexternalattack,butitsimplifiestheidentificationofvulnerabilitiesby allowingthetestertoverifyeveryidentifiedanomalyorsuspiciousbehavioratthecodelevel. Awhite-boxtestistheway togoiftheapphasn’tbeentestedbefore. EventhoughdecompilingonAndroidisstraightforward,thesourcecodemaybeobfuscated,andde-obfuscatingwillbe time-consuming. Timeconstraintsarethereforeanotherreasonforthetestertohaveaccesstothesourcecode. Vulnerability Analysis Vulnerability analysis is usually the process of looking for vulnerabilities in an app. Although this may be done manu- ally,automatedscannersareusuallyusedtoidentifythemainvulnerabilities. Staticanddynamicanalysisaretypesof vulnerabilityanalysis. Static versus Dynamic Analysis StaticApplicationSecurityTesting(SAST)involvesexamininganapp’scomponentswithoutexecutingthem,byanalyzing thesourcecodeeithermanuallyorautomatically. OWASPprovidesinformationaboutStaticCodeAnalysisthatmayhelp youunderstandtechniques,strengths,weaknesses,andlimitations. 30\\nDynamic Application Security Testing (DAST) involves examining the app during runtime. This type of analysis can be manual or automatic. It usually doesn’t provide the information that static analysis provides, but it is a good way to detectinterestingelements(assets,features,entrypoints,etc.) fromauser’spointofview. Nowthatwehavedefinedstaticanddynamicanalysis,let’sdivedeeper. Static Analysis Duringstaticanalysis,themobileapp’ssourcecodeisreviewedtoensureappropriateimplementationofsecuritycontrols. Inmostcases,ahybridautomatic/manualapproachisused. Automaticscanscatchthelow-hangingfruit,andthehuman testercanexplorethecodebasewithspecificusagecontextsinmind. Manual Code Review A tester performs manual code review by manually analyzing the mobile app’s source code for security vulnerabilities. Methods range from a basic keyword search via the ‘grep’ command to a line-by-line examination of the source code. IDEs(IntegratedDevelopmentEnvironments)oftenprovidebasiccodereviewfunctionsandcanbeextendedwithvarious tools. A common approach to manual code analysis entails identifying key security vulnerability indicators by searching for certain APIs and keywords, such as database-related method calls like “executeStatement” or “executeQuery”. Code containingthesestringsisagoodstartingpointformanualanalysis. In contrast to automatic code analysis, manual code review is very good for identifying vulnerabilities in the business logic, standards violations, and design flaws, especially when the code is technically secure but logically flawed. Such scenariosareunlikelytobedetectedbyanyautomaticcodeanalysistool. Amanualcodereviewrequiresanexpertcodereviewerwhoisproficientinboththelanguageandtheframeworksused forthemobileapp. Fullcodereviewcanbeaslow, tedious, time-consumingprocessforthereviewer, especiallygiven largecodebaseswithmanydependencies. Automated Source Code Analysis AutomatedanalysistoolscanbeusedtospeedupthereviewprocessofStaticApplicationSecurityTesting(SAST).They checkthesourcecodeforcompliancewithapredefinedsetofrulesorindustrybestpractices, thentypicallydisplaya listoffindingsorwarningsandflagsforalldetectedviolations. Somestaticanalysistoolsrunagainstthecompiledapp only, somemustbefedtheoriginalsourcecode, andsomerunaslive-analysispluginsintheIntegratedDevelopment Environment(IDE). Althoughsomestaticcodeanalysistoolsincorporatealotofinformationabouttherulesandsemanticsrequiredtoanalyze mobileapps,theymayproducemanyfalsepositives,particularlyiftheyarenotconfiguredforthetargetenvironment. A securityprofessionalmustthereforealwaysreviewtheresults. Thechapter“TestingTools”includesalistofstaticanalysistools,whichcanbefoundattheendofthisbook. Dynamic Analysis The focus of DAST is the testing and evaluation of apps via their real-time execution. The main objective of dynamic analysisisfindingsecurityvulnerabilitiesorweakspotsinaprogramwhileitisrunning. Dynamicanalysisisconducted bothatthemobileplatformlayerandagainstthebackendservicesandAPIs,wherethemobileapp’srequestandresponse patternscanbeanalyzed. Dynamic analysis is usually used to check for security mechanisms that provide sufficient protection against the most prevalenttypesofattack,suchasdisclosureofdataintransit,authenticationandauthorizationissues,andservercon- figurationerrors. 31\\nAvoiding False Positives Automated Scanning Tools Automatedtestingtools’lackofsensitivitytoappcontextisachallenge. Thesetoolsmayidentifyapotentialissuethat’s irrelevant. Suchresultsarecalled“falsepositives”. Forexample, securitytesterscommonlyreportvulnerabilitiesthatareexploitableinawebbrowserbutaren’trelevant to the mobile app. This false positive occurs because automated tools used to scan the backend service are based on regular browser-based web apps. Issues such as CSRF (Cross-site Request Forgery) and Cross-Site Scripting (XSS) are", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 36}}