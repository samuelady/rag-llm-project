{"text": "cases. This overview providesabriefoutlineofthesedatastoragemethodsandpointstesterstofurtherrelevantdocumentation. Shared Preferences The SharedPreferences API is commonly used to permanently save small collections of key-value pairs. Data stored in a SharedPreferences object is written to a plain-text XML file. The SharedPreferences object can be declared world- readable(accessibletoallapps)orprivate. MisuseoftheSharedPreferencesAPIcanoftenleadtoexposureofsensitive data. Considerthefollowingexample: ExampleforJava: SharedPreferencessharedPref =getSharedPreferences(\"key\",MODE_WORLD_READABLE); SharedPreferences.Editor editor =sharedPref.edit(); editor.putString(\"username\",\"administrator\"); editor.putString(\"password\",\"supersecret\"); editor.commit(); 190\\nExampleforKotlin: varsharedPref =getSharedPreferences(\"key\",Context.MODE_WORLD_READABLE) vareditor =sharedPref.edit() editor.putString(\"username\",\"administrator\") editor.putString(\"password\",\"supersecret\") editor.commit() Oncetheactivityhasbeencalled,thefilekey.xmlwillbecreatedwiththeprovideddata. Thiscodeviolatesseveralbest practices. • Theusernameandpasswordarestoredincleartextin/data/data/<package-name>/shared_prefs/key.xml. <?xml version='1.0' encoding='utf-8' standalone='yes' ?> <map> <string name=\"username\">administrator</string> <string name=\"password\">supersecret</string> </map> • MODE_WORLD_READABLEallowsallapplicationstoaccessandreadthecontentsofkey.xml. root@hermes:/data/data/sg.vp.owasp_mobile.myfirstapp/shared_prefs #ls-la -rw-rw-r--u0_a118 1702016-04-2316:51key.xml PleasenotethatMODE_WORLD_READABLEandMODE_WORLD_WRITEABLEweredeprecatedstartingonAPIlevel17. Al- thoughnewerdevicesmaynotbeaffectedbythis,applicationscompiledwithanandroid:targetSdkVersionvalue lessthan17maybeaffectediftheyrunonanOSversionthatwasreleasedbeforeAndroid4.2(APIlevel17). Databases TheAndroidplatformprovidesanumberofdatabaseoptionsasaforementionedinthepreviouslist. Eachdatabaseoption hasitsownquirksandmethodsthatneedtobeunderstood. SQLite Database (Unencrypted) SQLiteisanSQLdatabaseenginethatstoresdatain.dbfiles. TheAndroidSDKhasbuilt-insupportforSQLitedatabases. Themainpackageusedtomanagethedatabasesisandroid.database.sqlite. Forexample,youmayusethefollowing codetostoresensitiveinformationwithinanactivity: ExampleinJava: SQLiteDatabasenotSoSecure =openOrCreateDatabase(\"privateNotSoSecure\",MODE_PRIVATE,null); notSoSecure.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\"); notSoSecure.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPass');\"); notSoSecure.close(); ExampleinKotlin: varnotSoSecure =openOrCreateDatabase(\"privateNotSoSecure\",Context.MODE_PRIVATE,null) notSoSecure.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\") notSoSecure.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPass');\") notSoSecure.close() Once the activity has been called, the database file privateNotSoSecure will be created with the provided data and storedinthecleartextfile/data/data/<package-name>/databases/privateNotSoSecure. Thedatabase’sdirectorymaycontainseveralfilesbesidestheSQLitedatabase: • Journalfiles: Thesearetemporaryfilesusedtoimplementatomiccommitandrollback. • Lock files: The lock files are part of the locking and journaling feature, which was designed to improve SQLite concurrencyandreducethewriterstarvationproblem. SensitiveinformationshouldnotbestoredinunencryptedSQLitedatabases. 191\\nSQLite Databases (Encrypted) WiththelibrarySQLCipher,youcanpassword-encryptSQLitedatabases. ExampleinJava: SQLiteDatabasesecureDB =SQLiteDatabase.openOrCreateDatabase(database,\"password123\",null); secureDB.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\"); secureDB.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPassEnc');\"); secureDB.close(); ExampleinKotlin: varsecureDB =SQLiteDatabase.openOrCreateDatabase(database,\"password123\",null) secureDB.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\") secureDB.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPassEnc');\") secureDB.close() Securewaystoretrievethedatabasekeyinclude: • AskingtheusertodecryptthedatabasewithaPINorpasswordoncetheappisopened(weakpasswordsandPINs arevulnerabletobruteforceattacks) • Storingthekeyontheserverandallowingittobeaccessedfromawebserviceonly(sothattheappcanbeused onlywhenthedeviceisonline) Firebase Real-time Databases Firebaseisadevelopmentplatformwithmorethan15products,andoneofthemisFirebaseReal-timeDatabase. Itcan beleveragedbyapplicationdeveloperstostoreandsyncdatawithaNoSQLcloud-hosteddatabase. Thedataisstored asJSONandissynchronizedinreal-timetoeveryconnectedclientandalsoremainsavailableevenwhentheapplication goesoffline. AmisconfiguredFirebaseinstancecanbeidentifiedbymakingthefollowingnetworkcall: https://_firebaseProjectName_.firebaseio.com/.json ThefirebaseProjectNamecanberetrievedfromthemobileapplicationbyreverseengineeringtheapplication. Alterna- tively,theanalystscanuseFirebaseScanner,apythonscriptthatautomatesthetaskaboveasshownbelow: pythonFirebaseScanner.py -p<pathOfAPKFile> pythonFirebaseScanner.py -f<commaSeparatedFirebaseProjectNames> Realm Databases TheRealmDatabaseforJavaisbecomingmoreandmorepopularamongdevelopers. Thedatabaseanditscontentscan beencryptedwithakeystoredintheconfigurationfile. //thegetKey()methodeithergetsthekeyfromtheserverorfromaKeyStore,orisderivedfromapassword. RealmConfigurationconfig =newRealmConfiguration.Builder() .encryptionKey(getKey()) .build(); Realmrealm =Realm.getInstance(config); Ifthedatabaseisnotencrypted,youshouldbeabletoobtainthedata. Ifthedatabaseisencrypted,determinewhether thekeyishard-codedinthesourceorresourcesandwhetheritisstoredunprotectedinsharedpreferencesorsomeother location. 192\\nInternal Storage Youcansavefilestothedevice’sinternalstorage. Filessavedtointernalstoragearecontainerizedbydefaultandcannot beaccessedbyotherappsonthedevice. Whentheuseruninstallsyourapp,thesefilesareremoved. Thefollowingcode snippetswouldpersistentlystoresensitivedatatointernalstorage. ExampleforJava: FileOutputStreamfos =null; try{ fos=openFileOutput(FILENAME,Context.MODE_PRIVATE); fos.write(test.getBytes()); fos.close(); }catch (FileNotFoundExceptione){ e.printStackTrace(); }catch (IOExceptione){ e.printStackTrace(); } ExampleforKotlin: varfos:FileOutputStream?=null fos=openFileOutput(\"FILENAME\",Context.MODE_PRIVATE) fos.write(test.toByteArray(Charsets.UTF_8)) fos.close() Youshouldcheckthefilemodetomakesurethatonlytheappcanaccessthefile. YoucansetthisaccesswithMODE_PRI- VATE.ModessuchasMODE_WORLD_READABLE(deprecated)andMODE_WORLD_WRITEABLE(deprecated)mayposeasecurity risk. SearchfortheclassFileInputStreamtofindoutwhichfilesareopenedandreadwithintheapp. External Storage EveryAndroid-compatibledevicesupportssharedexternalstorage. Thisstoragemayberemovable(suchasanSDcard) or internal (non-removable). Files saved to external storage are world-readable. The user can modify them when USB massstorageisenabled. Youcanusethefollowingcodesnippetstopersistentlystoresensitiveinformationtoexternal storageasthecontentsofthefilepassword.txt. ExampleforJava: Filefile =newFile (Environment.getExternalFilesDir(),\"password.txt\"); Stringpassword =\"SecretPassword\"; FileOutputStreamfos; fos=newFileOutputStream(file); fos.write(password.getBytes()); fos.close(); ExampleforKotlin: valpassword =\"SecretPassword\" valpath =context.getExternalFilesDir(null) valfile =File(path,\"password.txt\") file.appendText(password) Thefilewillbecreatedandthedatawillbestoredinacleartextfileinexternalstorageoncetheactivityhasbeencalled. It’salsoworthknowingthatfilesstoredoutsidetheapplicationfolder(data/data/<package-name>/)willnotbedeleted whentheuseruninstallstheapplication. Finally,it’sworthnotingthattheexternalstoragecanbeusedbyanattackerto allowforarbitrarycontroloftheapplicationinsomecases. Formoreinformation: seetheblogpostfromCheckpoint. 193\\nKeyStore TheAndroidKeyStoresupportsrelativelysecurecredentialstorage. AsofAndroid4.3(APIlevel18),itprovidespublicAPIs forstoringandusingapp-privatekeys. Anappcanuseapublickeytocreateanewprivate/publickeypairforencrypting applicationsecrets,anditcandecryptthesecretswiththeprivatekey. YoucanprotectkeysstoredintheAndroidKeyStorewithuserauthenticationinaconfirmcredentialflow. Theuser’slock screencredentials(pattern,PIN,password,orfingerprint)areusedforauthentication. Youcanusestoredkeysinoneoftwomodes: 1. Usersareauthorizedtousekeysforalimitedperiodoftimeafterauthentication. Inthismode,allkeyscanbeused assoonastheuserunlocksthedevice. Youcancustomizetheperiodofauthorizationforeachkey. Youcanuse thisoptiononlyifthesecurelockscreenisenabled. Iftheuserdisablesthesecurelockscreen,allstoredkeyswill becomepermanentlyinvalid. 2. Usersareauthorizedtouseaspecificcryptographicoperationthatisassociatedwithonekey. Inthismode,users mustrequestaseparateauthorizationforeachoperationthatinvolvesthekey. Currently,fingerprintauthentication istheonlywaytorequestsuchauthorization. ThelevelofsecurityaffordedbytheAndroidKeyStoredependsonitsimplementation,whichdependsonthedevice. Most moderndevicesofferahardware-backedKeyStoreimplementation: keysaregeneratedandusedinaTrustedExecution Environment(TEE)oraSecureElement(SE),andtheoperatingsystemcan’taccessthemdirectly. Thismeansthatthe encryptionkeysthemselvescan’tbeeasilyretrieved,evenfromarooteddevice. Youcanverifyhardware-backedkeys withKeyAttestation. Youcandeterminewhetherthekeysareinsidethesecurehardwarebycheckingthereturnvalueof theisInsideSecureHardwaremethod,whichispartoftheKeyInfoclass. NotethattherelevantKeyInfoindicatesthatsecretkeysandHMACkeysareinsecurelystoredonseveraldevices despiteprivatekeysbeingcorrectlystoredonthesecurehardware. Thekeysofasoftware-onlyimplementationareencryptedwithaper-userencryptionmasterkey. Anattackercanaccess allkeysstoredonrooteddevicesthathavethisimplementationinthefolder/data/misc/keystore/. Becausetheuser’s lock screen pin/password is used to generate the master key, the Android KeyStore is unavailable when the device is locked. FormoresecurityAndroid9(APIlevel28)introducestheunlockedDeviceRequiredflag. Bypassingtruetothe setUnlockedDeviceRequiredmethod,theapppreventsitskeysstoredinAndroidKeystorefrombeingdecryptedwhen thedeviceislocked,anditrequiresthescreentobeunlockedbeforeallowingdecryption. Hardware-backed Android KeyStore Thehardware-backedAndroidKeyStoregivesanotherlayertodefense-in-depthsecurityconceptforAndroid. Keymaster HardwareAbstractionLayer(HAL)wasintroducedwithAndroid6(APIlevel23). Applicationscanverifyifthekeyisstored insidethesecurityhardware(bycheckingifKeyInfo.isinsideSecureHardwarereturnstrue). DevicesrunningAndroid 9 (API level 28) and higher can have a StrongBox Keymaster module, an implementation of the Keymaster HAL that resides in a hardware security module which has its own CPU, secure storage, a true random number generator and a mechanismtoresistpackagetampering. Tousethisfeature,truemustbepassedtothesetIsStrongBoxBackedmethod ineithertheKeyGenParameterSpec.BuilderclassortheKeyProtection.Builderclasswhengeneratingorimporting keysusingAndroidKeystore. TomakesurethatStrongBoxisusedduringruntime,checkthatisInsideSecureHardware returnstrueandthatthesystemdoesnotthrowStrongBoxUnavailableException,whichgetsthrowniftheStrongBox Keymasterisn’tavailableforthegivenalgorithmandkeysizeassociatedwithakey. Descriptionoffeaturesonhardware- basedkeystorecanbefoundonAOSPpages. KeymasterHALisaninterfacetohardware-backedcomponents-TrustedExecutionEnvironment(TEE)oraSecureElement (SE),whichisusedbyAndroidKeystore. Anexampleofsuchahardware-backedcomponentisTitanM. Key Attestation FortheapplicationswhichheavilyrelyonAndroidKeystoreforbusiness-criticaloperations,suchasmulti-factorauthen- tication through cryptographic primitives, secure storage of sensitive data at the client-side, etc. Android provides the 194\\nfeatureofKeyAttestation,whichhelpstoanalyzethesecurityofcryptographicmaterialmanagedthroughAndroidKey- store. FromAndroid8.0(APIlevel26),thekeyattestationwasmademandatoryforallnew(Android7.0orhigher)devices thatneedtohavedevicecertificationforGoogleapps. SuchdevicesuseattestationkeyssignedbytheGooglehardware AttestationRootcertificateandthesamecanbeverifiedthroughthekeyattestationprocess. Duringkeyattestation,wecanspecifythealiasofakeypairandinreturn,getacertificatechain,whichwecanuseto verifythepropertiesofthatkeypair. IftherootcertificateofthechainistheGoogleHardwareAttestationRootcertificate, andthechecksrelatedtokeypairstorageinhardwarearemade,itgivesanassurancethatthedevicesupportshardware- levelkeyattestation,andthatthekeyisinthehardware-backedkeystorethatGooglebelievestobesecure. Alternatively, if the attestation chain has any other root certificate, then Google does not make any claims about the security of the hardware. Althoughthekeyattestationprocesscanbeimplementedwithintheapplicationdirectly,itisrecommendedthatitshould beimplementedattheserver-sideforsecurityreasons. Thefollowingarethehigh-levelguidelinesforthesecureimple- mentationofKeyAttestation: • TheservershouldinitiatethekeyattestationprocessbycreatingarandomnumbersecurelyusingCSPRNG(Cryp- tographicallySecureRandomNumberGenerator)andthesameshouldbesenttotheuserasachallenge. • TheclientshouldcallthesetAttestationChallengeAPIwiththechallengereceivedfromtheserverandshould thenretrievetheattestationcertificatechainusingtheKeyStore.getCertificateChainmethod. • Theattestationresponseshouldbesenttotheserverfortheverificationandfollowingchecksshouldbeperformed fortheverificationofthekeyattestationresponse: – Verifythecertificatechain,uptotherootandperformcertificatesanitycheckssuchasvalidity,integrityand trustworthiness. ChecktheCertificateRevocationStatusListmaintainedbyGoogle,ifnoneofthecertificates inthechainwasrevoked. – CheckiftherootcertificateissignedwiththeGoogleattestationrootkeywhichmakestheattestationprocess trustworthy. – Extract the attestation certificate extension", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 81}}