{"text": "coulddoany(orall) ofthefollowing: accesslocalfiles, triggerHTTPrequeststoar- bitraryhostsandports, launchacross-siterequestforgery(CSRF)attack, andcauseadenial-of-servicecondition. The OWASPwebtestingguidecontainsthefollowingexampleforXXE: <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo[ <!ELEMENT fooANY> <!ENTITY xxeSYSTEM \"file:///dev/random\" >]><foo>&xxe;</foo> Inthisexample,thelocalfile/dev/randomisopenedwhereanendlessstreamofbytesisreturned,potentiallycausinga denial-of-service. The current trend in app development focuses mostly on REST/JSON-based services as XML is becoming less common. However,intherarecaseswhereuser-suppliedorotherwiseuntrustedcontentisusedtoconstructXMLqueries,itcould be interpreted by local XML parsers, such as NSXMLParser on iOS. As such, said input should always be validated and meta-charactersshouldbeescaped. Injection Attack Vectors Theattacksurfaceofmobileappsisquitedifferentfromtypicalwebandnetworkapplications. Mobileappsdon’toften exposeservicesonthenetwork,andviableattackvectorsonanapp’suserinterfacearerare. Injectionattacksagainstan apparemostlikelytooccurthroughinter-processcommunication(IPC)interfaces,whereamaliciousappattacksanother apprunningonthedevice. Locatingapotentialvulnerabilitybeginsbyeither: • Identifying possible entry points for untrusted input then tracing from those locations to see if the destination containspotentiallyvulnerablefunctions. • Identifying known, dangerous library / API calls (e.g. SQL queries) and then checking whether unchecked input successfullyinterfaceswithrespectivequeries. Duringamanualsecurityreview,youshouldemployacombinationofbothtechniques. Ingeneral,untrustedinputsenter mobileappsthroughthefollowingchannels: • IPCcalls • CustomURLschemes • QRcodes • InputfilesreceivedviaBluetooth,NFC,orothermeans • Pasteboards • Userinterface Verifythatthefollowingbestpracticeshavebeenfollowed: • Untrustedinputsaretype-checkedand/orvalidatedusingalistofacceptablevalues. • Preparedstatementswithvariablebinding(i.e.parameterizedqueries)areusedwhenperformingdatabasequeries. Ifpreparedstatementsaredefined,user-supplieddataandSQLcodeareautomaticallyseparated. • WhenparsingXMLdata,ensuretheparserapplicationisconfiguredtorejectresolutionofexternalentitiesinorder topreventXXEattack. • When working with x509 formatted certificate data, ensure that secure parsers are used. For instance Bouncy Castlebelowversion1.6allowsforRemoteCodeExecutionbymeansofunsafereflection. WewillcoverdetailsrelatedtoinputsourcesandpotentiallyvulnerableAPIsforeachmobileOSintheOS-specifictesting guides. 78\\nCross-Site Scripting Flaws Cross-site scripting (XSS) issues allow attackers to inject client-side scripts into web pages viewed by users. This type ofvulnerabilityisprevalentinwebapplications. Whenauserviewstheinjectedscriptinabrowser, theattackergains theabilitytobypassthesameoriginpolicy,enablingawidevarietyofexploits(e.g.stealingsessioncookies,loggingkey presses,performingarbitraryactions,etc.). Inthecontextofnativeapps,XSSrisksarefarlessprevalentforthesimplereasonthesekindsofapplicationsdonotrely onawebbrowser. However,appsusingWebViewcomponents,suchasWKWebVieworthedeprecatedUIWebViewoniOS andWebViewonAndroid,arepotentiallyvulnerabletosuchattacks. Anolderbutwell-knownexampleisthelocalXSSissueintheSkypeappforiOS,firstidentifiedby PhilPurviance. The Skypeappfailedtoproperlyencodethenameofthemessagesender,allowinganattackertoinjectmaliciousJavaScript tobeexecutedwhenauserviewsthemessage. Inhisproof-of-concept,Philshowedhowtoexploittheissueandsteala user’saddressbook. Static Analysis - Security Testing Considerations TakeacloselookatanyWebViewspresentandinvestigateforuntrustedinputrenderedbytheapp. XSSissuesmayexistiftheURLopenedbyWebViewispartiallydeterminedbyuserinput. Thefollowingexampleisfrom anXSSissueintheZohoWebService,reportedbyLinusSärud. Java webView.loadUrl(\"javascript:initialize(\" +myNumber +\");\"); Kotlin webView.loadUrl(\"javascript:initialize($myNumber);\") AnotherexampleofXSSissuesdeterminedbyuserinputispublicoverriddenmethods. Java @Override public boolean shouldOverrideUrlLoading(WebViewview,Stringurl){ if(url.substring(0,6).equalsIgnoreCase(\"yourscheme:\")){ //parsetheURLobjectandexecutefunctions } } Kotlin funshouldOverrideUrlLoading(view:WebView,url:String):Boolean { if(url.substring(0,6).equals(\"yourscheme:\",ignoreCase =true)){ //parsetheURLobjectandexecutefunctions } } SergeyBobrovwasabletotakeadvantageofthisinthefollowingHackerOnereport. AnyinputtotheHTMLparameter wouldbetrustedinQuora’sActionBarContentActivity. Payloadsweresuccessfulusingadb,clipboarddataviaModalCon- tentActivity,andIntentsfrom3rdpartyapplications. • ADB $adb shell $am start -ncom.quora.android/com.quora.android.ActionBarContentActivity \\ -eurl 'http://test/test' -ehtml 'XSS<script>alert(123)</script>' • ClipboardData 79\\n$am start -ncom.quora.android/com.quora.android.ModalContentActivity \\ -eurl 'http://test/test' -ehtml \\ '<script>alert(QuoraAndroid.getClipboardData());</script>' • 3rdpartyIntentinJavaorKotlin: Intenti =newIntent(); i.setComponent(newComponentName(\"com.quora.android\", \"com.quora.android.ActionBarContentActivity\")); i.putExtra(\"url\",\"http://test/test\"); i.putExtra(\"html\",\"XSSPoC <script>alert(123)</script>\"); view.getContext().startActivity(i); vali=Intent() i.component =ComponentName(\"com.quora.android\", \"com.quora.android.ActionBarContentActivity\") i.putExtra(\"url\",\"http://test/test\") i.putExtra(\"html\",\"XSSPoC <script>alert(123)</script>\") view.context.startActivity(i) IfaWebViewisusedtodisplayaremotewebsite,theburdenofescapingHTMLshiftstotheserverside. IfanXSSflaw exists on the web server, this can be used to execute script in the context of the WebView. As such, it is important to performstaticanalysisofthewebapplicationsourcecode. Verifythatthefollowingbestpracticeshavebeenfollowed: • NountrusteddataisrenderedinHTML,JavaScriptorotherinterpretedcontextsunlessitisabsolutelynecessary. • Appropriateencodingisappliedtoescapecharacters,suchasHTMLentityencoding. Note: escapingrulesbecome complicatedwhenHTMLisnestedwithinothercode,forexample,renderingaURLlocatedinsideaJavaScriptblock. Considerhowdatawillberenderedinaresponse. Forexample,ifdataisrenderedinaHTMLcontext,sixcontrolcharacters thatmustbeescaped: Character Escaped & &amp; < &lt; > &gt; ” &quot; ’ &#x27; / &#x2F; For a comprehensive list of escaping rules and other prevention measures, refer to the OWASP XSS Prevention Cheat Sheet. Dynamic Analysis - Security Testing Considerations XSS issues can be best detected using manual and/or automated input fuzzing, i.e. injecting HTML tags and special characters into all available input fields to verify the web application denies invalid inputs or escapes the HTML meta- charactersinitsoutput. AreflectedXSSattackreferstoanexploitwheremaliciouscodeisinjectedviaamaliciouslink. Totestfortheseattacks, automatedinputfuzzingisconsideredtobeaneffectivemethod. Forexample,theBURPScannerishighlyeffectivein identifyingreflectedXSSvulnerabilities. Asalwayswithautomatedanalysis,ensureallinputvectorsarecoveredwitha manualreviewoftestingparameters. Memory Corruption Bugs Memorycorruptionbugsareapopularmainstaywithhackers. Thisclassofbugresultsfromaprogrammingerrorthat causes the program to access an unintended memory location. Under the right conditions, attackers can capitalize on thisbehaviortohijacktheexecutionflowofthevulnerableprogramandexecutearbitrarycode. Thiskindofvulnerability occursinanumberofways: 80\\n• Bufferoverflows: Thisdescribesaprogrammingerrorwhereanappwritesbeyondanallocatedmemoryrangefor aparticularoperation. Anattackercanusethisflawtooverwriteimportantcontroldatalocatedinadjacentmemory, suchasfunctionpointers. Bufferoverflowswereformerlythemostcommontypeofmemorycorruptionflaw,but havebecomelessprevalentovertheyearsduetoanumberoffactors. Notably,awarenessamongdevelopersof therisksinusingunsafeClibraryfunctionsisnowacommonbestpracticeplus,catchingbufferoverflowbugsis relativelysimple. However,itisstillworthtestingforsuchdefects. • Out-of-bounds-access: Buggypointerarithmeticmaycauseapointerorindextoreferenceapositionbeyondthe boundsoftheintendedmemorystructure(e.g.bufferorlist). Whenanappattemptstowritetoanout-of-bounds address, a crash or unintended behavior occurs. If the attackercan control the targetoffset and manipulate the contentwrittentosomeextent,codeexecutionexploitislikelypossible. • Dangling pointers: These occur when an object with an incoming reference to a memory location is deleted ordeallocated, buttheobjectpointerisnotreset. Iftheprogramlaterusesthedanglingpointertocallavirtual functionofthealreadydeallocatedobject,itispossibletohijackexecutionbyoverwritingtheoriginalvtablepointer. Alternatively,itispossibletoreadorwriteobjectvariablesorothermemorystructuresreferencedbyadangling pointer. • Use-after-free: Thisreferstoaspecialcaseofdanglingpointersreferencingreleased(deallocated)memory. After amemoryaddressiscleared,allpointersreferencingthelocationbecomeinvalid,causingthememorymanagerto returntheaddresstoapoolofavailablememory. Whenthismemorylocationiseventuallyre-allocated,accessing theoriginalpointerwillreadorwritethedatacontainedinthenewlyallocatedmemory. Thisusuallyleadstodata corruptionandundefinedbehavior,butcraftyattackerscansetuptheappropriatememorylocationstoleverage controloftheinstructionpointer. • Integeroverflows: Whentheresultofanarithmeticoperationexceedsthemaximumvaluefortheintegertype defined by the programmer, this results in the value “wrapping around” the", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 52}}