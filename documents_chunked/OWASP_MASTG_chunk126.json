{"text": "t.g............. 0x0036f820 00000000000000000000000000000000 ................ Notethatinordertofindthisstringusingthestringscommandyou’llhavetospecifyanencodingusingthe-eflagand inthiscaselfor16-bitlittle-endiancharacter. 350\\n$strings -elmemory_ios |grep owasp-mstg owasp-mstg Waiting for the debugger Platform: ios TODO:Shouldbepossiblewithlldbaswell,currentlydon’thaveanything. Get Loaded Native Libraries Platform: ios Using Objection Youcanusethelist_frameworkscommandinobjectiontolistalltheapplication’sbundlesthatrepresentFrameworks. ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #iosbundleslist_frameworks Executable Bundle Version Path -------------- ----------------------------------------- --------- ------------------------------------------- Bolts org.cocoapods.Bolts 1.9.0 ...8/DVIA-v2.app/Frameworks/Bolts.framework RealmSwift org.cocoapods.RealmSwift 4.1.1 ...A-v2.app/Frameworks/RealmSwift.framework ...ystem/Library/Frameworks/IOKit.framework ... Using Frida InFridaREPLprocessrelatedinformationcanbeobtainedusingtheProcesscommand. WithintheProcesscommand thefunctionenumerateModulesliststhelibrariesloadedintotheprocessmemory. [iPhone::com.iOweApp]->Process.enumerateModules() [ { \"base\":\"0x10008c000\", \"name\": \"iOweApp\", \"path\":\"/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp\", \"size\":49152 }, { \"base\":\"0x1a1c82000\", \"name\":\"Foundation\", \"path\":\"/System/Library/Frameworks/Foundation.framework/Foundation\", \"size\":2859008 }, { \"base\":\"0x1a16f4000\", \"name\":\"libobjc.A.dylib\", \"path\":\"/usr/lib/libobjc.A.dylib\", \"size\":200704 }, ... Similarly,informationrelatedtovariousthreadscanbeobtained. Process.enumerateThreads() [ { \"context\":{ ... }, \"id\": 1287, \"state\":\"waiting\" }, ... TheProcesscommandexposesmultiplefunctionswhichcanbeexploredasperneeds. Someusefulfunctionsarefind- ModuleByAddress,findModuleByNameandenumerateRangesbesidesothers. 351\\nAutomated Static Analysis Platform: ios Several automated tools for analyzing iOS apps are available; most of them are commercial tools. The free and open sourcetoolsMobSFandobjectionhavesomestaticanddynamicanalysisfunctionality. Additionaltoolsarelistedinthe “StaticSourceCodeAnalysis”sectionofthe“TestingTools”chapter. Don’t shy away from using automated scanners for your analysis - they help you pick low-hanging fruit and allow you tofocusonthemoreinterestingaspectsofanalysis,suchasthebusinesslogic. Keepinmindthatstaticanalyzersmay producefalsepositivesandfalsenegatives;alwaysreviewthefindingscarefully. Repackaging and Re-Signing Platform: ios Of course, tampering an app invalidates the main executable’s code signature, so this won’t run on a non-jailbroken device. You’ll need to replace the provisioning profile and sign both the main executable and the files you’ve made include(e.g.FridaGadget.dylib)withthecertificatelistedintheprofile. Repackaging First,let’saddourownprovisioningprofiletothepackage: cpAwesomeRepackaging.mobileprovisionPayload/UnCrackable\\Level\\1.app/embedded.mobileprovision Next, we need to make sure that the Bundle ID in Info.plist matches the one specified in the profile because the codesigntoolwillreadtheBundleIDfromInfo.plistduringsigning;thewrongvaluewillleadtoaninvalidsignature. /usr/libexec/PlistBuddy -c\"Set:CFBundleIdentifiersg.vantagepoint.repackage\" Payload/UnCrackable\\Level\\ 1.app/Info.plist Re-Signing Finally, we use the codesign tool to re-sign both binaries. You need to use your own signing identity (in this example 8004380F331DCA22CC1B47FB1A805890AE41C938),whichyoucanoutputbyexecutingthecommandsecurity find- identity -v. $rm -rfPayload/UnCrackable\\Level\\1.app/_CodeSignature $/usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938 Payload/UnCrackable\\Level\\1.app/FridaGadget.dylib Payload/UnCrackableLevel1.app/FridaGadget.dylib:replacingexistingsignature entitlements.plististhefileyoucreatedforyouremptyiOSproject. $/usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938 --entitlements entitlements.plistPayload/UnCrackable\\ Level\\1.app/UnCrackable\\ ↪ Level\\1 Payload/UnCrackableLevel1.app/UnCrackableLevel1:replacingexistingsignature Nowyoushouldbereadytorunthemodifiedapp. Deployandruntheapponthedeviceusingios-deploy: ios-deploy --debug --bundle Payload/UnCrackable\\Level\\1.app/ Ifeverythingwentwell,theappshouldstartindebuggingmodewithLLDBattached. Fridashouldthenbeabletoattach totheappaswell. Youcanverifythisviathefrida-pscommand: 352\\n$frida-ps -U PID Name --- ------ 499 Gadget Whensomethinggoeswrong(anditusuallydoes),mismatchesbetweentheprovisioningprofileandcode-signingheader arethemostlikelycauses. Readingtheofficialdocumentationhelpsyouunderstandthecode-signingprocess. Apple’s entitlementtroubleshootingpageisalsoausefulresource. Decompiling Native Code Platform: ios TODO.Hopperisonlymentionedonceintheentiredocument,ghidraisonlyusedfordisassembly,...Wecanexpandthis, maybeaddsomegoodghidrasnippetsforobjective-cmapping,... Information Gathering - Network Communication Platform: ios Most of the apps you might encounter connect to remote endpoints. Even before you perform any dynamic analysis (e.g.trafficcaptureandanalysis),youcanobtainsomeinitialinputsorentrypointsbyenumeratingthedomainstowhich theapplicationissupposedtocommunicateto. Typically these domains will be present as strings within the binary of the application. One can extract domains by retrieving strings (as discussed above) or checking the strings using tools like Ghidra. The latter option has a clear advantage: it can provide you with context, as you’ll be able to see in which context each domain is being used by checkingthecross-references. Fromhereonyoucanusethisinformationtoderivemoreinsightswhichmightbeofuselaterduringyouranalysis,e.g.you couldmatchthedomainstothepinnedcertificatesorperformfurtherreconnaissanceondomainnamestoknowmore aboutthetargetenvironment. Theimplementationandverificationofsecureconnectionscanbeanintricateprocessandtherearenumerousaspects toconsider. Forinstance,manyapplicationsuseotherprotocolsapartfromHTTPsuchasXMPPorplainTCPpackets,or performcertificatepinninginanattempttodeterMITMattacks. Remember that in most cases, using only static analysis will not be enough and might even turn out to be extremely inefficientwhencomparedtothedynamicalternativeswhichwillgetmuchmorereliableresults(e.g.usinganinterception proxy). Inthissectionwe’veonlytouchedthesurface,sopleaserefertothesection“BasicNetworkMonitoring/Sniffing” inthe“iOSBasicSecurityTesting”chapterandcheckoutthetestcasesinthechapter“iOSNetworkCommunication”for furtherinformation. 353\\nMethod Tracing Platform: ios InterceptingObjective-CmethodsisausefuliOSsecuritytestingtechnique. Forexample,youmaybeinterestedindata storageoperationsornetworkrequests. Inthefollowingexample,we’llwriteasimpletracerforloggingHTTP(S)requests madeviaiOSstandardHTTPAPIs. We’llalsoshowyouhowtoinjectthetracerintotheSafariwebbrowser. Inthefollowingexamples,we’llassumethatyouareworkingonajailbrokendevice. Ifthat’snotthecase,youfirstneed tofollowthestepsoutlinedinsectionRepackagingandRe-SigningtorepackagetheSafariapp. Fridacomeswithfrida-trace, afunctiontracingtool. frida-traceacceptsObjective-Cmethodsviathe-mflag. You can pass it wildcards as well-given-[NSURL *], for example, frida-trace will automatically install hooks on allNSURL classselectors. We’llusethistogetaroughideaaboutwhichlibraryfunctionsSafaricallswhentheuseropensaURL. RunSafarionthedeviceandmakesurethedeviceisconnectedviaUSB.Thenstartfrida-traceasfollows: $frida-trace -U-m\"-[NSURL*]\" Safari Instrumentingfunctions... -[NSURLisMusicStoreURL]:Loadedhandlerat \"/Users/berndt/Desktop/__handlers__/__NSURL_isMusicStoreURL_.js\" -[NSURLisAppStoreURL]:Loadedhandlerat \"/Users/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js\" (...) Startedtracing248functions.PressCtrl+Ctostop. Next, navigatetoanewwebsiteinSafari. Youshouldseetracedfunctioncallsonthefrida-traceconsole. Notethat theinitWithURL:methodiscalledtoinitializeanewURLrequestobject. /*TID0xc07 */ 20313ms -[NSURLRequest _initWithCFURLRequest:0x1043bca30] 20313ms -[NSURLRequest URL] (...) 21324ms -[NSURLRequest initWithURL:0x106388b00] 21324ms |-[NSURLRequestinitWithURL:0x106388b00cachePolicy:0x0timeoutInterval:0x106388b80 Runtime Reverse Engineering Platform: ios Runtimereverseengineeringcanbeseenastheon-the-flyversionofreverseengineeringwhereyoudon’thavethebinary datatoyourhostcomputer. Instead,you’llanalyzeitstraightfromthememoryoftheapp. We’ll keep using the iGoat-Swift app, open a session with r2frida r2 frida://usb//iGoat-Swift and you can start by displayingthetargetbinaryinformationbyusingthe:icommand:", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 126}}