{"text": "These searches includecheckingforbusyboxandattemptingtoopenthesubinaryatdifferentlocations: /sbin/su /system/bin/su /system/bin/failsafe/su /system/xbin/su /system/xbin/busybox /system/sd/xbin/su /data/local/su /data/local/xbin/su /data/local/bin/su CheckingwhethersuisonthePATHalsoworks: public static boolean checkRoot(){ for(StringpathDir :System.getenv(\"PATH\").split(\":\")){ if(newFile(pathDir,\"su\").exists()){ return true; } } return false; } FilecheckscanbeeasilyimplementedinbothJavaandnativecode. ThefollowingJNIexample(adaptedfromrootinspec- tor)usesthestatsystemcalltoretrieveinformationaboutafileandreturns“1”ifthefileexists. jbooleanJava_com_example_statfile(JNIEnv *env,jobjectthis,jstringfilepath){ jbooleanfileExists =0; jbooleanisCopy; const char *path =(*env)->GetStringUTFChars(env,filepath,&isCopy); struct statfileattrib; if(stat(path,&fileattrib)<0){ __android_log_print(ANDROID_LOG_DEBUG,DEBUG_TAG,\"NATIVE:staterror:[%s]\",strerror(errno)); }else { __android_log_print(ANDROID_LOG_DEBUG,DEBUG_TAG,\"NATIVE:statsuccess,accessperms:[%d]\",fileattrib.st_mode); return 1; } return 0; } Executing su and other commands AnotherwayofdeterminingwhethersuexistsisattemptingtoexecuteitthroughtheRuntime.getRuntime.execmethod. AnIOExceptionwillbethrownifsuisnotonthePATH.Thesamemethodcanbeusedtocheckforotherprogramsoften foundonrooteddevices,suchasbusyboxandthesymboliclinksthattypicallypointtoit. Checking running processes Supersu-by far the most popular rooting tool-runs an authentication daemon named daemonsu, so the presence of this process is another sign of a rooted device. Running processes can be enumerated with the ActivityManager. getRunningAppProcessesandmanager.getRunningServicesAPIs, thepscommand, andbrowsingthroughthe/proc directory. Thefollowingisanexampleimplementedinrootinspector: 303\\npublic boolean checkRunningProcesses(){ boolean returnValue =false; //Getcurrentlyrunningapplicationprocesses List<RunningServiceInfo>list =manager.getRunningServices(300); if(list !=null){ StringtempName; for(inti=0;i<list.size();++i){ tempName =list.get(i).process; if(tempName.contains(\"supersu\")||tempName.contains(\"superuser\")){ returnValue =true; } } } return returnValue; } Checking installed app packages YoucanusetheAndroidpackagemanagertoobtainalistofinstalledpackages. Thefollowingpackagenamesbelongto popularrootingtools: com.thirdparty.superuser eu.chainfire.supersu com.noshufou.android.su com.koushikdutta.superuser com.zachspong.temprootremovejb com.ramdroid.appquarantine com.topjohnwu.magisk Checking for writable partitions and system directories Unusualpermissionsonsystemdirectoriesmayindicateacustomizedorrooteddevice. Althoughthesystemanddata directoriesarenormallymountedread-only, you’llsometimesfindthemmountedread-writewhenthedeviceisrooted. Lookforthesefilesystemsmountedwiththe“rw”flagortrytocreateafileinthedatadirectories. Checking for custom Android builds Checking for signs of test builds and custom ROMs is also helpful. One way to do this is to check the BUILD tag for test-keys,whichnormallyindicateacustomAndroidimage. ChecktheBUILDtagasfollows: private boolean isTestKeyBuild() { Stringstr =Build.TAGS; if((str!=null)&& (str.contains(\"test-keys\"))); for(inti=1;;i=0) return i; } Missing Google Over-The-Air (OTA) certificates is another sign of a custom ROM: on stock Android builds, OTA updates Google’spubliccertificates. Anti-Debugging Debuggingisahighlyeffectivewaytoanalyzeruntimeappbehavior. Itallowsthereverseengineertostepthroughthe code,stopappexecutionatarbitrarypoints,inspectthestateofvariables,readandmodifymemory,andalotmore. Anti-debugging features can be preventive or reactive. As the name implies, preventive anti-debugging prevents the debuggerfromattachinginthefirstplace; reactiveanti-debugginginvolvesdetectingdebuggersandreactingtothem in some way (e.g., terminating the app or triggering hidden behavior). The “more-is-better” rule applies: to maximize effectiveness,defenderscombinemultiplemethodsofpreventionanddetectionthatoperateondifferentAPIlayersand arewelldistributedthroughouttheapp. As mentioned in the “Reverse Engineering and Tampering” chapter, we have to deal with two debugging protocols on Android: we can debug on the Java level with JDWP or on the native layer via a ptrace-based debugger. A good anti- debuggingschemeshoulddefendagainstbothtypesofdebugging. 304\\nJDWP Anti-Debugging Inthechapter“ReverseEngineeringandTampering”,wetalkedaboutJDWP,theprotocolusedforcommunicationbetween thedebuggerandtheJavaVirtualMachine. Weshowedthatitiseasytoenabledebuggingforanyappbypatchingits manifestfile,andchangingthero.debuggablesystempropertywhichenablesdebuggingforallapps. Let’slookatafew thingsdevelopersdotodetectanddisableJDWPdebuggers. Checking the Debuggable Flag in ApplicationInfo Wehavealreadyencounteredtheandroid:debuggableattribute. ThisflagintheAndroidManifestdetermineswhether theJDWPthreadisstartedfortheapp. Itsvaluecanbedeterminedprogrammatically, viatheapp’sApplicationInfo object. Iftheflagisset,themanifesthasbeentamperedwithandallowsdebugging. public static boolean isDebuggable(Contextcontext){ return ((context.getApplicationContext().getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE)!=0); } isDebuggerConnected While this might be pretty obvious to circumvent for a reverse engineer, you can use isDebuggerConnected from the android.os.Debugclasstodeterminewhetheradebuggerisconnected. public static boolean detectDebugger(){ return Debug.isDebuggerConnected(); } ThesameAPIcanbecalledvianativecodebyaccessingtheDvmGlobalsglobalstructure. JNIEXPORTjbooleanJNICALLJava_com_test_debugging_DebuggerConnectedJNI(JNIenv *env,jobjectobj){ if(gDvm.debuggerConnected ||gDvm.debuggerActive) return JNI_TRUE; return JNI_FALSE; } Timer Checks Debug.threadCpuTimeNanos indicates the amount of time that the current thread has been executing code. Because debuggingslowsdownprocessexecution,youcanusethedifferenceinexecutiontimetoguesswhetheradebuggeris attached. static boolean detect_threadCpuTimeNanos(){ long start =Debug.threadCpuTimeNanos(); for(inti=0;i<1000000;++i) continue; long stop =Debug.threadCpuTimeNanos(); if(stop -start <10000000){ return false; } else { return true; } } Messing with JDWP-Related Data Structures InDalvik,theglobalvirtualmachinestateisaccessibleviatheDvmGlobalsstructure. TheglobalvariablegDvmholdsa pointertothisstructure. DvmGlobalscontainsvariousvariablesandpointersthatareimportantforJDWPdebuggingand canbetamperedwith. 305\\nstruct DvmGlobals { /* *Someoptionsthatcouldbeworthtamperingwith:) */ bool jdwpAllowed; //debuggingallowedforthisprocess? bool jdwpConfigured; //hasdebugginginfobeenprovided? JdwpTransportTypejdwpTransport; bool jdwpServer; char* jdwpHost; int jdwpPort; bool jdwpSuspend; Thread* threadList; bool nativeDebuggerActive; bool debuggerConnected; /*debuggerorDDMSisconnected*/ bool debuggerActive; /*debuggerismakingrequests*/ JdwpState* jdwpState; }; Forexample,settingthegDvm.methDalvikDdmcServer_dispatchfunctionpointertoNULLcrashestheJDWPthread: JNIEXPORTjbooleanJNICALLJava_poc_c_crashOnInit (JNIEnv*env,jobject ){ gDvm.methDalvikDdmcServer_dispatch =NULL; } YoucandisabledebuggingbyusingsimilartechniquesinARTeventhoughthegDvmvariableisnotavailable. TheART runtime exports some of the vtables of JDWP-related classes as global symbols (in C++, vtables are tables that hold pointerstoclassmethods). ThisincludesthevtablesoftheclassesJdwpSocketStateandJdwpAdbState,whichhandle JDWPconnectionsvianetworksocketsandADB,respectively. Youcanmanipulatethebehaviorofthedebuggingruntime byoverwritingthemethodpointersintheassociatedvtables(archived). OnewaytooverwritethemethodpointersistooverwritetheaddressofthefunctionjdwpAdbState::ProcessIncoming withtheaddressofJdwpAdbState::Shutdown. Thiswillcausethedebuggertodisconnectimmediately. #include <jni.h> #include <string> #include <android/log.h> #include <dlfcn.h> #include <sys/mman.h> #include <jdwp/jdwp.h> #definelog(FMT,...) __android_log_print(ANDROID_LOG_VERBOSE,\"JDWPFun\",FMT,##__VA_ARGS__) //Vtablestructure.Justtomakemessingaroundwithitmoreintuitive struct VT_JdwpAdbState", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 113}}