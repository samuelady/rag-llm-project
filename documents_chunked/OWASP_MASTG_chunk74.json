{"text": "extracted dump in the file system. If you have any problems,afirststepwouldbetoenablethedebugflag-dwhenrunningobjectionor,ifthatdoesn’thelp,filean issueinobjection’sGitHub. Next,weareabletofindthe“HellofromC++”stringswithradare2: $r2/Users/foo/memory_Android/memory [0x00000000]>izz~Hellofrom 11360x000652700x00065270 14 15 ()asciiHellofromC++ AlternativelyyoucanuseFridump. Thistime, wewillinputastringandseeifwecanfinditinthememorydump. For this, opentheMASTGHackingPlaygroundapp, navigateto“OMTG_DATAST_002_LOGGING”andenter“owasp-mstg”to thepasswordfield. Next,runFridump: python3fridump.py -Usg.vp.owasp_mobile.omtg_android -s CurrentDirectory:/Users/foo/git/fridump Outputdirectoryissetto:/Users/foo/git/fridump/dump StartingMemorydump... Oops,memoryaccessviolation!-------------------------------]0.28%Complete Progress: [##################################################]99.58%Complete Runningstringsonallfiles: Progress: [##################################################]100.0%Complete Finished! Tip: Enableverbositybyincludingtheflag-vifyouwanttoseemoredetails,e.g.theregionsprovokingmemory accessviolations. 162\\nIt will take a while until it’s completed and you’ll get a collection of *.data files inside the dump folder. When you add the-sflag,allstringsareextractedfromthedumpedrawmemoryfilesandaddedtothefilestrings.txt,whichisalso storedinthedumpdirectory. lsdump/ dump/1007943680_dump.datadump/357826560_dump.data dump/630456320_dump.data...strings.txt Finally,searchfortheinputstringinthedumpdirectory: $grep -nri owasp-mstgdump/ Binaryfiledump//316669952_dump.datamatches Binaryfiledump//strings.txtmatches The“owasp-mstg”stringcanbefoundinoneofthedumpfilesaswellasintheprocessedstringsfile. Repackaging & Re-Signing Platform: android Repackaging Youcaneasilyrepackageanappbydoingthefollowing: cdUnCrackable-Level1 apktoolb zipalign -v4dist/UnCrackable-Level1.apk../UnCrackable-Repackaged.apk Note that the Android Studio build tools directory must be in the path. It is located at [SDK-Path]/build-tools/[ version]. Thezipalignandapksignertoolsareinthisdirectory. Re-Signing Beforere-signing, youfirstneedacode-signingcertificate. IfyouhavebuiltaprojectinAndroidStudiobefore,theIDE hasalreadycreatedadebugkeystoreandcertificatein$HOME/.android/debug.keystore. Thedefaultpasswordforthis KeyStoreis“android”andthekeyiscalled“androiddebugkey”. ThestandardJavadistributionincludeskeytoolformanagingKeyStoresandcertificates. Youcancreateyourownsigning certificateandkey,thenaddittothedebugKeyStore: keytool -genkey -v-keystore ~/.android/debug.keystore -alias signkey -keyalg RSA-keysize 2048 -validity 20000 Afterthecertificateisavailable,youcanre-signtheAPKwithit. Besurethatapksignerisinthepathandthatyourunit fromthefolderwhereyourrepackagedAPKislocated. apksignersign --ks ~/.android/debug.keystore --ks-key-alias signkeyUnCrackable-Repackaged.apk Note: If you experience JRE compatibility issues with apksigner, you can use jarsigner instead. When you do this, zipalignmustbecalledaftersigning. jarsigner -verbose -keystore ~/.android/debug.keystore../UnCrackable-Repackaged.apksignkey zipalign -v4dist/UnCrackable-Level1.apk../UnCrackable-Repackaged.apk Nowyoumayreinstalltheapp: 163\\nadbinstallUnCrackable-Repackaged.apk Reviewing Decompiled Java Code Platform: android Followingtheexamplefrom“DecompilingJavaCode”,weassumethatyou’vesuccessfullydecompiledandopenedthe UnCrackableAppforAndroidLevel1inIntelliJ.AssoonasIntelliJhasindexedthecode,youcanbrowseitjustlikeyou’d browseanyotherJavaproject. Notethatmanyofthedecompiledpackages,classes,andmethodshaveweirdone-letter names;thisisbecausethebytecodehasbeen“minified”withProGuardatbuildtime. Thisisabasictypeofobfuscation thatmakesthebytecodealittlemoredifficulttoread,butwithafairlysimpleapplikethisone,itwon’tcauseyoumuch ofaheadache. Whenyou’reanalyzingamorecomplexapp,however,itcangetquiteannoying. When analyzing obfuscated code, annotating class names, method names, and other identifiers as you go along is a good practice. Open the MainActivity class in the package sg.vantagepoint.uncrackable1. The method verify is calledwhenyoutapthe“verify”button. Thismethodpassestheuserinputtoastaticmethodcalleda.a,whichreturns abooleanvalue. Itseemsplausiblethata.averifiesuserinput,sowe’llrefactorthecodetoreflectthis. Right-clicktheclassname(thefirstaina.a)andselectRefactor->Renamefromthedrop-downmenu(orpressShift-F6). Changetheclassnametosomethingthatmakesmoresensegivenwhatyouknowabouttheclasssofar. Forexample, youcouldcallit“Validator”(youcanalways revisethenamelater). a.anowbecomesValidator.a. Followthesame proceduretorenamethestaticmethodatocheck_input. Congratulations,youjustlearnedthefundamentalsofstaticanalysis! Itisallabouttheorizing,annotating,andgradually revisingtheoriesabouttheanalyzedprogramuntilyouunderstanditcompletelyor, atleast, wellenoughforwhatever youwanttoachieve. Next,Ctrl+click(orCommand+clickonMac)onthecheck_inputmethod. Thistakesyoutothemethoddefinition. The decompiledmethodlookslikethis: public static boolean check_input(Stringstring){ byte[]arrby =Base64.decode((String)\\ \"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=\",(int)0); byte[]arrby2 =newbyte[]{}; try{ arrby =sg.vantagepoint.a.a.a(Validator.b(\"8d127684cbc37c17616d806cf50473cc\"),arrby); arrby2 =arrby; 164\\n}sa catch (Exceptionexception){ Log.d((String)\"CodeCheck\",(String)(\"AESerror:\" +exception.getMessage())); } if(string.equals(newString(arrby2))){ return true; } return false; } So,youhaveaBase64-encodedStringthat’spassedtothefunctionainthepackage sg.vantagepoint.a.a (again, everything is called a) along with something that looks suspiciously like a hex-encoded encryptionkey(16hexbytes=128bit,acommonkeylength). Whatexactlydoesthisparticularado? Ctrl-clickittofind out. public class a{ public static byte[]a(byte[]object,byte[]arrby){ object =newSecretKeySpec((byte[])object,\"AES/ECB/PKCS7Padding\"); Ciphercipher =Cipher.getInstance(\"AES\"); cipher.init(2,(Key)object); return cipher.doFinal(arrby); } } Nowyou’regettingsomewhere: it’ssimplystandardAES-ECB.LooksliketheBase64stringstoredinarrby1incheck_- inputisaciphertext. Itisdecryptedwith128bitAES,thencomparedwiththeuserinput. Asabonustask,trytodecrypt theextractedciphertextandfindthesecretvalue! A faster way to get the decrypted string is to add dynamic analysis. We’ll revisit UnCrackable App for Android Level 1 latertoshowhow(e.g.intheDebuggingsection),sodon’tdeletetheprojectyet! Get Open Connections Platform: android Youcanfindsystem-widenetworkinginformationin/proc/netorjustbyinspectingthe/proc/<pid>/netdirectories(for somereasonnotprocessspecific). Therearemultiplefilespresentinthesedirectories,ofwhichtcp,tcp6andudpmight beconsideredrelevantfromthetester’sperspective. ##cat/proc/7254/net/tcp sl local_addressrem_address sttx_queuerx_queuetrtm->whenretrnsmt uid timeoutinode ... 69:1101A8C0:BB2F9A447D4A:01BB0100000000:0000000000:000000000000000010093 075412 100000000000000002031910 -1 70:1101A8C0:917CE3CB3AD8:01BB0100000000:0000000000:000000000000000010093 075553 100000000000000002032310 -1 71:1101A8C0:C1E39C187D4A:01BB0100000000:0000000000:000000000000000010093 075458 100000000000000002031910 -1 ... Intheoutputabove,themostrelevantfieldsforusare: • rem_address: remoteaddressandportnumberpair(inhexadecimalrepresentation). • tx_queue and rx_queue: the outgoing and incoming data queue in terms of kernel memory usage. These fields giveanindicationhowactivelytheconnectionisbeingused. • uid: containingtheeffectiveUIDofthecreatorofthesocket. Anotheralternativeistousethenetstatcommand,whichalsoprovidesinformationaboutthenetworkactivityforthe complete system in a more readable format, and can be easily filtered as per our requirements. For instance, we can easilyfilteritbyPID: ##netstat-p|grep24685 ActiveInternetconnections (w/oservers) ProtoRecv-QSend-QLocalAddress ForeignAddress State PID/ProgramName tcp 0 0192.168.1.17:47368 172.217.194.103:https CLOSE_WAIT 24685/com.google.android.youtube tcp 0 0192.168.1.17:47233 172.217.194.94:https CLOSE_WAIT 24685/com.google.android.youtube tcp 0 0192.168.1.17:38480 sc-in-f100.1e100.:httpsESTABLISHED24685/com.google.android.youtube tcp 0 0192.168.1.17:44833 74.125.24.91:https ESTABLISHED24685/com.google.android.youtube tcp 0 0192.168.1.17:38481 sc-in-f100.1e100.:httpsESTABLISHED24685/com.google.android.youtube ... 165\\nnetstatoutputisclearlymoreuserfriendlythanreading/proc/<pid>/net. Themostrelevantfieldsforus, similarto thepreviousoutput,arefollowing: • Foreign Address: remoteaddressandportnumberpair(portnumbercanbereplacedwiththewell-knownname ofaprotocolassociatedwiththeport). • Recv-QandSend-Q:Statisticsrelatedtoreceiveandsendqueue. Givesanindicationonhowactivelytheconnection isbeingused. • State: thestateofasocket,forexample,ifthesocketisinactiveuse(ESTABLISHED)orclosed(CLOSED). Get Loaded Native Libraries Platform: android Using Process Memory Maps Thefile/proc/<pid>/mapscontainsthecurrentlymappedmemoryregionsandtheiraccesspermissions. Usingthisfile wecangetthelistofthelibrariesloadedintheprocess. ##cat/proc/9568/maps 12c00000-52c00000rw-p0000000000:0414917 /dev/ashmem/dalvik-mainspace (regionspace)(deleted) 6f019000-6f2c0000rw-p00000000fd:001146914 /data/dalvik-cache/arm64/system@framework@boot.art ... 7327670000-7329747000r--p00000000fd:001884627 /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jkIMQ==/oat/arm64/base.odex .. 733494d000-7334cfb000r-xp00000000fd:001884542 ↪ /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so ... Using Frida You can retrieve process related information straight from the Frida CLI by using the Process command. Within the ProcesscommandthefunctionenumerateModulesliststhelibrariesloadedintotheprocessmemory. [HuaweiNexus6P::sg.vantagepoint.helloworldjni]->Process.enumerateModules()", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 74}}