{"text": "Exposed ThroughWebViews”belowformoreinformation. SFSafariViewController SFSafariViewControllerisavailablestartingoniOS9andshouldbeusedtoprovideageneralizedwebviewingexperi- ence. TheseWebViewscanbeeasilyspottedastheyhaveacharacteristiclayoutwhichincludesthefollowingelements: • Aread-onlyaddressfieldwithasecurityindicator. • AnAction(“Share”)button. • ADonebutton,backandforwardnavigationbuttons,anda“Safari”buttontoopenthepagedirectlyinSafari. 440\\nThereareacoupleofthingstoconsider: • JavaScriptcannotbedisabledinSFSafariViewControllerandthisisoneofthereasonswhytheusageofWKWeb- Viewisrecommendedwhenthegoalisextendingtheapp’suserinterface. • SFSafariViewControlleralsosharescookiesandotherwebsitedatawithSafari. • Theuser’sactivityandinteractionwithaSFSafariViewControllerarenotvisibletotheapp,whichcannotaccess AutoFilldata,browsinghistory,orwebsitedata. • AccordingtotheAppStoreReviewGuidelines,SFSafariViewControllersmaynotbehiddenorobscuredbyother viewsorlayers. Thisshouldbesufficientforanappanalysisandtherefore,SFSafariViewControllersareoutofscopefortheStaticand DynamicAnalysissections. Safari Web Inspector EnablingSafariwebinspectiononiOSallowsyoutoinspectthecontentsofaWebViewremotelyfromamacOSdevice. Bydefault,youcanviewthecontentsofanypageloadedintotheSafariappbecausetheSafariapphastheget-task- 441\\nallowedentitlement. ApplicationsinstalledfromtheAppstorewillhowevernothavethisentitlement,andsocannotbe attachedto. Onjailbrokendevices,thisentitlementcanbeaddedtoanyapplicationbyinstallingtheInspectorplustweak fromtheBigBossrepo. EnablingtheSafariWebInspectorisespeciallyinterestinginapplicationsthatexposenativeAPIsusingaJavaScriptbridge, forexampleinhybridapplications. Toactivatethewebinspectionyouhavetofollowthesesteps: 1. OntheiOSdeviceopentheSettingsapp: GotoSafari->AdvancedandtoggleonWebInspector. 2. OnthemacOSdevice,openSafari: inthemenubar,gotoSafari->Preferences->AdvancedandenableShow Developmenuinmenubar. 3. Connect your iOS device to the macOS device and unlock it: the iOS device name should appear in theDevelop menu. 4. (If not yet trusted) On macOS’s Safari, go to the Develop menu, click on the iOS device name, then on “Use for Development”andenabletrust. ToopenthewebinspectoranddebugaWebView: 1. IniOS,opentheappandnavigatetothescreenthatshouldcontainaWebView. 2. InmacOSSafari, gotoDeveloper -> ‘iOS Device Name’andyoushouldseethenameoftheWebViewbased context. ClickonittoopentheWebInspector. Nowyou’reabletodebugtheWebViewasyouwouldwitharegularwebpageonyourdesktopbrowser. Native Functionality Exposed Through WebViews IniOS7,AppleintroducedAPIsthatallowcommunicationbetweentheJavaScriptruntimeintheWebViewandthenative SwiftorObjective-Cobjects. IftheseAPIsareusedcarelessly,importantfunctionalitymightbeexposedtoattackerswho managetoinjectmaliciousscriptsintotheWebView(e.g.,throughasuccessfulCross-SiteScriptingattack). BothUIWebViewandWKWebViewprovideameansofcommunicationbetweentheWebViewandthenativeapp. Anyimpor- tantdataornativefunctionalityexposedtotheWebViewJavaScriptenginewouldalsobeaccessibletorogueJavaScript runningintheWebView. UIWebView: TherearetwofundamentalwaysofhownativecodeandJavaScriptcancommunicate: • JSContext: WhenanObjective-CorSwiftblockisassignedtoanidentifierinaJSContext,JavaScriptCoreautomat- icallywrapstheblockinaJavaScriptfunction. • JSExport protocol: Properties, instance methods and class methods declared in a JSExport-inherited protocol aremappedtoJavaScriptobjectsthatareavailabletoallJavaScriptcode. Modificationsofobjectsthatareinthe JavaScriptenvironmentarereflectedinthenativeenvironment. NotethatonlyclassmembersdefinedintheJSExportprotocolaremadeaccessibletoJavaScriptcode. WKWebView: JavaScript code in a WKWebView can still send messages back to the native app but in contrast to UIWebView, it is not possibletodirectlyreferencetheJSContextofaWKWebView. Instead,communicationisimplementedusingamessaging systemandusingthepostMessagefunction,whichautomaticallyserializesJavaScriptobjectsintonativeObjective-Cor Swiftobjects. Messagehandlersareconfiguredusingthemethodadd(_ scriptMessageHandler:name:). App Permissions IncontrasttoAndroid,whereeachapprunsonitsownuserID,iOSmakesallthird-partyappsrununderthenon-privileged mobile user. Each app has a unique home directory and is sandboxed, so that they cannot access protected system resourcesorfilesstoredbythesystemorbyotherapps. Theserestrictionsareimplementedviasandboxpolicies(aka. profiles),whichareenforcedbytheTrustedBSD(MAC)MandatoryAccessControlFrameworkviaakernelextension. iOS applies a generic sandbox profile to all third-party apps called container. Access to protected resources or data (some alsoknownasappcapabilities)ispossible,butit’sstrictlycontrolledviaspecialpermissionsknownasentitlements. 442\\nSomepermissionscanbeconfiguredbytheapp’sdevelopers(e.g.DataProtectionorKeychainSharing)andwilldirectly takeeffectaftertheinstallation. However,forothers,theuserwillbeexplicitlyaskedthefirsttimetheappattemptsto accessaprotectedresource,forexample: • Bluetoothperipherals • Calendardata • Camera • Contacts • Healthsharing • Healthupdating • HomeKit • Location • Microphone • Motion • Musicandthemedialibrary • Photos • Reminders • Siri • Speechrecognition • theTVprovider EventhoughAppleurgestoprotecttheprivacyoftheuserandtobeveryclearonhowtoaskpermissions,itcanstillbe thecasethatanapprequeststoomanyofthemfornon-obviousreasons. VerifyingtheuseofsomepermissionssuchasCamera,Photos,CalendarData,Motion,ContactsorSpeechRecognition should be pretty straightforward as it should be obvious if the app requires them to fulfill its tasks. Let’s consider the following examples regarding the Photos permission, which, if granted, gives the app access to all user photos in the “CameraRoll”(theiOSdefaultsystem-widelocationforstoringphotos): • ThetypicalQRCodescanningappobviouslyrequiresthecameratofunctionbutmightberequestingthephotos permission as well. If storage is explicitly required, and depending on the sensitivity of the pictures being taken, theseappsmightbetteropttousetheappsandboxstoragetoavoidotherapps(havingthephotospermission)to accessthem. Seethechapter“DataStorageoniOS”formoreinformationregardingstorageofsensitivedata. • Some apps require photo uploads (e.g. for profile pictures). Recent versions of iOS introduce new APIs such as UIImagePickerController (iOS 11+) and its modern replacement PHPickerViewController (iOS 14+). These APIs run on a separate process from your app and by using them, the app gets read-only access exclusively to theimagesselectedbytheuserinsteadoftothewhole“CameraRoll”. Thisisconsideredabestpracticetoavoid requestingunnecessarypermissions. VerifyingotherpermissionslikeBluetoothorLocationrequireadeepersourcecodeinspection. Theymayberequiredfor theapptoproperlyfunctionbutthedatabeinghandledbythosetasksmightnotbeproperlyprotected. Whencollectingorsimplyhandling(e.g.caching)sensitivedata,anappshouldprovidepropermechanismstogivethe usercontroloverit,e.g.tobeabletorevokeaccessortodeleteit. However,sensitivedatamightnotonlybestoredor cachedbutalsosentoverthenetwork. Inbothcases,ithastobeensuredthattheappproperlyfollowstheappropriate bestpractices,whichinthiscaseinvolveimplementingproperdataprotectionandtransportsecurity. Moreinformation onhowtoprotectthiskindofdatacanbefoundinthechapter“NetworkAPIs”. Asyoucansee,usingappcapabilitiesandpermissionsmostlyinvolvehandlingpersonaldata,thereforebeingamatter ofprotectingtheuser’sprivacy. Seethearticles“ProtectingtheUser’sPrivacy”and“AccessingProtectedResources”in AppleDeveloperDocumentationformoredetails. Device Capabilities DevicecapabilitiesareusedbytheAppStoretoensurethatonlycompatibledevicesarelistedandthereforeareallowed todownloadtheapp. TheyarespecifiedintheInfo.plistfileoftheappundertheUIRequiredDeviceCapabilities key. <key>UIRequiredDeviceCapabilities</key> <array> <string>arm64</string> </array> 443\\nTypicallyyou’llfindthearm64capability,meaningthattheappiscompiledforthearm64instructionset. For example, an app might be completely dependent on NFC to work (e.g. a “NFC Tag Reader” app). According to the archived iOS Device Compatibility Reference, NFC is only available starting on the iPhone 7 (and iOS 11). A developer mightwanttoexcludeallincompatibledevicesbysettingthenfcdevicecapability. Regarding testing, you can consider UIRequiredDeviceCapabilities as a mere indication that the app is using some specific resources. Unlike the entitlements related to app capabilities, device capabilities do not confer any right or accesstoprotectedresources. Additionalconfigurationstepsmightberequiredforthat,whichareveryspecifictoeach capability. Forexample,ifBLEisacorefeatureoftheapp,Apple’sCoreBluetoothProgrammingGuideexplainsthedifferentthings tobeconsidered: • Thebluetooth-ledevicecapabilitycanbesetinordertorestrictnon-BLEcapabledevicesfromdownloadingtheir app. • Appcapabilitieslikebluetooth-peripheralorbluetooth-central(bothUIBackgroundModes)shouldbeaddedif BLEbackgroundprocessingisrequired. However, this is not yet enough for the app to get access to the Bluetooth peripheral, the NSBluetoothPeripher-", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 149}}