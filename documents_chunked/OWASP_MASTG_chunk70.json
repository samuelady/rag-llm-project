{"text": "the onCreate method. It is importanttoremembertoaddthelibrarylibinject.sointherespectivearchitecturefolder(armeabi-v7a,arm64-v8a,x86) ofthelibfolderintheAPK.Finally,youneedtore-signtheapplicationbeforeusingit. A well-known use case of this technique is loading the Frida gadget to an application, especially while working on a non-rooteddevice(thisiswhatobjection patchapkbasicallydoes). Patching Application’s Native Library Many Androidapplications use native code in addition to Java code for various performance and security reasons. The nativecodeispresentintheformofELFsharedlibraries. AnELFexecutableincludesalistofsharedlibraries(dependen- cies)thatarelinkedtotheexecutableforittofunctionoptimally. Thislistcanbemodifiedtoinsertanadditionallibrary tobeinjectedintotheprocess. ModifyingtheELFfilestructuremanuallytoinjectalibrarycanbecumbersomeandpronetoerrors. However,thistask canbeperformedwithrelativeeaseusingLIEF(LibrarytoInstrumentExecutableFormats). Usingitrequiresonlyafew linesofPythoncodeasshownbelow: importlief libnative =lief.parse(\"libnative.so\") libnative.add_library(\"libinject.so\")#Injection! libnative.write(\"libnative.so\") Intheaboveexample,libinject.solibraryisinjectedasadependencyofanativelibrary(libnative.so),whichtheapplication alreadyloadsbydefault. FridagadgetcanbeinjectedintoanapplicationusingthisapproachasexplainedindetailinLIEF’s documentation. Asintheprevioussection,itisimportanttorememberaddingthelibrarytotherespectivearchitecture libfolderintheAPKandfinallyre-signingtheapplication. 141\\nPreloading Symbols Abovewelookedintotechniqueswhichrequiresomekindofmodificationoftheapplication’scode. Alibrarycanalsobe injectedintoaprocessusingfunctionalitiesofferedbytheloaderoftheoperatingsystem. OnAndroid,whichisaLinux basedOS,youcanloadanadditionallibrarybysettingtheLD_PRELOADenvironmentvariable. Astheld.somanpagestates,symbolsloadedfromthelibrarypassedusingLD_PRELOADalwaysgetprecedence,i.e.they are searched first by the loader while resolving the symbols, effectively overriding the original ones. This feature is oftenusedtoinspecttheinputparametersofsomecommonlyusedlibcfunctionssuchasfopen,read,write,strcmp, etc., specially in obfuscated programs, where understanding their behavior may be challenging. Therefore, having an insightonwhichfiles arebeingopenedor whichstringsarebeing comparedmaybevery valuable. Thekeyidea here is“functionwrapping”,meaningthatyoucannotpatchsystemcallssuchaslibc’sfopen,butyoucanoverride(wrap)it includingcustomcodethatwill,forinstance,printtheinputparametersforyouandstillcalltheoriginalfopenremaining transparenttothecaller. OnAndroid,settingLD_PRELOADisslightlydifferentcomparedtootherLinuxdistributions. Ifyourecallfromthe“Platform Overview” section, every application in Android is forked from Zygote, which is started very early during the Android boot-up. Thus, setting LD_PRELOAD on Zygote is not possible. As a workaround for this problem, Android supports the setprop(setproperty)functionality. Belowyoucanseeanexampleforanapplicationwithpackagenamecom.foo.bar (notetheadditionalwrap. prefix): setpropwrap.com.foo.barLD_PRELOAD=/data/local/tmp/libpreload.so PleasenotethatifthelibrarytobepreloadeddoesnothaveSELinuxcontextassigned,fromAndroid5.0(APIlevel 21)onwards,youneedtodisableSELinuxtomakeLD_PRELOADwork,whichmayrequireroot. Debugging Platform: android Sofar,you’vebeenusingstaticanalysistechniqueswithoutrunningthetargetapps. Intherealworld,especiallywhen reversingmalwareormorecomplexapps,purestaticanalysisisverydifficult. Observingandmanipulatinganappduring runtimemakesitmuch,mucheasiertodecipheritsbehavior. Next,we’llhavealookatdynamicanalysismethodsthat helpyoudojustthat. Androidappssupporttwodifferenttypesofdebugging: DebuggingontheleveloftheJavaruntimewiththeJavaDebug Wire Protocol (JDWP), and Linux/Unix-style ptrace-based debugging on the native layer, both of which are valuable to reverseengineers. Debugging Release Apps DalvikandARTsupporttheJDWP,aprotocolforcommunicationbetweenthedebuggerandtheJavavirtualmachine(VM) thatitdebugs. JDWPisastandarddebuggingprotocolthat’ssupportedbyallcommandlinetoolsandJavaIDEs,including jdb,IntelliJ,andEclipse. Android’simplementationofJDWPalsoincludeshooksforsupportingextrafeaturesimplemented bytheDalvikDebugMonitorServer(DDMS). AJDWPdebuggerallowsyoutostepthroughJavacode,setbreakpointsonJavamethods,andinspectandmodifylocal andinstancevariables. You’lluseaJDWPdebuggermostofthetimeyoudebug“normal”Androidapps(i.e., appsthat don’tmakemanycallstonativelibraries). Inthefollowingsection,we’llshowhowtosolvetheUnCrackableAppforAndroidLevel1withjdbalone. Notethatthisis notanefficientwaytosolvethiscrackme. ActuallyyoucandoitmuchfasterwithFridaandothermethods,whichwe’ll introducelaterintheguide. This,however,servesasanintroductiontothecapabilitiesoftheJavadebugger. Debugging with jdb The adb command line tool was introduced in the “Android Basic Security Testing” chapter. You can use its adb jdwp commandtolisttheprocessIDsofalldebuggableprocessesrunningontheconnecteddevice(i.e.,processeshostinga 142\\nJDWPtransport). Withtheadb forwardcommand,youcanopenalisteningsocketonyourhostcomputerandforward thissocket’sincomingTCPconnectionstotheJDWPtransportofachosenprocess. $adbjdwp 12167 $adbforwardtcp:7777jdwp:12167 You’renowreadytoattachjdb. Attachingthedebugger,however,causestheapptoresume,whichyoudon’twant. You wanttokeepitsuspendedsothatyoucanexplorefirst. Topreventtheprocessfromresuming,pipethesuspendcommand intojdb: ${echo \"suspend\";cat;}|jdb-attach localhost:7777 Initializingjdb... >Allthreadssuspended. > You’re now attached to the suspended process and ready to go ahead with the jdb commands. Entering ? prints the completelistofcommands. Unfortunately,theAndroidVMdoesn’tsupportallavailableJDWPfeatures. Forexample,the redefine command, which would let you redefine a class code is not supported. Another important restriction is that linebreakpointswon’tworkbecausethereleasebytecodedoesn’tcontainlineinformation. Methodbreakpointsdowork, however. Usefulworkingcommandsinclude: • classes: listallloadedclasses • class/methods/fieldsclassid: Printdetailsaboutaclassandlistitsmethodsandfields • locals: printlocalvariablesincurrentstackframe • print/dumpexpr: printinformationaboutanobject • stopinmethod: setamethodbreakpoint • clearmethod: removeamethodbreakpoint • setlvalue=expr: assignnewvaluetofield/variable/arrayelement Let’s revisit the decompiled code from the UnCrackable App for Android Level 1 and think about possible solutions. A goodapproachwouldbesuspendingtheappinastatewherethesecretstringisheldinavariableinplaintextsoyou canretrieveit. Unfortunately,youwon’tgetthatfarunlessyoudealwiththeroot/tamperingdetectionfirst. Reviewthecodeandyou’llseethatthemethodsg.vantagepoint.uncrackable1.MainActivity.adisplaysthe“Thisin unacceptable...”messagebox. ThismethodcreatesanAlertDialogandsetsalistenerclassfortheonClickevent. This class (named b) has a callback method will terminatesthe app once the user taps theOK button. Toprevent the user fromsimplycancelingthedialog,thesetCancelablemethodiscalled. private void a(final Stringtitle){ final AlertDialogcreate =newAlertDialog$Builder((Context)this).create(); create.setTitle((CharSequence)title); create.setMessage((CharSequence)\"Thisinunacceptable.Theappisnowgoingtoexit.\"); create.setButton(-3,(CharSequence)\"OK\",(DialogInterface$OnClickListener)newb(this)); create.setCancelable(false); create.show(); } Youcanbypassthiswithalittleruntimetampering. Withtheappstillsuspended,setamethodbreakpointonandroid. app.Dialog.setCancelableandresumetheapp. >stop inandroid.app.Dialog.setCancelable Setbreakpointandroid.app.Dialog.setCancelable >resume Allthreadsresumed. > Breakpointhit: \"thread=main\",android.app.Dialog.setCancelable(),line=1,110bci=0 main[1] TheappisnowsuspendedatthefirstinstructionofthesetCancelablemethod. Youcanprinttheargumentspassedto setCancelablewiththelocalscommand(theargumentsareshownincorrectlyunder“localvariables”). main[1]locals Methodarguments: Localvariables: flag=true 143\\nsetCancelable(true)wascalled,sothiscan’tbethecallwe’relookingfor. Resumetheprocesswiththeresumecom- mand. main[1]resume Breakpointhit: \"thread=main\",android.app.Dialog.setCancelable(),line=1,110bci=0 main[1]locals flag=false You’venowreachedacalltosetCancelablewiththeargumentfalse. Setthevariabletotruewiththesetcommand andresume. main[1]setflag=true flag=true=true main[1]resume Repeatthisprocess,settingflagtotrueeachtimethebreakpointisreached,untilthealertboxisfinallydisplayed(the breakpointwillbereachedfiveorsixtimes). Thealertboxshouldnowbecancelable! Tapthescreennexttotheboxand itwillclosewithoutterminatingtheapp. Nowthattheanti-tamperingisoutoftheway,you’rereadytoextractthesecretstring! Inthe“staticanalysis”section,you sawthatthestringisdecryptedwithAES,thencomparedwiththestringinputtothemessagebox. Themethodequals ofthejava.lang.Stringclasscomparesthestringinputwiththesecretstring. Setamethodbreakpointonjava.lang. String.equals,enteranarbitrarytextstringintheeditfield,andtapthe“verify”button. Oncethebreakpointisreached, youcanreadthemethodargumentwiththelocalscommand. >stop injava.lang.String.equals Setbreakpointjava.lang.String.equals > Breakpointhit: \"thread=main\",java.lang.String.equals(),line=639bci=2 main[1]locals Methodarguments: Localvariables: other= \"radiusGravity\" main[1]cont Breakpointhit: \"thread=main\",java.lang.String.equals(),line=639bci=2 main[1]locals Methodarguments: Localvariables: other= \"Iwanttobelieve\" main[1]cont Thisistheplaintextstringyou’relookingfor! Debugging with an IDE SettingupaprojectinanIDEwiththedecompiledsourcesisaneattrickthatallowsyoutosetmethodbreakpointsdirectly inthesourcecode. Inmostcases,youshouldbeabletosingle-stepthroughtheappandinspectthestateofvariables withtheGUI.Theexperiencewon’tbeperfect,it’snottheoriginalsourcecodeafterall,soyouwon’tbeabletosetline breakpointsandthingswillsometimessimplynotworkcorrectly. Thenagain,reversingcodeisnevereasy,andefficiently navigatinganddebuggingplainoldJavacodeisaprettyconvenientwayofdoingit. Asimilarmethodhasbeendescribed intheNetSPIblog. TosetupIDEdebugging,firstcreateyourAndroidprojectinIntelliJandcopythedecompiledJavasourcesintothesource folderasdescribedaboveinthe“ReviewingDecompiledJavaCode”section. Onthedevice, choosetheappasdebug apponthe“Developeroptions”(UnCrackableAppforAndroidLevel1inthistutorial),andmakesureyou’veswitchedon the“WaitForDebugger”feature. Onceyoutaptheappiconfromthelauncher,itwillbesuspendedin“WaitForDebugger”mode. 144\\nNowyoucansetbreakpointsandattachtotheappprocesswiththe“AttachDebugger”toolbarbutton. Notethatonlymethodbreakpointsworkwhendebugginganappfromdecompiledsources. Onceamethodbreakpoint isreached,you’llgetthechancetosinglestepduringthemethodexecution. 145\\nAfteryouchoosetheappfromthelist,thedebuggerwillattachtotheappprocessandyou’llreachthebreakpointthatwas setontheonCreatemethod. Thisapptriggersanti-debuggingandanti-tamperingcontrolswithintheonCreatemethod. That’swhysettingabreakpointontheonCreatemethodjustbeforetheanti-tamperingandanti-debuggingchecksare performedisagoodidea. Next, single-step through the onCreate method by clicking “Force Step Into” in Debugger view. The “Force Step", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 70}}