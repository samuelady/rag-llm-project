{"text": "LookoutforusagesoftheabovementionedWebViewclassesbysearchinginXcode. Inthecompiledbinaryyoucansearchinitssymbolsorstringslikethis: #####UIWebView ```bash $rabin2 -zz./WheresMyBrowser |egrep \"UIWebView$\" 4890x0002fee90x10002fee9 9 10 (5.__TEXT.__cstring)asciiUIWebView 8960x0003c8130x0003c813 24 25 ()ascii@_OBJC_CLASS_$_UIWebView 17540x000595990x00059599 23 24 ()ascii_OBJC_CLASS_$_UIWebView WKWebView $rabin2 -zz./WheresMyBrowser |egrep \"WKWebView$\" 4900x0002fef30x10002fef3 9 10 (5.__TEXT.__cstring)asciiWKWebView 6250x000316700x100031670 17 18 (5.__TEXT.__cstring)asciiunwindToWKWebView 9040x0003c9600x0003c960 24 25 ()ascii@_OBJC_CLASS_$_WKWebView 17570x000595e40x000595e4 23 24 ()ascii_OBJC_CLASS_$_WKWebView AlternativelyyoucanalsosearchforknownmethodsoftheseWebViewclasses. Forexample,searchforthemethodused toinitializeaWKWebView(init(frame:configuration:)): $rabin2 -zzq ./WheresMyBrowser |egrep \"WKWebView.*frame\" 0x5c3ac7776__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC 0x5d97a7978__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO 0x6b5d57776__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC 0x6c3fa7978__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO Youcanalsodemangleit: $xcrunswift-demangle__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO --->@nonobjc__C.WKWebView.init(frame:__C_Synthesized.CGRect, configuration:__C.WKWebViewConfiguration)-> __C.WKWebView Testing Custom URL Schemes Platform: ios MASVSV1: MSTG-PLATFORM-3 MASVSV2: MASVS-PLATFORM-1 455\\nOverview Static Analysis Thereareacoupleofthingsthatwecandousingstaticanalysis. Inthenextsectionswewillseethefollowing: • TestingcustomURLschemesregistration • Testingapplicationqueryschemesregistration • TestingURLhandlingandvalidation • TestingURLrequeststootherapps • Testingfordeprecatedmethods Testing Custom URL Schemes Registration ThefirststeptotestcustomURLschemesisfindingoutwhetheranapplicationregistersanyprotocolhandlers. Ifyouhavetheoriginalsourcecodeandwanttoviewregisteredprotocolhandlers,simplyopentheprojectinXcode,go totheInfotabandopentheURLTypessectionaspresentedinthescreenshotbelow: AlsoinXcodeyoucanfindthisbysearchingfortheCFBundleURLTypeskeyintheapp’sInfo.plistfile(examplefrom iGoat-Swift): <key>CFBundleURLTypes</key> <array> <dict> <key>CFBundleURLName</key> <string>com.iGoat.myCompany</string> <key>CFBundleURLSchemes</key> <array> <string>iGoat</string> </array> </dict> </array> Inacompiledapplication(orIPA),registeredprotocolhandlersarefoundinthefileInfo.plistintheappbundle’sroot folder. OpenitandsearchfortheCFBundleURLSchemeskey,ifpresent,itshouldcontainanarrayofstrings(examplefrom iGoat-Swift): grep-A5-nriurlschInfo.plist Info.plist:45: <key>CFBundleURLSchemes</key> Info.plist-46- <array> Info.plist-47- <string>iGoat</string> Info.plist-48- </array> OncetheURLschemeisregistered,otherappscanopentheappthatregisteredthescheme,andpassparametersbycre- atingappropriatelyformattedURLsandopeningthemwiththeUIApplication openURL:options:completionHandler: method. NotefromtheAppProgrammingGuideforiOS: Ifmorethanonethird-partyappregisterstohandlethesameURLscheme,thereiscurrentlynoprocessfordeter- miningwhichappwillbegiventhatscheme. ThiscouldleadtoaURLschemehijackingattack(seepage136in[#thiel2]). 456\\nTesting Application Query Schemes Registration BeforecallingtheopenURL:options:completionHandler: method,appscancallcanOpenURL:toverifythatthetarget appisavailable. However,asthismethodwasbeingusedbymaliciousappasawaytoenumerateinstalledapps,from iOS 9.0 the URL schemes passed to it must be also declared by adding the LSApplicationQueriesSchemes key to the app’sInfo.plistfileandanarrayofupto50URLschemes. <key>LSApplicationQueriesSchemes</key> <array> <string>url_scheme1</string> <string>url_scheme2</string> </array> canOpenURLwillalwaysreturnNOforundeclaredschemes,whetherornotanappropriateappisinstalled. However,this restrictiononlyappliestocanOpenURL. TheopenURL:options:completionHandler: methodwillstillopenanyURLscheme,eveniftheLSApplication- QueriesSchemesarraywasdeclared,andreturnYES/NOdependingontheresult. Asanexample,TelegramdeclaresinitsInfo.plisttheseQueriesSchemes,amongothers: <key>LSApplicationQueriesSchemes</key> <array> <string>dbapi-3</string> <string>instagram</string> <string>googledrive</string> <string>comgooglemaps-x-callback</string> <string>foursquare</string> <string>here-location</string> <string>yandexmaps</string> <string>yandexnavi</string> <string>comgooglemaps</string> <string>youtube</string> <string>twitter</string> ... Testing URL Handling and Validation InordertodeterminehowaURLpathisbuiltandvalidated,ifyouhavetheoriginalsourcecode,youcansearchforthe followingmethods: • application:didFinishLaunchingWithOptions:methodorapplication:will-FinishLaunchingWithOptions:: verifyhowthedecisionismadeandhowtheinformationabouttheURLisretrieved. • application:openURL:options:: verifyhowtheresourceisbeingopened,i.e.howthedataisbeingparsed,verify theoptions,especiallyifaccessbythecallingapp(sourceApplication)shouldbeallowedordenied. Theappmight alsoneeduserpermissionwhenusingthecustomURLscheme. InTelegramyouwillfindfourdifferentmethodsbeingused: funcapplication(_application:UIApplication,openurl:URL,sourceApplication:String?)->Bool{ self.openUrl(url:url) returntrue } funcapplication(_application:UIApplication,openurl:URL,sourceApplication:String?, annotation:Any)->Bool{ self.openUrl(url:url) returntrue } funcapplication(_app:UIApplication,openurl:URL, options:[UIApplicationOpenURLOptionsKey:Any]=[:])->Bool{ self.openUrl(url:url) returntrue } funcapplication(_application:UIApplication,handleOpenurl:URL)->Bool{ self.openUrl(url:url) returntrue } Wecanobservesomethingshere: • Theappimplementsalsodeprecatedmethodslikeapplication:handleOpenURL:andapplication:openURL:sourceApplication:annotation:. • Thesourceapplicationisnotbeingverifiedinanyofthosemethods. • AllofthemcallaprivateopenUrlmethod. YoucaninspectittolearnmoreabouthowtheURLrequestishandled. 457\\nTesting URL Requests to Other Apps The method openURL:options:completionHandler: and the deprecated openURL: method of UIApplication are re- sponsibleforopeningURLs(i.e.tosendrequests/makequeriestootherapps)thatmaybelocaltothecurrentappor itmaybeonethatmustbeprovidedbyadifferentapp. Ifyouhavetheoriginalsourcecodeyoucansearchdirectlyfor usagesofthosemethods. Additionally,ifyouareinterestedintoknowingiftheappisqueryingspecificservicesorapps,andiftheappiswell-known, youcanalsosearchforcommonURLschemesonlineandincludetheminyourgreps. Forexample,aquickGooglesearch reveals: AppleMusic-music://ormusics://oraudio-player-event:// Calendar-calshow://orx-apple-calevent:// Contacts-contacts:// Diagnostics-diagnostics://ordiags:// GarageBand-garageband:// iBooks-ibooks://oritms-books://oritms-bookss:// Mail-message://ormailto://emailaddress Messages-sms://phonenumber Notes-mobilenotes:// ... WesearchforthismethodintheTelegramsourcecode,thistimewithoutusingXcode,justwithegrep: $egrep -nr\"open.*options.*completionHandler\" ./Telegram-iOS/ ./AppDelegate.swift:552:returnUIApplication.shared.open(parsedUrl, options:[UIApplicationOpenURLOptionUniversalLinksOnly:trueasNSNumber], completionHandler:{valuein ./AppDelegate.swift:556:returnUIApplication.shared.open(parsedUrl, options:[UIApplicationOpenURLOptionUniversalLinksOnly:trueasNSNumber], completionHandler:{valuein If we inspect the results we will see that openURL:options:completionHandler: is actually being used for universal links,sowehavetokeepsearching. Forexample,wecansearchforopenURL(: $egrep -nr\"openURL\\(\" ./Telegram-iOS/ ./ApplicationContext.swift:763: UIApplication.shared.openURL(parsedUrl) ./ApplicationContext.swift:792: UIApplication.shared.openURL(URL( string: \"https://telegram.org/deactivate?phone=\\(phone)\")! ) ./AppDelegate.swift:423: UIApplication.shared.openURL(url) ./AppDelegate.swift:538: UIApplication.shared.openURL(parsedUrl) ... If we inspect those lines we will see how this method is also being used to open “Settings” or to open the “App Store Page”. Whenjustsearchingfor://wesee: ifdocumentUri.hasPrefix(\"file://\"),letpath=URL(string:documentUri)?.path{ if!url.hasPrefix(\"mt-encrypted-file://?\"){ guardletdict=TGStringUtils.argumentDictionary(inUrlString:String(url[url.index(url.startIndex, offsetBy:\"mt-encrypted-file://?\".count)...]))else{ parsedUrl=URL(string:\"https://\\(url)\") ifleturl=URL(string:\"itms-apps://itunes.apple.com/app/id\\(appStoreId)\"){ }elseifleturl=urlas?String,url.lowercased().hasPrefix(\"tg://\"){ [[WKExtensionsharedExtension]openSystemURL:[NSURLURLWithString:[NSString stringWithFormat:@\"tel://%@\",userHandle.data]]]; Aftercombiningtheresultsofbothsearchesandcarefullyinspectingthesourcecodewefindthefollowingpieceofcode: openUrl:{urlin varparsedUrl=URL(string:url) ifletparsed=parsedUrl{ ifparsed.scheme==nil||parsed.scheme!.isEmpty{ parsedUrl=URL(string:\"https://\\(url)\") } ifparsed.scheme==\"tg\"{ return } } ifletparsedUrl=parsedUrl{ UIApplication.shared.openURL(parsedUrl) 458\\nBeforeopeningaURL,theschemeisvalidated,“https”willbeaddedifnecessaryanditwon’topenanyURLwiththe“tg” scheme. WhenreadyitwillusethedeprecatedopenURLmethod. Ifonlyhavingthecompiledapplication(IPA)youcanstilltrytoidentifywhichURLschemesarebeingusedtoqueryother apps: • CheckifLSApplicationQueriesSchemeswasdeclaredorsearchforcommonURLschemes. • Alsousethestring://orbuildaregularexpressiontomatchURLsastheappmightnotbedeclaringsomeschemes. Youcandothatbyfirstverifyingthattheappbinarycontainsthosestringsbye.g.usingunixstringscommand: strings <yourapp>|grep \"someURLscheme://\" orevenbetter,useradare2’siz/izzcommandorrafind2,bothwillfindstringswheretheunixstringscommandwon’t. ExamplefromiGoat-Swift: $r2 -qcizz~iGoat://iGoat-Swift 374360x001ee6100x001ee610 23 24 (4.__TEXT.__cstring)asciiiGoat://?contactNumber= Testing for Deprecated Methods Searchfordeprecatedmethodslike: • application:handleOpenURL: • openURL: • application:openURL:sourceApplication:annotation: Forexample,herewefindthosethree: $rabin2 -zzq Telegram\\X.app/Telegram\\X |grep -i\"openurl\" 0x1000d9e903130UIApplicationOpenURLOptionsKey 0x1000dee3f5049application:openURL:sourceApplication:annotation: 0x1000dee712928application:openURL:options: 0x1000dee8e2726application:handleOpenURL: 0x1000df2c998openURL: 0x1000df7661211canOpenURL: 0x1000df7723534openURL:options:completionHandler: ... Dynamic Analysis Onceyou’veidentifiedthecustomURLschemestheapphasregistered,thereareseveralmethodsthatyoucanuseto testthem: • PerformingURLrequests • IdentifyingandhookingtheURLhandlermethod • TestingURLschemessourcevalidation • FuzzingURLschemes Performing URL Requests Using Safari ToquicklytestoneURLschemeyoucanopentheURLsonSafariandobservehowtheappbehaves. Forexample,ifyou write tel://123456789 in the address bar of Safari, a pop up will appear with the telephone number and the options “Cancel”and“Call”. Ifyoupress“Call”itwillopenthePhoneappanddirectlymakethecall. YoumayalsoknowalreadyaboutpagesthattriggercustomURLschemes,youcanjustnavigatenormallytothosepages andSafariwillautomaticallyaskwhenitfindsacustomURLscheme. 459\\nUsing the Notes App As already seen in “Triggering Universal Links”, you may use the Notes app and long press the links you’ve written in ordertotestcustomURLschemes. Remembertoexittheeditingmodeinordertobeabletoopenthem. Notethatyou canclickorlongpresslinksincludingcustomURLschemesonlyiftheappisinstalled,ifnottheywon’tbehighlightedas clickablelinks. Using Frida IfyousimplywanttoopentheURLschemeyoucandoitusingFrida: $frida -UiGoat-Swift [iPhone::iGoat-Swift]->function openURL(url){ varUIApplication =ObjC.classes.UIApplication.sharedApplication(); vartoOpen =ObjC.classes.NSURL.URLWithString_(url); return UIApplication.openURL_(toOpen); } [iPhone::iGoat-Swift]->openURL(\"tel://234234234\") true InthisexamplefromFridaCodeSharetheauthorusesthenon-publicAPILSApplicationWorkspace.openSensitiveURL:withOptions: toopentheURLs(fromtheSpringBoardapp): function openURL(url){ varw=ObjC.classes.LSApplicationWorkspace.defaultWorkspace(); vartoOpen =ObjC.classes.NSURL.URLWithString_(url); return w.openSensitiveURL_withOptions_(toOpen,null); } Notethattheuseofnon-publicAPIsisnotpermittedontheAppStore,that’swhywedon’teventestthesebutwe areallowedtousethemforourdynamicanalysis. Identifying and Hooking", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 153}}