{"text": "folder(Payload/<appname>.app/)underthe name embedded. mobileprovision. Thisfileisnot a.plist, it isencodedusingCryptographicMessageSyntax. On macOSyoucaninspectanembedded provisioningprofile’sentitlementsusingthefollowingcommand: securitycms -D-iembedded.mobileprovision andthensearchfortheEntitlementskeyregion(<key>Entitlements</key>). Review Entitlements Embedded in the Compiled App Binary If you only have the app’s IPA or simply the installed app on a jailbroken device, you normally won’t be able to find .entitlements files. This could be also the case for the embedded.mobileprovision file. Still, you should be able to extracttheentitlementspropertylistsfromtheappbinaryyourself(whichyou’vepreviouslyobtainedasexplainedinthe “iOSBasicSecurityTesting”chapter,section“AcquiringtheAppBinary”). Thefollowingstepsshouldworkevenwhentargetinganencryptedbinary. Ifforsomereasontheydon’t,you’llhaveto decryptandextracttheappwithe.g.Clutch(ifcompatiblewithyouriOSversion),frida-ios-dumporsimilar. Extracting the Entitlements Plist from the App Binary Ifyouhavetheappbinaryonyourcomputer,oneapproachistousebinwalktoextract(-e)allXMLfiles(-y=xml): 470\\n$binwalk -e-y=xml./Telegram\\X DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 1430180 0x15D2A4 XMLdocument,version: \"1.0\" 1458814 0x16427E XMLdocument,version: \"1.0\" Oryoucanuseradare2(-qctoquietlyrunonecommandandexit)tosearchallstringsontheappbinary(izz)containing “PropertyList”(~PropertyList): $r2 -qc'izz~PropertyList' ./Telegram\\X 0x0015d2a4ascii <?xmlversion=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<!DOCTYPEplistPUBLIC \"-//Apple//DTDPLIST1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plistversion=\"1.0\"> ...<key>com.apple.security.application-groups</key>\\n\\t\\t<array> \\n\\t\\t\\t<string>group.ph.telegra.Telegraph</string>... 0x0016427dasciiH<?xmlversion=\"1.0\" encoding=\"UTF-8\"?>\\n<!DOCTYPEplistPUBLIC \"-//Apple//DTDPLIST1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plistversion=\"1.0\">\\n <dict>\\n\\t<key>cdhashes</key>... In both cases (binwalk or radare2) we were able to extract the same two plist files. If we inspect the first one (0x0015d2a4)weseethatwewereabletocompletelyrecovertheoriginalentitlementsfilefromTelegram. Note: thestringscommandwillnothelphereasitwillnotbeabletofindthisinformation. Betterusegrepwith the-aflagdirectlyonthebinaryoruseradare2(izz)/rabin2(-zz). Ifyouaccesstheappbinaryonthejailbrokendevice(e.gviaSSH),youcanusegrepwiththe-a, --textflag(treatsall filesasASCIItext): $grep -a-A5'PropertyList' /var/containers/Bundle/Application/ 15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/TelegramX.app/Telegram\\X <!DOCTYPEplistPUBLIC \"-//Apple//DTDPLIST1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>com.apple.security.application-groups</key> <array> ... Play with the -A num, --after-context=num flag to display more or less lines. You may use tools like the ones we presentedaboveaswell,ifyouhavethemalsoinstalledonyourjailbrokeniOSdevice. Thismethodshouldworkeveniftheappbinaryisstillencrypted(itwastestedagainstseveralAppStoreapps). Source Code Inspection After having checked the <appname>.entitlements file and the Info.plist file, it is time to verify how the requested permissionsandassignedcapabilitiesareputtouse. Forthis,asourcecodereviewshouldbeenough. However,ifyou don’thavetheoriginalsourcecode,verifyingtheuseofpermissionsmightbespeciallychallengingasyoumightneedto reverseengineertheapp,refertothe“DynamicAnalysis”formoredetailsonhowtoproceed. Whendoingasourcecodereview,payattentionto: • whetherthepurposestringsintheInfo.plistfilematchtheprogrammaticimplementations. • whethertheregisteredcapabilitiesareusedinsuchawaythatnoconfidentialinformationisleaking. Userscangrantorrevokeauthorizationatanytimevia“Settings”,thereforeappsnormallychecktheauthorizationstatus ofafeaturebeforeaccessingit. ThiscanbedonebyusingdedicatedAPIsavailableformanysystemframeworksthat provideaccesstoprotectedresources. YoucanusetheAppleDeveloperDocumentationasastartingpoint. Forexample: • Bluetooth: the state property of the CBCentralManager class is used to check system-authorization status for usingBluetoothperipherals. • Location: searchformethodsofCLLocationManager,e.g.locationServicesEnabled. 471\\nfunccheckForLocationServices() { ifCLLocationManager.locationServicesEnabled() { //Location servicesareavailable,soquerytheuser’slocation. }else { //Update yourapp’sUItoshowthatthelocationisunavailable. } } SeeTable1in“DeterminingtheAvailabilityofLocationServices”(AppleDeveloperDocumentation)foracomplete list. GothroughtheapplicationsearchingforusagesoftheseAPIsandcheckwhathappenstosensitivedatathatmightbe obtained from them. For example, it might be stored or transmitted over the network, if this is the case, proper data protectionandtransportsecurityshouldbeadditionallyverified. Dynamic Analysis With help of the static analysis you should already have a list of the included permissions and app capabilities in use. However, as mentioned in “Source Code Inspection”, spotting the sensitive data and APIs related to those permissions and app capabilities might be a challenging task when you don’t have the original source code. Dynamic analysis can helpheregettinginputstoiterateontothestaticanalysis. FollowinganapproachliketheonepresentedbelowshouldhelpyouspottingthementionedsensitivedataandAPIs: 1. Consider the list of permissions / capabilities identified in the static analysis (e.g. NSLocationWhenI- nUseUsageDescription). 2. MapthemtothededicatedAPIsavailableforthecorrespondingsystemframeworks(e.g.CoreLocation). Youmay usetheAppleDeveloperDocumentationforthis. 3. TraceclassesorspecificmethodsofthoseAPIs(e.g.CLLocationManager),forexample,usingfrida-trace. 4. Identify which methods are being really used by the app while accessing the related feature (e.g. “Share your location”). 5. Getabacktraceforthosemethodsandtrytobuildacallgraph. Onceallmethodswereidentified,youmightusethisknowledgetoreverseengineertheappandtrytofindouthowthe dataisbeinghandled. Whiledoingthatyoumightspotnewmethodsinvolvedintheprocesswhichyoucanagainfeed tostep3. aboveandkeepiteratingbetweenstaticanddynamicanalysis. InthefollowingexampleweuseTelegramtoopenthesharedialogfromachatandfrida-tracetoidentifywhichmethods arebeingcalled. First we launch Telegram and start a trace for all methods matching the string “authorizationStatus” (this is a general approachbecausemoreclassesapartfromCLLocationManagerimplementthismethod): frida-trace -U\"Telegram\" -m\"*[**authorizationStatus*]\" -U connects to the USB device. -m includes an Objective-C method to the traces. You can use a glob pattern (e.g. with the “*” wildcard, -m \"*[* *authorizationStatus*]\" means “include any Objective-C method of any classcontaining‘authorizationStatus’”). Typefrida-trace -hformoreinformation. Nowweopenthesharedialog: 472\\nThefollowingmethodsaredisplayed: 1942ms +[PHPhotoLibraryauthorizationStatus] 1959ms +[TGMediaAssetsLibraryauthorizationStatusSignal] 1959ms |+[TGMediaAssetsModernLibraryauthorizationStatusSignal] IfweclickonLocation,anothermethodwillbetraced: 11186ms +[CLLocationManagerauthorizationStatus] 11186ms |+[CLLocationManager_authorizationStatus] 11186ms | |+[CLLocationManager_authorizationStatusForBundleIdentifier:0x0bundle:0x0] Use the auto-generated stubs of frida-trace to get more information like the return values and a backtrace. Do the followingmodificationstotheJavaScriptfilebelow(thepathisrelativetothecurrentdirectory): 473\\n//__handlers__/__CLLocationManager_authorizationStatus_.js onEnter:function (log,args,state){ log(\"+[CLLocationManagerauthorizationStatus]\"); log(\"Calledfrom:\\n\"+ Thread.backtrace(this.context,Backtracer.ACCURATE) .map(DebugSymbol.fromAddress).join(\"\\n\\t\")+\"\\n\"); }, onLeave:function (log,retval,state){ console.log('RET:' +retval.toString()); } Clickingagainon“Location”revealsmoreinformation: 3630ms -[CLLocationManager init] 3630ms |-[CLLocationManagerinitWithEffectiveBundleIdentifier:0x0bundle:0x0] 3634ms -[CLLocationManager setDelegate:0x14c9ab000]", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 156}}