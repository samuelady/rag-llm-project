{"text": "letscenario2Html=tryString(contentsOf:scenario2HtmlPath!,encoding:.utf8) wkWebView.loadHTMLString(scenario2Html,baseURL:nil) }catch{} Ifonlyhavingthecompiledbinary,youcanalsosearchforthesemethods,e.g.: $rabin2 -zz./WheresMyBrowser |grep -i\"loadHTMLString\" 2310x0002df6c24 (4.__TEXT.__objc_methname)asciiloadHTMLString:baseURL: Inacaselikethis,itisrecommendedtoperformdynamicanalysistoensurethatthisisinfactbeingusedandfromwhich kindofWebView. ThebaseURLparameterheredoesn’tpresentanissueasitwillbesetto“null”butcouldbeanissueif notsetproperlywhenusingaUIWebView. See“CheckingHowWebViewsareLoaded”foranexampleaboutthis. In addition, you should also verify if the app is using the method loadFileURL: allowingReadAccessToURL:. Its first parameterisURLandcontainstheURLtobeloadedintheWebView, itssecondparameterallowingReadAccessToURL maycontainasinglefileoradirectory. Ifcontainingasinglefile,thatfilewillbeavailabletotheWebView. However,if itcontainsadirectory,allfilesonthatdirectorywillbemadeavailabletotheWebView. Therefore,itisworthinspecting thisandincaseitisadirectory,verifyingthatnosensitivedatacanbefoundinsideit. ExampleinSwiftfrom“Where’sMyBrowser?”: varscenario1Url=FileManager.default.urls(for:.libraryDirectory,in:.userDomainMask)[0] scenario1Url=scenario1Url.appendingPathComponent(\"WKWebView/scenario1.html\") wkWebView.loadFileURL(scenario1Url,allowingReadAccessTo:scenario1Url) Inthiscase,theparameterallowingReadAccessToURLcontainsasinglefile“WKWebView/scenario1.html”,meaningthat theWebViewhasexclusivelyaccesstothatfile. Inthecompiledbinary: $rabin2 -zz./WheresMyBrowser |grep -i\"loadFileURL\" 2370x0002dff137 (4.__TEXT.__objc_methname)asciiloadFileURL:allowingReadAccessToURL: Testing WebView File Access IfyouhavefoundaUIWebViewbeingused,thenthefollowingapplies: • Thefile://schemeisalwaysenabled. • Fileaccessfromfile://URLsisalwaysenabled. • Universalaccessfromfile://URLsisalwaysenabled. RegardingWKWebViews: 451\\n• Thefile://schemeisalsoalwaysenabledanditcannotbedisabled. • Itdisablesfileaccessfromfile://URLsbydefaultbutitcanbeenabled. ThefollowingWebViewpropertiescanbeusedtoconfigurefileaccess: • allowFileAccessFromFileURLs(WKPreferences, falsebydefault): itenablesJavaScriptrunninginthecontext ofafile://schemeURLtoaccesscontentfromotherfile://schemeURLs. • allowUniversalAccessFromFileURLs(WKWebViewConfiguration,falsebydefault): itenablesJavaScriptrunning inthecontextofafile://schemeURLtoaccesscontentfromanyorigin. Forexample,itispossibletosettheundocumentedpropertyallowFileAccessFromFileURLsbydoingthis: Objective-C: [webView.configuration.preferencessetValue:@YESforKey:@\"allowFileAccessFromFileURLs\"]; Swift: webView.configuration.preferences.setValue(true,forKey:\"allowFileAccessFromFileURLs\") Ifoneormoreoftheabovepropertiesareactivated,youshoulddeterminewhethertheyarereallynecessaryfortheapp toworkproperly. Checking Telephone Number Detection In Safari on iOS, telephone number detection is on by default. However, you might want to turn it off if your HTML pagecontainsnumbersthatcanbeinterpretedasphonenumbers,butarenotphonenumbers,ortopreventtheDOM documentfrombeingmodifiedwhenparsedbythebrowser. ToturnofftelephonenumberdetectioninSafarioniOS,use theformat-detectionmetatag(<meta name = \"format-detection\" content = \"telephone=no\">). Anexampleofthis canbefoundintheAppledeveloperdocumentation. Phonelinksshouldbethenused(e.g.<a href=\"tel:1-408-555- 5555\">1-408-555-5555</a>)toexplicitlycreatealink. Dynamic Analysis If it’s possible to load local files via a WebView, the app might be vulnerable to directory traversal attacks. This would allowaccesstoallfileswithinthesandboxoreventoescapethesandboxwithfullaccesstothefilesystem(ifthedevice isjailbroken). Itshouldthereforebeverifiedifausercanchangethefilenameorpathfromwhichthefileisloaded,and theyshouldn’tbeabletoedittheloadedfile. Tosimulateanattack,youmayinjectyourownJavaScriptintotheWebViewwithaninterceptionproxyorsimplybyusing dynamicinstrumentation. Attempttoaccesslocalstorageandanynativemethodsandpropertiesthatmightbeexposed totheJavaScriptcontext. Inareal-worldscenario,JavaScriptcanonlybeinjectedthroughapermanentbackendCross-SiteScriptingvulnerability oraMITMattack. SeetheOWASPXSSPreventionCheatSheetandthechapter“iOSNetworkCommunication”formore information. Forwhatconcernsthissectionwewilllearnabout: • CheckinghowWebViewsareloaded • DeterminingWebViewfileaccess Checking How WebViews are Loaded Aswehaveseenabovein“TestingHowWebViewsareLoaded”,if“scenario2”oftheWKWebViewsisloaded,theappwill dosobycallingURLForResource:withExtension: andloadHTMLString:baseURL. Toquicklyinspectthis,youcanusefrida-traceandtraceall“loadHTMLString”and“URLForResource:withExtension:” meth- ods. 452\\n$frida-trace -U\"Where'sMyBrowser?\" -m\"*[WKWebView*loadHTMLString*]\" -m\"*[*URLForResource:withExtension:]\" 14131ms -[NSBundle URLForResource:0x1c0255390withExtension:0x0] 14131ms URLForResource:web/WKWebView/scenario2.html 14131ms withExtension:0x0 14190ms -[WKWebView loadHTMLString:0x1c0255390baseURL:0x0] 14190ms HTMLString: <!DOCTYPEhtml> <html> ... </html> 14190ms baseURL:nil In this case, baseURL is set to nil, meaning that the effective origin is “null”. You can obtain the effective origin by running window.origin from the JavaScript of the page (this app has an exploitation helper that allows to write and run JavaScript, but you could also implement a MITM or simply use Frida to inject JavaScript, e.g. via evaluate- JavaScript:completionHandlerofWKWebView). AsanadditionalnoteregardingUIWebViews,ifyouretrievetheeffectiveoriginfromaUIWebViewwherebaseURLisalso settonilyouwillseethatitisnotsetto“null”,insteadyou’llobtainsomethingsimilartothefollowing: applewebdata://5361016c-f4a0-4305-816b-65411fc1d780 Thisorigin“applewebdata://”issimilartothe“file://”originasitdoesnotimplementSame-OriginPolicyandallowaccess to local files and any web resources. In this case, it would be better to set baseURL to “about:blank”, this way, the Same-OriginPolicywouldpreventcross-originaccess. However,therecommendationhereistocompletelyavoidusing UIWebViewsandgoforWKWebViewsinstead. Determining WebView File Access Evenifnothavingtheoriginalsourcecode,youcanquicklydetermineiftheapp’sWebViewsdoallowfileaccessandwhich kind. Forthis,simplynavigatetothetargetWebViewintheappandinspectallitsinstances,foreachofthemgetthevalues mentionedinthestaticanalysis,thatis,allowFileAccessFromFileURLsandallowUniversalAccessFromFileURLs. This onlyappliestoWKWebViews(UIWebVIewsalwaysallowfileaccess). Wecontinuewithourexampleusingthe“Where’sMyBrowser?” appandFridaREPL,extendthescriptwiththefollowing content: ObjC.choose(ObjC.classes['WKWebView'],{ onMatch:function (wk){ console.log('onMatch:',wk); console.log('URL:',wk.URL().toString()); console.log('javaScriptEnabled:',wk.configuration().preferences().javaScriptEnabled()); console.log('allowFileAccessFromFileURLs:', wk.configuration().preferences().valueForKey_('allowFileAccessFromFileURLs').toString()); console.log('hasOnlySecureContent:',wk.hasOnlySecureContent().toString()); console.log('allowUniversalAccessFromFileURLs:', wk.configuration().valueForKey_('allowUniversalAccessFromFileURLs').toString()); }, onComplete:function (){ console.log('doneforWKWebView!'); } }); Ifyourunitnow,you’llhavealltheinformationyouneed: $frida -U-fcom.authenticationfailure.WheresMyBrowser -lwebviews_inspector.js onMatch: <WKWebView:0x1508b1200;frame =(00;320393);layer =<CALayer: 0x1c4238f20>> URL: file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/ Library/WKWebView/scenario1.html javaScriptEnabled: true allowFileAccessFromFileURLs: 0 hasOnlySecureContent: false allowUniversalAccessFromFileURLs: 0 Both allowFileAccessFromFileURLs and allowUniversalAccessFromFileURLs are set to “0”, meaning that they are disabled. InthisappwecangototheWebViewconfigurationandenableallowFileAccessFromFileURLs. Ifwedoso andre-runthescriptwewillseehowitissetto“1”thistime: 453\\n$frida -U-fcom.authenticationfailure.WheresMyBrowser -lwebviews_inspector.js ... allowFileAccessFromFileURLs: 1 Testing App Extensions Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis Thestaticanalysiswilltakecareof: • Verifyingiftheappcontainsappextensions • Determiningthesupporteddatatypes • Checkingdatasharingwiththecontainingapp • Verifyingiftheapprestrictstheuseofappextensions Verifying if the App Contains App Extensions If you have the original source code you can search for all occurrences of NSExtensionPointIdentifier with Xcode (cmd+shift+f)ortakealookinto“BuildPhases/EmbedAppextensions”: Thereyoucanfindthenamesofallembeddedappextensionsfollowedby.appex,nowyoucannavigatetotheindividual appextensionsintheproject. Ifnothavingtheoriginalsourcecode: GrepforNSExtensionPointIdentifieramongallfilesinsidetheappbundle(IPAorinstalledapp): $grep -nrNSExtensionPointIdentifierPayload/Telegram\\X.app/ BinaryfilePayload/TelegramX.app//PlugIns/SiriIntents.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//PlugIns/Share.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//PlugIns/NotificationContent.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//PlugIns/Widget.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//Watch/Watch.app/PlugIns/WatchExtension.appex/Info.plistmatches YoucanalsoaccessperSSH,findtheappbundleandlistallinsidePlugIns(theyareplacedtherebydefault)ordoitwith objection: 454\\nph.telegra.Telegraphon (iPhone:11.1.2)[usb] #cdPlugIns /var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/ TelegramX.app/PlugIns ph.telegra.Telegraphon (iPhone:11.1.2)[usb] #ls NSFileType Perms NSFileProtection Read Write Name ##TestingiOSWebViews >**Platform:**ios > >**MASVSV1:**MSTG-PLATFORM-5 > >**MASVSV2:**MASVS-PLATFORM-2 ###Overview ###StaticAnalysis Forthestaticanalysiswewillfocusmostlyonthefollowingpointshaving `UIWebView`and`WKWebView`underscope. -IdentifyingWebViewusage -TestingJavaScriptconfiguration -Testingformixedcontent -TestingforWebViewURImanipulation ####IdentifyingWebViewUsage LookoutforusagesoftheabovementionedWebViewclassesbysearchinginXcode. Inthecompiledbinaryyoucansearchinitssymbolsorstringslikethis: #####UIWebView ```bash $rabin2 -zz./WheresMyBrowser |egrep \"UIWebView$\" 4890x0002fee90x10002fee9 9 10 (5.__TEXT.__cstring)asciiUIWebView 8960x0003c8130x0003c813 24 25 ()ascii@_OBJC_CLASS_$_UIWebView 17540x000595990x00059599 23 24 ()ascii_OBJC_CLASS_$_UIWebView WKWebView $rabin2 -zz./WheresMyBrowser |egrep \"WKWebView$\" 4900x0002fef30x10002fef3 9 10 (5.__TEXT.__cstring)asciiWKWebView 6250x000316700x100031670 17 18 (5.__TEXT.__cstring)asciiunwindToWKWebView 9040x0003c9600x0003c960 24 25 ()ascii@_OBJC_CLASS_$_WKWebView 17570x000595e40x000595e4 23 24 ()ascii_OBJC_CLASS_$_WKWebView AlternativelyyoucanalsosearchforknownmethodsoftheseWebViewclasses. Forexample,searchforthemethodused toinitializeaWKWebView(init(frame:configuration:)): $rabin2 -zzq ./WheresMyBrowser |egrep \"WKWebView.*frame\" 0x5c3ac7776__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 152}}