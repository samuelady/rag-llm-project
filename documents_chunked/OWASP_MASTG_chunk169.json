{"text": "https://github.com/FSecureLABS/drozer Drozer is an Android security assessment framework that allows you to search for security vulnerabilities in apps and devicesbyassumingtheroleofathird-partyappinteractingwiththeotherapplication’sIPCendpointsandtheunderlying OS. The advantage of using drozer consists on its ability to automate several tasks and that it can be expanded through modules. Themodulesareveryhelpfulandtheycoverdifferentcategoriesincludingascannercategorythatallowsyou toscanforknowndefectswithasimplecommandsuchasthemodulescanner.provider.injectionwhichdetectsSQL injections in content providers in all the apps installed in the system. Without drozer, simple tasks such as listing the app’spermissionsrequireseveralstepsthatincludedecompilingtheAPKandmanuallyanalyzingtheresults. Installing Drozer You can refer to drozer GitHub page (for Linux and Windows, for macOS please refer to this blog post) and the drozer websiteforprerequisitesandinstallationinstructions. Using Drozer Beforeyoucanstartusingdrozer,you’llalsoneedthedrozeragentthatrunsontheAndroiddeviceitself. Downloadthe latestdrozeragentfromtheGitHubreleasespageandinstallitwithadb install drozer.apk. OncethesetupiscompletedyoucanstartasessiontoanemulatororadeviceconnectedperUSBbyrunningadbforward tcp:31415 tcp:31415anddrozer console connect. Thisiscalleddirectmodeandyoucanseethefullinstructionsin the User Guide in section “Starting a Session”. An alternative is to run Drozer in infrastructure mode, where, you are runningadrozerserverthatcanhandlemultipleconsolesandagents,androutessessionsbetweenthem. Youcanfind thedetailsofhowtosetupdrozerinthismodeinthe“InfrastructureMode”sectionoftheUserGuide. Nowyouarereadytobeginanalyzingapps. Agoodfirststepistoenumeratetheattacksurfaceofanappwhichcanbe doneeasilywiththefollowingcommand: dz>runapp.package.attacksurface <package> Again, withoutdrozerthiswouldhaverequiredseveralsteps. Themoduleapp.package.attacksurfacelistsactivities, broadcastreceivers,contentprovidersandservicesthatareexported,hence,theyarepublicandcanbeaccessedthrough otherapps. Oncewehaveidentifiedourattacksurface,wecaninteractwiththeIPCendpointsthroughdrozerwithout havingtowriteaseparatestandaloneappasitwouldberequiredforcertaintaskssuchascommunicatingwithacontent provider. Forexample,iftheapphasanexportedActivitythatleakssensitiveinformationwecaninvokeitwiththeDrozermodule app.activity.start: 527\\ndz>runapp.activity.start --component <package><componentname> Thispreviouscommandwillstarttheactivity,hopefullyleakingsomesensitiveinformation. Drozerhasmodulesforevery typeofIPCmechanism. DownloadInsecureBankv2ifyouwouldliketotrythemoduleswithanintentionallyvulnerable applicationthatillustratescommonproblemsrelatedtoIPCendpoints. Paycloseattentiontothemodulesinthescanner category as they are very helpful automatically detecting vulnerabilities even in system packages, specially if you are usingaROMprovidedbyyourcellphonecompany. EvenSQLinjectionvulnerabilitiesinsystempackagesbyGooglehave beenidentifiedinthepastwithdrozer. Other Drozer commands Here’sanon-exhaustivelistofcommandsyoucanusetostartexploringonAndroid: ##Listalltheinstalledpackages $dz>runapp.package.list ##Findthepackagenameofaspecificapp $dz>runapp.package.list -f(stringtobesearched) ##Seebasicinformation $dz>runapp.package.info -a(packagename) ##Identifytheexportedapplicationcomponents $dz>runapp.package.attacksurface (packagename) ##IdentifythelistofexportedActivities $dz>runapp.activity.info -a(packagename) ##LaunchtheexportedActivities $dz>runapp.activity.start --component (packagename)(componentname) ##IdentifythelistofexportedBroadcastreceivers $dz>runapp.broadcast.info -a(packagename) ##SendamessagetoaBroadcastreceiver $dz>runapp.broadcast.send --action (broadcastreceivername)--extra (numberofarguments) ##DetectSQLinjectionsincontentproviders $dz>runscanner.provider.injection -a(packagename) Other Drozer resources Otherresourceswhereyoumightfindusefulinformationare: • OfficialdrozerUserGuide. • drozerGitHubpage • drozerWiki Scrcpy Platform: android Availableat: https://github.com/Genymobile/scrcpy ScrcpyprovidesdisplayandcontrolofAndroiddevicesconnectedoverUSB(orTCP/IP).Itdoesnotrequireanyrootaccess anditworksonGNU/Linux,WindowsandmacOS. Android Studio Platform: android TheofficialIDEforGoogle’sAndroidoperatingsystem,builtonJetBrains’IntelliJIDEAsoftwareanddesignedspecifically forAndroiddevelopment-https://developer.android.com/studio/index.html 528\\nFrida for Android Platform: android FridasupportsinteractionwiththeAndroidJavaruntimethoughtheJavaAPI.You’llbeabletohookandcallbothJavaand nativefunctionsinsidetheprocessanditsnativelibraries. YourJavaScriptsnippetshavefullaccesstomemory,e.g.to readand/orwriteanystructureddata. HerearesometasksthatFridaAPIsoffersandarerelevantorexclusiveonAndroid: • InstantiateJavaobjectsandcallstaticandnon-staticclassmethods(JavaAPI). • ReplaceJavamethodimplementations(JavaAPI). • EnumerateliveinstancesofspecificclassesbyscanningtheJavaheap(JavaAPI). • Scanprocessmemoryforoccurrencesofastring(MemoryAPI). • Interceptnativefunctioncallstorunyourowncodeatfunctionentryandexit(InterceptorAPI). RememberthatonAndroid,youcanalsobenefitfromthebuilt-intoolsprovidedwheninstallingFrida,thatincludesthe FridaCLI(frida),frida-ps,frida-ls-devicesandfrida-trace,tonamesomeofthem. Frida is often compared to Xposed, however this comparison is far from fair as both frameworks were designed with differentgoalsinmind. Thisisimportanttounderstandasanappsecuritytestersothatyoucanknowwhichframework touseinwhichsituation: • Fridaisstandalone,allyouneedistorunthefrida-serverbinaryfromaknownlocationinyourtargetAndroiddevice (see“InstallingFrida”below). Thismeansthat,incontrasttoXposed,itisnotdeepinstalledinthetargetOS. • Reversinganappisaniterativeprocess. Asaconsequenceofthepreviouspoint, youobtainashorterfeedback loopwhentestingasyoudon’tneedto(soft)reboottoapplyorsimplyupdateyourhooks. Soyoumightpreferto useXposedwhenimplementingmorepermanenthooks. • You may inject and update your Frida JavaScript code on the fly at any point during the runtime of your process (similarlytoCycriptoniOS).Thiswayyoucanperformtheso-calledearlyinstrumentationbylettingFridaspawn yourapporyoumayprefertoattachtoarunningappthatyoumighthavebroughttoacertainstate. • FridaisabletohandlebothJavaaswellasnativecode(JNI),allowingyoutomodifybothofthem. Thisisunfortu- natelyalimitationofXposedwhichlacksofnativecodesupport. NotethatXposed,asofearly2019,doesnotworkonAndroid9(APIlevel28)yet. Installing Frida on Android InordertosetupFridaonyourAndroiddevice: • Ifyourdeviceisnotrooted,youcanalsouseFrida,pleaserefertosection“DynamicAnalysisonNon-RootedDevices” ofthe“ReverseEngineeringandTampering”chapter. • Ifyouhavearooteddevice,simplyfollowtheofficialinstructionsorfollowthehintsbelow. Weassumearooteddevicehereunlessotherwisenoted. Downloadthefrida-serverbinaryfromtheFridareleasespage. Makesurethatyoudownloadtherightfrida-serverbinaryforthearchitectureofyourAndroiddeviceoremulator: x86, x86_64,armorarm64. Makesurethattheserverversion(atleastthemajorversionnumber)matchestheversionofyour localFridainstallation. PyPIusuallyinstallsthelatestversionofFrida. Ifyou’reunsurewhichversionisinstalled,youcan checkwiththeFridacommandlinetool: frida --version OryoucanrunthefollowingcommandtoautomaticallydetectFridaversionanddownloadtherightfrida-serverbinary: wget https://github.com/frida/frida/releases/download/$(frida --version)/frida-server-$(frida --version)-android-arm.xz Copyfrida-servertothedeviceandrunit: 529\\nadbpushfrida-server/data/local/tmp/ adbshell \"chmod755/data/local/tmp/frida-server\" adbshell \"su-c/data/local/tmp/frida-server&\" Using Frida on Android Withfrida-serverrunning,youshouldnowbeabletogetalistofrunningprocesseswiththefollowingcommand(usethe -UoptiontoindicateFridatouseaconnectedUSBdevicesoremulator): $frida-ps -U PID Name ----- -------------------------------------------------------------- 276 adbd 956 android.process.media 198 bridgemgrd 30692 com.android.chrome 30774 com.android.chrome:privileged_process0 30747 com.android.chrome:sandboxed 30834 com.android.chrome:sandboxed 3059 com.android.nfc 1526 com.android.phone 17104 com.android.settings 1302 com.android.systemui (...) Orrestrictthelistwiththe-Uaiflagcombinationtogetallapps(-a)currentlyinstalled(-i)ontheconnectedUSBdevice (-U): $frida-ps -Uai PID Name Identifier ----- ---------------------------------------- ------------------------------ 766 AndroidSystem android 30692 Chrome com.android.chrome 3520 ContactsStorage com.android.providers.contacts - Uncrackable1 sg.vantagepoint.uncrackable1 - drozerAgent com.mwr.dz Thiswillshowthenamesandidentifiersofallapps,iftheyarecurrentlyrunningitwillalsoshowtheirPIDs. Searchfor yourappinthelistandtakeanoteofthePIDoritsname/identifier. Fromnowonyou’llrefertoyourappbyusingoneof them. Arecommendationistousetheidentifiers,asthePIDswillchangeoneachrunoftheapp. Forexamplelet’stake com.android.chrome. YoucanusethisstringnowonallFridatools,e.g.ontheFridaCLI,onfrida-traceorfromaPython script. Tracing Native Libraries with frida-trace Totracespecific(low-level)librarycalls,youcanusethefrida-tracecommandlinetool: frida-trace -Ucom.android.chrome -i\"open\" This generates a little JavaScript in __handlers__/libc.so/open.js, which Frida injects into the process. The script tracesallcallstotheopenfunctioninlibc.so. YoucanmodifythegeneratedscriptaccordingtoyourneedswithFrida JavaScriptAPI. Unfortunatelytracinghigh-levelmethodsofJavaclassesisnotyetsupported(butmightbeinthefuture). Frida CLI and the Java API Use the Frida CLI tool (frida) to work with Frida interactively. It hooks into a process and gives you a command line interfacetoFrida’sAPI. frida -Ucom.android.chrome Withthe-loption,youcanalsousetheFridaCLItoloadscripts,e.g.,toloadmyscript.js: 530\\nfrida -U-lmyscript.jscom.android.chrome FridaalsoprovidesaJavaAPI,whichisespeciallyhelpfulfordealingwithAndroidapps. ItletsyouworkwithJavaclasses andobjectsdirectly. HereisascripttooverwritetheonResumefunctionofanActivityclass: Java.perform(function (){ varActivity =Java.use(\"android.app.Activity\"); Activity.onResume.implementation =function (){ console.log(\"[*]onResume()gotcalled!\"); this.onResume(); }; }); TheabovescriptcallsJava.performtomakesurethatyourcodegetsexecutedinthecontextoftheJavaVM.Itinstantiates awrapperfortheandroid.app.ActivityclassviaJava.useandoverwritestheonResumefunction. ThenewonResume functionimplementationprintsanoticetotheconsoleandcallstheoriginalonResumemethodbyinvokingthis.onResume everytimeanactivityisresumedintheapp. The JADX decompiler (v1.3.3 and", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 169}}