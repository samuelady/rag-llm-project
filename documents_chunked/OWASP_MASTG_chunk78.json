{"text": "onceanti-debuggingmeasuresbecomeactiveitwillstopworking. Ifthe“Waitfordebugger”featureinSettings>Developeroptionsisunavailable,youcanuseashellscripttolaunch theprocessandimmediatelyattachstrace(notanelegantsolution,butitworks): while true;dopid=$(pgrep 'target_process' |head -1);if[[-n\"$pid\"]];then strace -s2000 -e\"!read\" -ff-p\"$pid\";break;fi;done Ftrace FtraceisatracingutilitybuiltdirectlyintotheLinuxkernel. Onarooteddevice,ftracecantracekernelsystemcallsmore transparentlythanstracecan(stracereliesontheptracesystemcalltoattachtothetargetprocess). Conveniently,thestockAndroidkernelonbothLollipopandMarshmallowincludeftracefunctionality. Thefeaturecanbe enabledwiththefollowingcommand: echo1 >/proc/sys/kernel/ftrace_enabled The /sys/kernel/debug/tracing directory holds all control and output files related to ftrace. The following files are foundinthisdirectory: • available_tracers: Thisfileliststheavailabletracerscompiledintothekernel. • current_tracer: Thisfilesetsordisplaysthecurrenttracer. • tracing_on: Echo “1”intothis filetoallow/start updateofthe ringbuffer. Echoing“0”will preventfurtherwrites intotheringbuffer. KProbes TheKProbesinterfaceprovidesanevenmorepowerfulwaytoinstrumentthekernel: itallowsyoutoinsertprobesinto (almost)arbitrarycodeaddresseswithinkernelmemory. KProbesinsertsabreakpointinstructionatthespecifiedaddress. Once the breakpoint is reached, control passes to the KProbes system, which then executes the user-defined handler function(s) and the original instruction. Besides being great for function tracing, KProbes can implement rootkit-like functionality,suchasfilehiding. JprobesandKretprobesareotherKProbes-basedprobetypesthatallowhookingoffunctionentriesandexits. The stock Android kernel comes without loadable module support, which is a problem because Kprobes are usually de- ployedaskernelmodules. ThestrictmemoryprotectiontheAndroidkerneliscompiledwithisanotherissuebecauseit preventsthepatchingofsomepartsofKernelmemory. Elfmaster’ssystemcallhookingmethodcausesaKernelpanicon stockLollipopandMarshmallowbecausethesys_call_tableisnon-writable. Youcan,however,useKProbesinasandbox bycompilingyourown,morelenientKernel(moreonthislater). Information Gathering - API Usage 179\\nPlatform: android TheAndroidplatformprovidesmanyin-builtlibrariesforfrequentlyusedfunctionalitiesinapplications,forexamplecryp- tography,Bluetooth,NFC,networkorlocationlibraries. Determiningthepresenceoftheselibrariesinanapplicationcan giveusvaluableinformationaboutitsnature. Forinstance,ifanapplicationisimportingjavax.crypto.Cipher,itindicatesthattheapplicationwillbeperformingsome kindofcryptographicoperation. Fortunately,cryptographiccallsareverystandardinnature,i.e,theyneedtobecalled inaparticularordertoworkcorrectly,thisknowledgecanbehelpfulwhenanalyzingcryptographyAPIs. Forexample,by lookingfortheCipher.getInstancefunction,wecandeterminethecryptographicalgorithmbeingused. Withsuchan approachwecandirectlymovetoanalyzingcryptographicassets,whichoftenareverycriticalinanapplication. Further informationonhowtoanalyzeAndroid’scryptographicAPIsisdiscussedinthesection“AndroidCryptographicAPIs”. Similarly, the above approach can be used to determine where and how an application is using NFC. For instance, an applicationusingHost-basedCardEmulationforperformingdigitalpaymentsmustusetheandroid.nfcpackage. There- fore, agoodstartingpointforNFCAPIanalysiswouldbetoconsulttheAndroidDeveloperDocumentationtogetsome ideas and start searching for critical functions such as processCommandApdu from the android.nfc.cardemulation. HostApduServiceclass. Retrieving Cross References Platform: android Java and Kotlin There are many RE tools that support retrieving Java cross references. For many of the GUI-based ones, this is usually donebyrightclickingonthedesiredfunctionandselectingthecorrespondingoption,e.g.ShowReferencestoinGhidra orFindUsageinjadx. Native Code SimilarlytoJavaanalysis,youcanalsouseGhidratoanalyzenativelibrariesandobtaincrossreferencesbyrightclicking thedesiredfunctionandselectingShowReferencesto. Method Tracing Platform: android Incontrasttomethodprofiling,whichtellsyouhowfrequentlyamethodisbeingcalled,methodtracinghelpsyoutoalso determine its input and output values. This technique can prove to be very useful when dealing with applications that haveabigcodebaseand/orareobfuscated. As we will discuss shortly in the next section, frida-trace offers out-of-the-box support for Android/iOS native code tracingandiOShighlevelmethodtracing. IfyoupreferaGUI-basedapproachyoucanusetoolssuchasRMS-Runtime MobileSecuritywhichenablesamorevisualexperienceaswellasincludeseveralconveniencetracingoptions. Get Open Files Platform: android Youcanuselsofwiththeflag-p <pid>toreturnthelistofopenfilesforthespecifiedprocess. Seethemanpagefor moreoptions. 180\\n##lsof-p6233 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODENAME .foobar.c 6233 u0_a97 cwd DIR 0,1 0 1/ .foobar.c 6233 u0_a97 rtd DIR 0,1 0 1/ .foobar.c 6233 u0_a97 txt REG 259,11 23968 399/system/bin/app_process64 .foobar.c 6233 u0_a97 mem unknown /dev/ashmem/dalvik-mainspace (regionspace)(deleted) .foobar.c 6233 u0_a97 mem REG 253,0 2797568 1146914/data/dalvik-cache/arm64/system@framework@boot.art .foobar.c 6233 u0_a97 mem REG 253,0 1081344 1146915/data/dalvik-cache/arm64/system@framework@boot-core-libart.art ... Intheaboveoutput,themostrelevantfieldsforusare: • NAME:pathofthefile. • TYPE:typeofthefile,forexample,fileisadirectoryoraregularfile. Thiscanbeextremelyusefultospotunusualfileswhenmonitoringapplicationsusingobfuscationorotheranti-reverse engineeringtechniques,withouthavingtoreversethecode. Forinstance,anapplicationmightbeperformingencryption- decryptionofdataandstoringitinafiletemporarily. Disassembling Code to Smali Platform: android Ifyouwanttoinspecttheapp’ssmalicode(insteadofJava),youcanopenyourAPKinAndroidStudiobyclickingProfile ordebugAPKfromthe“Welcomescreen”(evenifyoudon’tintendtodebugityoucantakealookatthesmalicode). Alternatively you can use apktool to extract and disassemble resources directly from the APK archive and disassemble Javabytecodetosmali. apktoolallowsyoutoreassemblethepackage,whichisusefulforpatchingtheapporapplying changestoe.g.theAndroidManifest. Native Code Tracing Platform: android Native methods tracing can be performed with relative ease compared to Java method tracing. frida-trace is a CLI toolfordynamicallytracingfunctioncalls. Itmakestracingnativefunctionstrivialandcanbeveryusefulforcollecting informationaboutanapplication. Inordertousefrida-trace,aFridaservershouldberunningonthedevice. Anexamplefortracinglibc’sopenfunction using frida-trace is demonstrated below, where -U connects to the USB device and -i specifies the function to be includedinthetrace. frida-trace -U-i\"open\" com.android.chrome 181\\nNotehow,bydefault,onlytheargumentspassedtothefunctionareshown,butnotthereturnvalues. Underthehood, frida-tracegeneratesonelittleJavaScripthandlerfilepermatchedfunctionintheauto-generated__handlers__folder, whichFridatheninjectsintotheprocess. Youcaneditthesefilesformoreadvancedusagesuchasobtainingthereturn valueofthefunctions,theirinputparameters,accessingthememory,etc. CheckFrida’sJavaScriptAPIformoredetails. Inthiscase,thegeneratedscriptwhichtracesallcallstotheopenfunctioninlibc.soislocatedin__handlers__/libc. so/open.js,itlooksasfollows: { onEnter:function (log,args,state){ log('open(' + 'path=\"' +args[0].readUtf8String()+'\"'+ ',oflag=' +args[1]+ ')'); }, onLeave:function (log,retval,state){ log('\\treturn:' +retval); \\\\edited } } Intheabovescript,onEntertakescareofloggingthecallstothisfunctionanditstwoinputparametersintherightformat. YoucanedittheonLeaveeventtoprintthereturnvaluesasshownabove. Note that libc is a well-known library, Frida is able to derive the input parameters of its open function and auto- maticallylogthemcorrectly. Butthiswon’tbethecaseforotherlibrariesorforAndroidKotlin/Javacode. Inthat case,youmaywanttoobtainthesignaturesofthefunctionsyou’reinterestedinbyreferringtoAndroidDevelopers 182\\ndocumentationorbyreverseengineertheappfirst. Anotherthingtonoticeintheoutputaboveisthatit’scolorized. Anapplicationcanhavemultiplethreadsrunning,and each thread can call the open function independently. By using such a color scheme, the output can be easily visually segregatedforeachthread. frida-traceisaveryversatiletoolandtherearemultipleconfigurationoptionsavailablesuchas: • Including-Iandexcluding-Xentiremodules. • TracingallJNIfunctionsinanAndroidapplicationusing-i \"Java_*\"(notetheuseofaglob*tomatchallpossible functionsstartingwith“Java_”). • Tracingfunctionsbyaddresswhennofunctionnamesymbolsareavailable(strippedbinaries),e.g.-a \"libjpeg. so!0x4793c\". frida-trace", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 78}}