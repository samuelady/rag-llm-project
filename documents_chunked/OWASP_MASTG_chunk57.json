{"text": "– Privacy(overview) 95\\n– Privacy(details1) – Privacy(details2) – Security(overview) – Security(details) • Android 11 (API level 30) in September 2020 (scoped storage enforcement, Permissions auto-reset, reduced packagevisibility,APKSignatureSchemev4) – Privacy(overview) – PrivacyBehaviorchanges(allapps) – SecurityBehaviorchanges(allapps) – PrivacyBehaviorchanges(appstargetingversion) – SecurityBehaviorchanges(appstargetingversion) • Android12(APIlevel31-32)inAugust2021(MaterialYou,Webintentresolution,PrivacyDashboard) – Securityandprivacy – Behaviorchanges(allapps) – Behaviorchanges(appstargetingversion) • Android13(APIlevel33)in2022(Saferexportingofcontext-registeredreceivers,newphotopicker) – Securityandprivacy – PrivacyBehaviorchanges(allapps) – SecurityBehaviorchanges(allapps) – PrivacyBehaviorchanges(appstargetingversion) – SecurityBehaviorchanges(appstargetingversion) • Android14(APIlevel34)in2023: – Summaryofchanges – SecurityBehaviorchanges(allapps) – SecurityBehaviorchanges(appstargetingversion) Androiddevelopmentreleasesfollowauniquestructure. Theyareorganizedintofamiliesandgivenalphabeticalcode- namesinspiredbytastytreats. Youcanfindthemallhere. The App Sandbox AppsareexecutedintheAndroidApplicationSandbox,whichseparatestheappdataandcodeexecutionfromotherapps onthedevice. Asmentionedbefore,thisseparationaddsafirstlayerofdefense. Installationofanewappcreatesanewdirectorynamedaftertheapppackage,whichresultsinthefollowingpath: /data/ data/[package-name]. Thisdirectoryholdstheapp’sdata. Linuxdirectorypermissionsaresetsuchthatthedirectory canbereadfromandwrittentoonlywiththeapp’suniqueUID. We can confirm this by looking at the file system permissions in the /data/data folder. For example, we can see that GoogleChromeandCalendarareassignedonedirectoryeachandrununderdifferentuseraccounts: 96\\ndrwx------ 4u0_a97 u0_a97 40962017-01-1814:27com.android.calendar drwx------ 6u0_a120 u0_a120 40962017-01-1912:54com.android.chrome Developerswhowanttheirappstoshareacommonsandboxcansidestepsandboxing. Whentwoappsaresignedwith the same certificate and explicitly share the same user ID (having the sharedUserId in their AndroidManifest.xml files), eachcanaccesstheother’sdatadirectory. SeethefollowingexampletoachievethisintheNFCapp: <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.nfc\" android:sharedUserId=\"android.uid.nfc\"> Linux User Management AndroidleveragesLinuxusermanagementtoisolateapps. Thisapproachisdifferentfromusermanagementusagein traditional Linux environments, where multiple apps are often run by the same user. Android creates a unique UID for each Android app and runs the app in a separate process. Consequently, each app can access its own resources only. ThisprotectionisenforcedbytheLinuxkernel. Generally,appsareassignedUIDsintherangeof10000and99999. Androidappsreceiveausernamebasedontheir UID. For example, the app with UID 10188 receives the user name u0_a188. If the permissions an app requested are granted,thecorrespondinggroupIDisaddedtotheapp’sprocess. Forexample,theuserIDoftheappbelowis10188. ItbelongstothegroupID3003(inet). Thatgroupisrelatedtoandroid.permission.INTERNETpermission. Theoutputof theidcommandisshownbelow. $id uid=10188(u0_a188)gid=10188(u0_a188)groups=10188(u0_a188),3003(inet), 9997(everybody),50188(all_a188)context=u:r:untrusted_app:s0:c512,c768 TherelationshipbetweengroupIDsandpermissionsisdefinedinthefollowingfile: frameworks/base/data/etc/platform.xml <permission name=\"android.permission.INTERNET\" > <group gid=\"inet\" /> </permission> <permission name=\"android.permission.READ_LOGS\" > <group gid=\"log\" /> </permission> <permission name=\"android.permission.WRITE_MEDIA_STORAGE\" > <group gid=\"media_rw\" /> <group gid=\"sdcard_rw\" /> </permission> Zygote The process Zygote starts up during Android initialization. Zygote is a system service for launching apps. The Zygote process is a “base” process that contains all the core libraries the app needs. Upon launch, Zygote opens the socket /dev/socket/zygoteandlistensforconnectionsfromlocalclients. Whenitreceivesaconnection,itforksanewprocess, whichthenloadsandexecutestheapp-specificcode. App Lifecycle In Android, the lifetime of an app process is controlled by the operating system. A new Linux process is created when anappcomponentisstartedandthesameappdoesn’tyethaveanyothercomponentsrunning. Androidmaykillthis processwhenthelatterisnolongernecessaryorwhenreclaimingmemoryisnecessarytorunmoreimportantapps. The decisiontokillaprocessisprimarilyrelatedtothestateoftheuser’sinteractionwiththeprocess. Ingeneral,processes canbeinoneoffourstates. • Aforegroundprocess(e.g.,anactivityrunningatthetopofthescreenorarunningBroadcastReceiver) • Avisibleprocessisaprocessthattheuserisawareof,sokillingitwouldhaveanoticeablenegativeimpactonuser experience. Oneexampleisrunninganactivitythat’svisibletotheuseron-screenbutnotintheforeground. 97\\n• AserviceprocessisaprocesshostingaservicethathasbeenstartedwiththestartServicemethod. Thoughthese processesaren’tdirectlyvisibletotheuser,theyaregenerallythingsthattheusercaresabout(suchasbackground networkdatauploadordownload),sothesystemwillalwayskeepsuchprocessesrunningunlessthere’sinsufficient memorytoretainallforegroundandvisibleprocesses. • Acachedprocessisaprocessthat’snotcurrentlyneeded,sothesystemisfreetokillitwhenmemoryisneeded. Apps must implement callback methods that react to a number of events; for example, the onCreate handler is called when the app process is first created. Other callback methods include onLowMemory, onTrimMemory and onConfigurationChanged. App Bundles Android applications can be shipped in two forms: the Android Package Kit (APK) file or an Android App Bundle (.aab). AndroidAppBundlesprovidealltheresourcesnecessaryforanapp,butdeferthegenerationoftheAPKanditssigning toGooglePlay. AppBundlesaresignedbinarieswhichcontainthecodeoftheappinseveralmodules. Thebasemodule containsthecoreoftheapplication. Thebasemodulecanbeextendedwithvariousmoduleswhichcontainnewenrich- ments/functionalities for the app as further explained on the developer documentation for app bundle. If you have an AndroidAppBundle,youcanbestusethebundletoolcommandlinetoolfromGoogletobuildunsignedAPKsinorderto usetheexistingtoolingontheAPK.YoucancreateanAPKfromanAABfilebyrunningthefollowingcommand: bundletoolbuild-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks IfyouwanttocreatesignedAPKsreadyfordeploymenttoatestdevice,use: $bundletoolbuild-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks --ks=/MyApp/keystore.jks --ks-pass=file:/MyApp/keystore.pwd --ks-key-alias=MyKeyAlias --key-pass=file:/MyApp/key.pwd WerecommendthatyoutestboththeAPKwithandwithouttheadditionalmodules,sothatitbecomesclearwhetherthe additionalmodulesintroduceand/orfixsecurityissuesforthebasemodule. Android Manifest Every app has an Android Manifest file, which embeds content in binary XML format. The standard name of this file is AndroidManifest.xml. Itislocatedintherootdirectoryoftheapp’sAndroidPackageKit(APK)file. Themanifestfiledescribestheappstructure,itscomponents(activities,services,contentproviders,andintentreceivers), andrequestedpermissions. Italsocontainsgeneralappmetadata,suchastheapp’sicon,versionnumber,andtheme. Thefilemaylistotherinformation,suchascompatibleAPIs(minimal,targeted,andmaximalSDKversion)andthekind ofstorageitcanbeinstalledon(externalorinternal). Here is an example of a manifest file, including the package name (the convention is a reversed URL, but any string isacceptable). Italsoliststheappversion, relevantSDKs, requiredpermissions, exposedcontentproviders, broadcast receiversusedwithintentfiltersandadescriptionoftheappanditsactivities: <manifest package=\"com.owasp.myapplication\" android:versionCode=\"0.1\" > <uses-sdk android:minSdkVersion=\"12\" android:targetSdkVersion=\"22\" android:maxSdkVersion=\"25\" /> <uses-permission android:name=\"android.permission.INTERNET\" /> <provider android:name=\"com.owasp.myapplication.MyProvider\" android:exported=\"false\" /> <receiver android:name=\".MyReceiver\" > <intent-filter> <action android:name=\"com.owasp.myapplication.myaction\" /> </intent-filter>", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 57}}