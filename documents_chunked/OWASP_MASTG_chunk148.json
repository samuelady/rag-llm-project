{"text": "Seethechapter“DataStorageoniOS”formoredetails. Codable WithSwift 4, the Codable type alias arrived: it is a combination of theDecodable and Encodable protocols. A String, Int,Double,Date,DataandURLareCodablebynature: meaningtheycaneasilybeencodedanddecodedwithoutany additionalwork. Let’stakethefollowingexample: struct CustomPointStruct:Codable { varx:Double varname:String } By adding Codable to the inheritance list for the CustomPointStruct in the example, the methods init(from:) and encode(to:) areautomaticallysupported. ForemoredetailsabouttheworkingsofCodablechecktheAppleDeveloper Documentation. The Codables can easily be encoded / decoded into various representations: NSData using NSCod- ing/NSSecureCoding,JSON,PropertyLists,XML,etc. Seethesubsectionsbelowformoredetails. JSON and Codable TherearevariouswaystoencodeanddecodeJSONwithiniOSbyusingdifferent3rdpartylibraries: • Mantle • JSONModellibrary • SwiftyJSONlibrary • ObjectMapperlibrary 437\\n• JSONKit • JSONModel • YYModel • SBJson5 • Unbox • Gloss • Mapper • JASON • Arrow ThelibrariesdifferintheirsupportforcertainversionsofSwiftandObjective-C,whethertheyreturn(im)mutableresults, speed,memoryconsumptionandactuallibrarysize. Again,noteincaseofimmutability: confidentialinformationcannot beremovedfrommemoryeasily. Next, Apple provides support for JSON encoding/decoding directly by combining Codable together with a JSONEncoder andaJSONDecoder: struct CustomPointStruct:Codable { varpoint:Double varname:String } letencoder =JSONEncoder() encoder.outputFormatting =.prettyPrinted lettest =CustomPointStruct(point:10,name:\"test\") letdata =tryencoder.encode(test) letstringData =String(data:data,encoding:.utf8) //stringData=Optional({ //\"point\":10, //\"name\":\"test\" //}) JSON itself can be stored anywhere, e.g., a (NoSQL) database or a file. You just need to make sure that any JSON that containssecretshasbeenappropriatelyprotected(e.g.,encrypted/HMACed). Seethechapter“DataStorageoniOS”for moredetails. Property Lists and Codable Youcanpersistobjectstopropertylists(alsocalledplistsinprevioussections). Youcanfindtwoexamplesbelowofhow touseit: //archiving: letdata =NSKeyedArchiver.archivedDataWithRootObject(customPoint) NSUserDefaults.standardUserDefaults().setObject(data,forKey:\"customPoint\") //unarchiving: ifletdata =NSUserDefaults.standardUserDefaults().objectForKey(\"customPoint\")as?NSData { letcustomPoint =NSKeyedUnarchiver.unarchiveObjectWithData(data) } In this first example, the NSUserDefaults are used, which is the primary property list. We can do the same with the Codableversion: struct CustomPointStruct:Codable { varpoint:Double varname:String } varpoints:[CustomPointStruct]=[ CustomPointStruct(point:1,name:\"test\"), CustomPointStruct(point:2,name:\"test\"), CustomPointStruct(point:3,name:\"test\"), ] UserDefaults.standard.set(try?PropertyListEncoder().encode(points),forKey:\"points\") ifletdata =UserDefaults.standard.value(forKey:\"points\")as?Data { letpoints2 =try?PropertyListDecoder().decode([CustomPointStruct].self,from:data) } 438\\nNotethatplistfilesarenotmeanttostoresecretinformation. Theyaredesignedtoholduserpreferencesforan app. XML TherearemultiplewaystodoXMLencoding. SimilartoJSONparsing,therearevariousthirdpartylibraries,suchas: • Fuzi • Ono • AEXML • RaptureXML • SwiftyXMLParser • SWXMLHash They vary in terms of speed, memory usage, object persistence and more important: differ in how they handle XML external entities. See XXE in the Apple iOS Office viewer as an example. Therefore, it is key to disable external entity parsingifpossible. SeetheOWASPXXEpreventioncheatsheetformoredetails. Nexttothelibraries,youcanmakeuse ofApple’sXMLParserclass When not using third party libraries, but Apple’s XMLParser, be sure to let shouldResolveExternalEntities return false. Object-Relational Mapping (CoreData and Realm) TherearevariousORM-likesolutionsforiOS.ThefirstoneisRealm,whichcomeswithitsownstorageengine. Realmhas settingstoencryptthedataasexplainedinRealm’sdocumentation. Thisallowsforhandlingsecuredata. Notethatthe encryptionisturnedoffbydefault. AppleitselfsuppliesCoreData,whichiswellexplainedintheAppleDeveloperDocumentation. Itsupportsvariousstorage backendsasdescribedinApple’sPersistentStoreTypesandBehaviorsdocumentation. Theissuewiththestorageback- endsrecommendedbyApple, isthatnoneofthetypeofdatastoresisencrypted, norcheckedforintegrity. Therefore, additional actions are necessary in case of confidential data. An alternative can be found in project iMas, which does supplyoutoftheboxencryption. Protocol Buffers ProtocolBuffersbyGoogle,areaplatform-andlanguage-neutralmechanismforserializingstructureddatabymeansof theBinaryDataFormat. TheyareavailableforiOSbymeansoftheProtobuflibrary. Therehavebeenafewvulnerabil- itieswithProtocolBuffers, suchasCVE-2015-5237. NotethatProtocol Buffers do not provide any protection for confidentialityasnobuilt-inencryptionisavailable. WebViews WebViews are in-app browser components for displaying interactive web content. They can be used to embed web content directly into an app’s user interface. iOS WebViews support JavaScript execution by default, so script injection andCross-SiteScriptingattackscanaffectthem. Types of WebViews TherearemultiplewaystoincludeaWebViewinaniOSapplication: • UIWebView • WKWebView • SFSafariViewController UIWebView UIWebViewisdeprecatedstartingoniOS12andshouldnotbeused. MakesurethateitherWKWebVieworSFSafariView- Controllerareusedtoembedwebcontent. Inadditiontothat, JavaScriptcannotbedisabledforUIWebViewwhichis anotherreasontorefrainfromusingit. 439\\nWKWebView WKWebViewwasintroducedwithiOS8andistheappropriatechoiceforextendingappfunctionality,controllingdisplayed content(i.e.,preventtheuserfromnavigatingtoarbitraryURLs)andcustomizing. WKWebViewcomeswithseveralsecurityadvantagesoverUIWebView: • JavaScriptisenabledbydefaultbutthankstothejavaScriptEnabledpropertyofWKWebView,itcanbecompletely disabled,preventingallscriptinjectionflaws. • The JavaScriptCanOpenWindowsAutomatically can be used to prevent JavaScript from opening new windows, suchaspop-ups. • ThehasOnlySecureContentpropertycanbeusedtoverifyresourcesloadedbytheWebViewareretrievedthrough encryptedconnections. • WKWebViewimplementsout-of-processrendering,somemorycorruptionbugswon’taffectthemainappprocess. A JavaScript Bridge can be enabled when using WKWebView and UIWebView. See Section “Native Functionality Exposed ThroughWebViews”belowformoreinformation. SFSafariViewController SFSafariViewControllerisavailablestartingoniOS9andshouldbeusedtoprovideageneralizedwebviewingexperi- ence. TheseWebViewscanbeeasilyspottedastheyhaveacharacteristiclayoutwhichincludesthefollowingelements: • Aread-onlyaddressfieldwithasecurityindicator. • AnAction(“Share”)button. • ADonebutton,backandforwardnavigationbuttons,anda“Safari”buttontoopenthepagedirectlyinSafari. 440\\nThereareacoupleofthingstoconsider: • JavaScriptcannotbedisabledinSFSafariViewControllerandthisisoneofthereasonswhytheusageofWKWeb- Viewisrecommendedwhenthegoalisextendingtheapp’suserinterface. • SFSafariViewControlleralsosharescookiesandotherwebsitedatawithSafari. • Theuser’sactivityandinteractionwithaSFSafariViewControllerarenotvisibletotheapp,whichcannotaccess AutoFilldata,browsinghistory,orwebsitedata. • AccordingtotheAppStoreReviewGuidelines,SFSafariViewControllersmaynotbehiddenorobscuredbyother viewsorlayers. Thisshouldbesufficientforanappanalysisandtherefore,SFSafariViewControllersareoutofscopefortheStaticand DynamicAnalysissections. Safari Web Inspector EnablingSafariwebinspectiononiOSallowsyoutoinspectthecontentsofaWebViewremotelyfromamacOSdevice. Bydefault,youcanviewthecontentsofanypageloadedintotheSafariappbecausetheSafariapphastheget-task- 441\\nallowedentitlement. ApplicationsinstalledfromtheAppstorewillhowevernothavethisentitlement,andsocannotbe attachedto. Onjailbrokendevices,thisentitlementcanbeaddedtoanyapplicationbyinstallingtheInspectorplustweak fromtheBigBossrepo. EnablingtheSafariWebInspectorisespeciallyinterestinginapplicationsthatexposenativeAPIsusingaJavaScriptbridge, forexampleinhybridapplications. Toactivatethewebinspectionyouhavetofollowthesesteps: 1. OntheiOSdeviceopentheSettingsapp: GotoSafari->AdvancedandtoggleonWebInspector. 2. OnthemacOSdevice,openSafari: inthemenubar,gotoSafari->Preferences->AdvancedandenableShow Developmenuinmenubar. 3. Connect your iOS", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 148}}