{"text": "from User Input Derivingakeyfromauserprovidedpassphraseisacommonsolution(dependingonwhichAndroidAPIlevelyouuse), butitalsoimpactsusability,mightaffecttheattacksurfaceandcouldintroduceadditionalweaknesses. Eachtimetheapplicationneedstoperformacryptographicoperation,theuser’spassphraseisneeded. Eithertheuser ispromptedforiteverytime, whichisn’tanidealuserexperience,orthepassphraseiskeptinmemoryaslongasthe userisauthenticated. Keepingthepassphraseinmemoryisnotabest-practice,asanycryptographicmaterialmustonly bekeptinmemorywhileitisbeingused. Zeroingoutakeyisoftenaverychallengingtaskasexplainedin“Cleaningout KeyMaterial”. Additionally,considerthatkeysderivedfromapassphrasehavetheirownweaknesses. Forinstance,thepasswordsor passphrases might be reused by the user or easy to guess. Please refer to the Testing Cryptography chapter for more information. 198\\nCleaning out Key Material The key material should be cleared out from memory as soon as it is not need anymore. There are certain limitations ofreliablycleaningupsecretdatainlanguageswithgarbagecollector(Java)andimmutablestrings(Swift,Objective-C, Kotlin). Java Cryptography Architecture Reference Guide suggests using char[] instead of String for storing sensitive data,andnullifyarrayafterusage. Note that some ciphers do not properly clean up their byte-arrays. For instance, the AES Cipher in BouncyCastle does notalwayscleanupitslatestworkingkey,leavingsomecopiesofthebyte-arrayinmemory. Next,BigIntegerbasedkeys (e.g.privatekeys)cannotberemovedfromtheheap,norzeroedoutwithoutadditionaleffort. Clearingbytearraycanbe achievedbywritingawrapperwhichimplementsDestroyable. Storing Keys using Android KeyStore API A more user-friendly and recommended way is to use the Android KeyStore API system (itself or through KeyChain) to storekeymaterial. Ifitispossible, hardware-backedstorageshouldbeused. Otherwise, itshouldfallbacktosoftware implementationofAndroidKeystore. However,beawarethattheAndroidKeyStoreAPIhasbeenchangedsignificantly throughoutversionsofAndroid. Inearlierversions, theAndroidKeyStoreAPIonlysupportedstoringpublic/privatekey pairs(e.g.,RSA).SymmetrickeysupporthasonlybeenaddedsinceAndroid6.0(APIlevel23). Asaresult,adeveloper needstohandlethedifferentAndroidAPIlevelstosecurelystoresymmetrickeys. Storing keys by encrypting them with other keys InordertosecurelystoresymmetrickeysondevicesrunningonAndroid5.1(APIlevel22)orlower,weneedtogeneratea public/privatekeypair. WeencryptthesymmetrickeyusingthepublickeyandstoretheprivatekeyintheAndroidKey- Store. Theencryptedsymmetrickeycanbeencodedusingbase64andstoredintheSharedPreferences. Wheneverwe needthesymmetrickey,theapplicationretrievestheprivatekeyfromtheAndroidKeyStoreanddecryptsthesymmetric key. Envelopeencryption,orkeywrapping,isasimilarapproachthatusessymmetricencryptiontoencapsulatekeymaterial. Dataencryptionkeys(DEKs)canbeencryptedwithkeyencryptionkeys(KEKs)whicharesecurelystored. EncryptedDEKs canbestoredinSharedPreferencesorwrittentofiles. Whenrequired,theapplicationreadstheKEK,thendecryptsthe DEK.RefertoOWASPCryptographicStorageCheatSheettolearnmoreaboutencryptingcryptographickeys. Also, as the illustration of this approach, refer to the EncryptedSharedPreferences from androidx.security.crypto pack- age. Insecure options to store keys Alesssecurewayofstoringencryptionkeys,isintheSharedPreferencesofAndroid. WhenSharedPreferencesareused, thefileisonlyreadablebytheapplicationthatcreatedit. However, onrooteddevices, anyotherapplicationwithroot access can read the SharedPreferences file of other apps. This is not the case for the AndroidKeyStore, since Android- KeyStore access is managed on the kernel level, which needs considerably more work and skill to bypass without the AndroidKeyStoreclearingordestroyingthekeys. Thelastthreeoptionsaretousehardcodedencryptionkeysinthesourcecode,havingapredictableobfuscationfunction orkeyderivationfunctionbasedonstableattributes,andstoringgeneratedkeysinpublicplaceslike/sdcard/. Hardcoded encryptionkeysareanissue,sincethismeanseveryinstanceoftheapplicationusesthesameencryptionkey. Anattacker can reverse-engineer a local copy of the application to extract the cryptographic key, and use that key to decrypt any datawhichwasencryptedbytheapplicationonanydevice. Next,whenyouhaveapredictablekeyderivationfunctionbasedonidentifierswhichareaccessibletootherapplications, theattackeronlyneedstofindtheKDFandapplyittothedevicetofindthekey. Lastly,storingencryptionkeyspublicly isalsohighlydiscouraged,asotherapplicationscanhavepermissiontoreadthepublicpartitionandstealthekeys. Data Encryption Using Third Party Libraries Thereareseveraldifferentopen-sourcelibrariesthatofferencryptioncapabilitiesspecifictotheAndroidplatform. • JavaAESCrypto-AsimpleAndroidclassforencryptinganddecryptingstrings. 199\\n• SQL Cipher-SQLCipherisanopensourceextensiontoSQLitethatprovidestransparent256-bitAESencryption ofdatabasefiles. • Themis-Across-platformhigh-levelcryptographiclibrarythatprovidesthesameAPIacrossmanyplatforms,for securingdataduringauthentication,storage,messaging,etc. PleasekeepinmindthataslongasthekeyisnotstoredintheKeyStore,itisalwayspossibletoeasilyretrievethe keyonarooteddeviceandthendecryptthevaluesyouaretryingtoprotect. KeyChain The KeyChain class is used to store and retrieve system-wide private keys and their corresponding certificates (chain). The user will be prompted to set a lock screen pin or password to protect the credential storage if something is being importedintotheKeyChainforthefirsttime. NotethattheKeyChainissystem-wide, everyapplicationcanaccessthe materialsstoredintheKeyChain. InspectthesourcecodetodeterminewhethernativeAndroidmechanismsidentifysensitiveinformation. Sensitiveinfor- mationshouldbeencrypted,notstoredincleartext. Forsensitiveinformationthatmustbestoredonthedevice,several APIcallsareavailabletoprotectthedataviatheKeyChainclass. Completethefollowingsteps: • Make sure that the app is using the Android KeyStore and Cipher mechanisms to securely store encrypted infor- mationonthedevice. LookforthepatternsAndroidKeystore,import java.security.KeyStore,import javax. crypto.Cipher,import java.security.SecureRandom,andcorrespondingusages. • Usethestore(OutputStream stream, char[] password)functiontostoretheKeyStoretodiskwithapassword. Makesurethatthepasswordisprovidedbytheuser,nothard-coded. Logs Therearemanylegitimatereasonstocreatelogfilesonamobiledevice, suchaskeepingtrackofcrashes, errors, and usagestatistics. Logfilescanbestoredlocallywhentheappisofflineandsenttotheendpointoncetheappisonline. However, logging sensitive data may expose the data to attackers or malicious applications, and it might also violate userconfidentiality. Youcancreatelogfilesinseveralways. Thefollowinglistincludestwoclassesthatareavailablefor Android: • LogClass • LoggerClass Backups Android provides users with an auto-backup feature. The backups usually include copies of data and settings for all installedapps. Givenitsdiverseecosystem,Androidsupportsmanybackupoptions: • StockAndroidhasbuilt-inUSBbackupfacilities. WhenUSBdebuggingisenabled,usetheadb backupcommand tocreatefulldatabackupsandbackupsofanapp’sdatadirectory. • Googleprovidesa“BackUpMyData”featurethatbacksupallappdatatoGoogle’sservers. • TwoBackupAPIsareavailabletoappdevelopers: – Key/ValueBackup(BackupAPIorAndroidBackupService)uploadstotheAndroidBackupServicecloud. – AutoBackupforApps: WithAndroid6.0(APIlevel23)andabove, Googleaddedthe“AutoBackupforApps feature”. Thisfeatureautomaticallysyncsatmost25MBofappdatawiththeuser’sGoogleDriveaccount. • OEMsmayprovideadditionaloptions. Forexample,HTCdeviceshavea“HTCBackup”optionthatperformsdaily backupstothecloudwhenactivated. Apps must carefully ensure that sensitive user data doesn’t end within these backups as this may allow an attacker to extractit. 200\\nADB Backup Support Android provides an attribute called allowBackup to back up all your application data. This attribute is set in the AndroidManifest.xmlfile. Ifthevalueofthisattributeistrue,thedeviceallowsuserstobackuptheapplicationwith AndroidDebugBridge(ADB)viathecommand$ adb backup. Topreventtheappdatabackup,settheandroid:allowBackupattributetofalse. Whenthisattributeisunavailable,the allowBackupsettingisenabledbydefault,andbackupmustbemanuallydeactivated. Note: Ifthedevicewasencrypted,thenthebackupfileswillbeencryptedaswell. Process Memory AllapplicationsonAndroidusememorytoperformnormalcomputationaloperationslikeanyregularmodern-daycom- puter. Itisofnosurprisethenthatattimessensitiveoperationswillbeperformedwithinprocessmemory. Forthisreason, itisimportantthatoncetherelevantsensitivedatahasbeenprocessed,itshouldbedisposedfromprocessmemoryas quicklyaspossible. Theinvestigationofanapplication’smemorycanbedonefrommemorydumps,andfromanalyzingthememoryinreal timeviaadebugger. For an overview of possible", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 83}}