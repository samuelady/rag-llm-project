{"text": "forhandlingcryptographickeymaterial. Threemainmodulesareresponsibleforthis: • Hardware-backed KeyStore: This module offers cryptographic services to the Android OS and third-party apps. It enables apps to perform cryptographic sensitive operations in an TEE without exposing the cryptographic key material. • StrongBox: InAndroid9(Pie),StrongBoxwasintroduced,anotherapproachtoimplementahardware-backedKey- Store. While previous to Android 9 Pie, a hardware-backed KeyStore would be any TEE implementation that lies outside of the Android OS kernel. StrongBox is an actual complete separate hardware chip that is added to the deviceonwhichtheKeyStoreisimplementedandisclearlydefinedintheAndroiddocumentation. Youcancheck programmaticallywhetherakeyresidesinStrongBoxandifitdoes,youcanbesurethatitisprotectedbyahard- waresecuritymodulethathasitsownCPU,securestorage, andTrueRandomNumberGenerator(TRNG).Allthe sensitivecryptographicoperationshappenonthischip,inthesecureboundariesofStrongBox. • GateKeeper: TheGateKeepermoduleenablesdevicepatternandpasswordauthentication. Thesecuritysensitive operations during the authentication process happen inside the TEE that is available on the device. GateKeeper consistsofthreemaincomponents,(1)gatekeeperdwhichistheservicethatexposesGateKeeper,(2)GateKeeper HAL,whichisthehardwareinterfaceand(3)theTEEimplementationwhichistheactualsoftwarethatimplements theGateKeeperfunctionalityintheTEE. Verified Boot WeneedtohaveawaytoensurethatcodethatisbeingexecutedonAndroiddevicescomesfromatrustedsourceand thatitsintegrityisnotcompromised. Inordertoachievethis,Androidintroducedtheconceptofverifiedboot. Thegoalof verifiedbootistoestablishatrustrelationshipbetweenthehardwareandtheactualcodethatexecutesonthishardware. Duringtheverifiedbootsequence,afullchainoftrustisestablishedstartingfromthehardware-protectedRoot-of-Trust (RoT) up until the final system that is running, passing through and verifying all the required boot phases. When the Androidsystemisfinallybootedyoucanrestassuredthatthesystemisnottamperedwith. Youhavecryptographicproof thatthecodewhichisrunningistheonethatisintendedbytheOEMandnotonethathasbeenmaliciouslyoraccidentally altered. FurtherinformationisavailableintheAndroiddocumentation. Software Isolation Android Users and Groups EventhoughtheAndroidoperatingsystemisbasedonLinux,itdoesn’timplementuseraccountsinthesamewayother Unix-likesystemsdo. InAndroid,themulti-usersupportoftheLinuxkernelisusedtosandboxapps: withafewexceptions, 93\\neachapprunsasthoughunderaseparateLinuxuser,effectivelyisolatedfromotherappsandtherestoftheoperating system. Thefilesystem/core/include/private/android_filesystem_config.hincludesalistofthepredefinedusersandgroupssystem processesareassignedto. UIDs(userIDs)forotherapplicationsareaddedasthelatterareinstalled. Formoredetails, checkouttheblogpost“AnOverviewOfApplicationSandbox”byBinChenonAndroidsandboxing. Forexample,Android9.0(APIlevel28)definesthefollowingsystemusers: #defineAID_ROOT 0 /*traditionalunixrootuser*/ #... #defineAID_SYSTEM 1000 /*systemserver*/ #... #defineAID_SHELL 2000 /*adbanddebugshelluser*/ #... #defineAID_APP_START 10000 /*firstappuser*/ ... SELinux Security-EnhancedLinux(SELinux)usesaMandatoryAccessControl(MAC)systemtofurtherlockdownwhichprocesses shouldhaveaccesstowhichresources. Eachresourceisgivenalabelintheformofuser:role:type:mls_levelwhich defineswhichusersareabletoexecutewhichtypesofactionsonit. Forexample,oneprocessmayonlybeabletoread a file, while another process may be able to edit or delete the file. This way, by working on a least-privilege principle, vulnerableprocessesaremoredifficulttoexploitviaprivilegeescalationorlateralmovement. FurtherinformationisavailableontheAndroiddocumentation. Permissions Androidimplementsanextensivepermissionssystemthatisusedasanaccesscontrolmechanism. Itensurescontrolled accesstosensitiveuserdataanddeviceresources. Androidcategorizespermissionsintodifferenttypesofferingvarious protectionlevels. Prior to Android 6.0 (API level 23), all permissions an app requested were granted at installation (Install-time per- missions). FromAPIlevel23onwards,theusermustapprovesomepermissionsrequestsduringruntime(Runtime permissions). FurtherinformationisavailableintheAndroiddocumentationincludingseveralconsiderationsandbestpractices. TolearnhowtotestapppermissionsrefertotheTestingAppPermissionssectioninthe“AndroidPlatformAPIs”chapter. Network security TLS by Default Bydefault,sinceAndroid9(APIlevel28),allnetworkactivityistreatedasbeingexecutedinahostileenvironment. This means that the Android system will only allow apps to communicate over a network channel that is established using the Transport Layer Security (TLS) protocol. This protocol effectively encrypts all network traffic and creates a secure channeltoaserver. Itmaybethecasethatyouwouldwanttousecleartrafficconnectionsforlegacyreasons. Thiscan beachievedbyadaptingtheres/xml/network_security_config.xmlfileintheapplication. FurtherinformationisavailableintheAndroiddocumentation. DNS over TLS System-wideDNSoverTLSsupporthasbeenintroducedsinceAndroid9(APIlevel28). Itallowsyoutoperformqueries toDNSserversusingtheTLSprotocol. AsecurechannelisestablishedwiththeDNSserverthroughwhichtheDNSquery issent. ThisassuresthatnosensitivedataisexposedduringaDNSlookup. FurtherinformationisavailableontheAndroidDevelopersblog. 94\\nAnti-exploitation ASLR, KASLR, PIE and DEP AddressSpaceLayoutRandomization(ASLR),whichhasbeenpartofAndroidsinceAndroid4.1(APIlevel15),isastandard protectionagainstbuffer-overflowattacks,whichmakessurethatboththeapplicationandtheOSareloadedtorandom memoryaddressesmakingitdifficulttogetthecorrectaddressforaspecificmemoryregionorlibrary. InAndroid8.0(API level26),thisprotectionwasalsoimplementedforthekernel(KASLR).ASLRprotectionisonlypossibleiftheapplication canbeloadedatarandomplaceinmemory,whichisindicatedbythePositionIndependentExecutable(PIE)flagofthe application. Since Android 5.0 (API level 21), support for non-PIE enabled native libraries was dropped. Finally, Data ExecutionPrevention(DEP)preventscodeexecutiononthestackandheap,whichisalsousedtocombatbuffer-overflow exploits. FurtherinformationisavailableontheAndroidDevelopersblog. SECCOMP Filter AndroidapplicationscancontainnativecodewritteninCorC++. Thesecompiledbinariescancommunicatebothwith the Android Runtime through Java Native Interface (JNI) bindings, and with the OS through system calls. Some system calls are either not implemented, or are not supposed to be called by normal applications. As these system calls com- municatedirectlywiththekernel,theyareaprimetargetforexploitdevelopers. WithAndroid8(APIlevel26),Android hasintroducedthesupportforSecureComputing(SECCOMP)filtersforallZygotebasedprocesses(i.e.userapplications). Thesefiltersrestricttheavailablesyscallstothoseexposedthroughbionic. FurtherinformationisavailableontheAndroidDevelopersblog. Android Application Structure Communication with the Operating System Android apps interact with system services via the Android Framework, an abstraction layer that offers high-level Java APIs. ThemajorityoftheseservicesareinvokedvianormalJavamethodcallsandaretranslatedtoIPCcallstosystem servicesthatarerunninginthebackground. Examplesofsystemservicesinclude: • Connectivity(Wi-Fi,Bluetooth,NFC,etc.) • Files • Cameras • Geolocation(GPS) • Microphone Theframeworkalsoofferscommonsecurityfunctions,suchascryptography. TheAPIspecificationschangewitheverynewAndroidrelease. Criticalbugfixesandsecuritypatchesareusuallyapplied toearlierversionsaswell. NoteworthyAPIversions: • Android4.2(APIlevel16)inNovember2012(introductionofSELinux) • Android4.3(APIlevel18)inJuly2013(SELinuxbecameenabledbydefault) • Android4.4(APIlevel19)inOctober2013(severalnewAPIsandARTintroduced) • Android5.0(APIlevel21)inNovember2014(ARTusedbydefaultandmanyotherfeaturesadded) • Android 6.0 (API level 23) in October 2015 (many new features and improvements, including granting; detailed permissionssetupatruntimeratherthanallornothingduringinstallation) • Android7.0(APIlevel24-25)inAugust2016(newJITcompileronART) • Android8.0(APIlevel26-27)inAugust2017(alotofsecurityimprovements) • Android9(APIlevel28)inAugust2018(restrictionofbackgroundusageofmicorcamera,introductionoflockdown mode,defaultHTTPSforallapps) • Android 10 (API level 29)inSeptember2019(accesslocation“onlywhileusingtheapp”, devicetrackingpre- vention,improvesecureexternalstorage,) – Privacy(overview) 95\\n– Privacy(details1) – Privacy(details2) – Security(overview) – Security(details) • Android 11 (API level 30) in September 2020 (scoped storage enforcement, Permissions auto-reset, reduced packagevisibility,APKSignatureSchemev4) – Privacy(overview) – PrivacyBehaviorchanges(allapps) – SecurityBehaviorchanges(allapps) – PrivacyBehaviorchanges(appstargetingversion) – SecurityBehaviorchanges(appstargetingversion) • Android12(APIlevel31-32)inAugust2021(MaterialYou,Webintentresolution,PrivacyDashboard) – Securityandprivacy – Behaviorchanges(allapps) – Behaviorchanges(appstargetingversion) • Android13(APIlevel33)in2022(Saferexportingofcontext-registeredreceivers,newphotopicker) – Securityandprivacy – PrivacyBehaviorchanges(allapps)", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 56}}