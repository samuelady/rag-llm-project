{"text": "more complex than the above example. The increased complexity of thefunctionscanposesignificantchallengesforclassicalsymbolicexecution. Someofthechallengesaresummarised below: • Loopsandrecursionsinaprogrammayleadtoinfiniteexecutiontree. • Multipleconditionalbranchesornestedconditionsmayleadtopathexplosion. • ComplexequationsgeneratedbysymbolicexecutionmaynotbesolvablebySMTsolversbecauseoftheirlimita- tions. • Programisusingsystemcalls,librarycallsornetworkeventswhichcannotbehandledbysymbolicexecution. Toovercomethesechallenges,typically,symbolicexecutioniscombinedwithothertechniquessuchasdynamicexecution (also called concrete execution) to mitigate the path explosion problem specific to classical symbolic execution. This combinationofconcrete(actual)andsymbolicexecutionisreferredtoasconcolicexecution(thenameconcolicstems fromconcreteandsymbolic),sometimesalsocalledasdynamicsymbolicexecution. To visualize this, in the above example, we can obtain the value of the external variable by performing further reverse engineeringorbydynamicallyexecutingtheprogramandfeedingthisinformationintooursymbolicexecutionanalysis. Thisextrainformationwillreducethecomplexityofourequationsandmayproducemoreaccurateanalysisresults. To- getherwithimprovedSMTsolversandcurrenthardwarespeeds,concolicexecutionallowstoexplorepathsinmedium-size softwaremodules(i.e.,ontheorderof10KLOC). Inaddition,symbolicexecutionalsocomesinhandyforsupportingde-obfuscationtasks,suchassimplifyingcontrolflow graphs. For example, Jonathan Salwan and Romain Thomas have shown how to reverse engineer VM-based software protections using Dynamic Symbolic Execution [#salwan] (i.e., using a mix of actual execution traces, simulation, and symbolicexecution). In the Android section, you’ll find a walkthrough for cracking a simple license check in an Android application using symbolicexecution. 48\\nReferences • [#vadla]OleAndréVadlaRavnås, Anatomyofacodetracer-https://medium.com/@oleavr/anatomy-of-a-code- tracer-b081aadb0df8 • [#salwan] Jonathan Salwan and Romain Thomas, How Triton can help to reverse virtual machine based software protections-https://drive.google.com/file/d/1EzuddBA61jEMy8XbjQKFF3jyoKwW7tLq/view?usp=sharing 49\\nMobile App Authentication Architectures Authenticationandauthorizationproblemsareprevalentsecurityvulnerabilities. Infact, theyconsistentlyranksecond highestintheOWASPTop10. Mostmobileappsimplementsomekindofuserauthentication. Eventhoughpartoftheauthenticationandstatemanage- mentlogicisperformedbythebackendservice,authenticationissuchanintegralpartofmostmobileapparchitectures thatunderstandingitscommonimplementationsisimportant. SincethebasicconceptsareidenticaloniOSandAndroid,we’lldiscussprevalentauthenticationandauthorizationarchi- tecturesandpitfallsinthisgenericguide. OS-specificauthenticationissues,suchaslocalandbiometricauthentication, willbediscussedintherespectiveOS-specificchapters. General Assumptions Appropriate Authentication is in Place Performthefollowingstepswhentestingauthenticationandauthorization: • Identifytheadditionalauthenticationfactorstheappuses. • Locateallendpointsthatprovidecriticalfunctionality. • Verifythattheadditionalfactorsarestrictlyenforcedonallserver-sideendpoints. Authenticationbypassvulnerabilitiesexistwhenauthenticationstateisnotconsistentlyenforcedontheserverandwhen the client can tamper with the state. While the backend service is processing requests from the mobile client, it must consistently enforce authorization checks: verifying that the user is logged in and authorized every time a resource is requested. ConsiderthefollowingexamplefromtheOWASPWebTestingGuide. Intheexample,awebresourceisaccessedthrough aURL,andtheauthenticationstateispassedthroughaGETparameter: http://www.site.com/page.asp?authenticated=no The client can arbitrarily change the GET parameters sent with the request. Nothing prevents the client from simply changingthevalueoftheauthenticatedparameterto“yes”,effectivelybypassingauthentication. Althoughthisisasimplisticexamplethatyouprobablywon’tfindinthewild,programmerssometimesrelyon“hidden” client-side parameters, such as cookies, to maintain authentication state. They assume that these parameters can’t be tampered with. Consider, for example, the following classic vulnerability in Nortel Contact Center Manager. The administrativewebapplicationofNortel’sappliancereliedonthecookie“isAdmin”todeterminewhetherthelogged-in user should be granted administrative privileges. Consequently, it was possible to get admin access by simply setting thecookievalueasfollows: isAdmin=True Security experts used to recommend using session-based authentication and maintaining session data on the server only. Thispreventsanyformofclient-sidetamperingwiththesessionstate. However,thewholepointofusingstateless authenticationinsteadofsession-basedauthenticationistonothavesessionstateontheserver. Instead,stateisstored inclient-sidetokensandtransmittedwitheveryrequest. Inthiscase,seeingclient-sideparameterssuchasisAdminis perfectlynormal. Topreventtamperingcryptographicsignaturesareaddedtoclient-sidetokens. Ofcourse,thingsmaygowrong,andpop- ularimplementationsofstatelessauthenticationhavebeenvulnerabletoattacks. Forexample,thesignatureverification ofsomeJSONWebToken(JWT)implementationscouldbedeactivatedbysettingthesignaturetypeto“None”. 50\\nBest Practices for Passwords Passwordstrengthisakeyconcernwhenpasswordsareusedforauthentication. Thepasswordpolicydefinesrequirements to which end users should adhere. A password policy typically specifies password length, password complexity, and passwordtopologies. A“strong”passwordpolicymakesmanualorautomatedpasswordcrackingdifficultorimpossible. ForfurtherinformationpleaseconsulttheOWASPAuthenticationCheatSheet. General Guidelines on Testing Authentication There’s no one-size-fits-all approach to authentication. When reviewing the authentication architecture of an app, you shouldfirstconsiderwhethertheauthenticationmethod(s)usedareappropriateinthegivencontext. Authenticationcan bebasedononeormoreofthefollowing: • Somethingtheuserknows(password,PIN,pattern,etc.) • Somethingtheuserhas(SIMcard,one-timepasswordgenerator,orhardwaretoken) • Abiometricpropertyoftheuser(fingerprint,retina,voice) The number of authentication procedures implemented by mobile apps depends on the sensitivity of the functions or accessedresources. Refertoindustrybestpracticeswhenreviewingauthenticationfunctions. Username/passwordau- thentication (combined with a reasonable password policy) is generally considered sufficient for apps that have a user loginandaren’tverysensitive. Thisformofauthenticationisusedbymostsocialmediaapps. Forsensitiveapps,addingasecondauthenticationfactorisusuallyappropriate. Thisincludesappsthatprovideaccessto verysensitiveinformation(suchascreditcardnumbers)orallowuserstotransferfunds. Insomeindustries,theseapps mustalsocomplywithcertainstandards. Forexample,financialappshavetoensurecompliancewiththePaymentCard IndustryDataSecurityStandard(PCIDSS),theGrammLeachBlileyAct,andtheSarbanes-OxleyAct(SOX).Compliance considerationsfortheUShealthcaresectorincludetheHealthInsurancePortabilityandAccountabilityAct(HIPAA)and thePatientSafetyRule. Stateful vs. Stateless Authentication You’ll usually find that the mobile app uses HTTP as the transport layer. The HTTP protocol itself is stateless, so there must be a way to associate a user’s subsequent HTTP requests with that user. Otherwise, the user’s log in credentials wouldhavetobesentwitheveryrequest. Also,boththeserverandclientneedtokeeptrackofuserdata(e.g.,theuser’s privilegesorrole). Thiscanbedoneintwodifferentways: • Withstatefulauthentication,auniquesessionidisgeneratedwhentheuserlogsin. Insubsequentrequests,this sessionIDservesasareferencetotheuserdetailsstoredontheserver. ThesessionIDisopaque;itdoesn’tcontain anyuserdata. • With stateless authentication, all user-identifying information is stored in a client-side token. The token can be passed to any server or micro service, eliminating the need", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 43}}