{"text": "to the notifications creation, e.g.setContentTitleorsetContentTextfromNotificationCompat.Builder. Observethetraceintheendandevalu- ateifitcontainsanysensitiveinformation. Finding Sensitive Information in Auto-Generated Screenshots 265\\nPlatform: android MASVSV1: MSTG-STORAGE-9 MASVSV2: MASVS-PLATFORM-3 Overview Static Analysis A screenshot of the current activity is taken when an Android app goes into background and displayed for aesthetic purposeswhentheappreturnstotheforeground. However,thismayleaksensitiveinformation. Todeterminewhethertheapplicationmayexposesensitiveinformationviatheappswitcher,findoutwhethertheFLAG_- SECUREoptionhasbeenset. Youshouldfindsomethingsimilartothefollowingcodesnippet: ExampleinJava: getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE); setContentView(R.layout.activity_main); ExampleinKotlin: window.setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE) setContentView(R.layout.activity_main) Iftheoptionhasnotbeenset,theapplicationisvulnerabletoscreencapturing. Dynamic Analysis While black-box testing the app, navigate to any screen that contains sensitive information and click the home button tosendtheapptothebackground,thenpresstheappswitcherbuttontoseethesnapshot. Asshownbelow,ifFLAG_- SECUREisset(leftimage),thesnapshotwillbeempty;iftheflaghasnotbeenset(rightimage),activityinformationwill beshown: 266\\nOndevicessupportingfile-basedencryption(FBE),snapshotsarestoredinthe/data/system_ce/<USER_ID>/<IMAGE_- FOLDER_NAME>folder. <IMAGE_FOLDER_NAME>dependsonthevendorbutmostcommonnamesaresnapshotsandre- cent_images. Ifthedevicedoesn’tsupportFBE,the/data/system/<IMAGE_FOLDER_NAME>folderisused. Accessingthesefoldersandthesnapshotsrequiresroot. Testing for Vulnerable Implementation of PendingIntent Platform: android MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview When testing Pending Intents you must ensure that they are immutable and that the app explicitly specifies the exact package,action,andcomponentthatwillreceivethebaseintent. Static Analysis To identify vulnerable implementations, static analysis can be performed by looking for API calls used for obtaining a PendingIntent. SuchAPIsarelistedbelow: PendingIntent getActivity(Context,int,Intent,int) PendingIntent getActivity(Context,int,Intent,int,Bundle) PendingIntent getActivities(Context,int,Intent,int,Bundle) PendingIntent getActivities(Context,int,Intent,int) PendingIntent getForegroundService(Context,int,Intent,int) PendingIntent getService(Context,int,Intent,int) Onceanyoftheabovefunctionisspotted,checktheimplementationofthebaseintentandthePendingIntentforthe securitypitfallslistedinthePendingIntentssection. 267\\nForexample,inA-156959408(CVE-2020-0389),thebaseintentisimplicitandalsothePendingIntentismutable,thus makingitexploitable. private Notification createSaveNotification(Uriuri){ IntentviewIntent =newIntent(Intent.ACTION_VIEW) .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK |Intent.FLAG_GRANT_READ_URI_PERMISSION) .setDataAndType(uri,\"video/mp4\");//ImplicitIntent //...skip... Notification.Builder builder =newNotification.Builder(this,CHANNEL_ID) .setSmallIcon(R.drawable.ic_android) .setContentTitle(getResources().getString(R.string.screenrecord_name)) .setContentText(getResources().getString(R.string.screenrecord_save_message)) .setContentIntent(PendingIntent.getActivity( this, REQUEST_CODE, viewIntent, Intent.FLAG_GRANT_READ_URI_PERMISSION)) //MutablePendingIntent. .addAction(shareAction) .addAction(deleteAction) .setAutoCancel(true); Dynamic Analysis FridacanbeusedtohooktheAPIsusedtogetaPendingIntent. Thisinformationcanbeusedtodeterminethecode locationofthecall,whichcanbefurtherusedtoperformstaticanalysisasdescribedabove. Here’sanexampleofsuchaFridascriptthatcanbeusedtohookthePendingIntent.getActivityfunction: varpendingIntent =Java.use('android.app.PendingIntent'); vargetActivity_1 =pendingIntent.getActivity.overload(\"android.content.Context\",\"int\",\"android.content.Intent\",\"int\"); getActivity_1.implementation =function(context,requestCode,intent,flags){ console.log(\"[*]CallingPendingIntent.getActivity(\"+intent.getAction()+\")\"); console.log(\"\\t[-]BaseIntenttoString:\" +intent.toString()); console.log(\"\\t[-]BaseIntentgetExtras:\" +intent.getExtras()); console.log(\"\\t[-]BaseIntentgetFlags:\" +intent.getFlags()); return this.getActivity(context,requestCode,intent,flags); } Thisapproachcanbehelpfulwhendealingwithapplicationswithlargecodebases,wheredeterminingthecontrolflow cansometimesbetricky. Testing JavaScript Execution in WebViews Platform: android MASVSV1: MSTG-PLATFORM-5 MASVSV2: MASVS-PLATFORM-2 Overview TotestforJavaScriptexecutioninWebViewschecktheappforWebViewusageandevaluatewhetherornoteachWebView shouldallowJavaScriptexecution. IfJavaScriptexecutionisrequiredfortheapptofunctionnormally,thenyouneedto ensurethattheappfollowstheallbestpractices. Static Analysis TocreateanduseaWebView,anappmustcreateaninstanceoftheWebViewclass. 268\\nWebViewwebview =newWebView(this); setContentView(webview); webview.loadUrl(\"https://www.owasp.org/\"); Various settings can be applied to the WebView (activating/deactivating JavaScript is one example). JavaScript is dis- abledbydefaultforWebViewsandmustbeexplicitlyenabled. LookforthemethodsetJavaScriptEnabledtocheckfor JavaScriptactivation. webview.getSettings().setJavaScriptEnabled(true); ThisallowstheWebViewtointerpretJavaScript. Itshouldbeenabledonlyifnecessarytoreducetheattacksurfacetothe app. IfJavaScriptisnecessary,youshouldmakesurethat • The communication to the endpoints consistently relies on HTTPS (or other protocols that allow encryption) to protectHTMLandJavaScriptfromtamperingduringtransmission. • JavaScriptandHTMLareloadedlocally,fromwithintheappdatadirectoryorfromtrustedwebserversonly. • The user cannot define which sources to load by means of loading different resources based on a user provided input. ToremoveallJavaScriptsourcecodeandlocallystoreddata,cleartheWebView’scachewithclearCachewhentheapp closes. DevicesrunningplatformsolderthanAndroid4.4(APIlevel19)useaversionofWebKitthathasseveralsecurityissues. As aworkaround,theappmustconfirmthatWebViewobjectsdisplayonlytrustedcontentiftheapprunsonthesedevices. Dynamic Analysis DynamicAnalysisdependsonoperatingconditions. ThereareseveralwaystoinjectJavaScriptintoanapp’sWebView: • StoredCross-SiteScriptingvulnerabilitiesinanendpoint;theexploitwillbesenttothemobileapp’sWebViewwhen theusernavigatestothevulnerablefunction. • Attackertakesaman-in-the-middle(MITM)positionandtamperswiththeresponsebyinjectingJavaScript. • MalwaretamperingwithlocalfilesthatareloadedbytheWebView. Toaddresstheseattackvectors,checkthefollowing: • AllfunctionsofferedbytheendpointshouldbefreeofstoredXSS. • OnlyfilesthatareintheappdatadirectoryshouldberenderedinaWebView(seetestcase“TestingforLocalFile InclusioninWebViews”). • TheHTTPScommunicationmustbeimplementedaccordingtobestpracticestoavoidMITMattacks. Thismeans: – allcommunicationisencryptedviaTLS, – thecertificateischeckedproperly,and/or – thecertificateshouldbepinned. Testing for Sensitive Functionality Exposure Through IPC Platform: android MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview TotestforsensitivefunctionalityexposurethroughIPCmechanismsyoushouldfirstenumeratealltheIPCmechanisms theappusesandthentrytoidentifywhethersensitivedataisleakedwhenthemechanismsareused. 269\\nStatic Analysis WestartbylookingattheAndroidManifest.xml,whereallactivities,services,andcontentprovidersincludedintheapp mustbedeclared(otherwisethesystemwon’trecognizethemandtheywon’trun). • <intent-filter> • <service> • <provider> • <receiver> An “exported” activity, service, or content can be accessed by other apps. There are two common ways to designate a component as exported. The obvious one is setting the export tag to true android:exported=\"true\". The second wayinvolvesdefiningan<intent-filter>withinthecomponentelement(<activity>,<service>,<receiver>). When this is done, the export tag is automatically set to “true”. To prevent all other Android apps from interacting with the IPC component element, be sure that the android:exported=\"true\" value and an <intent-filter> aren’t in their AndroidManifest.xmlfilesunlessthisisnecessary. Rememberthatusingthepermissiontag(android:permission)willalsolimitotherapplications’accesstoacomponent. If your IPC is intended to be accessible to other applications, you can apply a security policy with the <permission> elementandsetaproperandroid:protectionLevel. Whenandroid:permissionisusedinaservicedeclaration,other applications must declare a corresponding<uses-permission> element in their own manifest to start, stop, or bind to theservice. Formoreinformationaboutthecontentproviders,pleaserefertothetestcase“TestingWhetherStoredSensitiveDataIs ExposedviaIPCMechanisms”inchapter“TestingDataStorage”. Once you identify a list of IPC mechanisms, review the source code to see whether sensitive data is leaked when the mechanismsareused. Forexample,contentproviderscanbeusedtoaccessdatabaseinformation,andservicescanbe probedtoseeiftheyreturndata. Broadcastreceiverscanleaksensitiveinformationifprobedorsniffed. Inthefollowing,weusetwoexampleappsandgiveexamplesofidentifyingvulnerableIPCcomponents: • “Sieve” • “AndroidInsecureBank” Activities Inspect", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 102}}