{"text": "how thiscanwork. Magisk 534\\nPlatform: android Magisk (“Magic Mask”) is one way to root your Android device. It’s specialty lies in the way the modifications on the systemareperformed. Whileotherrootingtoolsaltertheactualdataonthesystempartition,Magiskdoesnot(whichis called“systemless”). Thisenablesa waytohidethemodificationsfromroot-sensitiveapplications (e.g.forbankingor games)andallowsusingtheofficialAndroidOTAupgradeswithouttheneedtounrootthedevicebeforehand. YoucangetfamiliarwithMagiskreadingtheofficialdocumentationonGitHub. Ifyoudon’thaveMagiskinstalled,youcan findinstallationinstructionsinthedocumentation. IfyouuseanofficialAndroidversionandplantoupgradeit,Magisk providesatutorialonGitHub. LearnmoreaboutrootingyourdevicewithMagisk. FlowDroid Platform: android Availableat: https://github.com/secure-software-engineering/FlowDroid FlowDroid is an open-source tool based in soot, a framework dedicated to analyzing and translating Java bytecode for easier analysis. The tool handles the nuances of Android app lifecycles (like onCreate, onStart, onPause, and others) anditsUIcomponentsduringanalysisandperformstaintanalysisthatis: • Context-sensitive: Distinguishingbetweencallstothesamemethodbasedontheirspecificexecutioncontexts. • Object-sensitive: Identifyingindividualobjects,evenwhenthey’reofthesameclass. • Flow-sensitive: Recognizingthesequentialorderofcodeexecution. FlowDroidcanbeusedintwoways: asastandalonecommandlinetoolforquickanalysesorasalibraryformorecomplex investigations. Inadditiontoperformingtaintanalysis,FlowDroidcanalsogeneratecallgraphs,asillustratedinthisblog post. jdb Platform: android A Java Debugger which allows to set breakpoints and print application variables. jdb uses the JDWP protocol - https: //docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html APKLab Platform: android Availableat: https://github.com/APKLab/APKLab APKLabisaconvenientVisualStudioCodeextensionleveragingtoolssuchasapktoolandjadxtoenablefeaturesincluding appunpacking,decompilation,codepatching(e.g.forMITM),andrepackagingstraightfromtheIDE. Formoreinformation,youcanrefertoAPKLab’sofficialdocumentation. Busybox Platform: android Busybox combines multiple common Unix utilities into a small single executable. The utilities included generally have feweroptionsthantheirfull-featuredGNUcounterparts,butaresufficientenoughtoprovideacompleteenvironmenton asmallorembeddedsystem. BusyboxcanbeinstalledonarooteddevicebydownloadingtheBusyboxapplicationfrom GooglePlayStore. YoucanalsodownloadthebinarydirectlyfromtheBusyboxwebsite. Oncedownloaded,makeanadb push busybox /data/local/tmptohavetheexecutableavailableonyourphone. Aquickoverviewofhowtoinstalland useBusyboxcanbefoundintheBusyboxFAQ. 535\\nProguard Platform: android ProGuardisafreeJavaclassfileshrinker,optimizer,obfuscator,andpreverifier. Itdetectsandremovesunusedclasses, fields,methods,andattributesandcanalsobeusedtodeletelogging-relatedcode. MobSF for Android Platform: android Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF AfterMobSFisdonewithitsanalysis,youwillreceiveaone-pageoverviewofalltheteststhatwereexecuted. Thepage issplitupintomultiplesectionsgivingsomefirsthintsontheattacksurfaceoftheapplication. Thefollowingisdisplayed: • Basicinformationabouttheappanditsbinaryfile. • Someoptionsto: – ViewtheAndroidManifest.xmlfile. – ViewtheIPCcomponentsoftheapp. • Signercertificate. • Apppermissions. • Asecurityanalysisshowingknowndefectse.g.iftheappbackupsareenabled. • ListoflibrariesusedbytheappbinaryandlistofallfilesinsidetheunzippedAPK. • MalwareanalysisthatchecksformaliciousURLs. RefertoMobSFdocumentationformoredetails. Bytecode Viewer Platform: android Bytecode Viewer (BCV) is a free and open source Java decompiler framework running on all operating systems. It is a versatiletoolwhichcanbeusedtodecompileAndroidapps, viewAPKresources(viaapktool)andeasilyeditAPKs(via Smali/Baksmali). Apart from APKs, also DEX, Java Class files and Java Jars can be viewed. One of its major features is 536\\nthesupportformultipleJavabytecodedecompilersunderoneGUI.BCVcurrentlyincludestheProcyon,CFR,Fernflower, Krakatau, and JADX-Core decompilers. These decompilers have different strengths and can be easily leveraged while usingBCV,especiallywhendealingwithobfuscatedprograms. radare2 for Android Platform: android Availableat: https://github.com/radare/radare2 radare2 (r2) is a popular open source reverse engineering framework for disassembling, debugging, patching and ana- lyzingbinaries that isscriptable and supports manyarchitecturesand file formatsincluding Androidand iOS apps. For Android, DalvikDEX(odex, multidex), ELF(executables, .so, ART)andJava(JNIandJavaclasses)aresupported. Italso containsseveralusefulscriptsthatcanhelpyouduringmobileapplicationanalysisasitofferslowleveldisassembling andsafestaticanalysisthatcomesinhandywhentraditionaltoolsfail. radare2implementsarichcommandlineinterface(CLI)whereyoucanperformthementionedtasks. However,ifyou’re notreallycomfortableusingtheCLIforreverseengineeringyoumaywanttoconsiderusingtheWebUI(viathe-Hflag) ortheevenmoreconvenientQtandC++GUIversioncallediaito. DokeepinmindthattheCLI,andmoreconcretelyits VisualModeanditsscriptingcapabilities(r2pipe),arethecoreofradare2’spowerandit’sdefinitelyworthlearninghow touseit. Installing radare2 Pleaserefertoradare2’sofficialinstallationinstructions. Wehighlyrecommendtoalwaysinstallradare2fromtheGitHub versioninsteadofviacommonpackagemanagerssuchasAPT.Radare2isinveryactivedevelopment,whichmeansthat thirdpartyrepositoriesareoftenoutdated. Using radare2 Theradare2frameworkcomprisesasetofsmallutilitiesthatcanbeusedfromther2shellorindependentlyasCLItools. Theseutilitiesincluderabin2,rasm2,rahash2,radiff2,rafind2,ragg2,rarun2,rax2,andofcourser2,whichisthe mainone. Forexample,youcanuserafind2toreadstringsdirectlyfromanencodedAndroidManifest(AndroidManifest.xml): ##Permissions $rafind2 -ZSpermissionAndroidManifest.xml ##Activities $rafind2 -ZSactivityAndroidManifest.xml ##Contentproviders $rafind2 -ZSproviderAndroidManifest.xml ##Services $rafind2 -ZSserviceAndroidManifest.xml ##Receivers $rafind2 -ZSreceiverAndroidManifest.xml Oruserabin2togetinformationaboutabinaryfile: $rabin2 -IUnCrackable-Level1/classes.dex arch dalvik baddr 0x0 binsz 5528 bintype class bits 32 canary false retguardfalse class 035 crypto false endian little havecodetrue laddr 0x0 lang dalvik linenum false lsyms false 537\\nmachine DalvikVM maxopsz 16 minopsz 1 nx false os linux pcalign 0 pic false relocs false sanitiz false static true strippedfalse subsys java va true sha1 12-5508c b7fafe72cb521450c4470043caa332da61d1bec7 adler32 12-5528c 00000000 Typerabin2 -htoseealloptions: $rabin2 -h Usage:rabin2 [-AcdeEghHiIjlLMqrRsSUvVxzZ][-@at][-aarch][-bbits][-Baddr] [-CF:C:D][-fstr][-maddr][-nstr][-Nm:M][-P[-P]pdb] [-ostr][-Ostr][-kquery][-Dlangsymname]file -@[addr] showsection,symbolorimportataddr -A listsub-binariesandtheirarch-bitspairs -a[arch] setarch (x86,arm,..or <arch>_<bits>) -b[bits] setbits (32,64...) -B[addr] overridebaseaddress (piebins) -c listclasses -cc listclassesinheaderformat -H headerfields -i imports (symbolsimportedfromlibraries) -I binaryinfo -j outputinjson ... Usethemainr2utilitytoaccessther2shell. YoucanloadDEXbinariesjustlikeanyotherbinary: r2classes.dex Enter r2 -h to see all available options. A very commonly used flag is -A, which triggers an analysis after loading the targetbinary. However,thisshouldbeusedsparinglyandwithsmallbinariesasitisverytimeandresourceconsuming. Youcanlearnmoreaboutthisinthechapter“TamperingandReverseEngineeringonAndroid”. Onceinther2shell,youcanalsoaccessfunctionsofferedbytheotherradare2utilities. Forexample,runningiwillprint theinformationofthebinary,exactlyasrabin2 -Idoes. Toprintallthestringsuserabin2 -Zorthecommandiz(orthelessverboseizq)fromther2shell. [0x000009c8]>izq 0xc503939/dev/com.koushikdutta.superuser.daemon/ 0xc792525/system/app/Superuser.apk ... 0xd2344445UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc= 0xd5132328d127684cbc37c17616d806cf50473cc 0xd7666 <init> 0xd831010AESerror: 0xd8f2020AES/ECB/PKCS7Padding 0xda51818Appisdebuggable! 0xdc099CodeCheck 0x11ac77Nope... 0x11bf1414Rootdetected! Mostofthetimeyoucanappendspecialoptionstoyourcommandssuchasqtomakethecommandlessverbose(quiet) orjtogivetheoutputinJSONformat(use~{}toprettifytheJSONstring). [0x000009c8]>izj~{} [ { \"vaddr\":3152, \"paddr\": 3152, \"ordinal\":1, \"size\":39, \"length\":39, \"section\":\"file\", \"type\":\"ascii\", \"string\":\"L2Rldi9jb20ua291c2hpa2R1dHRhLnN1cGVydXNlci5kYWVtb24v\" }, 538\\n{ \"vaddr\":3193, \"paddr\":3193, \"ordinal\":2, \"size\":25, \"length\":25,", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 171}}