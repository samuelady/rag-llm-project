{"text": "not be enough. Having proper API-lifecycle managementiskeyhere. Similarly,whenauserisnotforcedtoupdate,donotforgettotestolderversionsofyourapp againstyourAPIand/oruseproperAPIversioning. Testing WebView Protocol Handlers Platform: android MASVSV1: MSTG-PLATFORM-6 MASVSV2: MASVS-PLATFORM-2 Overview TotestforWebViewprotocolhandlerschecktheappforWebViewusageandevaluatewhetherornottheWebViewshould haveresourceaccess. Ifresourceaccessisnecessaryyouneedtoverifythatit’simplementedfollowingbestpractices. Static Analysis CheckthesourcecodeforWebViewusage. ThefollowingWebViewsettingscontrolresourceaccess: • setAllowContentAccess: ContentURLaccessallowsWebViewstoloadcontentfromacontentproviderinstalled onthesystem,whichisenabledbydefault. • setAllowFileAccess: EnablesanddisablesfileaccesswithinaWebView. Thedefaultvalueistruewhentargeting Android10(APIlevel29)andbelowandfalseforAndroid11(APIlevel30)andabove. Notethatthisenablesand disablesfilesystemaccessonly. Assetandresourceaccessisunaffectedandaccessibleviafile:///android_- assetandfile:///android_res. • setAllowFileAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafileschemeURL toaccesscontentfromotherfileschemeURLs. ThedefaultvalueistrueforAndroid4.0.3-4.0.4(APIlevel15)and belowandfalseforAndroid4.1(APIlevel16)andabove. • setAllowUniversalAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafilescheme URLtoaccesscontentfromanyorigin. ThedefaultvalueistrueforAndroid4.0.3-4.0.4(APIlevel15)andbelow andfalseforAndroid4.1(APIlevel16)andabove. Ifoneormoreoftheabovemethodsis/areactivated,youshoulddeterminewhetherthemethod(s)is/arereallynecessary fortheapptoworkproperly. IfaWebViewinstancecanbeidentified,findoutwhetherlocalfilesareloadedwiththeloadURLmethod. WebView =newWebView(this); webView.loadUrl(\"file:///android_asset/filename.html\"); ThelocationfromwhichtheHTMLfileisloadedmustbeverified. Ifthefileisloadedfromexternalstorage,forexample, thefileisreadableandwritablebyeveryone. Thisisconsideredabadpractice. Instead,thefileshouldbeplacedinthe app’sassetsdirectory. webview.loadUrl(\"file:///\" + Environment.getExternalStorageDirectory().getPath()+ \"filename.html\"); The URL specified in loadURL should be checked for dynamic parameters that can be manipulated; their manipulation mayleadtolocalfileinclusion. Usethefollowingcodesnippetandbestpracticestodeactivateprotocolhandlers,ifapplicable: 258\\n//IfattackerscaninjectscriptintoaWebView,theycouldaccesslocalresources.Thiscanbepreventedbydisablinglocalfilesystemaccess,whichisenabled ↪ bydefault.YoucanusetheAndroidWebSettingsclasstodisablelocalfilesystemaccessviathepublicmethod`setAllowFileAccess`. webView.getSettings().setAllowFileAccess(false); webView.getSettings().setAllowFileAccessFromFileURLs(false); webView.getSettings().setAllowUniversalAccessFromFileURLs(false); webView.getSettings().setAllowContentAccess(false); • Createalistthatdefineslocalandremotewebpagesandprotocolsthatareallowedtobeloaded. • CreatechecksumsofthelocalHTML/JavaScriptfilesandcheckthemwhiletheappisstartingup. MinifyJavaScript filestomakethemhardertoread. Dynamic Analysis Toidentifytheusageofprotocolhandlers,lookforwaystotriggerphonecallsandwaystoaccessfilesfromthefilesystem whileyou’reusingtheapp. Testing for Overlay Attacks Platform: android MASVSV1: MSTG-PLATFORM-9 MASVSV2: MASVS-PLATFORM-3 Overview To test for overlay attacks you need to check the app for usage of certain APIs and attributed typically used to protect againstoverlayattacksaswellaschecktheAndroidversionthatappistargeting. TomitigatetheseattackspleasecarefullyreadthegeneralguidelinesaboutAndroidViewsecurityintheAndroidDeveloper Documentation. Forinstance,theso-calledtouchfilteringisacommondefenseagainsttapjacking,whichcontributesto safeguardingusersagainstthesevulnerabilities,usuallyincombinationwithothertechniquesandconsiderationsaswe introduceinthissection. Static Analysis Tostartyourstaticanalysisyoucanchecktheappforthefollowingmethodsandattributes(non-exhaustivelist): • OverrideonFilterTouchEventForSecurityformorefine-grainedcontrolandtoimplementacustomsecuritypolicy forviews. • Setthelayoutattributeandroid:filterTouchesWhenObscuredtotrueorcallsetFilterTouchesWhenObscured. • Check FLAG_WINDOW_IS_OBSCURED (since API level 9) or FLAG_WINDOW_IS_PARTIALLY_OBSCURED (starting on APIlevel29). Someattributesmightaffecttheappasawhole,whileotherscanbeappliedtospecificcomponents. Thelatterwould bethecasewhen,forexample,thereisabusinessneedtospecificallyallowoverlayswhilewantingtoprotectsensitive inputUIelements. Thedevelopersmightalsotakeadditionalprecautionstoconfirmtheuser’sactualintentwhichmight belegitimateandtellitapartfromapotentialattack. Asafinalnote,alwaysremembertoproperlychecktheAPIlevelthatappistargetingandtheimplicationsthatthishas. Forinstance,Android8.0(APIlevel26)introducedchangestoappsrequiringSYSTEM_ALERT_WINDOW(“drawontop”). From thisAPIlevelon,appsusingTYPE_APPLICATION_OVERLAYwillbealwaysshownaboveotherwindowshavingothertypes such as TYPE_SYSTEM_OVERLAY or TYPE_SYSTEM_ALERT. You can use this information to ensure that no overlay attacks mayoccuratleastforthisappinthisconcreteAndroidversion. 259\\nDynamic Analysis Abusingthiskindofvulnerabilityonadynamicmannercanbeprettychallengingandveryspecializedasitcloselydepends onthetargetAndroidversion. Forinstance,forversionsuptoAndroid7.0(APIlevel24)youcanusethefollowingAPKs asaproofofconcepttoidentifytheexistenceofthevulnerabilities. • TapjackingPOC:ThisAPKcreatesasimpleoverlaywhichsitsontopofthetestingapplication. • Invisible Keyboard: This APK creates multiple overlays on the keyboard to capture keystrokes. This is one of the exploitdemonstratedinCloakandDaggerattacks. Testing WebViews Cleanup Platform: android MASVSV1: MSTG-PLATFORM-10 MASVSV2: MASVS-PLATFORM-2 Overview TotestforWebViewscleanupyoushouldinspectallAPIsrelatedtoWebViewdatadeletionandtrytofullytrackthedata deletionprocess. Static Analysis StartbyidentifyingtheusageofthefollowingWebViewAPIsandcarefullyvalidatethementionedbestpractices. • Initialization: an app might be initializing the WebView in a way to avoid storing certain information by using setDomStorageEnabled,setAppCacheEnabledorsetDatabaseEnabledfromandroid.webkit.WebSettings. The DOMStorage(forusingtheHTML5localstorage),ApplicationCachesandDatabaseStorageAPIsaredisabledby default,butappsmightsetthesesettingsexplicitlyto“true”. • Cache: Android’sWebViewclassofferstheclearCachemethodwhichcanbeusedtoclearthecacheforallWe- bViews used by the app. It receives a boolean input parameter (includeDiskFiles) which will wipe all stored resource including the RAM cache. However if it’s set to false, it will only clear the RAM cache. Check the app for usage of the clearCache method and verify its input parameter. Additionally, you may also check if the app isoverridingonRenderProcessUnresponsiveforthecasewhentheWebViewmightbecomeunresponsive,asthe clearCachemethodmightalsobecalledfromthere. • WebStorageAPIs: WebStorage.deleteAllDatacanbealsousedtoclearallstoragecurrentlybeingusedbythe JavaScriptstorageAPIs,includingtheWebSQLDatabaseandtheHTML5WebStorageAPIs. >Someappswillneed toenabletheDOMstorageinordertodisplaysomeHTML5sitesthatuselocalstorage. Thisshouldbecarefully investigatedasthismightcontainsensitivedata. • Cookies: anyexistingcookiescanbedeletedbyusingCookieManager.removeAllCookies. • FileAPIs: properdatadeletionincertaindirectoriesmightnotbethatstraightforward,someappsuseapragmatic solution which is to manually delete selected directories known to hold user data. This can be done using the java.io.FileAPIsuchasjava.io.File.deleteRecursively. Example: ThisexampleinKotlinfromtheopensourceFirefoxFocusappshowsdifferentcleanupsteps: overridefun cleanup(){ clearFormData()//Removestheautocompletepopupfromthecurrentlyfocusedformfield,ifpresent.Notethisonlyaffectsthedisplayof theautocomplete ↪ popup,itdoesnotremoveanysavedformdatafromthisWebView'sstore.Todothat,useWebViewDatabase#clearFormData. clearHistory() clearMatches() clearSslPreferences() clearCache(true) CookieManager.getInstance().removeAllCookies(null) 260\\nWebStorage.getInstance().deleteAllData()//ClearsallstoragecurrentlybeingusedbytheJavaScriptstorageAPIs.ThisincludestheApplicationCache,Web ↪ SQLDatabaseandtheHTML5WebStorageAPIs. valwebViewDatabase =WebViewDatabase.getInstance(context) //Itisn'tentirelyclearhowthisdiffersfromWebView.clearFormData() @Suppress(\"DEPRECATION\") webViewDatabase.clearFormData()//Clearsanysaveddataforwebforms. webViewDatabase.clearHttpAuthUsernamePassword() deleteContentFromKnownLocations(context)//callsFileUtils.deleteWebViewDirectory(context)whichdeletesallcontentin\"app_webview\". } ThefunctionfinisheswithsomeextramanualfiledeletionindeleteContentFromKnownLocationswhichcallsfunctions fromFileUtils. Thesefunctionsusethejava.io.File.deleteRecursivelymethodtorecursivelydeletefilesfromthe specifieddirectories. private fundeleteContent(directory:File,doNotEraseWhitelist:Set<String>= emptySet()): Boolean { valfilesToDelete =directory.listFiles()?.filter {!doNotEraseWhitelist.contains(it.name)}?:return false return filesToDelete.all{it.deleteRecursively()} } Dynamic Analysis OpenaWebViewaccessingsensitivedataandthenlogoutoftheapplication. Accesstheapplication’sstoragecontainer andmakesureallWebViewrelatedfilesaredeleted. ThefollowingfilesandfoldersaretypicallyrelatedtoWebViews: • app_webview • Cookies • pref_store • blob_storage • SessionStorage • WebData • ServiceWorker Testing for App Permissions Platform: android MASVSV1: MSTG-PLATFORM-1 MASVSV2: MASVS-PLATFORM-1 Overview Whentestingapppermissionsthegoalistotryandreducetheamountofpermissionsusedbyyourapptotheabsolute minimum. Whilegoingthrougheachpermission,rememberthatitisbestpracticefirsttotryandevaluatewhetheryour appneedstousethispermissionbecausemanyfunctionalitiessuchastakingaphotocanbedonewithout,limitingthe amount of access to sensitive data. If permissions are required you will then make sure that the request/response to accessthepermissionishandledhandledcorrectly. Static Analysis Android Permissions Check permissions to make sure that the app really needs them and remove unnecessary permissions. For example, theINTERNETpermissionintheAndroidManifest.xmlfileisnecessaryforanActivitytoloadawebpageintoaWebView. Becauseausercanrevokeanapplication’srighttouseadangerouspermission,thedevelopershouldcheckwhetherthe applicationhastheappropriatepermissioneachtimeanactionisperformedthatwouldrequirethatpermission. 261\\n<uses-permission android:name=\"android.permission.INTERNET\" /> Gothroughthepermissionswiththedevelopertoidentifythepurposeofeverypermissionsetandremoveunnecessary permissions. BesidesgoingthroughtheAndroidManifest.xmlfilemanually, youcanalsousetheAndroidAssetPackagingtool(aapt) toexaminethepermissionsofanAPKfile. aaptcomeswiththeAndroidSDKwithinthebuild-toolsfolder. ItrequiresanAPKfileasinput. YoumaylisttheAPKs inthedevicebyrunningadb shell pm list packages -f | grep -i <keyword>asseenin“ListingInstalledApps”. $aaptdpermissionsapp-x86-debug.apk package:sg.vp.owasp_mobile.omtg_android uses-permission:name='android.permission.WRITE_EXTERNAL_STORAGE' uses-permission:name='android.permission.INTERNET' Alternativelyyoumayobtainamoredetailedlistofpermissionsviaadbandthedumpsystool: $adbshelldumpsyspackagesg.vp.owasp_mobile.omtg_android |grep permission", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 100}}