{"text": "must declare a corresponding<uses-permission> element in their own manifest to start, stop, or bind to theservice. Formoreinformationaboutthecontentproviders,pleaserefertothetestcase“TestingWhetherStoredSensitiveDataIs ExposedviaIPCMechanisms”inchapter“TestingDataStorage”. Once you identify a list of IPC mechanisms, review the source code to see whether sensitive data is leaked when the mechanismsareused. Forexample,contentproviderscanbeusedtoaccessdatabaseinformation,andservicescanbe probedtoseeiftheyreturndata. Broadcastreceiverscanleaksensitiveinformationifprobedorsniffed. Inthefollowing,weusetwoexampleappsandgiveexamplesofidentifyingvulnerableIPCcomponents: • “Sieve” • “AndroidInsecureBank” Activities Inspect the AndroidManifest Inthe“Sieve”app,wefindthreeexportedactivities,identifiedby<activity>: <activity android:excludeFromRecents=\"true\" android:label=\"@string/app_name\" android:launchMode=\"singleTask\" android:name=\".MainLoginActivity\" ↪ android:windowSoftInputMode=\"adjustResize|stateVisible\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\" /> <category android:name=\"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> <activity android:clearTaskOnLaunch=\"true\" android:excludeFromRecents=\"true\" android:exported=\"true\" android:finishOnTaskLaunch=\"true\" ↪ android:label=\"@string/title_activity_file_select\" android:name=\".FileSelectActivity\" /> <activity android:clearTaskOnLaunch=\"true\" android:excludeFromRecents=\"true\" android:exported=\"true\" android:finishOnTaskLaunch=\"true\" ↪ android:label=\"@string/title_activity_pwlist\" android:name=\".PWList\" /> Inspect the Source Code ByinspectingthePWList.javaactivity,weseethatitoffersoptionstolistallkeys,add,delete,etc. Ifweinvokeitdirectly, wewillbeabletobypasstheLoginActivity. Moreonthiscanbefoundinthedynamicanalysisbelow. Services 270\\nInspect the AndroidManifest Inthe“Sieve”app,wefindtwoexportedservices,identifiedby<service>: <service android:exported=\"true\" android:name=\".AuthService\" android:process=\":remote\" /> <service android:exported=\"true\" android:name=\".CryptoService\" android:process=\":remote\" /> Inspect the Source Code Checkthesourcecodefortheclassandroid.app.Service: By reversing the target application, we can see that the service AuthService provides functionality for changing the passwordandPIN-protectingthetargetapp. public void handleMessage(Messagemsg){ AuthService.this.responseHandler =msg.replyTo; BundlereturnBundle =msg.obj; intresponseCode; intreturnVal; switch (msg.what){ ... case AuthService.MSG_SET /*6345*/: if(msg.arg1 ==AuthService.TYPE_KEY)/*7452*/ { responseCode =42; if(AuthService.this.setKey(returnBundle.getString(\"com.mwr.example.sieve.PASSWORD\"))){ returnVal =0; }else { returnVal =1; } }else if(msg.arg1 ==AuthService.TYPE_PIN){ responseCode =41; if(AuthService.this.setPin(returnBundle.getString(\"com.mwr.example.sieve.PIN\"))){ returnVal =0; }else { returnVal =1; } }else { sendUnrecognisedMessage(); return; } } } Broadcast Receivers Inspect the AndroidManifest Inthe“AndroidInsecureBank”app,wefindabroadcastreceiverinthemanifest,identifiedby<receiver>: <receiver android:exported=\"true\" android:name=\"com.android.insecurebankv2.MyBroadCastReceiver\"> <intent-filter> <action android:name=\"theBroadcast\" /> </intent-filter> </receiver> Inspect the Source Code SearchthesourcecodeforstringslikesendBroadcast,sendOrderedBroadcast,andsendStickyBroadcast. Makesure thattheapplicationdoesn’tsendanysensitivedata. IfanIntentisbroadcastedandreceivedwithintheapplicationonly,LocalBroadcastManagercanbeusedtopreventother appsfromreceivingthebroadcastmessage. Thisreducestheriskofleakingsensitiveinformation. Tounderstandmoreaboutwhatthereceiverisintendedtodo,wehavetogodeeperinourstaticanalysisandsearchfor usage of the class android.content.BroadcastReceiver and the Context.registerReceiver method, which is used todynamicallycreatereceivers. Thefollowingextractofthetargetapplication’ssourcecodeshowsthatthebroadcastreceivertriggerstransmissionof anSMSmessagecontainingtheuser’sdecryptedpassword. 271\\npublic class MyBroadCastReceiver extends BroadcastReceiver { StringusernameBase64ByteString; public static final StringMYPREFS =\"mySharedPreferences\"; @Override public void onReceive(Contextcontext,Intentintent){ //TODO Auto-generatedmethodstub Stringphn =intent.getStringExtra(\"phonenumber\"); Stringnewpass =intent.getStringExtra(\"newpass\"); if(phn!=null){ try{ SharedPreferencessettings =context.getSharedPreferences(MYPREFS,Context.MODE_WORLD_READABLE); final Stringusername =settings.getString(\"EncryptedUsername\",null); byte[]usernameBase64Byte =Base64.decode(username,Base64.DEFAULT); usernameBase64ByteString =newString(usernameBase64Byte,\"UTF-8\"); final Stringpassword =settings.getString(\"superSecurePassword\",null); CryptoClasscrypt =newCryptoClass(); StringdecryptedPassword =crypt.aesDeccryptedString(password); StringtextPhoneno =phn.toString(); StringtextMessage =\"UpdatedPasswordfrom:\"+decryptedPassword+\"to: \"+newpass; SmsManagersmsManager =SmsManager.getDefault(); System.out.println(\"Forthechangepassword-phonenumber:\"+textPhoneno+\"password is:\"+textMessage); smsManager.sendTextMessage(textPhoneno,null,textMessage,null,null); } } } } BroadcastReceiversshouldusetheandroid:permissionattribute; otherwise, otherapplicationscaninvokethem. You canuseContext.sendBroadcast(intent, receiverPermission);tospecifypermissionsareceivermusthavetoread thebroadcast. YoucanalsosetanexplicitapplicationpackagenamethatlimitsthecomponentsthisIntentwillresolve to. Ifleftasthedefaultvalue(null),allcomponentsinallapplicationswillbeconsidered. Ifnon-null,theIntentcanmatch onlythecomponentsinthegivenapplicationpackage. Dynamic Analysis YoucanenumerateIPCcomponentswithMobSF.TolistallexportedIPCcomponents,uploadtheAPKfileandthecompo- nentscollectionwillbedisplayedinthefollowingscreen: Content Providers The “Sieve” application implements a vulnerable content provider. To list the content providers exported by the Sieve app,executethefollowingcommand: $adbshelldumpsyspackagecom.mwr.example.sieve |grep -Po\"Provider{[\\w\\d\\s\\./]+}\" |sort -u Provider{34a20d5com.mwr.example.sieve/.FileBackupProvider} Provider{64f10eacom.mwr.example.sieve/.DBContentProvider} Once identified, you can use jadx to reverse engineer the app and analyze the source code of the exported content providerstoidentifypotentialvulnerabilities. Toidentifythecorrespondingclassofacontentprovider,usethefollowinginformation: 272\\n• PackageName: com.mwr.example.sieve. • ContentProviderClassName: DBContentProvider. Whenanalyzingtheclasscom.mwr.example.sieve.DBContentProvider,you’llseethatitcontainsseveralURIs: package com.mwr.example.sieve; ... public class DBContentProvider extends ContentProvider { public static final UriKEYS_URI =Uri.parse(\"content://com.mwr.example.sieve.DBContentProvider/Keys\"); public static final UriPASSWORDS_URI =Uri.parse(\"content://com.mwr.example.sieve.DBContentProvider/Passwords\"); ... } UsethefollowingcommandstocallthecontentproviderusingtheidentifiedURIs: $adbshellcontentquery --uri content://com.mwr.example.sieve.DBContentProvider/Keys/ Row:0Password=1234567890AZERTYUIOPazertyuiop,pin=1234 $adbshellcontentquery --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/ Row:0_id=1,service=test,username=test,password=BLOB,email=t@tedt.com Row:1_id=2,service=bank,username=owasp,password=BLOB,email=user@tedt.com $adbshellcontentquery --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection email:username:password --where 'service=\\\"bank\\\"' Row:0email=user@tedt.com,username=owasp,password=BLOB Youareablenowtoretrievealldatabaseentries(seealllinesstartingwith“Row:” intheoutput). Activities Tolistactivitiesexportedbyanapplication,youcanusethefollowingcommandandfocusonactivityelements: $aaptdxmltreesieve.apkAndroidManifest.xml ... E:activity (line=32) A:android:label(0x01010001)=@0x7f05000f A:android:name(0x01010003)=\".FileSelectActivity\" (Raw: \".FileSelectActivity\") A:android:exported(0x01010010)=(type0x12)0xffffffff A:android:finishOnTaskLaunch(0x01010014)=(type0x12)0xffffffff A:android:clearTaskOnLaunch(0x01010015)=(type0x12)0xffffffff A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff E:activity (line=40) A:android:label(0x01010001)=@0x7f050000 A:android:name(0x01010003)=\".MainLoginActivity\" (Raw: \".MainLoginActivity\") A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff A:android:launchMode(0x0101001d)=(type0x10)0x2 A:android:windowSoftInputMode(0x0101022b)=(type0x11)0x14 E:intent-filter (line=46) E:action (line=47) A:android:name(0x01010003)=\"android.intent.action.MAIN\" (Raw: \"android.intent.action.MAIN\") E:category (line=49) A:android:name(0x01010003)=\"android.intent.category.LAUNCHER\" (Raw: \"android.intent.category.LAUNCHER\") E:activity (line=52) A:android:label(0x01010001)=@0x7f050009 A:android:name(0x01010003)=\".PWList\" (Raw: \".PWList\") A:android:exported(0x01010010)=(type0x12)0xffffffff A:android:finishOnTaskLaunch(0x01010014)=(type0x12)0xffffffff A:android:clearTaskOnLaunch(0x01010015)=(type0x12)0xffffffff A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff E:activity (line=60) A:android:label(0x01010001)=@0x7f05000a A:android:name(0x01010003)=\".SettingsActivity\" (Raw: \".SettingsActivity\") A:android:finishOnTaskLaunch(0x01010014)=(type0x12)0xffffffff A:android:clearTaskOnLaunch(0x01010015)=(type0x12)0xffffffff A:android:excludeFromRecents(0x01010017)=(type0x12)0xffffffff ... Youcanidentifyanexportedactivityusingoneofthefollowingproperties: • Ithaveanintent-filtersubdeclaration. • Ithavetheattributeandroid:exportedto0xffffffff. YoucanalsousejadxtoidentifyexportedactivitiesinthefileAndroidManifest.xmlusingthecriteriadescribedabove: 273\\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.mwr.example.sieve\"> ... Thisactivityisexportedviatheattribute\"exported\" <activity android:name=\".FileSelectActivity\" android:exported=\"true\" /> Thisactivityisexportedviathe\"intent-filter\"declaration <activity android:name=\".MainLoginActivity\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\"/> <category android:name=\"android.intent.category.LAUNCHER\"/> </intent-filter> </activity> Thisactivityisexportedviatheattribute\"exported\" <activity android:name=\".PWList\" android:exported=\"true\" /> Activitiesbelowarenotexported <activity android:name=\".SettingsActivity\" /> <activity android:name=\".AddEntryActivity\"/> <activity android:name=\".ShortLoginActivity\" /> <activity android:name=\".WelcomeActivity\" /> <activity android:name=\".PINActivity\" /> ... </manifest> Enumeratingactivitiesinthevulnerablepasswordmanager“Sieve”showsthatthefollowingactivitiesareexported: • .MainLoginActivity • .PWList •", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 103}}