{"text": "yourAPIofchoice. WhentracingcodewiththeStalkerAPI,Fridaleveragesjust-in-timedynamicrecompilation(by usingCapstone): whenathreadisabouttoexecuteitsnextinstructions,Stalkerallocatessomememory,copies the original code over, and interlaces the copy with your custom code for instrumentation. Finally, it executes thecopy(leavingtheoriginalcodeuntouched,andthereforeavoidinganyanti-debuggingchecks). Thisapproach 563\\nincreases instrumentation performance considerably and allows for very high granularity when tracing (e.g. by tracingexclusivelyCALLorRETinstructions). Youcanlearnmorein-depthdetailsintheblogpost“Anatomyofa codetracer”byFrida’screatorOle[#vadla]. SomeexamplesofuseforStalkerare,forexamplewho-does-it-callor diff-calls. • Java: WhenworkingonAndroidyoucanusethisAPItoenumerateloadedclasses,enumerateclassloaders,create andusespecificclassinstances,enumerateliveinstancesofclassesbyscanningtheheap,etc. • ObjC:WhenworkingoniOSyoucanusethisAPItogetamappingofallregisteredclasses,registerorusespecific classorprotocolinstances,enumerateliveinstancesofclassesbyscanningtheheap,etc. Frida also provides a couple of simple tools built on top of the Frida API and available right from your terminal after installingfrida-toolsviapip. Forinstance: • YoucanusetheFridaCLI(frida)forquickscriptprototypingandtry/errorscenarios. • frida-pstoobtainalistofallapps(orprocesses)runningonthedeviceincludingtheirnames,identifiersandPIDs. • frida-ls-devicestolistyourconnecteddevicesrunningFridaserversoragents. • frida-tracetoquicklytracemethodsthatarepartofaniOSapporthatareimplementedinsideanAndroidnative library. Inaddition,you’llalsofindseveralopensourceFrida-basedtools,suchas: • Grapefruit: aRuntimeApplicationInstrumenttoolkigforiOS. • Fridump: amemorydumpingtoolforbothAndroidandiOS. • Objection: aruntimemobilesecurityassessmentframework. • r2frida: aprojectmergingthepowerfulreverseengineeringcapabilitiesofradare2withthedynamicinstrumenta- tiontoolkitofFrida. • jnitrace: atoolfortracingusageoftheAndroidJNIruntimemethodsbyanativelibrary. Wewillbeusingallofthesetoolsthroughouttheguide. Youcanusethesetoolsas-is,tweakthemtoyourneeds,ortakeasexcellentexamplesonhowtousetheAPIs. Having them as an example is very helpful when you write your own hooking scripts or when you build introspection tools to supportyourreverseengineeringworkflow. Frida CodeShare Platform: generic Availableat: https://codeshare.frida.re/ Frida CodeShare is a repository containing a collection of ready-to-run Frida scripts which can enormously help when performingconcretetasksbothonAndroidasoniOSaswellasalsoserveasinspirationtobuildyourownscripts. Two representativeexamplesare: • Universal Android SSL Pinning Bypass with Frida - https://codeshare.frida.re/@pcipolloni/universal-android-ssl- pinning-bypass-with-frida/ • ObjCmethodobserver-https://codeshare.frida.re/@mrmacete/objc-method-observer/ Usingthemisassimpleasincludingthe--codeshare<handler>flagandahandlerwhenusingtheFridaCLI.Forexample, touse“ObjCmethodobserver”,enterthefollowing: frida --codeshare mrmacete/objc-method-observer -fYOUR_BINARY LIEF Platform: generic Availableat: https://github.com/lief-project/LIEF ThepurposeofLIEFistoprovideacrossplatformlibrarytoparse,modifyandabstractELF,PEandMachOformats. With ityoucan,forinstance,injectacertainlibraryasadependencyofanativelibrary,whichanapplicationalreadyloadsby default. -https://lief.quarkslab.com/ 564\\nGhidra Platform: generic Availableat: https://github.com/NationalSecurityAgency/ghidra Ghidraisanopensourcesoftwarereverseengineering(SRE)suiteoftoolsdevelopedbytheUnitedStateofAmerica’s National Security Agency’s (NSA) Research Directorate. Ghidra is a versatile tool which comprises of a disassembler, decompilerandabuilt-inscriptingengineforadvancedusage. Pleaserefertotheinstallationguideonhowtoinstallit andalsolookatthecheatsheetforafirstoverviewofavailablecommandsandshortcuts. Inthissection,wewillhave walk-throughonhowtocreateaproject,viewdisassemblyanddecompiledcodeforabinary. StartGhidrausingghidraRun(*nix)orghidraRun.bat(Windows),dependingontheplatformyouareon. OnceGhidrais firedup,createanewprojectbyspecifyingtheprojectdirectory. Youwillbegreetedbyawindowasshownbelow: In your new Active Project you can import an app binary by going to File -> Import File and choosing the desired file. 565\\nIfthefilecanbeproperlyprocessed,Ghidrawillshowmeta-informationaboutthebinarybeforestartingtheanalysis. To get the disassembled code for the binary file chosen above, double click the imported file from the Active Project 566\\nwindow. Clickyesandanalyzeforauto-analysisonthesubsequentwindows. Auto-analysiswilltakesometimedepend- ingonthesizeofthebinary,theprogresscanbetrackedinthebottomrightcornerofthecodebrowserwindow. Once auto-analysisiscompletedyoucanstartexploringthebinary. The most important windows to explore a binary in Ghidra are the Listing (Disassembly) window, the Symbol Tree windowandtheDecompilerwindow,whichshowsthedecompiledversionofthefunctionselectedfordisassembly. The DisplayFunctionGraphoptionshowscontrolflowgraphoftheselectedfunction. 567\\nTherearemanyotherfunctionalitiesavailableinGhidraandmostofthemcanbeexploredbyopeningtheWindowmenu. Forexample,ifyouwanttoexaminethestringspresentinthebinary,opentheDefinedStringsoption. Wewilldiscuss otheradvancedfunctionalitieswhileanalyzingvariousbinariesforAndroidandiOSplatformsinthecomingchapters. 568\\nRMS Runtime Mobile Security Platform: generic Availableat: https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security RMS-RuntimeMobileSecurityisaruntimemobileapplicationanalysistoolkit,supportingAndroidandiOSApps. Itoffers awebGUIandiswritteninPython. It’sleveragingarunningFridaserveronajailbrokendevicewiththefollowingout-of-boxfunctionalities: • ExecutepopularFridascripts • ExecutecustomFridascripts • Dumpalltheloadedclassesandrelativemethods • Hookmethodsonthefly • (Android)MonitorAndroidAPIsandusageofnativeAPIs Theinstallationinstructionsand“how-toguide”ofRMScanbefoundintheReadmeoftheGithubrepo. iaito Platform: generic Availableat: https://github.com/radareorg/iaito Iaitoistheofficialgraphicaluserinterfaceforradare2,anopen-sourcereverseengineeringframework. Thisuser-friendly toolsimplifiesthereverseengineeringprocessbyprovidingagraphicalinterfacethatintegratesseamlesslywithradare2’s powerfulfeatures. Withafocusonsimplicity,keybindings,andradare2-styleworkflows,Iaitoisavaluableresourcefor bothexperiencedreverseengineersandthosenewtothefield,offeringamoreaccessibleandefficientwaytoworkwith radare2. 569\\nMobSF Platform: generic Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF MobSF(MobileSecurityFramework)isanautomated,all-in-onemobileapplicationpentestingframeworkcapableofper- formingstaticanddynamicanalysis. TheeasiestwayofgettingMobSFstartedisviaDocker. dockerpullopensecurity/mobile-security-framework-mobsf dockerrun -it-p8000:8000opensecurity/mobile-security-framework-mobsf:latest Orinstallandstartitlocallyonyourhostcomputerbyrunning: ##Setup gitclonehttps://github.com/MobSF/Mobile-Security-Framework-MobSF.git cdMobile-Security-Framework-MobSF ./setup.sh #ForLinuxandMac setup.bat #ForWindows ##Installationprocess ./run.sh #ForLinuxandMac run.bat #ForWindows OnceyouhaveMobSFupandrunningyoucanopenitinyourbrowserbynavigatingtohttp://127.0.0.1:8000. Simply dragtheAPKyouwanttoanalyzeintotheuploadareaandMobSFwillstartitsjob. objection Platform: generic Availableat: https://github.com/sensepost/objection Objection is a “runtime mobile exploration toolkit, powered by Frida”. Its main goal is to allow security testing on non- rooteddevicesthroughanintuitiveinterface. ObjectionachievesthisgoalbyprovidingyouwiththetoolstoeasilyinjecttheFridagadgetintoanapplicationbyrepack- agingit. Thisway,youcandeploytherepackagedapptothenon-rooted/non-jailbrokendevicebysideloadingit. Objection alsoprovidesaREPLthatallowsyoutointeractwiththeapplication,givingyoutheabilitytoperformanyactionthatthe applicationcanperform. ObjectioncanbeinstalledthroughpipasdescribedonObjection’sWiki. pip3installobjection 570\\nReference applications Theapplicationslistedbelowcanbeusedastrainingmaterials. Note: onlytheMASTGappsandCrackmesaretestedand maintainedbytheMASproject. OVAA Platform: android Availableat: https://github.com/oversecured/ovaa AnAndroidappthataggregatesalltheplatform’sknownandpopularsecurityvulnerabilities. InsecureShop Platform: android Availableat: https://github.com/hax0rgb/InsecureShop/ InsecureShopisanintentionallydesignedAndroidapplicationthatshowcasesvulnerabilities,aimingtoeducatedevelop- ersandsecurityexpertsaboutcommonpitfallswithinmodernAndroidapps. Itservesasadynamicplatformforrefining Androidpentestingskills. The majority of these vulnerabilities can be exploited on non-rooted devices, posing risks from both remote users and malicious third-party applications. Notably, the app doesn’t utilize any APIs. InsecureShop presents an opportunity to explorearangeofvulnerabilities: • HardcodedCredentials: Embeddedlogincredentialswithinthecode. • InsufficientURLValidation: AllowsloadingofarbitraryURLsviaDeeplinks. • ArbitraryCodeExecution: Enablestheexecutionofcodefromthird-partypackages. • AccesstoProtectedComponents: Permitsthird-partyappstolaunchsecurecomponents. • InsecureBroadcastReceiver: RegistrationofabroadcastenablingURLinjection. • InsecureContentProvider: Accessiblecontentproviderputtinguserdataatrisk. Complementingtheselearningexperiences,InsecureShopprovidesdocumentationabouttheimplementedvulnerabilities andtheirassociatedcode. Thisdocumentation,however,refrainsfromofferingcompletesolutionsforeachvulnerability showcasedwithintheInsecureShopapp. AndroGoat Platform: android Availableat: https://github.com/satishpatnayak/AndroGoat Anopensourcevulnerable/insecureapp usingKotlin. This apphas awiderange ofvulnerabilities relatedto certificate pinning, custom URL schemes, Android Network Security Configuration, WebViews, root detection and over 20 other vulnerabilities. Android License Validator Platform: android Availableat: https://mas.owasp.org/crackmes/Android#android-license-validator 571\\nThe Android License Validator is a", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 177}}