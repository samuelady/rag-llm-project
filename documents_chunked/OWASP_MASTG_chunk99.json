{"text": "ThisisdoneinJavaviaobjectserialization. Serialization isnotinherentlysecure. Itisjustabinaryformat(orrepresentation)forlocallystoringdataina.serfile. Encryptingand signing HMAC-serialized data is possible as long as the keys are stored safely. Deserializing an object requires a class ofthesameversionastheclassusedtoserializetheobject. Afterclasseshavebeenchanged,theObjectInputStream can’tcreateobjectsfromolder.serfiles. TheexamplebelowshowshowtocreateaSerializableclassbyimplementing theSerializableinterface. import java.io.Serializable; public class Person implements Serializable { private StringfirstName; private StringlastName; public Person(StringfirstName,StringlastName){ this.firstName =firstName; this.lastName =lastName; } //.. //getters,setters,etc //.. } Nowyoucanread/writetheobjectwithObjectInputStream/ObjectOutputStreaminanotherclass. 255\\nJSON ThereareseveralwaystoserializethecontentsofanobjecttoJSON.AndroidcomeswiththeJSONObjectandJSONArray classes. Awidevarietyoflibraries,includingGSON,Jackson,Moshi,canalsobeused. Themaindifferencesbetweenthe librariesarewhethertheyusereflectiontocomposetheobject, whethertheysupportannotations, whetherthecreate immutableobjects,andtheamountofmemorytheyuse. NotethatalmostalltheJSONrepresentationsareString-based andthereforeimmutable. ThismeansthatanysecretstoredinJSONwillbehardertoremovefrommemory. JSONitself can be stored anywhere, e.g., a (NoSQL) database or a file. You just need to make sure that any JSON that contains secretshasbeenappropriatelyprotected(e.g.,encrypted/HMACed). Seethechapter“DataStorageonAndroid”formore details. Asimpleexample(fromtheGSONUserGuide)ofwritingandreadingJSONwithGSONfollows. Inthisexample, thecontentsofaninstanceoftheBagOfPrimitivesisserializedintoJSON: class BagOfPrimitives { private intvalue1 =1; private Stringvalue2 =\"abc\"; private transient intvalue3 =3; BagOfPrimitives(){ //no-argsconstructor } } //Serialization BagOfPrimitivesobj =newBagOfPrimitives(); Gsongson =newGson(); Stringjson =gson.toJson(obj); //==>jsonis{\"value1\":1,\"value2\":\"abc\"} XML ThereareseveralwaystoserializethecontentsofanobjecttoXMLandback. AndroidcomeswiththeXmlPullParser interfacewhichallowsforeasilymaintainableXMLparsing. TherearetwoimplementationswithinAndroid: KXmlParser and ExpatPullParser. The Android Developer Guide provides a great write-up on how to use them. Next, there are variousalternatives,suchasaSAXparserthatcomeswiththeJavaruntime. Formoreinformation,seeablogpostfrom ibm.com. SimilarlytoJSON,XMLhastheissueofworkingmostlyStringbased,whichmeansthatString-typesecretswill behardertoremovefrommemory. XMLdatacanbestoredanywhere(database,files),butdoneedadditionalprotection incaseofsecretsorinformationthatshouldnotbechanged. Seethechapter“DataStorageonAndroid”formoredetails. Asstatedearlier: thetruedangerinXMLliesintheXMLeXternalEntity(XXE)attackasitmightallowforreadingexternal datasourcesthatarestillaccessiblewithintheapplication. ORM Therearelibrariesthatprovidefunctionalityfordirectlystoringthecontentsofanobjectinadatabaseandtheninstanti- atingtheobjectwiththedatabasecontents. ThisiscalledObject-RelationalMapping(ORM).LibrariesthatusetheSQLite databaseinclude • OrmLite, • SugarORM, • GreenDAOand • ActiveAndroid. Realm,ontheotherhand,usesitsowndatabasetostorethecontentsofaclass. TheamountofprotectionthatORMcan providedependsprimarilyonwhetherthedatabaseisencrypted. Seethechapter“DataStorageonAndroid”formore details. TheRealmwebsiteincludesaniceexampleofORMLite. Parcelable ParcelableisaninterfaceforclasseswhoseinstancescanbewrittentoandrestoredfromaParcel. Parcelsareoften used to pack a class as part of a Bundle for an Intent. Here’s an Android developer documentation example that implementsParcelable: public class MyParcelable implements Parcelable { private intmData; public intdescribeContents(){ 256\\nreturn 0; } public void writeToParcel(Parcelout,intflags){ out.writeInt(mData); } public static final Parcelable.Creator<MyParcelable>CREATOR =newParcelable.Creator<MyParcelable>(){ public MyParcelable createFromParcel(Parcelin){ return newMyParcelable(in); } public MyParcelable[]newArray(intsize){ return newMyParcelable[size]; } }; private MyParcelable(Parcelin){ mData =in.readInt(); } } Because this mechanism that involves Parcels and Intents may change over time, and the Parcelable may contain IBinderpointers,storingdatatodiskviaParcelableisnotrecommended. Protocol Buffers ProtocolBuffersbyGoogle,areaplatform-andlanguageneutralmechanismforserializingstructureddatabymeansof theBinaryDataFormat. TherehavebeenafewvulnerabilitieswithProtocolBuffers,suchasCVE-2015-5237. Notethat ProtocolBuffersdonotprovideanyprotectionforconfidentiality: thereisnobuiltinencryption. Overlay Attacks Screen overlay attacks occur when a malicious application manages to put itself on top of another application which remainsworkingnormallyasifitwereontheforeground. ThemaliciousappmightcreateUIelementsmimickingthelook and feel and the original app or even the Android system UI. The intention is typically to make users believe that they keep interacting with the legitimate app and then try to elevate privileges (e.g by getting some permissions granted), stealthyphishing,captureusertapsandkeystrokesetc. ThereareseveralattacksaffectingdifferentAndroidversionsincluding: • Tapjacking(Android6.0(APIlevel23)andlower)abusesthescreenoverlayfeatureofAndroidlisteningfortaps andinterceptinganyinformationbeingpassedtotheunderlyingactivity. • Cloak&DaggerattacksaffectappstargetingAndroid5.0(APIlevel21)toAndroid7.1(APIlevel25). Theyabuse oneorbothoftheSYSTEM_ALERT_WINDOW(“drawontop”)andBIND_ACCESSIBILITY_SERVICE(“a11y”)permissions that,incasetheappisinstalledfromthePlayStore,theusersdonotneedtoexplicitlygrantandforwhichthey arenotevennotified. • ToastOverlayisquitesimilartoCloak&DaggerbutdonotrequirespecificAndroidpermissionstobegrantedby users. ItwasclosedwithCVE-2017-0752onAndroid8.0(APIlevel26). Usually,thiskindofattacksareinherenttoanAndroidsystemversionhavingcertainvulnerabilitiesordesignissues. This makes them challenging and often virtually impossible to prevent unless the app is upgraded targeting a safe Android version(APIlevel). OvertheyearsmanyknownmalwarelikeMazorBot,BankBotorMysteryBothavebeenabusingthescreenoverlayfeature ofAndroidtotargetbusinesscriticalapplications,namelyinthebankingsector. Thisblogdiscussesmoreaboutthistype ofmalware. Enforced Updating Starting from Android 5.0 (API level 21), together with the Play Core Library, apps can be forced to be updated. This mechanismisbasedonusingtheAppUpdateManager. Beforethat,othermechanismswereused,suchasdoinghttpcalls to the Google Play Store, which are not as reliable as the APIs of the Play Store might change. Alternatively, Firebase couldbeusedtocheckforpossibleforcedupdatesaswell(seethisblog). Enforcedupdatingcanbereallyhelpfulwhen 257\\nitcomestopublickeypinning(seetheTestingNetworkcommunicationformoredetails)whenapinhastoberefreshed duetoacertificate/publickeyrotation. Next,vulnerabilitiesareeasilypatchedbymeansofforcedupdates. Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle managementiskeyhere. Similarly,whenauserisnotforcedtoupdate,donotforgettotestolderversionsofyourapp againstyourAPIand/oruseproperAPIversioning. Testing WebView Protocol Handlers Platform: android MASVSV1: MSTG-PLATFORM-6 MASVSV2: MASVS-PLATFORM-2 Overview TotestforWebViewprotocolhandlerschecktheappforWebViewusageandevaluatewhetherornottheWebViewshould haveresourceaccess. Ifresourceaccessisnecessaryyouneedtoverifythatit’simplementedfollowingbestpractices. Static Analysis CheckthesourcecodeforWebViewusage. ThefollowingWebViewsettingscontrolresourceaccess: • setAllowContentAccess: ContentURLaccessallowsWebViewstoloadcontentfromacontentproviderinstalled onthesystem,whichisenabledbydefault. • setAllowFileAccess: EnablesanddisablesfileaccesswithinaWebView. Thedefaultvalueistruewhentargeting Android10(APIlevel29)andbelowandfalseforAndroid11(APIlevel30)andabove. Notethatthisenablesand disablesfilesystemaccessonly. Assetandresourceaccessisunaffectedandaccessibleviafile:///android_- assetandfile:///android_res. • setAllowFileAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafileschemeURL toaccesscontentfromotherfileschemeURLs. ThedefaultvalueistrueforAndroid4.0.3-4.0.4(APIlevel15)and belowandfalseforAndroid4.1(APIlevel16)andabove. • setAllowUniversalAccessFromFileURLs: DoesordoesnotallowJavaScriptrunninginthecontextofafilescheme URLtoaccesscontentfromanyorigin.", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 99}}