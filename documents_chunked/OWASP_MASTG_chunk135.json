{"text": "and you are ready to go. The app binary is located in the mainbundledirectory(.app),e.g.Payload/Telegram X.app/Telegram X.Seethefollowingsubsectionfordetailsonthe extractionofthepropertylists. OnmacOS’sFinder,.appdirectoriesareopenedbyright-clickingthemandselecting“ShowPackageContent”. On theterminalyoucanjustcdintothem. Decrypting the App Binary IMPORTANT NOTE:IntheUnitedStates,theDigitalMillenniumCopyrightAct17U.S.C.1201,orDMCA,makesit illegalandactionabletocircumventcertaintypesofDRM.However,theDMCAalsoprovidesexemptions,suchas forcertainkindsofsecurityresearch. Aqualifiedattorneycanhelpyoudetermineifyourresearchqualifiesunder theDMCAexemptions. (Source: Corellium) If you don’t have the original IPA, then you need a jailbroken device where you will install the app (e.g. via App Store). Once installed, you need to extract the app binary from memory and rebuild the IPA file. Because of DRM, the app binaryfileisencryptedwhenitisstoredontheiOSdevice,sosimplypullingitfromtheBundle(eitherthroughSSHor Objection)willnotbesufficienttoreverseengineerit. Youcanverifythisbyrunningthiscommandontheappbinary: otool -lPayload/TelegramX.app/TelegramX |grep -iLC_ENCRYPTION -B1-A4 Loadcommand12 cmdLC_ENCRYPTION_INFO cmdsize20 cryptoff16384 cryptsize32768 cryptid1 Orwithradare2: rabin2 -IPayload/TelegramX.app/TelegramX |grep crypto crypto true In order to retrieve the unencrypted version, you can use frida-ios-dump. It will extract the unencrypted version from memorywhiletheapplicationisrunningonthedevice. First,configureFrida-ios-dumpdump.py: • setittouselocalhostwithport2222whenusingiproxy,ortotheactualIPaddressandportofthedevicefrom whichyouwanttodumpthebinary. • updatethedefaultusername(User = 'root')andpassword(Password = 'alpine')indump.pytotheonesyou haveset. Enumeratetheappsinstalledonthedevicebyrunningpython dump.py -l: PID Name Identifier ---- --------------- ------------------------------------- 860 Cydia com.saurik.Cydia 1130 Settings com.apple.Preferences 685 Mail com.apple.mobilemail 834 Telegram ph.telegra.Telegraph - Stocks com.apple.stocks ... Youcandumptheselectedapp,forexampleTelegram,byrunningpython dump.py ph.telegra.Telegraph 393\\nAfteracoupleofseconds, theTelegram.ipafilewillbecreatedinyourcurrentdirectory. Youcanvalidatethesuccess ofthedumpbyremovingtheappandreinstallingit(e.g.usingios-deployios-deploy -b Telegram.ipa). Notethatthis willonlyworkonjailbrokendevices,asotherwisethesignaturewon’tbevalid. Youcanverifythattheappbinaryisnowunencrypted: rabin2 -IPayload/TelegramX.app/TelegramX |grep crypto crypto false Thinning the App Binary The app binary may contain multiple architectures, such as armv7 (32-bit) and arm64 (64-bit). That is called a “fat bi- nary”. OneexampleistheDamnVulnerableiOSAppDVIAv1todemonstratethis. Unziptheappandrunotool: unzip DamnVulnerableiOSApp.ipa cdPayload/DamnVulnerableIOSApp.app otool -hvDamnVulnerableIOSApp Theoutputwilllooklikethis: DamnVulnerableIOSApp (architecturearmv7): Machheader magic cputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC ARM V7 0x00 EXECUTE 33 3684 NOUNDEFSDYLDLINKTWOLEVELPIE DamnVulnerableIOSApp (architecturearm64): Machheader magic cputypecpusubtype caps filetypencmdssizeofcmds flags MH_MAGIC_64 ARM64 ALL 0x00 EXECUTE 33 4192 NOUNDEFSDYLDLINKTWOLEVELPIE Toeasetheappanalysis,it’srecommendedcreateaso-calledthinbinary,whichcontainsonearchitectureonly: lipo -thin armv7DamnVulnerableIOSApp -output DVIA32 Execution Tracing Platform: ios Tracinginvolvesrecordingtheinformationaboutaprogram’sexecution. IncontrasttoAndroid,therearelimitedoptions available for tracing various aspects of an iOS app. In this section we will be heavily relying on tools such as Frida for performingtracing. TODO:Thisneedstobeimprovedaswell Reviewing Disassembled Native Code Platform: ios Analyzingdisassemblednativecoderequiresagoodunderstandingofthecallingconventionsandinstructionsusedby theunderlyingplatform. InthissectionwearelookinginARM64disassemblyofthenativecode. Agoodstartingpointto learnaboutARMarchitectureisavailableatIntroductiontoARMAssemblyBasicsbyAzeriaLabsTutorials. Thisisaquick summaryofthethingsthatwewillbeusinginthissection: • InARM64,aregisterisof64bitinsizeandreferredtoasXn,wherenisanumberfrom0to31. Ifthelower(LSB) 32bitsoftheregisterareusedthenit’sreferredtoasWn. • TheinputparameterstoafunctionarepassedintheX0-X7registers. • ThereturnvalueofthefunctionispassedviatheX0register. 394\\n• Load(LDR)andstore(STR)instructionsareusedtoreadorwritetomemoryfrom/toaregister. • B,BL,BLXarebranchinstructionsusedforcallingafunction. As mentioned above as well, Objective-C code is also compiled to native binary code, but analyzing C/C++ native can bemorechallenging. IncaseofObjective-Ctherearevarioussymbols(especiallyfunctionnames)present,whicheases the understanding of the code. In the above section we’ve learned that the presence of function names like setText, isEqualStringscanhelpusinquicklyunderstandingthesemanticsofthecode. IncaseofC/C++nativecode,ifallthe binariesarestripped,therecanbeveryfewornosymbolspresenttoassistusintoanalyzingit. Decompilerscanhelpusinanalyzingnativecode, buttheyshouldbeusedwithcaution. Moderndecompilersarevery sophisticatedandamongmanytechniquesusedbythemtodecompilecode,afewofthemareheuristicsbased. Heuristics basedtechniquesmightnotalwaysgivecorrectresults,onesuchcasebeing,determiningthenumberofinputparameters for a given native function. Having knowledge of analyzing disassembled code, assisted with decompilers can make analyzingnativecodelesserrorprone. WewillbeanalyzingthenativefunctionidentifiedinviewDidLoadfunctionintheprevioussection. Thefunctionislocated atoffset0x1000080d4. ThereturnvalueofthisfunctionusedinthesetTextfunctioncallforthelabel. Thistextisused tocompareagainsttheuserinput. Thus,wecanbesurethatthisfunctionwillbereturningastringorequivalent. Thefirstthingwecanseeinthedisassemblyofthefunctionisthatthereisnoinputtothefunction. TheregistersX0-X7 are not read throughout the function. Also, there are multiple calls to other functions like the ones at 0x100008158, 0x10000dbf0etc. Theinstructionscorrespondingtoonesuchfunctioncallscanbeseenbelow. Thebranchinstructionblisusedtocallthe functionat0x100008158. 395\\n1000080f01a 000094 bl FUN_100008158 1000080f4 60020039 strb w0,[x19]=>DAT_10000dbf0 Thereturnvaluefromthefunction(foundinW0),isstoredtotheaddressinregisterX19(strbstoresabytetotheaddress inregister). Wecanseethesamepatternforotherfunctioncalls,thereturnedvalueisstoredinX19registerandeach timetheoffsetisonemorethanthepreviousfunctioncall. Thisbehaviorcanbeassociatedwithpopulatingeachindex ofastringarrayatatime. Eachreturnvalueisbeenwrittentoanindexofthisstringarray. Thereare11suchcalls,and fromthecurrentevidencewecanmakeanintelligentguessthatlengthofthehiddenflagis11. Towardstheendofthe disassembly,thefunctionreturnswiththeaddresstothisstringarray. 100008148 e00313aa mov x0=>DAT_10000dbf0,x19 To determine the value of the hidden flag we need to know the return value of each of the subsequent function calls identifiedabove. Whenanalyzingthefunction0x100006fb4,wecanobservethatthisfunctionismuchbiggerandmore complexthanthepreviousoneweanalyzed. Functiongraphscanbeveryhelpfulwhenanalyzingcomplexfunctions,as ithelpsintobetterunderstandingthecontrolflowofthefunction. FunctiongraphscanbeobtainedinGhidrabyclicking theDisplayfunctiongraphiconinthesub-menu. Manuallyanalyzingallthenativefunctionscompletelywillbetimeconsumingandmightnotbethewisestapproach. In suchascenario usinga dynamicanalysis approachishighly recommended. Forinstance, by usingthe techniqueslike 396\\nhookingorsimplydebuggingtheapplication,wecaneasilydeterminethereturnedvalues. Normallyit’sagoodideato useadynamicanalysisapproachandthenfallbacktomanuallyanalyzingthefunctionsinafeedbackloop. Thiswayyou canbenefitfrombothapproachesatthesametimewhilesavingtimeandreducingeffort. Dynamicanalysistechniques arediscussedin“DynamicAnalysis”section. 397\\niOS Data Storage Overview Theprotectionofsensitivedata,suchasauthenticationtokensandprivateinformation,iskeyformobilesecurity. Inthis chapter,you’lllearnabouttheiOSAPIsforlocaldatastorage,andbestpracticesforusingthem. As little sensitive data as possible should be saved in permanent local storage. However, in most practical scenarios, atleastsomeuserdatamustbestored. Fortunately,iOSofferssecurestorageAPIs,whichallowdeveloperstousethe cryptographichardwareavailableoneveryiOS device. IftheseAPIs areusedcorrectly, sensitivedataand filescanbe securedviahardware-backed256-bitAESencryption. NSData", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 135}}