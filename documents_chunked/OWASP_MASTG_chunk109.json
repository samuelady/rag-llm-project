{"text": "of getting the record for Bob only, the user can retrievealldata. ##contentquery--uricontent://sg.vp.owasp_mobile.provider.College/students--where\"name='Bob')OR1=1--''\" Testing Local Storage for Input Validation Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 291\\nOverview Foranypubliclyaccessibledatastorage,anyprocesscanoverridethedata. Thismeansthatinputvalidationneedstobe appliedthemomentthedataisreadbackagain. Note: Thesameistrueforprivateaccessibledataonarooteddevice Static analysis Using Shared Preferences WhenyouusetheSharedPreferences.Editortoreadorwriteint/boolean/longvalues, youcannotcheckwhetherthe data is overridden or not. However: it can hardly be used for actual attacks other than chaining the values (e.g. no additional exploits can be packed which will take over the control flow). In the case of a String or a StringSet you should be careful with how the data is interpreted. Using reflection based persistence? Check the section on “Testing Object Persistence” for Android to see how it should be validated. Using the SharedPreferences.Editor to store and readcertificatesorkeys? MakesureyouhavepatchedyoursecurityprovidergivenvulnerabilitiessuchasfoundinBouncy Castle. Inallcases,havingthecontentHMACedcanhelptoensurethatnoadditionsand/orchangeshavebeenapplied. Using Other Storage Mechanisms Incaseotherpublicstoragemechanisms(thantheSharedPreferences.Editor)areused,thedataneedstobevalidated themomentitisreadfromthestoragemechanism. Memory Corruption Bugs Platform: android MASVSV1: MSTG-CODE-8 MASVSV2: MASVS-CODE-4 Overview Static Analysis Therearevariousitemstolookfor: • Are there native code parts? If so: check for the given issues in the general memory corruption section. Native codecaneasilybespottedgivenJNI-wrappers,.CPP/.H/.Cfiles,NDKorothernativeframeworks. • IsthereJavacodeorKotlincode? LookforSerialization/deserializationissues,suchasdescribedinAbriefhistory ofAndroiddeserializationvulnerabilities. NotethattherecanbeMemoryleaksinJava/Kotlincodeaswell. Lookforvariousitems,suchas: BroadcastReceiverswhich arenotunregistered,staticreferencestoActivityorViewclasses,SingletonclassesthathavereferencestoContext, InnerClassreferences,AnonymousClassreferences,AsyncTaskreferences,Handlerreferences,Threadingdonewrong, TimerTaskreferences. Formoredetails,pleasecheck: • 9waystoavoidmemoryleaksinAndroid • MemoryLeakPatternsinAndroid. 292\\nDynamic Analysis Therearevariousstepstotake: • Incaseofnativecode: useValgrindorMempatroltoanalyzethememoryusageandmemorycallsmadebythe code. • IncaseofJava/Kotlincode,trytorecompiletheappanduseitwithSquaresleakcanary. • CheckwiththeMemoryProfilerfromAndroidStudioforleakage. • CheckwiththeAndroidJavaDeserializationVulnerabilityTester,forserializationvulnerabilities. Testing Object Persistence Platform: android MASVSV1: MSTG-PLATFORM-8 MASVSV2: MASVS-CODE-4 Overview Totestforobjectpersistencebeingusedforstoringsensitiveinformationonthedevice,firstidentifyallinstancesofobject serialization and check if they carry any sensitive data. If yes, check if is properly protected against eavesdropping or unauthorizedmodification. Thereareafewgenericremediationstepsthatyoucanalwaystake: 1. MakesurethatsensitivedatahasbeenencryptedandHMACed/signedafterserialization/persistence. Evaluatethe signatureorHMACbeforeyouusethedata. Seethechapter“AndroidCryptographicAPIs”formoredetails. 2. Makesurethatthekeysusedinstep1can’tbeextractedeasily. Theuserand/orapplicationinstanceshouldbe properlyauthenticated/authorizedtoobtainthekeys. Seethechapter“DataStorageonAndroid”formoredetails. 3. Make sure that the data within the de-serialized object is carefully validated before it is actively used (e.g., no exploitofbusiness/applicationlogic). Forhigh-riskapplicationsthatfocusonavailability,werecommendthatyouuseSerializableonlywhentheserialized classesarestable. Second,werecommendnotusingreflection-basedpersistencebecause • theattackercouldfindthemethod’ssignatureviatheString-basedargument • theattackermightbeabletomanipulatethereflection-basedstepstoexecutebusinesslogic. Seethechapter“AndroidAnti-ReversingDefenses”formoredetails. Static Analysis Object Serialization Searchthesourcecodeforthefollowingkeywords: • import java.io.Serializable • implements Serializable JSON If you need to counter memory-dumping, make sure that very sensitive information is not stored in the JSON format becauseyoucan’tguaranteepreventionofanti-memorydumpingtechniqueswiththestandardlibraries. Youcancheck forthefollowingkeywordsinthecorrespondinglibraries: JSONObjectSearchthesourcecodeforthefollowingkeywords: • import org.json.JSONObject; • import org.json.JSONArray; 293\\nGSONSearchthesourcecodeforthefollowingkeywords: • import com.google.gson • import com.google.gson.annotations • import com.google.gson.reflect • import com.google.gson.stream • new Gson(); • Annotationssuchas@Expose,@JsonAdapter,@SerializedName,@Since,and@Until JacksonSearchthesourcecodeforthefollowingkeywords: • import com.fasterxml.jackson.core • import org.codehaus.jacksonfortheolderversion. ORM WhenyouuseanORMlibrary,makesurethatthedataisstoredinanencrypteddatabaseandtheclassrepresentations areindividuallyencryptedbeforestoringit. Seethechapters“DataStorageonAndroid”and“AndroidCryptographicAPIs” formoredetails. Youcancheckforthefollowingkeywordsinthecorrespondinglibraries: OrmLiteSearchthesourcecodeforthefollowingkeywords: • import com.j256.* • import com.j256.dao • import com.j256.db • import com.j256.stmt • import com.j256.table\\ Pleasemakesurethatloggingisdisabled. SugarORMSearchthesourcecodeforthefollowingkeywords: • import com.github.satyan • extends SugarRecord<Type> • In the AndroidManifest, there will be meta-data entries with values such as DATABASE, VERSION, QUERY_LOG and DOMAIN_PACKAGE_NAME. MakesurethatQUERY_LOGissettofalse. GreenDAOSearchthesourcecodeforthefollowingkeywords: • import org.greenrobot.greendao.annotation.Convert • import org.greenrobot.greendao.annotation.Entity • import org.greenrobot.greendao.annotation.Generated • import org.greenrobot.greendao.annotation.Id • import org.greenrobot.greendao.annotation.Index • import org.greenrobot.greendao.annotation.NotNull • import org.greenrobot.greendao.annotation.* • import org.greenrobot.greendao.database.Database • import org.greenrobot.greendao.query.Query ActiveAndroidSearchthesourcecodeforthefollowingkeywords: • ActiveAndroid.initialize(<contextReference>); • import com.activeandroid.Configuration • import com.activeandroid.query.* RealmSearchthesourcecodeforthefollowingkeywords: • import io.realm.RealmObject; • import io.realm.annotations.PrimaryKey; 294\\nParcelable Make sure that appropriate security measures are taken when sensitive information is stored in an Intent via a Bundle thatcontainsaParcelable. UseexplicitIntentsandverifyproperadditionalsecuritycontrolswhenusingapplication-level IPC(e.g.,signatureverification,intent-permissions,crypto). Dynamic Analysis Thereareseveralwaystoperformdynamicanalysis: 1. Fortheactualpersistence: Usethetechniquesdescribedinthedatastoragechapter. 2. For reflection-based approaches: Use Xposed to hook into the deserialization methods or add unprocessable in- formation to the serialized objects to see how they are handled (e.g., whether the application crashes or extra informationcanbeextractedbyenrichingtheobjects). Testing Implicit Intents Platform: android MASVSV1: MSTG-PLATFORM-2 MASVSV2: MASVS-CODE-4 Overview Whentestingforimplicitintentsyouneedtocheckiftheyarevulnerabletoinjectionattacksorpotentiallyleakingsensitive data. Static Analysis InspecttheAndroidManifestandlookforany<intent>signaturesdefinedinsideblocks(whichspecifythesetofother appsanappintendstointeractwith), checkifitcontainsanysystemactions(e.g.android.intent.action.GET_CON- TENT, android.intent.action.PICK,", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 109}}