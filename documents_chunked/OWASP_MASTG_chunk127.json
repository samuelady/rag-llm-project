{"text": "-[NSURLisAppStoreURL]:Loadedhandlerat \"/Users/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js\" (...) Startedtracing248functions.PressCtrl+Ctostop. Next, navigatetoanewwebsiteinSafari. Youshouldseetracedfunctioncallsonthefrida-traceconsole. Notethat theinitWithURL:methodiscalledtoinitializeanewURLrequestobject. /*TID0xc07 */ 20313ms -[NSURLRequest _initWithCFURLRequest:0x1043bca30] 20313ms -[NSURLRequest URL] (...) 21324ms -[NSURLRequest initWithURL:0x106388b00] 21324ms |-[NSURLRequestinitWithURL:0x106388b00cachePolicy:0x0timeoutInterval:0x106388b80 Runtime Reverse Engineering Platform: ios Runtimereverseengineeringcanbeseenastheon-the-flyversionofreverseengineeringwhereyoudon’thavethebinary datatoyourhostcomputer. Instead,you’llanalyzeitstraightfromthememoryoftheapp. We’ll keep using the iGoat-Swift app, open a session with r2frida r2 frida://usb//iGoat-Swift and you can start by displayingthetargetbinaryinformationbyusingthe:icommand: [0x00000000]>:i arch arm bits 64 os darwin pid 2166 uid 501 objc true runtime V8 java false cylang true pageSize 16384 pointerSize 8 codeSigningPolicy optional isDebuggerAttached false cwd / Searchallsymbolsofacertainmodulewith:is <lib>,e.g.:is libboringssl.dylib. Thefollowingdoesacase-insensitivesearch(grep)forsymbolsincluding“aes”(~+aes). [0x00000000]>\\islibboringssl.dylib~+aes 0x1863d6ed8sEVP_aes_128_cbc 0x1863d6ee4sEVP_aes_192_cbc 0x1863d6ef0sEVP_aes_256_cbc 0x1863d6f14sEVP_has_aes_hardware 354\\n0x1863d6f1csaes_init_key 0x1863d728csaes_cipher 0x0uccaes_cbc_decrypt_mode 0x0uccaes_cbc_encrypt_mode ... Oryoumightprefertolookintotheimports/exports. Forexample: • Listallimportsofthemainbinary: :ii iGoat-Swift. • Listexportsofthelibc++.1.dyliblibrary: :iE /usr/lib/libc++.1.dylib. Forbigbinariesit’srecommendedtopipetheoutputtotheinternallessprogrambyappending~..,i.e.:iiiGoat- Swift~.. (ifnot,forthisbinary,you’dgetalmost5000linesprintedtoyourterminal). Thenextthingyoumightwanttolookataretheclasses: [0x00000000]>\\ic~+passcode PSPasscodeField _UITextFieldPasscodeCutoutBackground UIPasscodeField PasscodeFieldCell ... Listclassfields: [0x19687256c]>\\icUIPasscodeField 0x000000018eec6680 -becomeFirstResponder 0x000000018eec5d78 -appendString: 0x000000018eec6650 -canBecomeFirstResponder 0x000000018eec6700 -isFirstResponder 0x000000018eec6a60 -hitTest:forEvent: 0x000000018eec5384 -setKeyboardType: 0x000000018eec5c8c -setStringValue: 0x000000018eec5c64 -stringValue ... Imagine that you are interested into 0x000000018eec5c8c - setStringValue:. You can seek to that address with s 0x000000018eec5c8c,analyzethatfunctionafandprint10linesofitsdisassemblypd 10: [0x18eec5c8c]>pd10 ╭(fcn)fcn.18eec5c8c35 │ fcn.18eec5c8c (int32_targ1,int32_targ3); │bp:0 (vars0,args0) │sp:0 (vars0,args0) │rg:2 (vars0,args2) │ 0x18eec5c8c f657bd notbyte[rdi -0x43] ;arg1 │ 0x18eec5c8f a9f44f01a9 testeax,0xa9014ff4 │ 0x18eec5c94 fd std │ ╭─<0x18eec5c95 7b02 jnp0x18eec5c99 │ │ 0x18eec5c97 a9fd830091 testeax,0x910083fd │ 0x18eec5c9c f30300 addeax,dword [rax] │ 0x18eec5c9f aa stosbbyte [rdi],al │ ╭─<0x18eec5ca0 e003 loopne0x18eec5ca5 │ │ 0x18eec5ca2 02aa9b494197 addch,byte[rdx -0x68beb665] ; arg3 ╰ 0x18eec5ca8 f4 hlt Finally, instead of doing a full memory search for strings, you may want to retrieve the strings from a certain binary and filter them, as you’d do offline with radare2. For this you have to find the binary, seek to it and then run the :iz command. It’srecommendedtoapplyafilterwithakeyword~<keyword>/~+<keyword>tominimizetheterminaloutput. Ifjust wanttoexploreallresultsyoucanalsopipethemtotheinternalless\\iz~... [0x00000000]>:il~iGoa 0x00000001006b8000iGoat-Swift [0x00000000]>s0x00000001006b8000 [0x1006b8000]>:iz Reading2.390625MB... Doyouwanttoprint8568lines?(y/N)N [0x1006b8000]>:iz~+hill Reading2.390625MB... [0x1006b8000]>:iz~+pass 355\\nReading2.390625MB... 0x00000001006b93ed \"passwordTextField\" 0x00000001006bb11a \"11iGoat_Swift20KeychainPasswordItemV0C5ErrorO\" 0x00000001006bb164 \"unexpectedPasswordData\" 0x00000001006d3f62 \"Errorreadingpasswordfromkeychain-\" 0x00000001006d40f2 \"IncorrectPassword\" 0x00000001006d4112 \"Enterthecorrectpassword\" 0x00000001006d4632 \"T@\"UITextField\",N,W,VpasswordField\" 0x00000001006d46f2 \"CREATETABLEIFNOTEXISTScreds(idINTEGERPRIMARYKEYAUTOINCREMENT,usernameTEXT,passwordTEXT);\" 0x00000001006d4792 \"INSERTINTOcreds(username,password)VALUES(?,?)\" Tolearnmore,pleaserefertother2fridawiki. Basic Network Monitoring/Sniffing Platform: ios Youcanremotelysniffalltrafficinreal-timeoniOSbycreatingaRemoteVirtualInterfaceforyouriOSdevice. Firstmake sureyouhaveWiresharkinstalledonyourmacOShostcomputer. 1. ConnectyouriOSdevicetoyourmacOShostcomputerviaUSB. 2. YouwouldneedtoknowtheUDIDofyouriOSdevice,beforeyoucanstartsniffing. Checkthesection“Gettingthe UDIDofaniOSdevice”onhowtoretrieveit. OpentheTerminalonmacOSandenterthefollowingcommand,filling intheUDIDofyouriOSdevice. $rvictl -s<UDID> Startingdevice <UDID>[SUCCEEDED]withinterfacervi0 1. LaunchWiresharkandselect“rvi0”asthecaptureinterface. 2. FilterthetrafficwithCaptureFiltersinWiresharktodisplaywhatyouwanttomonitor(forexample,allHTTPtraffic sent/receivedviatheIPaddress192.168.1.1). ip.addr==192.168.1.1&&http ThedocumentationofWiresharkoffersmanyexamplesforCaptureFiltersthatshouldhelpyoutofilterthetraffictoget theinformationyouwant. Retrieving Strings Platform: ios Strings are always a good starting point while analyzing a binary, as they provide context to the associated code. For instance, an error log string such as “Cryptogram generation failed” gives us a hint that the adjoining code might be responsibleforthegenerationofacryptogram. In order to extract strings from an iOS binary, you can use GUI tools such as Ghidra or iaito or rely on CLI-based tools suchasthestringsUnixutility(strings<path_to_binary>)orradare2’srabin2(rabin2-zz<path_to_binary>). When usingtheCLI-basedonesyoucantakeadvantageofothertoolssuchasgrep(e.g.inconjunctionwithregularexpressions) tofurtherfilterandanalyzetheresults. 356\\nNative Code Tracing Platform: ios Asdiscussedearlierinthischapter,iOSapplicationscanalsocontainnativecode(C/C++code)anditcanbetracedusing thefrida-traceCLIaswell. Forexample,youcantracecallstotheopenfunctionbyrunningthefollowingcommand: frida-trace -U-i\"open\" sg.vp.UnCrackable1 TheoverallapproachandfurtherimprovisationfortracingnativecodeusingFridaissimilartotheonediscussedinthe Android“Tracing”section. Unfortunately,therearenotoolssuchasstraceorftraceavailabletotracesyscallsorfunctioncallsofaniOSapp. Only DTraceexists,whichisaverypowerfulandversatiletracingtool,butit’sonlyavailableforMacOSandnotforiOS. Accessing App Data Directories Platform: ios Once you have installed the app, there is further information to explore. Let’s go through a short overview of the app folderstructureoniOSappstounderstandwhichdataisstoredwhere. Thefollowingillustrationrepresentstheapplication folderstructure: OniOS,systemapplicationscanbefoundinthe/Applicationsdirectorywhileuser-installedappsareavailableunder /private/var/containers/. However,findingtherightfolderjustbynavigatingthefilesystemisnotatrivialtaskas everyappgetsarandom128-bitUUID(UniversalUniqueIdentifier)assignedforitsdirectorynames. Inordertoeasilyobtaintheinstallationdirectoryinformationforuser-installedappsyoucanfollowthefollowingmeth- ods: Connecttotheterminalonthedeviceandrunthecommandipainstaller(IPAInstallerConsole)asfollows: 357\\niPhone:~root#ipainstaller -l ... OWASP.iGoat-Swift iPhone:~root#ipainstaller -iOWASP.iGoat-Swift ... Bundle:/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67 Application:/private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app Data:/private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693 Usingobjection’scommandenvwillalsoshowyouallthedirectoryinformationoftheapp. Connectingtotheapplication withobjectionisdescribedinthesection“RecommendedTools-Objection”. OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #env Name Path ----------------- ------------------------------------------------------------------------------------------- BundlePath /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app CachesDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches DocumentDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents LibraryDirectory /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library Asyoucansee,appshavetwomainlocations: • TheBundledirectory(/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/). • TheDatadirectory(/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/). Thesefolderscontaininformationthatmustbeexaminedcloselyduringapplicationsecurityassessments(forexample whenanalyzingthestoreddataforsensitivedata). Bundledirectory: • AppName.app – ThisistheApplicationBundleasseenbeforeintheIPA,itcontainsessentialapplicationdata,staticcontent aswellastheapplication’scompiledbinary. – Thisdirectoryisvisibletousers,butuserscan’twritetoit. – Contentinthisdirectoryisnotbackedup. – Thecontentsofthisfolderareusedtovalidatethecodesignature. Datadirectory: • Documents/ – Containsalltheuser-generateddata. Theapplicationenduserinitiatesthecreationofthisdata. – Visibletousersanduserscanwritetoit. –", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 127}}