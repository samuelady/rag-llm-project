{"text": "The admin.megacorpone.com webserver was found to be running an Apache webserver on port 81. Accessing the root URL of this site resulted in the display of a blank page. We next conducted a quick enumeration scan of the system looking for common directories and files (Figure 4). Figure 4 – Enumeration of the admin.megacorpone.com host partially discloses the webserver’s folder structure. The scan results revealed that along with common Apache default files (Please see Appendix A for more information), we identified an “/admin” directory that was only accessible after authentication. (Figure 5). Figure 5 – Access to the “admin” folder is password-protected. PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 6 of 34\\nTo prepare a targeted brute-force attempt against this system, we compiled a custom dictionary file based on the content of the www.megacorpone.com website. The initial dictionary consisted of 331 custom words, which were then put through several rounds of permutations and substitutions to produce a final dictionary file of 16,201 words. This dictionary file was used along with the username “admin” against the protected section of the site. Figure 6 – Using a custom word dictionary it is possible to discover the administrative password for the “admin” folder. This brute-force attack uncovered a password of “nanotechnology1” for the admin user. We were able to leverage these credentials to successfully gain unauthorized access to the protected portion of the website (Figure 6). Please see Appendix A for more information on the exploited vulnerability. The administrative portion of the website contained the SQLite Manager web interface (Figure 7), which was accessible without any additional credentials. Utilizing this interface, we found what appeared to be the database that supported an instance of phpSQLiteCMS2. Figure 7 – An instance of SQLite Manager is found to be running on the compromised webserver. 2 http://phpsqlitecms.net/ PTR-20130513 Copyright © 2013 Offensive Security Services LLC. All rights reserved. Page 7 of 34\\nThe interface gave us direct access to the data and the ability to extract a list of users on the system with the associated password hash values (Figure 8). Figure 8 – Lack of additional access controls allows an attacker to retrieve usernames and password hashes from the “userdata” database. After examination of the values, we found that the hashes did not conform to any standard format. Using a copy of the “phpselitecms” software, we examined the source code to determine exactly how this value is produced. Through this process we were able to identify the function responsible for hashing of the account passwords. Figure 9 – Source code review leads to the discovery of the password hash generation algorithm. With the newly-acquired knowledge of the password hashing format and the use of a randomly generated 10 character salt value, we were able to easily convert the recovered hashes into their salted SHA1 equivalent and conduct a brute-force attack. This effort resulted in the recovery of two plaintext passwords. Although these values were not immediately useful, they were retained in hope", "metadata": {"doc_id": "Offensive Security - sample-penetration-testing-report", "chunk_id": 2}}