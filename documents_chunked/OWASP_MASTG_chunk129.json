{"text": "truncated for betterreadabilityandoverview: $ls -1Payload/iGoat-Swift.app rutger.html mansi.html splash.html about.html LICENSE.txt Sentinel.txt README.txt URLSchemeAttackExerciseVC.nib CutAndPasteExerciseVC.nib RandomKeyGenerationExerciseVC.nib KeychainExerciseVC.nib CoreData.momd archived-expanded-entitlements.xcent SVProgressHUD.bundle Base.lproj Assets.car PkgInfo _CodeSignature AppIcon60x60@3x.png Frameworks embedded.mobileprovision Credentials.plist 362\\nAssets.plist Info.plist iGoat-Swift Themostrelevantitemsare: • Info.plist contains configuration information for the application, such as its bundle ID, version number, and displayname. • _CodeSignature/containsaplistfilewithasignatureoverallfilesinthebundle. • Frameworks/containstheappnativelibrariesas.dylibor.frameworkfiles. • PlugIns/maycontainappextensionsas.appexfiles(notpresentintheexample). • iGoat-Swiftistheappbinarycontainingtheapp’scode. Itsnameisthesameasthebundle’snameminusthe.app extension. • Various resources such as images/icons, *.nib files (storing the user interfaces of iOS app), localized content (<language>.lproj),textfiles,audiofiles,etc. The Info.plist File The information property list or Info.plist (named by convention) is the main source of information for an iOS app. It consists of a structured file containing key-value pairs describing essential configuration information about the app. Actually,allbundledexecutables(appextensions,frameworksandapps)areexpectedtohaveanInfo.plistfile. You canfindallpossiblekeysintheAppleDeveloperDocumentation. ThefilemightbeformattedinXMLorbinary(bplist). YoucanconvertittoXMLformatwithonesimplecommand: • OnmacOSwithplutil,whichisatoolthatcomesnativelywithmacOS10.2andaboveversions(noofficialonline documentationiscurrentlyavailable): plutil -convert xml1Info.plist • OnLinux: aptinstall libplist-utils plistutil -iInfo.plist -oInfo_xml.plist Here’sanon-exhaustivelistofsomeinfoandthecorrespondingkeywordsthatyoucaneasilysearchforintheInfo.plist filebyjustinspectingthefileorbyusinggrep -i <keyword> Info.plist: • ApppermissionsPurposeStrings: UsageDescription(see“iOSPlatformAPIs”) • CustomURLschemes: CFBundleURLTypes(see“iOSPlatformAPIs”) • Exported/importedcustomdocumenttypes: UTExportedTypeDeclarations/UTImportedTypeDeclarations(see “iOSPlatformAPIs”) • AppTransportSecurity(ATS)configuration: NSAppTransportSecurity(see“iOSNetworkCommunication”) Pleaserefertothementionedchapterstolearnmoreabouthowtotesteachofthesepoints. App Binary iOSappbinariesarefatbinaries(theycanbedeployedonalldevices32-and64-bit). IncontrasttoAndroid,whereyou canactuallydecompiletheappbinarytoJavacode,theiOSappbinariescanonlybedisassembled. RefertothechapterTamperingandReverseEngineeringoniOSformoredetails. Native Libraries iOSappscanmaketheircodebasemodularbyusingdifferentelements. IntheMASTGwewillrefertoallofthemasnative libraries,buttheycancomeindifferentforms: • StaticandDynamicLibraries: 363\\n– StaticLibrariescanbeusedandwillbecompiledintheappbinary. – Dynamic Libraries (typically having the .dylib extension) are also used but must be part of a framework bundle. Standalone Dynamic Libraries are not supported on iOS, watchOS, or tvOS, except for the system SwiftlibrariesprovidedbyXcode. • Frameworks(sinceiOS8). AFrameworkisahierarchicaldirectorythatencapsulatesadynamiclibrary,headerfiles, andresources,suchasstoryboards,imagefiles,andlocalizedstrings,intoasinglepackage. • BinaryFrameworks(XCFrameworks): Xcode11supportsdistributingbinarylibrariesusingtheXCFrameworksformat whichisanewwaytobundleupmultiplevariantsofaFramework,e.g.foranyoftheplatformsthatXcodesupports (includingsimulatoranddevices). Theycanalsobundleupstaticlibraries(andtheircorrespondingheaders)and supportbinarydistributionofSwiftandC-basedcode. XCFrameworkscanbedistributedasSwiftPackages. • SwiftPackages: Xcode11addsupportsforSwiftpackages, whicharereusablecomponentsofSwift, Objective-C, Objective-C++,C,orC++codethatdeveloperscanuseintheirprojectsandaredistributedassourcecode. Since Xcode12theycanalsobundleresources,suchasimages,storyboards,andotherfiles. SincePackagelibrariesare staticbydefault. Xcodecompilesthem,andthepackagestheydependon,andthenlinksandcombineseverything intotheapplication. YoucanviewnativelibrariesinGrapefruitbyclickingontheModulesiconintheleftmenubar: 364\\nAndgetamoredetailedviewincludingtheirimports/exports: TheyareavailableintheFrameworksfolderintheIPA,youcanalsoinspectthemfromtheterminal: $ls -1Frameworks/ Realm.framework libswiftCore.dylib libswiftCoreData.dylib libswiftCoreFoundation.dylib orfromthedevicewithobjection(aswellasperSSHofcourse): OWASP.iGoat-Swifton (iPhone:11.1.2)[usb] #ls NSFileType Perms NSFileProtection ... Name ------------ ------- ------------------ ... ---------------------------- Directory 493 None ... Realm.framework Regular 420 None ... libswiftCore.dylib Regular 420 None ... libswiftCoreData.dylib Regular 420 None ... libswiftCoreFoundation.dylib ... Pleasenotethatthismightnotbethecompletelistofnativecodeelementsbeingusedbytheappassomecanbepartof thesourcecode,meaningthatthey’llbecompiledintheappbinaryandthereforecannotbefoundasstandalonelibraries orFrameworksintheFrameworksfolder. FornowthisisallinformationyoucangetabouttheFrameworksunlessyoustartreverseengineeringthem. Refertothe chapterTamperingandReverseEngineeringoniOSformoreinformationabouthowtoreverseengineerFrameworks. Other App Resources ItisnormallyworthtakingalookattherestoftheresourcesandfilesthatyoumayfindintheApplicationBundle(.app) insidetheIPAassometimestheycontainadditionalgoodieslikeencrypteddatabases,certificates,etc. 365\\nAccessing the Device Shell Platform: ios Oneofthemostcommonthingsyoudowhentestinganappisaccessingthedeviceshell. Inthissectionwe’llseehowto accesstheiOSshellbothremotelyfromyourhostcomputerwith/withoutaUSBcableandlocallyfromthedeviceitself. Remote Shell IncontrasttoAndroidwhereyoucaneasilyaccessthedeviceshellusingtheadbtool,oniOSyouonlyhavetheoption to access the remote shell via SSH. This also means that your iOS device must be jailbroken in order to connect to its shellfromyourhostcomputer. Forthissectionweassumethatyou’veproperlyjailbrokenyourdeviceandhaveeither Cydia(seescreenshotbelow)orSileoinstalled. IntherestoftheguidewewillreferencetoCydia,butthesamepackages shouldbeavailableinSileo. 366\\nInordertoenableSSHaccesstoyouriOSdeviceyoucaninstalltheOpenSSHpackage. Onceinstalled,besuretoconnect bothdevicestothesameWi-FinetworkandtakeanoteofthedeviceIPaddress,whichyoucanfindintheSettings-> Wi-Fimenuandtappingonceontheinfoiconofthenetworkyou’reconnectedto. Youcannowaccesstheremotedevice’sshellbyrunningssh root@<device_ip_address>,whichwilllogyouinasthe rootuser: $sshroot@192.168.197.234 root@192.168.197.234'spassword: iPhone:~root# PressControl+Dortypeexittoquit. WhenaccessingyouriOSdeviceviaSSHconsiderthefollowing: • Thedefaultusersarerootandmobile. • Thedefaultpasswordforbothisalpine. Remembertochangethedefaultpasswordforbothusersrootandmobileasanyoneonthesamenetworkcanfind theIPaddressofyourdeviceandconnectviathewell-knowndefaultpassword,whichwillgivethemrootaccessto yourdevice. Ifyouforgetyourpasswordandwanttoresetittothedefaultalpine: 1. Edit the file /private/etc/master.password on your jailbroken iOS device (using an on-device shell as shown below) 367\\n2. Findthelines: root:xxxxxxxxx:0:0::0:0:SystemAdministrator:/var/root:/bin/sh mobile:xxxxxxxxx:501:501::0:0:MobileUser:/var/mobile:/bin/sh 3. Changexxxxxxxxxto/smx7MYTQIi2M(whichisthehashedpasswordalpine) 4. Saveandexit Connect to a Device via SSH over USB Duringarealblackboxtest,areliableWi-Ficonnectionmaynotbeavailable. Inthissituation,youcanuseusbmuxdto connecttoyourdevice’sSSHserverviaUSB. ConnectmacOStoaniOSdevicebyinstallingandstartingiproxy: $brewinstalllibimobiledevice $iproxy222222 waitingforconnection Theabovecommandmapsport22ontheiOSdevicetoport2222onlocalhost. Youcanalsomakeiproxyrunautomatically inthebackgroundifyoudon’twanttorunthebinaryeverytimeyouwanttoSSHoverUSB. Withthefollowingcommandinanewterminalwindow,youcanconnecttothedevice: $ssh -p2222root@localhost root@localhost'spassword: iPhone:~root# SmallnoteonUSBofaniDevice: onaniOSdeviceyoucannotmakedataconnectionsanymoreafter1hourofbeing inalockedstate,unlessyouunlockitagainduetotheUSBRestrictedMode,whichwasintroducedwithiOS11.4.1 On-device Shell App Whileusuallyusinganon-deviceshell(terminalemulator)mightbeverytediouscomparedtoaremoteshell,itcanprove handyfordebuggingincaseof,forexample,networkissuesorchecksomeconfiguration. Forexample,youcaninstall NewTerm2viaCydiaforthispurpose(itsupportsiOS6.0to12.1.2atthetimeofthiswriting). Inaddition,thereareafewjailbreaksthatexplicitlydisableincomingSSHforsecurityreasons. Inthosecases,itisvery convenienttohaveanon-deviceshellapp,whichyoucanusetofirstSSHoutofthedevicewithareverseshell,andthen connectfromyourhostcomputertoit. OpeningareverseshelloverSSHcanbedonebyrunningthecommandssh -R <remote_port>:localhost:22 <user- name>@<host_computer_ip>. Ontheon-deviceshellapprunthefollowingcommandand,whenasked,enterthepasswordofthemstguserofthehost computer: ssh-R2222:localhost:22mstg@192.168.197.235 On your host computer run the following command and, when asked, enter the password of the root user of the iOS device: ssh-p2222root@localhost Extracting Information from the Application Binary 368\\nPlatform: ios You can use radare to get information about the binary, such as the architecture, the list of shared libraries, the list of classesandmethods,stringsandmore. Let’susetheDamnVulnerableiOSAppDVIAv1asanexample. Openitsmainbinarywithradare2: r2DamnVulnerableIOSApp Binary Information Togetinformationaboutthebinary, youcanusetheicommand. Thiscommandwilllistinformationaboutthebinary, suchasthearchitecture,thelistofsharedlibraries,thelistofclassesandmethods,stringsandmore. [0x1000180c8]>i ... size 0x43d5f0 humansz 4.2M mode r-x format mach064 iorw false block 0x100 packet xtr.fatmach0 ... lang objcwithblocks linenum false lsyms false nx false os ios", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 129}}