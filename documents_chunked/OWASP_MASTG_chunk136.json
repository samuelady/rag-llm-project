{"text": "usinga dynamicanalysis approachishighly recommended. Forinstance, by usingthe techniqueslike 396\\nhookingorsimplydebuggingtheapplication,wecaneasilydeterminethereturnedvalues. Normallyit’sagoodideato useadynamicanalysisapproachandthenfallbacktomanuallyanalyzingthefunctionsinafeedbackloop. Thiswayyou canbenefitfrombothapproachesatthesametimewhilesavingtimeandreducingeffort. Dynamicanalysistechniques arediscussedin“DynamicAnalysis”section. 397\\niOS Data Storage Overview Theprotectionofsensitivedata,suchasauthenticationtokensandprivateinformation,iskeyformobilesecurity. Inthis chapter,you’lllearnabouttheiOSAPIsforlocaldatastorage,andbestpracticesforusingthem. As little sensitive data as possible should be saved in permanent local storage. However, in most practical scenarios, atleastsomeuserdatamustbestored. Fortunately,iOSofferssecurestorageAPIs,whichallowdeveloperstousethe cryptographichardwareavailableoneveryiOS device. IftheseAPIs areusedcorrectly, sensitivedataand filescanbe securedviahardware-backed256-bitAESencryption. NSData and NSMutableData NSData(staticdataobjects)andNSMutableData(dynamicdataobjects)aretypicallyusedfordatastorage,buttheyare alsousefulfordistributedobjectsapplications,inwhichdatacontainedindataobjectscanbecopiedormovedbetween applications. ThefollowingaremethodsusedtowriteNSDataobjects: • NSDataWritingWithoutOverwriting • NSDataWritingFileProtectionNone • NSDataWritingFileProtectionComplete • NSDataWritingFileProtectionCompleteUnlessOpen • NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication • writeToFile: storesdataaspartoftheNSDataclass • NSSearchPathForDirectoriesInDomains, NSTemporaryDirectory: usedtomanagefilepaths • NSFileManager: letsyouexamineandchangethecontentsofthefilesystem. YoucanusecreateFileAtPathto createafileandwritetoit. ThefollowingexampleshowshowtocreateacompleteencryptedfileusingtheFileManagerclass. Youcanfindmore informationintheAppleDeveloperDocumentation“EncryptingYourApp’sFiles” Swift: FileManager.default.createFile( atPath:filePath, contents:\"secrettext\".data(using:.utf8), attributes:[FileAttributeKey.protectionKey:FileProtectionType.complete] ) Objective-C: [[NSFileManagerdefaultManager]createFileAtPath:[self filePath] contents:[@\"secrettext\" dataUsingEncoding:NSUTF8StringEncoding] attributes:[NSDictionarydictionaryWithObject:NSFileProtectionComplete forKey:NSFileProtectionKey]]; NSUserDefaults TheNSUserDefaultsclassprovidesaprogrammaticinterfaceforinteractingwiththedefaultsystem. Thedefaultsystem allows an application to customize its behavior according to user preferences. Data saved by NSUserDefaults can be viewed in the application bundle. This class stores data in a plist file, but it’s meant to be used with small amounts of data. Databases CoreData 398\\nCoreDataisaframeworkformanagingthemodellayerofobjectsinyourapplication. Itprovidesgeneralandautomated solutionstocommontasksassociatedwithobjectlifecyclesandobjectgraphmanagement,includingpersistence. Core DatacanuseSQLiteasitspersistentstore,buttheframeworkitselfisnotadatabase. CoreDatadoesnotencryptit’sdatabydefault. Aspartofaresearchproject(iMAS)fromtheMITRECorporation,thatwas focusedonopensourceiOSsecuritycontrols,anadditionalencryptionlayercanbeaddedtoCoreData. SeetheGitHub Repoformoredetails. SQLite Databases TheSQLite3librarymustbeaddedtoanappiftheappistouseSQLite. ThislibraryisaC++wrapperthatprovidesan APIfortheSQLitecommands. Firebase Real-time Databases Firebaseisadevelopmentplatformwithmorethan15products,andoneofthemisFirebaseReal-timeDatabase. Itcan beleveragedbyapplicationdeveloperstostoreandsyncdatawithaNoSQLcloud-hosteddatabase. Thedataisstored asJSONandissynchronizedinreal-timetoeveryconnectedclientandalsoremainsavailableevenwhentheapplication goesoffline. AmisconfiguredFirebaseinstancecanbeidentifiedbymakingthefollowingnetworkcall: https://\\<firebaseProjectName\\>.firebaseio.com/.json The firebaseProjectName can be retrieved from the property list(.plist) file. For example, PROJECT_ID key stores the correspondingFirebaseprojectnameinGoogleService-Info.plistfile. Alternatively,theanalystscanuseFirebaseScanner,apythonscriptthatautomatesthetaskaboveasshownbelow: pythonFirebaseScanner.py -f<commaSeparatedFirebaseProjectNames> Realm Databases Realm Objective-C and Realm Swift aren’t supplied by Apple, but they are still worth noting. They store everything unencrypted,unlesstheconfigurationhasencryptionenabled. ThefollowingexampledemonstrateshowtouseencryptionwithaRealmdatabase: //OpentheencryptedRealmfilewheregetKey()isamethodtoobtainakeyfromtheKeychainora server letconfig =Realm.Configuration(encryptionKey:getKey()) do{ letrealm =tryRealm(configuration:config) //UsetheRealmasnormal }catch leterror asNSError { //Iftheencryptionkeyiswrong,`error`willsaythatit'saninvaliddatabase fatalError(\"Erroropeningrealm: \\(error)\") } Couchbase Lite Databases CouchbaseLiteisalightweight,embedded,document-oriented(NoSQL)databaseenginethatcanbesynced. Itcompiles nativelyforiOSandmacOS. YapDatabase YapDatabaseisakey/valuestorebuiltontopofSQLite. 399\\nUser Interface UI Components Entering sensitive information when, for example, registering an account or making payments, is an essential part of usingmanyapps. Thisdatamaybefinancialinformationsuchascreditcarddataoruseraccountpasswords. Thedata maybeexposediftheappdoesn’tproperlymaskitwhileitisbeingtyped. In order to prevent disclosure and mitigate risks such as shoulder surfing you should verify that no sensitive data is exposed via the user interface unless explicitly required (e.g. a password being entered). For the data required to be presentitshouldbeproperlymasked,typicallybyshowingasterisksordotsinsteadofcleartext. CarefullyreviewallUIcomponentsthateithershowsuchinformationortakeitasinput. Searchforanytracesofsensitive informationandevaluateifitshouldbemaskedorcompletelyremoved. Screenshots Manufacturerswanttoprovidedeviceuserswithanaestheticallypleasingeffectwhenanapplicationisstartedorexited, so they introduced the concept of saving a screenshot when the application goes into the background. This feature can pose a security risk because screenshots (which may display sensitive information such as an email or corporate documents) are written to local storage, where they can be recovered by a rogue application with a sandbox bypass exploitorsomeonewhostealsthedevice. Keyboard Cache Severaloptions,suchasautocorrectandspellcheck,areavailabletouserstosimplifykeyboardinputandarecachedby defaultin.datfilesin/private/var/mobile/Library/Keyboard/anditssubdirectories. The UITextInputTraits protocol is used for keyboard caching. The UITextField, UITextView, and UISearchBar classes automaticallysupportthisprotocolanditoffersthefollowingproperties: • varautocorrectionType:UITextAutocorrectionTypedetermineswhetherautocorrectionisenabledduringtyp- ing. When autocorrection is enabled, the text object tracks unknown words and suggests suitable replacements, replacingthetypedtextautomaticallyunlesstheuseroverridesthereplacement. Thedefaultvalueofthisproperty isUITextAutocorrectionTypeDefault,whichformostinputmethodsenablesautocorrection. • var secureTextEntry: BOOL determines whether text copying and text caching are disabled and hides the text beingenteredforUITextField. ThedefaultvalueofthispropertyisNO. Internal Storage Data Protection API AppdeveloperscanleveragetheiOSDataProtectionAPIstoimplementfine-grainedaccesscontrolforuserdatastored inflashmemory. TheAPIsarebuiltontopoftheSecureEnclaveProcessor(SEP),whichwasintroducedwiththeiPhone 5S.TheSEPisacoprocessorthatprovidescryptographicoperationsfordataprotectionandkeymanagement. Adevice- specifichardwarekey-thedeviceUID(UniqueID)-isembeddedinthesecureenclave,ensuringtheintegrityofdatapro- tectionevenwhentheoperatingsystemkerneliscompromised. YoucanlearnmoreabouttheSecureEnclaveinthisBlackHatpresentation“DemystifyingtheSecureEnclavePro- cessor”byTarjeiMandt,MathewSolnikandDavidWang. Thedataprotectionarchitectureisbasedonahierarchyofkeys. TheUIDandtheuserpasscodekey(whichisderivedfrom theuser’spassphraseviathePBKDF2algorithm)sitatthetopofthishierarchy. Together,theycanbeusedto“unlock” so-calledclasskeys,whichareassociatedwithdifferentdevicestates(e.g.,devicelocked/unlocked). EveryfilestoredontheiOSfilesystemisencryptedwithitsownper-filekey,whichiscontainedinthefilemetadata. The metadataisencryptedwiththefilesystemkeyandwrappedwiththeclasskeycorrespondingtotheprotectionclassthe appselectedwhencreatingthefile. ThefollowingillustrationshowstheiOSDataProtectionKeyHierarchy. 400\\nFiles can be assigned to one of four different protection classes, which are explained in more detail in theiOS Security Guide: • CompleteProtection(NSFileProtectionComplete): AkeyderivedfromtheuserpasscodeandthedeviceUID protectsthisclasskey. Thederivedkeyiswipedfrommemoryshortlyafterthedeviceislocked,makingthedata inaccessibleuntiltheuserunlocksthedevice. • ProtectedUnlessOpen(NSFileProtectionCompleteUnlessOpen): ThisprotectionclassissimilartoComplete Protection,but,ifthefileisopenedwhenunlocked,theappcancontinuetoaccessthefileeveniftheuserlocks thedevice. Thisprotectionclassisusedwhen,forexample,amailattachmentisdownloadinginthebackground. • Protected Until First User Authentication (NSFileProtectionCompleteUntilFirstUserAuthentication): Thefilecanbeaccessedassoonastheuserunlocksthedeviceforthefirsttimeafterbooting. Itcanbeaccessed eveniftheusersubsequentlylocksthedeviceandtheclasskeyisnotremovedfrommemory. • No Protection (NSFileProtectionNone): The key for this protection class is protected with the UID only. The", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 136}}