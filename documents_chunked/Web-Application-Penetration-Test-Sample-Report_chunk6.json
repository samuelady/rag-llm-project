{"text": "& Recommendations 1. Stored Cross-Site Scripting An attacker can use Cross-Site-Scripting to insert malicious JavaScript into the application that could then be executed by another user. Consequences of this vulnerability include sensitive account hijacking, stolen credentials, and sensitive data could be exfiltrated. Recommendations: Cross-site scripting vulnerabilities can be remediated by implemented two countermeasures – input validation and output encoding. These controls restrict impact by sanitizing the user's input to remove special characters and then encoding any remaining special characters before returning the content to the user. ● Input Validation: It is recommended that the user's input is sanitized by removing special characters <,>,',\",&,/ and JavaScript onEvent actions. ● Output Encoding: If special characters are required in the affected parameters, output encoding should be used to replace special characters with their HTML equivalent. (e.g., < becomes <) URL Locations: Instance 1 ● Redacted Instance 2 ● Redacted Instance 3 ● Redacted Instance 4 ● Redacted Additional Resources: ● OWASP Cross-site Scripting\\n2. Authorization Restriction Bypass An attacker can use these instances of broken access controls to discover sensitive application user information and data. This information can be used to further other types of attacks such as phishing, steal user data and cause reputational harm. Recommendations: Enforce authorization controls at a granular level. Ensure that application users only have access to perform actions they have the authorization to do. URL Locations Instance 1 ● Redacted Instance 2 ● Redacted Additional Resources: ● OWASP Broken Access Controls\\n3. Open Redirect An attacker can use this open redirect to steal sensitive cookies from application users. This can be used to further other types of attacks against the application or its users. Recommendations: Ensure that the application validates all URLs and only redirects to whitelisted domains. URL Location ● Redacted Additional Information: ● OWASP Open Redirect\\n4. GraphQL Introspection Enabled An attacker can leverage information returned in the GrapQL introspection query to further other types of attacks against the application. Recommendations: Ensure that GrapQL introspection is not enabled. Additional Information: ● OWASP GraphQL URL Location ● Redacted", "metadata": {"doc_id": "Web-Application-Penetration-Test-Sample-Report", "chunk_id": 6}}