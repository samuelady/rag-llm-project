{"text": "codePath /data/app/sg.vantagepoint.helloworldjni-1/base.apk packageName sg.vantagepoint.helloworldjni androidId c92f43af46f5578d cacheDir /data/local/tmp jniEnv 0x7d30a43c60 Searchallsymbolsofacertainmodulewith:is <lib>,e.g.:is libnative-lib.so. [0x00000000]>\\islibnative-lib.so [0x00000000]> 153\\nWhich are empty in this case. Alternatively, you might prefer to look into the imports/exports. For example, list the importswith:ii <lib>: [0x00000000]>:iilibnative-lib.so 0x7dbe1159d0f__cxa_finalize/system/lib64/libc.so 0x7dbe115868f__cxa_atexit/system/lib64/libc.so Andlisttheexportswith:iE <lib>: [0x00000000]>:iElibnative-lib.so 0x7d1c49954cfJava_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI Forbigbinariesit’srecommendedtopipetheoutputtotheinternallessprogrambyappending~..,i.e.\\iiliban- droid_runtime.so~.. (ifnot,forthisbinary,you’dgetalmost2500linesprintedtoyourterminal). ThenextthingyoumightwanttolookatarethecurrentlyloadedJavaclasses: [0x00000000]>\\ic~sg.vantagepoint.helloworldjni sg.vantagepoint.helloworldjni.MainActivity Listclassfields: [0x00000000]>:icsg.vantagepoint.helloworldjni.MainActivity~sg.vantagepoint.helloworldjni publicnativejava.lang.Stringsg.vantagepoint.helloworldjni.MainActivity.stringFromJNI() publicsg.vantagepoint.helloworldjni.MainActivity() Notethatwe’vefilteredbypackagenameasthisistheMainActivityanditincludesallmethodsfromAndroid’sActivity class. Youcanalsodisplayinformationabouttheclassloader: [0x00000000]>:icL dalvik.system.PathClassLoader[ DexPathList[ [ directory \".\"] , nativeLibraryDirectories=[ /system/lib64, /vendor/lib64, /system/lib64, /vendor/lib64] ] ] java.lang.BootClassLoader@b1f1189dalvik.system.PathClassLoader[ DexPathList[ [ zipfile \"/data/app/sg.vantagepoint.helloworldjni-1/base.apk\"] , nativeLibraryDirectories=[ /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64, /data/app/sg.vantagepoint.helloworldjni-1/base.apk!/lib/arm64-v8a, /system/lib64, /vendor/lib64] ] ] Next,imaginethatyouareinterestedintothemethodexportedbylibnative-lib.so0x7d1c49954c f Java_sg_vantage- point_helloworldjni_MainActivity_stringFromJNI.Youcanseektothataddresswiths 0x7d1c49954c,analyzethat functionafandprint10linesofitsdisassemblypd 10: [0x7d1c49954c]>pdf ;--sym.fun.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI: ╭(fcn)fcn.7d1c49954c18 │ fcn.7d1c49954c (int32_targ_40f942h); │ ;argint32_targ_40f942h@x29+0x40f942 │ 0x7d1c49954c 080040f9 ldrx8, [x0] │ 0x7d1c499550 01000090 adrpx1,0x7d1c499000 │ 0x7d1c499554 21801591 addx1,x1,0x560 ;hit0_4 │ 0x7d1c499558 029d42f9 ldrx2,[x8,0x538] ;[0x538:4]=-1 ;1336 │ 0x7d1c49955c 4000 invalid Note that the line tagged with ; hit0_4 corresponds to the string that we’ve previously found: 0x7d1c499560 hit0_4 Hello from C++. Tolearnmore,pleaserefertother2fridawiki. 154\\nHost-Device Data Transfer Platform: android Using adb Youcancopyfilestoandfromadevicebyusingtheadbcommandsadb pull <remote> <local>andadb push <local> <remote>commands. Theirusageisverystraightforward. Forexample,thefollowingwillcopyfoo.txtfromyourcurrent directory(local)tothesdcardfolder(remote): adbpushfoo.txt/sdcard/foo.txt Thisapproachiscommonlyusedwhenyouknowexactlywhatyouwanttocopyandfrom/towhereandalsosupportsbulk filetransfer,e.g.youcanpull(copy)awholedirectoryfromtheAndroiddevicetoyourhostcomputer. $adbpull/sdcard /sdcard/:1190filespulled.14.1MB/s (304526427bytesin20.566s) Using Android Studio Device File Explorer AndroidStudiohasabuilt-inDeviceFileExplorerwhichyoucanopenbygoingtoView->ToolWindows->DeviceFile Explorer. If you’re using a rooted device you can now start exploring the whole file system. However, when using a non-rooted deviceaccessingtheappsandboxeswon’tworkunlesstheappisdebuggableandeventhenyouare“jailed”withinthe appsandbox. Using objection Thisoptionisusefulwhenyouareworkingonaspecificappandwanttocopyfilesyoumightencounterinsideitssandbox (noticethatyou’llonlyhaveaccesstothefilesthatthetargetapphasaccessto). Thisapproachworkswithouthavingto settheappasdebuggable,whichisotherwiserequiredwhenusingAndroidStudio’sDeviceFileExplorer. First,connecttotheappwithObjectionasexplainedin“RecommendedTools-Objection”. Then,uselsandcdasyou normallywouldonyourterminaltoexploretheavailablefiles: $frida-ps -U|grep -iowasp 21228 sg.vp.owasp_mobile.omtg_android $objection -gsg.vp.owasp_mobile.omtg_androidexplore ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0)[usb] #cd.. /data/user/0/sg.vp.owasp_mobile.omtg_android ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0) [usb] #ls Type ... Name --------- ... ------------------- 155\\nDirectory ... cache Directory ... code_cache Directory ... lib Directory ... shared_prefs Directory ... files Directory ... app_ACRA-approved Directory ... app_ACRA-unapproved Directory ... databases Readable:True Writable:True Oneyouhaveafileyouwanttodownloadyoucanjustrunfile download <some_file>. Thiswilldownloadthatfileto yourworkingdirectory. Thesamewayyoucanuploadfilesusingfile upload. ...[usb] #ls Type ... Name ------ ... ----------------------------------------------- File ... sg.vp.owasp_mobile.omtg_android_preferences.xml Readable:True Writable:True ...[usb] #filedownloadsg.vp.owasp_mobile.omtg_android_preferences.xml Downloading... Streamingfilefromdevice... Writingbytestodestination... Successfullydownloaded...tosg.vp.owasp_mobile.omtg_android_preferences.xml Thedownsideisthat,atthetimeofthiswriting,objectiondoesnotsupportbulkfiletransferyet,soyou’rerestrictedto copyindividualfiles. Still,thiscancomehandyinsomescenarioswhereyou’realreadyexploringtheappusingobjection anywayandfindsomeinterestingfile. Insteadofforexampletakingnoteofthefullpathofthatfileanduseadb pull <path_to_some_file>fromaseparateterminal,youmightjustwanttodirectlydofile download <some_file>. Decompiling Java Code Platform: android InAndroidappsecuritytesting,iftheapplicationisbasedsolelyonJavaanddoesn’thaveanynativecode(C/C++code), thereverseengineeringprocessisrelativelyeasyandrecovers(decompiles)almostallthesourcecode. Inthosecases, black-boxtesting(withaccesstothecompiledbinary,butnottheoriginalsourcecode)cangetprettyclosetowhite-box testing. Nevertheless,ifthecodehasbeenpurposefullyobfuscated(orsometool-breakinganti-decompilationtrickshavebeen applied),thereverseengineeringprocessmaybeverytime-consumingandunproductive. Thisalsoappliestoapplications thatcontainnativecode. Theycanstillbereverseengineered,buttheprocessisnotautomatedandrequiresknowledge oflow-leveldetails. IfyouwanttolookdirectlyintoJavasourcecodeonaGUI,simplyopenyourAPKusingjadxorBytecodeViewer. AndroiddecompilersgoonestepfurtherandattempttoconvertAndroidbytecodebackintoJavasourcecode, making itmorehuman-readable. Fortunately, JavadecompilersgenerallyhandleAndroidbytecodewell. Theabovementioned toolsembed,andsometimesevencombine,popularfreedecompilerssuchas: • JD • JAD • jadx • Procyon • CFR AlternativelyyoucanusetheAPKLabextensionforVisualStudioCodeorrunapkxonyourAPKorusetheexportedfiles fromtheprevioustoolstoopenthereversedsourcecodeonyourpreferredIDE. In the following example we’ll be using UnCrackable App for Android Level 1. First, let’s install the app on a device or emulatorandrunittoseewhatthecrackmeisabout. 156\\nSeemslikewe’reexpectedtofindsomekindofsecretcode! We’relookingforasecretstringstoredsomewhereinsidetheapp,sothenextstepistolookinside. First,unziptheAPK file(unzip UnCrackable-Level1.apk -d UnCrackable-Level1)and lookat thecontent. In thestandardsetup, allthe Javabytecodeandappdataisinthefileclasses.dexintheapprootdirectory(UnCrackable-Level1/). Thisfileconforms totheDalvikExecutableFormat(DEX),anAndroid-specificwayofpackagingJavaprograms. MostJavadecompilerstake plainclassfilesorJARsasinput,soyouneedtoconverttheclasses.dexfileintoaJARfirst. Youcandothiswithdex2jar orenjarify. Once you have a JAR file, you can use any free decompiler to produce Java code. In this example, we’ll use the CFR decompiler. CFRreleasesareavailableontheauthor’swebsite. CFRwasreleasedunderanMITlicense,soyoucanuse itfreelyeventhoughitssourcecodeisnotavailable. The easiest way to run CFR is through apkx, which also packages dex2jar and automates extraction, conversion, and decompilation. RunitontheAPKandyoushouldfindthedecompiledsourcesinthedirectoryUncrackable-Level1/src. Toviewthesources,asimpletexteditor(preferablywithsyntaxhighlighting)isfine,butloadingthecodeintoaJavaIDE makesnavigationeasier. Let’simportthecodeintoIntelliJ,whichalsoprovideson-devicedebuggingfunctionality. Open IntelliJ and select “Android” as the project type in the left tab of the “New Project” dialog. Enter “Uncrack- able1” as the application name and “vantagepoint.sg” as the company name. This results in the package name “sg.vantagepoint.uncrackable1”, which matches the original package name. Using a matching package name is important if you want to attach the debugger to the running app later on because IntelliJ uses the package name to identifythecorrectprocess. Inthe nextdialog, pick any APInumber; you don’t actuallywant to compile the project,", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 72}}