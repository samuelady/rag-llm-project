{"text": "However,ifsensitivedatadoesneedtobeexposedviamemory,makesurethatyourappexposesasfewcopiesofthis dataaspossibleforaslittletimeaspossible. Inotherwords,youwantcentralizedhandlingofsensitivedata,basedon primitiveandmutabledatastructures. Suchdatastructuresgivedevelopersdirectaccesstomemory. Makesurethatthisaccessisusedtooverwritethesensitive data and cryptographic keys with zeroes. Apple Secure Coding Guide suggests zeroing sensitive data after usage, but providesnorecommendedwaysofdoingthis. Examplesofpreferabledatatypesincludechar []andint [],butnotNSStringorString. Wheneveryoutrytomodify animmutableobject,suchasaString,youactuallycreateacopyandchangethecopy. ConsiderusingNSMutableData forstoringsecretsonSwift/Objective-CanduseresetBytes(in:) methodforzeroing. Also,seeCleanmemoryofsecret dataforreference. AvoidSwiftdatatypesotherthancollectionsregardlessofwhethertheyareconsideredmutable. ManySwiftdatatypes holdtheirdatabyvalue,notbyreference. Althoughthisallowsmodificationofthememoryallocatedtosimpletypeslike charandint,handlingacomplextypesuchasStringbyvalueinvolvesahiddenlayerofobjects,structures,orprimitive arrayswhosememorycan’tbedirectlyaccessedormodified. Certaintypesofusagemayseemtocreateamutabledata object (and even be documented as doing so), but they actually create a mutable identifier (variable) instead of an immutableidentifier(constant). Forexample,manythinkthatthefollowingresultsinamutableStringinSwift,butthis isactuallyanexampleofavariablewhosecomplexvaluecanbechanged(replaced,notmodifiedinplace): varstr1 =\"Goodbye\" //\"Goodbye\",baseaddress: 0x0001039e8dd0 str1.append(\"\") //\"Goodbye\",baseaddress: 0x608000064ae0 str1.append(\"cruelworld!\") //\"Goodbyecruelworld\",baseaddress:0x6080000338a0 str1.removeAll() //\"\",baseaddress 0x00010bd66180 Noticethatthebaseaddressoftheunderlyingvaluechangeswitheachstringoperation. Hereistheproblem: Tosecurely erase the sensitive information from memory, we don’t want to simply change the value of the variable; we want to changetheactualcontentofthememoryallocatedforthecurrentvalue. Swiftdoesn’toffersuchafunction. Swiftcollections(Array,Set,andDictionary),ontheotherhand,maybeacceptableiftheycollectprimitivedatatypes suchascharorintandaredefinedasmutable(i.e.,asvariablesinsteadofconstants),inwhichcasetheyaremoreor lessequivalenttoaprimitivearray(suchaschar []). Thesecollectionsprovidememorymanagement,whichcanresult inunidentifiedcopiesofthesensitivedatainmemoryifthecollectionneedstocopytheunderlyingbuffertoadifferent locationtoextendit. UsingmutableObjective-Cdatatypes,suchasNSMutableString,mayalsobeacceptable,butthesetypeshavethesame memory issue as Swift collections. Pay attention when using Objective-C collections; they hold data by reference, and onlyObjective-Cdatatypesareallowed. Therefore,wearelooking,notforamutablecollection,butforacollectionthat referencesmutableobjects. Aswe’veseensofar,usingSwiftorObjective-Cdatatypesrequiresadeepunderstandingofthelanguageimplementa- tion. Furthermore,therehasbeensomecorere-factoringinbetweenmajorSwiftversions,resultinginmanydatatypes’ behaviorbeingincompatiblewiththatofothertypes. Toavoidtheseissues,werecommendusingprimitivedatatypes wheneverdataneedstobesecurelyerasedfrommemory. Unfortunately, few libraries and frameworks are designed to allow sensitive data to be overwritten. Not even Apple considersthisissueintheofficialiOSSDKAPI.Forexample,mostoftheAPIsfordatatransformation(passers,serializes, etc.) operateonnon-primitivedatatypes. Similarly, regardlessofwhetheryouflagsomeUITextFieldasSecureText Entryornot,italwaysreturnsdataintheformofaStringorNSString. 405\\nIPC InterProcessCommunication(IPC)allowsprocessestosendeachothermessagesanddata. Forprocessesthatneedto communicatewitheachother,therearedifferentwaystoimplementIPConiOS: • XPC Services: XPC is a structured, asynchronous library that provides basic interprocess communication. It is managedbylaunchd. ItisthemostsecureandflexibleimplementationofIPConiOSandshouldbethepreferred method. It runs in the most restricted environment possible: sandboxed with no root privilege escalation and minimalfilesystemaccessandnetworkaccess. TwodifferentAPIsareusedwithXPCServices: – NSXPCConnectionAPI – XPCServicesAPI • MachPorts: AllIPCcommunicationultimatelyreliesontheMachKernelAPI.MachPortsallowlocalcommunication (intra-devicecommunication)only. TheycanbeimplementedeithernativelyorviaCoreFoundation(CFMachPort) andFoundation(NSMachPort)wrappers. • NSFileCoordinator: TheclassNSFileCoordinatorcanbeusedtomanageandsenddatatoandfromappsvia filesthatareavailableonthelocalfilesystemtovariousprocesses. NSFileCoordinatormethodsrunsynchronously, so your code will be blocked until they stop executing. That’s convenient because you don’t have to wait for an asynchronousblockcallback,butitalsomeansthatthemethodsblocktherunningthread. Checking Logs for Sensitive Data Platform: ios MASVSV1: MSTG-STORAGE-3 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis Usethefollowingkeywordstochecktheapp’ssourcecodeforpredefinedandcustomloggingstatements: • Forpredefinedandbuilt-infunctions: – NSLog – NSAssert – NSCAssert – fprintf • Forcustomfunctions: – Logging – Logfile AgeneralizedapproachtothisissueistouseadefinetoenableNSLogstatementsfordevelopmentanddebugging,then disablethembeforeshippingthesoftware. YoucandothisbyaddingthefollowingcodetotheappropriatePREFIX_HEADER (*.pch)file: ##ifdefDEBUG ## defineNSLog(...)NSLog(__VA_ARGS__) ##else ## defineNSLog(...) ##endif Dynamic Analysis In the section “Monitoring System Logs” of the chapter “iOS Basic Security Testing” various methods for checking the devicelogsareexplained. Navigatetoascreenthatdisplaysinputfieldsthattakesensitiveuserinformation. After starting one of the methods, fill in the input fields. If sensitive data is displayed in the output, the app fails this test. 406\\nTesting Local Data Storage Platform: ios MASVSV1: MSTG-STORAGE-1,MSTG-STORAGE-2 MASVSV2: MASVS-STORAGE-1 Overview Static Analysis WhenyouhaveaccesstothesourcecodeofaniOSapp,identifysensitivedatathat’ssavedandprocessedthroughout the app. This includes passwords, secret keys, and personally identifiable information (PII), but it may as well include otherdataidentifiedassensitivebyindustryregulations,laws,andcompanypolicies. Lookforthisdatabeingsavedvia anyofthelocalstorageAPIslistedbelow. Makesurethatsensitivedataisneverstoredwithoutappropriateprotection. Forexample,authenticationtokensshould notbesavedinNSUserDefaultswithoutadditionalencryption. Alsoavoidstoringencryptionkeysin.plistfiles,hard- codedasstringsincode,orgeneratedusingapredictableobfuscationfunctionorkeyderivationfunctionbasedonstable attributes. SensitivedatashouldbestoredbyusingtheKeychainAPI(thatstorestheminsidetheSecureEnclave),orstoredencrypted using envelope encryption. Envelope encryption, or key wrapping, is a cryptographic construct that uses symmetric encryption to encapsulate key material. Data encryption keys (DEK) can be encrypted with key encryption keys (KEK) whichmustbesecurelystoredintheKeychain. EncryptedDEKcanbestoredinNSUserDefaultsorwritteninfiles. When required, application reads KEK, then decrypts DEK. Refer to OWASP Cryptographic Storage Cheat Sheet to learn more aboutencryptingcryptographickeys. Keychain TheencryptionmustbeimplementedsothatthesecretkeyisstoredintheKeychainwithsecuresettings,ideallykSe- cAttrAccessibleWhenPasscodeSetThisDeviceOnly. Thisensurestheusageofhardware-backedstoragemechanisms. MakesurethattheAccessControlFlagsaresetaccordingtothesecuritypolicyofthekeysintheKeyChain. GenericexamplesofusingtheKeyChaintostore,update,anddeletedatacanbefoundintheofficialAppledocumentation. TheofficialAppledocumentationalsoincludesanexampleofusingTouchIDandpasscodeprotectedkeys. Filesystem Usingthesourcecode,examinethedifferentAPIsusedtostoredatalocally. Makesurethatanydataisproperlyencrypted basedonitssensitivity. Dynamic Analysis Onewaytodeterminewhethersensitiveinformation(likecredentialsandkeys)isstoredinsecurelywithoutleveraging nativeiOSfunctionsistoanalyzetheapp’sdatadirectory. Triggeringallappfunctionalitybeforethedataisanalyzedis important because the app may store sensitive data only after specific functionality has been triggered. You can then performstaticanalysisforthedatadumpaccordingtogenerickeywordsandapp-specificdata. ThefollowingstepscanbeusedtodeterminehowtheapplicationstoresdatalocallyonajailbrokeniOSdevice: 1. Triggerthefunctionalitythatstorespotentiallysensitivedata. 2. ConnecttotheiOSdeviceandnavigatetoitsBundledirectory(thisappliestoiOSversions8.0andabove): /var/ mobile/Containers/Data/Application/$APP_ID/ 3. Executegrepwiththedatathatyou’vestored,forexample: grep -iRn \"USERID\". 4. Ifthesensitivedataisstoredinplaintext,theappfailsthistest. Youcananalyzetheapp’sdatadirectoryonanon-jailbrokeniOSdevicebyusingthird-partyapplications,suchasiMaz- ing. 407\\n1. Triggerthefunctionalitythatstorespotentiallysensitivedata. 2. ConnecttheiOSdevicetoyourhostcomputerandlaunchiMazing. 3. Select“Apps”,right-clickthedesirediOSapplication,andselect“ExtractApp”. 4. Navigatetotheoutputdirectoryandlocate$APP_NAME.imazing. Renameitto$APP_NAME.zip. 5. UnpacktheZIPfile. Youcanthenanalyzetheapplicationdata. NotethattoolslikeiMazingdon’tcopydatadirectlyfromthedevice. Theytrytoextractdatafromthebackupsthey create. Therefore,gettingalltheappdatathat’sstoredontheiOSdeviceisimpossible: notallfoldersareincluded inbackups. UseajailbrokendeviceorrepackagetheappwithFridaanduseatoollikeobjectiontoaccessallthe dataandfiles. IfyouaddedtheFridalibrarytotheappandrepackageditasdescribedin“DynamicAnalysisonNon-JailbrokenDevices” (from the “Tampering and Reverse Engineering on iOS” chapter), you can use", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 139}}