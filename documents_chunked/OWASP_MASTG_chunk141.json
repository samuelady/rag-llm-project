{"text": "ls:MobileSync:Operationnotpermitted Thisisnotapermissionissueofthebackupfolder, butanewfeatureinmacOSMojave. Youcansolvethisproblemby grantingfulldiskaccesstoyourterminalapplicationbyfollowingtheexplanationonOSXDaily. BeforeyoucanaccessthedirectoryyouneedtoselectthefolderwiththeUDIDofyourdevice. Checkthesection“Getting theUDIDofaniOSdevice”inthe“iOSBasicSecurityTesting”chapteronhowtoretrievetheUDID. OnceyouknowtheUDIDyoucannavigateintothisdirectoryandyouwillfindthefullbackupofthewholedevice,which doesincludepictures,appdataandwhatevermighthavebeenstoredonthedevice. Reviewthedatathat’sinthebackedupfilesandfolders. Thestructureofthedirectoriesandfilenamesisobfuscated andwilllooklikethis: $pwd /Users/foo/Library/ApplicationSupport/MobileSync/Backup/416f01bd160932d2bf2f95f1f142bc29b1c62dcb/00 $ls |head -n3 000127b08898088a8a169b4f63b363a3adcf389b 0001fe89d0d03708d414b36bc6f706f567b08d66 000200a644d7d2c56eec5b89c1921dacbec83c3e Therefore,it’snotstraightforwardtonavigatethroughitandyouwillnotfindanyhintsoftheappyouwanttoanalyzein thedirectoryorfilename. YoucanconsiderusingtheiMazingsharewareutilitytoassisthere. Performadevicebackup withiMazinganduseitsbuilt-inbackupexplorertoeasilyanalyzeappcontainercontentsincludingoriginalpathsandfile names. WithoutiMazingorsimilarsoftwareyoumayneedtoresorttousinggreptoidentifysensitivedata. Thisisnotthemost thoroughapproachbutyoucantrysearchingforsensitivedatathatyouhavekeyedinwhileusingtheappbeforeyou madethebackup. Forexample: theusername,password,creditcarddata,PIIoranydatathatisconsideredsensitivein thecontextoftheapp. ~/Library/ApplicationSupport/MobileSync/Backup/<UDID> grep -iRn \"password\" . AsdescribedintheStaticAnalysissection,anysensitivedatathatyou’reabletofindshouldbeexcludedfromthebackup, encryptedproperlybyusingtheKeychainornotstoredonthedeviceinthefirstplace. Toidentifyifabackupisencrypted,youcancheckthekeynamed“IsEncrypted”fromthefile“Manifest.plist”,locatedat therootofthebackupdirectory. Thefollowingexampleshowsaconfigurationindicatingthatthebackupisencrypted: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC\"-//Apple//DTDPLIST1.0//EN\"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> ... <key>Date</key> <date>2021-03-12T17:43:33Z</date> <key>IsEncrypted</key> <true/> ... </plist> 411\\nIn case you need to work with an encrypted backup, there are some Python scripts in DinoSec’s GitHub repo, such as backup_tool.pyandbackup_passwd.py,thatwillserveasagoodstartingpoint. However,notethattheymightnotwork withthelatestiTunes/Finderversionsandmightneedtobetweaked. YoucanalsousethetooliOSbackuptoeasilyreadandextractfilesfromapassword-encryptediOSbackup. Proof of Concept: Removing UI Lock with Tampered Backup Asdiscussedearlier,sensitivedataisnotlimitedtojustuserdataandPII.Itcanalsobeconfigurationorsettingsfilesthat affectappbehavior,restrictfunctionality,orenablesecuritycontrols. Ifyoutakealookattheopensourcebitcoinwallet app,Bither,you’llseethatit’spossibletoconfigureaPINtolocktheUI.Andafterafeweasysteps,youwillseehowto bypassthisUIlockwithamodifiedbackuponanon-jailbrokendevice. Afteryouenablethepin,useiMazingtoperformadevicebackup: 1. SelectyourdevicefromthelistundertheAVAILABLEmenu. 2. ClickthetopmenuoptionBackUp. 3. Followpromptstocompletethebackupusingdefaults. Nextyoucanopenthebackuptoviewappcontainerfileswithinyourtargetapp: 1. SelectyourdeviceandclickBackupsonthetoprightmenu. 2. ClickthebackupyoucreatedandselectView. 3. NavigatetotheBitherappfromtheAppsdirectory. 412\\nAtthispointyoucanviewallthebackedupcontentforBither. This is where you can begin parsing through the files looking for sensitive data. In the screenshot you’ll see the net. bither.plistfilewhichcontainsthepin_codeattribute. ToremovetheUIlockrestriction,simplydeletethepin_code attributeandsavethechanges. Fromthereit’spossibletoeasilyrestorethemodifiedversionofnet.bither.plistbackontothedeviceusingthelicensed versionofiMazing. Thefreeworkaround,however,istofindtheplistfileintheobfuscatedbackupgeneratedbyiTunes/Finder. Socreateyour backupofthedevicewithBither’sPINcodeconfigured. Then,usingthestepsdescribedearlier,findthebackupdirectory andgrepfor“pin_code”asshownbelow. $~/Library/ApplicationSupport/MobileSync/Backup/<UDID> $grep -iRn \"pin_code\" . Binaryfile./13/135416dd5f251f9251e0f07206277586b7eac6f6matches You’llseetherewasamatchonabinaryfilewithanobfuscatedname. Thisisyournet.bither.plistfile. Goaheadand renamethefilegivingitaplistextensionsoXcodecaneasilyopenitupforyou. 413\\nAgain,removethepin_codeattributefromtheplistandsaveyourchanges. Renamethefilebacktotheoriginalname (i.e.,withouttheplistextension)andperformyourbackuprestore. Whentherestoreiscompleteyou’llseethatBitherno longerpromptsyouforthePINcodewhenlaunched. Finding Sensitive Data in the Keyboard Cache Platform: ios MASVSV1: MSTG-STORAGE-5 MASVSV2: MASVS-STORAGE-2 Overview Static Analysis • Searchthroughthesourcecodeforsimilarimplementations,suchas textObject.autocorrectionType =UITextAutocorrectionTypeNo; textObject.secureTextEntry =YES; • OpenxibandstoryboardfilesintheInterface BuilderofXcodeandverifythestatesofSecure Text Entryand CorrectionintheAttributes Inspectorfortheappropriateobject. The application must prevent the caching of sensitive information entered into text fields. You can prevent caching by disablingitprogrammatically,usingthetextObject.autocorrectionType = UITextAutocorrectionTypeNodirectivein thedesiredUITextFields, UITextViews, andUISearchBars. Fordatathatshouldbemasked, suchasPINsandpasswords, settextObject.secureTextEntrytoYES. UITextField *textField =[[UITextFieldalloc ]initWithFrame:frame ]; textField.autocorrectionType =UITextAutocorrectionTypeNo; Dynamic Analysis IfajailbrokeniPhoneisavailable,executethefollowingsteps: 1. ResetyouriOSdevicekeyboardcachebynavigatingtoSettings > General > Reset > Reset Keyboard Dictio- nary. 414\\n2. Usetheapplicationandidentifythefunctionalitiesthatallowuserstoentersensitivedata. 3. Dumpthekeyboardcachefilewiththeextension.datinthefollowingdirectoryanditssubdirectories. (whichmight bedifferentforiOSversionsbefore8.0): /private/var/mobile/Library/Keyboard/ 4. Lookforsensitivedata,suchasusername,passwords,emailaddresses,andcreditcardnumbers. Ifthesensitive datacanbeobtainedviathekeyboardcachefile,theappfailsthistest. UITextField *textField =[[UITextFieldalloc ]initWithFrame:frame ]; textField.autocorrectionType =UITextAutocorrectionTypeNo; Ifyoumustuseanon-jailbrokeniPhone: 1. Resetthekeyboardcache. 2. Keyinallsensitivedata. 3. Usetheappagainanddeterminewhetherautocorrectsuggestspreviouslyenteredsensitiveinformation. Determining Whether Sensitive Data Is Shared with Third Parties Platform: ios MASVSV1: MSTG-STORAGE-4 MASVSV2: MASVS-STORAGE-2 Overview Sensitiveinformationmightbeleakedtothirdpartiesbyseveralmeans. OniOStypicallyviathird-partyservicesembed- dedintheapp. The features these services provide can involve tracking services to monitor the user’s behavior while using the app, sellingbanneradvertisements,orimprovingtheuserexperience. Thedownsideisthatdevelopersdon’tusuallyknowthedetailsofthecodeexecutedviathird-partylibraries. Consequently, nomoreinformationthanisnecessaryshouldbesenttoaservice,andnosensitiveinformationshouldbedisclosed. Mostthird-partyservicesareimplementedintwoways: • withastandalonelibrary • withafullSDK Static Analysis To determine whether API calls and functions provided by the third-party library are used according to best practices, reviewtheirsourcecode,requestedpermissionsandcheckforanyknownvulnerabilities. Alldatathat’ssenttothird-partyservicesshouldbeanonymizedtopreventexposureofPII(PersonalIdentifiableInforma- tion)thatwouldallowthethirdpartytoidentifytheuseraccount. Nootherdata(suchasIDsthatcanbemappedtoa useraccountorsession)shouldbesenttoathirdparty. Dynamic Analysis Check all requests to external services for embedded sensitive information. To intercept traffic between the client and server,youcanperformdynamicanalysisbylaunchingaman-in-the-middle(MITM)attackwithBurpSuiteProfessionalor OWASPZAP.Onceyouroutethetrafficthroughtheinterceptionproxy,youcantrytosniffthetrafficthatpassesbetween theappandserver. Allapprequeststhataren’tsentdirectlytotheserveronwhichthemainfunctionishostedshould becheckedforsensitiveinformation,suchasPIIinatrackeroradservice. 415\\niOS Cryptographic APIs Overview Inthe“MobileAppCryptography”chapter,weintroducedgeneralcryptographybestpracticesanddescribedtypicalissues thatcanoccurwhencryptographyisusedincorrectly. Inthischapter,we’llgointomoredetailoniOS’scryptographyAPIs. We’llshowhowtoidentifyusageofthoseAPIsinthesourcecodeandhowtointerpretcryptographicconfigurations. When reviewingcode,makesuretocomparethecryptographicparametersusedwiththecurrentbestpracticeslinkedfromthis guide. Appleprovideslibrariesthatincludeimplementationsofmostcommoncryptographicalgorithms. Apple’sCryptographic ServicesGuideisagreatreference. Itcontainsgeneralizeddocumentationofhowtousestandardlibrariestoinitialize andusecryptographicprimitives,informationthatisusefulforsourcecodeanalysis. CryptoKit AppleCryptoKitwasreleasedwithiOS13andisbuiltontopofApple’snativecryptographiclibrarycorecryptowhichis FIPS140-2validated. TheSwiftframeworkprovidesastronglytypedAPIinterface,haseffectivememorymanagement, conformstoequatable,andsupportsgenerics. CryptoKitcontainssecurealgorithmsforhashing,symmetric-keycryptog- raphy, and public-key cryptography. The framework can also utilize the hardware based key manager from the Secure Enclave. AppleCryptoKitcontainsthefollowingalgorithms: Hashes: • MD5(InsecureModule) • SHA1(InsecureModule) • SHA-2256-bitdigest • SHA-2384-bitdigest • SHA-2512-bitdigest Symmetric-Key: • MessageAuthenticationCodes(HMAC) • AuthenticatedEncryption – AES-GCM – ChaCha20-Poly1305 Public-Key: • KeyAgreement – Curve25519 – NISTP-256 – NISTP-384 – NISTP-512 Examples: Generatingandreleasingasymmetrickey: letencryptionKey=SymmetricKey(size:.bits256) CalculatingaSHA-2512-bitdigest: letrawString=\"OWASPMTSG\" letrawData=Data(rawString.utf8) lethash=SHA512.hash(data:rawData)//Computethedigest lettextHash=String(describing:hash) print(textHash)//Printhashtext FormoreinformationaboutAppleCryptoKit,pleasevisitthefollowingresources: 416\\n• AppleCryptoKit|AppleDeveloperDocumentation • PerformingCommonCryptographicOperations|AppleDeveloperDocumentation • WWDC2019session709|CryptographyandYourApps • HowtocalculatetheSHAhashofaStringorDatainstance|HackingwithSwift CommonCrypto, SecKey and Wrapper libraries ThemostcommonlyusedClassforcryptographicoperationsistheCommonCrypto,whichispackedwiththeiOSruntime. ThefunctionalityofferedbytheCommonCryptoobjectcanbestbedissectedbyhavingalookatthesourcecodeofthe headerfile: • TheCommoncryptor.hgivestheparametersforthesymmetriccryptographicoperations. • TheCommonDigest.hgivestheparametersforthehashingAlgorithms. • TheCommonHMAC.hgivestheparametersforthesupportedHMACoperations. • TheCommonKeyDerivation.hgivestheparametersforsupportedKDFfunctions. • TheCommonSymmetricKeywrap.hgivesthefunctionusedforwrappingasymmetrickeywithaKeyEncryptionKey. Unfortunately,CommonCryptorlacksafewtypesofoperationsinitspublicAPIs,suchas: GCMmodeisonlyavailablein itsprivateAPIsSeeitssourcecode. Forthis,anadditionalbindingheaderisnecessaryorotherwrapperlibrariescanbe used. Next,forasymmetricoperations,AppleprovidesSecKey. AppleprovidesaniceguideinitsDeveloperDocumentationon howtousethis. Asnotedbefore: somewrapper-librariesexistforbothinordertoprovideconvenience. Typicallibrariesthatareusedare, forinstance: • IDZSwiftCommonCrypto • Heimdall • SwiftyRSA • RNCryptor • Arcane Third party libraries Therearevariousthirdpartylibrariesavailable,suchas: • CJOSE:WiththeriseofJWE,andthelackofpublicsupportforAESGCM,otherlibrarieshavefoundtheirway,such asCJOSE.CJOSEstillrequiresahigherlevelwrappingastheyonlyprovideaC/C++implementation. • CryptoSwift: AlibraryinSwift,whichcanbefoundatGitHub. Thelibrarysupportsvarioushash-functions,MAC- functions,CRC-functions,symmetricciphers,andpassword-basedkeyderivationfunctions. Itisnotawrapper,but afullyself-implementedversionofeachoftheciphers.", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 141}}