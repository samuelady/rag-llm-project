{"text": "legacy apps: when running an app targeting Android 5.1 (API level 22) or lowerforthefirsttime,userswillbepromptedwithapermissionsscreenwheretheycanrevokeaccesstospecific legacypermissions(whichpreviouslywouldbeautomaticallygrantedatinstallationtime). Permission Enforcement ActivityPermissionEnforcement: 248\\nPermissions are applied via android:permission attribute within the <activity> tag in the manifest. These permis- sionsrestrictwhichapplicationscanstartthatActivity. ThepermissionischeckedduringContext.startActivityand Activity.startActivityForResult. NotholdingtherequiredpermissionresultsinaSecurityExceptionbeingthrown fromthecall. ServicePermissionEnforcement: Permissions applied via android:permission attribute within the <service> tag in the manifest restrict who can start orbindtotheassociatedService. ThepermissionischeckedduringContext.startService,Context.stopServiceand Context.bindService. NotholdingtherequiredpermissionresultsinaSecurityExceptionbeingthrownfromthecall. BroadcastPermissionEnforcement: Permissionsappliedviaandroid:permissionattributewithinthe<receiver>tagrestrictaccesstosendbroadcaststothe associatedBroadcastReceiver. TheheldpermissionsarecheckedafterContext.sendBroadcastreturns, whiletrying todeliverthesentbroadcasttothegivenreceiver. Notholdingtherequiredpermissionsdoesn’tthrowanexception,the resultisanunsentbroadcast. ApermissioncanbesuppliedtoContext.registerReceivertocontrolwhocanbroadcasttoaprogrammaticallyregis- teredreceiver. Goingtheotherway,apermissioncanbesuppliedwhencallingContext.sendBroadcasttorestrictwhich broadcastreceiversareallowedtoreceivethebroadcast. Notethatbothareceiverandabroadcastercanrequireapermission. Whenthishappens,bothpermissionchecksmust passfortheintenttobedeliveredtotheassociatedtarget. Formoreinformation,pleasereferencethesection“Restricting broadcastswithpermissions”intheAndroidDevelopersDocumentation. ContentProviderPermissionEnforcement: Permissions applied via android:permission attribute within the <provider> tag restrict access to data in a Content- Provider. Content providers have an important additional security facility called URI permissions which is described next. Unlike the other components, ContentProviders have two separate permission attributes that can be set, an- droid:readPermissionrestrictswhocanreadfromtheprovider,andandroid:writePermissionrestrictswhocanwrite toit. IfaContentProviderisprotectedwithbothreadandwritepermissions,holdingonlythewritepermissiondoesnot alsograntreadpermissions. PermissionsarecheckedwhenyoufirstretrieveaproviderandasoperationsareperformedusingtheContentProvider. Us- ingContentResolver.queryrequiresholdingthereadpermission;usingContentResolver.insert,ContentResolver. update, ContentResolver.delete requires the write permission. A SecurityException will be thrown from the call if properpermissionsarenotheldinallthesecases. ContentProviderURIPermissions: Thestandardpermissionsystemisnotsufficientwhenbeingusedwithcontentproviders. Forexampleacontentprovider maywanttolimitpermissionstoREADpermissionsinordertoprotectitself,whileusingcustomURIstoretrieveinforma- tion. AnapplicationshouldonlyhavethepermissionforthatspecificURI. The solution is per-URI permissions. When starting or returning a result from an activity, the method can set Intent. FLAG_GRANT_READ_URI_PERMISSIONand/orIntent.FLAG_GRANT_WRITE_URI_PERMISSION.Thisgrantspermissiontothe activityforthespecificURIregardlessifithaspermissionstoaccesstodatafromthecontentprovider. This allows a common capability-style model where user interaction drives ad-hoc granting of fine-grained permission. This can be a key facility for reducing the permissions needed by apps to only those directly related to their behavior. Withoutthismodelinplacemalicioususersmayaccessothermember’semailattachmentsorharvestcontactlistsfor futureuseviaunprotectedURIs. Inthemanifesttheandroid:grantUriPermissionsattributeorthenodehelprestrict theURIs. HereyoucanfindmoreinformationaboutAPIsrelatedtoURIPermissions: • grantUriPermission • revokeUriPermission • checkUriPermission Custom Permissions Androidallowsappstoexposetheirservices/componentstootherapps. Custompermissionsarerequiredforappaccess totheexposedcomponents. YoucandefinecustompermissionsinAndroidManifest.xmlbycreatingapermissiontag withtwomandatoryattributes: android:nameandandroid:protectionLevel. 249\\nIt is crucial to create custom permissions that adhere to the Principle of Least Privilege: permission should be defined explicitlyforitspurpose,withameaningfulandaccuratelabelanddescription. BelowisanexampleofacustompermissioncalledSTART_MAIN_ACTIVITY,whichisrequiredwhenlaunchingtheTEST_- ACTIVITYActivity. Thefirstcodeblockdefinesthenewpermission,whichisself-explanatory. Thelabeltagisasummaryofthepermission, andthedescriptionisamoredetailedversionofthesummary. Youcansettheprotectionlevelaccordingtothetypesof permissionsthatwillbegranted. Onceyou’vedefinedyourpermission,youcanenforceitbyaddingittotheapplication’s manifest. Inourexample,thesecondblockrepresentsthecomponentthatwearegoingtorestrictwiththepermission wecreated. Itcanbeenforcedbyaddingtheandroid:permissionattributes. <permission android:name=\"com.example.myapp.permission.START_MAIN_ACTIVITY\" android:label=\"StartActivityinmyapp\" android:description=\"Allowtheapptolaunchtheactivityofmyappapp,anyappyougrantthispermissionwillbeable tolaunchmainactivitybymyapp ↪ app.\" android:protectionLevel=\"normal\" /> <activity android:name=\"TEST_ACTIVITY\" android:permission=\"com.example.myapp.permission.START_MAIN_ACTIVITY\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\" /> <category android:name=\"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> OncethepermissionSTART_MAIN_ACTIVITYhasbeencreated, appscanrequestitviatheuses-permissiontaginthe AndroidManifest.xmlfile. AnyapplicationgrantedthecustompermissionSTART_MAIN_ACTIVITYcanthenlaunchthe TEST_ACTIVITY. Please note <uses-permission android:name=\"myapp.permission.START_MAIN_ACTIVITY\" /> must bedeclaredbeforethe<application>oranexceptionwilloccuratruntime. Pleaseseetheexamplebelowthatisbased onthepermissionoverviewandmanifest-intro. <manifest> <uses-permission android:name=\"com.example.myapp.permission.START_MAIN_ACTIVITY\" /> <application> <activity> </activity> </application> </manifest> We recommend using a reverse-domain annotation when registering a permission, as in the example above (e.g. com. domain.application.permission)inordertoavoidcollisionswithotherapplications. WebViews URL Loading in WebViews WebViews are Android’s embedded components which allow your app to open web pages within your application. In additiontomobileappsrelatedthreats,WebViewsmayexposeyourapptocommonwebthreats(e.g.XSS,OpenRedirect, etc.). OneofthemostimportantthingstodowhentestingWebViewsistomakesurethatonlytrustedcontentcanbeloaded init. Anynewlyloadedpagecouldbepotentiallymalicious,trytoexploitanyWebViewbindingsortrytophishtheuser. Unlessyou’redevelopingabrowserapp,usuallyyou’dliketorestrictthepagesbeingloadedtothedomainofyourapp. A goodpracticeistopreventtheuserfromevenhavingthechancetoinputanyURLsinsideWebViews(whichisthedefault onAndroid)nornavigateoutsidethetrusteddomains. Evenwhennavigatingontrusteddomainsthere’sstilltheriskthat theusermightencounterandclickonotherlinkstountrustworthycontent(e.g.ifthepageallowsforotheruserstopost comments). Inaddition,somedevelopersmightevenoverridesomedefaultbehaviorwhichcanbepotentiallydangerous fortheuser. SafeBrowsing API Toprovideasaferwebbrowsingexperience, Android8.1(APIlevel27)introducestheSafeBrowsing API,whichallows yourapplicationtodetectURLsthatGooglehasclassifiedasaknownthreat. 250\\nBydefault, WebViewsshowawarningtousersaboutthesecurityriskwiththeoptiontoloadtheURLorstopthepage fromloading. WiththeSafeBrowsingAPIyoucancustomizeyourapplication’sbehaviorbyeitherreportingthethreatto SafeBrowsingorperformingaparticularactionsuchasreturningbacktosafetyeachtimeitencountersaknownthreat. PleasechecktheAndroidDevelopersdocumentationforusageexamples. YoucanusetheSafeBrowsingAPIindependentlyfromWebViewsusingtheSafetyNetlibrary,whichimplementsaclient for Safe Browsing Network Protocol v4. SafetyNet allows you to analyze all the URLs that your app is supposed load. YoucancheckURLswithdifferentschemes(e.g.http,file)sinceSafeBrowsingisagnostictoURLschemes,andagainst TYPE_POTENTIALLY_HARMFUL_APPLICATIONandTYPE_SOCIAL_ENGINEERINGthreattypes. WhensendingURLsorfilestobecheckedforknownthreatsmakesuretheydon’tcontainsensitivedatawhichcould compromiseauser’sprivacy,orexposesensitivecontentfromyourapplication. Virus Total API VirusTotalprovidesanAPIforanalyzingURLsandlocalfilesforknownthreats. TheAPIReferenceisavailableonVirus Totaldeveloperspage. JavaScript Execution in WebViews JavaScriptcanbeinjectedintowebapplicationsviareflected,stored,orDOM-basedCross-SiteScripting(XSS).Mobileapps are executed in a sandboxed environment and don’t have this vulnerability when implemented natively. Nevertheless, WebViews may be part of a native app to allow web page viewing. Every app has its own WebView cache, which isn’t shared with the native Browser or other apps. On Android, WebViews use the WebKit rendering engine to display web pages,butthepagesarestrippeddowntominimalfunctions,forexample,pagesdon’thaveaddressbars. IftheWebView implementationistoolaxandallowsusageofJavaScript,JavaScriptcanbeusedtoattacktheappandgainaccesstoits data. WebView Protocol Handlers SeveraldefaultschemasareavailableforAndroidURLs. TheycanbetriggeredwithinaWebViewwiththefollowing: • http(s):// • file:// • tel:// WebViewscanloadremotecontentfromanendpoint,buttheycanalsoloadlocalcontentfromtheappdatadirectoryor externalstorage. Ifthelocalcontentisloaded,theusershouldn’tbeabletoinfluencethefilenameorthepathusedto loadthefile,andusersshouldn’tbeabletoedittheloadedfile. Java Objects Exposed Through WebViews AndroidoffersawayforJavaScriptexecutioninaWebViewtocallandusenativefunctionsofanAndroidapp(annotated with @JavascriptInterface) by using the addJavascriptInterface method. This is known as a", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 97}}