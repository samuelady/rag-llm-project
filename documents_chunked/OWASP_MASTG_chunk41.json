{"text": "personality, sleepless nights and strained relationships. 42\\nIt’s easy for beginners to get overwhelmed by the sheer scope of reversing. The best way to get started is to set up some basic tools (see the relevant sections in the Android and iOS reversing chapters) and start with simple reversing tasks and crackmes. You’ll need to learn about the assembler/bytecode language, the operating system, obfuscations youencounter,andsoon. Startwithsimpletasksandgraduallyleveluptomoredifficultones. Inthefollowingsection,we’llgiveanoverviewofthetechniquesmostcommonlyusedinmobileappsecuritytesting. In laterchapters,we’lldrilldownintoOS-specificdetailsofbothAndroidandiOS. Basic Tampering Techniques Binary Patching Patchingistheprocessofchangingthecompiledapp,e.g.,changingcodeinbinaryexecutables,modifyingJavabytecode, ortamperingwithresources. Thisprocessisknownasmoddinginthemobilegamehackingscene. Patchescanbeapplied inmanyways,includingeditingbinaryfilesinahexeditoranddecompiling,editing,andre-assemblinganapp. We’llgive detailedexamplesofusefulpatchesinlaterchapters. Keep in mind that modern mobile operating systems strictly enforce code signing, so running modified apps is not as straightforwardasitusedtobeindesktopenvironments. Securityexpertshadamucheasierlifeinthe90s! Fortunately, patchingisnot verydifficultifyouworkonyourowndevice. Yousimplyhavetore-signtheappordisablethedefault codesignatureverificationfacilitiestorunmodifiedcode. Code Injection Codeinjectionisaverypowerfultechniquethatallowsyoutoexploreandmodifyprocessesatruntime. Injectioncanbe implementedinvariousways,butyou’llgetbywithoutknowingallthedetailsthankstofreelyavailable,well-documented toolsthatautomatetheprocess. Thesetoolsgiveyoudirectaccesstoprocessmemoryandimportantstructuressuchas liveobjectsinstantiatedbytheapp. Theycomewithmanyutilityfunctionsthatareusefulforresolvingloadedlibraries, hookingmethodsandnativefunctions,andmore. Processmemorytamperingismoredifficulttodetectthanfilepatching, soitisthepreferredmethodinmostcases. Substrate,Frida,andXposedarethemostwidelyusedhookingandcodeinjectionframeworksinthemobileindustry. The threeframeworksdifferindesignphilosophyandimplementationdetails: SubstrateandXposedfocusoncodeinjection and/orhooking, whileFridaaimstobeafull-blown“dynamicinstrumentationframework”, incorporatingcodeinjection, languagebindings,andaninjectableJavaScriptVMandconsole. However,youcanalsoinstrumentappswithSubstratebyusingittoinjectCycript,theprogrammingenvironment(aka “Cycript-to-JavaScript”compiler)authoredbySaurikofCydiafame. Tocomplicatethingsevenmore,Frida’sauthorsalso created a fork of Cycript called “frida-cycript”. It replaces Cycript’s runtime with a Frida-based runtime called Mjølner. This enables Cycript to run on all the platforms and architectures maintained by frida-core (if you are confused at this point,don’tworry). Thereleaseoffrida-cycriptwasaccompaniedbyablogpostbyFrida’sdeveloperOletitled“Cycript onSteroids”,atitlethatSaurikwasn’tveryfondof. We’llincludeexamplesofallthreeframeworks. WerecommendstartingwithFridabecauseitisthemostversatileofthe three(forthisreason,we’llalsoincludemoreFridadetailsandexamples). Notably,FridacaninjectaJavaScriptVMintoa processonbothAndroidandiOS,whileCycriptinjectionwithSubstrateonlyworksoniOS.Ultimately,however,youcan ofcourseachievemanyofthesamegoalswitheitherframework. Static and Dynamic Binary Analysis Reverseengineeringistheprocessofreconstructingthesemanticsofacompiledprogram’ssourcecode. Inotherwords, youtaketheprogramapart,runit,simulatepartsofit,anddootherunspeakablethingstoittounderstandwhatitdoes andhow. 43\\nUsing Disassemblers and Decompilers Disassemblersanddecompilersallowyoutotranslateanapp’sbinarycodeorbytecodebackintoamoreorlessunder- standableformat. Byusingthesetoolsonnativebinaries,youcanobtainassemblercodethatmatchesthearchitecture theappwascompiledfor. Disassemblersconvertmachinecodetoassemblycodewhichinturnisusedbydecompilers togenerateequivalenthigh-levellanguagecode. AndroidJavaappscanbedisassembledtosmali,whichisanassembly languagefortheDEXformatusedbyDalvik,Android’sJavaVM.Smaliassemblycanalsobequiteeasilydecompiledback toequivalentJavacode. Intheory,themappingbetweenassemblyandmachinecodeshouldbeone-to-one,andthereforeitmaygivetheimpres- sionthatdisassemblingisasimpletask. Butinpractice,therearemultiplepitfallssuchas: • Reliabledistinctionbetweencodeanddata. • Variableinstructionsize. • Indirectbranchinstructions. • FunctionswithoutexplicitCALLinstructionswithintheexecutable’scodesegment. • Positionindependentcode(PIC)sequences. • Handcraftedassemblycode. Similarly,decompilationisaverycomplicatedprocess,involvingmanydeterministicandheuristicbasedapproaches. Asa consequence,decompilationisusuallynotreallyaccurate,butneverthelessveryhelpfulingettingaquickunderstanding of the function being analyzed. The accuracy of decompilation depends on the amount of information available in the code being decompiled and the sophistication of the decompiler. In addition, many compilation and post-compilation tools introduce additional complexity to the compiled code in order to increase the difficulty of comprehension and/or evendecompilationitself. Suchcodereferredtoasobfuscatedcode. Overthepastdecadesmanytoolshaveperfectedtheprocessofdisassemblyanddecompilation,producingoutputwith high fidelity. Advanced usage instructions for any of the available tools can often easily fill a book of their own. The best way to get started is to simply pick up a tool that fits your needs and budget and get a well-reviewed user guide. Inthissection, wewillprovideanintroductiontosomeofthosetoolsandinthesubsequent“ReverseEngineeringand Tampering”AndroidandiOSchapterswe’llfocusonthetechniquesthemselves,especiallythosethatarespecifictothe platformathand. Obfuscation Obfuscationistheprocessoftransformingcodeanddatatomakeitmoredifficulttocomprehend(andsometimeseven difficult to disassemble). It is usually an integral part of the software protection scheme. Obfuscation isn’t something thatcanbesimplyturnedonoroff,programscanbemadeincomprehensible,inwholeorinpart,inmanywaysandto differentdegrees. Note: Allpresentedtechniquesbelowwillnotstopsomeonewithenoughtimeandbudgetfromreverseengineer- ing your app. However, combining these techniques will make their job significantly harder. The aim is thus to discouragereverseengineersfromperformingfurtheranalysisandnotmakingitworththeeffort. Thefollowingtechniquescanbeusedtoobfuscateanapplication: • Nameobfuscation • Instructionsubstitution • Controlflowflattening • Deadcodeinjection • Stringencryption • Packing Name Obfuscation The standard compiler generates binary symbols based on class and function names from the source code. Therefore, if no obfuscation is applied, symbol names remain meaningful and can easily be extracted from the app binary. For instance, afunctionwhichdetectsajailbreakcanbelocatedbysearchingforrelevantkeywords(e.g.“jailbreak”). The listingbelowshowsthedisassembledfunctionJailbreakDetectionViewController.jailbreakTest4Tappedfromthe DamnVulnerableiOSApp(DVIA-v2). 44\\n__T07DVIA_v232JailbreakDetectionViewControllerC20jailbreakTest4TappedyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Aftertheobfuscationwecanobservethatthesymbol’snameisnolongermeaningfulasshownonthelistingbelow. __T07DVIA_v232zNNtWKQptikYUBNBgfFVMjSkvRdhhnbyyFySbyypF: stp x22,x21,[sp,#-0x30]! mov rbp,rsp Nevertheless,thisonlyappliestothenamesoffunctions,classesandfields. Theactualcoderemainsunmodified,soan attackercanstillreadthedisassembledversionofthefunctionandtrytounderstanditspurpose(e.g.toretrievethelogic ofasecurityalgorithm). Instruction Substitution This technique replaces standard binary operators like addition or subtraction with more complex representations. For example,anadditionx = a + bcanberepresentedasx = -(-a) - (-b). However,usingthesamereplacementrepre- sentation could be easily reversed, so it is recommended to add multiple substitution techniques for a single case and introducearandomfactor. Thistechniquecanbereversedduringdecompilation,butdependingonthecomplexityand depthofthesubstitutions,reversingitcanstillbetimeconsuming. Control Flow Flattening Controlflowflatteningreplacesoriginalcodewithamorecomplexrepresentation. Thetransformationbreaksthebodyof afunctionintobasicblocksandputsthemallinsideasingleinfiniteloopwithaswitchstatementthatcontrolstheprogram flow. This makes the program flow significantly harder to follow because it removes the natural", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 41}}