{"text": "mobileappworld,sosecuritytestersneedwaystodealwiththeseprotections. Webelievethere’sabenefittoclient-side protectionsiftheyareemployedwithaclearpurposeandrealisticexpectationsinmindandaren’tusedtoreplacesecurity controls. Navigating the OWASP MASTG The MASTG contains descriptions of all requirements specified in the MASVS. The MASTG contains the following main sections: 1. The General Testing Guide contains a mobile app security testing methodology and general vulnerability analy- sis techniques as they apply to mobile app security. It also contains additional technical test cases that are OS- independent,suchasauthenticationandsessionmanagement,networkcommunications,andcryptography. 2. TheAndroidTestingGuidecoversmobilesecuritytestingfortheAndroidplatform,includingsecuritybasics,security testcases,reverseengineeringtechniquesandprevention,andtamperingtechniquesandprevention. 3. The iOS Testing Guide covers mobile security testing for the iOS platform, including an overview of the iOS OS, securitytesting,reverseengineeringtechniquesandprevention,andtamperingtechniquesandprevention. 27\\nMobile Application Taxonomy The term “mobile application” or “mobile app” refers to a self-contained computer program designed to execute on a mobile device. Today, the Android and iOS operating systems cumulatively comprisemore than 99% of the mobile OS marketshare. Additionally,mobileInternetusagehassurpasseddesktopusageforthefirsttimeinhistory,makingmobile browsingandappsthemostwidespreadkindofInternet-capableapps. Inthisguide,we’llusetheterm“app”asageneraltermforreferringtoanykindofapplicationrunningonpopular mobileOSes. Inabasicsense,appsaredesignedtoruneitherdirectlyontheplatformforwhichthey’redesigned,ontopofasmart device’smobilebrowser,orusingamixofthetwo. Throughoutthefollowingchapter,wewilldefinecharacteristicsthat qualifyanappforitsrespectiveplaceinmobileapptaxonomyaswellasdiscussdifferencesforeachvariation. Native App Mobileoperatingsystems,includingAndroidandiOS,comewithaSoftwareDevelopmentKit(SDK)fordevelopingapps specifictotheOS.Suchappsarereferredtoasnativetothesystemforwhichtheyhavebeendeveloped. Whendiscussing an app, the general assumption is that it is a native app implemented in a standard programming language for the respectiveoperatingsystem-Objective-CorSwiftforiOS,andJavaorKotlinforAndroid. Nativeappsinherentlyhavethecapabilitytoprovidethefastestperformancewiththehighestdegreeofreliability. They usuallyadheretoplatform-specificdesignprinciples(e.g.theAndroidDesignPrinciples),whichtendstoresultinamore consistentuserinterface(UI)comparedtohybridorwebapps. Duetotheircloseintegrationwiththeoperatingsystem, native apps can directly access almost every component of the device (camera, sensors, hardware-backed key stores, etc.). Some ambiguity exists when discussing native apps for Android as the platform provides two development kits - the AndroidSDKandtheAndroidNDK.TheSDK,whichisbasedontheJavaandKotlinprogramminglanguage,isthedefault fordevelopingapps. TheNDK(orNativeDevelopmentKit)isaC/C++developmentkitusedfordevelopingbinarylibraries thatcandirectlyaccesslowerlevelAPIs(suchasOpenGL).Theselibrariescanbeincludedinregularappsbuiltwiththe SDK.Therefore,wesaythatAndroidnativeapps(i.e.builtwiththeSDK)mayhavenativecodebuiltwiththeNDK. Themostobviousdownsideofnativeappsisthattheytargetonlyonespecificplatform. Tobuildthesameappforboth AndroidandiOS,oneneedstomaintaintwoindependentcodebases,orintroduceoftencomplexdevelopmenttoolsto portasinglecodebasetotwoplatforms. Thefollowingframeworksareanexampleofthelatterandallowyoutocompile asinglecodebaseforbothAndroidandiOS. • Xamarin • GoogleFlutter • ReactNative AppsdevelopedusingtheseframeworksinternallyusetheAPIsnativetothesystemandofferperformanceequivalent tonativeapps. Also,theseappscanmakeuseofalldevicecapabilities,includingtheGPS,accelerometer,camera,the notificationsystem,etc. Sincethefinaloutputisverysimilartopreviouslydiscussednativeapps,appsdevelopedusing theseframeworkscanalsobeconsideredasnativeapps. Web App Mobilewebapps(orsimply,webapps)arewebsitesdesignedtolookandfeellikeanativeapp. Theseappsrunontopof adevice’sbrowserandareusuallydevelopedinHTML5,muchlikeamodernwebpage. Launchericonsmaybecreated toparallelthesamefeelofaccessinganativeapp;however,theseiconsareessentiallythesameasabrowserbookmark, simplyopeningthedefaultwebbrowsertoloadthereferencedwebpage. Webappshavelimitedintegrationwiththegeneralcomponentsofthedeviceastheyrunwithintheconfinesofabrowser (i.e.theyare“sandboxed”)andusuallylackinperformancecomparedtonativeapps. Sinceawebapptypicallytargets multiple platforms, their UIs do not follow some of the design principles of a specific platform. The biggest advantage is reduced development and maintenance costs associated with a single code base as well as enabling developers to 28\\ndistributeupdateswithoutengagingtheplatform-specificappstores. Forexample,achangetotheHTMLfileforaweb app can serve as viable, cross-platform update whereas an update to a store-based app requires considerably more effort. Hybrid App Hybridappsattempttofillthegapbetweennativeandwebapps. Ahybridappexecuteslikeanativeapp,butamajority oftheprocessesrelyonwebtechnologies,meaningaportionoftheapprunsinanembeddedwebbrowser(commonly called“WebView”). Assuch,hybridappsinheritbothprosandconsofnativeandwebapps. A web-to-native abstraction layer enables access to device capabilities for hybrid apps not accessible to a pure web app. Dependingontheframeworkusedfordevelopment,onecodebasecanresultinmultipleappsthattargetdifferent platforms,withaUIcloselyresemblingthatoftheoriginalplatformforwhichtheappwasdeveloped. Followingisanon-exhaustivelistofmorepopularframeworksfordevelopinghybridapps: • ApacheCordova • Framework7 • Ionic • jQueryMobile • NativeScript • OnsenUI • SenchaTouch Progressive Web App ProgressiveWebApps(PWA)loadlikeregularwebpages, butdifferfromusualwebappsinseveralways. Forexample it’spossibletoworkofflineandaccesstomobiledevicehardwareispossible,thattraditionallyisonlyavailabletonative mobileapps. PWAs combine different open standards of the web offered by modern browsers to provide benefits of a rich mobile experience. A Web App Manifest, which is a simple JSON file, can be used to configure the behavior of the app after “installation”. PWAsaresupportedbyAndroidandiOS,butnotallhardwarefeaturesareyetavailable. ForexamplePushNotifications, FaceIDoniPhoneXorARKitforaugmentedrealityisnotavailableyetoniOS.AnoverviewofPWAandsupportedfeatures oneachplatformcanbefoundinaMediumarticlefromMaximilianoFirtman. What’s Covered in the Mobile Testing Guide Throughoutthisguide,wewillfocusonappsforAndroidandiOSrunningonsmartphones. Theseplatformsarecurrently dominating the market and also run on other device classes including tablets, smartwatches, smart TVs, automotive infotainmentunits,andotherembeddedsystems. Eveniftheseadditionaldeviceclassesareoutofscope,youcanstill applymostoftheknowledgeandtestingtechniquesdescribedinthisguidewithsomedeviancedependingonthetarget device. Given the vast amount of mobile app frameworks available it would be impossible to cover all of them exhaustively. Therefore, we focus on native apps on each operating system. However, the same techniques are also useful when dealingwithweborhybridapps(ultimately,nomattertheframework,everyappisbasedonnativecomponents). 29\\nMobile Application Security Testing In the following sections we’ll provide a brief overview of general security testing principles and key terminology. The conceptsintroducedarelargelyidenticaltothosefoundinothertypesofpenetrationtesting,soifyouareanexperienced testeryoumaybefamiliarwithsomeofthecontent. Throughout the guide, we use “mobile app security testing” as a catchall phrase to refer to the evaluation of mobile appsecurityviastaticanddynamicanalysis. Termssuchas“mobileapppenetrationtesting”and“mobileappsecurity", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 35}}