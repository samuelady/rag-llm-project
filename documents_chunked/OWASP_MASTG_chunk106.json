{"text": "ofdatathattheappisexpectingonly. Ifvalidationisnotenforced,anyinputcanbesenttotheapp,whichmayallowan attackerormaliciousapptoexploitappfunctionality. Static Analysis Check for Android OS Version The Android version in which the app runs also influences the risk of using deep links. Inspect the Android Manifest to checkifminSdkVersionis31orhigher. • BeforeAndroid12(APIlevel31),iftheapphasanynon-verifiabledeeplinks,itcancausethesystemtonotverify allAndroidAppLinksforthatapp. • StartingonAndroid12(APIlevel31), appsbenefitfromareducedattacksurface. Agenericwebintentresolves totheuser’sdefaultbrowserappunlessthetargetappisapprovedforthespecificdomaincontainedinthatweb intent. 280\\nCheck for Deep Link Usage InspectingtheAndroidManifest: Youcaneasilydeterminewhetherdeeplinks(withorwithoutcustomURLschemes)aredefinedbydecodingtheappusing apktoolandinspectingtheAndroidManifestfilelookingfor<intent-filter>elements. • CustomUrlSchemes: ThefollowingexamplespecifiesadeeplinkwithacustomURLschemecalledmyapp://. <activity android:name=\".MyUriActivity\"> <intent-filter> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"myapp\" android:host=\"path\" /> </intent-filter> </activity> • Deep Links: ThefollowingexamplespecifiesadeepLinkusingboththehttp://andhttps://schemes,along withthehostandpaththatwillactivateit(inthiscase, thefullURLwouldbehttps://www.myapp.com/my/app/ path): <intent-filter> ... <data android:scheme=\"http\" android:host=\"www.myapp.com\" android:path=\"/my/app/path\" /> <data android:scheme=\"https\" android:host=\"www.myapp.com\" android:path=\"/my/app/path\" /> </intent-filter> • AppLinks:Ifthe<intent-filter>includestheflagandroid:autoVerify=\"true\",thiscausestheAndroidsystem toreachouttothedeclaredandroid:hostinanattempttoaccesstheDigitalAssetLinksfileinordertoverifythe AppLinks. AdeeplinkcanbeconsideredanAppLinkonlyiftheverificationissuccessful. <intent-filter android:autoVerify=\"true\"> Whenlistingdeeplinksrememberthat<data>elementswithinthesame<intent-filter>areactuallymergedtogether toaccountforallvariationsoftheircombinedattributes. <intent-filter> ... <data android:scheme=\"https\" android:host=\"www.example.com\" /> <data android:scheme=\"app\" android:host=\"open.my.app\" /> </intent-filter> It might seem as though this supports only https://www.example.com and app://open.my.app. However, it actually supports: • https://www.example.com • app://open.my.app • app://www.example.com • https://open.my.app UsingDumpsys: Useadbtorunthefollowingcommandthatwillshowallschemes: adbshelldumpsyspackagecom.example.package UsingAndroid“AppLinkVerification”Tester: UsetheAndroid“AppLinkVerification”Testerscripttolistalldeeplinks(list-all)oronlyapplinks(list-applinks): python3deeplink_analyser.py -oplist-all -apk ~/Downloads/example.apk .MainActivity app://open.my.app app://www.example.com https://open.my.app https://www.example.com 281\\nCheck for Correct Website Association Evenifdeeplinkscontaintheandroid:autoVerify=\"true\"attribute,theymustbeactuallyverifiedinordertobecon- sideredAppLinks. Youshouldtestforanypossiblemisconfigurationsthatmightpreventfullverification. Automatic Verification UsetheAndroid“AppLinkVerification”Testerscripttogettheverificationstatusforallapplinks(verify-applinks). See anexamplehere. OnlyonAndroid12(APIlevel31)orhigher: YoucanuseadbtotesttheverificationlogicregardlessofwhethertheapptargetsAndroid12(APIlevel31)ornot. This featureallowsyouto: • invoketheverificationprocessmanually. • resetthestateofthetargetapp’sAndroidAppLinksonyourdevice. • invokethedomainverificationprocess. Youcanalsoreviewtheverificationresults. Forexample: adbshellpmget-app-linkscom.example.package com.example.package: ID:01234567-89ab-cdef-0123-456789abcdef Signatures: [***] Domainverificationstate: example.com:verified sub.example.com:legacy_failure example.net:verified example.org:1026 Thesameinformationcanbefoundbyrunningadbshelldumpsyspackagecom.example.package(onlyonAndroid 12(APIlevel31)orhigher). Manual Verification Thissectiondetailsafew,ofpotentiallymany,reasonswhytheverificationprocessfailedorwasnotactuallytriggered. See more information in the Android Developers Documentation and in the white paper “Measuring the Insecurity of MobileDeepLinksofAndroid”. ChecktheDigitalAssetLinksfile: • CheckformissingDigitalAssetLinksfile: – try to find it in the domain’s /.well-known/ path. Example: https://www.example.com/.well-known/ assetlinks.json – or try https://digitalassetlinks.googleapis.com/v1/statements:list?source.web.site=www. example.com • CheckforvalidDigitalAssetLinksfileservedviaHTTP. • CheckforinvalidDigitalAssetLinksfilesservedviaHTTPS.Forexample: – thefilecontainsinvalidJSON. – thefiledoesn’tincludethetargetapp’spackage. CheckforRedirects: Toenhancetheappsecurity,thesystemdoesn’tverifyanyAndroidAppLinksforanappiftheserversetsaredirectsuch ashttp://example.comtohttps://example.comorexample.comtowww.example.com. CheckforSubdomains: If an intent filter lists multiple hosts with different subdomains, there must be a valid Digital Asset Links file on each domain. Forexample,thefollowingintentfilterincludeswww.example.comandmobile.example.comasacceptedintent URLhosts. 282\\n<application> <activity android:name=”MainActivity”> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"https\" /> <data android:scheme=\"https\" /> <data android:host=\"www.example.com\" /> <data android:host=\"mobile.example.com\" /> </intent-filter> </activity> </application> Inorderforthedeeplinkstocorrectlyregister,avalidDigitalAssetLinksfilemustbepublishedatbothhttps://www. example.com/.well-known/assetlinks.jsonandhttps://mobile.example.com/.well-known/assetlinks.json. CheckforWildcards: Ifthehostnameincludesawildcard(suchas*.example.com),youshouldbeabletofindavalidDigitalAssetLinksfileat theroothostname: https://example.com/.well-known/assetlinks.json. Check the Handler Method Even if the deep link is correctly verified, the logic of the handler method should be carefully analyzed. Pay special attentiontodeeplinksbeingusedtotransmitdata(whichiscontrolledexternallybytheuseroranyotherapp). First,obtainthenameoftheActivityfromtheAndroidManifest<activity>elementwhichdefinesthetarget<intent- filter>andsearchforusageofgetIntentandgetData. Thisgeneralapproachoflocatingthesemethodscanbeused acrossmostapplicationswhenperformingreverseengineeringandiskeywhentryingtounderstandhowtheapplication usesdeeplinksandhandlesanyexternallyprovidedinputdataandifitcouldbesubjecttoanykindofabuse. ThefollowingexampleisasnippetfromanexemplaryKotlinappdecompiledwithjadx. Fromthestaticanalysisweknow thatitsupportsthedeeplinkdeeplinkdemo://load.html/aspartofcom.mstg.deeplinkdemo.WebViewActivity. //snippeteditedforsimplicity public final class WebViewActivity extends AppCompatActivity { private ActivityWebViewBindingbinding; public void onCreate(BundlesavedInstanceState){ Uridata =getIntent().getData(); Stringhtml =data ==null ?null :data.getQueryParameter(\"html\"); Uridata2 =getIntent().getData(); Stringdeeplink_url =data2 ==null ?null :data2.getQueryParameter(\"url\"); ViewfindViewById =findViewById(R.id.webView); if(findViewById !=null){ WebViewwv =(WebView)findViewById; wv.getSettings().setJavaScriptEnabled(true); if(deeplink_url !=null){ wv.loadUrl(deeplink_url); ... You can simply follow the deeplink_url String variable and see the result from the wv.loadUrl call. This means the attackerhasfullcontroloftheURLbeingloadedtotheWebView(asshownabovehasJavaScriptenabled. ThesameWebViewmightbealsorenderinganattackercontrolledparameter. Inthatcase,thefollowingdeeplinkpayload wouldtriggerReflectedCross-SiteScripting(XSS)withinthecontextoftheWebView: deeplinkdemo://load.html?attacker_controlled=<svgonload=alert(1)> Buttherearemanyotherpossibilities. Besuretocheckthefollowingsectionstolearnmoreaboutwhattoexpectand howtotestdifferentscenarios: • “Cross-SiteScriptingFlaws”. • “InjectionFlaws”. • “TestingObjectPersistence”. • “TestingforURLLoadinginWebViews” • “TestingJavaScriptExecutioninWebViews” • “TestingWebViewProtocolHandlers” 283\\nInaddition,werecommendtosearchandreadpublicreports(searchterm: \"deep link*\"|\"deeplink*\" site:https:// hackerone.com/reports/). Forexample: • “[HackerOne#1372667]Abletostealbearertokenfromdeeplink” • “[HackerOne#401793]Insecuredeeplinkleadstosensitiveinformationdisclosure” • “[HackerOne#583987]AndroidappdeeplinkleadstoCSRFinfollowaction” • “[HackerOne#637194]BypassofbiometricssecurityfunctionalityispossibleinAndroidapplication” • “[HackerOne#341908]XSSviaDirectMessagedeeplinks” Dynamic Analysis Here you will use the list of deep links from the static analysis to iterate and determine each handler method and the processeddata,ifany. YouwillfirststartaFridahookandthenbegininvokingthedeeplinks. Thefollowingexampleassumesatargetappthatacceptsthisdeeplink: deeplinkdemo://load.html. However,wedon’t knowthecorrespondinghandlermethodyet,northeparametersitpotentiallyaccepts. [Step1]FridaHooking: Youcanusethescript“AndroidDeepLinkObserver”fromFridaCodeSharetomonitorallinvokeddeeplinkstriggeringa calltoIntent.getData. Youcanalsousethescriptasabasetoincludeyourownmodificationsdependingontheuse case at hand. In this case we included the stack trace in the script since we are interested in the method which calls Intent.getData. [Step2]InvokingDeepLinks: Now you can invoke any of the deep links using adb and the Activity Manager (am) which will", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 106}}