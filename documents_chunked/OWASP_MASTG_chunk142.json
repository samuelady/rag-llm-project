{"text": "libraries ThemostcommonlyusedClassforcryptographicoperationsistheCommonCrypto,whichispackedwiththeiOSruntime. ThefunctionalityofferedbytheCommonCryptoobjectcanbestbedissectedbyhavingalookatthesourcecodeofthe headerfile: • TheCommoncryptor.hgivestheparametersforthesymmetriccryptographicoperations. • TheCommonDigest.hgivestheparametersforthehashingAlgorithms. • TheCommonHMAC.hgivestheparametersforthesupportedHMACoperations. • TheCommonKeyDerivation.hgivestheparametersforsupportedKDFfunctions. • TheCommonSymmetricKeywrap.hgivesthefunctionusedforwrappingasymmetrickeywithaKeyEncryptionKey. Unfortunately,CommonCryptorlacksafewtypesofoperationsinitspublicAPIs,suchas: GCMmodeisonlyavailablein itsprivateAPIsSeeitssourcecode. Forthis,anadditionalbindingheaderisnecessaryorotherwrapperlibrariescanbe used. Next,forasymmetricoperations,AppleprovidesSecKey. AppleprovidesaniceguideinitsDeveloperDocumentationon howtousethis. Asnotedbefore: somewrapper-librariesexistforbothinordertoprovideconvenience. Typicallibrariesthatareusedare, forinstance: • IDZSwiftCommonCrypto • Heimdall • SwiftyRSA • RNCryptor • Arcane Third party libraries Therearevariousthirdpartylibrariesavailable,suchas: • CJOSE:WiththeriseofJWE,andthelackofpublicsupportforAESGCM,otherlibrarieshavefoundtheirway,such asCJOSE.CJOSEstillrequiresahigherlevelwrappingastheyonlyprovideaC/C++implementation. • CryptoSwift: AlibraryinSwift,whichcanbefoundatGitHub. Thelibrarysupportsvarioushash-functions,MAC- functions,CRC-functions,symmetricciphers,andpassword-basedkeyderivationfunctions. Itisnotawrapper,but afullyself-implementedversionofeachoftheciphers. Itisimportanttoverifytheeffectiveimplementationofa function. • OpenSSL:OpenSSListhetoolkitlibraryusedforTLS,writteninC.Mostofitscryptographicfunctionscanbeused todothevariouscryptographicactionsnecessary,suchascreating(H)MACs,signatures,symmetric-&asymmetric ciphers,hashing,etc.. Therearevariouswrappers,suchasOpenSSLandMIHCrypto. • LibSodium: Sodium is a modern, easy-to-use software library for encryption, decryption, signatures, password hashingandmore. Itisaportable,cross-compilable,installable,packageableforkofNaCl,withacompatibleAPI, andanextendedAPItoimproveusabilityevenfurther. SeeLibSodiumsdocumentationformoredetails. Thereare somewrapperlibraries,suchasSwift-sodium,NAChloride,andlibsodium-ios. • Tink: AnewcryptographylibrarybyGoogle. Googleexplainsitsreasoningbehindthelibraryonitssecurityblog. ThesourcescanbefoundatTinksGitHubrepository. • Themis: a Crypto library for storage and messaging for Swift, Obj-C, Android/Java, С++, JS, Python, Ruby, PHP, Go. Themis uses LibreSSL/OpenSSL engine libcrypto as a dependency. It supports Objective-C and Swift for key generation,securemessaging(e.g.payloadencryptionandsigning),securestorageandsettingupasecuresession. Seetheirwikiformoredetails. • Others: Therearemanyotherlibraries,suchasCocoaSecurity,Objective-C-RSA,andaerogear-ios-crypto. Some ofthesearenolongermaintainedandmightneverhavebeensecurityreviewed. Likealways,itisrecommended tolookforsupportedandmaintainedlibraries. 417\\n• DIY: An increasing amount of developers have created their own implementation of a cipher or a cryptographic function. This practice is highly discouraged and should be vetted very thoroughly by a cryptography expert if used. Key Management Therearevariousmethodsonhowtostorethekeyonthedevice. Notstoringakeyatallwillensurethatnokeymaterial canbedumped. ThiscanbeachievedbyusingaPasswordKeyDerivationfunction,suchasPKBDF-2. Seetheexample below: funcpbkdf2SHA1(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA1),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2SHA256(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA256),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2SHA512(password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ returnpbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA512),password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } funcpbkdf2(hash:CCPBKDFAlgorithm,password:String,salt:Data,keyByteCount:Int,rounds:Int)->Data?{ letpasswordData=password.data(using:String.Encoding.utf8)! varderivedKeyData=Data(repeating:0,count:keyByteCount) letderivedKeyDataLength=derivedKeyData.count letderivationStatus=derivedKeyData.withUnsafeMutableBytes{derivedKeyBytesin salt.withUnsafeBytes{saltBytesin CCKeyDerivationPBKDF( CCPBKDFAlgorithm(kCCPBKDF2), password,passwordData.count, saltBytes,salt.count, hash, UInt32(rounds), derivedKeyBytes,derivedKeyDataLength ) } } ifderivationStatus!=0{ //Error returnnil } returnderivedKeyData } functestKeyDerivation(){ letpassword=\"password\" letsalt=Data([0x73,0x61,0x6C,0x74,0x44,0x61,0x74,0x61]) letkeyByteCount=16 letrounds=100_000 letderivedKey=pbkdf2SHA1(password:password,salt:salt,keyByteCount:keyByteCount,rounds:rounds) } • Source: https://stackoverflow.com/questions/8569555/pbkdf2-using-commoncrypto-on-ios,testedinthetestsuite oftheArcanelibrary When you need to store the key, it is recommended to use the Keychain as long as the protection class chosen is not kSecAttrAccessibleAlways. Storingkeysinanyotherlocation,suchastheNSUserDefaults,propertylistfilesorbyany othersinkfromCoreDataorRealm,isusuallylesssecurethanusingtheKeyChain. EvenwhenthesyncofCoreDataor RealmisprotectedbyusingNSFileProtectionCompletedataprotectionclass,westillrecommendusingtheKeyChain. Seethechapter“DataStorageoniOS”formoredetails. TheKeyChainsupportstwotypeofstoragemechanisms: akeyiseithersecuredbyanencryptionkeystoredinthesecure enclaveorthekeyitselfiswithinthesecureenclave. ThelatteronlyholdswhenyouuseanECDHsigningkey. Seethe AppleDocumentationformoredetailsonitsimplementation. Thelastthreeoptionsconsistofusinghardcodedencryptionkeysinthesourcecode,havingapredictablekeyderivation functionbasedonstableattributes,andstoringgeneratedkeysinplacesthataresharedwithotherapplications. Using hardcoded encryption keys is obviously not the way to go, as this would mean that every instance of the application usesthesameencryptionkey. Anattackerneedsonlytodotheworkonceinordertoextractthekeyfromthesource code(whetherstorednativelyorinObjective-C/Swift). Consequently,theattackercandecryptanyotherdatathatwas encryptedbytheapplication. Next,whenyouhaveapredictablekeyderivationfunctionbasedonidentifierswhichare 418\\naccessibletootherapplications,theattackeronlyneedstofindtheKDFandapplyittothedeviceinordertofindthekey. Lastly,storingsymmetricencryptionkeyspubliclyalsoishighlydiscouraged. Twomorenotionsyoushouldneverforgetwhenitcomestocryptography: 1. Alwaysencrypt/verifywiththepublickeyandalwaysdecrypt/signwiththeprivatekey. 2. Neverreusethekey(pair)foranotherpurpose: thismightallowleakinginformationaboutthekey: haveaseparate keypairforsigningandaseparatekey(pair)forencryption. Random Number Generator AppleprovidesaRandomizationServicesAPI,whichgeneratescryptographicallysecurerandomnumbers. TheRandomizationServicesAPIusestheSecRandomCopyBytesfunctiontogeneratenumbers. Thisisawrapperfunction forthe/dev/randomdevicefile,whichprovidescryptographicallysecurepseudorandomvaluesfrom0to255. Makesure thatallrandomnumbersaregeneratedwiththisAPI.Thereisnoreasonfordeveloperstouseadifferentone. Verifying the Configuration of Cryptographic Standard Algorithms Platform: ios MASVSV1: MSTG-CRYPTO-2,MSTG-CRYPTO-3 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis Foreachofthelibrariesthatareusedbytheapplication,theusedalgorithmsandcryptographicconfigurationsneedto beverifiedtomakesuretheyarenotdeprecatedandusedcorrectly. Payattentiontohow-to-be-removedkey-holdingdatastructuresandplain-textdatastructuresaredefined. Ifthekeyword letisused,thenyoucreateanimmutablestructurewhichishardertowipefrommemory. Makesurethatitispartofa parentstructurewhichcanbeeasilyremovedfrommemory(e.g.astructthatlivestemporally). Ensurethatthebestpracticesoutlinedinthe“CryptographyforMobileApps”chapterarefollowed. Lookatinsecureand deprecatedalgorithmsandcommonconfigurationissues. CommonCryptor IftheappusesstandardcryptographicimplementationsprovidedbyApple, theeasiestwaytodeterminethestatusof therelatedalgorithmistocheckforcallstofunctionsfromCommonCryptor,suchasCCCryptandCCCryptorCreate. The sourcecodecontainsthesignaturesofallfunctionsofCommonCryptor.h. Forinstance,CCCryptorCreatehasfollowing signature: CCCryptorStatusCCCryptorCreate( CCOperationop, /*kCCEncrypt,etc.*/ CCAlgorithmalg, /*kCCAlgorithmDES,etc.*/ CCOptionsoptions, /*kCCOptionPKCS7Padding,etc.*/ const void *key, /*rawkeymaterial*/ size_t keyLength, const void *iv, /*optionalinitializationvector*/ CCCryptorRef *cryptorRef); /*RETURNED*/ Youcanthencomparealltheenumtypestodeterminewhichalgorithm,padding,andkeymaterialisused. Payattention tothekeyingmaterial: thekeyshouldbegeneratedsecurely-eitherusingakeyderivationfunctionorarandom-number generationfunction. Notethatfunctionswhicharenotedinchapter“CryptographyforMobileApps”asdeprecated,are stillprogrammaticallysupported. Theyshouldnotbeused. 419\\nThird party libraries Giventhecontinuousevolutionofallthirdpartylibraries,thisshouldnotbetheplacetoevaluateeachlibraryintermsof staticanalysis. Stilltherearesomepointsofattention: • Findthelibrarybeingused: Thiscanbedoneusingthefollowingmethods: – CheckthecartfileifCarthageisused. – CheckthepodfileifCocoapodsisused. – Checkthelinkedlibraries: Openthexcodeprojfileandchecktheprojectproperties. GototheBuildPhases tabandchecktheentriesinLinkBinaryWithLibrariesforanyofthelibraries. Seeearliersectionsonhow toobtainsimilarinformationusingMobSF. – Inthecaseofcopy-pastedsources: searchtheheaderfiles(incaseofusingObjective-C)andotherwisethe Swiftfilesforknownmethodnamesforknownlibraries. • Determinetheversionbeingused: Alwayschecktheversionofthelibrarybeingusedandcheckwhetherthere is a new version available in which possible vulnerabilities or shortcomings are patched. Even without a newer version of a library, it can be the case that cryptographic functions have not been reviewed yet. Therefore we always recommend using a library that has been validated or ensure that you have the ability, knowledge and experiencetodovalidationyourself. • Byhand?: Werecommendnottorollyourowncrypto,nortoimplementknowncryptographicfunctionsyourself. Testing Key Management Platform: ios MASVSV1: MSTG-CRYPTO-1,MSTG-CRYPTO-5 MASVSV2: MASVS-CRYPTO-2 Overview Static Analysis Therearevariouskeywordstolookfor: checkthelibrariesmentionedintheoverviewandstaticanalysisofthesection “VerifyingtheConfigurationofCryptographicStandardAlgorithms”forwhichkeywordsyoucanbestcheckonhowkeys arestored. Alwaysmakesurethat: • keysarenotsynchronizedoverdevicesifitisusedtoprotecthigh-riskdata. • keysarenotstoredwithoutadditionalprotection. • keysarenothardcoded. • keysarenotderivedfromstablefeaturesofthedevice. • keysarenothiddenbyuseoflowerlevellanguages(e.g.C/C++). • keysarenotimportedfromunsafelocations. Checkalsothelistofcommoncryptographicconfigurationissues. Mostoftherecommendationsforstaticanalysiscanalreadybefoundinchapter“TestingDataStorageforiOS”.Next,you canreaduponitatthefollowingpages: • AppleDeveloperDocumentation: Certificatesandkeys • AppleDeveloperDocumentation: Generatingnewkeys • AppleDeveloperDocumentation: Keygenerationattributes Dynamic Analysis Hookcryptographicmethodsandanalyzethekeysthatarebeingused. Monitorfilesystemaccesswhilecryptographic operationsarebeingperformedtoassesswherekeymaterialiswrittentoorreadfrom. 420\\nTesting Random Number Generation Platform: ios MASVSV1: MSTG-CRYPTO-6 MASVSV2: MASVS-CRYPTO-1 Overview Static Analysis", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 142}}