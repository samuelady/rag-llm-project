{"text": "flag --no-src if you only want to unpack the APK but not disassemble the code. Forexample,whenyouonlywanttomodifytheAndroidManifestandrepackimmediately. Patching Example: Disabling Certificate Pinning Certificate pinning is an issue for security testers who want to intercept HTTPS communication for legitimate reasons. PatchingbytecodetodeactivateSSLpinningcanhelpwiththis. Todemonstratebypassingcertificatepinning,we’llwalk throughanimplementationinanexampleapplication. Onceyou’veunpackedanddisassembledtheAPK,it’stimetofindthecertificatepinningchecksintheSmalisourcecode. Searchingthecodeforkeywordssuchas“X509TrustManager”shouldpointyouintherightdirection. Inourexample,asearchfor“X509TrustManager”returnsoneclassthatimplementsacustomTrustManager. Thederived classimplementsthemethodscheckClientTrusted,checkServerTrusted,andgetAcceptedIssuers. To bypass the pinning check, add the return-void opcode to the first line of each method. This opcode causes the checkstoreturnimmediately. Withthismodification,nocertificatechecksareperformed,andtheapplicationacceptsall certificates. .methodpubliccheckServerTrusted([LJava/security/cert/X509Certificate;Ljava/lang/String;)V .locals3 .paramp1,\"chain\" #[Ljava/security/cert/X509Certificate; .paramp2,\"authType\" #Ljava/lang/String; .prologue return-void #<--OURINSERTEDOPCODE! .line102 iget-objectv1,p0,Lasdf/t$a;->a:Ljava/util/ArrayList; invoke-virtual{v1},Ljava/util/ArrayList;->iterator()Ljava/util/Iterator; move-result-objectv1 :goto_0 invoke-interface{v1},Ljava/util/Iterator;->hasNext()Z This modification will break the APK signature, so you’ll also have to re-sign the altered APK archive after repackaging it. Patching Example: Making an App Debuggable Every debugger-enabled process runs an extra thread for handling JDWP protocol packets. This thread is started only forappsthathavetheandroid:debuggable=\"true\"flagsetintheirmanifestfile’s<application>element. Thisisthe typicalconfigurationofAndroiddevicesshippedtoendusers. When reverse engineering apps, you’ll often have access to the target app’s release build only. Release builds aren’t meanttobedebugged,that’sthepurposeofdebugbuilds. Ifthesystempropertyro.debuggableissetto“0”,Android disallowsbothJDWPandnativedebuggingofreleasebuilds. Althoughthisiseasytobypass,you’restilllikelytoencounter limitations,suchasalackoflinebreakpoints. Nevertheless,evenanimperfectdebuggerisstillaninvaluabletool,being abletoinspecttheruntimestateofaprogrammakesunderstandingtheprogramaloteasier. Toconvert areleasebuildintoadebuggablebuild, youneedtomodifyaflagintheAndroidManifestfile(AndroidMani- fest.xml). Onceyou’veunpackedtheapp(e.g.apktoold--no-srcUnCrackable-Level1.apk)anddecodedtheAndroid Manifest,addandroid:debuggable=\"true\"toitusingatexteditor: <application android:allowBackup=\"true\" android:debuggable=\"true\" android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\" ↪ android:name=\"com.xxx.xxx.xxx\" android:theme=\"@style/AppTheme\"> Evenifwehaven’talteredthesourcecode,thismodificationalsobreakstheAPKsignature,soyou’llalsohavetore-sign thealteredAPKarchive. 123\\nPatching React Native applications IftheReactNativeframeworkhasbeenusedfordevelopingthenthemainapplicationcodeislocatedinthefileassets/ index.android.bundle. ThisfilecontainstheJavaScriptcode. Mostofthetime,theJavaScriptcodeinthisfileisminified. ByusingthetoolJStilleryahumanreadableversionofthefilecanberetrieved,allowingcodeanalysis. TheCLIversion ofJStilleryorthelocalservershouldbepreferredinsteadofusingtheonlineversionasotherwisesourcecodeissentand disclosedtoa3rdparty. ThefollowingapproachcanbeusedinordertopatchtheJavaScriptfile: 1. UnpacktheAPKarchiveusingapktooltool. 2. Copythecontentofthefileassets/index.android.bundleintoatemporaryfile. 3. UseJStillerytobeautifyanddeobfuscatethecontentofthetemporaryfile. 4. Identifywherethecodeshouldbepatchedinthetemporaryfileandimplementthechanges. 5. Putthepatchedcodeonasinglelineandcopyitintheoriginalassets/index.android.bundlefile. 6. RepacktheAPKarchiveusingapktooltoolandsignitbeforeinstallingitonthetargetdevice/emulator. Retrieving Strings Platform: android While performing any kind of binary analysis, strings can be considered as one of the most valuable starting points as they provide context. For example, an error log string like “Data encryption failed.” gives us a hint that the adjoining codemightberesponsibleforperformingsomekindofencryptionoperation. Java and Kotlin Bytecode As we already know, all the Java and Kotlin bytecode of an Android application is compiled into a DEX file. Each DEX filecontainsalistofstringidentifiers(strings_ids),whichcontainsallthestringidentifiersusedinthebinarywhenevera stringisreferred,includinginternalnaming(e.g,typedescriptors)orconstantobjectsreferredbythecode(e.ghardcoded strings). YoucansimplydumpthislistusingtoolssuchasGhidra(GUIbased)orDextra(CLIbased). With Ghidra, strings can be obtained by simply loading the DEX file and selectingWindow -> Defined strings in the menu. LoadinganAPKfiledirectlyintoGhidramightleadtoinconsistencies. ThusitisrecommendedtoextracttheDEX filebyunzippingtheAPKfileandthenloadingitintoGhidra. 124\\nWithDextra,youcandumpallthestringsusingthefollowingcommand: dextra -Sclasses.dex TheoutputfromDextracanbemanipulatedusingstandardLinuxcommands,forexample,usinggreptosearchforcertain keywords. Itisimportanttoknow,thelistofstringsobtainedusingtheabovetoolscanbeverybig,asitalsoincludesthevarious classandpackagenamesusedintheapplication. Goingthroughthecompletelist,speciallyforbigbinaries,canbevery cumbersome. Thus,itisrecommendedtostartwithkeyword-basedsearchingandgothroughthelistonlywhenkeyword searchdoesnothelp. Somegenerickeywordswhichcanbeagoodstartingpointare-password,key,andsecret. Other usefulkeywordsspecifictothecontextoftheappcanbeobtainedwhileyouareusingtheappitself. Forinstance,imagine thattheapphasasloginform,youcantakenoteofthedisplayedplaceholderortitletextoftheinputfieldsandusethat asanentrypointforyourstaticanalysis. Native Code In order to extract strings from native code used in an Android application, you can use GUI tools such as Ghidra or iaitoorrelyonCLI-basedtoolssuchasthestringsUnixutility(strings <path_to_binary>)orradare2’srabin2(rabin2 -zz <path_to_binary>). When using the CLI-based ones you can take advantage of other tools such as grep (e.g. in conjunctionwithregularexpressions)tofurtherfilterandanalyzetheresults. Accessing App Data Directories 125\\nPlatform: android Onceyouhaveinstalledtheapp,thereisfurtherinformationtoexplore,wheretoolslikeobjectioncomeinhandy. Whenusingobjectionyoucanretrievedifferentkindsofinformation,whereenvwillshowyouallthedirectoryinformation oftheapp. $objection -gsg.vp.owasp_mobile.omtg_androidexplore ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0)[usb] #env Name Path ---------------------- --------------------------------------------------------------------------- cacheDirectory /data/user/0/sg.vp.owasp_mobile.omtg_android/cache codeCacheDirectory /data/user/0/sg.vp.owasp_mobile.omtg_android/code_cache externalCacheDirectory /storage/emulated/0/Android/data/sg.vp.owasp_mobile.omtg_android/cache filesDirectory /data/user/0/sg.vp.owasp_mobile.omtg_android/files obbDir /storage/emulated/0/Android/obb/sg.vp.owasp_mobile.omtg_android packageCodePath /data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk Amongthisinformationwefind: • Theinternaldatadirectory(aka. sandboxdirectory)whichisat/data/data/[package-name]or/data/user/0/[ package-name] • Theexternaldatadirectoryat/storage/emulated/0/Android/data/[package-name]or/sdcard/Android/data/ [package-name] • Thepathtotheapppackagein/data/app/ Theinternaldatadirectoryisusedbytheapptostoredatacreatedduringruntimeandhasthefollowingbasicstructure: ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0) [usb] #ls Type ... Name --------- ... ------------------- Directory ... cache Directory ... code_cache Directory ... lib Directory ... shared_prefs Directory ... files Directory ... databases Readable:True Writable:True Eachfolderhasitsownpurpose: • cache: Thislocationisusedfordatacaching. Forexample,theWebViewcacheisfoundinthisdirectory. • code_cache:Thisisthelocationofthefilesystem’sapplication-specificcachedirectorydesignedforstoringcached code. OndevicesrunningAndroid5.0(APIlevel21)orlater,thesystemwilldeleteanyfilesstoredinthislocation whentheapportheentireplatformisupgraded. • lib: This folder stores native libraries written in C/C++. These libraries can have one of several file extensions, including.soand.dll(x86support). Thisfoldercontainssubdirectoriesfortheplatformstheapphasnativelibraries for,including – armeabi: compiledcodeforallARM-basedprocessors – armeabi-v7a: compiledcodeforallARM-basedprocessors,version7andaboveonly – arm64-v8a: compiledcodeforall64-bitARM-basedprocessors,version8andabovebasedonly – x86: compiledcodeforx86processorsonly – x86_64: compiledcodeforx86_64processorsonly – mips: compiledcodeforMIPSprocessors • shared_prefs: ThisfoldercontainsanXMLfilethatstoresvaluessavedviatheSharedPreferencesAPIs. • files: Thisfolderstoresregularfilescreatedbytheapp. • databases: ThisfolderstoresSQLitedatabasefilesgeneratedbytheappatruntime,e.g.,userdatafiles. However,theappmightstoremoredatanotonlyinsidethesefoldersbutalsointheparentfolder(/data/data/[package- name]). Refertothe“TestingDataStorage”chapterformoreinformationandbestpracticesonsecurelystoringsensitivedata. 126\\nDynamic Analysis on Non-Rooted Devices Platform: android Non-rooteddeviceshavethebenefitofreplicatinganenvironmentthattheapplicationisintendedtorunon. Thankstotoolslikeobjection,youcanpatchtheappinordertotestitlikeifyouwereonarooteddevice(butofcourse being", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 65}}