{"text": "Thepicturebelowillustratesallthephasesandartifacts: Basedontheproject’sgeneralriskprofile,youmaysimplify(orevenskip)someartifacts,andyoumayaddothers(formal 36\\nintermediary approvals, formal documentation of certain points, etc.). Always remember two things: an SDLC is meant to reduce risks associated with software development, and it is a framework that helps you set up controlstothatend. ThisisagenericdescriptionofSDLC;alwaystailorthisframeworktoyourprojects. Defining a Test Strategy TeststrategiesspecifytheteststhatwillbeperformedduringtheSDLCaswellastestingfrequency. Teststrategiesare usedtomakesurethatthefinalsoftwareproductmeetssecurityobjectives,whicharegenerallydeterminedbyclients’ legal/marketing/corporateteams. TheteststrategyisusuallycreatedduringtheSecureDesignphase,afterriskshave beenclarified(duringtheInitiationphase)andbeforecodedevelopment(theSecureImplementationphase)begins. The strategyrequiresinputfromactivitiessuchasRiskManagement,previousThreatModeling,andSecurityEngineering. ATestStrategyneedn’tbeformallywritten: itmaybedescribedthroughStories(inAgileprojects),quicklyenumerated inchecklists,orspecifiedastestcasesforagiventool. However,thestrategymustdefinitelybesharedbecauseitmust beimplementedbyateamotherthantheteamwhodefinedit. Moreover,alltechnicalteamsmustagreetoittoensure thatitdoesn’tplaceunacceptableburdensonanyofthem. TestStrategiesaddresstopicssuchasthefollowing: • objectivesandriskdescriptions • plansformeetingobjectives,riskreduction,whichtestswillbemandatory,whowillperformthem,howandwhen theywillbeperformed • acceptancecriteria To track the testing strategy’s progress and effectiveness, metrics should be defined, continually updated during the project,andperiodicallycommunicated. Anentirebookcouldbewrittenaboutchoosingrelevantmetrics; themostwe cansayhereisthattheydependonriskprofiles,projects,andorganizations. Examplesofmetricsincludethefollowing: • thenumberofstoriesrelatedtosecuritycontrolsthathavebeensuccessfullyimplemented • codecoverageforunittestsofsecuritycontrolsandsensitivefeatures • thenumberofsecuritybugsfoundforeachbuildviastaticanalysistools • trendsinsecuritybugbacklogs(whichmaybesortedbyurgency) Theseareonlysuggestions;othermetricsmaybemorerelevanttoyourproject. Metricsarepowerfultoolsforgettinga projectundercontrol,providedtheygiveprojectmanagersaclearandsyntheticperspectiveonwhatishappeningand whatneedstobeimproved. Distinguishingbetweentestsperformedbyaninternalteamandtestsperformedbyanindependentthirdpartyisimpor- tant. Internal tests are usually useful for improving daily operations, while third-party tests are more beneficial to the wholeorganization. Internaltestscanbeperformedquiteoften,butthird-partytestinghappensatmostonceortwicea year;also,theformerarelessexpensivethanthelatter. Botharenecessary,andmanyregulationsmandatetestsfrom anindependentthirdpartybecausesuchtestscanbemoretrustworthy. Security Testing in Waterfall What Waterfall Is and How Testing Activities Are Arranged Basically,SDLCdoesn’tmandatetheuseofanydevelopmentlifecycle: itissafetosaythatsecuritycan(andmust!) be addressedinanysituation. Waterfallmethodologieswerepopularbeforethe21stcentury. Themostfamousapplicationiscalledthe“Vmodel”,in whichphasesareperformedinsequenceandyoucanbacktrackonlyasinglestep. Thetestingactivitiesofthismodel occurinsequenceandareperformedasawhole,mostlyatthepointinthelifecyclewhenmostoftheappdevelopmentis complete. Thisactivitysequencemeansthatchangingthearchitectureandotherfactorsthatweresetupatthebeginning oftheprojectishardlypossibleeventhoughcodemaybechangedafterdefectshavebeenidentified. Security Testing for Agile/DevOps and DevSecOps DevOpsreferstopracticesthatfocusonaclosecollaborationbetweenallstakeholdersinvolvedinsoftwaredevelopment (generallycalledDevs)andoperations(generallycalledOps). DevOpsisnotaboutmergingDevsandOps. Development 37\\nandoperationsteamsoriginallyworkedinsilos,whenpushingdevelopedsoftwaretoproductioncouldtakeasignificant amountoftime. WhendevelopmentteamsmademovingmoredeliveriestoproductionnecessarybyworkingwithAgile, operationteamshadtospeeduptomatchthepace. DevOpsisthenecessaryevolutionofthesolutiontothatchallenge inthatitallowssoftwaretobereleasedtousersmorequickly. Thisislargelyaccomplishedviaextensivebuildautoma- tion, the process of testing and releasing software, and infrastructure changes (in addition to the collaboration aspect of DevOps). This automation is embodied in the deployment pipeline with the concepts of Continuous Integration and ContinuousDelivery(CI/CD). Peoplemayassumethattheterm“DevOps”representscollaborationbetweendevelopmentandoperationsteamsonly, however,asDevOpsthoughtleaderGeneKimputsit: “Atfirstblush,itseemsasthoughtheproblemsarejustbetween Devs and Ops, but test is in there, and you have informationsecurity objectives, and the need to protect systems and data. Thesearetop-levelconcernsofmanagement,andtheyhavebecomepartoftheDevOpspicture.” Inotherwords,DevOpscollaborationincludesqualityteams,securityteams,andmanyotherteamsrelatedtotheproject. Whenyouhear“DevOps”today,youshouldprobablybethinkingofsomethinglikeDevOpsQATestInfoSec. Indeed,DevOps valuespertaintoincreasingnotonlyspeedbutalsoquality,security,reliability,stability,andresilience. Securityisjustascriticaltobusinesssuccessastheoverallquality,performance,andusabilityofanapp. Asdevelopment cyclesareshortenedanddeliveryfrequenciesincreased,makingsurethatqualityandsecurityarebuiltinfromthevery beginningbecomesessential. DevSecOpsisallaboutaddingsecuritytoDevOpsprocesses. Mostdefectsareidentified duringproduction. DevOpsspecifiesbestpracticesforidentifyingasmanydefectsaspossibleearlyinthelifecycleand forminimizingthenumberofdefectsinthereleasedapp. However,DevSecOpsisnotjustalinearprocessorientedtowardsdeliveringthebestpossiblesoftwaretooperations;it isalsoamandatethatoperationscloselymonitorsoftwarethat’sinproductiontoidentifyissuesandfixthembyforming aquickandefficientfeedbackloopwithdevelopment. DevSecOpsisaprocessthroughwhichContinuousImprovement isheavilyemphasized. Thehumanaspectofthisemphasisisreflectedinthecreationofcross-functionalteamsthatworktogethertoachieve businessoutcomes. Thissectionisfocusedonnecessaryinteractionsandintegratingsecurityintothedevelopmentlife cycle(whichstartswithprojectinceptionandendswiththedeliveryofvaluetousers). What Agile and DevSecOps Are and How Testing Activities Are Arranged Overview 38\\nAutomation is a key DevSecOps practice: as stated earlier, the frequency of deliveries from development to operation increaseswhencomparedtothetraditionalapproach,andactivitiesthatusuallyrequiretimeneedtokeepup,e.g.deliver the same added value while taking less time. Unproductive activities must consequently be abandoned, and essential tasksmustbefastened. Thesechangesimpactinfrastructurechanges,deployment,andsecurity: • infrastructureisbeingimplementedasInfrastructureasCode • deploymentisbecomingmorescripted,translatedthroughtheconceptsofContinuousIntegrationandContin- uousDelivery • securityactivitiesarebeingautomatedasmuchaspossibleandtakingplacethroughoutthelifecycle Thefollowingsectionsprovidemoredetailsaboutthesethreepoints. Infrastructure as Code Insteadofmanuallyprovisioningcomputingresources(physicalservers, virtualmachines, etc.) andmodifyingconfigu- ration files, Infrastructure as Code is based on the use of tools and automation to fasten the provisioning process and makeitmorereliableandrepeatable. Correspondingscriptsareoftenstoredunderversioncontroltofacilitatesharing andissueresolution. InfrastructureasCodepracticesfacilitatecollaborationbetweendevelopmentandoperationsteams,withthefollowing results: • Devsbetterunderstandinfrastructurefromafamiliarpointofviewandcanprepareresourcesthattherunningapp willrequire. • Opsoperateanenvironmentthatbettersuitstheapp,andtheysharealanguagewithDevs. InfrastructureasCodealsofacilitatestheconstructionoftheenvironmentsrequiredbyclassicalsoftwarecreationprojects, fordevelopment(“DEV”),integration(“INT”),testing(“PPR”forPre-Production. Sometestsareusuallyperformedin earlier environments, and PPR tests mostly pertain to non-regression and performance with data that’s similar to data usedinproduction),andproduction(“PRD”).Thevalueofinfrastructureascodeliesinthepossiblesimilaritybetween environments(theyshouldbethesame). InfrastructureasCodeiscommonlyusedforprojectsthathaveCloud-basedresourcesbecausemanyvendorsprovideAPIs thatcanbeusedforprovisioningitems(suchasvirtualmachines, storagespaces, etc.) andworkingonconfigurations (e.g., modifying memory sizes or the number of CPUs used by virtual machines). These APIs provide alternatives to administrators’performingtheseactivitiesfrommonitoringconsoles. ThemaintoolsinthisdomainarePuppet,Terraform,Packer,ChefandAnsible. Deployment Thedeploymentpipeline’ssophisticationdependsonthematurityoftheprojectorganizationordevelopmentteam. Inits simplestform,thedeploymentpipelineconsistsofacommitphase. Thecommitphaseusuallyinvolvesrunningsimple compiler checks and the unit test suite as well as creating a deployable artifact of the app. A release candidate is the latestversionthathasbeencheckedintothetrunkoftheversioncontrolsystem. Releasecandidatesareevaluatedby thedeploymentpipelineforconformitytostandardstheymustfulfillfordeploymenttoproduction. Thecommitphaseisdesignedtoprovideinstantfeedbacktodevelopersandisthereforerunoneverycommittothetrunk. Timeconstraintsexistbecauseofthisfrequency. Thecommitphaseshouldusuallybecompletewithinfiveminutes,and itshouldn’ttakelongerthanten. Adheringtothistimeconstraintisquitechallengingwhenitcomestosecuritybecause manysecuritytoolscan’tberunquicklyenough(#paul,#mcgraw). CI/CD means “Continuous Integration/Continuous Delivery” in some contexts and “Continuous Integration/Continuous Deployment”inothers. Actually,thelogicis: • ContinuousIntegrationbuildactions(eithertriggeredbyacommitorperformedregularly)useallsourcecodeto build a candidate release. Tests can then be performed and the release’s compliance with security, quality, etc., rulescanbechecked. Ifcasecomplianceisconfirmed,theprocesscancontinue;otherwise,thedevelopmentteam mustremediatetheissue(s)andproposechanges. • ContinuousDeliverycandidatereleasescanproceedtothepre-productionenvironment. Ifthereleasecanthenbe validated(eithermanuallyorautomatically),deploymentcancontinue. Ifnot,theprojectteamwillbenotifiedand properaction(s)mustbetaken. 39\\n• ContinuousDeploymentreleasesaredirectlytransitionedfromintegrationtoproduction,e.g.,theybecomeacces- sible to the user. However, no release should go to production if significant defects have been identified during previousactivities. The delivery and deployment of apps with low or medium sensitivity may be merged into a single", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 39}}