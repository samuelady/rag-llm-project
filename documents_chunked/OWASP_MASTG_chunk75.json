{"text": "thestateofasocket,forexample,ifthesocketisinactiveuse(ESTABLISHED)orclosed(CLOSED). Get Loaded Native Libraries Platform: android Using Process Memory Maps Thefile/proc/<pid>/mapscontainsthecurrentlymappedmemoryregionsandtheiraccesspermissions. Usingthisfile wecangetthelistofthelibrariesloadedintheprocess. ##cat/proc/9568/maps 12c00000-52c00000rw-p0000000000:0414917 /dev/ashmem/dalvik-mainspace (regionspace)(deleted) 6f019000-6f2c0000rw-p00000000fd:001146914 /data/dalvik-cache/arm64/system@framework@boot.art ... 7327670000-7329747000r--p00000000fd:001884627 /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jkIMQ==/oat/arm64/base.odex .. 733494d000-7334cfb000r-xp00000000fd:001884542 ↪ /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so ... Using Frida You can retrieve process related information straight from the Frida CLI by using the Process command. Within the ProcesscommandthefunctionenumerateModulesliststhelibrariesloadedintotheprocessmemory. [HuaweiNexus6P::sg.vantagepoint.helloworldjni]->Process.enumerateModules() [ { \"base\":\"0x558a442000\", \"name\": \"app_process64\", \"path\":\"/system/bin/app_process64\", \"size\":32768 }, { \"base\":\"0x78bc984000\", \"name\":\"libandroid_runtime.so\", \"path\":\"/system/lib64/libandroid_runtime.so\", \"size\":2011136 }, ... Accessing the Device Shell Platform: android Oneofthemostcommonthingsyoudowhentestinganappisaccessingthedeviceshell. Inthissectionwe’llseehow toaccesstheAndroidshellbothremotelyfromyourhostcomputerwith/withoutaUSBcableandlocallyfromthedevice itself. Remote Shell InordertoconnecttotheshellofanAndroiddevicefromyourhostcomputer,adbisusuallyyourtoolofchoice(unless youprefertouseremoteSSHaccess,e.g.viaTermux). 166\\nFor this section we assume that you’ve properly enabled Developer Mode and USB debugging as explained in “Testing on a Real Device”. Once you’ve connected your Android device via USB, you can access the remote device’s shell by running: adbshell pressControl+Dortypeexittoquit Onceintheremoteshell,ifyourdeviceisrootedoryou’reusingtheemulator,youcangetrootaccessbyrunningsu: bullhead:/$su bullhead:/ #id uid=0(root)gid=0(root)groups=0(root)context=u:r:su:s0 Onlyifyou’reworkingwithanemulatoryoumayalternativelyrestartadbwithrootpermissionswiththecommand adb root so next time you enter adb shell you’ll have root access already. This also allows to transfer data bidirectionallybetweenyourhostcomputerandtheAndroidfilesystem,evenwithaccesstolocationswhereonly therootuserhasaccessto(viaadbpush/pull). Seemoreaboutdatatransferinsection“Host-DeviceDataTransfer” below. Connect to Multiple Devices If you have more than one device, remember to include the -s flag followed by the device serial ID on all your adb commands(e.g.adb -s emulator-5554 shelloradb -s 00b604081540b7c6 shell). Youcangetalistofallconnected devicesandtheirserialIDsbyusingthefollowingcommand: adbdevices Listofdevicesattached 00c907098530a82c device emulator-5554 device Connect to a Device over Wi-Fi You can also access your Android device without using the USB cable. For this you’ll have to connect both your host computerandyourAndroiddevicetothesameWi-Finetworkandfollowthenextsteps: • ConnectthedevicetothehostcomputerwithaUSBcableandsetthetargetdevicetolistenforaTCP/IPconnection onport5555: adb tcpip 5555. • Disconnect the USB cable from the target device and run adb connect <device_ip_address>. Check that the deviceisnowavailablebyrunningadb devices. • Opentheshellwithadb shell. However,noticethatbydoingthisyouleaveyourdeviceopentoanyonebeinginthesamenetworkandknowingtheIP addressofyourdevice. YoumayratherpreferusingtheUSBconnection. Forexample,onaNexusdevice,youcanfindtheIPaddressatSettings->System->Aboutphone->Status ->IPaddressorbygoingtotheWi-Fimenuandtappingonceonthenetworkyou’reconnectedto. SeethefullinstructionsandconsiderationsintheAndroidDevelopersDocumentation. Connect to a Device via SSH Ifyouprefer,youcanalsoenableSSHaccess. AconvenientoptionistouseTermux,whichyoucaneasilyconfigureto offerSSHaccess(withpasswordorpublickeyauthentication)andstartitwiththecommandsshd(startsbydefaulton port 8022). In order to connect to the Termux via SSH you can simply run the command ssh -p 8022 <ip_address> (whereip_addressistheactualremotedeviceIP).Thisoptionhassomeadditionalbenefitsasitallowstoaccessthefile systemviaSFTPalsoonport8022. 167\\nOn-device Shell App Whileusuallyusinganon-deviceshell(terminalemulator)suchasTermuxmightbeverytediouscomparedtoaremote shell,itcanprovehandyfordebuggingincaseof,forexample,networkissuesortochecksomeconfiguration. Basic Network Monitoring/Sniffing Platform: android Remotely sniffing all Android traffic in real-time is possible with tcpdump, netcat (nc), and Wireshark. First, make sure thatyouhavethelatestversionofAndroidtcpdumponyourphone. Herearetheinstallationsteps: adbroot adbremount adbpush/wherever/you/put/tcpdump/system/xbin/tcpdump Ifexecutionofadbrootreturnstheerroradbdcannotrunasrootinproductionbuilds,installtcpdumpasfollows: adbpush/wherever/you/put/tcpdump/data/local/tmp/tcpdump adbshell su mount -orw,remount/system; cp/data/local/tmp/tcpdump/system/xbin/ cd/system/xbin chmod 755tcpdump Incertainproductionbuilds,youmightencounteranerrormount: '/system' not in /proc/mounts. Inthatcase,youcanreplacetheaboveline$mount-orw,remount/system;with$mount-orw,remount/,asdescribed inthisStackOverflowpost. Remember: Tousetcpdump,youneedrootprivilegesonthephone! Executetcpdumponcetoseeifitworks. Onceafewpacketshavecomein,youcanstoptcpdumpbypressingCTRL+c. $tcpdump tcpdump:verboseoutputsuppressed,use -vor-vvforfullprotocoldecode listeningonwlan0,link-typeEN10MB (Ethernet),capturesize262144bytes 04:54:06.59075100:9e:1e:10:7f:69 (ouiUnknown)>Broadcast,RRCP-0x23reply 04:54:09.65965800:9e:1e:10:7f:69 (ouiUnknown)>Broadcast,RRCP-0x23reply 04:54:10.57979500:9e:1e:10:7f:69 (ouiUnknown)>Broadcast,RRCP-0x23reply ^C 3packetscaptured 3packetsreceivedbyfilter 0packetsdroppedbykernel ToremotelysnifftheAndroidphone’snetworktraffic,firstexecutetcpdumpandpipeitsoutputtonetcat(nc): tcpdump -iwlan0 -s0-w-|nc-l-p11111 Thetcpdumpcommandaboveinvolves • listeningonthewlan0interface, • definingthesize(snapshotlength)ofthecaptureinbytestogeteverything(-s0),and • writingtoafile(-w). Insteadofafilename,wepass-,whichwillmaketcpdumpwritetostdout. Byusingthepipe(|),wesentalloutputfromtcpdumptonetcat,whichopensalisteneronport11111. You’llusuallywant tomonitorthewlan0interface. Ifyouneedanotherinterface,listtheavailableoptionswiththecommand$ ip addr. Toaccessport11111,youneedtoforwardtheporttoyourhostcomputerviaadb. 168\\nadbforwardtcp:11111tcp:11111 ThefollowingcommandconnectsyoutotheforwardedportvianetcatandpipingtoWireshark. nclocalhost11111 |wireshark -k-S-i- Wiresharkshouldstartimmediately(-k). Itgetsalldatafromstdin(-i-)vianetcat,whichisconnectedtotheforwarded port. Youshouldseeallthephone’strafficfromthewlan0interface. Youcandisplaythecapturedtrafficinahuman-readableformatwithWireshark. Figureoutwhichprotocolsareusedand whethertheyareunencrypted. Capturingalltraffic(TCPandUDP)isimportant,soyoushouldexecuteallfunctionsofthe testedapplicationandanalyzeit. Thisneatlittletrickallowsyounowtoidentifywhatkindofprotocolsareusedandtowhichendpointstheappistalkingto. Thequestionsisnow,howcanItesttheendpointsifBurpisnotcapableofshowingthetraffic? Thereisnoeasyanswer forthis,butafewBurppluginsthatcangetyoustarted. Firebase/Google Cloud Messaging (FCM/GCM) FirebaseCloudMessaging(FCM),thesuccessortoGoogleCloudMessaging(GCM),isafreeserviceofferedbyGooglethat allowsyoutosendmessagesbetweenanapplicationserverandclientapps. Theserverandclientappcommunicatevia theFCM/GCMconnectionserver,whichhandlesdownstreamandupstreammessages. 169\\nDownstreammessages(pushnotifications)aresentfromtheapplicationservertotheclientapp;upstreammessagesare sentfromtheclientapptotheserver. FCMisavailableforAndroid,iOS,andChrome. FCMcurrentlyprovidestwoconnectionserverprotocols: HTTPandXMPP.As describedintheofficialdocumentation,theseprotocolsareimplementeddifferently. Thefollowingexampledemonstrates howtointerceptbothprotocols. Preparation of Test Setup Youneedtoeitherconfigureiptablesonyourphoneorusebettercaptobeabletointercepttraffic. FCMcanuseeitherXMPPorHTTPtocommunicatewiththeGooglebackend. HTTP FCMusestheports5228,5229,and5230forHTTPcommunication. Usually,onlyport5228isused. • ConfigurelocalportforwardingfortheportsusedbyFCM.ThefollowingexampleappliestomacOS: $echo \" rdrpassinetprototcpfromanytoanyport5228->127.0.0.1port8080 rdrpassinetprototcpfromanytoanyport5229->127.0.0.1port8080 rdrpassinetprototcpfromanytoanyport5230->127.0.0.1port8080 \"|sudo pfctl -ef- • Theinterceptionproxymustlistentotheportspecifiedintheportforwardingruleabove(port8080). XMPP ForXMPPcommunication,FCMusesports5235(Production)and5236(Testing). • ConfigurelocalportforwardingfortheportsusedbyFCM.ThefollowingexampleappliestomacOS: $echo \" rdrpassinetprototcpfromanytoanyport5235->127.0.0.1port8080 rdrpassinetprototcpfromanytoanyport5236->127.0.0.1port8080 \"|sudo pfctl -ef- Intercepting the Requests Theinterceptionproxymustlistentotheportspecifiedintheportforwardingruleabove(port8080). StarttheappandtriggerafunctionthatusesFCM.YoushouldseeHTTPmessagesinyourinterceptionproxy. 170\\nEnd-to-End Encryption for Push Notifications Asanadditionallayerofsecurity,pushnotificationscanbeencryptedbyusingCapillary. Capillaryisalibrarytosimplify thesendingofend-to-end(E2E)encryptedpushmessagesfromJava-basedapplicationserverstoAndroidclients. Reviewing Disassembled Native Code Platform: android Followingtheexamplefrom“DisassemblingNativeCode”wewillusedifferentdisassemblerstoreviewthedisassembled nativecode. radare2 Onceyou’veopenedyourfileinradare2youshouldfirstgettheaddressofthefunctionyou’relookingfor. Youcandothis bylistingorgettinginformationiaboutthesymbolss(is)andgrepping(~radare2’sbuilt-ingrep)forsomekeyword,in ourcasewe’relookingforJNIrelatedsymbolssoweenter“Java”: $r2 -AHelloWord-JNI/lib/armeabi-v7a/libnative-lib.so ... [0x00000e3c]>is~Java 0030x00000e780x00000e78GLOBAL FUNC 16Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI Themethodcanbefoundataddress0x00000e78. Todisplayitsdisassemblysimplyrunthefollowingcommands: [0x00000e3c]>eemu.str=true; [0x00000e3c]>s0x00000e78 [0x00000e78]>af [0x00000e78]>pdf ╭(fcn)sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI12 │ sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_targ1); │ ;argint32_targ1@r0 │ 0x00000e78 ~ 0268 ldrr2, [r0] ;arg1 │ ;--aav.0x00000e79: │ ;UNKNOWNXREFfromaav.0x00000189 (+0x3) │ 0x00000e79 unaligned", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 75}}