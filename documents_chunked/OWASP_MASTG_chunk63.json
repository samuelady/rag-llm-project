{"text": "10KDec 516:29AndroidManifest.xml -rw-r--r-- 1sven staff 401BDec 516:29apktool.yml drwxr-xr-x 6sven staff 204BDec 516:29assets drwxr-xr-x 3sven staff 102BDec 516:29lib drwxr-xr-x 4sven staff 136BDec 516:29original drwxr-xr-x 131sven staff 4.3KDec 516:29res drwxr-xr-x 9sven staff 306BDec 516:29smali The Android Manifest TheAndroidManifestisthemainsourceofinformation, itincludesalotofinterestinginformationsuchasthepackage name,thepermissions,appcomponents,etc. Here’sanon-exhaustivelistofsomeinfoandthecorrespondingkeywordsthatyoucaneasilysearchforintheAndroid Manifestbyjustinspectingthefileorbyusinggrep -i <keyword> AndroidManifest.xml: • Apppermissions: permission(see“AndroidPlatformAPIs”) • Backupallowance: android:allowBackup(see“DataStorageonAndroid • App components: activity, service, provider, receiver (see “Android Platform APIs” and “Data Storage on Android • Debuggableflag: debuggable(see“CodeQualityandBuildSettingsofAndroidApps”) Pleaserefertothementionedchapterstolearnmoreabouthowtotesteachofthesepoints. App Binary Theappbinary(classes.dex)canbefoundintherootdirectoryoftheapppackage. Itisaso-calledDEX(DalvikExe- cutable)filethatcontainscompiledJavacode. Duetoitsnature,afterapplyingsomeconversionsyou’llbeabletousea decompilertoproduceJavacode. We’vealsoseenthefoldersmalithatwasobtainedafterwerunapktool. Thiscontains thedisassembledDalvikbytecodeinanintermediatelanguagecalledsmali, whichisahuman-readablerepresentation oftheDalvikexecutable. Refertothesection“ReviewingDecompiledJavaCode”inthechapter“TamperingandReverseEngineeringonAndroid” formoreinformationabouthowtoreverseengineerDEXfiles. 114\\nCompiled App Binary Insomecasesitmightbeusefultoretrievethecompiledappbinary(.odex). Firstgetthepathtotheapp’sdatadirectory: adbshellpmpathcom.example.myapplication package:/data/app/~~DEMFPZh7R4qfUwwwh1czYA==/com.example.myapplication-pOslqiQkJclb_1Vk9-WAXg==/base.apk Remove the /base.apk part, add /oat/arm64/base.odex and use the resulting path to pull the base.odex from the device: adbroot adbpull/data/app/~~DEMFPZh7R4qfUwwwh1czYA==/com.example.myapplication-pOslqiQkJclb_1Vk9-WAXg==/oat/arm64/base.odex NotethattheexactdirectorywillbedifferentbasedonyourAndroidversion. Ifthe/oat/arm64/base.odexfilecan’tbe found,manuallysearchinthedirectoryreturnedbypm path. Native Libraries YoucaninspectthelibfolderintheAPK: $ls -1lib/armeabi/ libdatabase_sqlcipher.so libnative.so libsqlcipher_android.so libstlport_shared.so orfromthedevicewithobjection: ...g.vp.owasp_mobile.omtg_androidon (google:8.1.0)[usb] #lslib Type ... Name ------ ... ------------------------ File ... libnative.so File ... libdatabase_sqlcipher.so File ... libstlport_shared.so File ... libsqlcipher_android.so For now this is all information you can get about the native libraries unless you start reverse engineering them, which isdoneusingadifferentapproachthantheoneusedtoreversetheappbinaryasthiscodecannotbedecompiledbut only disassembled. Refer to the section “Reviewing Disassemble Native Code” in the chapter “Tampering and Reverse EngineeringonAndroid”formoreinformationabouthowtoreverseengineertheselibraries. Other App Resources ItisnormallyworthtakingalookattherestoftheresourcesandfilesthatyoumayfindintherootfolderoftheAPKas sometimestheycontainadditionalgoodieslikekeystores,encrypteddatabases,certificates,etc. Symbolic Execution Platform: android Symbolicexecutionisaveryusefultechniquetohaveinyourtoolbox,especiallywhiledealingwithproblemswhereyou needtofindacorrectinputforreachingacertainblockofcode. Inthissection,wewillsolveasimpleAndroidcrackme byusingtheAngrbinaryanalysisframeworkasoursymbolicexecutionengine. Todemonstratethistechniquewe’lluseacrackmecalledAndroidLicenseValidator. ThecrackmeconsistsofasingleELF executablefile,whichcanbeexecutedonanyAndroiddevicebyfollowingtheinstructionsbelow: 115\\n$adbpushvalidate/data/local/tmp [100%]/data/local/tmp/validate $adbshellchmod755/data/local/tmp/validate $adbshell/data/local/tmp/validate Usage:./validate <serial> $adbshell/data/local/tmp/validate12345 Incorrectserial (wrongformat). Sofarsogood,butweknownothingaboutwhatavalidlicensekeylookslike. Togetstarted,opentheELFexecutable inadisassemblersuchasiaito. Themainfunctionislocatedatoffset0x00001874inthedisassembly. Itisimportantto notethatthisbinaryisPIE-enabled,andiaitochoosestoloadthebinaryat0x0asimagebaseaddress. 116\\nThefunctionnameshavebeenstrippedfromthebinary,butluckilythereareenoughdebuggingstringstoprovideusa contexttothecode. Movingforward,wewillstartanalyzingthebinaryfromtheentryfunctionatoffset0x00001874,and keepanoteofalltheinformationeasilyavailabletous. Duringthisanalysis,wewillalsotrytoidentifythecoderegions whicharesuitableforsymbolicexecution. 117\\nstrleniscalledatoffset0x000018a8, andthereturnedvalueiscomparedto0x10atoffset0x000018b0. Immediately afterthat,theinputstringispassedtoaBase32decodingfunctionatoffset0x00001340. Thisprovidesuswithvaluable informationthattheinputlicensekeyisaBase32-encoded16-characterstring(whichtotals10bytesinraw). Thedecoded inputisthenpassedtothefunctionatoffset0x00001760,whichvalidatesthelicensekey. Thedisassemblyofthisfunction isshownbelow. Wecannowusethisinformationabouttheexpectedinputtofurtherlookintothevalidationfunctionat0x00001760. ╭(fcn)fcn.00001760 268 │ fcn.00001760 (int32_targ1); │ ;varint32_tvar_20h@fp-0x20 │ ;varint32_tvar_14h@fp-0x14 │ ;varint32_tvar_10h@fp-0x10 │ ;argint32_targ1@r0 │ ;CALLXREFfromfcn.00001760(+0x1c4) │ 0x00001760 push {r4,fp,lr} │ 0x00001764 addfp,sp,8 │ 0x00001768 subsp,sp,0x1c │ 0x0000176c strr0,[var_20h] ;0x20;\"$!\";arg1 │ 0x00001770 ldrr3,[var_20h] ;0x20;\"$!\";entry.preinit0 │ 0x00001774 strr3,[var_10h] ;str. │ ;0x10 │ 0x00001778 movr3,0 │ 0x0000177c strr3,[var_14h] ;0x14 │ ╭─<0x00001780 b0x17d0 │ │ ;CODEXREFfromfcn.00001760(0x17d8) │ ╭──>0x00001784 ldrr3,[var_10h] ;str. │ │ ;0x10;entry.preinit0 │ ╎│ 0x00001788 ldrbr2,[r3] │ ╎│ 0x0000178c ldrr3,[var_10h] ;str. │ ╎│ ;0x10;entry.preinit0 │ ╎│ 0x00001790 addr3,r3,1 │ ╎│ 0x00001794 ldrbr3,[r3] │ ╎│ 0x00001798 eorr3,r2,r3 │ ╎│ 0x0000179c andr2,r3,0xff │ ╎│ 0x000017a0 mvnr3,0xf │ ╎│ 0x000017a4 ldrr1,[var_14h] ;0x14;entry.preinit0 │ ╎│ 0x000017a8 subr0,fp,0xc │ ╎│ 0x000017ac addr1,r0,r1 │ ╎│ 0x000017b0 addr3,r1,r3 118\\n│ ╎│ 0x000017b4 strbr2,[r3] │ ╎│ 0x000017b8 ldrr3,[var_10h] ;str. │ ╎│ ;0x10;entry.preinit0 │ ╎│ 0x000017bc addr3,r3,2 ;\"ELF\\x01\\x01\\x01\";aav.0x00000001 │ ╎│ 0x000017c0 strr3,[var_10h] ;str. │ ╎│ ;0x10 │ ╎│ 0x000017c4 ldrr3,[var_14h] ;0x14;entry.preinit0 │ ╎│ 0x000017c8 addr3,r3,1 │ ╎│ 0x000017cc strr3,[var_14h] ;0x14 │ ╎│ ;CODEXREFfromfcn.00001760(0x1780) │ ╎╰─>0x000017d0 ldrr3,[var_14h] ;0x14;entry.preinit0 │ ╎ 0x000017d4 cmpr3,4 ;aav.0x00000004;aav.0x00000001;aav.0x00000001 │ ╰──<0x000017d8 ble0x1784 ;likely │ 0x000017dc ldrbr4,[fp,-0x1c] ;\"4\" │ 0x000017e0 blfcn.000016f0 │ 0x000017e4 movr3,r0 │ 0x000017e8 cmpr4,r3 │ ╭─<0x000017ec bne0x1854 ;likely │ │ 0x000017f0 ldrbr4,[fp,-0x1b] │ │ 0x000017f4 blfcn.0000170c │ │ 0x000017f8 movr3,r0 │ │ 0x000017fc cmpr4,r3 │ ╭──<0x00001800 bne0x1854 ;likely │ ││ 0x00001804 ldrbr4,[fp,-0x1a] │ ││ 0x00001808 blfcn.000016f0 │ ││ 0x0000180c movr3,r0 │ ││ 0x00001810 cmpr4,r3 │ ╭───<0x00001814 bne0x1854 ;likely │ │││ 0x00001818 ldrbr4,[fp,-0x19] │ │││ 0x0000181c blfcn.00001728 │ │││ 0x00001820 movr3,r0 │ │││ 0x00001824 cmpr4,r3 │ ╭────<0x00001828 bne0x1854 ;likely │ ││││ 0x0000182c ldrbr4,[fp,-0x18] │ ││││ 0x00001830 blfcn.00001744 │ ││││ 0x00001834 movr3,r0 │ ││││ 0x00001838 cmpr4,r3 │ ╭─────<0x0000183c bne0x1854 ;likely │ │││││ 0x00001840 ldrr3,[0x0000186c] ;[0x186c:4]=0x270section..hash;section..hash │ │││││ 0x00001844 addr3,pc,r3", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 63}}