{"text": "alertDialog.show(); } protected void onCreate(Bundlebundle){ if(c.a()||c.b()||c.c()){ this.a(\"Rootdetected!\"); } if(b.a(this.getApplicationContext())) { this.a(\"Appisdebuggable!\"); } super.onCreate(bundle); this.setContentView(2130903040); } 137\\n/* *Enabledaggressiveblocksorting */ public void verify(Viewobject){ object =((EditText)this.findViewById(2130837505)).getText().toString(); AlertDialogalertDialog =newAlertDialog.Builder((Context)this).create(); if(a.a((String)object)){ alertDialog.setTitle((CharSequence)\"Success!\"); object =\"Thisisthecorrectsecret.\"; }else { alertDialog.setTitle((CharSequence)\"Nope...\"); object =\"That'snotit.Tryagain.\"; } alertDialog.setMessage((CharSequence)object); alertDialog.setButton(-3,(CharSequence)\"OK\",newDialogInterface.OnClickListener(){ public void onClick(DialogInterfacedialogInterface,intn){ dialogInterface.dismiss(); } }); alertDialog.show(); } } Notice the “Root detected” message in the onCreate method and the various methods called in the preceding if- statement(whichperformtheactualrootchecks). Alsonotethe“Thisisunacceptable...”messagefromthefirstmethod oftheclass,privatevoida. Obviously,thismethoddisplaysthedialogbox. ThereisanalertDialog.onClickListener callbacksetinthesetButtonmethodcall,whichclosestheapplicationviaSystem.exitaftersuccessfulrootdetection. WithFrida,youcanpreventtheappfromexitingbyhookingtheMainActivity.amethodorthecallbackinsideit. The examplebelowshowshowyoucanhookMainActivity.aandpreventitfromendingtheapplication. setImmediate(function(){ //preventtimeout console.log(\"[*]Startingscript\"); Java.perform(function(){ varmainActivity =Java.use(\"sg.vantagepoint.uncrackable1.MainActivity\"); mainActivity.a.implementation =function(v){ console.log(\"[*]MainActivity.acalled\"); }; console.log(\"[*]MainActivity.amodified\"); }); }); WrapyourcodeinthefunctionsetImmediatetopreventtimeouts(youmayormaynotneedtodothis),thencallJava. performtouseFrida’smethodsfordealingwithJava. AfterwardsretrieveawrapperforMainActivityclassandoverwrite itsamethod. Unliketheoriginal,thenewversionofajustwritesconsoleoutputanddoesn’texittheapp. Analternative solutionistohookonClickmethodoftheOnClickListenerinterface. YoucanoverwritetheonClickmethodandprevent itfromendingtheapplicationwiththeSystem.exitcall. IfyouwanttoinjectyourownFridascript,itshouldeitherdisable theAlertDialogentirelyorchangethebehavioroftheonClickmethodsotheappdoesnotexitwhenyouclick“OK”. Savetheabovescriptasuncrackable1.jsandloadit: frida -U-fowasp.mstg.uncrackable1 -luncrackable1.js --no-pause Afteryouseethe“MainActivity.amodified”messageandtheappwillnotexitanymore. Youcannowtrytoinputa“secretstring”. Butwheredoyougetit? Ifyoulookattheclasssg.vantagepoint.uncrackable1.a,youcanseetheencryptedstringwithwhichyourinputgets compared: package sg.vantagepoint.uncrackable1; import android.util.Base64; import android.util.Log; public class a{ public static boolean a(Stringstring){ byte[]arrby =Base64.decode((String)\"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=\",(int)0); try{ arrby =sg.vantagepoint.a.a.a(a.b(\"8d127684cbc37c17616d806cf50473cc\"),arrby); 138\\n} catch (Exceptionexception){ StringBuilderstringBuilder =newStringBuilder(); stringBuilder.append(\"AESerror:\"); stringBuilder.append(exception.getMessage()); Log.d((String)\"CodeCheck\",(String)stringBuilder.toString()); arrby =newbyte[]{}; } return string.equals((Object)newString(arrby)); } public static byte[]b(Stringstring){ intn=string.length(); byte[]arrby =newbyte[n/2]; for(inti=0;i<n;i+=2){ arrby[i/2]=(byte)((Character.digit((char)string.charAt(i),(int)16)<<4)+Character.digit((char)string.charAt(i+1),(int)16)); } return arrby; } } Lookatthestring.equalscomparisonattheendoftheamethodandthecreationofthestringarrbyinthetryblock above. arrby is the return value of the function sg.vantagepoint.a.a.a. string.equals comparison compares your inputwitharrby. Sowewantthereturnvalueofsg.vantagepoint.a.a.a. Insteadofreversingthedecryptionroutinestoreconstructthesecretkey,youcansimplyignoreallthedecryptionlogic in the app and hook the sg.vantagepoint.a.a.a function to catch its return value. Here is the complete script that preventsexitingonrootandinterceptsthedecryptionofthesecretstring: setImmediate(function(){ //preventtimeout console.log(\"[*]Startingscript\"); Java.perform(function(){ varmainActivity =Java.use(\"sg.vantagepoint.uncrackable1.MainActivity\"); mainActivity.a.implementation =function(v){ console.log(\"[*]MainActivity.acalled\"); }; console.log(\"[*]MainActivity.amodified\"); varaaClass =Java.use(\"sg.vantagepoint.a.a\"); aaClass.a.implementation =function(arg1,arg2){ varretval =this.a(arg1,arg2); varpassword =''; for(vari=0;i<retval.length;i++){ password +=String.fromCharCode(retval[i]); } console.log(\"[*]Decrypted:\" +password); return retval; }; console.log(\"[*]sg.vantagepoint.a.a.amodified\"); }); }); After running the script in Frida and seeing the “[*] sg.vantagepoint.a.a.a modified” message in the console, enter a randomvaluefor“secretstring”andpressverify. Youshouldgetanoutputsimilartothefollowing: $frida -U-fowasp.mstg.uncrackable1 -luncrackable1.js --no-pause [*]Startingscript [USB::AndroidEmulator5554::sg.vantagepoint.uncrackable1]->[*]MainActivity.amodified [*]sg.vantagepoint.a.a.amodified [*]MainActivity.acalled. [*]Decrypted:Iwanttobelieve Thehookedfunctionoutputtedthedecryptedstring. Youextractedthesecretstringwithouthavingtodivetoodeepinto theapplicationcodeanditsdecryptionroutines. You’venowcoveredthebasicsofstatic/dynamicanalysisonAndroid. Ofcourse,theonlywaytoreallylearnitishands-on experience: buildyourownprojectsinAndroidStudio,observehowyourcodegetstranslatedintobytecodeandnative code,andtrytocrackourchallenges. In the remaining sections, we’ll introduce a few advanced subjects, including process exploration, kernel modules and dynamicexecution. 139\\nGetting Loaded Classes and Methods Dynamically Platform: android YoucanusethecommandJavaintheFridaCLItoaccesstheJavaruntimeandretrieveinformationfromtherunningapp. Rememberthat,unlikeFridaforiOS,inAndroidyouneedtowrapyourcodeinsideaJava.performfunction. Thus,it’s moreconvenienttouseFridascriptstoe.g.getalistofloadedJavaclassesandtheircorrespondingmethodsandfields orformorecomplexinformationgatheringorinstrumentation. Onesuchscriptsislistedbelow. Thescripttolistclass’s methodsusedbelowisavailableonGithub. //GetlistofloadedJavaclassesandmethods //Filename:java_class_listing.js Java.perform(function(){ Java.enumerateLoadedClasses({ onMatch:function(className){ console.log(className); describeJavaClass(className); }, onComplete:function(){} }); }); //Getthemethodsandfields function describeJavaClass(className){ varjClass =Java.use(className); console.log(JSON.stringify({ _name:className, _methods:Object.getOwnPropertyNames(jClass.__proto__).filter(function(m) { return !m.startsWith('$')//filteroutFridarelatedspecialproperties ||m=='class'||m=='constructor'//optional }), _fields:jClass.class.getFields().map(function(f){ return(f.toString()); }) },null,2)); } Aftersavingthescripttoafilecalledjava_class_listing.js,youcantellFridaCLItoloaditbyusingtheflag-landinjectit totheprocessIDspecifiedby-p. frida -U-ljava_class_listing.js -p<pid> //Output [HuaweiNexus6P::sg.vantagepoint.helloworldjni]-> ... com.scottyab.rootbeer.sample.MainActivity { \"_name\":\"com.scottyab.rootbeer.sample.MainActivity\", \"_methods\":[ ... \"beerView\", \"checkRootImageViewList\", \"floatingActionButton\", \"infoDialog\", \"isRootedText\", \"isRootedTextDisclaimer\", \"mActivity\", \"GITHUB_LINK\" ], \"_fields\":[ \"publicstaticfinalintandroid.app.Activity.DEFAULT_KEYS_DIALER\", ... Giventheverbosityoftheoutput,thesystemclassescanbefilteredoutprogrammaticallytomakeoutputmorereadable andrelevanttotheusecase. Library Injection Platform: android Intheprevioussectionwelearnedaboutpatchingapplicationcodetoassistinouranalysis,butthisapproachhasseveral limitations. Forinstance,you’dliketologeverythingthat’sbeingsentoverthenetworkwithouthavingtoperformaMITM 140\\nattack. Forthis you’dhave topatch allpossible callsto thenetwork APIs, which canquickly becomeimpractical when dealingwithlargeapplications. Inaddition,thefactthatpatchingisuniquetoeachapplicationcanalsobeconsidereda shortcoming,asthiscodecannotbeeasilyreused. Using library injection you can develop reusable libraries and inject them to different applications, effectively making thembehavedifferentlywithouthavingtomodifytheiroriginalsourcecode. ThisisknownasDLLinjectiononWindows (broadlyusedtomodifyandbypassanti-cheatmechanismsingames),LD_PRELOADonLinuxandDYLD_INSERT_LIBRARIES onmacOS.OnAndroidandiOS,acommonexampleisusingtheFridaGadgetwheneverFrida’sso-calledInjectedmode ofoperationisn’tsuitable(i.e.youcannotruntheFridaserveronthetargetdevice). Inthissituation,youcaninjectthe Gadgetlibrarybyusingthesamemethodsyou’regoingtolearninthissection. Libraryinjectionisdesirableinmanysituationssuchas: • Performingprocessintrospection(e.g.listingclasses, tracingmethodcalls, monitoringaccessedfiles, monitoring networkaccess,obtainingdirectmemoryaccess). • Supporting or replacing existing code with your own implementations (e.g. replace a function that should give randomnumbers). • Introducingnewfeaturestoanexistingapplication. • Debuggingandfixingelusiveruntimebugsoncodeforwhichyoudon’thavetheoriginalsource. • Enabledynamictestingonanon-rooteddevice(e.g.withFrida). Inthissection,wewilllearnabouttechniquesforperforminglibraryinjectiononAndroid,whichbasicallyconsistofpatch- ingtheapplicationcode(smaliornative)oralternativelyusingtheLD_PRELOADfeatureprovidedbytheOSloaderitself. Patching the Application’s Smali Code AnAndroidapplication’sdecompiledsmalicodecanbepatchedtointroduceacalltoSystem.loadLibrary. Thefollowing smalipatchinjectsalibrarynamedlibinject.so: const-stringv0,\"inject\" invoke-static{v0},Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V Ideally you should insert the above code early in the application lifecycle, for instance in the onCreate method. It is importanttoremembertoaddthelibrarylibinject.sointherespectivearchitecturefolder(armeabi-v7a,arm64-v8a,x86) ofthelibfolderintheAPK.Finally,youneedtore-signtheapplicationbeforeusingit. A well-known use case of this technique is loading the Frida gadget to an application, especially while working on a non-rooteddevice(thisiswhatobjection patchapkbasicallydoes). Patching Application’s Native Library Many Androidapplications use native code in addition to Java code for various performance and security reasons. The", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 69}}