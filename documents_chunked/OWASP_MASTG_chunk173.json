{"text": "-UYourApp -m\"*[NSURL**HTTP*]\" ForaquickstartyoucangothroughtheiOSexamples. Installing Frida on iOS ToconnectFridatoaniOSapp,youneedawaytoinjecttheFridaruntimeintothatapp. Thisiseasytodoonajailbroken device: justinstallfrida-serverthroughCydia. Onceithasbeeninstalled,theFridaserverwillautomaticallyrunwith rootprivileges,allowingyoutoeasilyinjectcodeintoanyprocess. StartCydiaandaddFrida’srepositorybynavigatingtoManage->Sources->Edit->Addandenteringhttps://build.fr ida.re. YoushouldthenbeabletofindandinstalltheFridapackage. Using Frida on iOS ConnectyourdeviceviaUSBandmakesurethatFridaworksbyrunningthefrida-pscommandandtheflag‘-U’.This shouldreturnthelistofprocessesrunningonthedevice: $frida-ps -U PID Name --- ---------------- 963 Mail 952 Safari 416 BTServer 422 BlueTool 791 CalendarWidget 451 CloudKeychainPro 239 CommCenter 764 ContactsCoreSpot (...) Frida Bindings Inordertoextendthescriptingexperience,FridaoffersbindingstoprogramminglanguagessuchasPython,C,NodeJS, andSwift. TakingPythonasanexample,thefirstthingtonoteisthatnofurtherinstallationstepsarerequired. StartyourPython scriptwithimport fridaandyou’rereadytogo. SeethefollowingscriptthatsimplyrunsthepreviousJavaScriptsnip- pet: ##frida_python.py importfrida session =frida.get_usb_device().attach('com.android.chrome') source =\"\"\" Java.perform(function(){ varview=Java.use(\"android.view.View\"); varmethods=view.class.getMethods(); for(vari=0;i<methods.length;i++){ console.log(methods[i].toString()); } }); \"\"\" script =session.create_script(source) script.load() session.detach() 545\\nInthiscase,runningthePythonscript(python3 frida_python.py)hasthesameresultasthepreviousexample: itwill printallmethodsoftheandroid.view.Viewclasstotheterminal. However,youmightwanttoworkwiththatdatafrom Python. Using send instead of console.log will send data in JSON format from JavaScript to Python. Please read the commentsintheexamplebelow: ##python3frida_python_send.py importfrida session =frida.get_usb_device().attach('com.android.chrome') ##1.wewanttostoremethodnamesinsidealist android_view_methods =[] source =\"\"\" Java.perform(function(){ varview=Java.use(\"android.view.View\"); varmethods=view.class.getMethods(); for(vari=0;i<methods.length;i++){ send(methods[i].toString()); } }); \"\"\" script =session.create_script(source) ##2.thisisacallbackfunction,onlymethodnamescontaining\"Text\"willbeappendedtothelist defon_message(message,data): if\"Text\" inmessage['payload']: android_view_methods.append(message['payload']) ##3.wetellthescripttorunourcallbackeachtimeamessageisreceived script.on('message',on_message) script.load() ##4.wedosomethingwiththecollecteddata,inthiscasewejustprintit formethod inandroid_view_methods: print(method) session.detach() Thiseffectivelyfiltersthemethodsandprintsonlytheonescontainingthestring“Text”: $python3frida_python_send.py public boolean android.view.View.canResolveTextAlignment() public boolean android.view.View.canResolveTextDirection() public void android.view.View.setTextAlignment(int) public void android.view.View.setTextDirection(int) public void android.view.View.setTooltipText(java.lang.CharSequence) ... Intheend, itisuptoyoutodecidewherewouldyouliketoworkwiththedata. Sometimesitwillbemoreconvenient todoitfromJavaScriptandinothercasesPythonwillbethebestchoice. Ofcourseyoucanalsosendmessagesfrom Python to JavaScript by using script.post. Refer to the Frida docs for more information about sending and receiving messages. security Platform: ios Availableat: https://ss64.com/osx/security.html securityisamacOScommandtoadministerKeychains,keys,certificatesandtheSecurityframework. SwiftShield Platform: ios Availableat: https://github.com/rockbruno/swiftshield SwiftShieldisatoolthatgeneratesirreversible,encryptednamesforyouriOSproject’sobjects(includingyourPodsand Storyboards). Thisraisesthebarforreverseengineersandwillproducelesshelpfuloutputwhenusingreverseengineering toolssuchasclass-dumpandFrida. 546\\nWarning: SwiftShield irreversibly overwrites all your source files. Ideally, you should have it run only on your CI server,andonreleasebuilds. AsampleSwiftprojectisusedtodemonstratetheusageofSwiftShield. • Checkoutsushi2k/SwiftSecurity. • OpentheprojectinXcodeandmakesurethattheprojectisbuildingsuccessfully(Product/BuildorApple-Key+B). • DownloadthelatestreleaseofSwiftShieldandunzipit. • GotothedirectorywhereyoudownloadedSwiftShieldandcopytheswiftshieldexecutableto/usr/local/bin: cpswiftshield/swiftshield/usr/local/bin/ • InyourterminalgointotheSwiftSecuritydirectory(whichyoucheckedoutinstep1)andexecutethecommand swiftshield(whichyoudownloadedinstep3): $cdSwiftSecurity $swiftshield -automatic -project-root .-automatic-project-file SwiftSecurity.xcodeproj -automatic-project-scheme SwiftSecurity SwiftShield3.4.0 Automaticmode Buildingprojecttogathermodulesandcompilerarguments... --IndexingReverseEngineeringToolsChecker.swift -- FounddeclarationofReverseEngineeringToolsChecker (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC) FounddeclarationofamIReverseEngineered (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC20amIReverseEngineeredSbyFZ) FounddeclarationofcheckDYLD (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC9checkDYLD33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ) FounddeclarationofcheckExistenceOfSuspiciousFiles ↪ (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC31checkExistenceOfSuspiciousFiles33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ) ... SwiftShieldisnowdetectingclassandmethodnamesandisreplacingtheiridentifierwithanencryptedvalue. Intheoriginalsourcecodeyoucanseealltheclassandmethodidentifiers: SwiftShieldwasnowreplacingallofthemwithencryptedvaluesthatleavenotracetotheiroriginalnameorintentionof theclass/method: Afterexecutingswiftshieldanewdirectorywillbecreatedcalledswiftshield-output. Inthisdirectoryanotherdirec- toryiscreatedwithatimestampinthefoldername. ThisdirectorycontainsatextfilecalledconversionMap.txt,that mapstheencryptedstringstotheiroriginalvalues. 547\\n$catconversionMap.txt // //SwiftShieldConversionMap //AutomaticmodeforSwiftSecurity,2020-01-0213.51.03 //Deobfuscatecrashlogs (oranytextfile)byrunning: //swiftshield -deobfuscate CRASH_FILE -deobfuscate_map THIS_FILE // ViewController===>hTOUoUmUcEZUqhVHRrjrMUnYqbdqWByU viewDidLoad===>DLaNRaFbfmdTDuJCPFXrGhsWhoQyKLnO sceneDidBecomeActive===>SUANAnWpkyaIWlGUqwXitCoQSYeVilGe AppDelegate===>KftEWsJcctNEmGuvwZGPbusIxEFOVcIb Deny_Debugger===>lKEITOpOvLWCFgSCKZdUtpuqiwlvxSjx Button_Emulator===>akcVscrZFdBBYqYrcmhhyXAevNdXOKeG Thisisneededfordeobfuscatingencryptedcrashlogs. AnotherexampleprojectisavailableinSwiftShield’sGithubrepo,thatcanbeusedtotesttheexecutionofSwiftShield. MachoOView Platform: ios Availableat: https://sourceforge.net/projects/machoview/ MachoOViewisausefulvisualMach-Ofilebrowserthatalsoallowsin-fileeditingofARMbinaries. Usbmuxd Platform: ios Availableat: https://github.com/libimobiledevice/usbmuxd usbmuxdisasocketdaemonthatmonitorsUSBiPhoneconnections. Youcanuseittomapthemobiledevice’slocalhost listeningsocketstoTCPportsonyourhostcomputer. ThisallowsyoutoconvenientlySSHintoyouriOSdevicewithout settingupanactualnetworkconnection. WhenusbmuxddetectsaniPhonerunninginnormalmode,itconnectstothe phoneandbeginsrelayingrequeststhatitreceivesvia/var/run/usbmuxd. Xcode Platform: ios Availableat: https://developer.apple.com/xcode/ide/ XcodeisanIntegratedDevelopmentEnvironment(IDE)formacOSthatcontainsasuiteoftoolsfordevelopingsoftware formacOS,iOS,watchOS,andtvOS.YoucandownloadXcodeforfreefromtheofficialApplewebsite. Xcodewillofferyou differenttoolsandfunctionstointeractwithaniOSdevicethatcanbehelpfulduringapenetrationtest,suchasanalyzing logsorsideloadingofapps. Frida-ios-dump Platform: ios Availableat: https://github.com/AloneMonkey/frida-ios-dump Frida-ios-dump is a Python script that helps you retrieve the decrypted version of an iOS app (IPA) from an iOS device. ItsupportsbothPython2andPython3andrequiresFridarunningonyouriOSdevice(jailbrokenornot). Thistooluses Frida’sMemoryAPItodumpthememoryoftherunningappandrecreateanIPAfile. Becausethecodeisextractedfrom memory,itisautomaticallydecrypted. 548\\ngdb Platform: ios Availableat: https://cydia.radare.org/pool/main/g/gdb/ AtooltoperformruntimeanalysisofiOSapplications-https://cydia.radare.org/pool/main/g/gdb/ radare2 for iOS Platform: ios Availableat: https://github.com/radare/radare2 Radare2 is a complete framework for reverse-engineering and analyzing binaries. The installation instructions can be foundintheGitHubrepository. Tolearnmoreonradare2youmaywanttoreadtheofficialradare2book. Learnmore: • r2wiki • LoadingiOSbinariestoradare2 • GitHubradare2Docs-iOS Frida-cycript Platform: ios Availableat: https://github.com/nowsecure/frida-cycript AforkofCycriptincludingabrandnewruntimecalledMjølnerpoweredbyFrida. Thisenablesfrida-cycripttorunonall theplatformsandarchitecturesmaintainedbyfrida-core-https://github.com/nowsecure/frida-cycript iProxy Platform: ios Availableat: https://github.com/tcurdt/iProxy AtoolusedtoconnectviaSSHtoajailbrokeniPhoneviaUSB-https://github.com/tcurdt/iProxy nm - iOS Platform: ios Availableat: http://www.manpagez.com/man/1/nm/osx-10.12.6.php nm is a tool that displays the name list (symbol table) of the given binary. You can find here more information for for iOS. SSL Kill Switch 2 Platform: ios Availableat: https://github.com/nabla-c0d3/ssl-kill-switch2 Blackbox tool to disable SSL certificate validation - including certificate pinning - within iOS and macOS Apps - https: //github.com/nabla-c0d3/ssl-kill-switch2 549\\nios-deploy Platform: ios Availableat: https://github.com/ios-control/ios-deploy Withios-deployyoucaninstallanddebugiOSappsfromthecommandline,withoutusingXcode. Itcanbeinstalledvia brewonmacOS: brewinstallios-deploy Alternatively: gitclonehttps://github.com/ios-control/ios-deploy.git cdios-deploy/ xcodebuild cdbuild/Release ./ios-deploy ln-s<your-path-to-ios-deploy>/build/Release/ios-deploy/usr/local/bin/ios-deploy Thelastlinecreatesasymboliclinkandmakestheexecutableavailablesystem-wide. Reloadyourshelltomakethenew commandsavailable: zsh: #.~/.zshrc bash: #.~/.bashrc iOSbackup Platform: ios Availableat: https://github.com/avibrazil/iOSbackup iOSbackupisaPython3classthatreadsandextractsfilesfromapassword-encryptediOSbackupcreatedbyiTuneson MacandWindows. MobSF for iOS Platform: ios Availableat: https://github.com/MobSF/Mobile-Security-Framework-MobSF ByrunningMobSFlocallyonamacOShostyou’llbenefitfromaslightlybetterclass-dumpoutput. OnceyouhaveMobSFupandrunningyoucanopenitinyourbrowserbynavigatingtohttp://127.0.0.1:8000. Simply dragtheIPAyouwanttoanalyzeintotheuploadareaandMobSFwillstartitsjob. AfterMobSFisdonewithitsanalysis,youwillreceiveaone-pageoverviewofalltheteststhatwereexecuted. Thepage issplitupintomultiplesectionsgivingsomefirsthintsontheattacksurfaceoftheapplication. 550\\nThefollowingisdisplayed: • Basicinformationabouttheappanditsbinaryfile. • Someoptionsto: – ViewtheInfo.plistfile. – Viewthestringscontainedintheappbinary. – Download a class-dump, if the app", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 173}}