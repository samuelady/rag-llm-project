{"text": "Typesandit’sreadytoopenfileswiththeextensionslistedinUTTypeTagSpecification/\"public.filename-extension\". Pleasetakeanoteofthisbecauseitwillbeusefulifyouwanttosearchforvulnerabilitieswhendealingwiththedifferent typesoffileswhenperformingdynamicanalysis. Dynamic Analysis Sending Items Therearethreemainthingsyoucaneasilyinspectbyperformingdynamicinstrumentation: • TheactivityItems: anarrayoftheitemsbeingshared. Theymightbeofdifferenttypes,e.g.onestringandone picturetobesharedviaamessagingapp. • TheapplicationActivities: anarrayofUIActivityobjectsrepresentingtheapp’scustomservices. • TheexcludedActivityTypes: anarrayoftheActivityTypesthatarenotsupported,e.g.postToFacebook. Toachievethisyoucandotwothings: 483\\n• Hookthemethodwehaveseeninthestaticanalysis(init(activityItems: applicationActivities:)) toget theactivityItemsandapplicationActivities. • FindouttheexcludedactivitiesbyhookingexcludedActivityTypesproperty. Let’sseeanexampleusingTelegramtoshareapictureandatextfile. Firstpreparethehooks,wewillusetheFridaREPL andwriteascriptforthis: Interceptor.attach( ObjC.classes. UIActivityViewController['-initWithActivityItems:applicationActivities:'].implementation,{ onEnter:function (args){ printHeader(args) this.initWithActivityItems =ObjC.Object(args[2]); this.applicationActivities =ObjC.Object(args[3]); console.log(\"initWithActivityItems:\" +this.initWithActivityItems); console.log(\"applicationActivities:\" +this.applicationActivities); }, onLeave:function (retval){ printRet(retval); } }); Interceptor.attach( ObjC.classes.UIActivityViewController['-excludedActivityTypes'].implementation,{ onEnter:function (args){ printHeader(args) }, onLeave:function (retval){ printRet(retval); } }); function printHeader(args){ console.log(Memory.readUtf8String(args[1])+\"@\" +args[1]) }; function printRet(retval){ console.log('RET@' +retval +':' ); try{ console.log(newObjC.Object(retval).toString()); }catch (e){ console.log(retval.toString()); } }; YoucanstorethisasaJavaScriptfile,e.g.inspect_send_activity_data.jsandloaditlikethis: frida -UTelegram -linspect_send_activity_data.js Nowobservetheoutputwhenyoufirstshareapicture: [*]initWithActivityItems:applicationActivities:@0x18c130c07 initWithActivityItems:( \"<UIImage:0x1c4aa0b40>size{571,264}orientation0scale1.000000\" ) applicationActivities:nil RET@ 0x13cb2b800: <UIActivityViewController:0x13cb2b800> [*]excludedActivityTypes@ 0x18c0f8429 RET@ 0x0: nil andthenatextfile: [*]initWithActivityItems:applicationActivities:@0x18c130c07 initWithActivityItems:( \"<QLActivityItemProvider:0x1c4a30140>\", \"<UIPrintInfo:0x1c0699a50>\" ) applicationActivities:( ) RET@ 0x13c4bdc00: <_UIDICActivityViewController:0x13c4bdc00> [*]excludedActivityTypes@ 0x18c0f8429 484\\nRET@ 0x1c001b1d0: ( \"com.apple.UIKit.activity.MarkupAsPDF\" ) Youcanseethat: • Forthepicture,theactivityitemisaUIImageandtherearenoexcludedactivities. • Forthetextfiletherearetwodifferentactivityitemsandcom.apple.UIKit.activity. MarkupAsPDFisexcluded. In the previous example, there were no custom applicationActivities and only one excluded activity. However, to betterillustratewhatyoucanexpectfromotherappswehavesharedapictureusinganotherapp,hereyoucanseea bunchofapplicationactivitiesandexcludedactivities(outputwaseditedtohidethenameoftheoriginatingapp): [*]initWithActivityItems:applicationActivities:@0x18c130c07 initWithActivityItems:( \"<SomeActivityItemProvider:0x1c04bd580>\" ) applicationActivities:( \"<SomeActionItemActivityAdapter:0x141de83b0>\", \"<SomeActionItemActivityAdapter:0x147971cf0>\", \"<SomeOpenInSafariActivity:0x1479f0030>\", \"<SomeOpenInChromeActivity:0x1c0c8a500>\" ) RET@ 0x142138a00: <SomeActivityViewController:0x142138a00> [*]excludedActivityTypes@ 0x18c0f8429 RET@ 0x14797c3e0: ( \"com.apple.UIKit.activity.Print\", \"com.apple.UIKit.activity.AssignToContact\", \"com.apple.UIKit.activity.SaveToCameraRoll\", \"com.apple.UIKit.activity.CopyToPasteboard\", ) Receiving Items After performing the static analysis you would know the document types that the app can open and if it declares any customdocumenttypesand(partof)themethodsinvolved. Youcanusethisnowtotestthereceivingpart: • ShareafilewiththeappfromanotherapporsenditviaAirDropore-mail. Choosethefilesothatitwilltriggerthe “Openwith...”dialogue(thatis,thereisnodefaultappthatwillopenthefile,aPDFforexample). • Hookapplication:openURL:options: andanyothermethodsthatwereidentifiedinapreviousstaticanalysis. • Observetheappbehavior. • Inaddition,youcouldsendspecificmalformedfilesand/oruseafuzzingtechnique. Toillustratethiswithanexamplewehavechosenthesamereal-worldfilemanagerappfromthestaticanalysissection andfollowedthesesteps: 1. SendaPDFfilefromanotherAppledevice(e.g.aMacBook)viaAirdrop. 2. WaitfortheAirDroppopuptoappearandclickonAccept. 3. Asthereisnodefaultappthatwillopenthefile,itswitchestotheOpenwith...popup. There,wecanselecttheapp thatwillopenourfile. Thenextscreenshotshowsthis(wehavemodifiedthedisplaynameusingFridatoconceal theapp’srealname): 485\\n4. AfterselectingSomeFileManagerwecanseethefollowing: (0x1c4077000) -[AppDelegateapplication:openURL:options:] application: <UIApplication:0x101c00950> openURL:file:///var/mobile/Library/Application%20Support /Containers/com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf options:{ UIApplicationOpenURLOptionsAnnotationKey= { LSMoveDocumentOnOpen= 1; }; UIApplicationOpenURLOptionsOpenInPlaceKey= 0; UIApplicationOpenURLOptionsSourceApplicationKey= \"com.apple.sharingd\"; \"_UIApplicationOpenURLOptionsSourceProcessHandleKey\" =\"<FBSProcessHandle:0x1c3a63140; sharingd:605;valid:YES>\"; } 0x18c7930d8UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke ... 0x1857cdc34FrontBoardServices!-[FBSSerialQueue _performNextFromRunLoopSource] RET:0x1 Asyou cansee, thesending applicationiscom.apple.sharingd andthe URL’sscheme isfile://. Note that oncewe selecttheappthatshouldopenthefile,thesystemalreadymovedthefiletothecorrespondingdestination,thatistothe app’sInbox. TheappsarethenresponsiblefordeletingthefilesinsidetheirInboxes. Thisapp,forexample,movesthe 486\\nfileto/var/mobile/Documents/andremovesitfromtheInbox. (0x1c002c760) -[XXFileManagermoveItemAtPath:toPath:error:] moveItemAtPath:/var/mobile/Library/ApplicationSupport/Containers /com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf toPath:/var/mobile/Documents/OWASP_MASVS (1).pdf error:0x16f095bf8 0x100f24e90SomeFileManager!-[AppDelegate__handleOpenURL:] 0x100f25198SomeFileManager!-[AppDelegateapplication:openURL:options:] 0x18c7930d8UIKit!__58-[UIApplication_applicationOpenURLAction:payload:origin:]_block_invoke ... 0x1857cd9f4FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ RET:0x1 Ifyoulookatthestacktrace,youcanseehowapplication:openURL:options: called__handleOpenURL:,whichcalled moveItemAtPath:toPath:error:. Noticethatwehavenowthisinformationwithouthavingthesourcecodeforthetarget app. Thefirstthingthatwehadtodowasclear: hookapplication:openURL:options:. Regardingtherest,wehadto thinkalittlebitandcomeupwithmethodsthatwecouldstarttracingandarerelatedtothefilemanager,forexample, all methods containing the strings “copy”, “move”, “remove”, etc. until we have found that the one being called was moveItemAtPath:toPath:error:. AfinalthingworthnoticinghereisthatthiswayofhandlingincomingfilesisthesameforcustomURLschemes. Please refertothe“TestingCustomURLSchemes”sectionformoreinformation. Testing Universal Links Platform: ios MASVSV1: MSTG-PLATFORM-4 MASVSV2: MASVS-PLATFORM-1 Overview Static Analysis Testinguniversallinksonastaticapproachincludesdoingthefollowing: • CheckingtheAssociatedDomainsentitlement • RetrievingtheAppleAppSiteAssociationfile • Checkingthelinkreceivermethod • Checkingthedatahandlermethod • Checkingiftheappiscallingotherapp’suniversallinks Checking the Associated Domains Entitlement UniversallinksrequirethedevelopertoaddtheAssociatedDomainsentitlementandincludeinitalistofthedomains thattheappsupports. InXcode,gototheCapabilitiestabandsearchforAssociatedDomains. Youcanalsoinspectthe.entitlementsfile lookingforcom.apple.developer.associated-domains. Eachofthedomainsmustbeprefixedwithapplinks:,suchas applinks:www.mywebsite.com. Here’sanexamplefromTelegram’s.entitlementsfile: <key>com.apple.developer.associated-domains</key> <array> <string>applinks:telegram.me</string> <string>applinks:t.me</string> </array> MoredetailedinformationcanbefoundinthearchivedAppleDeveloperDocumentation. Ifyoudon’thavetheoriginalsourcecodeyoucanstillsearchforthem,asexplainedin“EntitlementsEmbeddedinthe CompiledAppBinary”. 487\\nRetrieving the Apple App Site Association File Try to retrieve the apple-app-site-association file from the server using the associated domains you got from the previousstep. ThisfileneedstobeaccessibleviaHTTPS,withoutanyredirects,athttps://<domain>/apple-app-site- associationorhttps://<domain>/.well-known/apple-app-site-association. You can retrieve it yourself using your browser and navigating to https://<domain>/apple-app-site-association, https://<domain>/.well-known/apple-app-site-association or using Apple’s CDN at https://app-site- association.cdn-apple.com/a/v1/<domain>. Alternatively,youcanusetheAppleAppSiteAssociation(AASA)Validator. Afterenteringthedomain,itwilldisplaythe file,verifyitforyouandshowtheresults(e.g.ifitisnotbeingproperlyservedoverHTTPS).Seethefollowingexample fromapple.comhttps://www.apple.com/.well-known/apple-app-site-association: { \"activitycontinuation\":{ \"apps\":[ \"W74U47NE8E.com.apple.store.Jolly\" ] }, \"applinks\":{ \"apps\":[], \"details\":[ { \"appID\":\"W74U47NE8E.com.apple.store.Jolly\", \"paths\":[ \"NOT/shop/buy-iphone/*\", \"NOT/us/shop/buy-iphone/*\", \"/xc/*\", \"/shop/buy-*\", \"/shop/product/*\", \"/shop/bag/shared_bag/*\", \"/shop/order/list\", \"/today\", \"/shop/watch/watch-accessories\", \"/shop/watch/watch-accessories/*\", \"/shop/watch/bands\", ]}]} } The “details” key inside “applinks” contains a JSON representation of an array that might contain one or more apps. The“appID”shouldmatchthe“application-identifier”keyfromtheapp’sentitlements. Next,usingthe“paths”key,the developers can specify certain paths to be handled on a per app basis. Some apps, like Telegram use a standalone * (\"paths\":[\"*\"])inordertoallowallpossiblepaths. Onlyifspecificareasofthewebsiteshouldnotbehandledbysome app,thedevelopercanrestrictaccessbyexcludingthembyprependinga\"NOT\"(notethewhitespaceaftertheT)tothe correspondingpath. Alsorememberthatthesystemwilllookformatchesbyfollowingtheorderofthedictionariesinthe array(firstmatchwins). Thispathexclusionmechanismisnottobeseenasasecurityfeaturebutratherasafilterthatdevelopermightuseto specifywhichappsopenwhichlinks. Bydefault,iOSdoesnotopenanyunverifiedlinks. Rememberthatuniversallinksverificationoccursatinstallationtime. iOSretrievestheAASAfileforthedeclareddomains (applinks) in its com.apple.developer.associated-domains entitlement. iOS will refuse to open those links if the verificationdidnotsucceed. Somereasonstofailverificationmightinclude: 488\\n• TheAASAfileisnotservedoverHTTPS. • TheAASAisnotavailable. • TheappIDsdonotmatch(thiswouldbethecaseofamaliciousapp). iOSwouldsuccessfullypreventanypossible hijackingattacks. Checking the Link Receiver Method", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 159}}