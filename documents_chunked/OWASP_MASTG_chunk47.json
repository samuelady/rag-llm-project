{"text": "Recommendations in Android Developers TheAndroidDeveloperssiteincludesthefollowingwarning: Caution: CertificatePinningisnotrecommendedforAndroidapplicationsduetothehighriskoffutureservercon- figurationchanges,suchaschangingtoanotherCertificateAuthority,renderingtheapplicationunabletoconnect totheserverwithoutreceivingaclientsoftwareupdate. Theyalsoincludethisnote: 60\\nNotethat,whenusingcertificatepinning,youshouldalwaysincludeabackupkeysothatifyouareforcedtoswitch tonewkeysorchangeCAs(whenpinningtoaCAcertificateoranintermediateofthatCA),yourapp’sconnectivity isunaffected. Otherwise,youmustpushoutanupdatetotheapptorestoreconnectivity. Thefirststatementcanbemistakenlyinterpretedassayingthatthey“donotrecommendcertificatepinning”. Thesecond statement clarifies this: the actual recommendation is that if developers want to implement pinning they have to take thenecessaryprecautions. About Pinning Recommendations in Apple Developers Applerecommendsthinkinglong-termandcreatingaproperserverauthenticationstrategy. OWASP MASTG Recommendation Pinningisarecommendedpractice,especiallyforMASVS-L2apps. However,developersmustimplementitexclusively fortheendpointsundertheircontrolandbesuretoincludebackupkeys(aka. backuppins)andhaveaproperappupdate strategy. Learn more • “AndroidSecurity: SSLPinning” • OWASPCertificatePinningCheatSheet Verifying the TLS Settings Oneofthecoremobileappfunctionsissending/receivingdataoveruntrustednetworksliketheInternet. Ifthedatais notproperlyprotectedintransit, anattackerwithaccesstoanypartofthenetworkinfrastructure(e.g., aWi-Fiaccess point)mayintercept,read,ormodifyit. Thisiswhyplaintextnetworkprotocolsarerarelyadvisable. ThevastmajorityofappsrelyonHTTPforcommunicationwiththebackend. HTTPSwrapsHTTPinanencryptedconnection (theacronymHTTPSoriginallyreferredtoHTTPoverSecureSocketLayer(SSL);SSListhedeprecatedpredecessorofTLS). TLSallowsauthenticationofthebackendserviceandensuresconfidentialityandintegrityofthenetworkdata. Recommended TLS Settings EnsuringproperTLSconfigurationontheserversideisalsoimportant. TheSSLprotocolisdeprecatedandshouldnolonger beused. AlsoTLSv1.0andTLSv1.1haveknownvulnerabilitiesandtheirusageisdeprecatedinallmajorbrowsersby 2020. TLSv1.2andTLSv1.3areconsideredbestpracticeforsecuretransmissionofdata. StartingwithAndroid10(API level 29) TLS v1.3 will be enabled by default for faster and secure communication. The major change with TLS v1.3 is thatcustomizingciphersuitesisnolongerpossibleandthatallofthemareenabledwhenTLSv1.3isenabled,whereas ZeroRoundTrip(0-RTT)modeisn’tsupported. When both the client and server are controlled by the same organization and used only for communicating with one another,youcanincreasesecuritybyhardeningtheconfiguration. If a mobile application connects to a specific server, its networking stack can be tuned to ensure the highest possible security level for the server’s configuration. Lack of support in the underlying operating system may force the mobile applicationtouseaweakerconfiguration. Cipher Suites Terminology Ciphersuiteshavethefollowingstructure: Protocol_KeyExchangeAlgorithm_WITH_BlockCipher_IntegrityCheckAlgorithm Thisstructureincludes: 61\\n• AProtocolusedbythecipher • AKeyExchangeAlgorithmusedbytheserverandtheclienttoauthenticateduringtheTLShandshake • ABlockCipherusedtoencryptthemessagestream • AIntegrityCheckAlgorithmusedtoauthenticatemessages Example: TLS_RSA_WITH_3DES_EDE_CBC_SHA Intheexampleabovetheciphersuitesuses: • TLSasprotocol • RSAAsymmetricencryptionforAuthentication • 3DESforSymmetricencryptionwithEDE_CBCmode • SHAHashalgorithmforintegrity NotethatinTLSv1.3theKeyExchangeAlgorithmisnotpartoftheciphersuite,insteaditisdeterminedduringtheTLS handshake. Inthefollowinglisting,we’llpresentthedifferentalgorithmsofeachpartoftheciphersuite. Protocols: • SSLv1 • SSLv2-RFC6176 • SSLv3-RFC6101 • TLSv1.0-RFC2246 • TLSv1.1-RFC4346 • TLSv1.2-RFC5246 • TLSv1.3-RFC8446 KeyExchangeAlgorithms: • DSA-RFC6979 • ECDSA-RFC6979 • RSA-RFC8017 • DHE-RFC2631-RFC7919 • ECDHE-RFC4492 • PSK-RFC4279 • DSS-FIPS186-4 • DH_anon-RFC2631-RFC7919 • DHE_RSA-RFC2631-RFC7919 • DHE_DSS-RFC2631-RFC7919 • ECDHE_ECDSA-RFC8422 • ECDHE_PSK-RFC8422-RFC5489 • ECDHE_RSA-RFC8422 BlockCiphers: • DES-RFC4772 • DES_CBC-RFC1829 • 3DES-RFC2420 • 3DES_EDE_CBC-RFC2420 • AES_128_CBC-RFC3268 • AES_128_GCM-RFC5288 • AES_256_CBC-RFC3268 • AES_256_GCM-RFC5288 • RC4_40-RFC7465 • RC4_128-RFC7465 • CHACHA20_POLY1305-RFC7905-RFC7539 IntegrityCheckAlgorithms: • MD5-RFC6151 • SHA-RFC6234 • SHA256-RFC6234 62\\n• SHA384-RFC6234 Notethattheefficiencyofaciphersuitedependsontheefficiencyofitsalgorithms. ThefollowingresourcescontainthelatestrecommendedciphersuitestousewithTLS: • IANArecommendedciphersuitescanbefoundinTLSCipherSuites. • OWASPrecommendedciphersuitescanbefoundintheTLSCipherStringCheatSheet. SomeAndroidandiOSversionsdonotsupportsomeoftherecommendedciphersuites,soforcompatibilitypurposesyou cancheckthesupportedciphersuitesforAndroidandiOSversionsandchoosethetopsupportedciphersuites. Ifyouwanttoverifywhetheryourserversupportstherightciphersuites,therearevarioustoolsyoucanuse: • nscurl-seeiOSNetworkCommunicationformoredetails. • testssl.shwhich“isafreecommandlinetoolwhichchecksaserver’sserviceonanyportforthesupportofTLS/SSL ciphers,protocolsaswellassomecryptographicflaws”. Finally,verifythattheserverorterminationproxyatwhichtheHTTPSconnectionterminatesisconfiguredaccordingto best practices. See also the OWASP Transport Layer Protection cheat sheet and the Qualys SSL/TLS Deployment Best Practices. Intercepting HTTP(S) Traffic Inmanycases,itismostpracticaltoconfigureasystemproxyonthemobiledevice,sothatHTTP(S)trafficisredirected throughaninterceptionproxyrunningonyourhostcomputer. Bymonitoringtherequestsbetweenthemobileappclient and the backend, you can easily map the available server-side APIs and gain insight into the communication protocol. Additionally,youcanreplayandmanipulaterequeststotestforserver-sidevulnerabilities. Severalfreeandcommercialproxytoolsareavailable. Herearesomeofthemostpopular: • BurpSuite • OWASPZAP Tousetheinterceptionproxy,you’llneedtorunitonyourhostcomputerandconfigurethemobileapptorouteHTTP(S) requeststoyourproxy. Inmostcases,itisenoughtosetasystem-wideproxyinthenetworksettingsofthemobiledevice -iftheappusesstandardHTTPAPIsorpopularlibrariessuchasokhttp,itwillautomaticallyusethesystemsettings. UsingaproxybreaksSSLcertificateverificationandtheappwillusuallyfailtoinitiateTLSconnections. Toworkaround thisissue,youcaninstallyourproxy’sCAcertificateonthedevice. We’llexplainhowtodothisintheOS-specific“Basic SecurityTesting”chapters. 63\\nIntercepting Non-HTTP Traffic InterceptionproxiessuchasBurpandOWASPZAPwon’tshownon-HTTPtraffic,becausetheyaren’tcapableofdecoding itproperlybydefault. Thereare,however,Burppluginsavailablesuchas: • Burp-non-HTTP-Extensionand • Mitm-relay. Thesepluginscanvisualizenon-HTTPprotocolsandyouwillalsobeabletointerceptandmanipulatethetraffic. NotethatthissetupcansometimesbecomeverytediousandisnotasstraightforwardastestingHTTP. Intercepting Traffic from the App Process Dependingonyourgoalwhiletestingtheapp,sometimesitisenoughtomonitorthetrafficbeforeitreachesthenetwork layerorwhentheresponsesarereceivedintheapp. Youdon’tneedtodeployafullyfledgedMITMattackifyousimplywanttoknowifacertainpieceofsensitivedataisbeing transmittedtothenetwork. Inthiscaseyouwouldn’tevenhavetobypasspinning,ifimplemented. Youjusthavetohook therightfunctions,e.g.SSL_writeandSSL_readfromopenssl. This would work pretty well for apps using standard API libraries functions and classes, however there might be some downsides: • theappmightimplementacustomnetworkstackandyou’llhavetospendtimeanalyzingtheapptofindoutthe APIsthatyoucanuse. Seesection“SearchingforOpenSSLtraceswithsignatureanalysis”inthisblogpost. • itmightbeverytimeconsumingtocrafttherighthookingscriptstore-assembleHTTPresponsepairs(acrossmany methodcallsandexecutionthreads). Youmightfindready-madescriptsandevenforalternativenetworkstacks butdependingontheappandtheplatformthesescriptsmightneedalotofmaintenanceandmightnotalways work. Seesomeexamples: • “Universal interception. How to bypass SSL Pinning and monitor traffic of any application”, sections “Grabbing payloadpriortotransmission”and“Grabbingpayloadpriortoencryption” • “FridaasanAlternativetoNetworkTracing” ThistechniqueisalsousefulforothertypesoftrafficsuchasBLE,NFC,etc. wheredeployingaMITMattackmight beverycostlyandorcomplex. Intercepting Traffic on the Network Layer Dynamicanalysisbyusinganinterceptionproxycanbestraightforwardifstandardlibrariesareusedintheappandall communicationisdoneviaHTTP.Butthereareseveralcaseswherethisisnotworking: • IfmobileapplicationdevelopmentplatformslikeXamarinareusedthatignorethesystemproxysettings; • Ifmobileapplicationsverifyifthesystemproxyisusedandrefusetosendrequeststhroughaproxy; • Ifyouwanttointerceptpushnotifications,likeforexampleGCM/FCMonAndroid; • IfXMPPorothernon-HTTPprotocolsareused. Inthesecasesyouneedtomonitorandanalyzethenetworktrafficfirstinordertodecidewhattodonext. Luckily,there areseveraloptionsforredirectingandinterceptingnetworkcommunication: • Routethetrafficthroughthehostcomputer. Youcansetuphostcomputerasthenetworkgateway,e.g.byusing thebuilt-inInternetSharingfacilitiesofyouroperatingsystem. YoucanthenuseWiresharktosniffanytrafficfrom themobiledevice. • Sometimes you need to execute a MITM attack to force the mobile device to talk to you. For this scenario you shouldconsiderbettercaporuseyourownaccesspointtoredirectnetworktrafficfromthemobiledevicetoyour hostcomputer(seebelow). 64\\n• Onarooteddevice,youcanusehookingorcodeinjectiontointerceptnetwork-relatedAPIcalls(e.g.HTTPrequests) anddumporevenmanipulatetheargumentsofthesecalls. Thiseliminatestheneedtoinspecttheactualnetwork data. We’lltalkinmoredetailaboutthesetechniquesinthe“ReverseEngineeringandTampering”chapters. • OnmacOS,youcancreatea“RemoteVirtualInterface”forsniffingalltrafficonaniOSdevice. We’lldescribethis methodinthechapter“BasicSecurityTestingoniOS”. Simulating a Man-in-the-Middle Attack with bettercap Network Setup Tobeabletogetaman-in-the-middlepositionyourhostcomputershouldbeinthesamewirelessnetworkasthemobile phoneandthegatewayitcommunicatesto. OncethisisdoneyouneedtheIPaddressofyourmobilephone. Forafull dynamicanalysisofamobileapp,allnetworktrafficshouldbeintercepted. MITM Attack Start your preferred network analyzer tool first, then start", "metadata": {"doc_id": "OWASP_MASTG", "chunk_id": 47}}